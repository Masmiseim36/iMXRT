/*
** ###################################################################
**     Processor:           MIMXRT555SFFOB
**     Compilers:           GNU C Compiler
**                          IAR ANSI C/C++ Compiler for ARM
**                          Keil ARM C/C++ Compiler
**
**     Reference manual:    RT500 Reference Manual. Rev.A, 3/2020
**     Version:             rev. 3.0, 2020-03-16
**     Build:               b200407
**
**     Abstract:
**         This header file implements peripheral memory map for MIMXRT555S
**         processor.
**
**     Copyright 1997-2016 Freescale Semiconductor, Inc.
**     Copyright 2016-2020 NXP
**     All rights reserved.
**
**     SPDX-License-Identifier: BSD-3-Clause
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
**     Revisions:
**     - rev. 1.0 (2019-04-19)
**         Initial version.
**     - rev. 2.0 (2019-07-22)
**         Base on rev 0.7 RM.
**     - rev. 3.0 (2020-03-16)
**         Base on Rev.A RM.
**
** ###################################################################
*/

/*!
 * @file MIMXRT555S.h
 * @version 3.0
 * @date 2020-03-16
 * @brief Peripheral memory map for MIMXRT555S
 *
 * This header file implements peripheral memory map for MIMXRT555S processor.
 */


/* ----------------------------------------------------------------------------
   -- MCU activation
   ---------------------------------------------------------------------------- */

/* Prevention from multiple including the same memory map */
#if !defined(MCU_MIMXRT555S)  /* Check if memory map has not been already included */
#define MCU_MIMXRT555S

/* Check if another memory map has not been also included */
#if (defined(MCU_ACTIVE))
  #error MIMXRT555S memory map: There is already included another memory map. Only one memory map can be included.
#endif /* (defined(MCU_ACTIVE)) */
#define MCU_ACTIVE

#include <stdint.h>

/** Memory map major version (memory maps with equal major version number are
 * compatible) */
#define MCU_MEM_MAP_VERSION 0x0300U
/** Memory map minor version */
#define MCU_MEM_MAP_VERSION_MINOR 0x0000U


/* ----------------------------------------------------------------------------
   -- Interrupt vector numbers
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Interrupt_vector_numbers Interrupt vector numbers
 * @{
 */

/** Interrupt Number Definitions */
typedef enum {
  INT_Initial_Stack_Pointer    = 0,                /**< Initial Stack Pointer */
  INT_Initial_Program_Counter  = 1,                /**< Initial Program Counter */
  INT_NMI                      = 2,                /**< Non-maskable Interrupt (NMI) */
  INT_Hard_Fault               = 3,                /**< Hard Fault */
  INT_Mem_Manage_Fault         = 4,                /**< Memory manage fault */
  INT_Bus_Fault                = 5,                /**< Bus Fault */
  INT_Usage_Fault              = 6,                /**< Usage Fault */
  INT_Secure_Fault             = 7,                /**< Secure Fault */
  INT_Reserved8                = 8,                /**< Reserved interrupt */
  INT_Reserved9                = 9,                /**< Reserved interrupt */
  INT_Reserved10               = 10,               /**< Reserved interrupt */
  INT_SVCall                   = 11,               /**< Supervisor call (SVCall) */
  INT_DebugMonitor             = 12,               /**< Debug Monitor */
  INT_Reserved13               = 13,               /**< Reserved interrupt */
  INT_PendableSrvReq           = 14,               /**< Pendable request for system service (PendableSrvReq) */
  INT_SysTick                  = 15,               /**< System tick timer (SysTick) */
  INT_WDT0                     = 16,               /**< Watchdog timer interrupt */
  INT_DMA0                     = 17,               /**< DMA interrupt */
  INT_GPIO_INTA                = 18,               /**< GPIO Interrupt A */
  INT_GPIO_INTB                = 19,               /**< GPIO Interrupt B */
  INT_PIN_INT0                 = 20,               /**< General Purpose Input/Output interrupt 0 */
  INT_PIN_INT1                 = 21,               /**< General Purpose Input/Output interrupt 1 */
  INT_PIN_INT2                 = 22,               /**< General Purpose Input/Output interrupt 2 */
  INT_PIN_INT3                 = 23,               /**< General Purpose Input/Output interrupt 3 */
  INT_UTICK0                   = 24,               /**< Micro-tick Timer */
  INT_MRT0                     = 25,               /**< Multi-Rate Timer */
  INT_CTIMER0                  = 26,               /**< Standard counter/timer CTIMER0 */
  INT_CTIMER1                  = 27,               /**< Standard counter/timer CTIMER1 */
  INT_SCT0                     = 28,               /**< SCTimer/PWM */
  INT_CTIMER3                  = 29,               /**< Standard counter/timer CTIMER3 */
  INT_FLEXCOMM0                = 30,               /**< FlexComm interrupt */
  INT_FLEXCOMM1                = 31,               /**< FlexComm interrupt */
  INT_FLEXCOMM2                = 32,               /**< FlexComm interrupt */
  INT_FLEXCOMM3                = 33,               /**< FlexComm interrupt */
  INT_FLEXCOMM4                = 34,               /**< FlexComm interrupt */
  INT_FLEXCOMM5                = 35,               /**< FlexComm interrupt */
  INT_FLEXCOMM14               = 36,               /**< FlexComm interrupt. Standalone SPI */
  INT_FLEXCOMM15               = 37,               /**< FlexComm interrupt. Standalone I2C */
  INT_ADC0                     = 38,               /**< Analog-to-Digital Converter interrupt */
  INT_Reserved39               = 39,               /**< Reserved interrupt */
  INT_ACMP                     = 40,               /**< Analog comparator Interrupts */
  INT_DMIC0                    = 41,               /**< Digital Microphone Interface interrupt */
  INT_Reserved42               = 42,               /**< Reserved interrupt */
  INT_HYPERVISOR               = 43,               /**< Hypervisor interrupt */
  INT_SECURE_VIOLATION         = 44,               /**< Secure violation interrupt */
  INT_HWVAD0                   = 45,               /**< Hardware Voice Activity Detector interrupt */
  INT_Reserved46               = 46,               /**< Reserved interrupt */
  INT_RNG                      = 47,               /**< Random Number Generator interrupt */
  INT_RTC                      = 48,               /**< Real Time Clock Alarm interrupt OR Wakeup timer interrupt */
  INT_MU_A                     = 50,               /**< Messaging Unit - Side A */
  INT_PIN_INT4                 = 51,               /**< General Purpose Input/Output interrupt 4 */
  INT_PIN_INT5                 = 52,               /**< General Purpose Input/Output interrupt 5 */
  INT_PIN_INT6                 = 53,               /**< General Purpose Input/Output interrupt 6 */
  INT_PIN_INT7                 = 54,               /**< General Purpose Input/Output interrupt 7 */
  INT_CTIMER2                  = 55,               /**< Standard counter/timer CTIMER2 */
  INT_CTIMER4                  = 56,               /**< Standard counter/timer CTIMER4 */
  INT_OS_EVENT                 = 57,               /**< Event timer M33 Wakeup/interrupt */
  INT_FLEXSPI0_FLEXSPI1        = 58,               /**< FlexSPI0_IRQ OR FlexSPI1_IRQ */
  INT_FLEXCOMM6                = 59,               /**< FlexComm interrupt */
  INT_FLEXCOMM7                = 60,               /**< FlexComm interrupt */
  INT_USDHC0                   = 61,               /**< USDHC interrupt */
  INT_USDHC1                   = 62,               /**< USDHC interrupt */
  INT_SGPIO_INTA               = 63,               /**< Secure GPIO HS interrupt 0 */
  INT_SGPIO_INTB               = 64,               /**< Secure GPIO HS interrupt 1 */
  INT_I3C0                     = 65,               /**< Improved Inter Integrated Circuit 0 interrupt */
  INT_USB0                     = 66,               /**< USB device */
  INT_USB0_NEEDCLK             = 67,               /**< USB Activity Wake-up Interrupt */
  INT_WDT1                     = 68,               /**< Watchdog timer 1 interrupt */
  INT_USB_PHYDCD               = 69,               /**< USBPHY DCD interrupt */
  INT_DMA1                     = 70,               /**< DMA interrupt */
  INT_PUF                      = 71,               /**< QuidKey interrupt */
  INT_POWERQUAD                = 72,               /**< Powerquad interrupt */
  INT_CASPER                   = 73,               /**< Caspar interrupt */
  INT_PMU_PMIC                 = 74,               /**< Power Management Control interrupt */
  INT_HASHCRYPT                = 75,               /**< SHA interrupt */
  INT_FLEXCOMM8                = 76,               /**< FlexComm interrupt */
  INT_FLEXCOMM9                = 77,               /**< FlexComm interrupt */
  INT_FLEXCOMM10               = 78,               /**< FlexComm interrupt */
  INT_FLEXCOMM11               = 79,               /**< FlexComm interrupt */
  INT_FLEXCOMM12               = 80,               /**< FlexComm interrupt */
  INT_FLEXCOMM13               = 81,               /**< FlexComm interrupt */
  INT_FLEXCOMM16               = 82,               /**< FlexComm interrupt */
  INT_I3C1                     = 83,               /**< Improved Inter Integrated Circuit 1 interrupt */
  INT_FLEXIO                   = 84,               /**< Flexible I/O interrupt */
  INT_LCDIF                    = 85,               /**< Liquid Crystal Display interface interrupt */
  INT_GPU                      = 86,               /**< Graphics Processor Unit interrupt */
  INT_MIPI                     = 87,               /**< MIPI interrupt */
  INT_Reserved88               = 88,
  INT_SDMA                     = 89                /**< Smart DMA Engine Controller interrupt */
} IRQInterruptIndex;

/*!
 * @}
 */ /* end of group Interrupt_vector_numbers */


/* ----------------------------------------------------------------------------
   -- Peripheral type defines
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Peripheral_defines Peripheral type defines
 * @{
 */


/*
** Start of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic push
  #else
    #pragma push
    #pragma anon_unions
  #endif
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=extended
#else
  #error Not supported compiler type
#endif

/* ----------------------------------------------------------------------------
   -- ADC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_Peripheral ADC
 * @{
 */

/** ADC - Peripheral register structure */
typedef struct ADC_MemMap {
  uint32_t VERID;                                  /**< Version ID Register, offset: 0x0 */
  uint32_t PARAM;                                  /**< Parameter Register, offset: 0x4 */
  uint8_t RESERVED_0[8];
  uint32_t CTRL;                                   /**< ADC Control Register, offset: 0x10 */
  uint32_t STAT;                                   /**< ADC Status Register, offset: 0x14 */
  uint32_t IE;                                     /**< Interrupt Enable Register, offset: 0x18 */
  uint32_t DE;                                     /**< DMA Enable Register, offset: 0x1C */
  uint32_t CFG;                                    /**< ADC Configuration Register, offset: 0x20 */
  uint32_t PAUSE;                                  /**< ADC Pause Register, offset: 0x24 */
  uint8_t RESERVED_1[12];
  uint32_t SWTRIG;                                 /**< Software Trigger Register, offset: 0x34 */
  uint32_t TSTAT;                                  /**< Trigger Status Register, offset: 0x38 */
  uint8_t RESERVED_2[100];
  uint32_t TCTRL[16];                              /**< Trigger Control Register, array offset: 0xA0, array step: 0x4 */
  uint32_t FCTRL[2];                               /**< FIFO Control Register, array offset: 0xE0, array step: 0x4 */
  uint8_t RESERVED_3[24];
  struct {                                         /* offset: 0x100, array step: 0x8 */
    uint32_t CMDL;                                   /**< ADC Command Low Buffer Register, array offset: 0x100, array step: 0x8 */
    uint32_t CMDH;                                   /**< ADC Command High Buffer Register, array offset: 0x104, array step: 0x8 */
  } CMD[15];
  uint8_t RESERVED_4[136];
  uint32_t CV[4];                                  /**< Compare Value Register, array offset: 0x200, array step: 0x4 */
  uint8_t RESERVED_5[240];
  uint32_t RESFIFO[2];                             /**< ADC Data Result FIFO Register, array offset: 0x300, array step: 0x4 */
} volatile *ADC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ADC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_Register_Accessor_Macros ADC - Register accessor macros
 * @{
 */


/* ADC - Register accessors */
#define ADC_VERID_REG(base)                      ((base)->VERID)
#define ADC_PARAM_REG(base)                      ((base)->PARAM)
#define ADC_CTRL_REG(base)                       ((base)->CTRL)
#define ADC_STAT_REG(base)                       ((base)->STAT)
#define ADC_IE_REG(base)                         ((base)->IE)
#define ADC_DE_REG(base)                         ((base)->DE)
#define ADC_CFG_REG(base)                        ((base)->CFG)
#define ADC_PAUSE_REG(base)                      ((base)->PAUSE)
#define ADC_SWTRIG_REG(base)                     ((base)->SWTRIG)
#define ADC_TSTAT_REG(base)                      ((base)->TSTAT)
#define ADC_TCTRL_REG(base,index)                ((base)->TCTRL[index])
#define ADC_FCTRL_REG(base,index)                ((base)->FCTRL[index])
#define ADC_CMDL_REG(base,index)                 ((base)->CMD[index].CMDL)
#define ADC_CMDH_REG(base,index)                 ((base)->CMD[index].CMDH)
#define ADC_CV_REG(base,index)                   ((base)->CV[index])
#define ADC_RESFIFO_REG(base,index)              ((base)->RESFIFO[index])

/*!
 * @}
 */ /* end of group ADC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ADC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_Register_Masks ADC Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
/*! @{ */
#define ADC_VERID_RES_MASK                       (0x1U)
#define ADC_VERID_RES_SHIFT                      (0U)
#define ADC_VERID_DIFFEN_MASK                    (0x2U)
#define ADC_VERID_DIFFEN_SHIFT                   (1U)
#define ADC_VERID_MVI_MASK                       (0x8U)
#define ADC_VERID_MVI_SHIFT                      (3U)
#define ADC_VERID_CSW_MASK                       (0x70U)
#define ADC_VERID_CSW_SHIFT                      (4U)
/*! CSW - Channel Scale Width
 *  0b000..Channel scaling not supported.
 *  0b001..Channel scaling supported. 1-bit CSCALE control field.
 *  0b110..Channel scaling supported. 6-bit CSCALE control field.
 */
#define ADC_VERID_CSW(x)                         (((uint32_t)(((uint32_t)(x)) << ADC_VERID_CSW_SHIFT)) & ADC_VERID_CSW_MASK)
#define ADC_VERID_VR1RNGI_MASK                   (0x100U)
#define ADC_VERID_VR1RNGI_SHIFT                  (8U)
#define ADC_VERID_IADCKI_MASK                    (0x200U)
#define ADC_VERID_IADCKI_SHIFT                   (9U)
#define ADC_VERID_CALOFSI_MASK                   (0x400U)
#define ADC_VERID_CALOFSI_SHIFT                  (10U)
#define ADC_VERID_NUM_SEC_MASK                   (0x800U)
#define ADC_VERID_NUM_SEC_SHIFT                  (11U)
#define ADC_VERID_NUM_FIFO_MASK                  (0x7000U)
#define ADC_VERID_NUM_FIFO_SHIFT                 (12U)
/*! NUM_FIFO - Number of FIFOs
 *  0b000..N/A
 *  0b001..This design supports one result FIFO.
 *  0b010..This design supports two result FIFOs.
 *  0b011..This design supports three result FIFOs.
 *  0b100..This design supports four result FIFOs.
 */
#define ADC_VERID_NUM_FIFO(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_VERID_NUM_FIFO_SHIFT)) & ADC_VERID_NUM_FIFO_MASK)
#define ADC_VERID_MINOR_MASK                     (0xFF0000U)
#define ADC_VERID_MINOR_SHIFT                    (16U)
/*! MINOR - Minor Version Number
 */
#define ADC_VERID_MINOR(x)                       (((uint32_t)(((uint32_t)(x)) << ADC_VERID_MINOR_SHIFT)) & ADC_VERID_MINOR_MASK)
#define ADC_VERID_MAJOR_MASK                     (0xFF000000U)
#define ADC_VERID_MAJOR_SHIFT                    (24U)
/*! MAJOR - Major Version Number
 */
#define ADC_VERID_MAJOR(x)                       (((uint32_t)(((uint32_t)(x)) << ADC_VERID_MAJOR_SHIFT)) & ADC_VERID_MAJOR_MASK)
/*! @} */

/*! @name PARAM - Parameter Register */
/*! @{ */
#define ADC_PARAM_TRIG_NUM_MASK                  (0xFFU)
#define ADC_PARAM_TRIG_NUM_SHIFT                 (0U)
/*! TRIG_NUM - Trigger Number
 */
#define ADC_PARAM_TRIG_NUM(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_PARAM_TRIG_NUM_SHIFT)) & ADC_PARAM_TRIG_NUM_MASK)
#define ADC_PARAM_FIFOSIZE_MASK                  (0xFF00U)
#define ADC_PARAM_FIFOSIZE_SHIFT                 (8U)
/*! FIFOSIZE - Result FIFO Depth
 *  0b00000001..Result FIFO depth = 1 dataword.
 *  0b00000100..Result FIFO depth = 4 datawords.
 *  0b00001000..Result FIFO depth = 8 datawords.
 *  0b00010000..Result FIFO depth = 16 datawords.
 *  0b00100000..Result FIFO depth = 32 datawords.
 *  0b01000000..Result FIFO depth = 64 datawords.
 */
#define ADC_PARAM_FIFOSIZE(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_PARAM_FIFOSIZE_SHIFT)) & ADC_PARAM_FIFOSIZE_MASK)
#define ADC_PARAM_CV_NUM_MASK                    (0xFF0000U)
#define ADC_PARAM_CV_NUM_SHIFT                   (16U)
/*! CV_NUM - Compare Value Number
 */
#define ADC_PARAM_CV_NUM(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_PARAM_CV_NUM_SHIFT)) & ADC_PARAM_CV_NUM_MASK)
#define ADC_PARAM_CMD_NUM_MASK                   (0xFF000000U)
#define ADC_PARAM_CMD_NUM_SHIFT                  (24U)
/*! CMD_NUM - Command Buffer Number
 */
#define ADC_PARAM_CMD_NUM(x)                     (((uint32_t)(((uint32_t)(x)) << ADC_PARAM_CMD_NUM_SHIFT)) & ADC_PARAM_CMD_NUM_MASK)
/*! @} */

/*! @name CTRL - ADC Control Register */
/*! @{ */
#define ADC_CTRL_ADCEN_MASK                      (0x1U)
#define ADC_CTRL_ADCEN_SHIFT                     (0U)
#define ADC_CTRL_RST_MASK                        (0x2U)
#define ADC_CTRL_RST_SHIFT                       (1U)
#define ADC_CTRL_DOZEN_MASK                      (0x4U)
#define ADC_CTRL_DOZEN_SHIFT                     (2U)
#define ADC_CTRL_RSTFIFO0_MASK                   (0x100U)
#define ADC_CTRL_RSTFIFO0_SHIFT                  (8U)
#define ADC_CTRL_RSTFIFO1_MASK                   (0x200U)
#define ADC_CTRL_RSTFIFO1_SHIFT                  (9U)
/*! @} */

/*! @name STAT - ADC Status Register */
/*! @{ */
#define ADC_STAT_RDY0_MASK                       (0x1U)
#define ADC_STAT_RDY0_SHIFT                      (0U)
#define ADC_STAT_FOF0_MASK                       (0x2U)
#define ADC_STAT_FOF0_SHIFT                      (1U)
#define ADC_STAT_RDY1_MASK                       (0x4U)
#define ADC_STAT_RDY1_SHIFT                      (2U)
#define ADC_STAT_FOF1_MASK                       (0x8U)
#define ADC_STAT_FOF1_SHIFT                      (3U)
#define ADC_STAT_TEXC_INT_MASK                   (0x100U)
#define ADC_STAT_TEXC_INT_SHIFT                  (8U)
#define ADC_STAT_TCOMP_INT_MASK                  (0x200U)
#define ADC_STAT_TCOMP_INT_SHIFT                 (9U)
#define ADC_STAT_ADC_ACTIVE_MASK                 (0x800U)
#define ADC_STAT_ADC_ACTIVE_SHIFT                (11U)
#define ADC_STAT_TRGACT_MASK                     (0xF0000U)
#define ADC_STAT_TRGACT_SHIFT                    (16U)
/*! TRGACT - Trigger Active
 *  0b0000..Command (sequence) associated with Trigger 0 currently being executed.
 *  0b0001..Command (sequence) associated with Trigger 1 currently being executed.
 *  0b0010..Command (sequence) associated with Trigger 2 currently being executed.
 *  0b0011-0b1111..Command (sequence) from the associated Trigger number is currently being executed.
 */
#define ADC_STAT_TRGACT(x)                       (((uint32_t)(((uint32_t)(x)) << ADC_STAT_TRGACT_SHIFT)) & ADC_STAT_TRGACT_MASK)
#define ADC_STAT_CMDACT_MASK                     (0xF000000U)
#define ADC_STAT_CMDACT_SHIFT                    (24U)
/*! CMDACT - Command Active
 *  0b0000..No command is currently in progress.
 *  0b0001..Command 1 currently being executed.
 *  0b0010..Command 2 currently being executed.
 *  0b0011-0b1111..Associated command number is currently being executed.
 */
#define ADC_STAT_CMDACT(x)                       (((uint32_t)(((uint32_t)(x)) << ADC_STAT_CMDACT_SHIFT)) & ADC_STAT_CMDACT_MASK)
/*! @} */

/*! @name IE - Interrupt Enable Register */
/*! @{ */
#define ADC_IE_FWMIE0_MASK                       (0x1U)
#define ADC_IE_FWMIE0_SHIFT                      (0U)
#define ADC_IE_FOFIE0_MASK                       (0x2U)
#define ADC_IE_FOFIE0_SHIFT                      (1U)
#define ADC_IE_FWMIE1_MASK                       (0x4U)
#define ADC_IE_FWMIE1_SHIFT                      (2U)
#define ADC_IE_FOFIE1_MASK                       (0x8U)
#define ADC_IE_FOFIE1_SHIFT                      (3U)
#define ADC_IE_TEXC_IE_MASK                      (0x100U)
#define ADC_IE_TEXC_IE_SHIFT                     (8U)
#define ADC_IE_TCOMP_IE_MASK                     (0xFFFF0000U)
#define ADC_IE_TCOMP_IE_SHIFT                    (16U)
/*! TCOMP_IE - Trigger Completion Interrupt Enable
 *  0b0000000000000000..Trigger completion interrupts are disabled.
 *  0b0000000000000001..Trigger completion interrupts are enabled for trigger source 0 only.
 *  0b0000000000000010..Trigger completion interrupts are enabled for trigger source 1 only.
 *  0b0000000000000011-0b1111111111111110..Associated trigger completion interrupts are enabled.
 *  0b1111111111111111..Trigger completion interrupts are enabled for every trigger source.
 */
#define ADC_IE_TCOMP_IE(x)                       (((uint32_t)(((uint32_t)(x)) << ADC_IE_TCOMP_IE_SHIFT)) & ADC_IE_TCOMP_IE_MASK)
/*! @} */

/*! @name DE - DMA Enable Register */
/*! @{ */
#define ADC_DE_FWMDE0_MASK                       (0x1U)
#define ADC_DE_FWMDE0_SHIFT                      (0U)
#define ADC_DE_FWMDE1_MASK                       (0x2U)
#define ADC_DE_FWMDE1_SHIFT                      (1U)
/*! @} */

/*! @name CFG - ADC Configuration Register */
/*! @{ */
#define ADC_CFG_TPRICTRL_MASK                    (0x3U)
#define ADC_CFG_TPRICTRL_SHIFT                   (0U)
/*! TPRICTRL - ADC trigger priority control
 *  0b00..If a higher priority trigger is detected during command processing, the current conversion is aborted
 *        and the new command specified by the trigger is started.
 *  0b01..If a higher priority trigger is received during command processing, the current command is stopped after
 *        after completing the current conversion. If averaging is enabled, the averaging loop will be completed.
 *        However, CMDHa[LOOP] will be ignored and the higher priority trigger will be serviced.
 *  0b10..If a higher priority trigger is received during command processing, the current command will be
 *        completed (averaging, looping, compare) before servicing the higher priority trigger.
 *  0b11..RESERVED
 */
#define ADC_CFG_TPRICTRL(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_CFG_TPRICTRL_SHIFT)) & ADC_CFG_TPRICTRL_MASK)
#define ADC_CFG_PWRSEL_MASK                      (0x30U)
#define ADC_CFG_PWRSEL_SHIFT                     (4U)
/*! PWRSEL - Power Configuration Select
 *  0b00..Lowest power setting.
 *  0b01..Higher power setting than 0b0.
 *  0b10..Higher power setting than 0b1.
 *  0b11..Highest power setting.
 */
#define ADC_CFG_PWRSEL(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_CFG_PWRSEL_SHIFT)) & ADC_CFG_PWRSEL_MASK)
#define ADC_CFG_REFSEL_MASK                      (0xC0U)
#define ADC_CFG_REFSEL_SHIFT                     (6U)
/*! REFSEL - Voltage Reference Selection
 *  0b00..(Default) Option 1 setting.
 *  0b01..Option 2 setting.
 *  0b10..Option 3 setting.
 *  0b11..Reserved
 */
#define ADC_CFG_REFSEL(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_CFG_REFSEL_SHIFT)) & ADC_CFG_REFSEL_MASK)
#define ADC_CFG_TRES_MASK                        (0x100U)
#define ADC_CFG_TRES_SHIFT                       (8U)
#define ADC_CFG_TCMDRES_MASK                     (0x200U)
#define ADC_CFG_TCMDRES_SHIFT                    (9U)
#define ADC_CFG_HPT_EXDI_MASK                    (0x400U)
#define ADC_CFG_HPT_EXDI_SHIFT                   (10U)
#define ADC_CFG_PUDLY_MASK                       (0xFF0000U)
#define ADC_CFG_PUDLY_SHIFT                      (16U)
/*! PUDLY - Power Up Delay
 */
#define ADC_CFG_PUDLY(x)                         (((uint32_t)(((uint32_t)(x)) << ADC_CFG_PUDLY_SHIFT)) & ADC_CFG_PUDLY_MASK)
#define ADC_CFG_PWREN_MASK                       (0x10000000U)
#define ADC_CFG_PWREN_SHIFT                      (28U)
/*! @} */

/*! @name PAUSE - ADC Pause Register */
/*! @{ */
#define ADC_PAUSE_PAUSEDLY_MASK                  (0x1FFU)
#define ADC_PAUSE_PAUSEDLY_SHIFT                 (0U)
/*! PAUSEDLY - Pause Delay
 */
#define ADC_PAUSE_PAUSEDLY(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_PAUSE_PAUSEDLY_SHIFT)) & ADC_PAUSE_PAUSEDLY_MASK)
#define ADC_PAUSE_PAUSEEN_MASK                   (0x80000000U)
#define ADC_PAUSE_PAUSEEN_SHIFT                  (31U)
/*! @} */

/*! @name SWTRIG - Software Trigger Register */
/*! @{ */
#define ADC_SWTRIG_SWT0_MASK                     (0x1U)
#define ADC_SWTRIG_SWT0_SHIFT                    (0U)
#define ADC_SWTRIG_SWT1_MASK                     (0x2U)
#define ADC_SWTRIG_SWT1_SHIFT                    (1U)
#define ADC_SWTRIG_SWT2_MASK                     (0x4U)
#define ADC_SWTRIG_SWT2_SHIFT                    (2U)
#define ADC_SWTRIG_SWT3_MASK                     (0x8U)
#define ADC_SWTRIG_SWT3_SHIFT                    (3U)
#define ADC_SWTRIG_SWT4_MASK                     (0x10U)
#define ADC_SWTRIG_SWT4_SHIFT                    (4U)
#define ADC_SWTRIG_SWT5_MASK                     (0x20U)
#define ADC_SWTRIG_SWT5_SHIFT                    (5U)
#define ADC_SWTRIG_SWT6_MASK                     (0x40U)
#define ADC_SWTRIG_SWT6_SHIFT                    (6U)
#define ADC_SWTRIG_SWT7_MASK                     (0x80U)
#define ADC_SWTRIG_SWT7_SHIFT                    (7U)
#define ADC_SWTRIG_SWT8_MASK                     (0x100U)
#define ADC_SWTRIG_SWT8_SHIFT                    (8U)
#define ADC_SWTRIG_SWT9_MASK                     (0x200U)
#define ADC_SWTRIG_SWT9_SHIFT                    (9U)
#define ADC_SWTRIG_SWT10_MASK                    (0x400U)
#define ADC_SWTRIG_SWT10_SHIFT                   (10U)
#define ADC_SWTRIG_SWT11_MASK                    (0x800U)
#define ADC_SWTRIG_SWT11_SHIFT                   (11U)
#define ADC_SWTRIG_SWT12_MASK                    (0x1000U)
#define ADC_SWTRIG_SWT12_SHIFT                   (12U)
#define ADC_SWTRIG_SWT13_MASK                    (0x2000U)
#define ADC_SWTRIG_SWT13_SHIFT                   (13U)
#define ADC_SWTRIG_SWT14_MASK                    (0x4000U)
#define ADC_SWTRIG_SWT14_SHIFT                   (14U)
#define ADC_SWTRIG_SWT15_MASK                    (0x8000U)
#define ADC_SWTRIG_SWT15_SHIFT                   (15U)
/*! @} */

/*! @name TSTAT - Trigger Status Register */
/*! @{ */
#define ADC_TSTAT_TEXC_NUM_MASK                  (0xFFFFU)
#define ADC_TSTAT_TEXC_NUM_SHIFT                 (0U)
/*! TEXC_NUM - Trigger Exception Number
 *  0b0000000000000000..No triggers have been interrupted by a high priority exception. Or CFG[TRES] = 1.
 *  0b0000000000000001..Trigger 0 has been interrupted by a high priority exception.
 *  0b0000000000000010..Trigger 1 has been interrupted by a high priority exception.
 *  0b0000000000000011-0b1111111111111110..Associated trigger sequence has interrupted by a high priority exception.
 *  0b1111111111111111..Every trigger sequence has been interrupted by a high priority exception.
 */
#define ADC_TSTAT_TEXC_NUM(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_TSTAT_TEXC_NUM_SHIFT)) & ADC_TSTAT_TEXC_NUM_MASK)
#define ADC_TSTAT_TCOMP_FLAG_MASK                (0xFFFF0000U)
#define ADC_TSTAT_TCOMP_FLAG_SHIFT               (16U)
/*! TCOMP_FLAG - Trigger Completion Flag
 *  0b0000000000000000..No triggers have been completed. Trigger completion interrupts are disabled.
 *  0b0000000000000001..Trigger 0 has been completed and triger 0 has enabled completion interrupts.
 *  0b0000000000000010..Trigger 1 has been completed and triger 1 has enabled completion interrupts.
 *  0b0000000000000011-0b1111111111111110..Associated trigger sequence has completed and has enabled completion interrupts.
 *  0b1111111111111111..Every trigger sequence has been completed and every trigger has enabled completion interrupts.
 */
#define ADC_TSTAT_TCOMP_FLAG(x)                  (((uint32_t)(((uint32_t)(x)) << ADC_TSTAT_TCOMP_FLAG_SHIFT)) & ADC_TSTAT_TCOMP_FLAG_MASK)
/*! @} */

/*! @name TCTRL - Trigger Control Register */
/*! @{ */
#define ADC_TCTRL_HTEN_MASK                      (0x1U)
#define ADC_TCTRL_HTEN_SHIFT                     (0U)
#define ADC_TCTRL_FIFO_SEL_A_MASK                (0x2U)
#define ADC_TCTRL_FIFO_SEL_A_SHIFT               (1U)
#define ADC_TCTRL_TPRI_MASK                      (0xF00U)
#define ADC_TCTRL_TPRI_SHIFT                     (8U)
/*! TPRI - Trigger priority setting
 *  0b0000..Set to highest priority, Level 1
 *  0b0001-0b1110..Set to corresponding priority level
 *  0b1111..Set to lowest priority, Level 16
 */
#define ADC_TCTRL_TPRI(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_TCTRL_TPRI_SHIFT)) & ADC_TCTRL_TPRI_MASK)
#define ADC_TCTRL_RSYNC_MASK                     (0x8000U)
#define ADC_TCTRL_RSYNC_SHIFT                    (15U)
#define ADC_TCTRL_TDLY_MASK                      (0xF0000U)
#define ADC_TCTRL_TDLY_SHIFT                     (16U)
/*! TDLY - Trigger delay select
 */
#define ADC_TCTRL_TDLY(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_TCTRL_TDLY_SHIFT)) & ADC_TCTRL_TDLY_MASK)
#define ADC_TCTRL_TCMD_MASK                      (0xF000000U)
#define ADC_TCTRL_TCMD_SHIFT                     (24U)
/*! TCMD - Trigger command select
 *  0b0000..Not a valid selection from the command buffer. Trigger event is ignored.
 *  0b0001..CMD1 is executed
 *  0b0010-0b1110..Corresponding CMD is executed
 *  0b1111..CMD15 is executed
 */
#define ADC_TCTRL_TCMD(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_TCTRL_TCMD_SHIFT)) & ADC_TCTRL_TCMD_MASK)
/*! @} */

/* The count of ADC_TCTRL */
#define ADC_TCTRL_COUNT                          (16U)

/*! @name FCTRL - FIFO Control Register */
/*! @{ */
#define ADC_FCTRL_FCOUNT_MASK                    (0x1FU)
#define ADC_FCTRL_FCOUNT_SHIFT                   (0U)
/*! FCOUNT - Result FIFO counter
 */
#define ADC_FCTRL_FCOUNT(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FCTRL_FCOUNT_SHIFT)) & ADC_FCTRL_FCOUNT_MASK)
#define ADC_FCTRL_FWMARK_MASK                    (0xF0000U)
#define ADC_FCTRL_FWMARK_SHIFT                   (16U)
/*! FWMARK - Watermark level selection
 */
#define ADC_FCTRL_FWMARK(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FCTRL_FWMARK_SHIFT)) & ADC_FCTRL_FWMARK_MASK)
/*! @} */

/* The count of ADC_FCTRL */
#define ADC_FCTRL_COUNT                          (2U)

/*! @name CMDL - ADC Command Low Buffer Register */
/*! @{ */
#define ADC_CMDL_ADCH_MASK                       (0x1FU)
#define ADC_CMDL_ADCH_SHIFT                      (0U)
/*! ADCH - Input channel select
 *  0b00000..Select CH0A or CH0B or CH0A/CH0B pair.
 *  0b00001..Select CH1A or CH1B or CH1A/CH1B pair.
 *  0b00010..Select CH2A or CH2B or CH2A/CH2B pair.
 *  0b00011..Select CH3A or CH3B or CH3A/CH3B pair.
 *  0b00100-0b11101..Select corresponding channel CHnA or CHnB or CHnA/CHnB pair.
 *  0b11110..Select CH30A or CH30B or CH30A/CH30B pair.
 *  0b11111..Select CH31A or CH31B or CH31A/CH31B pair.
 */
#define ADC_CMDL_ADCH(x)                         (((uint32_t)(((uint32_t)(x)) << ADC_CMDL_ADCH_SHIFT)) & ADC_CMDL_ADCH_MASK)
#define ADC_CMDL_ABSEL_MASK                      (0x20U)
#define ADC_CMDL_ABSEL_SHIFT                     (5U)
#define ADC_CMDL_DIFF_MASK                       (0x40U)
#define ADC_CMDL_DIFF_SHIFT                      (6U)
#define ADC_CMDL_CSCALE_MASK                     (0x2000U)
#define ADC_CMDL_CSCALE_SHIFT                    (13U)
/*! @} */

/* The count of ADC_CMDL */
#define ADC_CMDL_COUNT                           (15U)

/*! @name CMDH - ADC Command High Buffer Register */
/*! @{ */
#define ADC_CMDH_CMPEN_MASK                      (0x3U)
#define ADC_CMDH_CMPEN_SHIFT                     (0U)
/*! CMPEN - Compare Function Enable
 *  0b00..Compare disabled.
 *  0b01..Reserved
 *  0b10..Compare enabled. Store on true.
 *  0b11..Compare enabled. Repeat channel acquisition (sample/convert/compare) until true.
 */
#define ADC_CMDH_CMPEN(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_CMDH_CMPEN_SHIFT)) & ADC_CMDH_CMPEN_MASK)
#define ADC_CMDH_WAIT_TRIG_MASK                  (0x4U)
#define ADC_CMDH_WAIT_TRIG_SHIFT                 (2U)
#define ADC_CMDH_LWI_MASK                        (0x80U)
#define ADC_CMDH_LWI_SHIFT                       (7U)
#define ADC_CMDH_STS_MASK                        (0x700U)
#define ADC_CMDH_STS_SHIFT                       (8U)
/*! STS - Sample Time Select
 *  0b000..Minimum sample time of 3 ADCK cycles.
 *  0b001..3 + 21 ADCK cycles; 5 ADCK cycles total sample time.
 *  0b010..3 + 22 ADCK cycles; 7 ADCK cycles total sample time.
 *  0b011..3 + 23 ADCK cycles; 11 ADCK cycles total sample time.
 *  0b100..3 + 24 ADCK cycles; 19 ADCK cycles total sample time.
 *  0b101..3 + 25 ADCK cycles; 35 ADCK cycles total sample time.
 *  0b110..3 + 26 ADCK cycles; 67 ADCK cycles total sample time.
 *  0b111..3 + 27 ADCK cycles; 131 ADCK cycles total sample time.
 */
#define ADC_CMDH_STS(x)                          (((uint32_t)(((uint32_t)(x)) << ADC_CMDH_STS_SHIFT)) & ADC_CMDH_STS_MASK)
#define ADC_CMDH_AVGS_MASK                       (0x7000U)
#define ADC_CMDH_AVGS_SHIFT                      (12U)
/*! AVGS - Hardware Average Select
 *  0b000..Single conversion.
 *  0b001..2 conversions averaged.
 *  0b010..4 conversions averaged.
 *  0b011..8 conversions averaged.
 *  0b100..16 conversions averaged.
 *  0b101..32 conversions averaged.
 *  0b110..64 conversions averaged.
 *  0b111..128 conversions averaged.
 */
#define ADC_CMDH_AVGS(x)                         (((uint32_t)(((uint32_t)(x)) << ADC_CMDH_AVGS_SHIFT)) & ADC_CMDH_AVGS_MASK)
#define ADC_CMDH_LOOP_MASK                       (0xF0000U)
#define ADC_CMDH_LOOP_SHIFT                      (16U)
/*! LOOP - Loop Count Select
 *  0b0000..Looping not enabled. Command executes 1 time.
 *  0b0001..Loop 1 time. Command executes 2 times.
 *  0b0010..Loop 2 times. Command executes 3 times.
 *  0b0011-0b1110..Loop corresponding number of times. Command executes LOOP+1 times.
 *  0b1111..Loop 15 times. Command executes 16 times.
 */
#define ADC_CMDH_LOOP(x)                         (((uint32_t)(((uint32_t)(x)) << ADC_CMDH_LOOP_SHIFT)) & ADC_CMDH_LOOP_MASK)
#define ADC_CMDH_NEXT_MASK                       (0xF000000U)
#define ADC_CMDH_NEXT_SHIFT                      (24U)
/*! NEXT - Next Command Select
 *  0b0000..No next command defined. Terminate conversions at completion of current command. If lower priority
 *          trigger pending, begin command associated with lower priority trigger.
 *  0b0001..Select CMD1 command buffer register as next command.
 *  0b0010-0b1110..Select corresponding CMD command buffer register as next command
 *  0b1111..Select CMD15 command buffer register as next command.
 */
#define ADC_CMDH_NEXT(x)                         (((uint32_t)(((uint32_t)(x)) << ADC_CMDH_NEXT_SHIFT)) & ADC_CMDH_NEXT_MASK)
/*! @} */

/* The count of ADC_CMDH */
#define ADC_CMDH_COUNT                           (15U)

/*! @name CV - Compare Value Register */
/*! @{ */
#define ADC_CV_CVL_MASK                          (0xFFFFU)
#define ADC_CV_CVL_SHIFT                         (0U)
/*! CVL - Compare Value Low.
 */
#define ADC_CV_CVL(x)                            (((uint32_t)(((uint32_t)(x)) << ADC_CV_CVL_SHIFT)) & ADC_CV_CVL_MASK)
#define ADC_CV_CVH_MASK                          (0xFFFF0000U)
#define ADC_CV_CVH_SHIFT                         (16U)
/*! CVH - Compare Value High.
 */
#define ADC_CV_CVH(x)                            (((uint32_t)(((uint32_t)(x)) << ADC_CV_CVH_SHIFT)) & ADC_CV_CVH_MASK)
/*! @} */

/* The count of ADC_CV */
#define ADC_CV_COUNT                             (4U)

/*! @name RESFIFO - ADC Data Result FIFO Register */
/*! @{ */
#define ADC_RESFIFO_D_MASK                       (0xFFFFU)
#define ADC_RESFIFO_D_SHIFT                      (0U)
/*! D - Data result
 */
#define ADC_RESFIFO_D(x)                         (((uint32_t)(((uint32_t)(x)) << ADC_RESFIFO_D_SHIFT)) & ADC_RESFIFO_D_MASK)
#define ADC_RESFIFO_TSRC_MASK                    (0xF0000U)
#define ADC_RESFIFO_TSRC_SHIFT                   (16U)
/*! TSRC - Trigger Source
 *  0b0000..Trigger source 0 initiated this conversion.
 *  0b0001..Trigger source 1 initiated this conversion.
 *  0b0010-0b1110..Corresponding trigger source initiated this conversion.
 *  0b1111..Trigger source 15 initiated this conversion.
 */
#define ADC_RESFIFO_TSRC(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_RESFIFO_TSRC_SHIFT)) & ADC_RESFIFO_TSRC_MASK)
#define ADC_RESFIFO_LOOPCNT_MASK                 (0xF00000U)
#define ADC_RESFIFO_LOOPCNT_SHIFT                (20U)
/*! LOOPCNT - Loop count value
 *  0b0000..Result is from initial conversion in command.
 *  0b0001..Result is from second conversion in command.
 *  0b0010-0b1110..Result is from LOOPCNT+1 conversion in command.
 *  0b1111..Result is from 16th conversion in command.
 */
#define ADC_RESFIFO_LOOPCNT(x)                   (((uint32_t)(((uint32_t)(x)) << ADC_RESFIFO_LOOPCNT_SHIFT)) & ADC_RESFIFO_LOOPCNT_MASK)
#define ADC_RESFIFO_CMDSRC_MASK                  (0xF000000U)
#define ADC_RESFIFO_CMDSRC_SHIFT                 (24U)
/*! CMDSRC - Command Buffer Source
 *  0b0000..Not a valid value CMDSRC value for a dataword in RESFIFO. 0x0 is only found in initial FIFO state
 *          prior to an ADC conversion result dataword being stored to a RESFIFO buffer.
 *  0b0001..CMD1 buffer used as control settings for this conversion.
 *  0b0010-0b1110..Corresponding command buffer used as control settings for this conversion.
 *  0b1111..CMD15 buffer used as control settings for this conversion.
 */
#define ADC_RESFIFO_CMDSRC(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_RESFIFO_CMDSRC_SHIFT)) & ADC_RESFIFO_CMDSRC_MASK)
#define ADC_RESFIFO_VALID_MASK                   (0x80000000U)
#define ADC_RESFIFO_VALID_SHIFT                  (31U)
/*! @} */

/* The count of ADC_RESFIFO */
#define ADC_RESFIFO_COUNT                        (2U)


/*!
 * @}
 */ /* end of group ADC_Register_Masks */


/* ADC - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral ADC0 base pointer */
  #define ADC0_BASE_PTR                            ((ADC_MemMapPtr)0x5013A000u)
  /** Peripheral ADC0 base pointer */
  #define ADC0_BASE_PTR_NS                         ((ADC_MemMapPtr)0x4013A000u)
  /** Array initializer of ADC peripheral base pointers */
  #define ADC_BASE_PTRS                            { ADC0_BASE_PTR }
  /** Array initializer of ADC peripheral base pointers */
  #define ADC_BASE_PTRS_NS                         { ADC0_BASE_PTR_NS }
#else
  /** Peripheral ADC0 base pointer */
  #define ADC0_BASE_PTR                            ((ADC_MemMapPtr)0x4013A000u)
  /** Array initializer of ADC peripheral base pointers */
  #define ADC_BASE_PTRS                            { ADC0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- ADC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_Register_Accessor_Macros ADC - Register accessor macros
 * @{
 */


/* ADC - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* ADC0 */
  #define ADC0_VERID                               ADC_VERID_REG(ADC0_BASE_PTR)
  #define ADC0_VERID_NS                            ADC_VERID_REG(ADC0_BASE_PTR_NS)
  #define ADC0_PARAM                               ADC_PARAM_REG(ADC0_BASE_PTR)
  #define ADC0_PARAM_NS                            ADC_PARAM_REG(ADC0_BASE_PTR_NS)
  #define ADC0_CTRL                                ADC_CTRL_REG(ADC0_BASE_PTR)
  #define ADC0_CTRL_NS                             ADC_CTRL_REG(ADC0_BASE_PTR_NS)
  #define ADC0_STAT                                ADC_STAT_REG(ADC0_BASE_PTR)
  #define ADC0_STAT_NS                             ADC_STAT_REG(ADC0_BASE_PTR_NS)
  #define ADC0_IE                                  ADC_IE_REG(ADC0_BASE_PTR)
  #define ADC0_IE_NS                               ADC_IE_REG(ADC0_BASE_PTR_NS)
  #define ADC0_DE                                  ADC_DE_REG(ADC0_BASE_PTR)
  #define ADC0_DE_NS                               ADC_DE_REG(ADC0_BASE_PTR_NS)
  #define ADC0_CFG                                 ADC_CFG_REG(ADC0_BASE_PTR)
  #define ADC0_CFG_NS                              ADC_CFG_REG(ADC0_BASE_PTR_NS)
  #define ADC0_PAUSE                               ADC_PAUSE_REG(ADC0_BASE_PTR)
  #define ADC0_PAUSE_NS                            ADC_PAUSE_REG(ADC0_BASE_PTR_NS)
  #define ADC0_SWTRIG                              ADC_SWTRIG_REG(ADC0_BASE_PTR)
  #define ADC0_SWTRIG_NS                           ADC_SWTRIG_REG(ADC0_BASE_PTR_NS)
  #define ADC0_TSTAT                               ADC_TSTAT_REG(ADC0_BASE_PTR)
  #define ADC0_TSTAT_NS                            ADC_TSTAT_REG(ADC0_BASE_PTR_NS)
  #define ADC0_TCTRL0                              ADC_TCTRL_REG(ADC0_BASE_PTR,0)
  #define ADC0_TCTRL0_NS                           ADC_TCTRL_REG(ADC0_BASE_PTR_NS,0)
  #define ADC0_TCTRL1                              ADC_TCTRL_REG(ADC0_BASE_PTR,1)
  #define ADC0_TCTRL1_NS                           ADC_TCTRL_REG(ADC0_BASE_PTR_NS,1)
  #define ADC0_TCTRL2                              ADC_TCTRL_REG(ADC0_BASE_PTR,2)
  #define ADC0_TCTRL2_NS                           ADC_TCTRL_REG(ADC0_BASE_PTR_NS,2)
  #define ADC0_TCTRL3                              ADC_TCTRL_REG(ADC0_BASE_PTR,3)
  #define ADC0_TCTRL3_NS                           ADC_TCTRL_REG(ADC0_BASE_PTR_NS,3)
  #define ADC0_TCTRL4                              ADC_TCTRL_REG(ADC0_BASE_PTR,4)
  #define ADC0_TCTRL4_NS                           ADC_TCTRL_REG(ADC0_BASE_PTR_NS,4)
  #define ADC0_TCTRL5                              ADC_TCTRL_REG(ADC0_BASE_PTR,5)
  #define ADC0_TCTRL5_NS                           ADC_TCTRL_REG(ADC0_BASE_PTR_NS,5)
  #define ADC0_TCTRL6                              ADC_TCTRL_REG(ADC0_BASE_PTR,6)
  #define ADC0_TCTRL6_NS                           ADC_TCTRL_REG(ADC0_BASE_PTR_NS,6)
  #define ADC0_TCTRL7                              ADC_TCTRL_REG(ADC0_BASE_PTR,7)
  #define ADC0_TCTRL7_NS                           ADC_TCTRL_REG(ADC0_BASE_PTR_NS,7)
  #define ADC0_TCTRL8                              ADC_TCTRL_REG(ADC0_BASE_PTR,8)
  #define ADC0_TCTRL8_NS                           ADC_TCTRL_REG(ADC0_BASE_PTR_NS,8)
  #define ADC0_TCTRL9                              ADC_TCTRL_REG(ADC0_BASE_PTR,9)
  #define ADC0_TCTRL9_NS                           ADC_TCTRL_REG(ADC0_BASE_PTR_NS,9)
  #define ADC0_TCTRL10                             ADC_TCTRL_REG(ADC0_BASE_PTR,10)
  #define ADC0_TCTRL10_NS                          ADC_TCTRL_REG(ADC0_BASE_PTR_NS,10)
  #define ADC0_TCTRL11                             ADC_TCTRL_REG(ADC0_BASE_PTR,11)
  #define ADC0_TCTRL11_NS                          ADC_TCTRL_REG(ADC0_BASE_PTR_NS,11)
  #define ADC0_TCTRL12                             ADC_TCTRL_REG(ADC0_BASE_PTR,12)
  #define ADC0_TCTRL12_NS                          ADC_TCTRL_REG(ADC0_BASE_PTR_NS,12)
  #define ADC0_TCTRL13                             ADC_TCTRL_REG(ADC0_BASE_PTR,13)
  #define ADC0_TCTRL13_NS                          ADC_TCTRL_REG(ADC0_BASE_PTR_NS,13)
  #define ADC0_TCTRL14                             ADC_TCTRL_REG(ADC0_BASE_PTR,14)
  #define ADC0_TCTRL14_NS                          ADC_TCTRL_REG(ADC0_BASE_PTR_NS,14)
  #define ADC0_TCTRL15                             ADC_TCTRL_REG(ADC0_BASE_PTR,15)
  #define ADC0_TCTRL15_NS                          ADC_TCTRL_REG(ADC0_BASE_PTR_NS,15)
  #define ADC0_FCTRL0                              ADC_FCTRL_REG(ADC0_BASE_PTR,0)
  #define ADC0_FCTRL0_NS                           ADC_FCTRL_REG(ADC0_BASE_PTR_NS,0)
  #define ADC0_FCTRL1                              ADC_FCTRL_REG(ADC0_BASE_PTR,1)
  #define ADC0_FCTRL1_NS                           ADC_FCTRL_REG(ADC0_BASE_PTR_NS,1)
  #define ADC0_CMDL1                               ADC_CMDL_REG(ADC0_BASE_PTR,0)
  #define ADC0_CMDL1_NS                            ADC_CMDL_REG(ADC0_BASE_PTR_NS,0)
  #define ADC0_CMDH1                               ADC_CMDH_REG(ADC0_BASE_PTR,0)
  #define ADC0_CMDH1_NS                            ADC_CMDH_REG(ADC0_BASE_PTR_NS,0)
  #define ADC0_CMDL2                               ADC_CMDL_REG(ADC0_BASE_PTR,1)
  #define ADC0_CMDL2_NS                            ADC_CMDL_REG(ADC0_BASE_PTR_NS,1)
  #define ADC0_CMDH2                               ADC_CMDH_REG(ADC0_BASE_PTR,1)
  #define ADC0_CMDH2_NS                            ADC_CMDH_REG(ADC0_BASE_PTR_NS,1)
  #define ADC0_CMDL3                               ADC_CMDL_REG(ADC0_BASE_PTR,2)
  #define ADC0_CMDL3_NS                            ADC_CMDL_REG(ADC0_BASE_PTR_NS,2)
  #define ADC0_CMDH3                               ADC_CMDH_REG(ADC0_BASE_PTR,2)
  #define ADC0_CMDH3_NS                            ADC_CMDH_REG(ADC0_BASE_PTR_NS,2)
  #define ADC0_CMDL4                               ADC_CMDL_REG(ADC0_BASE_PTR,3)
  #define ADC0_CMDL4_NS                            ADC_CMDL_REG(ADC0_BASE_PTR_NS,3)
  #define ADC0_CMDH4                               ADC_CMDH_REG(ADC0_BASE_PTR,3)
  #define ADC0_CMDH4_NS                            ADC_CMDH_REG(ADC0_BASE_PTR_NS,3)
  #define ADC0_CMDL5                               ADC_CMDL_REG(ADC0_BASE_PTR,4)
  #define ADC0_CMDL5_NS                            ADC_CMDL_REG(ADC0_BASE_PTR_NS,4)
  #define ADC0_CMDH5                               ADC_CMDH_REG(ADC0_BASE_PTR,4)
  #define ADC0_CMDH5_NS                            ADC_CMDH_REG(ADC0_BASE_PTR_NS,4)
  #define ADC0_CMDL6                               ADC_CMDL_REG(ADC0_BASE_PTR,5)
  #define ADC0_CMDL6_NS                            ADC_CMDL_REG(ADC0_BASE_PTR_NS,5)
  #define ADC0_CMDH6                               ADC_CMDH_REG(ADC0_BASE_PTR,5)
  #define ADC0_CMDH6_NS                            ADC_CMDH_REG(ADC0_BASE_PTR_NS,5)
  #define ADC0_CMDL7                               ADC_CMDL_REG(ADC0_BASE_PTR,6)
  #define ADC0_CMDL7_NS                            ADC_CMDL_REG(ADC0_BASE_PTR_NS,6)
  #define ADC0_CMDH7                               ADC_CMDH_REG(ADC0_BASE_PTR,6)
  #define ADC0_CMDH7_NS                            ADC_CMDH_REG(ADC0_BASE_PTR_NS,6)
  #define ADC0_CMDL8                               ADC_CMDL_REG(ADC0_BASE_PTR,7)
  #define ADC0_CMDL8_NS                            ADC_CMDL_REG(ADC0_BASE_PTR_NS,7)
  #define ADC0_CMDH8                               ADC_CMDH_REG(ADC0_BASE_PTR,7)
  #define ADC0_CMDH8_NS                            ADC_CMDH_REG(ADC0_BASE_PTR_NS,7)
  #define ADC0_CMDL9                               ADC_CMDL_REG(ADC0_BASE_PTR,8)
  #define ADC0_CMDL9_NS                            ADC_CMDL_REG(ADC0_BASE_PTR_NS,8)
  #define ADC0_CMDH9                               ADC_CMDH_REG(ADC0_BASE_PTR,8)
  #define ADC0_CMDH9_NS                            ADC_CMDH_REG(ADC0_BASE_PTR_NS,8)
  #define ADC0_CMDL10                              ADC_CMDL_REG(ADC0_BASE_PTR,9)
  #define ADC0_CMDL10_NS                           ADC_CMDL_REG(ADC0_BASE_PTR_NS,9)
  #define ADC0_CMDH10                              ADC_CMDH_REG(ADC0_BASE_PTR,9)
  #define ADC0_CMDH10_NS                           ADC_CMDH_REG(ADC0_BASE_PTR_NS,9)
  #define ADC0_CMDL11                              ADC_CMDL_REG(ADC0_BASE_PTR,10)
  #define ADC0_CMDL11_NS                           ADC_CMDL_REG(ADC0_BASE_PTR_NS,10)
  #define ADC0_CMDH11                              ADC_CMDH_REG(ADC0_BASE_PTR,10)
  #define ADC0_CMDH11_NS                           ADC_CMDH_REG(ADC0_BASE_PTR_NS,10)
  #define ADC0_CMDL12                              ADC_CMDL_REG(ADC0_BASE_PTR,11)
  #define ADC0_CMDL12_NS                           ADC_CMDL_REG(ADC0_BASE_PTR_NS,11)
  #define ADC0_CMDH12                              ADC_CMDH_REG(ADC0_BASE_PTR,11)
  #define ADC0_CMDH12_NS                           ADC_CMDH_REG(ADC0_BASE_PTR_NS,11)
  #define ADC0_CMDL13                              ADC_CMDL_REG(ADC0_BASE_PTR,12)
  #define ADC0_CMDL13_NS                           ADC_CMDL_REG(ADC0_BASE_PTR_NS,12)
  #define ADC0_CMDH13                              ADC_CMDH_REG(ADC0_BASE_PTR,12)
  #define ADC0_CMDH13_NS                           ADC_CMDH_REG(ADC0_BASE_PTR_NS,12)
  #define ADC0_CMDL14                              ADC_CMDL_REG(ADC0_BASE_PTR,13)
  #define ADC0_CMDL14_NS                           ADC_CMDL_REG(ADC0_BASE_PTR_NS,13)
  #define ADC0_CMDH14                              ADC_CMDH_REG(ADC0_BASE_PTR,13)
  #define ADC0_CMDH14_NS                           ADC_CMDH_REG(ADC0_BASE_PTR_NS,13)
  #define ADC0_CMDL15                              ADC_CMDL_REG(ADC0_BASE_PTR,14)
  #define ADC0_CMDL15_NS                           ADC_CMDL_REG(ADC0_BASE_PTR_NS,14)
  #define ADC0_CMDH15                              ADC_CMDH_REG(ADC0_BASE_PTR,14)
  #define ADC0_CMDH15_NS                           ADC_CMDH_REG(ADC0_BASE_PTR_NS,14)
  #define ADC0_CV1                                 ADC_CV_REG(ADC0_BASE_PTR,0)
  #define ADC0_CV1_NS                              ADC_CV_REG(ADC0_BASE_PTR_NS,0)
  #define ADC0_CV2                                 ADC_CV_REG(ADC0_BASE_PTR,1)
  #define ADC0_CV2_NS                              ADC_CV_REG(ADC0_BASE_PTR_NS,1)
  #define ADC0_CV3                                 ADC_CV_REG(ADC0_BASE_PTR,2)
  #define ADC0_CV3_NS                              ADC_CV_REG(ADC0_BASE_PTR_NS,2)
  #define ADC0_CV4                                 ADC_CV_REG(ADC0_BASE_PTR,3)
  #define ADC0_CV4_NS                              ADC_CV_REG(ADC0_BASE_PTR_NS,3)
  #define ADC0_RESFIFO0                            ADC_RESFIFO_REG(ADC0_BASE_PTR,0)
  #define ADC0_RESFIFO0_NS                         ADC_RESFIFO_REG(ADC0_BASE_PTR_NS,0)
  #define ADC0_RESFIFO1                            ADC_RESFIFO_REG(ADC0_BASE_PTR,1)
  #define ADC0_RESFIFO1_NS                         ADC_RESFIFO_REG(ADC0_BASE_PTR_NS,1)
#else
  /* ADC0 */
  #define ADC0_VERID                               ADC_VERID_REG(ADC0_BASE_PTR)
  #define ADC0_PARAM                               ADC_PARAM_REG(ADC0_BASE_PTR)
  #define ADC0_CTRL                                ADC_CTRL_REG(ADC0_BASE_PTR)
  #define ADC0_STAT                                ADC_STAT_REG(ADC0_BASE_PTR)
  #define ADC0_IE                                  ADC_IE_REG(ADC0_BASE_PTR)
  #define ADC0_DE                                  ADC_DE_REG(ADC0_BASE_PTR)
  #define ADC0_CFG                                 ADC_CFG_REG(ADC0_BASE_PTR)
  #define ADC0_PAUSE                               ADC_PAUSE_REG(ADC0_BASE_PTR)
  #define ADC0_SWTRIG                              ADC_SWTRIG_REG(ADC0_BASE_PTR)
  #define ADC0_TSTAT                               ADC_TSTAT_REG(ADC0_BASE_PTR)
  #define ADC0_TCTRL0                              ADC_TCTRL_REG(ADC0_BASE_PTR,0)
  #define ADC0_TCTRL1                              ADC_TCTRL_REG(ADC0_BASE_PTR,1)
  #define ADC0_TCTRL2                              ADC_TCTRL_REG(ADC0_BASE_PTR,2)
  #define ADC0_TCTRL3                              ADC_TCTRL_REG(ADC0_BASE_PTR,3)
  #define ADC0_TCTRL4                              ADC_TCTRL_REG(ADC0_BASE_PTR,4)
  #define ADC0_TCTRL5                              ADC_TCTRL_REG(ADC0_BASE_PTR,5)
  #define ADC0_TCTRL6                              ADC_TCTRL_REG(ADC0_BASE_PTR,6)
  #define ADC0_TCTRL7                              ADC_TCTRL_REG(ADC0_BASE_PTR,7)
  #define ADC0_TCTRL8                              ADC_TCTRL_REG(ADC0_BASE_PTR,8)
  #define ADC0_TCTRL9                              ADC_TCTRL_REG(ADC0_BASE_PTR,9)
  #define ADC0_TCTRL10                             ADC_TCTRL_REG(ADC0_BASE_PTR,10)
  #define ADC0_TCTRL11                             ADC_TCTRL_REG(ADC0_BASE_PTR,11)
  #define ADC0_TCTRL12                             ADC_TCTRL_REG(ADC0_BASE_PTR,12)
  #define ADC0_TCTRL13                             ADC_TCTRL_REG(ADC0_BASE_PTR,13)
  #define ADC0_TCTRL14                             ADC_TCTRL_REG(ADC0_BASE_PTR,14)
  #define ADC0_TCTRL15                             ADC_TCTRL_REG(ADC0_BASE_PTR,15)
  #define ADC0_FCTRL0                              ADC_FCTRL_REG(ADC0_BASE_PTR,0)
  #define ADC0_FCTRL1                              ADC_FCTRL_REG(ADC0_BASE_PTR,1)
  #define ADC0_CMDL1                               ADC_CMDL_REG(ADC0_BASE_PTR,0)
  #define ADC0_CMDH1                               ADC_CMDH_REG(ADC0_BASE_PTR,0)
  #define ADC0_CMDL2                               ADC_CMDL_REG(ADC0_BASE_PTR,1)
  #define ADC0_CMDH2                               ADC_CMDH_REG(ADC0_BASE_PTR,1)
  #define ADC0_CMDL3                               ADC_CMDL_REG(ADC0_BASE_PTR,2)
  #define ADC0_CMDH3                               ADC_CMDH_REG(ADC0_BASE_PTR,2)
  #define ADC0_CMDL4                               ADC_CMDL_REG(ADC0_BASE_PTR,3)
  #define ADC0_CMDH4                               ADC_CMDH_REG(ADC0_BASE_PTR,3)
  #define ADC0_CMDL5                               ADC_CMDL_REG(ADC0_BASE_PTR,4)
  #define ADC0_CMDH5                               ADC_CMDH_REG(ADC0_BASE_PTR,4)
  #define ADC0_CMDL6                               ADC_CMDL_REG(ADC0_BASE_PTR,5)
  #define ADC0_CMDH6                               ADC_CMDH_REG(ADC0_BASE_PTR,5)
  #define ADC0_CMDL7                               ADC_CMDL_REG(ADC0_BASE_PTR,6)
  #define ADC0_CMDH7                               ADC_CMDH_REG(ADC0_BASE_PTR,6)
  #define ADC0_CMDL8                               ADC_CMDL_REG(ADC0_BASE_PTR,7)
  #define ADC0_CMDH8                               ADC_CMDH_REG(ADC0_BASE_PTR,7)
  #define ADC0_CMDL9                               ADC_CMDL_REG(ADC0_BASE_PTR,8)
  #define ADC0_CMDH9                               ADC_CMDH_REG(ADC0_BASE_PTR,8)
  #define ADC0_CMDL10                              ADC_CMDL_REG(ADC0_BASE_PTR,9)
  #define ADC0_CMDH10                              ADC_CMDH_REG(ADC0_BASE_PTR,9)
  #define ADC0_CMDL11                              ADC_CMDL_REG(ADC0_BASE_PTR,10)
  #define ADC0_CMDH11                              ADC_CMDH_REG(ADC0_BASE_PTR,10)
  #define ADC0_CMDL12                              ADC_CMDL_REG(ADC0_BASE_PTR,11)
  #define ADC0_CMDH12                              ADC_CMDH_REG(ADC0_BASE_PTR,11)
  #define ADC0_CMDL13                              ADC_CMDL_REG(ADC0_BASE_PTR,12)
  #define ADC0_CMDH13                              ADC_CMDH_REG(ADC0_BASE_PTR,12)
  #define ADC0_CMDL14                              ADC_CMDL_REG(ADC0_BASE_PTR,13)
  #define ADC0_CMDH14                              ADC_CMDH_REG(ADC0_BASE_PTR,13)
  #define ADC0_CMDL15                              ADC_CMDL_REG(ADC0_BASE_PTR,14)
  #define ADC0_CMDH15                              ADC_CMDH_REG(ADC0_BASE_PTR,14)
  #define ADC0_CV1                                 ADC_CV_REG(ADC0_BASE_PTR,0)
  #define ADC0_CV2                                 ADC_CV_REG(ADC0_BASE_PTR,1)
  #define ADC0_CV3                                 ADC_CV_REG(ADC0_BASE_PTR,2)
  #define ADC0_CV4                                 ADC_CV_REG(ADC0_BASE_PTR,3)
  #define ADC0_RESFIFO0                            ADC_RESFIFO_REG(ADC0_BASE_PTR,0)
  #define ADC0_RESFIFO1                            ADC_RESFIFO_REG(ADC0_BASE_PTR,1)
#endif

/* ADC - Register array accessors */
#define ADC0_TCTRL(index)                        ADC_TCTRL_REG(ADC0_BASE_PTR,index)
#define ADC0_TCTRL_NS(index)                     ADC_TCTRL_REG(ADC0_BASE_PTR_NS,index)
#define ADC0_TCTRL(index)                        ADC_TCTRL_REG(ADC0_BASE_PTR,index)
#define ADC0_FCTRL(index)                        ADC_FCTRL_REG(ADC0_BASE_PTR,index)
#define ADC0_FCTRL_NS(index)                     ADC_FCTRL_REG(ADC0_BASE_PTR_NS,index)
#define ADC0_FCTRL(index)                        ADC_FCTRL_REG(ADC0_BASE_PTR,index)
#define ADC0_CMDL(index)                         ADC_CMDL_REG(ADC0_BASE_PTR,index)
#define ADC0_CMDL_NS(index)                      ADC_CMDL_REG(ADC0_BASE_PTR_NS,index)
#define ADC0_CMDL(index)                         ADC_CMDL_REG(ADC0_BASE_PTR,index)
#define ADC0_CMDH(index)                         ADC_CMDH_REG(ADC0_BASE_PTR,index)
#define ADC0_CMDH_NS(index)                      ADC_CMDH_REG(ADC0_BASE_PTR_NS,index)
#define ADC0_CMDH(index)                         ADC_CMDH_REG(ADC0_BASE_PTR,index)
#define ADC0_CV(index)                           ADC_CV_REG(ADC0_BASE_PTR,index)
#define ADC0_CV_NS(index)                        ADC_CV_REG(ADC0_BASE_PTR_NS,index)
#define ADC0_CV(index)                           ADC_CV_REG(ADC0_BASE_PTR,index)
#define ADC0_RESFIFO(index)                      ADC_RESFIFO_REG(ADC0_BASE_PTR,index)
#define ADC0_RESFIFO_NS(index)                   ADC_RESFIFO_REG(ADC0_BASE_PTR_NS,index)
#define ADC0_RESFIFO(index)                      ADC_RESFIFO_REG(ADC0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group ADC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ADC_Peripheral */


/* ----------------------------------------------------------------------------
   -- AHB_SECURE_CTRL
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AHB_SECURE_CTRL_Peripheral AHB_SECURE_CTRL
 * @{
 */

/** AHB_SECURE_CTRL - Peripheral register structure */
typedef struct AHB_SECURE_CTRL_MemMap {
  uint8_t RESERVED_0[16];
  uint32_t ROM_MEM_RULE[4];                        /**< Memory ROM Rule(n) Register, array offset: 0x10, array step: 0x4 */
  uint8_t RESERVED_1[16];
  uint32_t FLEXSPI0_REGION0_RULE[4];               /**< FLEXSPI0 Region 0 Rule(n) Register, array offset: 0x30, array step: 0x4 */
  struct {                                         /* offset: 0x40, array step: 0x10 */
    uint32_t FLEXSPI0_REGION_RULE0;                  /**< FLEXSPI0 Region 1 Rule 0 Register..FLEXSPI0 Region 4 Rule 0 Register, array offset: 0x40, array step: 0x10 */
    uint8_t RESERVED_0[12];
  } FLEXSPI0_REGION1_4_RULE[4];
  uint8_t RESERVED_2[16];
  uint32_t RAM00_RULE[4];                          /**< SRAM Partition 00 Rule(n) Register, array offset: 0x90, array step: 0x4 */
  uint32_t RAM01_RULE[4];                          /**< SRAM Partition 01 Rule(n) Register, array offset: 0xA0, array step: 0x4 */
  uint8_t RESERVED_3[16];
  uint32_t RAM02_RULE[4];                          /**< SRAM Partition 02 Rule(n) Register, array offset: 0xC0, array step: 0x4 */
  uint32_t RAM03_RULE[4];                          /**< SRAM Partition 03 Rule(n) Register, array offset: 0xD0, array step: 0x4 */
  uint8_t RESERVED_4[16];
  uint32_t RAM04_RULE[4];                          /**< SRAM Partition 04 Rule(n) Register, array offset: 0xF0, array step: 0x4 */
  uint32_t RAM05_RULE[4];                          /**< SRAM Partition 05 Rule(n) Register, array offset: 0x100, array step: 0x4 */
  uint32_t RAM06_RULE[4];                          /**< SRAM Partition 06 Rule(n) Register, array offset: 0x110, array step: 0x4 */
  uint32_t RAM07_RULE[4];                          /**< SRAM Partition 07 Rule(n) Register, array offset: 0x120, array step: 0x4 */
  uint8_t RESERVED_5[16];
  uint32_t RAM08_RULE[4];                          /**< SRAM Partition 08 Rule(n) Register, array offset: 0x140, array step: 0x4 */
  uint32_t RAM09_RULE[4];                          /**< SRAM Partition 09 Rule(n) Register, array offset: 0x150, array step: 0x4 */
  uint32_t RAM10_RULE[4];                          /**< SRAM Partition 10 Rule(n) Register, array offset: 0x160, array step: 0x4 */
  uint32_t RAM11_RULE[4];                          /**< SRAM Partition 11 Rule(n) Register, array offset: 0x170, array step: 0x4 */
  uint8_t RESERVED_6[16];
  uint32_t RAM12_RULE[4];                          /**< SRAM Partition 12 Rule(n) Register, array offset: 0x190, array step: 0x4 */
  uint32_t RAM13_RULE[4];                          /**< SRAM Partition 13 Rule(n) Register, array offset: 0x1A0, array step: 0x4 */
  uint32_t RAM14_RULE[4];                          /**< SRAM Partition 14 Rule(n) Register, array offset: 0x1B0, array step: 0x4 */
  uint32_t RAM15_RULE[4];                          /**< SRAM Partition 15 Rule(n) Register, array offset: 0x1C0, array step: 0x4 */
  uint8_t RESERVED_7[16];
  uint32_t RAM16_RULE[4];                          /**< SRAM Partition 16 Rule(n) Register, array offset: 0x1E0, array step: 0x4 */
  uint32_t RAM17_RULE[4];                          /**< SRAM Partition 17 Rule(n) Register, array offset: 0x1F0, array step: 0x4 */
  uint32_t RAM18_RULE[4];                          /**< SRAM Partition 18 Rule(n) Register, array offset: 0x200, array step: 0x4 */
  uint32_t RAM19_RULE[4];                          /**< SRAM Partition 19 Rule(n) Register, array offset: 0x210, array step: 0x4 */
  uint8_t RESERVED_8[16];
  uint32_t RAM20_RULE[4];                          /**< SRAM Partition 20 Rule(n) Register, array offset: 0x230, array step: 0x4 */
  uint32_t RAM21_RULE[4];                          /**< SRAM Partition 21 Rule(n) Register, array offset: 0x240, array step: 0x4 */
  uint32_t RAM22_RULE[4];                          /**< SRAM Partition 22 Rule(n) Register, array offset: 0x250, array step: 0x4 */
  uint32_t RAM23_RULE[4];                          /**< SRAM Partition 23 Rule(n) Register, array offset: 0x260, array step: 0x4 */
  uint8_t RESERVED_9[16];
  uint32_t RAM24_RULE[4];                          /**< SRAM Partition 24 Rule(n) Register, array offset: 0x280, array step: 0x4 */
  uint32_t RAM25_RULE[4];                          /**< SRAM Partition 25 Rule(n) Register, array offset: 0x290, array step: 0x4 */
  uint32_t RAM26_RULE[4];                          /**< SRAM Partition 26 Rule(n) Register, array offset: 0x2A0, array step: 0x4 */
  uint32_t RAM27_RULE[4];                          /**< SRAM Partition 27 Rule(n) Register, array offset: 0x2B0, array step: 0x4 */
  uint8_t RESERVED_10[16];
  uint32_t RAM28_RULE[4];                          /**< SRAM Partition 28 Rule(n) Register, array offset: 0x2D0, array step: 0x4 */
  uint32_t RAM29_RULE[4];                          /**< SRAM Partition 29 Rule(n) Register, array offset: 0x2E0, array step: 0x4 */
  uint32_t RAM30_RULE[4];                          /**< SRAM Partition 30 Rule(n) Register, array offset: 0x2F0, array step: 0x4 */
  uint32_t RAM31_RULE[4];                          /**< SRAM Partition 31 Rule(n) Register, array offset: 0x300, array step: 0x4 */
  uint8_t RESERVED_11[16];
  uint32_t SDMA_RAM_RULE[4];                       /**< Smart DMA (SDMA) RAM Rule(n) Register, array offset: 0x320, array step: 0x4 */
  uint8_t RESERVED_12[16];
  uint32_t FLEXSPI1_REGION0_RULE[4];               /**< FlexSPI1 Region 0 Rule(n) Register, array offset: 0x340, array step: 0x4 */
  struct {                                         /* offset: 0x350, array step: 0x10 */
    uint32_t FLEXSPI1_REGION_RULE0;                  /**< FlexSPI1 Region 1 Rule 0 Register..FlexSPI1 Region 4 Rule 0 Register, array offset: 0x350, array step: 0x10 */
    uint8_t RESERVED_0[12];
  } FLEXSPI1_REGIONN_RULE0[4];
  uint8_t RESERVED_13[16];
  uint32_t APB_BRIDGE_PER0_RULE0;                  /**< APB Bridge Peripheral 0 Rule 0 Register, offset: 0x3A0 */
  uint32_t APB_BRIDGE_PER0_RULE1;                  /**< APB Bridge Peripheral 0 Rule 1 Register, offset: 0x3A4 */
  uint8_t RESERVED_14[4];
  uint32_t APB_BRIDGE_PER0_RULE3;                  /**< APB Bridge Peripheral 0 Rule 3 Register, offset: 0x3AC */
  uint32_t APB_BRIDGE_PER1_RULE0;                  /**< APB Bridge Peripheral 1 Rule 0 Register, offset: 0x3B0 */
  uint32_t APB_BRIDGE_PER1_RULE1;                  /**< APB Bridge Peripheral 1 Rule 1 Register, offset: 0x3B4 */
  uint32_t APB_BRIDGE_PER1_RULE2;                  /**< APB Bridge Peripheral 1 Rule 2 Register, offset: 0x3B8 */
  uint32_t APB_BRIDGE_PER1_RULE3;                  /**< APB Bridge Peripheral 1 Rule 3 Register, offset: 0x3BC */
  uint32_t AHB_PERIPH0_SLAVE_RULE0;                /**< AHB Peripheral 0 Slave Rule 0 Register, offset: 0x3C0 */
  uint8_t RESERVED_15[12];
  uint32_t AIPS_BRIDGE0_PER_RULE0;                 /**< AIPS Bridge Peripheral 0 Rule 0 Register, offset: 0x3D0 */
  uint8_t RESERVED_16[12];
  uint32_t AHB_PERIPH1_SLAVE_RULE0;                /**< AHB Peripheral 1 Slave Rule 0 Register, offset: 0x3E0 */
  uint32_t AHB_PERIPH1_SLAVE_RULE1;                /**< AHB Peripheral 1 Slave Rule 1 Register, offset: 0x3E4 */
  uint8_t RESERVED_17[24];
  uint32_t AIPS_BRIDGE1_PER_RULE0;                 /**< AIPS Bridge Peripheral 1 Rule 0 Register, offset: 0x400 */
  uint32_t AIPS_BRIDGE1_PER_RULE1;                 /**< AIPS Bridge Peripheral 1 Rule 1 Register, offset: 0x404 */
  uint8_t RESERVED_18[8];
  uint32_t AHB_PERIPH2_SLAVE_RULE0;                /**< AHB Peripheral 2 Slave Rule 0 Register, offset: 0x410 */
  uint8_t RESERVED_19[12];
  uint32_t AHB_SECURE_CTRL_PERIPH_RULE0;           /**< AHB Secure Control Peripheral Rule 0 Register, offset: 0x420 */
  uint8_t RESERVED_20[12];
  uint32_t AHB_PERIPH3_SLAVE_RULE0;                /**< AHB Peripheral 3 Slave Rule 0 Register, offset: 0x430 */
  uint32_t AHB_PERIPH3_SLAVE_RULE1;                /**< AHB Peripheral 3 Slave Rule 1 Register, offset: 0x434 */
  uint8_t RESERVED_21[2504];
  uint32_t SEC_VIO_ADDR[18];                       /**< Security Violation Address(n) Register, array offset: 0xE00, array step: 0x4 */
  uint8_t RESERVED_22[56];
  uint32_t SEC_VIO_MISC_INFO[18];                  /**< Security Violation Miscellaneous Information at Address(n) Register, array offset: 0xE80, array step: 0x4 */
  uint8_t RESERVED_23[56];
  uint32_t SEC_VIO_INFO_VALID;                     /**< Security Violation Info Validity for Address(n) Register, offset: 0xF00 */
  uint8_t RESERVED_24[124];
  uint32_t SEC_GPIO_MASK0;                         /**< GPIO Mask for Port 0 Register, offset: 0xF80 */
  uint32_t SEC_GPIO_MASK1;                         /**< GPIO Mask for Port 1 Register, offset: 0xF84 */
  uint32_t SEC_GPIO_MASK2;                         /**< GPIO Mask for Port 2 Register, offset: 0xF88 */
  uint8_t RESERVED_25[20];
  uint32_t DSP_INT_MASK0;                          /**< Secure Interrupt Mask for DSP Register, offset: 0xFA0 */
  uint8_t RESERVED_26[24];
  uint32_t SEC_MASK_LOCK;                          /**< Secure Mask Lock Register, offset: 0xFBC */
  uint8_t RESERVED_27[16];
  uint32_t MASTER_SEC_LEVEL;                       /**< Master Secure Level Register, offset: 0xFD0 */
  uint32_t MASTER_SEC_ANTI_POL_REG;                /**< Master Secure Level Register, offset: 0xFD4 */
  uint8_t RESERVED_28[20];
  uint32_t CM33_LOCK_REG;                          /**< Miscellaneous CPU0 Control Signals Register, offset: 0xFEC */
  uint8_t RESERVED_29[8];
  uint32_t MISC_CTRL_DP_REG;                       /**< Secure Control Duplicate Register, offset: 0xFF8 */
  uint32_t MISC_CTRL_REG;                          /**< Secure Control Register, offset: 0xFFC */
} volatile *AHB_SECURE_CTRL_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- AHB_SECURE_CTRL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AHB_SECURE_CTRL_Register_Accessor_Macros AHB_SECURE_CTRL - Register accessor macros
 * @{
 */


/* AHB_SECURE_CTRL - Register accessors */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_REG(base,index) ((base)->ROM_MEM_RULE[index])
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(base,index) ((base)->FLEXSPI0_REGION0_RULE[index])
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(base,index) ((base)->FLEXSPI0_REGION1_4_RULE[index].FLEXSPI0_REGION_RULE0)
#define AHB_SECURE_CTRL_RAM00_RULE_REG(base,index) ((base)->RAM00_RULE[index])
#define AHB_SECURE_CTRL_RAM01_RULE_REG(base,index) ((base)->RAM01_RULE[index])
#define AHB_SECURE_CTRL_RAM02_RULE_REG(base,index) ((base)->RAM02_RULE[index])
#define AHB_SECURE_CTRL_RAM03_RULE_REG(base,index) ((base)->RAM03_RULE[index])
#define AHB_SECURE_CTRL_RAM04_RULE_REG(base,index) ((base)->RAM04_RULE[index])
#define AHB_SECURE_CTRL_RAM05_RULE_REG(base,index) ((base)->RAM05_RULE[index])
#define AHB_SECURE_CTRL_RAM06_RULE_REG(base,index) ((base)->RAM06_RULE[index])
#define AHB_SECURE_CTRL_RAM07_RULE_REG(base,index) ((base)->RAM07_RULE[index])
#define AHB_SECURE_CTRL_RAM08_RULE_REG(base,index) ((base)->RAM08_RULE[index])
#define AHB_SECURE_CTRL_RAM09_RULE_REG(base,index) ((base)->RAM09_RULE[index])
#define AHB_SECURE_CTRL_RAM10_RULE_REG(base,index) ((base)->RAM10_RULE[index])
#define AHB_SECURE_CTRL_RAM11_RULE_REG(base,index) ((base)->RAM11_RULE[index])
#define AHB_SECURE_CTRL_RAM12_RULE_REG(base,index) ((base)->RAM12_RULE[index])
#define AHB_SECURE_CTRL_RAM13_RULE_REG(base,index) ((base)->RAM13_RULE[index])
#define AHB_SECURE_CTRL_RAM14_RULE_REG(base,index) ((base)->RAM14_RULE[index])
#define AHB_SECURE_CTRL_RAM15_RULE_REG(base,index) ((base)->RAM15_RULE[index])
#define AHB_SECURE_CTRL_RAM16_RULE_REG(base,index) ((base)->RAM16_RULE[index])
#define AHB_SECURE_CTRL_RAM17_RULE_REG(base,index) ((base)->RAM17_RULE[index])
#define AHB_SECURE_CTRL_RAM18_RULE_REG(base,index) ((base)->RAM18_RULE[index])
#define AHB_SECURE_CTRL_RAM19_RULE_REG(base,index) ((base)->RAM19_RULE[index])
#define AHB_SECURE_CTRL_RAM20_RULE_REG(base,index) ((base)->RAM20_RULE[index])
#define AHB_SECURE_CTRL_RAM21_RULE_REG(base,index) ((base)->RAM21_RULE[index])
#define AHB_SECURE_CTRL_RAM22_RULE_REG(base,index) ((base)->RAM22_RULE[index])
#define AHB_SECURE_CTRL_RAM23_RULE_REG(base,index) ((base)->RAM23_RULE[index])
#define AHB_SECURE_CTRL_RAM24_RULE_REG(base,index) ((base)->RAM24_RULE[index])
#define AHB_SECURE_CTRL_RAM25_RULE_REG(base,index) ((base)->RAM25_RULE[index])
#define AHB_SECURE_CTRL_RAM26_RULE_REG(base,index) ((base)->RAM26_RULE[index])
#define AHB_SECURE_CTRL_RAM27_RULE_REG(base,index) ((base)->RAM27_RULE[index])
#define AHB_SECURE_CTRL_RAM28_RULE_REG(base,index) ((base)->RAM28_RULE[index])
#define AHB_SECURE_CTRL_RAM29_RULE_REG(base,index) ((base)->RAM29_RULE[index])
#define AHB_SECURE_CTRL_RAM30_RULE_REG(base,index) ((base)->RAM30_RULE[index])
#define AHB_SECURE_CTRL_RAM31_RULE_REG(base,index) ((base)->RAM31_RULE[index])
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(base,index) ((base)->SDMA_RAM_RULE[index])
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(base,index) ((base)->FLEXSPI1_REGION0_RULE[index])
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(base,index) ((base)->FLEXSPI1_REGIONN_RULE0[index].FLEXSPI1_REGION_RULE0)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_REG(base) ((base)->APB_BRIDGE_PER0_RULE0)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_REG(base) ((base)->APB_BRIDGE_PER0_RULE1)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_REG(base) ((base)->APB_BRIDGE_PER0_RULE3)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_REG(base) ((base)->APB_BRIDGE_PER1_RULE0)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_REG(base) ((base)->APB_BRIDGE_PER1_RULE1)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_REG(base) ((base)->APB_BRIDGE_PER1_RULE2)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE3_REG(base) ((base)->APB_BRIDGE_PER1_RULE3)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_REG(base) ((base)->AHB_PERIPH0_SLAVE_RULE0)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_REG(base) ((base)->AIPS_BRIDGE0_PER_RULE0)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_REG(base) ((base)->AHB_PERIPH1_SLAVE_RULE0)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE1_REG(base) ((base)->AHB_PERIPH1_SLAVE_RULE1)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_REG(base) ((base)->AIPS_BRIDGE1_PER_RULE0)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_REG(base) ((base)->AIPS_BRIDGE1_PER_RULE1)
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_REG(base) ((base)->AHB_PERIPH2_SLAVE_RULE0)
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_REG(base) ((base)->AHB_SECURE_CTRL_PERIPH_RULE0)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_REG(base) ((base)->AHB_PERIPH3_SLAVE_RULE0)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_REG(base) ((base)->AHB_PERIPH3_SLAVE_RULE1)
#define AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(base,index) ((base)->SEC_VIO_ADDR[index])
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(base,index) ((base)->SEC_VIO_MISC_INFO[index])
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_REG(base) ((base)->SEC_VIO_INFO_VALID)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_REG(base) ((base)->SEC_GPIO_MASK0)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_REG(base) ((base)->SEC_GPIO_MASK1)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_REG(base) ((base)->SEC_GPIO_MASK2)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_REG(base)  ((base)->DSP_INT_MASK0)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_REG(base)  ((base)->SEC_MASK_LOCK)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_REG(base) ((base)->MASTER_SEC_LEVEL)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_REG(base) ((base)->MASTER_SEC_ANTI_POL_REG)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_REG(base)  ((base)->CM33_LOCK_REG)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_REG(base) ((base)->MISC_CTRL_DP_REG)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_REG(base)  ((base)->MISC_CTRL_REG)

/*!
 * @}
 */ /* end of group AHB_SECURE_CTRL_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- AHB_SECURE_CTRL Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AHB_SECURE_CTRL_Register_Masks AHB_SECURE_CTRL Register Masks
 * @{
 */

/*! @name ROM_MEM_RULE - Memory ROM Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE0_MASK  (0x3U)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE0_SHIFT (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE0(x)    (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_ROM_MEM_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_ROM_MEM_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE1_MASK  (0x30U)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE1_SHIFT (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE1(x)    (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_ROM_MEM_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_ROM_MEM_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE2_MASK  (0x300U)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE2_SHIFT (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE2(x)    (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_ROM_MEM_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_ROM_MEM_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE3_MASK  (0x3000U)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE3_SHIFT (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE3(x)    (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_ROM_MEM_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_ROM_MEM_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE4_MASK  (0x30000U)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE4_SHIFT (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE4(x)    (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_ROM_MEM_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_ROM_MEM_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE5_MASK  (0x300000U)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE5_SHIFT (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE5(x)    (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_ROM_MEM_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_ROM_MEM_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE6_MASK  (0x3000000U)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE6_SHIFT (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE6(x)    (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_ROM_MEM_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_ROM_MEM_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE7_MASK  (0x30000000U)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE7_SHIFT (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_RULE7(x)    (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_ROM_MEM_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_ROM_MEM_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_ROM_MEM_RULE */
#define AHB_SECURE_CTRL_ROM_MEM_RULE_COUNT       (4U)

/*! @name FLEXSPI0_REGION0_RULE - FLEXSPI0 Region 0 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE0_MASK (0x3U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE0_SHIFT (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE1_MASK (0x30U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE1_SHIFT (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE2_MASK (0x300U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE2_SHIFT (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE2(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE3_MASK (0x3000U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE3_SHIFT (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE3(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE4_MASK (0x30000U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE4_SHIFT (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE4(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE5_MASK (0x300000U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE5_SHIFT (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE5(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE6_MASK (0x3000000U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE6_SHIFT (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE6(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE7_MASK (0x30000000U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE7_SHIFT (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE7(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_COUNT (4U)

/*! @name FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0 - FLEXSPI0 Region 1 Rule 0 Register..FLEXSPI0 Region 4 Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE0_MASK (0x3U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE0_SHIFT (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE0_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE0_MASK)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE1_MASK (0x30U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE1_SHIFT (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE1_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE1_MASK)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE2_MASK (0x300U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE2_SHIFT (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE2(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE2_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE2_MASK)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE3_MASK (0x3000U)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE3_SHIFT (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE3(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE3_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_RULE3_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0 */
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_COUNT (4U)

/*! @name RAM00_RULE - SRAM Partition 00 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM00_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM00_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM00_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM00_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM00_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM00_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM00_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM00_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM00_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM00_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM00_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM00_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM00_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM00_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM00_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM00_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM00_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM00_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM00_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM00_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM00_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM00_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM00_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM00_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM00_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM00_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM00_RULE */
#define AHB_SECURE_CTRL_RAM00_RULE_COUNT         (4U)

/*! @name RAM01_RULE - SRAM Partition 01 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM01_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM01_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM01_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM01_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM01_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM01_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM01_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM01_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM01_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM01_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM01_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM01_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM01_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM01_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM01_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM01_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM01_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM01_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM01_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM01_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM01_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM01_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM01_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM01_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM01_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM01_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM01_RULE */
#define AHB_SECURE_CTRL_RAM01_RULE_COUNT         (4U)

/*! @name RAM02_RULE - SRAM Partition 02 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM02_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM02_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM02_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM02_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM02_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM02_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM02_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM02_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM02_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM02_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM02_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM02_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM02_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM02_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM02_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM02_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM02_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM02_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM02_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM02_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM02_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM02_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM02_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM02_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM02_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM02_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM02_RULE */
#define AHB_SECURE_CTRL_RAM02_RULE_COUNT         (4U)

/*! @name RAM03_RULE - SRAM Partition 03 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM03_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM03_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM03_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM03_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM03_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM03_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM03_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM03_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM03_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM03_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM03_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM03_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM03_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM03_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM03_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM03_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM03_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM03_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM03_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM03_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM03_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM03_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM03_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM03_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM03_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM03_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM03_RULE */
#define AHB_SECURE_CTRL_RAM03_RULE_COUNT         (4U)

/*! @name RAM04_RULE - SRAM Partition 04 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM04_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM04_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM04_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM04_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM04_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM04_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM04_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM04_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM04_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM04_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM04_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM04_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM04_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM04_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM04_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM04_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM04_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM04_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM04_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM04_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM04_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM04_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM04_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM04_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM04_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM04_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM04_RULE */
#define AHB_SECURE_CTRL_RAM04_RULE_COUNT         (4U)

/*! @name RAM05_RULE - SRAM Partition 05 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM05_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM05_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM05_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM05_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM05_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM05_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM05_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM05_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM05_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM05_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM05_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM05_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM05_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM05_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM05_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM05_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM05_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM05_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM05_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM05_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM05_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM05_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM05_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM05_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM05_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM05_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM05_RULE */
#define AHB_SECURE_CTRL_RAM05_RULE_COUNT         (4U)

/*! @name RAM06_RULE - SRAM Partition 06 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM06_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM06_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM06_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM06_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM06_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM06_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM06_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM06_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM06_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM06_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM06_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM06_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM06_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM06_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM06_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM06_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM06_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM06_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM06_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM06_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM06_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM06_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM06_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM06_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM06_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM06_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM06_RULE */
#define AHB_SECURE_CTRL_RAM06_RULE_COUNT         (4U)

/*! @name RAM07_RULE - SRAM Partition 07 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM07_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM07_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM07_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM07_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM07_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM07_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM07_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM07_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM07_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM07_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM07_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM07_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM07_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM07_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM07_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM07_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM07_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM07_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM07_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM07_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM07_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM07_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM07_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM07_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM07_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM07_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM07_RULE */
#define AHB_SECURE_CTRL_RAM07_RULE_COUNT         (4U)

/*! @name RAM08_RULE - SRAM Partition 08 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM08_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM08_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM08_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM08_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM08_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM08_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM08_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM08_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM08_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM08_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM08_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM08_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM08_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM08_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM08_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM08_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM08_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM08_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM08_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM08_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM08_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM08_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM08_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM08_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM08_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM08_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM08_RULE */
#define AHB_SECURE_CTRL_RAM08_RULE_COUNT         (4U)

/*! @name RAM09_RULE - SRAM Partition 09 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM09_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM09_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM09_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM09_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM09_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM09_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM09_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM09_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM09_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM09_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM09_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM09_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM09_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM09_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM09_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM09_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM09_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM09_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM09_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM09_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM09_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM09_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM09_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM09_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM09_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM09_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM09_RULE */
#define AHB_SECURE_CTRL_RAM09_RULE_COUNT         (4U)

/*! @name RAM10_RULE - SRAM Partition 10 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM10_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM10_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM10_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM10_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM10_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM10_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM10_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM10_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM10_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM10_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM10_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM10_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM10_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM10_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM10_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM10_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM10_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM10_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM10_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM10_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM10_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM10_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM10_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM10_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM10_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM10_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM10_RULE */
#define AHB_SECURE_CTRL_RAM10_RULE_COUNT         (4U)

/*! @name RAM11_RULE - SRAM Partition 11 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM11_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM11_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM11_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM11_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM11_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM11_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM11_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM11_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM11_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM11_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM11_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM11_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM11_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM11_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM11_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM11_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM11_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM11_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM11_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM11_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM11_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM11_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM11_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM11_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM11_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM11_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM11_RULE */
#define AHB_SECURE_CTRL_RAM11_RULE_COUNT         (4U)

/*! @name RAM12_RULE - SRAM Partition 12 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM12_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM12_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM12_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM12_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM12_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM12_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM12_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM12_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM12_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM12_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM12_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM12_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM12_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM12_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM12_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM12_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM12_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM12_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM12_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM12_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM12_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM12_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM12_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM12_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM12_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM12_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM12_RULE */
#define AHB_SECURE_CTRL_RAM12_RULE_COUNT         (4U)

/*! @name RAM13_RULE - SRAM Partition 13 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM13_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM13_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM13_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM13_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM13_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM13_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM13_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM13_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM13_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM13_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM13_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM13_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM13_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM13_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM13_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM13_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM13_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM13_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM13_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM13_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM13_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM13_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM13_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM13_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM13_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM13_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM13_RULE */
#define AHB_SECURE_CTRL_RAM13_RULE_COUNT         (4U)

/*! @name RAM14_RULE - SRAM Partition 14 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM14_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM14_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM14_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM14_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM14_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM14_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM14_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM14_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM14_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM14_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM14_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM14_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM14_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM14_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM14_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM14_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM14_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM14_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM14_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM14_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM14_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM14_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM14_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM14_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM14_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM14_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM14_RULE */
#define AHB_SECURE_CTRL_RAM14_RULE_COUNT         (4U)

/*! @name RAM15_RULE - SRAM Partition 15 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM15_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM15_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM15_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM15_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM15_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM15_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM15_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM15_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM15_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM15_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM15_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM15_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM15_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM15_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM15_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM15_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM15_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM15_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM15_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM15_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM15_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM15_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM15_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM15_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM15_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM15_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM15_RULE */
#define AHB_SECURE_CTRL_RAM15_RULE_COUNT         (4U)

/*! @name RAM16_RULE - SRAM Partition 16 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM16_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM16_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM16_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM16_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM16_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM16_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM16_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM16_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM16_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM16_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM16_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM16_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM16_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM16_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM16_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM16_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM16_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM16_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM16_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM16_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM16_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM16_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM16_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM16_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM16_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM16_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM16_RULE */
#define AHB_SECURE_CTRL_RAM16_RULE_COUNT         (4U)

/*! @name RAM17_RULE - SRAM Partition 17 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM17_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM17_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM17_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM17_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM17_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM17_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM17_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM17_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM17_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM17_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM17_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM17_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM17_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM17_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM17_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM17_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM17_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM17_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM17_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM17_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM17_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM17_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM17_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM17_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM17_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM17_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM17_RULE */
#define AHB_SECURE_CTRL_RAM17_RULE_COUNT         (4U)

/*! @name RAM18_RULE - SRAM Partition 18 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM18_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM18_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM18_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM18_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM18_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM18_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM18_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM18_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM18_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM18_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM18_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM18_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM18_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM18_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM18_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM18_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM18_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM18_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM18_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM18_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM18_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM18_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM18_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM18_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM18_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM18_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM18_RULE */
#define AHB_SECURE_CTRL_RAM18_RULE_COUNT         (4U)

/*! @name RAM19_RULE - SRAM Partition 19 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM19_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM19_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM19_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM19_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM19_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM19_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM19_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM19_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM19_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM19_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM19_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM19_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM19_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM19_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM19_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM19_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM19_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM19_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM19_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM19_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM19_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM19_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM19_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM19_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM19_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM19_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM19_RULE */
#define AHB_SECURE_CTRL_RAM19_RULE_COUNT         (4U)

/*! @name RAM20_RULE - SRAM Partition 20 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM20_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM20_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM20_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM20_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM20_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM20_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM20_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM20_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM20_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM20_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM20_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM20_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM20_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM20_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM20_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM20_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM20_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM20_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM20_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM20_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM20_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM20_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM20_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM20_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM20_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM20_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM20_RULE */
#define AHB_SECURE_CTRL_RAM20_RULE_COUNT         (4U)

/*! @name RAM21_RULE - SRAM Partition 21 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM21_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM21_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM21_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM21_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM21_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM21_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM21_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM21_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM21_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM21_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM21_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM21_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM21_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM21_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM21_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM21_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM21_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM21_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM21_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM21_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM21_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM21_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM21_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM21_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM21_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM21_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM21_RULE */
#define AHB_SECURE_CTRL_RAM21_RULE_COUNT         (4U)

/*! @name RAM22_RULE - SRAM Partition 22 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM22_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM22_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM22_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM22_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM22_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM22_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM22_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM22_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM22_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM22_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM22_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM22_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM22_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM22_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM22_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM22_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM22_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM22_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM22_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM22_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM22_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM22_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM22_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM22_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM22_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM22_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM22_RULE */
#define AHB_SECURE_CTRL_RAM22_RULE_COUNT         (4U)

/*! @name RAM23_RULE - SRAM Partition 23 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM23_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM23_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM23_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM23_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM23_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM23_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM23_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM23_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM23_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM23_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM23_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM23_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM23_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM23_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM23_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM23_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM23_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM23_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM23_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM23_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM23_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM23_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM23_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM23_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM23_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM23_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM23_RULE */
#define AHB_SECURE_CTRL_RAM23_RULE_COUNT         (4U)

/*! @name RAM24_RULE - SRAM Partition 24 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM24_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM24_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM24_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM24_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM24_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM24_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM24_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM24_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM24_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM24_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM24_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM24_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM24_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM24_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM24_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM24_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM24_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM24_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM24_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM24_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM24_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM24_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM24_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM24_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM24_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM24_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM24_RULE */
#define AHB_SECURE_CTRL_RAM24_RULE_COUNT         (4U)

/*! @name RAM25_RULE - SRAM Partition 25 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM25_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM25_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM25_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM25_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM25_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM25_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM25_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM25_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM25_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM25_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM25_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM25_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM25_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM25_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM25_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM25_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM25_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM25_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM25_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM25_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM25_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM25_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM25_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM25_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM25_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM25_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM25_RULE */
#define AHB_SECURE_CTRL_RAM25_RULE_COUNT         (4U)

/*! @name RAM26_RULE - SRAM Partition 26 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM26_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM26_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM26_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM26_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM26_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM26_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM26_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM26_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM26_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM26_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM26_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM26_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM26_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM26_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM26_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM26_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM26_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM26_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM26_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM26_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM26_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM26_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM26_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM26_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM26_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM26_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM26_RULE */
#define AHB_SECURE_CTRL_RAM26_RULE_COUNT         (4U)

/*! @name RAM27_RULE - SRAM Partition 27 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM27_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM27_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM27_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM27_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM27_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM27_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM27_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM27_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM27_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM27_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM27_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM27_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM27_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM27_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM27_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM27_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM27_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM27_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM27_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM27_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM27_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM27_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM27_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM27_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM27_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM27_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM27_RULE */
#define AHB_SECURE_CTRL_RAM27_RULE_COUNT         (4U)

/*! @name RAM28_RULE - SRAM Partition 28 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM28_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM28_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM28_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM28_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM28_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM28_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM28_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM28_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM28_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM28_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM28_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM28_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM28_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM28_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM28_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM28_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM28_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM28_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM28_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM28_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM28_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM28_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM28_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM28_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM28_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM28_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM28_RULE */
#define AHB_SECURE_CTRL_RAM28_RULE_COUNT         (4U)

/*! @name RAM29_RULE - SRAM Partition 29 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM29_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM29_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM29_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM29_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM29_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM29_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM29_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM29_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM29_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM29_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM29_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM29_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM29_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM29_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM29_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM29_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM29_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM29_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM29_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM29_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM29_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM29_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM29_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM29_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM29_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM29_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM29_RULE */
#define AHB_SECURE_CTRL_RAM29_RULE_COUNT         (4U)

/*! @name RAM30_RULE - SRAM Partition 30 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM30_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM30_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM30_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM30_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM30_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM30_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM30_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM30_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM30_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM30_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM30_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM30_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM30_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM30_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM30_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM30_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM30_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM30_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM30_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM30_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM30_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM30_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM30_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM30_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM30_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM30_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM30_RULE */
#define AHB_SECURE_CTRL_RAM30_RULE_COUNT         (4U)

/*! @name RAM31_RULE - SRAM Partition 31 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_RAM31_RULE_RULE0_MASK    (0x3U)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE0_SHIFT   (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM31_RULE_RULE0(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM31_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_RAM31_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE1_MASK    (0x30U)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE1_SHIFT   (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM31_RULE_RULE1(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM31_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_RAM31_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE2_MASK    (0x300U)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE2_SHIFT   (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM31_RULE_RULE2(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM31_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_RAM31_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE3_MASK    (0x3000U)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE3_SHIFT   (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM31_RULE_RULE3(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM31_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_RAM31_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE4_MASK    (0x30000U)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE4_SHIFT   (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM31_RULE_RULE4(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM31_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_RAM31_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE5_MASK    (0x300000U)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE5_SHIFT   (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM31_RULE_RULE5(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM31_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_RAM31_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE6_MASK    (0x3000000U)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE6_SHIFT   (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM31_RULE_RULE6(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM31_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_RAM31_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE7_MASK    (0x30000000U)
#define AHB_SECURE_CTRL_RAM31_RULE_RULE7_SHIFT   (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_RAM31_RULE_RULE7(x)      (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_RAM31_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_RAM31_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_RAM31_RULE */
#define AHB_SECURE_CTRL_RAM31_RULE_COUNT         (4U)

/*! @name SDMA_RAM_RULE - Smart DMA (SDMA) RAM Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE0_MASK (0x3U)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE0_SHIFT (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE0(x)   (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE1_MASK (0x30U)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE1_SHIFT (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE1(x)   (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE2_MASK (0x300U)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE2_SHIFT (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE2(x)   (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE3_MASK (0x3000U)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE3_SHIFT (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE3(x)   (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE4_MASK (0x30000U)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE4_SHIFT (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE4(x)   (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE5_MASK (0x300000U)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE5_SHIFT (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE5(x)   (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE6_MASK (0x3000000U)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE6_SHIFT (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE6(x)   (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE7_MASK (0x30000000U)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE7_SHIFT (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE7(x)   (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_SDMA_RAM_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_SDMA_RAM_RULE */
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_COUNT      (4U)

/*! @name FLEXSPI1_REGION0_RULE - FlexSPI1 Region 0 Rule(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE0_MASK (0x3U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE0_SHIFT (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE0_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE0_MASK)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE1_MASK (0x30U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE1_SHIFT (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE1_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE1_MASK)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE2_MASK (0x300U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE2_SHIFT (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE2(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE2_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE2_MASK)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE3_MASK (0x3000U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE3_SHIFT (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE3(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE3_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE3_MASK)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE4_MASK (0x30000U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE4_SHIFT (16U)
/*! RULE4 - Rule 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE4(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE4_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE4_MASK)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE5_MASK (0x300000U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE5_SHIFT (20U)
/*! RULE5 - Rule 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE5(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE5_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE5_MASK)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE6_MASK (0x3000000U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE6_SHIFT (24U)
/*! RULE6 - Rule 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE6(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE6_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE6_MASK)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE7_MASK (0x30000000U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE7_SHIFT (28U)
/*! RULE7 - Rule 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE7(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE7_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_RULE7_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE */
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_COUNT (4U)

/*! @name FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0 - FlexSPI1 Region 1 Rule 0 Register..FlexSPI1 Region 4 Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE0_MASK (0x3U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE0_SHIFT (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE0_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE0_MASK)
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE1_MASK (0x30U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE1_SHIFT (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE1_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE1_MASK)
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE2_MASK (0x300U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE2_SHIFT (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE2(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE2_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE2_MASK)
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE3_MASK (0x3000U)
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE3_SHIFT (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE3(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE3_SHIFT)) & AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_RULE3_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0 */
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_COUNT (4U)

/*! @name APB_BRIDGE_PER0_RULE0 - APB Bridge Peripheral 0 Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_RSTCTL_A_MASK (0x3U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_RSTCTL_A_SHIFT (0U)
/*! RSTCTL_A - RSTCTL_A
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_RSTCTL_A(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_RSTCTL_A_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_RSTCTL_A_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_CLKCTL_A_MASK (0x30U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_CLKCTL_A_SHIFT (4U)
/*! CLKCTL_A - CLKCTL_A
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_CLKCTL_A(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_CLKCTL_A_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_CLKCTL_A_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_SYSCTL_A_MASK (0x300U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_SYSCTL_A_SHIFT (8U)
/*! SYSCTL_A - SYSCTL_A
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_SYSCTL_A(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_SYSCTL_A_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_SYSCTL_A_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_PVT_MASK (0x3000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_PVT_SHIFT (12U)
/*! PVT - PVT
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_PVT(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_PVT_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_PVT_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_IOCON_MASK (0x30000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_IOCON_SHIFT (16U)
/*! IOCON - IOCON
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_IOCON(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_IOCON_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_IOCON_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_PUF_MASK (0x3000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_PUF_SHIFT (24U)
/*! PUF - PUF
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_PUF(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_PUF_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_PUF_MASK)
/*! @} */

/*! @name APB_BRIDGE_PER0_RULE1 - APB Bridge Peripheral 0 Rule 1 Register */
/*! @{ */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_WWDT0_MASK (0x3000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_WWDT0_SHIFT (24U)
/*! WWDT0 - WWDT0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_WWDT0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_WWDT0_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_WWDT0_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_MICRO_TICK_MASK (0x30000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_MICRO_TICK_SHIFT (28U)
/*! MICRO_TICK - MICRO_TICK
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_MICRO_TICK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_MICRO_TICK_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_MICRO_TICK_MASK)
/*! @} */

/*! @name APB_BRIDGE_PER0_RULE3 - APB Bridge Peripheral 0 Rule 3 Register */
/*! @{ */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_PROBE_IS_SYNC_MASK (0x3000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_PROBE_IS_SYNC_SHIFT (24U)
/*! PROBE_IS_SYNC - PROBE_IS (SYNC)
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_PROBE_IS_SYNC(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_PROBE_IS_SYNC_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_PROBE_IS_SYNC_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_PROBE_IS_XVC_MASK (0x30000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_PROBE_IS_XVC_SHIFT (28U)
/*! PROBE_IS_XVC - PROBE_IS (XVC)
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_PROBE_IS_XVC(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_PROBE_IS_XVC_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_PROBE_IS_XVC_MASK)
/*! @} */

/*! @name APB_BRIDGE_PER1_RULE0 - APB Bridge Peripheral 1 Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_RSTCTL_B_MASK (0x3U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_RSTCTL_B_SHIFT (0U)
/*! RSTCTL_B - RSTCTL_B
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_RSTCTL_B(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_RSTCTL_B_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_RSTCTL_B_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_CLKCTL_B_MASK (0x30U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_CLKCTL_B_SHIFT (4U)
/*! CLKCTL_B - CLKCTL_B
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_CLKCTL_B(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_CLKCTL_B_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_CLKCTL_B_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_SYSCTL_B_MASK (0x300U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_SYSCTL_B_SHIFT (8U)
/*! SYSCTL_B - SYSCTL_B
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_SYSCTL_B(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_SYSCTL_B_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_SYSCTL_B_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_GPIO_INT_MASK (0x300000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_GPIO_INT_SHIFT (20U)
/*! GPIO_INT - GPIO_INT
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_GPIO_INT(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_GPIO_INT_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_GPIO_INT_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_PERIPHERAL_MUXES_MASK (0x3000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_PERIPHERAL_MUXES_SHIFT (24U)
/*! PERIPHERAL_MUXES - Peripheral Muxes
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_PERIPHERAL_MUXES(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_PERIPHERAL_MUXES_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_PERIPHERAL_MUXES_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_SDMA_MASK (0x30000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_SDMA_SHIFT (28U)
/*! SDMA - Smart DMA (SDMA)
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_SDMA(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_SDMA_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_SDMA_MASK)
/*! @} */

/*! @name APB_BRIDGE_PER1_RULE1 - APB Bridge Peripheral 1 Rule 1 Register */
/*! @{ */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B0_MASK (0x3U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B0_SHIFT (0U)
/*! CT32B0 - CT32B0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B0_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B0_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B1_MASK (0x30U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B1_SHIFT (4U)
/*! CT32B1 - CT32B1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B1_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B1_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B2_MASK (0x300U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B2_SHIFT (8U)
/*! CT32B2 - CT32B2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B2(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B2_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B2_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B3_MASK (0x3000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B3_SHIFT (12U)
/*! CT32B3 - CT32B3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B3(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B3_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B3_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B4_MASK (0x30000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B4_SHIFT (16U)
/*! CT32B4 - CT32B4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B4(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B4_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_CT32B4_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_MRT0_MASK (0x300000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_MRT0_SHIFT (20U)
/*! MRT0 - MRT0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_MRT0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_MRT0_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_MRT0_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_WWDT1_MASK (0x3000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_WWDT1_SHIFT (24U)
/*! WWDT1 - WWDT1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_WWDT1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_WWDT1_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_WWDT1_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_FREQMEASURE_MASK (0x30000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_FREQMEASURE_SHIFT (28U)
/*! FREQMEASURE - FREQMEASURE
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_FREQMEASURE(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_FREQMEASURE_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_FREQMEASURE_MASK)
/*! @} */

/*! @name APB_BRIDGE_PER1_RULE2 - APB Bridge Peripheral 1 Rule 2 Register */
/*! @{ */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_RTC_WAKEUP_MASK (0x3U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_RTC_WAKEUP_SHIFT (0U)
/*! RTC_WAKEUP - RTC Wakeup
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_RTC_WAKEUP(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_RTC_WAKEUP_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_RTC_WAKEUP_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_DSI_HOST_CONTROLLER_MASK (0x30U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_DSI_HOST_CONTROLLER_SHIFT (4U)
/*! DSI_HOST_CONTROLLER - DSI Host Controller
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_DSI_HOST_CONTROLLER(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_DSI_HOST_CONTROLLER_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_DSI_HOST_CONTROLLER_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_FLEXIO_REGISTERS_MASK (0x300U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_FLEXIO_REGISTERS_SHIFT (8U)
/*! FLEXIO_REGISTERS - FLEXIO Registers
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_FLEXIO_REGISTERS(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_FLEXIO_REGISTERS_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_FLEXIO_REGISTERS_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_CACHE_CONTROL_0_REGS_MASK (0x3000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_CACHE_CONTROL_0_REGS_SHIFT (12U)
/*! CACHE_CONTROL_0_REGS - Cache Control 0 Registers
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_CACHE_CONTROL_0_REGS(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_CACHE_CONTROL_0_REGS_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_CACHE_CONTROL_0_REGS_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_CACHE_CONTROL_1_REGS_MASK (0x30000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_CACHE_CONTROL_1_REGS_SHIFT (16U)
/*! CACHE_CONTROL_1_REGS - Cache Control 1 Registers
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_CACHE_CONTROL_1_REGS(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_CACHE_CONTROL_1_REGS_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_CACHE_CONTROL_1_REGS_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_I3C0_MASK (0x3000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_I3C0_SHIFT (24U)
/*! I3C0 - I3C0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_I3C0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_I3C0_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_I3C0_MASK)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_I3C1_MASK (0x30000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_I3C1_SHIFT (28U)
/*! I3C1 - I3C1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_I3C1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_I3C1_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_I3C1_MASK)
/*! @} */

/*! @name APB_BRIDGE_PER1_RULE3 - APB Bridge Peripheral 1 Rule 3 Register */
/*! @{ */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE3_MRT1_MASK (0x30000000U)
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE3_MRT1_SHIFT (28U)
/*! MRT1 - MRT1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE3_MRT1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE3_MRT1_SHIFT)) & AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE3_MRT1_MASK)
/*! @} */

/*! @name AHB_PERIPH0_SLAVE_RULE0 - AHB Peripheral 0 Slave Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_HSGPIO_MASK (0x3U)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_HSGPIO_SHIFT (0U)
/*! HSGPIO - HSGPIO
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_HSGPIO(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_HSGPIO_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_HSGPIO_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DMA0_MASK (0x30U)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DMA0_SHIFT (4U)
/*! DMA0 - DMA 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DMA0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DMA0_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DMA0_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DMA1_MASK (0x300U)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DMA1_SHIFT (8U)
/*! DMA1 - DMA 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DMA1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DMA1_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DMA1_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM0_MASK (0x3000U)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM0_SHIFT (12U)
/*! FLEXCOMM0 - FLEXCOMM 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM0_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM0_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM1_MASK (0x30000U)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM1_SHIFT (16U)
/*! FLEXCOMM1 - FLEXCOMM 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM1_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM1_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM2_MASK (0x300000U)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM2_SHIFT (20U)
/*! FLEXCOMM2 - FLEXCOMM 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM2(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM2_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM2_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM3_MASK (0x3000000U)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM3_SHIFT (24U)
/*! FLEXCOMM3 - FLEXCOMM 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM3(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM3_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_FLEXCOMM3_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DEBUG_MAILBOX_MASK (0x30000000U)
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DEBUG_MAILBOX_SHIFT (28U)
/*! DEBUG_MAILBOX - DEBUG_MAILBOX
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DEBUG_MAILBOX(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DEBUG_MAILBOX_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_DEBUG_MAILBOX_MASK)
/*! @} */

/*! @name AIPS_BRIDGE0_PER_RULE0 - AIPS Bridge Peripheral 0 Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_MU0_MASK (0x3U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_MU0_SHIFT (0U)
/*! MU0 - MU0 (M33 PORT)
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_MU0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_MU0_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_MU0_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_MU1_MASK (0x30U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_MU1_SHIFT (4U)
/*! MU1 - MU1 (DSP PORT)
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_MU1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_MU1_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_MU1_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_SEMAPHORE_MASK (0x300U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_SEMAPHORE_SHIFT (8U)
/*! SEMAPHORE - Semaphore
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_SEMAPHORE(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_SEMAPHORE_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_SEMAPHORE_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_OS_EVENT_TIMER_M33_PORT_MASK (0x3000U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_OS_EVENT_TIMER_M33_PORT_SHIFT (12U)
/*! OS_EVENT_TIMER_M33_PORT - OS_EVENT TIMER (M33 PORT)
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_OS_EVENT_TIMER_M33_PORT(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_OS_EVENT_TIMER_M33_PORT_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_OS_EVENT_TIMER_M33_PORT_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_OS_EVENT_TIMER_DSP_PORT_MASK (0x30000U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_OS_EVENT_TIMER_DSP_PORT_SHIFT (16U)
/*! OS_EVENT_TIMER_DSP_PORT - OS_EVENT TIMER (DSP PORT)
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_OS_EVENT_TIMER_DSP_PORT(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_OS_EVENT_TIMER_DSP_PORT_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_OS_EVENT_TIMER_DSP_PORT_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_ROM_MASK (0x300000U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_ROM_SHIFT (20U)
/*! ROM - ROM
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_ROM(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_ROM_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_ROM_MASK)
/*! @} */

/*! @name AHB_PERIPH1_SLAVE_RULE0 - AHB Peripheral 1 Slave Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_CRC_MASK (0x3U)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_CRC_SHIFT (0U)
/*! CRC - CRC
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_CRC(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_CRC_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_CRC_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_DMIC0_MASK (0x30U)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_DMIC0_SHIFT (4U)
/*! DMIC0 - DMIC0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_DMIC0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_DMIC0_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_DMIC0_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM4_MASK (0x300U)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM4_SHIFT (8U)
/*! FLEXCOMM4 - FLEXCOMM 4
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM4(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM4_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM4_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM5_MASK (0x3000U)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM5_SHIFT (12U)
/*! FLEXCOMM5 - FLEXCOMM 5
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM5(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM5_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM5_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM6_MASK (0x30000U)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM6_SHIFT (16U)
/*! FLEXCOMM6 - FLEXCOMM 6
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM6(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM6_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM6_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM7_MASK (0x300000U)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM7_SHIFT (20U)
/*! FLEXCOMM7 - FLEXCOMM 7
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM7(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM7_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM7_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM14_MASK (0x3000000U)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM14_SHIFT (24U)
/*! FLEXCOMM14 - FLEXCOMM 14
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM14(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM14_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM14_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM15_MASK (0x30000000U)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM15_SHIFT (28U)
/*! FLEXCOMM15 - FLEXCOMM 15
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM15(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM15_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_FLEXCOMM15_MASK)
/*! @} */

/*! @name AHB_PERIPH1_SLAVE_RULE1 - AHB Peripheral 1 Slave Rule 1 Register */
/*! @{ */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE1_FLEXCOMM16_MASK (0x3U)
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE1_FLEXCOMM16_SHIFT (0U)
/*! FLEXCOMM16 - FLEXCOMM 16
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE1_FLEXCOMM16(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE1_FLEXCOMM16_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE1_FLEXCOMM16_MASK)
/*! @} */

/*! @name AIPS_BRIDGE1_PER_RULE0 - AIPS Bridge Peripheral 1 Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_0_MASK (0x3U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_0_SHIFT (0U)
/*! OTP_CONTROLLER_0 - OTP Controller 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_0_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_0_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_1_MASK (0x30U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_1_SHIFT (4U)
/*! OTP_CONTROLLER_1 - OTP Controller 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_1_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_1_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_2_MASK (0x300U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_2_SHIFT (8U)
/*! OTP_CONTROLLER_2 - OTP Controller 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_2(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_2_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_2_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_3_MASK (0x3000U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_3_SHIFT (12U)
/*! OTP_CONTROLLER_3 - OTP Controller 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_3(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_3_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_OTP_CONTROLLER_3_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_FLEXSPI0_REGISTERS_MASK (0x30000U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_FLEXSPI0_REGISTERS_SHIFT (16U)
/*! FLEXSPI0_REGISTERS - FLEXSPI0 Registers
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_FLEXSPI0_REGISTERS(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_FLEXSPI0_REGISTERS_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_FLEXSPI0_REGISTERS_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_PMC_PMU_CONTROL_MASK (0x300000U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_PMC_PMU_CONTROL_SHIFT (20U)
/*! PMC_PMU_CONTROL - PMC (PMU CONTROL)
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_PMC_PMU_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_PMC_PMU_CONTROL_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_PMC_PMU_CONTROL_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_SDIO0_REGISTERS_MASK (0x3000000U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_SDIO0_REGISTERS_SHIFT (24U)
/*! SDIO0_REGISTERS - SDIO 0 Registers
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_SDIO0_REGISTERS(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_SDIO0_REGISTERS_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_SDIO0_REGISTERS_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_SDIO1_REGISTERS_MASK (0x30000000U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_SDIO1_REGISTERS_SHIFT (28U)
/*! SDIO1_REGISTERS - SDIO 1 Registers
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_SDIO1_REGISTERS(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_SDIO1_REGISTERS_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_SDIO1_REGISTERS_MASK)
/*! @} */

/*! @name AIPS_BRIDGE1_PER_RULE1 - AIPS Bridge Peripheral 1 Rule 1 Register */
/*! @{ */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_RNG_MASK (0x3U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_RNG_SHIFT (0U)
/*! RNG - RNG (Random Number Generator)
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_RNG(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_RNG_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_RNG_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_ACMP0_MASK (0x30U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_ACMP0_SHIFT (4U)
/*! ACMP0 - ACMP 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_ACMP0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_ACMP0_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_ACMP0_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_ADC0_MASK (0x300U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_ADC0_SHIFT (8U)
/*! ADC0 - ADC 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_ADC0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_ADC0_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_ADC0_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_HS_USB_PHY_MASK (0x3000U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_HS_USB_PHY_SHIFT (12U)
/*! HS_USB_PHY - HS USB PHY
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_HS_USB_PHY(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_HS_USB_PHY_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_HS_USB_PHY_MASK)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_FLEXSPI1_REGISTERS_MASK (0x30000U)
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_FLEXSPI1_REGISTERS_SHIFT (16U)
/*! FLEXSPI1_REGISTERS - FLEXSPI1 Registers
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_FLEXSPI1_REGISTERS(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_FLEXSPI1_REGISTERS_SHIFT)) & AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_FLEXSPI1_REGISTERS_MASK)
/*! @} */

/*! @name AHB_PERIPH2_SLAVE_RULE0 - AHB Peripheral 2 Slave Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_RAM_MASK (0x3U)
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_RAM_SHIFT (0U)
/*! USB_HS_RAM - USB HS RAM
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_RAM(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_RAM_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_RAM_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_DEV_MASK (0x30U)
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_DEV_SHIFT (4U)
/*! USB_HS_DEV - USB HS DEV
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_DEV(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_DEV_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_DEV_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_HOST_MASK (0x300U)
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_HOST_SHIFT (8U)
/*! USB_HS_HOST - USB HS HOST
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_HOST(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_HOST_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_USB_HS_HOST_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_SCT_MASK (0x3000U)
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_SCT_SHIFT (12U)
/*! SCT - SCT
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_SCT(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_SCT_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_SCT_MASK)
/*! @} */

/*! @name AHB_SECURE_CTRL_PERIPH_RULE0 - AHB Secure Control Peripheral Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE0_MASK (0x3U)
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE0_SHIFT (0U)
/*! RULE0 - Rule 0
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE0_SHIFT)) & AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE0_MASK)
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE1_MASK (0x30U)
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE1_SHIFT (4U)
/*! RULE1 - Rule 1
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE1_SHIFT)) & AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE1_MASK)
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE2_MASK (0x300U)
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE2_SHIFT (8U)
/*! RULE2 - Rule 2
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE2(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE2_SHIFT)) & AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE2_MASK)
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE3_MASK (0x3000U)
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE3_SHIFT (12U)
/*! RULE3 - Rule 3
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE3(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE3_SHIFT)) & AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_RULE3_MASK)
/*! @} */

/*! @name AHB_PERIPH3_SLAVE_RULE0 - AHB Peripheral 3 Slave Rule 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_POWERQUAD_MASK (0x3U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_POWERQUAD_SHIFT (0U)
/*! POWERQUAD - POWERQUAD
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_POWERQUAD(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_POWERQUAD_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_POWERQUAD_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_CASPER_MASK (0x30U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_CASPER_SHIFT (4U)
/*! CASPER - CASPER
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_CASPER(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_CASPER_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_CASPER_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_CASPER_RAM_MASK (0x300U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_CASPER_RAM_SHIFT (8U)
/*! CASPER_RAM - CASPER RAM
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_CASPER_RAM(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_CASPER_RAM_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_CASPER_RAM_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_SECURE_GPIO_MASK (0x3000U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_SECURE_GPIO_SHIFT (12U)
/*! SECURE_GPIO - Secure GPIO
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_SECURE_GPIO(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_SECURE_GPIO_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_SECURE_GPIO_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_HASH_MASK (0x30000U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_HASH_SHIFT (16U)
/*! HASH - HASH
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_HASH(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_HASH_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_HASH_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM8_MASK (0x300000U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM8_SHIFT (20U)
/*! FLEXCOMM8 - FLEXCOMM 8
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM8(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM8_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM8_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM9_MASK (0x3000000U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM9_SHIFT (24U)
/*! FLEXCOMM9 - FLEXCOMM 9
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM9(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM9_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM9_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM10_MASK (0x30000000U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM10_SHIFT (28U)
/*! FLEXCOMM10 - FLEXCOMM 10
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM10(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM10_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_FLEXCOMM10_MASK)
/*! @} */

/*! @name AHB_PERIPH3_SLAVE_RULE1 - AHB Peripheral 3 Slave Rule 1 Register */
/*! @{ */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM11_MASK (0x3U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM11_SHIFT (0U)
/*! FLEXCOMM11 - FLEXCOMM 11
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM11(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM11_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM11_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM12_MASK (0x30U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM12_SHIFT (4U)
/*! FLEXCOMM12 - FLEXCOMM 12
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM12(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM12_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM12_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM13_MASK (0x300U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM13_SHIFT (8U)
/*! FLEXCOMM13 - FLEXCOMM 13
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM13(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM13_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_FLEXCOMM13_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_DCNANO_MASK (0x3000U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_DCNANO_SHIFT (12U)
/*! DCNANO - DCNANO
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_DCNANO(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_DCNANO_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_DCNANO_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_GPU_MASK (0x30000U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_GPU_SHIFT (16U)
/*! GPU - GPU
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_GPU(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_GPU_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_GPU_MASK)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_AXI_SWITCH_MASK (0x300000U)
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_AXI_SWITCH_SHIFT (20U)
/*! AXI_SWITCH - AXI Switch
 *  0b00..Non-secure and non-privilege user access allowed
 *  0b01..Non-secure and privilege access allowed
 *  0b10..Secure and non-privilege user access allowed
 *  0b11..Secure and privilege user access allowed
 */
#define AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_AXI_SWITCH(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_AXI_SWITCH_SHIFT)) & AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_AXI_SWITCH_MASK)
/*! @} */

/*! @name SEC_VIO_ADDR - Security Violation Address(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_SEC_VIO_ADDR_SEC_VIO_INFO_WRITE_MASK (0xFFFFFFFFU)
#define AHB_SECURE_CTRL_SEC_VIO_ADDR_SEC_VIO_INFO_WRITE_SHIFT (0U)
/*! SEC_VIO_INFO_WRITE - Security violation access read/write indicator
 */
#define AHB_SECURE_CTRL_SEC_VIO_ADDR_SEC_VIO_INFO_WRITE(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_VIO_ADDR_SEC_VIO_INFO_WRITE_SHIFT)) & AHB_SECURE_CTRL_SEC_VIO_ADDR_SEC_VIO_INFO_WRITE_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_SEC_VIO_ADDR */
#define AHB_SECURE_CTRL_SEC_VIO_ADDR_COUNT       (18U)

/*! @name SEC_VIO_MISC_INFO - Security Violation Miscellaneous Information at Address(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_WRITE_MASK (0x1U)
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_WRITE_SHIFT (0U)
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_DATA_ACCESS_MASK (0x2U)
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_DATA_ACCESS_SHIFT (1U)
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_MASTER_SEC_LEVEL_MASK (0xF0U)
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_MASTER_SEC_LEVEL_SHIFT (4U)
/*! SEC_VIO_INFO_MASTER_SEC_LEVEL - Security Violation Info Master Security Level
 */
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_MASTER_SEC_LEVEL(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_MASTER_SEC_LEVEL_SHIFT)) & AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_MASTER_SEC_LEVEL_MASK)
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_MASTER_MASK (0xF00U)
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_MASTER_SHIFT (8U)
/*! SEC_VIO_INFO_MASTER - Security violation master number
 *  0b0000..M33 Code
 *  0b0001..M33 System
 *  0b0010..Powerquad
 *  0b0011..DSP
 *  0b0100..DMA0
 *  0b0101..DMA1
 *  0b0110..SDMA Instruction
 *  0b0111..SDMA Data
 *  0b1000..SDIO0
 *  0b1001..SDIO1
 *  0b1010..HASH
 *  0b1011..GPU
 *  0b1100..Reserved
 *  0b1101..Reserved
 *  0b1110..Reserved
 *  0b1111..Reserved
 */
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_MASTER(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_MASTER_SHIFT)) & AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_SEC_VIO_INFO_MASTER_MASK)
/*! @} */

/* The count of AHB_SECURE_CTRL_SEC_VIO_MISC_INFO */
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_COUNT  (18U)

/*! @name SEC_VIO_INFO_VALID - Security Violation Info Validity for Address(n) Register */
/*! @{ */
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID0_MASK (0x1U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID0_SHIFT (0U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID1_MASK (0x2U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID1_SHIFT (1U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID2_MASK (0x4U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID2_SHIFT (2U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID3_MASK (0x8U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID3_SHIFT (3U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID4_MASK (0x10U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID4_SHIFT (4U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID5_MASK (0x20U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID5_SHIFT (5U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID6_MASK (0x40U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID6_SHIFT (6U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID7_MASK (0x80U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID7_SHIFT (7U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID8_MASK (0x100U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID8_SHIFT (8U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID9_MASK (0x200U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID9_SHIFT (9U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID10_MASK (0x400U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID10_SHIFT (10U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID11_MASK (0x800U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID11_SHIFT (11U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID12_MASK (0x1000U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID12_SHIFT (12U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID13_MASK (0x2000U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID13_SHIFT (13U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID14_MASK (0x4000U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID14_SHIFT (14U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID15_MASK (0x8000U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID15_SHIFT (15U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID16_MASK (0x10000U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID16_SHIFT (16U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID17_MASK (0x20000U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID17_SHIFT (17U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID18_MASK (0x40000U)
#define AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_VIO_INFO_VALID18_SHIFT (18U)
/*! @} */

/*! @name SEC_GPIO_MASK0 - GPIO Mask for Port 0 Register */
/*! @{ */
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN0_SEC_MASK_MASK (0x1U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN0_SEC_MASK_SHIFT (0U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN1_SEC_MASK_MASK (0x2U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN1_SEC_MASK_SHIFT (1U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN2_SEC_MASK_MASK (0x4U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN2_SEC_MASK_SHIFT (2U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN3_SEC_MASK_MASK (0x8U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN3_SEC_MASK_SHIFT (3U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN4_SEC_MASK_MASK (0x10U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN4_SEC_MASK_SHIFT (4U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN5_SEC_MASK_MASK (0x20U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN5_SEC_MASK_SHIFT (5U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN6_SEC_MASK_MASK (0x40U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN6_SEC_MASK_SHIFT (6U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN7_SEC_MASK_MASK (0x80U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN7_SEC_MASK_SHIFT (7U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN8_SEC_MASK_MASK (0x100U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN8_SEC_MASK_SHIFT (8U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN9_SEC_MASK_MASK (0x200U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN9_SEC_MASK_SHIFT (9U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN10_SEC_MASK_MASK (0x400U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN10_SEC_MASK_SHIFT (10U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN11_SEC_MASK_MASK (0x800U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN11_SEC_MASK_SHIFT (11U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN12_SEC_MASK_MASK (0x1000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN12_SEC_MASK_SHIFT (12U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN13_SEC_MASK_MASK (0x2000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN13_SEC_MASK_SHIFT (13U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN14_SEC_MASK_MASK (0x4000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN14_SEC_MASK_SHIFT (14U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN15_SEC_MASK_MASK (0x8000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN15_SEC_MASK_SHIFT (15U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN16_SEC_MASK_MASK (0x10000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN16_SEC_MASK_SHIFT (16U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN17_SEC_MASK_MASK (0x20000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN17_SEC_MASK_SHIFT (17U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN18_SEC_MASK_MASK (0x40000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN18_SEC_MASK_SHIFT (18U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN19_SEC_MASK_MASK (0x80000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN19_SEC_MASK_SHIFT (19U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN20_SEC_MASK_MASK (0x100000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN20_SEC_MASK_SHIFT (20U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN21_SEC_MASK_MASK (0x200000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN21_SEC_MASK_SHIFT (21U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN22_SEC_MASK_MASK (0x400000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN22_SEC_MASK_SHIFT (22U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN23_SEC_MASK_MASK (0x800000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN23_SEC_MASK_SHIFT (23U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN24_SEC_MASK_MASK (0x1000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN24_SEC_MASK_SHIFT (24U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN25_SEC_MASK_MASK (0x2000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN25_SEC_MASK_SHIFT (25U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN26_SEC_MASK_MASK (0x4000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN26_SEC_MASK_SHIFT (26U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN27_SEC_MASK_MASK (0x8000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN27_SEC_MASK_SHIFT (27U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN28_SEC_MASK_MASK (0x10000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN28_SEC_MASK_SHIFT (28U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN29_SEC_MASK_MASK (0x20000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN29_SEC_MASK_SHIFT (29U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN30_SEC_MASK_MASK (0x40000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN30_SEC_MASK_SHIFT (30U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN31_SEC_MASK_MASK (0x80000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK0_PIO0_PIN31_SEC_MASK_SHIFT (31U)
/*! @} */

/*! @name SEC_GPIO_MASK1 - GPIO Mask for Port 1 Register */
/*! @{ */
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN0_SEC_MASK_MASK (0x1U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN0_SEC_MASK_SHIFT (0U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN1_SEC_MASK_MASK (0x2U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN1_SEC_MASK_SHIFT (1U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN2_SEC_MASK_MASK (0x4U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN2_SEC_MASK_SHIFT (2U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN3_SEC_MASK_MASK (0x8U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN3_SEC_MASK_SHIFT (3U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN4_SEC_MASK_MASK (0x10U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN4_SEC_MASK_SHIFT (4U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN5_SEC_MASK_MASK (0x20U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN5_SEC_MASK_SHIFT (5U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN6_SEC_MASK_MASK (0x40U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN6_SEC_MASK_SHIFT (6U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN7_SEC_MASK_MASK (0x80U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN7_SEC_MASK_SHIFT (7U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN8_SEC_MASK_MASK (0x100U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN8_SEC_MASK_SHIFT (8U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN9_SEC_MASK_MASK (0x200U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN9_SEC_MASK_SHIFT (9U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN10_SEC_MASK_MASK (0x400U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN10_SEC_MASK_SHIFT (10U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN11_SEC_MASK_MASK (0x800U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN11_SEC_MASK_SHIFT (11U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN12_SEC_MASK_MASK (0x1000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN12_SEC_MASK_SHIFT (12U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN13_SEC_MASK_MASK (0x2000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN13_SEC_MASK_SHIFT (13U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN14_SEC_MASK_MASK (0x4000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN14_SEC_MASK_SHIFT (14U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN15_SEC_MASK_MASK (0x8000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN15_SEC_MASK_SHIFT (15U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN16_SEC_MASK_MASK (0x10000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN16_SEC_MASK_SHIFT (16U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN17_SEC_MASK_MASK (0x20000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN17_SEC_MASK_SHIFT (17U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN18_SEC_MASK_MASK (0x40000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN18_SEC_MASK_SHIFT (18U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN19_SEC_MASK_MASK (0x80000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN19_SEC_MASK_SHIFT (19U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN20_SEC_MASK_MASK (0x100000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN20_SEC_MASK_SHIFT (20U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN21_SEC_MASK_MASK (0x200000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN21_SEC_MASK_SHIFT (21U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN22_SEC_MASK_MASK (0x400000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN22_SEC_MASK_SHIFT (22U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN23_SEC_MASK_MASK (0x800000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN23_SEC_MASK_SHIFT (23U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN24_SEC_MASK_MASK (0x1000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN24_SEC_MASK_SHIFT (24U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN25_SEC_MASK_MASK (0x2000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN25_SEC_MASK_SHIFT (25U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN26_SEC_MASK_MASK (0x4000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN26_SEC_MASK_SHIFT (26U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN27_SEC_MASK_MASK (0x8000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN27_SEC_MASK_SHIFT (27U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN28_SEC_MASK_MASK (0x10000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN28_SEC_MASK_SHIFT (28U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN29_SEC_MASK_MASK (0x20000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN29_SEC_MASK_SHIFT (29U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN30_SEC_MASK_MASK (0x40000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN30_SEC_MASK_SHIFT (30U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN31_SEC_MASK_MASK (0x80000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK1_PIO1_PIN31_SEC_MASK_SHIFT (31U)
/*! @} */

/*! @name SEC_GPIO_MASK2 - GPIO Mask for Port 2 Register */
/*! @{ */
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN0_SEC_MASK_MASK (0x1U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN0_SEC_MASK_SHIFT (0U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN1_SEC_MASK_MASK (0x2U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN1_SEC_MASK_SHIFT (1U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN2_SEC_MASK_MASK (0x4U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN2_SEC_MASK_SHIFT (2U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN3_SEC_MASK_MASK (0x8U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN3_SEC_MASK_SHIFT (3U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN4_SEC_MASK_MASK (0x10U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN4_SEC_MASK_SHIFT (4U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN5_SEC_MASK_MASK (0x20U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN5_SEC_MASK_SHIFT (5U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN6_SEC_MASK_MASK (0x40U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN6_SEC_MASK_SHIFT (6U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN7_SEC_MASK_MASK (0x80U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN7_SEC_MASK_SHIFT (7U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN8_SEC_MASK_MASK (0x100U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN8_SEC_MASK_SHIFT (8U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN9_SEC_MASK_MASK (0x200U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN9_SEC_MASK_SHIFT (9U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN10_SEC_MASK_MASK (0x400U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN10_SEC_MASK_SHIFT (10U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN11_SEC_MASK_MASK (0x800U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN11_SEC_MASK_SHIFT (11U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN12_SEC_MASK_MASK (0x1000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN12_SEC_MASK_SHIFT (12U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN13_SEC_MASK_MASK (0x2000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN13_SEC_MASK_SHIFT (13U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN14_SEC_MASK_MASK (0x4000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN14_SEC_MASK_SHIFT (14U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN15_SEC_MASK_MASK (0x8000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN15_SEC_MASK_SHIFT (15U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN16_SEC_MASK_MASK (0x10000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN16_SEC_MASK_SHIFT (16U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN17_SEC_MASK_MASK (0x20000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN17_SEC_MASK_SHIFT (17U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN18_SEC_MASK_MASK (0x40000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN18_SEC_MASK_SHIFT (18U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN19_SEC_MASK_MASK (0x80000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN19_SEC_MASK_SHIFT (19U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN20_SEC_MASK_MASK (0x100000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN20_SEC_MASK_SHIFT (20U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN21_SEC_MASK_MASK (0x200000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN21_SEC_MASK_SHIFT (21U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN22_SEC_MASK_MASK (0x400000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN22_SEC_MASK_SHIFT (22U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN23_SEC_MASK_MASK (0x800000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN23_SEC_MASK_SHIFT (23U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN24_SEC_MASK_MASK (0x1000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN24_SEC_MASK_SHIFT (24U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN25_SEC_MASK_MASK (0x2000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN25_SEC_MASK_SHIFT (25U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN26_SEC_MASK_MASK (0x4000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN26_SEC_MASK_SHIFT (26U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN27_SEC_MASK_MASK (0x8000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN27_SEC_MASK_SHIFT (27U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN28_SEC_MASK_MASK (0x10000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN28_SEC_MASK_SHIFT (28U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN29_SEC_MASK_MASK (0x20000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN29_SEC_MASK_SHIFT (29U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN30_SEC_MASK_MASK (0x40000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN30_SEC_MASK_SHIFT (30U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN31_SEC_MASK_MASK (0x80000000U)
#define AHB_SECURE_CTRL_SEC_GPIO_MASK2_PIO2_PIN31_SEC_MASK_SHIFT (31U)
/*! @} */

/*! @name DSP_INT_MASK0 - Secure Interrupt Mask for DSP Register */
/*! @{ */
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT0_MASK (0x20U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT0_SHIFT (5U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT1_MASK (0x40U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT1_SHIFT (6U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT2_MASK (0x80U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT2_SHIFT (7U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT3_MASK (0x100U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT3_SHIFT (8U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT4_MASK (0x200U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT4_SHIFT (9U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT5_MASK (0x400U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT5_SHIFT (10U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT6_MASK (0x800U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT6_SHIFT (11U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT7_MASK (0x1000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT7_SHIFT (12U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT8_MASK (0x2000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT8_SHIFT (13U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT9_MASK (0x4000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT9_SHIFT (14U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT10_MASK (0x8000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT10_SHIFT (15U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT11_MASK (0x10000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT11_SHIFT (16U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT12_MASK (0x20000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT12_SHIFT (17U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT13_MASK (0x40000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT13_SHIFT (18U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT14_MASK (0x80000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT14_SHIFT (19U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT15_MASK (0x100000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT15_SHIFT (20U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT16_MASK (0x200000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT16_SHIFT (21U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT17_MASK (0x400000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT17_SHIFT (22U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT18_MASK (0x800000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT18_SHIFT (23U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT19_MASK (0x1000000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT19_SHIFT (24U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT20_MASK (0x2000000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT20_SHIFT (25U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT21_MASK (0x4000000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT21_SHIFT (26U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT22_MASK (0x8000000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT22_SHIFT (27U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT23_MASK (0x10000000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT23_SHIFT (28U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT24_MASK (0x20000000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT24_SHIFT (29U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT25_MASK (0x40000000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT25_SHIFT (30U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT26_MASK (0x80000000U)
#define AHB_SECURE_CTRL_DSP_INT_MASK0_PMUX_OUT26_SHIFT (31U)
/*! @} */

/*! @name SEC_MASK_LOCK - Secure Mask Lock Register */
/*! @{ */
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK0_LOCK_MASK (0x3U)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK0_LOCK_SHIFT (0U)
/*! SEC_GPIO_MASK0_LOCK - Secure GPIO _MASK0 Lock
 *  0b00..Reserved
 *  0b01..SEC_GPIO_MASK0 cannot be written
 *  0b10..SEC_GPIO_MASK0 can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK0_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK0_LOCK_SHIFT)) & AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK0_LOCK_MASK)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK1_LOCK_MASK (0xCU)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK1_LOCK_SHIFT (2U)
/*! SEC_GPIO_MASK1_LOCK - Secure GPIO _MASK1 Lock
 *  0b00..Reserved
 *  0b01..SEC_GPIO_MASK1 cannot be written
 *  0b10..SEC_GPIO_MASK1 can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK1_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK1_LOCK_SHIFT)) & AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK1_LOCK_MASK)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK2_LOCK_MASK (0x30U)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK2_LOCK_SHIFT (4U)
/*! SEC_GPIO_MASK2_LOCK - Secure GPIO _MASK2 Lock
 *  0b00..Reserved
 *  0b01..SEC_GPIO_MASK2 cannot be written
 *  0b10..SEC_GPIO_MASK2 can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK2_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK2_LOCK_SHIFT)) & AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK2_LOCK_MASK)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK3_LOCK_MASK (0xC0U)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK3_LOCK_SHIFT (6U)
/*! SEC_GPIO_MASK3_LOCK - Secure GPIO _MASK3 Lock
 *  0b00..Reserved
 *  0b01..SEC_GPIO_MASK3 cannot be written
 *  0b10..SEC_GPIO_MASK3 can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK3_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK3_LOCK_SHIFT)) & AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK3_LOCK_MASK)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK4_LOCK_MASK (0x300U)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK4_LOCK_SHIFT (8U)
/*! SEC_GPIO_MASK4_LOCK - SEC_GPIO_MASK4 Lock
 *  0b00..Reserved
 *  0b01..SEC_GPIO_MASK4_LOCK cannot be written
 *  0b10..SEC_GPIO_MASK4_LOCK can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK4_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK4_LOCK_SHIFT)) & AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK4_LOCK_MASK)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK5_LOCK_MASK (0xC00U)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK5_LOCK_SHIFT (10U)
/*! SEC_GPIO_MASK5_LOCK - SEC_GPIO_MASK5 Lock
 *  0b00..Reserved
 *  0b01..SEC_GPIO_MASK5 cannot be written
 *  0b10..SEC_GPIO_MASK5 can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK5_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK5_LOCK_SHIFT)) & AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK5_LOCK_MASK)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK6_LOCK_MASK (0x3000U)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK6_LOCK_SHIFT (12U)
/*! SEC_GPIO_MASK6_LOCK - SEC_GPIO_MASK6 Lock
 *  0b00..Reserved
 *  0b01..SEC_GPIO_MASK6 cannot be written
 *  0b10..SEC_GPIO_MASK6 can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK6_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK6_LOCK_SHIFT)) & AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK6_LOCK_MASK)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK7_LOCK_MASK (0xC000U)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK7_LOCK_SHIFT (14U)
/*! SEC_GPIO_MASK7_LOCK - SEC_GPIO_MASK7 Lock
 *  0b00..Reserved
 *  0b01..SEC_GPIO_MASK7 cannot be written
 *  0b10..SEC_GPIO_MASK7 can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK7_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK7_LOCK_SHIFT)) & AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_GPIO_MASK7_LOCK_MASK)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_DSP_INT_MASK_LOCK_MASK (0x30000U)
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_DSP_INT_MASK_LOCK_SHIFT (16U)
/*! SEC_DSP_INT_MASK_LOCK - SEC_DSP_INT_MASK Lock
 *  0b00..Reserved
 *  0b01..SEC_DSP_INT_MASK cannot be written
 *  0b10..SEC_DSP_INT_MASK can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_DSP_INT_MASK_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_DSP_INT_MASK_LOCK_SHIFT)) & AHB_SECURE_CTRL_SEC_MASK_LOCK_SEC_DSP_INT_MASK_LOCK_MASK)
/*! @} */

/*! @name MASTER_SEC_LEVEL - Master Secure Level Register */
/*! @{ */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_PQ_MASK (0x30U)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_PQ_SHIFT (4U)
/*! PQ - Power Quad
 *  0b00..Non-secure and non-privileged Master
 *  0b01..Non-secure and privileged Master
 *  0b10..Secure and non-privileged Master
 *  0b11..Secure and privileged Master
 */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_PQ(x)   (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_LEVEL_PQ_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_LEVEL_PQ_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DSP_MASK (0xC0U)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DSP_SHIFT (6U)
/*! DSP - DSP
 *  0b00..Non-secure and non-privileged Master
 *  0b01..Non-secure and privileged Master
 *  0b10..Secure and non-privileged Master
 *  0b11..Secure and privileged Master
 */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DSP(x)  (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DSP_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DSP_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DMA0_MASK (0x300U)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DMA0_SHIFT (8U)
/*! DMA0 - DMA 0
 *  0b00..Non-secure and non-privileged Master
 *  0b01..Non-secure and privileged Master
 *  0b10..Secure and non-privileged Master
 *  0b11..Secure and privileged Master
 */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DMA0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DMA0_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DMA0_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DMA1_MASK (0xC00U)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DMA1_SHIFT (10U)
/*! DMA1 - DMA 1
 *  0b00..Non-secure and non-privileged Master
 *  0b01..Non-secure and privileged Master
 *  0b10..Secure and non-privileged Master
 *  0b11..Secure and privileged Master
 */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DMA1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DMA1_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_LEVEL_DMA1_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDMA_I_MASK (0x3000U)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDMA_I_SHIFT (12U)
/*! SDMA_I - Smart DMA (SDMA) Instruction
 *  0b00..Non-secure and non-privileged Master
 *  0b01..Non-secure and privileged Master
 *  0b10..Secure and non-privileged Master
 *  0b11..Secure and privileged Master
 */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDMA_I(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDMA_I_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDMA_I_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDMA_D_MASK (0xC000U)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDMA_D_SHIFT (14U)
/*! SDMA_D - Smart DMA (SDMA) Data
 *  0b00..Non-secure and non-privileged Master
 *  0b01..Non-secure and privileged Master
 *  0b10..Secure and non-privileged Master
 *  0b11..Secure and privileged Master
 */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDMA_D(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDMA_D_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDMA_D_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDIO0_MASK (0x30000U)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDIO0_SHIFT (16U)
/*! SDIO0 - SDIO 0
 *  0b00..Non-secure and non-privileged Master
 *  0b01..Non-secure and privileged Master
 *  0b10..Secure and non-privileged Master
 *  0b11..Secure and privileged Master
 */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDIO0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDIO0_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDIO0_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDIO1_MASK (0xC0000U)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDIO1_SHIFT (18U)
/*! SDIO1 - SDIO 1
 *  0b00..Non-secure and non-privileged Master
 *  0b01..Non-secure and privileged Master
 *  0b10..Secure and non-privileged Master
 *  0b11..Secure and privileged Master
 */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDIO1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDIO1_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_LEVEL_SDIO1_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_GPU_MASK (0x300000U)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_GPU_SHIFT (20U)
/*! GPU - GPU
 *  0b00..Non-secure and non-privileged Master
 *  0b01..Non-secure and privileged Master
 *  0b10..Secure and non-privileged Master
 *  0b11..Secure and privileged Master
 */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_GPU(x)  (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_LEVEL_GPU_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_LEVEL_GPU_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_MASTER_SEC_LEVEL_LOCK_MASK (0xC0000000U)
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_MASTER_SEC_LEVEL_LOCK_SHIFT (30U)
/*! MASTER_SEC_LEVEL_LOCK - Master Security Level Lock
 *  0b00..Reserved
 *  0b01..Lock writing to this register, including these (MASTER_SEC_LEVEL_LOCK) bits
 *  0b10..This register can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MASTER_SEC_LEVEL_MASTER_SEC_LEVEL_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_LEVEL_MASTER_SEC_LEVEL_LOCK_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_LEVEL_MASTER_SEC_LEVEL_LOCK_MASK)
/*! @} */

/*! @name MASTER_SEC_ANTI_POL_REG - Master Secure Level Register */
/*! @{ */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_PQ_MASK (0x30U)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_PQ_SHIFT (4U)
/*! PQ - Power Quad
 */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_PQ(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_PQ_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_PQ_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DSP_MASK (0xC0U)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DSP_SHIFT (6U)
/*! DSP - DSP
 */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DSP(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DSP_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DSP_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DMA0_MASK (0x300U)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DMA0_SHIFT (8U)
/*! DMA0 - DMA 0
 */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DMA0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DMA0_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DMA0_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DMA1_MASK (0xC00U)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DMA1_SHIFT (10U)
/*! DMA1 - DMA 1
 */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DMA1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DMA1_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_DMA1_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDMA_I_MASK (0x3000U)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDMA_I_SHIFT (12U)
/*! SDMA_I - Smart DMA (SDMA) Instruction
 */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDMA_I(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDMA_I_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDMA_I_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDMA_D_MASK (0xC000U)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDMA_D_SHIFT (14U)
/*! SDMA_D - Smart DMA (SDMA) Data
 */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDMA_D(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDMA_D_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDMA_D_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDIO0_MASK (0x30000U)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDIO0_SHIFT (16U)
/*! SDIO0 - SDIO 0
 */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDIO0(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDIO0_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDIO0_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDIO1_MASK (0xC0000U)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDIO1_SHIFT (18U)
/*! SDIO1 - SDIO 1
 */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDIO1(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDIO1_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_SDIO1_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_GPU_MASK (0x300000U)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_GPU_SHIFT (20U)
/*! GPU - GPU
 */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_GPU(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_GPU_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_GPU_MASK)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_MASTER_SEC_LEVEL_ANTIPOL_LOCK_MASK (0xC0000000U)
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_MASTER_SEC_LEVEL_ANTIPOL_LOCK_SHIFT (30U)
/*! MASTER_SEC_LEVEL_ANTIPOL_LOCK - Master Security Level Antipole Lock
 *  0b00..Reserved
 *  0b01..Lock writing to this register, including these (MASTER_SEC_LEVEL_ANTIPOL_LOCK) bits
 *  0b10..This register can be written
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_MASTER_SEC_LEVEL_ANTIPOL_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_MASTER_SEC_LEVEL_ANTIPOL_LOCK_SHIFT)) & AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_MASTER_SEC_LEVEL_ANTIPOL_LOCK_MASK)
/*! @} */

/*! @name CM33_LOCK_REG - Miscellaneous CPU0 Control Signals Register */
/*! @{ */
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_NS_VTOR_MASK (0x3U)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_NS_VTOR_SHIFT (0U)
/*! LOCK_NS_VTOR - Lock Non-Secure VTOR
 *  0b00..Reserved
 *  0b01..Locks Non-Secure VTOR
 *  0b10..Non-Secure VTOR can be used
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_NS_VTOR(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_NS_VTOR_SHIFT)) & AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_NS_VTOR_MASK)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_NS_MPU_MASK (0xCU)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_NS_MPU_SHIFT (2U)
/*! LOCK_NS_MPU - Lock Non-Secure MPU
 *  0b00..Reserved
 *  0b01..Locks Non-Secure MPU
 *  0b10..Non-Secure MPU can be used
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_NS_MPU(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_NS_MPU_SHIFT)) & AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_NS_MPU_MASK)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_S_VTOR_MASK (0x30U)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_S_VTOR_SHIFT (4U)
/*! LOCK_S_VTOR - Lock Secure VTOR
 *  0b00..Reserved
 *  0b01..Locks Secure VTOR
 *  0b10..Secure VTOR can be used
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_S_VTOR(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_S_VTOR_SHIFT)) & AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_S_VTOR_MASK)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_S_MPU_MASK (0xC0U)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_S_MPU_SHIFT (6U)
/*! LOCK_S_MPU - Lock Secure MPU
 *  0b00..Reserved
 *  0b01..Locks Secure MPU
 *  0b10..Secure MPU can be used
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_S_MPU(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_S_MPU_SHIFT)) & AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_S_MPU_MASK)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_SAU_MASK (0x300U)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_SAU_SHIFT (8U)
/*! LOCK_SAU - Lock SAU
 *  0b00..Reserved
 *  0b01..SAU is locked
 *  0b10..SAU can be used
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_SAU(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_SAU_SHIFT)) & AHB_SECURE_CTRL_CM33_LOCK_REG_LOCK_SAU_MASK)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_CM33_LOCK_REG_LOCK_MASK (0xC0000000U)
#define AHB_SECURE_CTRL_CM33_LOCK_REG_CM33_LOCK_REG_LOCK_SHIFT (30U)
/*! CM33_LOCK_REG_LOCK - Lock CM33 Lock Register
 *  0b00..Reserved
 *  0b01..Does not allow writing to this register
 *  0b10..Allows writing to this register
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_CM33_LOCK_REG_CM33_LOCK_REG_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_CM33_LOCK_REG_CM33_LOCK_REG_LOCK_SHIFT)) & AHB_SECURE_CTRL_CM33_LOCK_REG_CM33_LOCK_REG_LOCK_MASK)
/*! @} */

/*! @name MISC_CTRL_DP_REG - Secure Control Duplicate Register */
/*! @{ */
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_WRITE_LOCK_MASK (0x3U)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_WRITE_LOCK_SHIFT (0U)
/*! WRITE_LOCK - Write Lock
 *  0b00..Reserved
 *  0b01..Writes to this register and to the Memory and Peripheral RULE registers are not allowed
 *  0b10..Writes to this register and to the Memory and Peripheral RULE registers are allowed
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_WRITE_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_DP_REG_WRITE_LOCK_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_DP_REG_WRITE_LOCK_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_SECURE_CHECKING_MASK (0xCU)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_SECURE_CHECKING_SHIFT (2U)
/*! ENABLE_SECURE_CHECKING - Enable Secure Checking
 *  0b00..Reserved
 *  0b01..Enabled (restrictive mode)
 *  0b10..Disabled
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_SECURE_CHECKING(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_SECURE_CHECKING_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_SECURE_CHECKING_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_S_PRIV_CHECK_MASK (0x30U)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_S_PRIV_CHECK_SHIFT (4U)
/*! ENABLE_S_PRIV_CHECK - Enable Secure Privilege Checking
 *  0b00..Reserved
 *  0b01..Enabled (restrictive mode)
 *  0b10..Disabled
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_S_PRIV_CHECK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_S_PRIV_CHECK_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_S_PRIV_CHECK_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_NS_PRIV_CHECK_MASK (0xC0U)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_NS_PRIV_CHECK_SHIFT (6U)
/*! ENABLE_NS_PRIV_CHECK - Enable Non-Secure Privilege Checking
 *  0b00..Reserved
 *  0b01..Enabled (restrictive mode)
 *  0b10..Disabled
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_NS_PRIV_CHECK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_NS_PRIV_CHECK_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_DP_REG_ENABLE_NS_PRIV_CHECK_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_VIOLATION_ABORT_MASK (0x300U)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_VIOLATION_ABORT_SHIFT (8U)
/*! DISABLE_VIOLATION_ABORT - Disable Violation Abort
 *  0b00..Reserved
 *  0b01..The violation detected by the secure checker will not cause an abort, but a secure_violation_irq
 *        (interrupt request) will still be asserted and serviced by ISR.
 *  0b10..The violation detected by the secure checker will cause an abort.
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_VIOLATION_ABORT(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_VIOLATION_ABORT_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_VIOLATION_ABORT_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_SIMPLE_MASTER_STRICT_MODE_MASK (0xC00U)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_SIMPLE_MASTER_STRICT_MODE_SHIFT (10U)
/*! DISABLE_SIMPLE_MASTER_STRICT_MODE - Disable Simple Master Strict Mode
 *  0b00..Reserved
 *  0b01..Can access memories and peripherals at the same level or below that level
 *  0b10..Can access memories and peripherals at same level only
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_SIMPLE_MASTER_STRICT_MODE(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_SIMPLE_MASTER_STRICT_MODE_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_SIMPLE_MASTER_STRICT_MODE_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_SMART_MASTER_STRICT_MODE_MASK (0x3000U)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_SMART_MASTER_STRICT_MODE_SHIFT (12U)
/*! DISABLE_SMART_MASTER_STRICT_MODE - Disable Smart Master Strict Mode
 *  0b00..Reserved
 *  0b01..Can access memories and peripherals at the same level or below that level
 *  0b10..Can access memories and peripherals at same level only
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_SMART_MASTER_STRICT_MODE(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_SMART_MASTER_STRICT_MODE_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_DP_REG_DISABLE_SMART_MASTER_STRICT_MODE_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_IDAU_ALL_NS_MASK (0xC000U)
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_IDAU_ALL_NS_SHIFT (14U)
/*! IDAU_ALL_NS - IDAU All Non-Secure
 *  0b00..Reserved
 *  0b01..IDAU is disabled, which means that all memories are attributed as non-secure memory.
 *  0b10..IDAU is enabled (restrictive mode)
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_DP_REG_IDAU_ALL_NS(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_DP_REG_IDAU_ALL_NS_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_DP_REG_IDAU_ALL_NS_MASK)
/*! @} */

/*! @name MISC_CTRL_REG - Secure Control Register */
/*! @{ */
#define AHB_SECURE_CTRL_MISC_CTRL_REG_WRITE_LOCK_MASK (0x3U)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_WRITE_LOCK_SHIFT (0U)
/*! WRITE_LOCK - Write Lock
 *  0b00..Reserved
 *  0b01..Writes to this register and to the Memory and Peripheral RULE registers are not allowed
 *  0b10..Writes to this register and to the Memory and Peripheral RULE registers are allowed
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_REG_WRITE_LOCK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_REG_WRITE_LOCK_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_REG_WRITE_LOCK_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_SECURE_CHECKING_MASK (0xCU)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_SECURE_CHECKING_SHIFT (2U)
/*! ENABLE_SECURE_CHECKING - Enable Secure Checking
 *  0b00..Reserved
 *  0b01..Enabled (restrictive mode)
 *  0b10..Disabled
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_SECURE_CHECKING(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_SECURE_CHECKING_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_SECURE_CHECKING_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_S_PRIV_CHECK_MASK (0x30U)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_S_PRIV_CHECK_SHIFT (4U)
/*! ENABLE_S_PRIV_CHECK - Enable Secure Privilege Checking
 *  0b00..Reserved
 *  0b01..Enabled (restrictive mode)
 *  0b10..Disabled
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_S_PRIV_CHECK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_S_PRIV_CHECK_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_S_PRIV_CHECK_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_NS_PRIV_CHECK_MASK (0xC0U)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_NS_PRIV_CHECK_SHIFT (6U)
/*! ENABLE_NS_PRIV_CHECK - Enable Non-Secure Privilege Checking
 *  0b00..Reserved
 *  0b01..Enabled (restrictive mode)
 *  0b10..Disabled
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_NS_PRIV_CHECK(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_NS_PRIV_CHECK_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_REG_ENABLE_NS_PRIV_CHECK_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_VIOLATION_ABORT_MASK (0x300U)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_VIOLATION_ABORT_SHIFT (8U)
/*! DISABLE_VIOLATION_ABORT - Disable Violation Abort
 *  0b00..Reserved
 *  0b01..The violation detected by the secure checker will not cause an abort, but a secure_violation_irq
 *        (interrupt request) will still be asserted and serviced by ISR.
 *  0b10..The violation detected by the secure checker will cause an abort.
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_VIOLATION_ABORT(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_VIOLATION_ABORT_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_VIOLATION_ABORT_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_SIMPLE_MASTER_STRICT_MODE_MASK (0xC00U)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_SIMPLE_MASTER_STRICT_MODE_SHIFT (10U)
/*! DISABLE_SIMPLE_MASTER_STRICT_MODE - Disable Simple Master Strict Mode
 *  0b00..Reserved
 *  0b01..Can access memories and peripherals at the same level or below that level
 *  0b10..Can access memories and peripherals at same level only
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_SIMPLE_MASTER_STRICT_MODE(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_SIMPLE_MASTER_STRICT_MODE_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_SIMPLE_MASTER_STRICT_MODE_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_SMART_MASTER_STRICT_MODE_MASK (0x3000U)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_SMART_MASTER_STRICT_MODE_SHIFT (12U)
/*! DISABLE_SMART_MASTER_STRICT_MODE - Disable Smart Master Strict Mode
 *  0b00..Reserved
 *  0b01..Can access memories and peripherals at the same level or below that level
 *  0b10..Can access memories and peripherals at same level only
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_SMART_MASTER_STRICT_MODE(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_SMART_MASTER_STRICT_MODE_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_REG_DISABLE_SMART_MASTER_STRICT_MODE_MASK)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_IDAU_ALL_NS_MASK (0xC000U)
#define AHB_SECURE_CTRL_MISC_CTRL_REG_IDAU_ALL_NS_SHIFT (14U)
/*! IDAU_ALL_NS - IDAU All Non-Secure
 *  0b00..Reserved
 *  0b01..IDAU is disabled, which means that all memories are attributed as non-secure memory.
 *  0b10..IDAU is enabled (restrictive mode)
 *  0b11..Reserved
 */
#define AHB_SECURE_CTRL_MISC_CTRL_REG_IDAU_ALL_NS(x) (((uint32_t)(((uint32_t)(x)) << AHB_SECURE_CTRL_MISC_CTRL_REG_IDAU_ALL_NS_SHIFT)) & AHB_SECURE_CTRL_MISC_CTRL_REG_IDAU_ALL_NS_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group AHB_SECURE_CTRL_Register_Masks */


/* AHB_SECURE_CTRL - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral AHB_SECURE_CTRL base pointer */
  #define AHB_SECURE_CTRL_BASE_PTR                 ((AHB_SECURE_CTRL_MemMapPtr)0x50148000u)
  /** Peripheral AHB_SECURE_CTRL base pointer */
  #define AHB_SECURE_CTRL_BASE_PTR_NS              ((AHB_SECURE_CTRL_MemMapPtr)0x40148000u)
  /** Array initializer of AHB_SECURE_CTRL peripheral base pointers */
  #define AHB_SECURE_CTRL_BASE_PTRS                { AHB_SECURE_CTRL_BASE_PTR }
  /** Array initializer of AHB_SECURE_CTRL peripheral base pointers */
  #define AHB_SECURE_CTRL_BASE_PTRS_NS             { AHB_SECURE_CTRL_BASE_PTR_NS }
#else
  /** Peripheral AHB_SECURE_CTRL base pointer */
  #define AHB_SECURE_CTRL_BASE_PTR                 ((AHB_SECURE_CTRL_MemMapPtr)0x40148000u)
  /** Array initializer of AHB_SECURE_CTRL peripheral base pointers */
  #define AHB_SECURE_CTRL_BASE_PTRS                { AHB_SECURE_CTRL_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- AHB_SECURE_CTRL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AHB_SECURE_CTRL_Register_Accessor_Macros AHB_SECURE_CTRL - Register accessor macros
 * @{
 */


/* AHB_SECURE_CTRL - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* AHB_SECURE_CTRL */
  #define AHB_SECURE0_ROM_MEM_RULE0                AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_ROM_MEM_RULE0_NS             AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_ROM_MEM_RULE1                AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_ROM_MEM_RULE1_NS             AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_ROM_MEM_RULE2                AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_ROM_MEM_RULE2_NS             AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_ROM_MEM_RULE3                AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_ROM_MEM_RULE3_NS             AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE0       AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE0_NS    AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE1       AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE1_NS    AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE2       AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE2_NS    AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE3       AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE3_NS    AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_FLEXSPI0_REGION1_RULE0       AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_FLEXSPI0_REGION1_RULE0_NS    AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_FLEXSPI0_REGION2_RULE0       AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_FLEXSPI0_REGION2_RULE0_NS    AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_FLEXSPI0_REGION3_RULE0       AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_FLEXSPI0_REGION3_RULE0_NS    AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_FLEXSPI0_REGION4_RULE0       AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_FLEXSPI0_REGION4_RULE0_NS    AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM00_RULE0                  AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM00_RULE0_NS               AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM00_RULE1                  AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM00_RULE1_NS               AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM00_RULE2                  AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM00_RULE2_NS               AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM00_RULE3                  AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM00_RULE3_NS               AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM01_RULE0                  AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM01_RULE0_NS               AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM01_RULE1                  AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM01_RULE1_NS               AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM01_RULE2                  AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM01_RULE2_NS               AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM01_RULE3                  AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM01_RULE3_NS               AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM02_RULE0                  AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM02_RULE0_NS               AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM02_RULE1                  AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM02_RULE1_NS               AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM02_RULE2                  AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM02_RULE2_NS               AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM02_RULE3                  AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM02_RULE3_NS               AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM03_RULE0                  AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM03_RULE0_NS               AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM03_RULE1                  AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM03_RULE1_NS               AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM03_RULE2                  AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM03_RULE2_NS               AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM03_RULE3                  AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM03_RULE3_NS               AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM04_RULE0                  AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM04_RULE0_NS               AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM04_RULE1                  AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM04_RULE1_NS               AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM04_RULE2                  AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM04_RULE2_NS               AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM04_RULE3                  AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM04_RULE3_NS               AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM05_RULE0                  AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM05_RULE0_NS               AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM05_RULE1                  AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM05_RULE1_NS               AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM05_RULE2                  AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM05_RULE2_NS               AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM05_RULE3                  AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM05_RULE3_NS               AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM06_RULE0                  AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM06_RULE0_NS               AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM06_RULE1                  AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM06_RULE1_NS               AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM06_RULE2                  AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM06_RULE2_NS               AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM06_RULE3                  AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM06_RULE3_NS               AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM07_RULE0                  AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM07_RULE0_NS               AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM07_RULE1                  AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM07_RULE1_NS               AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM07_RULE2                  AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM07_RULE2_NS               AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM07_RULE3                  AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM07_RULE3_NS               AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM08_RULE0                  AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM08_RULE0_NS               AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM08_RULE1                  AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM08_RULE1_NS               AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM08_RULE2                  AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM08_RULE2_NS               AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM08_RULE3                  AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM08_RULE3_NS               AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM09_RULE0                  AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM09_RULE0_NS               AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM09_RULE1                  AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM09_RULE1_NS               AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM09_RULE2                  AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM09_RULE2_NS               AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM09_RULE3                  AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM09_RULE3_NS               AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM10_RULE0                  AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM10_RULE0_NS               AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM10_RULE1                  AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM10_RULE1_NS               AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM10_RULE2                  AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM10_RULE2_NS               AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM10_RULE3                  AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM10_RULE3_NS               AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM11_RULE0                  AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM11_RULE0_NS               AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM11_RULE1                  AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM11_RULE1_NS               AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM11_RULE2                  AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM11_RULE2_NS               AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM11_RULE3                  AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM11_RULE3_NS               AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM12_RULE0                  AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM12_RULE0_NS               AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM12_RULE1                  AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM12_RULE1_NS               AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM12_RULE2                  AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM12_RULE2_NS               AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM12_RULE3                  AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM12_RULE3_NS               AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM13_RULE0                  AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM13_RULE0_NS               AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM13_RULE1                  AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM13_RULE1_NS               AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM13_RULE2                  AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM13_RULE2_NS               AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM13_RULE3                  AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM13_RULE3_NS               AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM14_RULE0                  AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM14_RULE0_NS               AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM14_RULE1                  AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM14_RULE1_NS               AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM14_RULE2                  AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM14_RULE2_NS               AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM14_RULE3                  AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM14_RULE3_NS               AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM15_RULE0                  AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM15_RULE0_NS               AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM15_RULE1                  AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM15_RULE1_NS               AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM15_RULE2                  AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM15_RULE2_NS               AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM15_RULE3                  AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM15_RULE3_NS               AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM16_RULE0                  AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM16_RULE0_NS               AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM16_RULE1                  AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM16_RULE1_NS               AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM16_RULE2                  AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM16_RULE2_NS               AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM16_RULE3                  AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM16_RULE3_NS               AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM17_RULE0                  AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM17_RULE0_NS               AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM17_RULE1                  AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM17_RULE1_NS               AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM17_RULE2                  AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM17_RULE2_NS               AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM17_RULE3                  AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM17_RULE3_NS               AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM18_RULE0                  AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM18_RULE0_NS               AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM18_RULE1                  AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM18_RULE1_NS               AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM18_RULE2                  AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM18_RULE2_NS               AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM18_RULE3                  AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM18_RULE3_NS               AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM19_RULE0                  AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM19_RULE0_NS               AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM19_RULE1                  AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM19_RULE1_NS               AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM19_RULE2                  AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM19_RULE2_NS               AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM19_RULE3                  AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM19_RULE3_NS               AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM20_RULE0                  AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM20_RULE0_NS               AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM20_RULE1                  AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM20_RULE1_NS               AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM20_RULE2                  AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM20_RULE2_NS               AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM20_RULE3                  AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM20_RULE3_NS               AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM21_RULE0                  AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM21_RULE0_NS               AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM21_RULE1                  AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM21_RULE1_NS               AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM21_RULE2                  AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM21_RULE2_NS               AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM21_RULE3                  AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM21_RULE3_NS               AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM22_RULE0                  AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM22_RULE0_NS               AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM22_RULE1                  AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM22_RULE1_NS               AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM22_RULE2                  AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM22_RULE2_NS               AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM22_RULE3                  AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM22_RULE3_NS               AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM23_RULE0                  AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM23_RULE0_NS               AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM23_RULE1                  AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM23_RULE1_NS               AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM23_RULE2                  AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM23_RULE2_NS               AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM23_RULE3                  AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM23_RULE3_NS               AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM24_RULE0                  AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM24_RULE0_NS               AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM24_RULE1                  AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM24_RULE1_NS               AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM24_RULE2                  AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM24_RULE2_NS               AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM24_RULE3                  AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM24_RULE3_NS               AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM25_RULE0                  AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM25_RULE0_NS               AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM25_RULE1                  AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM25_RULE1_NS               AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM25_RULE2                  AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM25_RULE2_NS               AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM25_RULE3                  AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM25_RULE3_NS               AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM26_RULE0                  AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM26_RULE0_NS               AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM26_RULE1                  AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM26_RULE1_NS               AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM26_RULE2                  AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM26_RULE2_NS               AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM26_RULE3                  AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM26_RULE3_NS               AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM27_RULE0                  AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM27_RULE0_NS               AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM27_RULE1                  AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM27_RULE1_NS               AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM27_RULE2                  AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM27_RULE2_NS               AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM27_RULE3                  AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM27_RULE3_NS               AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM28_RULE0                  AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM28_RULE0_NS               AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM28_RULE1                  AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM28_RULE1_NS               AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM28_RULE2                  AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM28_RULE2_NS               AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM28_RULE3                  AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM28_RULE3_NS               AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM29_RULE0                  AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM29_RULE0_NS               AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM29_RULE1                  AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM29_RULE1_NS               AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM29_RULE2                  AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM29_RULE2_NS               AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM29_RULE3                  AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM29_RULE3_NS               AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM30_RULE0                  AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM30_RULE0_NS               AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM30_RULE1                  AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM30_RULE1_NS               AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM30_RULE2                  AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM30_RULE2_NS               AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM30_RULE3                  AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM30_RULE3_NS               AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_RAM31_RULE0                  AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM31_RULE0_NS               AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_RAM31_RULE1                  AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM31_RULE1_NS               AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_RAM31_RULE2                  AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM31_RULE2_NS               AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_RAM31_RULE3                  AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM31_RULE3_NS               AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_SDMA_RAM_RULE0               AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_SDMA_RAM_RULE0_NS            AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_SDMA_RAM_RULE1               AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_SDMA_RAM_RULE1_NS            AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_SDMA_RAM_RULE2               AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_SDMA_RAM_RULE2_NS            AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_SDMA_RAM_RULE3               AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_SDMA_RAM_RULE3_NS            AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE0       AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE0_NS    AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE1       AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE1_NS    AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE2       AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE2_NS    AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE3       AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE3_NS    AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_FLEXSPI1_REGION1_RULE0       AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_FLEXSPI1_REGION1_RULE0_NS    AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_FLEXSPI1_REGION2_RULE0       AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_FLEXSPI1_REGION2_RULE0_NS    AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_FLEXSPI1_REGION3_RULE0       AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_FLEXSPI1_REGION3_RULE0_NS    AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_FLEXSPI1_REGION4_RULE0       AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_FLEXSPI1_REGION4_RULE0_NS    AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_APB_BRIDGE_PER0_RULE0        AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER0_RULE0_NS     AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_APB_BRIDGE_PER0_RULE1        AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER0_RULE1_NS     AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_APB_BRIDGE_PER0_RULE3        AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER0_RULE3_NS     AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE0        AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE0_NS     AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE1        AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE1_NS     AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE2        AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE2_NS     AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE3        AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE3_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE3_NS     AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE3_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_AHB_PERIPH0_SLAVE_RULE0      AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH0_SLAVE_RULE0_NS   AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_AIPS_BRIDGE0_PER_RULE0       AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AIPS_BRIDGE0_PER_RULE0_NS    AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_AHB_PERIPH1_SLAVE_RULE0      AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH1_SLAVE_RULE0_NS   AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_AHB_PERIPH1_SLAVE_RULE1      AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH1_SLAVE_RULE1_NS   AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_AIPS_BRIDGE1_PER_RULE0       AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AIPS_BRIDGE1_PER_RULE0_NS    AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_AIPS_BRIDGE1_PER_RULE1       AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AIPS_BRIDGE1_PER_RULE1_NS    AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_AHB_PERIPH2_SLAVE_RULE0      AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH2_SLAVE_RULE0_NS   AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_AHB_SECURE_CTRL_PERIPH_RULE0 AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_SECURE_CTRL_PERIPH_RULE0_NS AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_AHB_PERIPH3_SLAVE_RULE0      AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH3_SLAVE_RULE0_NS   AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_AHB_PERIPH3_SLAVE_RULE1      AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH3_SLAVE_RULE1_NS   AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_SEC_VIO_ADDR0                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_SEC_VIO_ADDR0_NS             AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_SEC_VIO_ADDR1                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_SEC_VIO_ADDR1_NS             AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_SEC_VIO_ADDR2                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_SEC_VIO_ADDR2_NS             AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_SEC_VIO_ADDR3                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_SEC_VIO_ADDR3_NS             AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_SEC_VIO_ADDR4                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,4)
  #define AHB_SECURE0_SEC_VIO_ADDR4_NS             AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,4)
  #define AHB_SECURE0_SEC_VIO_ADDR5                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,5)
  #define AHB_SECURE0_SEC_VIO_ADDR5_NS             AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,5)
  #define AHB_SECURE0_SEC_VIO_ADDR6                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,6)
  #define AHB_SECURE0_SEC_VIO_ADDR6_NS             AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,6)
  #define AHB_SECURE0_SEC_VIO_ADDR7                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,7)
  #define AHB_SECURE0_SEC_VIO_ADDR7_NS             AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,7)
  #define AHB_SECURE0_SEC_VIO_ADDR8                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,8)
  #define AHB_SECURE0_SEC_VIO_ADDR8_NS             AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,8)
  #define AHB_SECURE0_SEC_VIO_ADDR9                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,9)
  #define AHB_SECURE0_SEC_VIO_ADDR9_NS             AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,9)
  #define AHB_SECURE0_SEC_VIO_ADDR10               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,10)
  #define AHB_SECURE0_SEC_VIO_ADDR10_NS            AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,10)
  #define AHB_SECURE0_SEC_VIO_ADDR11               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,11)
  #define AHB_SECURE0_SEC_VIO_ADDR11_NS            AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,11)
  #define AHB_SECURE0_SEC_VIO_ADDR12               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,12)
  #define AHB_SECURE0_SEC_VIO_ADDR12_NS            AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,12)
  #define AHB_SECURE0_SEC_VIO_ADDR13               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,13)
  #define AHB_SECURE0_SEC_VIO_ADDR13_NS            AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,13)
  #define AHB_SECURE0_SEC_VIO_ADDR14               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,14)
  #define AHB_SECURE0_SEC_VIO_ADDR14_NS            AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,14)
  #define AHB_SECURE0_SEC_VIO_ADDR15               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,15)
  #define AHB_SECURE0_SEC_VIO_ADDR15_NS            AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,15)
  #define AHB_SECURE0_SEC_VIO_ADDR16               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,16)
  #define AHB_SECURE0_SEC_VIO_ADDR16_NS            AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,16)
  #define AHB_SECURE0_SEC_VIO_ADDR17               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,17)
  #define AHB_SECURE0_SEC_VIO_ADDR17_NS            AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,17)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO0           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO0_NS        AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,0)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO1           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO1_NS        AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,1)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO2           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO2_NS        AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,2)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO3           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO3_NS        AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,3)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO4           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,4)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO4_NS        AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,4)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO5           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,5)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO5_NS        AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,5)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO6           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,6)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO6_NS        AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,6)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO7           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,7)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO7_NS        AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,7)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO8           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,8)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO8_NS        AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,8)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO9           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,9)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO9_NS        AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,9)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO10          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,10)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO10_NS       AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,10)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO11          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,11)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO11_NS       AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,11)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO12          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,12)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO12_NS       AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,12)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO13          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,13)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO13_NS       AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,13)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO14          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,14)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO14_NS       AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,14)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO15          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,15)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO15_NS       AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,15)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO16          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,16)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO16_NS       AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,16)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO17          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,17)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO17_NS       AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,17)
  #define AHB_SECURE0_SEC_VIO_INFO_VALID           AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_SEC_VIO_INFO_VALID_NS        AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_SEC_GPIO_MASK0               AHB_SECURE_CTRL_SEC_GPIO_MASK0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_SEC_GPIO_MASK0_NS            AHB_SECURE_CTRL_SEC_GPIO_MASK0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_SEC_GPIO_MASK1               AHB_SECURE_CTRL_SEC_GPIO_MASK1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_SEC_GPIO_MASK1_NS            AHB_SECURE_CTRL_SEC_GPIO_MASK1_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_SEC_GPIO_MASK2               AHB_SECURE_CTRL_SEC_GPIO_MASK2_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_SEC_GPIO_MASK2_NS            AHB_SECURE_CTRL_SEC_GPIO_MASK2_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_DSP_INT_MASK0                AHB_SECURE_CTRL_DSP_INT_MASK0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_DSP_INT_MASK0_NS             AHB_SECURE_CTRL_DSP_INT_MASK0_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_SEC_MASK_LOCK                AHB_SECURE_CTRL_SEC_MASK_LOCK_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_SEC_MASK_LOCK_NS             AHB_SECURE_CTRL_SEC_MASK_LOCK_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_MASTER_SEC_LEVEL             AHB_SECURE_CTRL_MASTER_SEC_LEVEL_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_MASTER_SEC_LEVEL_NS          AHB_SECURE_CTRL_MASTER_SEC_LEVEL_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_MASTER_SEC_ANTI_POL_REG      AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_MASTER_SEC_ANTI_POL_REG_NS   AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_CM33_LOCK_REG                AHB_SECURE_CTRL_CM33_LOCK_REG_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_CM33_LOCK_REG_NS             AHB_SECURE_CTRL_CM33_LOCK_REG_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_MISC_CTRL_DP_REG             AHB_SECURE_CTRL_MISC_CTRL_DP_REG_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_MISC_CTRL_DP_REG_NS          AHB_SECURE_CTRL_MISC_CTRL_DP_REG_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
  #define AHB_SECURE0_MISC_CTRL_REG                AHB_SECURE_CTRL_MISC_CTRL_REG_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_MISC_CTRL_REG_NS             AHB_SECURE_CTRL_MISC_CTRL_REG_REG(AHB_SECURE_CTRL_BASE_PTR_NS)
#else
  /* AHB_SECURE_CTRL */
  #define AHB_SECURE0_ROM_MEM_RULE0                AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_ROM_MEM_RULE1                AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_ROM_MEM_RULE2                AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_ROM_MEM_RULE3                AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE0       AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE1       AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE2       AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_FLEXSPI0_REGION0_RULE3       AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_FLEXSPI0_REGION1_RULE0       AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_FLEXSPI0_REGION2_RULE0       AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_FLEXSPI0_REGION3_RULE0       AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_FLEXSPI0_REGION4_RULE0       AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM00_RULE0                  AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM00_RULE1                  AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM00_RULE2                  AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM00_RULE3                  AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM01_RULE0                  AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM01_RULE1                  AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM01_RULE2                  AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM01_RULE3                  AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM02_RULE0                  AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM02_RULE1                  AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM02_RULE2                  AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM02_RULE3                  AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM03_RULE0                  AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM03_RULE1                  AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM03_RULE2                  AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM03_RULE3                  AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM04_RULE0                  AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM04_RULE1                  AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM04_RULE2                  AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM04_RULE3                  AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM05_RULE0                  AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM05_RULE1                  AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM05_RULE2                  AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM05_RULE3                  AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM06_RULE0                  AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM06_RULE1                  AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM06_RULE2                  AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM06_RULE3                  AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM07_RULE0                  AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM07_RULE1                  AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM07_RULE2                  AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM07_RULE3                  AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM08_RULE0                  AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM08_RULE1                  AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM08_RULE2                  AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM08_RULE3                  AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM09_RULE0                  AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM09_RULE1                  AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM09_RULE2                  AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM09_RULE3                  AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM10_RULE0                  AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM10_RULE1                  AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM10_RULE2                  AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM10_RULE3                  AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM11_RULE0                  AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM11_RULE1                  AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM11_RULE2                  AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM11_RULE3                  AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM12_RULE0                  AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM12_RULE1                  AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM12_RULE2                  AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM12_RULE3                  AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM13_RULE0                  AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM13_RULE1                  AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM13_RULE2                  AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM13_RULE3                  AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM14_RULE0                  AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM14_RULE1                  AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM14_RULE2                  AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM14_RULE3                  AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM15_RULE0                  AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM15_RULE1                  AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM15_RULE2                  AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM15_RULE3                  AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM16_RULE0                  AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM16_RULE1                  AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM16_RULE2                  AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM16_RULE3                  AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM17_RULE0                  AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM17_RULE1                  AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM17_RULE2                  AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM17_RULE3                  AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM18_RULE0                  AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM18_RULE1                  AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM18_RULE2                  AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM18_RULE3                  AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM19_RULE0                  AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM19_RULE1                  AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM19_RULE2                  AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM19_RULE3                  AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM20_RULE0                  AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM20_RULE1                  AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM20_RULE2                  AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM20_RULE3                  AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM21_RULE0                  AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM21_RULE1                  AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM21_RULE2                  AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM21_RULE3                  AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM22_RULE0                  AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM22_RULE1                  AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM22_RULE2                  AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM22_RULE3                  AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM23_RULE0                  AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM23_RULE1                  AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM23_RULE2                  AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM23_RULE3                  AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM24_RULE0                  AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM24_RULE1                  AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM24_RULE2                  AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM24_RULE3                  AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM25_RULE0                  AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM25_RULE1                  AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM25_RULE2                  AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM25_RULE3                  AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM26_RULE0                  AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM26_RULE1                  AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM26_RULE2                  AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM26_RULE3                  AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM27_RULE0                  AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM27_RULE1                  AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM27_RULE2                  AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM27_RULE3                  AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM28_RULE0                  AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM28_RULE1                  AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM28_RULE2                  AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM28_RULE3                  AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM29_RULE0                  AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM29_RULE1                  AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM29_RULE2                  AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM29_RULE3                  AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM30_RULE0                  AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM30_RULE1                  AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM30_RULE2                  AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM30_RULE3                  AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_RAM31_RULE0                  AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_RAM31_RULE1                  AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_RAM31_RULE2                  AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_RAM31_RULE3                  AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_SDMA_RAM_RULE0               AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_SDMA_RAM_RULE1               AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_SDMA_RAM_RULE2               AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_SDMA_RAM_RULE3               AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE0       AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE1       AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE2       AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_FLEXSPI1_REGION0_RULE3       AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_FLEXSPI1_REGION1_RULE0       AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_FLEXSPI1_REGION2_RULE0       AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_FLEXSPI1_REGION3_RULE0       AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_FLEXSPI1_REGION4_RULE0       AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_APB_BRIDGE_PER0_RULE0        AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER0_RULE1        AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER0_RULE3        AHB_SECURE_CTRL_APB_BRIDGE_PER0_RULE3_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE0        AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE1        AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE2        AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE2_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_APB_BRIDGE_PER1_RULE3        AHB_SECURE_CTRL_APB_BRIDGE_PER1_RULE3_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH0_SLAVE_RULE0      AHB_SECURE_CTRL_AHB_PERIPH0_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AIPS_BRIDGE0_PER_RULE0       AHB_SECURE_CTRL_AIPS_BRIDGE0_PER_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH1_SLAVE_RULE0      AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH1_SLAVE_RULE1      AHB_SECURE_CTRL_AHB_PERIPH1_SLAVE_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AIPS_BRIDGE1_PER_RULE0       AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AIPS_BRIDGE1_PER_RULE1       AHB_SECURE_CTRL_AIPS_BRIDGE1_PER_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH2_SLAVE_RULE0      AHB_SECURE_CTRL_AHB_PERIPH2_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_SECURE_CTRL_PERIPH_RULE0 AHB_SECURE_CTRL_AHB_SECURE_CTRL_PERIPH_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH3_SLAVE_RULE0      AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_AHB_PERIPH3_SLAVE_RULE1      AHB_SECURE_CTRL_AHB_PERIPH3_SLAVE_RULE1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_SEC_VIO_ADDR0                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_SEC_VIO_ADDR1                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_SEC_VIO_ADDR2                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_SEC_VIO_ADDR3                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_SEC_VIO_ADDR4                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,4)
  #define AHB_SECURE0_SEC_VIO_ADDR5                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,5)
  #define AHB_SECURE0_SEC_VIO_ADDR6                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,6)
  #define AHB_SECURE0_SEC_VIO_ADDR7                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,7)
  #define AHB_SECURE0_SEC_VIO_ADDR8                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,8)
  #define AHB_SECURE0_SEC_VIO_ADDR9                AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,9)
  #define AHB_SECURE0_SEC_VIO_ADDR10               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,10)
  #define AHB_SECURE0_SEC_VIO_ADDR11               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,11)
  #define AHB_SECURE0_SEC_VIO_ADDR12               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,12)
  #define AHB_SECURE0_SEC_VIO_ADDR13               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,13)
  #define AHB_SECURE0_SEC_VIO_ADDR14               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,14)
  #define AHB_SECURE0_SEC_VIO_ADDR15               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,15)
  #define AHB_SECURE0_SEC_VIO_ADDR16               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,16)
  #define AHB_SECURE0_SEC_VIO_ADDR17               AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,17)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO0           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,0)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO1           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,1)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO2           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,2)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO3           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,3)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO4           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,4)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO5           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,5)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO6           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,6)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO7           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,7)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO8           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,8)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO9           AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,9)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO10          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,10)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO11          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,11)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO12          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,12)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO13          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,13)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO14          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,14)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO15          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,15)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO16          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,16)
  #define AHB_SECURE0_SEC_VIO_MISC_INFO17          AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,17)
  #define AHB_SECURE0_SEC_VIO_INFO_VALID           AHB_SECURE_CTRL_SEC_VIO_INFO_VALID_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_SEC_GPIO_MASK0               AHB_SECURE_CTRL_SEC_GPIO_MASK0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_SEC_GPIO_MASK1               AHB_SECURE_CTRL_SEC_GPIO_MASK1_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_SEC_GPIO_MASK2               AHB_SECURE_CTRL_SEC_GPIO_MASK2_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_DSP_INT_MASK0                AHB_SECURE_CTRL_DSP_INT_MASK0_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_SEC_MASK_LOCK                AHB_SECURE_CTRL_SEC_MASK_LOCK_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_MASTER_SEC_LEVEL             AHB_SECURE_CTRL_MASTER_SEC_LEVEL_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_MASTER_SEC_ANTI_POL_REG      AHB_SECURE_CTRL_MASTER_SEC_ANTI_POL_REG_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_CM33_LOCK_REG                AHB_SECURE_CTRL_CM33_LOCK_REG_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_MISC_CTRL_DP_REG             AHB_SECURE_CTRL_MISC_CTRL_DP_REG_REG(AHB_SECURE_CTRL_BASE_PTR)
  #define AHB_SECURE0_MISC_CTRL_REG                AHB_SECURE_CTRL_MISC_CTRL_REG_REG(AHB_SECURE_CTRL_BASE_PTR)
#endif

/* AHB_SECURE_CTRL - Register array accessors */
#define AHB_SECURE_CTRL_ROM_MEM_RULE(index)      AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_ROM_MEM_RULE_NS(index)   AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_ROM_MEM_RULE(index)      AHB_SECURE_CTRL_ROM_MEM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE(index) AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_NS(index) AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE(index) AHB_SECURE_CTRL_FLEXSPI0_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0(index) AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_NS(index) AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0(index) AHB_SECURE_CTRL_FLEXSPI0_REGION1_4_RULE_FLEXSPI0_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM00_RULE(index)        AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM00_RULE_NS(index)     AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM00_RULE(index)        AHB_SECURE_CTRL_RAM00_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM01_RULE(index)        AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM01_RULE_NS(index)     AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM01_RULE(index)        AHB_SECURE_CTRL_RAM01_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM02_RULE(index)        AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM02_RULE_NS(index)     AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM02_RULE(index)        AHB_SECURE_CTRL_RAM02_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM03_RULE(index)        AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM03_RULE_NS(index)     AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM03_RULE(index)        AHB_SECURE_CTRL_RAM03_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM04_RULE(index)        AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM04_RULE_NS(index)     AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM04_RULE(index)        AHB_SECURE_CTRL_RAM04_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM05_RULE(index)        AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM05_RULE_NS(index)     AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM05_RULE(index)        AHB_SECURE_CTRL_RAM05_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM06_RULE(index)        AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM06_RULE_NS(index)     AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM06_RULE(index)        AHB_SECURE_CTRL_RAM06_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM07_RULE(index)        AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM07_RULE_NS(index)     AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM07_RULE(index)        AHB_SECURE_CTRL_RAM07_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM08_RULE(index)        AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM08_RULE_NS(index)     AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM08_RULE(index)        AHB_SECURE_CTRL_RAM08_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM09_RULE(index)        AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM09_RULE_NS(index)     AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM09_RULE(index)        AHB_SECURE_CTRL_RAM09_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM10_RULE(index)        AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM10_RULE_NS(index)     AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM10_RULE(index)        AHB_SECURE_CTRL_RAM10_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM11_RULE(index)        AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM11_RULE_NS(index)     AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM11_RULE(index)        AHB_SECURE_CTRL_RAM11_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM12_RULE(index)        AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM12_RULE_NS(index)     AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM12_RULE(index)        AHB_SECURE_CTRL_RAM12_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM13_RULE(index)        AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM13_RULE_NS(index)     AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM13_RULE(index)        AHB_SECURE_CTRL_RAM13_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM14_RULE(index)        AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM14_RULE_NS(index)     AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM14_RULE(index)        AHB_SECURE_CTRL_RAM14_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM15_RULE(index)        AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM15_RULE_NS(index)     AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM15_RULE(index)        AHB_SECURE_CTRL_RAM15_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM16_RULE(index)        AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM16_RULE_NS(index)     AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM16_RULE(index)        AHB_SECURE_CTRL_RAM16_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM17_RULE(index)        AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM17_RULE_NS(index)     AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM17_RULE(index)        AHB_SECURE_CTRL_RAM17_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM18_RULE(index)        AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM18_RULE_NS(index)     AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM18_RULE(index)        AHB_SECURE_CTRL_RAM18_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM19_RULE(index)        AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM19_RULE_NS(index)     AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM19_RULE(index)        AHB_SECURE_CTRL_RAM19_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM20_RULE(index)        AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM20_RULE_NS(index)     AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM20_RULE(index)        AHB_SECURE_CTRL_RAM20_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM21_RULE(index)        AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM21_RULE_NS(index)     AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM21_RULE(index)        AHB_SECURE_CTRL_RAM21_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM22_RULE(index)        AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM22_RULE_NS(index)     AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM22_RULE(index)        AHB_SECURE_CTRL_RAM22_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM23_RULE(index)        AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM23_RULE_NS(index)     AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM23_RULE(index)        AHB_SECURE_CTRL_RAM23_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM24_RULE(index)        AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM24_RULE_NS(index)     AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM24_RULE(index)        AHB_SECURE_CTRL_RAM24_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM25_RULE(index)        AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM25_RULE_NS(index)     AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM25_RULE(index)        AHB_SECURE_CTRL_RAM25_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM26_RULE(index)        AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM26_RULE_NS(index)     AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM26_RULE(index)        AHB_SECURE_CTRL_RAM26_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM27_RULE(index)        AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM27_RULE_NS(index)     AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM27_RULE(index)        AHB_SECURE_CTRL_RAM27_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM28_RULE(index)        AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM28_RULE_NS(index)     AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM28_RULE(index)        AHB_SECURE_CTRL_RAM28_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM29_RULE(index)        AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM29_RULE_NS(index)     AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM29_RULE(index)        AHB_SECURE_CTRL_RAM29_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM30_RULE(index)        AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM30_RULE_NS(index)     AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM30_RULE(index)        AHB_SECURE_CTRL_RAM30_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM31_RULE(index)        AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_RAM31_RULE_NS(index)     AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_RAM31_RULE(index)        AHB_SECURE_CTRL_RAM31_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE(index)     AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE_NS(index)  AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_SDMA_RAM_RULE(index)     AHB_SECURE_CTRL_SDMA_RAM_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE(index) AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_NS(index) AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE(index) AHB_SECURE_CTRL_FLEXSPI1_REGION0_RULE_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0(index) AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_NS(index) AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0(index) AHB_SECURE_CTRL_FLEXSPI1_REGIONN_RULE0_FLEXSPI1_REGION_RULE0_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_SEC_VIO_ADDR(index)      AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_SEC_VIO_ADDR_NS(index)   AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_SEC_VIO_ADDR(index)      AHB_SECURE_CTRL_SEC_VIO_ADDR_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO(index) AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,index)
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_NS(index) AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR_NS,index)
#define AHB_SECURE_CTRL_SEC_VIO_MISC_INFO(index) AHB_SECURE_CTRL_SEC_VIO_MISC_INFO_REG(AHB_SECURE_CTRL_BASE_PTR,index)

/*!
 * @}
 */ /* end of group AHB_SECURE_CTRL_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group AHB_SECURE_CTRL_Peripheral */


/* ----------------------------------------------------------------------------
   -- AIPS
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPS_Peripheral AIPS
 * @{
 */

/** AIPS - Peripheral register structure */
typedef struct AIPS_MemMap {
  uint32_t MPRA;                                   /**< Master Privilege Register A, offset: 0x0 */
  uint32_t MPRB;                                   /**< Master Privilege Register B, offset: 0x4 */
  uint8_t RESERVED_0[56];
  uint32_t OPACRA;                                 /**< Off-Platform Peripheral Access Control Register, offset: 0x40 */
  uint32_t OPACRB;                                 /**< Off-Platform Peripheral Access Control Register, offset: 0x44 */
} volatile *AIPS_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- AIPS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPS_Register_Accessor_Macros AIPS - Register accessor macros
 * @{
 */


/* AIPS - Register accessors */
#define AIPS_MPRA_REG(base)                      ((base)->MPRA)
#define AIPS_MPRB_REG(base)                      ((base)->MPRB)
#define AIPS_OPACRA_REG(base)                    ((base)->OPACRA)
#define AIPS_OPACRB_REG(base)                    ((base)->OPACRB)

/*!
 * @}
 */ /* end of group AIPS_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- AIPS Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPS_Register_Masks AIPS Register Masks
 * @{
 */

/*! @name MPRA - Master Privilege Register A */
/*! @{ */
#define AIPS_MPRA_MPL7_MASK                      (0x1U)
#define AIPS_MPRA_MPL7_SHIFT                     (0U)
#define AIPS_MPRA_MTW7_MASK                      (0x2U)
#define AIPS_MPRA_MTW7_SHIFT                     (1U)
#define AIPS_MPRA_MTR7_MASK                      (0x4U)
#define AIPS_MPRA_MTR7_SHIFT                     (2U)
#define AIPS_MPRA_MPL6_MASK                      (0x10U)
#define AIPS_MPRA_MPL6_SHIFT                     (4U)
#define AIPS_MPRA_MTW6_MASK                      (0x20U)
#define AIPS_MPRA_MTW6_SHIFT                     (5U)
#define AIPS_MPRA_MTR6_MASK                      (0x40U)
#define AIPS_MPRA_MTR6_SHIFT                     (6U)
#define AIPS_MPRA_MPL5_MASK                      (0x100U)
#define AIPS_MPRA_MPL5_SHIFT                     (8U)
#define AIPS_MPRA_MTW5_MASK                      (0x200U)
#define AIPS_MPRA_MTW5_SHIFT                     (9U)
#define AIPS_MPRA_MTR5_MASK                      (0x400U)
#define AIPS_MPRA_MTR5_SHIFT                     (10U)
#define AIPS_MPRA_MPL4_MASK                      (0x1000U)
#define AIPS_MPRA_MPL4_SHIFT                     (12U)
#define AIPS_MPRA_MTW4_MASK                      (0x2000U)
#define AIPS_MPRA_MTW4_SHIFT                     (13U)
#define AIPS_MPRA_MTR4_MASK                      (0x4000U)
#define AIPS_MPRA_MTR4_SHIFT                     (14U)
#define AIPS_MPRA_MPL3_MASK                      (0x10000U)
#define AIPS_MPRA_MPL3_SHIFT                     (16U)
#define AIPS_MPRA_MTW3_MASK                      (0x20000U)
#define AIPS_MPRA_MTW3_SHIFT                     (17U)
#define AIPS_MPRA_MTR3_MASK                      (0x40000U)
#define AIPS_MPRA_MTR3_SHIFT                     (18U)
#define AIPS_MPRA_MPL1_MASK                      (0x1000000U)
#define AIPS_MPRA_MPL1_SHIFT                     (24U)
#define AIPS_MPRA_MTW1_MASK                      (0x2000000U)
#define AIPS_MPRA_MTW1_SHIFT                     (25U)
#define AIPS_MPRA_MTR1_MASK                      (0x4000000U)
#define AIPS_MPRA_MTR1_SHIFT                     (26U)
/*! @} */

/*! @name MPRB - Master Privilege Register B */
/*! @{ */
#define AIPS_MPRB_MPL9_MASK                      (0x1000000U)
#define AIPS_MPRB_MPL9_SHIFT                     (24U)
#define AIPS_MPRB_MTW9_MASK                      (0x2000000U)
#define AIPS_MPRB_MTW9_SHIFT                     (25U)
#define AIPS_MPRB_MTR9_MASK                      (0x4000000U)
#define AIPS_MPRB_MTR9_SHIFT                     (26U)
#define AIPS_MPRB_MPL8_MASK                      (0x10000000U)
#define AIPS_MPRB_MPL8_SHIFT                     (28U)
#define AIPS_MPRB_MTW8_MASK                      (0x20000000U)
#define AIPS_MPRB_MTW8_SHIFT                     (29U)
#define AIPS_MPRB_MTR8_MASK                      (0x40000000U)
#define AIPS_MPRB_MTR8_SHIFT                     (30U)
/*! @} */

/*! @name OPACRA - Off-Platform Peripheral Access Control Register */
/*! @{ */
#define AIPS_OPACRA_TP7_MASK                     (0x1U)
#define AIPS_OPACRA_TP7_SHIFT                    (0U)
#define AIPS_OPACRA_WP7_MASK                     (0x2U)
#define AIPS_OPACRA_WP7_SHIFT                    (1U)
#define AIPS_OPACRA_SP7_MASK                     (0x4U)
#define AIPS_OPACRA_SP7_SHIFT                    (2U)
#define AIPS_OPACRA_TP6_MASK                     (0x10U)
#define AIPS_OPACRA_TP6_SHIFT                    (4U)
#define AIPS_OPACRA_WP6_MASK                     (0x20U)
#define AIPS_OPACRA_WP6_SHIFT                    (5U)
#define AIPS_OPACRA_SP6_MASK                     (0x40U)
#define AIPS_OPACRA_SP6_SHIFT                    (6U)
#define AIPS_OPACRA_TP5_MASK                     (0x100U)
#define AIPS_OPACRA_TP5_SHIFT                    (8U)
#define AIPS_OPACRA_WP5_MASK                     (0x200U)
#define AIPS_OPACRA_WP5_SHIFT                    (9U)
#define AIPS_OPACRA_SP5_MASK                     (0x400U)
#define AIPS_OPACRA_SP5_SHIFT                    (10U)
#define AIPS_OPACRA_TP4_MASK                     (0x1000U)
#define AIPS_OPACRA_TP4_SHIFT                    (12U)
#define AIPS_OPACRA_WP4_MASK                     (0x2000U)
#define AIPS_OPACRA_WP4_SHIFT                    (13U)
#define AIPS_OPACRA_SP4_MASK                     (0x4000U)
#define AIPS_OPACRA_SP4_SHIFT                    (14U)
#define AIPS_OPACRA_TP3_MASK                     (0x10000U)
#define AIPS_OPACRA_TP3_SHIFT                    (16U)
#define AIPS_OPACRA_WP3_MASK                     (0x20000U)
#define AIPS_OPACRA_WP3_SHIFT                    (17U)
#define AIPS_OPACRA_SP3_MASK                     (0x40000U)
#define AIPS_OPACRA_SP3_SHIFT                    (18U)
#define AIPS_OPACRA_TP2_MASK                     (0x100000U)
#define AIPS_OPACRA_TP2_SHIFT                    (20U)
#define AIPS_OPACRA_WP2_MASK                     (0x200000U)
#define AIPS_OPACRA_WP2_SHIFT                    (21U)
#define AIPS_OPACRA_SP2_MASK                     (0x400000U)
#define AIPS_OPACRA_SP2_SHIFT                    (22U)
#define AIPS_OPACRA_TP1_MASK                     (0x1000000U)
#define AIPS_OPACRA_TP1_SHIFT                    (24U)
#define AIPS_OPACRA_WP1_MASK                     (0x2000000U)
#define AIPS_OPACRA_WP1_SHIFT                    (25U)
#define AIPS_OPACRA_SP1_MASK                     (0x4000000U)
#define AIPS_OPACRA_SP1_SHIFT                    (26U)
#define AIPS_OPACRA_TP0_MASK                     (0x10000000U)
#define AIPS_OPACRA_TP0_SHIFT                    (28U)
#define AIPS_OPACRA_WP0_MASK                     (0x20000000U)
#define AIPS_OPACRA_WP0_SHIFT                    (29U)
#define AIPS_OPACRA_SP0_MASK                     (0x40000000U)
#define AIPS_OPACRA_SP0_SHIFT                    (30U)
/*! @} */

/*! @name OPACRB - Off-Platform Peripheral Access Control Register */
/*! @{ */
#define AIPS_OPACRB_TP7_MASK                     (0x1U)
#define AIPS_OPACRB_TP7_SHIFT                    (0U)
#define AIPS_OPACRB_WP7_MASK                     (0x2U)
#define AIPS_OPACRB_WP7_SHIFT                    (1U)
#define AIPS_OPACRB_SP7_MASK                     (0x4U)
#define AIPS_OPACRB_SP7_SHIFT                    (2U)
#define AIPS_OPACRB_TP4_MASK                     (0x1000U)
#define AIPS_OPACRB_TP4_SHIFT                    (12U)
#define AIPS_OPACRB_WP4_MASK                     (0x2000U)
#define AIPS_OPACRB_WP4_SHIFT                    (13U)
#define AIPS_OPACRB_SP4_MASK                     (0x4000U)
#define AIPS_OPACRB_SP4_SHIFT                    (14U)
#define AIPS_OPACRB_TP3_MASK                     (0x10000U)
#define AIPS_OPACRB_TP3_SHIFT                    (16U)
#define AIPS_OPACRB_WP3_MASK                     (0x20000U)
#define AIPS_OPACRB_WP3_SHIFT                    (17U)
#define AIPS_OPACRB_SP3_MASK                     (0x40000U)
#define AIPS_OPACRB_SP3_SHIFT                    (18U)
#define AIPS_OPACRB_TP2_MASK                     (0x100000U)
#define AIPS_OPACRB_TP2_SHIFT                    (20U)
#define AIPS_OPACRB_WP2_MASK                     (0x200000U)
#define AIPS_OPACRB_WP2_SHIFT                    (21U)
#define AIPS_OPACRB_SP2_MASK                     (0x400000U)
#define AIPS_OPACRB_SP2_SHIFT                    (22U)
#define AIPS_OPACRB_TP1_MASK                     (0x1000000U)
#define AIPS_OPACRB_TP1_SHIFT                    (24U)
#define AIPS_OPACRB_WP1_MASK                     (0x2000000U)
#define AIPS_OPACRB_WP1_SHIFT                    (25U)
#define AIPS_OPACRB_SP1_MASK                     (0x4000000U)
#define AIPS_OPACRB_SP1_SHIFT                    (26U)
#define AIPS_OPACRB_TP0_MASK                     (0x10000000U)
#define AIPS_OPACRB_TP0_SHIFT                    (28U)
#define AIPS_OPACRB_WP0_MASK                     (0x20000000U)
#define AIPS_OPACRB_WP0_SHIFT                    (29U)
#define AIPS_OPACRB_SP0_MASK                     (0x40000000U)
#define AIPS_OPACRB_SP0_SHIFT                    (30U)
/*! @} */


/*!
 * @}
 */ /* end of group AIPS_Register_Masks */


/* AIPS - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral AIPS0 base pointer */
  #define AIPS0_BASE_PTR                           ((AIPS_MemMapPtr)0x50110000u)
  /** Peripheral AIPS0 base pointer */
  #define AIPS0_BASE_PTR_NS                        ((AIPS_MemMapPtr)0x40110000u)
  /** Peripheral AIPS1 base pointer */
  #define AIPS1_BASE_PTR                           ((AIPS_MemMapPtr)0x50130000u)
  /** Peripheral AIPS1 base pointer */
  #define AIPS1_BASE_PTR_NS                        ((AIPS_MemMapPtr)0x40130000u)
  /** Array initializer of AIPS peripheral base pointers */
  #define AIPS_BASE_PTRS                           { AIPS0_BASE_PTR, AIPS1_BASE_PTR }
  /** Array initializer of AIPS peripheral base pointers */
  #define AIPS_BASE_PTRS_NS                        { AIPS0_BASE_PTR_NS, AIPS1_BASE_PTR_NS }
#else
  /** Peripheral AIPS0 base pointer */
  #define AIPS0_BASE_PTR                           ((AIPS_MemMapPtr)0x40110000u)
  /** Peripheral AIPS1 base pointer */
  #define AIPS1_BASE_PTR                           ((AIPS_MemMapPtr)0x40130000u)
  /** Array initializer of AIPS peripheral base pointers */
  #define AIPS_BASE_PTRS                           { AIPS0_BASE_PTR, AIPS1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- AIPS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPS_Register_Accessor_Macros AIPS - Register accessor macros
 * @{
 */


/* AIPS - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* AIPS0 */
  #define AIPS0_MPRA                               AIPS_MPRA_REG(AIPS0_BASE_PTR)
  #define AIPS0_MPRA_NS                            AIPS_MPRA_REG(AIPS0_BASE_PTR_NS)
  #define AIPS0_MPRB                               AIPS_MPRB_REG(AIPS0_BASE_PTR)
  #define AIPS0_MPRB_NS                            AIPS_MPRB_REG(AIPS0_BASE_PTR_NS)
  #define AIPS0_OPACRA                             AIPS_OPACRA_REG(AIPS0_BASE_PTR)
  #define AIPS0_OPACRA_NS                          AIPS_OPACRA_REG(AIPS0_BASE_PTR_NS)
  #define AIPS0_OPACRB                             AIPS_OPACRB_REG(AIPS0_BASE_PTR)
  #define AIPS0_OPACRB_NS                          AIPS_OPACRB_REG(AIPS0_BASE_PTR_NS)
  /* AIPS1 */
  #define AIPS1_MPRA                               AIPS_MPRA_REG(AIPS1_BASE_PTR)
  #define AIPS1_MPRA_NS                            AIPS_MPRA_REG(AIPS1_BASE_PTR_NS)
  #define AIPS1_MPRB                               AIPS_MPRB_REG(AIPS1_BASE_PTR)
  #define AIPS1_MPRB_NS                            AIPS_MPRB_REG(AIPS1_BASE_PTR_NS)
  #define AIPS1_OPACRA                             AIPS_OPACRA_REG(AIPS1_BASE_PTR)
  #define AIPS1_OPACRA_NS                          AIPS_OPACRA_REG(AIPS1_BASE_PTR_NS)
  #define AIPS1_OPACRB                             AIPS_OPACRB_REG(AIPS1_BASE_PTR)
  #define AIPS1_OPACRB_NS                          AIPS_OPACRB_REG(AIPS1_BASE_PTR_NS)
#else
  /* AIPS0 */
  #define AIPS0_MPRA                               AIPS_MPRA_REG(AIPS0_BASE_PTR)
  #define AIPS0_MPRB                               AIPS_MPRB_REG(AIPS0_BASE_PTR)
  #define AIPS0_OPACRA                             AIPS_OPACRA_REG(AIPS0_BASE_PTR)
  #define AIPS0_OPACRB                             AIPS_OPACRB_REG(AIPS0_BASE_PTR)
  /* AIPS1 */
  #define AIPS1_MPRA                               AIPS_MPRA_REG(AIPS1_BASE_PTR)
  #define AIPS1_MPRB                               AIPS_MPRB_REG(AIPS1_BASE_PTR)
  #define AIPS1_OPACRA                             AIPS_OPACRA_REG(AIPS1_BASE_PTR)
  #define AIPS1_OPACRB                             AIPS_OPACRB_REG(AIPS1_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group AIPS_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group AIPS_Peripheral */


/* ----------------------------------------------------------------------------
   -- AXI_SWITCH_AMIB
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AXI_SWITCH_AMIB_Peripheral AXI_SWITCH_AMIB
 * @{
 */

/** AXI_SWITCH_AMIB - Peripheral register structure */
typedef struct AXI_SWITCH_AMIB_MemMap {
  uint8_t RESERVED_0[8];
  uint32_t FN_MOD_BM_ISS;                          /**< Bus Matrix Issuing Functionality Modification., offset: 0x8 */
  uint8_t RESERVED_1[24];
  uint32_t FN_MOD2;                                /**< Bypass Merge, offset: 0x24 */
  uint8_t RESERVED_2[224];
  uint32_t FN_MOD;                                 /**< Issuing Functionality Modification, offset: 0x108 */
} volatile *AXI_SWITCH_AMIB_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- AXI_SWITCH_AMIB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AXI_SWITCH_AMIB_Register_Accessor_Macros AXI_SWITCH_AMIB - Register accessor macros
 * @{
 */


/* AXI_SWITCH_AMIB - Register accessors */
#define AXI_SWITCH_AMIB_FN_MOD_BM_ISS_REG(base)  ((base)->FN_MOD_BM_ISS)
#define AXI_SWITCH_AMIB_FN_MOD2_REG(base)        ((base)->FN_MOD2)
#define AXI_SWITCH_AMIB_FN_MOD_REG(base)         ((base)->FN_MOD)

/*!
 * @}
 */ /* end of group AXI_SWITCH_AMIB_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- AXI_SWITCH_AMIB Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AXI_SWITCH_AMIB_Register_Masks AXI_SWITCH_AMIB Register Masks
 * @{
 */

/*! @name FN_MOD_BM_ISS - Bus Matrix Issuing Functionality Modification. */
/*! @{ */
#define AXI_SWITCH_AMIB_FN_MOD_BM_ISS_FN_MOD_BM_ISS_MASK (0x3U)
#define AXI_SWITCH_AMIB_FN_MOD_BM_ISS_FN_MOD_BM_ISS_SHIFT (0U)
/*! FN_MOD_BM_ISS - Read channel QoS value
 */
#define AXI_SWITCH_AMIB_FN_MOD_BM_ISS_FN_MOD_BM_ISS(x) (((uint32_t)(((uint32_t)(x)) << AXI_SWITCH_AMIB_FN_MOD_BM_ISS_FN_MOD_BM_ISS_SHIFT)) & AXI_SWITCH_AMIB_FN_MOD_BM_ISS_FN_MOD_BM_ISS_MASK)
/*! @} */

/*! @name FN_MOD2 - Bypass Merge */
/*! @{ */
#define AXI_SWITCH_AMIB_FN_MOD2_FN_MOD2_MASK     (0x1U)
#define AXI_SWITCH_AMIB_FN_MOD2_FN_MOD2_SHIFT    (0U)
/*! @} */

/*! @name FN_MOD - Issuing Functionality Modification */
/*! @{ */
#define AXI_SWITCH_AMIB_FN_MOD_FN_MOD_MASK       (0x3U)
#define AXI_SWITCH_AMIB_FN_MOD_FN_MOD_SHIFT      (0U)
/*! FN_MOD - Bypass Merge
 */
#define AXI_SWITCH_AMIB_FN_MOD_FN_MOD(x)         (((uint32_t)(((uint32_t)(x)) << AXI_SWITCH_AMIB_FN_MOD_FN_MOD_SHIFT)) & AXI_SWITCH_AMIB_FN_MOD_FN_MOD_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group AXI_SWITCH_AMIB_Register_Masks */


/* AXI_SWITCH_AMIB - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral AXI_SWITCH_AMIB base pointer */
  #define AXI_SWITCH_AMIB_BASE_PTR                 ((AXI_SWITCH_AMIB_MemMapPtr)0x50282000u)
  /** Peripheral AXI_SWITCH_AMIB base pointer */
  #define AXI_SWITCH_AMIB_BASE_PTR_NS              ((AXI_SWITCH_AMIB_MemMapPtr)0x40282000u)
  /** Array initializer of AXI_SWITCH_AMIB peripheral base pointers */
  #define AXI_SWITCH_AMIB_BASE_PTRS                { AXI_SWITCH_AMIB_BASE_PTR }
  /** Array initializer of AXI_SWITCH_AMIB peripheral base pointers */
  #define AXI_SWITCH_AMIB_BASE_PTRS_NS             { AXI_SWITCH_AMIB_BASE_PTR_NS }
#else
  /** Peripheral AXI_SWITCH_AMIB base pointer */
  #define AXI_SWITCH_AMIB_BASE_PTR                 ((AXI_SWITCH_AMIB_MemMapPtr)0x40282000u)
  /** Array initializer of AXI_SWITCH_AMIB peripheral base pointers */
  #define AXI_SWITCH_AMIB_BASE_PTRS                { AXI_SWITCH_AMIB_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- AXI_SWITCH_AMIB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AXI_SWITCH_AMIB_Register_Accessor_Macros AXI_SWITCH_AMIB - Register accessor macros
 * @{
 */


/* AXI_SWITCH_AMIB - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* AXI_SWITCH_AMIB */
  #define GCDC_SWITCH0__AXI_SWITCH_AMIB_FN_MOD_BM_ISS AXI_SWITCH_AMIB_FN_MOD_BM_ISS_REG(AXI_SWITCH_AMIB_BASE_PTR)
  #define GCDC_SWITCH0__AXI_SWITCH_AMIB_FN_MOD_BM_ISS_NS AXI_SWITCH_AMIB_FN_MOD_BM_ISS_REG(AXI_SWITCH_AMIB_BASE_PTR_NS)
  #define GCDC_SWITCH0__AXI_SWITCH_AMIB_FN_MOD2    AXI_SWITCH_AMIB_FN_MOD2_REG(AXI_SWITCH_AMIB_BASE_PTR)
  #define GCDC_SWITCH0__AXI_SWITCH_AMIB_FN_MOD2_NS AXI_SWITCH_AMIB_FN_MOD2_REG(AXI_SWITCH_AMIB_BASE_PTR_NS)
  #define GCDC_SWITCH0__AXI_SWITCH_AMIB_FN_MOD     AXI_SWITCH_AMIB_FN_MOD_REG(AXI_SWITCH_AMIB_BASE_PTR)
  #define GCDC_SWITCH0__AXI_SWITCH_AMIB_FN_MOD_NS  AXI_SWITCH_AMIB_FN_MOD_REG(AXI_SWITCH_AMIB_BASE_PTR_NS)
#else
  /* AXI_SWITCH_AMIB */
  #define GCDC_SWITCH0__AXI_SWITCH_AMIB_FN_MOD_BM_ISS AXI_SWITCH_AMIB_FN_MOD_BM_ISS_REG(AXI_SWITCH_AMIB_BASE_PTR)
  #define GCDC_SWITCH0__AXI_SWITCH_AMIB_FN_MOD2    AXI_SWITCH_AMIB_FN_MOD2_REG(AXI_SWITCH_AMIB_BASE_PTR)
  #define GCDC_SWITCH0__AXI_SWITCH_AMIB_FN_MOD     AXI_SWITCH_AMIB_FN_MOD_REG(AXI_SWITCH_AMIB_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group AXI_SWITCH_AMIB_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group AXI_SWITCH_AMIB_Peripheral */


/* ----------------------------------------------------------------------------
   -- AXI_SWITCH_ASIB
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AXI_SWITCH_ASIB_Peripheral AXI_SWITCH_ASIB
 * @{
 */

/** AXI_SWITCH_ASIB - Peripheral register structure */
typedef struct AXI_SWITCH_ASIB_MemMap {
  uint8_t RESERVED_0[256];
  uint32_t READ_QOS;                               /**< Read channel QoS value, offset: 0x100 */
  uint32_t WRITE_QOS;                              /**< WRITE channel QoS value, offset: 0x104 */
  uint32_t FN_MOD;                                 /**< Issuing Functionality Modification, offset: 0x108 */
} volatile *AXI_SWITCH_ASIB_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- AXI_SWITCH_ASIB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AXI_SWITCH_ASIB_Register_Accessor_Macros AXI_SWITCH_ASIB - Register accessor macros
 * @{
 */


/* AXI_SWITCH_ASIB - Register accessors */
#define AXI_SWITCH_ASIB_READ_QOS_REG(base)       ((base)->READ_QOS)
#define AXI_SWITCH_ASIB_WRITE_QOS_REG(base)      ((base)->WRITE_QOS)
#define AXI_SWITCH_ASIB_FN_MOD_REG(base)         ((base)->FN_MOD)

/*!
 * @}
 */ /* end of group AXI_SWITCH_ASIB_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- AXI_SWITCH_ASIB Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AXI_SWITCH_ASIB_Register_Masks AXI_SWITCH_ASIB Register Masks
 * @{
 */

/*! @name READ_QOS - Read channel QoS value */
/*! @{ */
#define AXI_SWITCH_ASIB_READ_QOS_READ_QOS_MASK   (0xFU)
#define AXI_SWITCH_ASIB_READ_QOS_READ_QOS_SHIFT  (0U)
/*! READ_QOS - Read channel QoS value
 */
#define AXI_SWITCH_ASIB_READ_QOS_READ_QOS(x)     (((uint32_t)(((uint32_t)(x)) << AXI_SWITCH_ASIB_READ_QOS_READ_QOS_SHIFT)) & AXI_SWITCH_ASIB_READ_QOS_READ_QOS_MASK)
/*! @} */

/*! @name WRITE_QOS - WRITE channel QoS value */
/*! @{ */
#define AXI_SWITCH_ASIB_WRITE_QOS_WRITE_QOS_MASK (0xFU)
#define AXI_SWITCH_ASIB_WRITE_QOS_WRITE_QOS_SHIFT (0U)
/*! WRITE_QOS - Write channel QoS value
 */
#define AXI_SWITCH_ASIB_WRITE_QOS_WRITE_QOS(x)   (((uint32_t)(((uint32_t)(x)) << AXI_SWITCH_ASIB_WRITE_QOS_WRITE_QOS_SHIFT)) & AXI_SWITCH_ASIB_WRITE_QOS_WRITE_QOS_MASK)
/*! @} */

/*! @name FN_MOD - Issuing Functionality Modification */
/*! @{ */
#define AXI_SWITCH_ASIB_FN_MOD_WRITE_QOS_MASK    (0x3U)
#define AXI_SWITCH_ASIB_FN_MOD_WRITE_QOS_SHIFT   (0U)
/*! WRITE_QOS - Write channel QoS value
 */
#define AXI_SWITCH_ASIB_FN_MOD_WRITE_QOS(x)      (((uint32_t)(((uint32_t)(x)) << AXI_SWITCH_ASIB_FN_MOD_WRITE_QOS_SHIFT)) & AXI_SWITCH_ASIB_FN_MOD_WRITE_QOS_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group AXI_SWITCH_ASIB_Register_Masks */


/* AXI_SWITCH_ASIB - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral AXI_SWITCH_ASIB base pointer */
  #define AXI_SWITCH_ASIB_BASE_PTR                 ((AXI_SWITCH_ASIB_MemMapPtr)0x502C2000u)
  /** Peripheral AXI_SWITCH_ASIB base pointer */
  #define AXI_SWITCH_ASIB_BASE_PTR_NS              ((AXI_SWITCH_ASIB_MemMapPtr)0x402C2000u)
  /** Array initializer of AXI_SWITCH_ASIB peripheral base pointers */
  #define AXI_SWITCH_ASIB_BASE_PTRS                { AXI_SWITCH_ASIB_BASE_PTR }
  /** Array initializer of AXI_SWITCH_ASIB peripheral base pointers */
  #define AXI_SWITCH_ASIB_BASE_PTRS_NS             { AXI_SWITCH_ASIB_BASE_PTR_NS }
#else
  /** Peripheral AXI_SWITCH_ASIB base pointer */
  #define AXI_SWITCH_ASIB_BASE_PTR                 ((AXI_SWITCH_ASIB_MemMapPtr)0x402C2000u)
  /** Array initializer of AXI_SWITCH_ASIB peripheral base pointers */
  #define AXI_SWITCH_ASIB_BASE_PTRS                { AXI_SWITCH_ASIB_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- AXI_SWITCH_ASIB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AXI_SWITCH_ASIB_Register_Accessor_Macros AXI_SWITCH_ASIB - Register accessor macros
 * @{
 */


/* AXI_SWITCH_ASIB - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* AXI_SWITCH_ASIB */
  #define GCDC_SWITCH0__AXI_SWITCH_ASIB_READ_QOS   AXI_SWITCH_ASIB_READ_QOS_REG(AXI_SWITCH_ASIB_BASE_PTR)
  #define GCDC_SWITCH0__AXI_SWITCH_ASIB_READ_QOS_NS AXI_SWITCH_ASIB_READ_QOS_REG(AXI_SWITCH_ASIB_BASE_PTR_NS)
  #define GCDC_SWITCH0__AXI_SWITCH_ASIB_WRITE_QOS  AXI_SWITCH_ASIB_WRITE_QOS_REG(AXI_SWITCH_ASIB_BASE_PTR)
  #define GCDC_SWITCH0__AXI_SWITCH_ASIB_WRITE_QOS_NS AXI_SWITCH_ASIB_WRITE_QOS_REG(AXI_SWITCH_ASIB_BASE_PTR_NS)
  #define GCDC_SWITCH0__AXI_SWITCH_ASIB_FN_MOD     AXI_SWITCH_ASIB_FN_MOD_REG(AXI_SWITCH_ASIB_BASE_PTR)
  #define GCDC_SWITCH0__AXI_SWITCH_ASIB_FN_MOD_NS  AXI_SWITCH_ASIB_FN_MOD_REG(AXI_SWITCH_ASIB_BASE_PTR_NS)
#else
  /* AXI_SWITCH_ASIB */
  #define GCDC_SWITCH0__AXI_SWITCH_ASIB_READ_QOS   AXI_SWITCH_ASIB_READ_QOS_REG(AXI_SWITCH_ASIB_BASE_PTR)
  #define GCDC_SWITCH0__AXI_SWITCH_ASIB_WRITE_QOS  AXI_SWITCH_ASIB_WRITE_QOS_REG(AXI_SWITCH_ASIB_BASE_PTR)
  #define GCDC_SWITCH0__AXI_SWITCH_ASIB_FN_MOD     AXI_SWITCH_ASIB_FN_MOD_REG(AXI_SWITCH_ASIB_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group AXI_SWITCH_ASIB_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group AXI_SWITCH_ASIB_Peripheral */


/* ----------------------------------------------------------------------------
   -- CACHE64_CTRL
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CACHE64_CTRL_Peripheral CACHE64_CTRL
 * @{
 */

/** CACHE64_CTRL - Peripheral register structure */
typedef struct CACHE64_CTRL_MemMap {
  uint8_t RESERVED_0[2048];
  uint32_t CCR;                                    /**< Cache control register, offset: 0x800 */
  uint32_t CLCR;                                   /**< Cache line control register, offset: 0x804 */
  uint32_t CSAR;                                   /**< Cache search address register, offset: 0x808 */
  uint32_t CCVR;                                   /**< Cache read/write value register, offset: 0x80C */
} volatile *CACHE64_CTRL_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CACHE64_CTRL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CACHE64_CTRL_Register_Accessor_Macros CACHE64_CTRL - Register accessor macros
 * @{
 */


/* CACHE64_CTRL - Register accessors */
#define CACHE64_CTRL_CCR_REG(base)               ((base)->CCR)
#define CACHE64_CTRL_CLCR_REG(base)              ((base)->CLCR)
#define CACHE64_CTRL_CSAR_REG(base)              ((base)->CSAR)
#define CACHE64_CTRL_CCVR_REG(base)              ((base)->CCVR)

/*!
 * @}
 */ /* end of group CACHE64_CTRL_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CACHE64_CTRL Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CACHE64_CTRL_Register_Masks CACHE64_CTRL Register Masks
 * @{
 */

/*! @name CCR - Cache control register */
/*! @{ */
#define CACHE64_CTRL_CCR_ENCACHE_MASK            (0x1U)
#define CACHE64_CTRL_CCR_ENCACHE_SHIFT           (0U)
#define CACHE64_CTRL_CCR_ENWRBUF_MASK            (0x2U)
#define CACHE64_CTRL_CCR_ENWRBUF_SHIFT           (1U)
#define CACHE64_CTRL_CCR_INVW0_MASK              (0x1000000U)
#define CACHE64_CTRL_CCR_INVW0_SHIFT             (24U)
#define CACHE64_CTRL_CCR_PUSHW0_MASK             (0x2000000U)
#define CACHE64_CTRL_CCR_PUSHW0_SHIFT            (25U)
#define CACHE64_CTRL_CCR_INVW1_MASK              (0x4000000U)
#define CACHE64_CTRL_CCR_INVW1_SHIFT             (26U)
#define CACHE64_CTRL_CCR_PUSHW1_MASK             (0x8000000U)
#define CACHE64_CTRL_CCR_PUSHW1_SHIFT            (27U)
#define CACHE64_CTRL_CCR_GO_MASK                 (0x80000000U)
#define CACHE64_CTRL_CCR_GO_SHIFT                (31U)
/*! @} */

/*! @name CLCR - Cache line control register */
/*! @{ */
#define CACHE64_CTRL_CLCR_LGO_MASK               (0x1U)
#define CACHE64_CTRL_CLCR_LGO_SHIFT              (0U)
#define CACHE64_CTRL_CLCR_CACHEADDR_MASK         (0x3FFCU)
#define CACHE64_CTRL_CLCR_CACHEADDR_SHIFT        (2U)
/*! CACHEADDR - Cache address
 */
#define CACHE64_CTRL_CLCR_CACHEADDR(x)           (((uint32_t)(((uint32_t)(x)) << CACHE64_CTRL_CLCR_CACHEADDR_SHIFT)) & CACHE64_CTRL_CLCR_CACHEADDR_MASK)
#define CACHE64_CTRL_CLCR_WSEL_MASK              (0x4000U)
#define CACHE64_CTRL_CLCR_WSEL_SHIFT             (14U)
#define CACHE64_CTRL_CLCR_TDSEL_MASK             (0x10000U)
#define CACHE64_CTRL_CLCR_TDSEL_SHIFT            (16U)
#define CACHE64_CTRL_CLCR_LCIVB_MASK             (0x100000U)
#define CACHE64_CTRL_CLCR_LCIVB_SHIFT            (20U)
#define CACHE64_CTRL_CLCR_LCIMB_MASK             (0x200000U)
#define CACHE64_CTRL_CLCR_LCIMB_SHIFT            (21U)
#define CACHE64_CTRL_CLCR_LCWAY_MASK             (0x400000U)
#define CACHE64_CTRL_CLCR_LCWAY_SHIFT            (22U)
#define CACHE64_CTRL_CLCR_LCMD_MASK              (0x3000000U)
#define CACHE64_CTRL_CLCR_LCMD_SHIFT             (24U)
/*! LCMD - Line Command
 *  0b00..Search and read or write
 *  0b01..Invalidate
 *  0b10..Push
 *  0b11..Clear
 */
#define CACHE64_CTRL_CLCR_LCMD(x)                (((uint32_t)(((uint32_t)(x)) << CACHE64_CTRL_CLCR_LCMD_SHIFT)) & CACHE64_CTRL_CLCR_LCMD_MASK)
#define CACHE64_CTRL_CLCR_LADSEL_MASK            (0x4000000U)
#define CACHE64_CTRL_CLCR_LADSEL_SHIFT           (26U)
#define CACHE64_CTRL_CLCR_LACC_MASK              (0x8000000U)
#define CACHE64_CTRL_CLCR_LACC_SHIFT             (27U)
/*! @} */

/*! @name CSAR - Cache search address register */
/*! @{ */
#define CACHE64_CTRL_CSAR_LGO_MASK               (0x1U)
#define CACHE64_CTRL_CSAR_LGO_SHIFT              (0U)
#define CACHE64_CTRL_CSAR_PHYADDR27_1_MASK       (0xFFFFFFEU)
#define CACHE64_CTRL_CSAR_PHYADDR27_1_SHIFT      (1U)
/*! PHYADDR27_1 - Physical Address
 */
#define CACHE64_CTRL_CSAR_PHYADDR27_1(x)         (((uint32_t)(((uint32_t)(x)) << CACHE64_CTRL_CSAR_PHYADDR27_1_SHIFT)) & CACHE64_CTRL_CSAR_PHYADDR27_1_MASK)
#define CACHE64_CTRL_CSAR_PHYADDR31_29_MASK      (0xE0000000U)
#define CACHE64_CTRL_CSAR_PHYADDR31_29_SHIFT     (29U)
/*! PHYADDR31_29 - Physical Address
 */
#define CACHE64_CTRL_CSAR_PHYADDR31_29(x)        (((uint32_t)(((uint32_t)(x)) << CACHE64_CTRL_CSAR_PHYADDR31_29_SHIFT)) & CACHE64_CTRL_CSAR_PHYADDR31_29_MASK)
/*! @} */

/*! @name CCVR - Cache read/write value register */
/*! @{ */
#define CACHE64_CTRL_CCVR_DATA_MASK              (0xFFFFFFFFU)
#define CACHE64_CTRL_CCVR_DATA_SHIFT             (0U)
/*! DATA - Cache read/write Data
 */
#define CACHE64_CTRL_CCVR_DATA(x)                (((uint32_t)(((uint32_t)(x)) << CACHE64_CTRL_CCVR_DATA_SHIFT)) & CACHE64_CTRL_CCVR_DATA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group CACHE64_CTRL_Register_Masks */


/* CACHE64_CTRL - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral CACHE64_CTRL0 base pointer */
  #define CACHE64_CTRL0_BASE_PTR                   ((CACHE64_CTRL_MemMapPtr)0x50033000u)
  /** Peripheral CACHE64_CTRL0 base pointer */
  #define CACHE64_CTRL0_BASE_PTR_NS                ((CACHE64_CTRL_MemMapPtr)0x40033000u)
  /** Peripheral CACHE64_CTRL1 base pointer */
  #define CACHE64_CTRL1_BASE_PTR                   ((CACHE64_CTRL_MemMapPtr)0x50034000u)
  /** Peripheral CACHE64_CTRL1 base pointer */
  #define CACHE64_CTRL1_BASE_PTR_NS                ((CACHE64_CTRL_MemMapPtr)0x40034000u)
  /** Array initializer of CACHE64_CTRL peripheral base pointers */
  #define CACHE64_CTRL_BASE_PTRS                   { CACHE64_CTRL0_BASE_PTR, CACHE64_CTRL1_BASE_PTR }
  /** Array initializer of CACHE64_CTRL peripheral base pointers */
  #define CACHE64_CTRL_BASE_PTRS_NS                { CACHE64_CTRL0_BASE_PTR_NS, CACHE64_CTRL1_BASE_PTR_NS }
#else
  /** Peripheral CACHE64_CTRL0 base pointer */
  #define CACHE64_CTRL0_BASE_PTR                   ((CACHE64_CTRL_MemMapPtr)0x40033000u)
  /** Peripheral CACHE64_CTRL1 base pointer */
  #define CACHE64_CTRL1_BASE_PTR                   ((CACHE64_CTRL_MemMapPtr)0x40034000u)
  /** Array initializer of CACHE64_CTRL peripheral base pointers */
  #define CACHE64_CTRL_BASE_PTRS                   { CACHE64_CTRL0_BASE_PTR, CACHE64_CTRL1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- CACHE64_CTRL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CACHE64_CTRL_Register_Accessor_Macros CACHE64_CTRL - Register accessor macros
 * @{
 */


/* CACHE64_CTRL - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* CACHE64_CTRL0 */
  #define CACHE64_CTRL0_CCR                        CACHE64_CTRL_CCR_REG(CACHE64_CTRL0_BASE_PTR)
  #define CACHE64_CTRL0_CCR_NS                     CACHE64_CTRL_CCR_REG(CACHE64_CTRL0_BASE_PTR_NS)
  #define CACHE64_CTRL0_CLCR                       CACHE64_CTRL_CLCR_REG(CACHE64_CTRL0_BASE_PTR)
  #define CACHE64_CTRL0_CLCR_NS                    CACHE64_CTRL_CLCR_REG(CACHE64_CTRL0_BASE_PTR_NS)
  #define CACHE64_CTRL0_CSAR                       CACHE64_CTRL_CSAR_REG(CACHE64_CTRL0_BASE_PTR)
  #define CACHE64_CTRL0_CSAR_NS                    CACHE64_CTRL_CSAR_REG(CACHE64_CTRL0_BASE_PTR_NS)
  #define CACHE64_CTRL0_CCVR                       CACHE64_CTRL_CCVR_REG(CACHE64_CTRL0_BASE_PTR)
  #define CACHE64_CTRL0_CCVR_NS                    CACHE64_CTRL_CCVR_REG(CACHE64_CTRL0_BASE_PTR_NS)
  /* CACHE64_CTRL1 */
  #define CACHE64_CTRL1_CCR                        CACHE64_CTRL_CCR_REG(CACHE64_CTRL1_BASE_PTR)
  #define CACHE64_CTRL1_CCR_NS                     CACHE64_CTRL_CCR_REG(CACHE64_CTRL1_BASE_PTR_NS)
  #define CACHE64_CTRL1_CLCR                       CACHE64_CTRL_CLCR_REG(CACHE64_CTRL1_BASE_PTR)
  #define CACHE64_CTRL1_CLCR_NS                    CACHE64_CTRL_CLCR_REG(CACHE64_CTRL1_BASE_PTR_NS)
  #define CACHE64_CTRL1_CSAR                       CACHE64_CTRL_CSAR_REG(CACHE64_CTRL1_BASE_PTR)
  #define CACHE64_CTRL1_CSAR_NS                    CACHE64_CTRL_CSAR_REG(CACHE64_CTRL1_BASE_PTR_NS)
  #define CACHE64_CTRL1_CCVR                       CACHE64_CTRL_CCVR_REG(CACHE64_CTRL1_BASE_PTR)
  #define CACHE64_CTRL1_CCVR_NS                    CACHE64_CTRL_CCVR_REG(CACHE64_CTRL1_BASE_PTR_NS)
#else
  /* CACHE64_CTRL0 */
  #define CACHE64_CTRL0_CCR                        CACHE64_CTRL_CCR_REG(CACHE64_CTRL0_BASE_PTR)
  #define CACHE64_CTRL0_CLCR                       CACHE64_CTRL_CLCR_REG(CACHE64_CTRL0_BASE_PTR)
  #define CACHE64_CTRL0_CSAR                       CACHE64_CTRL_CSAR_REG(CACHE64_CTRL0_BASE_PTR)
  #define CACHE64_CTRL0_CCVR                       CACHE64_CTRL_CCVR_REG(CACHE64_CTRL0_BASE_PTR)
  /* CACHE64_CTRL1 */
  #define CACHE64_CTRL1_CCR                        CACHE64_CTRL_CCR_REG(CACHE64_CTRL1_BASE_PTR)
  #define CACHE64_CTRL1_CLCR                       CACHE64_CTRL_CLCR_REG(CACHE64_CTRL1_BASE_PTR)
  #define CACHE64_CTRL1_CSAR                       CACHE64_CTRL_CSAR_REG(CACHE64_CTRL1_BASE_PTR)
  #define CACHE64_CTRL1_CCVR                       CACHE64_CTRL_CCVR_REG(CACHE64_CTRL1_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group CACHE64_CTRL_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CACHE64_CTRL_Peripheral */


/* ----------------------------------------------------------------------------
   -- CACHE64_POLSEL
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CACHE64_POLSEL_Peripheral CACHE64_POLSEL
 * @{
 */

/** CACHE64_POLSEL - Peripheral register structure */
typedef struct CACHE64_POLSEL_MemMap {
  uint8_t RESERVED_0[20];
  uint32_t REG0_TOP;                               /**< Region 0 Top Boundary, offset: 0x14 */
  uint32_t REG1_TOP;                               /**< Region 1 Top Boundary, offset: 0x18 */
  uint32_t POLSEL;                                 /**< Policy Select, offset: 0x1C */
} volatile *CACHE64_POLSEL_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CACHE64_POLSEL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CACHE64_POLSEL_Register_Accessor_Macros CACHE64_POLSEL - Register accessor macros
 * @{
 */


/* CACHE64_POLSEL - Register accessors */
#define CACHE64_POLSEL_REG0_TOP_REG(base)        ((base)->REG0_TOP)
#define CACHE64_POLSEL_REG1_TOP_REG(base)        ((base)->REG1_TOP)
#define CACHE64_POLSEL_POLSEL_REG(base)          ((base)->POLSEL)

/*!
 * @}
 */ /* end of group CACHE64_POLSEL_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CACHE64_POLSEL Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CACHE64_POLSEL_Register_Masks CACHE64_POLSEL Register Masks
 * @{
 */

/*! @name REG0_TOP - Region 0 Top Boundary */
/*! @{ */
#define CACHE64_POLSEL_REG0_TOP_REG0_TOP_MASK    (0x7FFFC00U)
#define CACHE64_POLSEL_REG0_TOP_REG0_TOP_SHIFT   (10U)
/*! REG0_TOP - Upper limit of Region 0
 */
#define CACHE64_POLSEL_REG0_TOP_REG0_TOP(x)      (((uint32_t)(((uint32_t)(x)) << CACHE64_POLSEL_REG0_TOP_REG0_TOP_SHIFT)) & CACHE64_POLSEL_REG0_TOP_REG0_TOP_MASK)
/*! @} */

/*! @name REG1_TOP - Region 1 Top Boundary */
/*! @{ */
#define CACHE64_POLSEL_REG1_TOP_REG1_TOP_MASK    (0x7FFFC00U)
#define CACHE64_POLSEL_REG1_TOP_REG1_TOP_SHIFT   (10U)
/*! REG1_TOP - Upper limit of Region 1
 */
#define CACHE64_POLSEL_REG1_TOP_REG1_TOP(x)      (((uint32_t)(((uint32_t)(x)) << CACHE64_POLSEL_REG1_TOP_REG1_TOP_SHIFT)) & CACHE64_POLSEL_REG1_TOP_REG1_TOP_MASK)
/*! @} */

/*! @name POLSEL - Policy Select */
/*! @{ */
#define CACHE64_POLSEL_POLSEL_REG0_POLICY_MASK   (0x3U)
#define CACHE64_POLSEL_POLSEL_REG0_POLICY_SHIFT  (0U)
/*! REG0_POLICY - Policy Select for Region 0
 *  0b00..Non-cache
 *  0b01..Write-thru
 *  0b10..Write-back
 *  0b11..Invalid
 */
#define CACHE64_POLSEL_POLSEL_REG0_POLICY(x)     (((uint32_t)(((uint32_t)(x)) << CACHE64_POLSEL_POLSEL_REG0_POLICY_SHIFT)) & CACHE64_POLSEL_POLSEL_REG0_POLICY_MASK)
#define CACHE64_POLSEL_POLSEL_REG1_POLICY_MASK   (0xCU)
#define CACHE64_POLSEL_POLSEL_REG1_POLICY_SHIFT  (2U)
/*! REG1_POLICY - Policy Select for Region 0
 *  0b00..Non-cache
 *  0b01..Write-thru
 *  0b10..Write-back
 *  0b11..Invalid
 */
#define CACHE64_POLSEL_POLSEL_REG1_POLICY(x)     (((uint32_t)(((uint32_t)(x)) << CACHE64_POLSEL_POLSEL_REG1_POLICY_SHIFT)) & CACHE64_POLSEL_POLSEL_REG1_POLICY_MASK)
#define CACHE64_POLSEL_POLSEL_REG02_POLICY_MASK  (0x30U)
#define CACHE64_POLSEL_POLSEL_REG02_POLICY_SHIFT (4U)
/*! REG02_POLICY - Policy Select for Region 0
 *  0b00..Non-cache
 *  0b01..Write-thru
 *  0b10..Write-back
 *  0b11..Invalid
 */
#define CACHE64_POLSEL_POLSEL_REG02_POLICY(x)    (((uint32_t)(((uint32_t)(x)) << CACHE64_POLSEL_POLSEL_REG02_POLICY_SHIFT)) & CACHE64_POLSEL_POLSEL_REG02_POLICY_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group CACHE64_POLSEL_Register_Masks */


/* CACHE64_POLSEL - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral CACHE64_POLSEL0 base pointer */
  #define CACHE64_POLSEL0_BASE_PTR                 ((CACHE64_POLSEL_MemMapPtr)0x50033000u)
  /** Peripheral CACHE64_POLSEL0 base pointer */
  #define CACHE64_POLSEL0_BASE_PTR_NS              ((CACHE64_POLSEL_MemMapPtr)0x40033000u)
  /** Peripheral CACHE64_POLSEL1 base pointer */
  #define CACHE64_POLSEL1_BASE_PTR                 ((CACHE64_POLSEL_MemMapPtr)0x50034000u)
  /** Peripheral CACHE64_POLSEL1 base pointer */
  #define CACHE64_POLSEL1_BASE_PTR_NS              ((CACHE64_POLSEL_MemMapPtr)0x40034000u)
  /** Array initializer of CACHE64_POLSEL peripheral base pointers */
  #define CACHE64_POLSEL_BASE_PTRS                 { CACHE64_POLSEL0_BASE_PTR, CACHE64_POLSEL1_BASE_PTR }
  /** Array initializer of CACHE64_POLSEL peripheral base pointers */
  #define CACHE64_POLSEL_BASE_PTRS_NS              { CACHE64_POLSEL0_BASE_PTR_NS, CACHE64_POLSEL1_BASE_PTR_NS }
#else
  /** Peripheral CACHE64_POLSEL0 base pointer */
  #define CACHE64_POLSEL0_BASE_PTR                 ((CACHE64_POLSEL_MemMapPtr)0x40033000u)
  /** Peripheral CACHE64_POLSEL1 base pointer */
  #define CACHE64_POLSEL1_BASE_PTR                 ((CACHE64_POLSEL_MemMapPtr)0x40034000u)
  /** Array initializer of CACHE64_POLSEL peripheral base pointers */
  #define CACHE64_POLSEL_BASE_PTRS                 { CACHE64_POLSEL0_BASE_PTR, CACHE64_POLSEL1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- CACHE64_POLSEL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CACHE64_POLSEL_Register_Accessor_Macros CACHE64_POLSEL - Register accessor macros
 * @{
 */


/* CACHE64_POLSEL - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* CACHE64_POLSEL0 */
  #define CACHE64_POLSEL0_REG0_TOP                 CACHE64_POLSEL_REG0_TOP_REG(CACHE64_POLSEL0_BASE_PTR)
  #define CACHE64_POLSEL0_REG0_TOP_NS              CACHE64_POLSEL_REG0_TOP_REG(CACHE64_POLSEL0_BASE_PTR_NS)
  #define CACHE64_POLSEL0_REG1_TOP                 CACHE64_POLSEL_REG1_TOP_REG(CACHE64_POLSEL0_BASE_PTR)
  #define CACHE64_POLSEL0_REG1_TOP_NS              CACHE64_POLSEL_REG1_TOP_REG(CACHE64_POLSEL0_BASE_PTR_NS)
  #define CACHE64_POLSEL0_POLSEL                   CACHE64_POLSEL_POLSEL_REG(CACHE64_POLSEL0_BASE_PTR)
  #define CACHE64_POLSEL0_POLSEL_NS                CACHE64_POLSEL_POLSEL_REG(CACHE64_POLSEL0_BASE_PTR_NS)
  /* CACHE64_POLSEL1 */
  #define CACHE64_POLSEL1_REG0_TOP                 CACHE64_POLSEL_REG0_TOP_REG(CACHE64_POLSEL1_BASE_PTR)
  #define CACHE64_POLSEL1_REG0_TOP_NS              CACHE64_POLSEL_REG0_TOP_REG(CACHE64_POLSEL1_BASE_PTR_NS)
  #define CACHE64_POLSEL1_REG1_TOP                 CACHE64_POLSEL_REG1_TOP_REG(CACHE64_POLSEL1_BASE_PTR)
  #define CACHE64_POLSEL1_REG1_TOP_NS              CACHE64_POLSEL_REG1_TOP_REG(CACHE64_POLSEL1_BASE_PTR_NS)
  #define CACHE64_POLSEL1_POLSEL                   CACHE64_POLSEL_POLSEL_REG(CACHE64_POLSEL1_BASE_PTR)
  #define CACHE64_POLSEL1_POLSEL_NS                CACHE64_POLSEL_POLSEL_REG(CACHE64_POLSEL1_BASE_PTR_NS)
#else
  /* CACHE64_POLSEL0 */
  #define CACHE64_POLSEL0_REG0_TOP                 CACHE64_POLSEL_REG0_TOP_REG(CACHE64_POLSEL0_BASE_PTR)
  #define CACHE64_POLSEL0_REG1_TOP                 CACHE64_POLSEL_REG1_TOP_REG(CACHE64_POLSEL0_BASE_PTR)
  #define CACHE64_POLSEL0_POLSEL                   CACHE64_POLSEL_POLSEL_REG(CACHE64_POLSEL0_BASE_PTR)
  /* CACHE64_POLSEL1 */
  #define CACHE64_POLSEL1_REG0_TOP                 CACHE64_POLSEL_REG0_TOP_REG(CACHE64_POLSEL1_BASE_PTR)
  #define CACHE64_POLSEL1_REG1_TOP                 CACHE64_POLSEL_REG1_TOP_REG(CACHE64_POLSEL1_BASE_PTR)
  #define CACHE64_POLSEL1_POLSEL                   CACHE64_POLSEL_POLSEL_REG(CACHE64_POLSEL1_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group CACHE64_POLSEL_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CACHE64_POLSEL_Peripheral */


/* ----------------------------------------------------------------------------
   -- CASPER
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CASPER_Peripheral CASPER
 * @{
 */

/** CASPER - Peripheral register structure */
typedef struct CASPER_MemMap {
  uint32_t CTRL0;                                  /**< Control 0, offset: 0x0 */
  uint32_t CTRL1;                                  /**< Control 1, offset: 0x4 */
  uint32_t LOADER;                                 /**< Loader, offset: 0x8 */
  uint32_t STATUS;                                 /**< Status, offset: 0xC */
  uint32_t INTENSET;                               /**< Interrupt Enable Set, offset: 0x10 */
  uint32_t INTENCLR;                               /**< Interrupt Enable Clear, offset: 0x14 */
  uint32_t INTSTAT;                                /**< Interrupt status, offset: 0x18 */
  uint8_t RESERVED_0[4];
  uint32_t AREG;                                   /**< A Register, offset: 0x20 */
  uint32_t BREG;                                   /**< B Register, offset: 0x24 */
  uint32_t CREG;                                   /**< C Register, offset: 0x28 */
  uint32_t DREG;                                   /**< D Register, offset: 0x2C */
  uint32_t RES0;                                   /**< Result Register 0, offset: 0x30 */
  uint32_t RES1;                                   /**< Result Register 1, offset: 0x34 */
  uint32_t RES2;                                   /**< Result Register 2, offset: 0x38 */
  uint32_t RES3;                                   /**< Result Register 3, offset: 0x3C */
  uint8_t RESERVED_1[32];
  uint32_t MASK;                                   /**< Mask, offset: 0x60 */
  uint32_t REMASK;                                 /**< Remask, offset: 0x64 */
  uint8_t RESERVED_2[24];
  uint32_t LOCK;                                   /**< Lock, offset: 0x80 */
} volatile *CASPER_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CASPER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CASPER_Register_Accessor_Macros CASPER - Register accessor macros
 * @{
 */


/* CASPER - Register accessors */
#define CASPER_CTRL0_REG(base)                   ((base)->CTRL0)
#define CASPER_CTRL1_REG(base)                   ((base)->CTRL1)
#define CASPER_LOADER_REG(base)                  ((base)->LOADER)
#define CASPER_STATUS_REG(base)                  ((base)->STATUS)
#define CASPER_INTENSET_REG(base)                ((base)->INTENSET)
#define CASPER_INTENCLR_REG(base)                ((base)->INTENCLR)
#define CASPER_INTSTAT_REG(base)                 ((base)->INTSTAT)
#define CASPER_AREG_REG(base)                    ((base)->AREG)
#define CASPER_BREG_REG(base)                    ((base)->BREG)
#define CASPER_CREG_REG(base)                    ((base)->CREG)
#define CASPER_DREG_REG(base)                    ((base)->DREG)
#define CASPER_RES0_REG(base)                    ((base)->RES0)
#define CASPER_RES1_REG(base)                    ((base)->RES1)
#define CASPER_RES2_REG(base)                    ((base)->RES2)
#define CASPER_RES3_REG(base)                    ((base)->RES3)
#define CASPER_MASK_REG(base)                    ((base)->MASK)
#define CASPER_REMASK_REG(base)                  ((base)->REMASK)
#define CASPER_LOCK_REG(base)                    ((base)->LOCK)

/*!
 * @}
 */ /* end of group CASPER_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CASPER Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CASPER_Register_Masks CASPER Register Masks
 * @{
 */

/*! @name CTRL0 - Control 0 */
/*! @{ */
#define CASPER_CTRL0_ABBPAIR_MASK                (0x1U)
#define CASPER_CTRL0_ABBPAIR_SHIFT               (0U)
#define CASPER_CTRL0_ABOFF_MASK                  (0x4U)
#define CASPER_CTRL0_ABOFF_SHIFT                 (2U)
#define CASPER_CTRL0_CDBPAIR_MASK                (0x10000U)
#define CASPER_CTRL0_CDBPAIR_SHIFT               (16U)
#define CASPER_CTRL0_CDOFF_MASK                  (0x1FFC0000U)
#define CASPER_CTRL0_CDOFF_SHIFT                 (18U)
/*! CDOFF - CD Offset
 */
#define CASPER_CTRL0_CDOFF(x)                    (((uint32_t)(((uint32_t)(x)) << CASPER_CTRL0_CDOFF_SHIFT)) & CASPER_CTRL0_CDOFF_MASK)
/*! @} */

/*! @name CTRL1 - Control 1 */
/*! @{ */
#define CASPER_CTRL1_ITER_MASK                   (0xFFU)
#define CASPER_CTRL1_ITER_SHIFT                  (0U)
/*! ITER - Interation Counter
 */
#define CASPER_CTRL1_ITER(x)                     (((uint32_t)(((uint32_t)(x)) << CASPER_CTRL1_ITER_SHIFT)) & CASPER_CTRL1_ITER_MASK)
#define CASPER_CTRL1_MODE_MASK                   (0xFF00U)
#define CASPER_CTRL1_MODE_SHIFT                  (8U)
/*! MODE - Mode
 */
#define CASPER_CTRL1_MODE(x)                     (((uint32_t)(((uint32_t)(x)) << CASPER_CTRL1_MODE_SHIFT)) & CASPER_CTRL1_MODE_MASK)
#define CASPER_CTRL1_RESBPAIR_MASK               (0x10000U)
#define CASPER_CTRL1_RESBPAIR_SHIFT              (16U)
#define CASPER_CTRL1_RESOFF_MASK                 (0x1FFC0000U)
#define CASPER_CTRL1_RESOFF_SHIFT                (18U)
/*! RESOFF - Result Offset
 */
#define CASPER_CTRL1_RESOFF(x)                   (((uint32_t)(((uint32_t)(x)) << CASPER_CTRL1_RESOFF_SHIFT)) & CASPER_CTRL1_RESOFF_MASK)
#define CASPER_CTRL1_CSKIP_MASK                  (0xC0000000U)
#define CASPER_CTRL1_CSKIP_SHIFT                 (30U)
/*! CSKIP - Skip Rules on Carry
 *  0b00..No Skip
 *  0b01..Skip if Carry is 1
 *  0b10..Skip if Carry is 0
 *  0b11..Set CTRLOFF to CDOFF and Skip
 */
#define CASPER_CTRL1_CSKIP(x)                    (((uint32_t)(((uint32_t)(x)) << CASPER_CTRL1_CSKIP_SHIFT)) & CASPER_CTRL1_CSKIP_MASK)
/*! @} */

/*! @name LOADER - Loader */
/*! @{ */
#define CASPER_LOADER_COUNT_MASK                 (0xFFU)
#define CASPER_LOADER_COUNT_SHIFT                (0U)
/*! COUNT - Count
 */
#define CASPER_LOADER_COUNT(x)                   (((uint32_t)(((uint32_t)(x)) << CASPER_LOADER_COUNT_SHIFT)) & CASPER_LOADER_COUNT_MASK)
#define CASPER_LOADER_CTRLBPAIR_MASK             (0x10000U)
#define CASPER_LOADER_CTRLBPAIR_SHIFT            (16U)
#define CASPER_LOADER_CTRLOFF_MASK               (0x1FFC0000U)
#define CASPER_LOADER_CTRLOFF_SHIFT              (18U)
/*! CTRLOFF - Control Offset
 */
#define CASPER_LOADER_CTRLOFF(x)                 (((uint32_t)(((uint32_t)(x)) << CASPER_LOADER_CTRLOFF_SHIFT)) & CASPER_LOADER_CTRLOFF_MASK)
/*! @} */

/*! @name STATUS - Status */
/*! @{ */
#define CASPER_STATUS_DONE_MASK                  (0x1U)
#define CASPER_STATUS_DONE_SHIFT                 (0U)
#define CASPER_STATUS_CARRY_MASK                 (0x10U)
#define CASPER_STATUS_CARRY_SHIFT                (4U)
#define CASPER_STATUS_BUSY_MASK                  (0x20U)
#define CASPER_STATUS_BUSY_SHIFT                 (5U)
/*! @} */

/*! @name INTENSET - Interrupt Enable Set */
/*! @{ */
#define CASPER_INTENSET_DONE_MASK                (0x1U)
#define CASPER_INTENSET_DONE_SHIFT               (0U)
/*! @} */

/*! @name INTENCLR - Interrupt Enable Clear */
/*! @{ */
#define CASPER_INTENCLR_DONE_MASK                (0x1U)
#define CASPER_INTENCLR_DONE_SHIFT               (0U)
/*! @} */

/*! @name INTSTAT - Interrupt status */
/*! @{ */
#define CASPER_INTSTAT_DONE_MASK                 (0x1U)
#define CASPER_INTSTAT_DONE_SHIFT                (0U)
/*! @} */

/*! @name AREG - A Register */
/*! @{ */
#define CASPER_AREG_REG_VALUE_MASK               (0xFFFFFFFFU)
#define CASPER_AREG_REG_VALUE_SHIFT              (0U)
/*! REG_VALUE - Register Value
 */
#define CASPER_AREG_REG_VALUE(x)                 (((uint32_t)(((uint32_t)(x)) << CASPER_AREG_REG_VALUE_SHIFT)) & CASPER_AREG_REG_VALUE_MASK)
/*! @} */

/*! @name BREG - B Register */
/*! @{ */
#define CASPER_BREG_REG_VALUE_MASK               (0xFFFFFFFFU)
#define CASPER_BREG_REG_VALUE_SHIFT              (0U)
/*! REG_VALUE - Register Value
 */
#define CASPER_BREG_REG_VALUE(x)                 (((uint32_t)(((uint32_t)(x)) << CASPER_BREG_REG_VALUE_SHIFT)) & CASPER_BREG_REG_VALUE_MASK)
/*! @} */

/*! @name CREG - C Register */
/*! @{ */
#define CASPER_CREG_REG_VALUE_MASK               (0xFFFFFFFFU)
#define CASPER_CREG_REG_VALUE_SHIFT              (0U)
/*! REG_VALUE - Register Value
 */
#define CASPER_CREG_REG_VALUE(x)                 (((uint32_t)(((uint32_t)(x)) << CASPER_CREG_REG_VALUE_SHIFT)) & CASPER_CREG_REG_VALUE_MASK)
/*! @} */

/*! @name DREG - D Register */
/*! @{ */
#define CASPER_DREG_REG_VALUE_MASK               (0xFFFFFFFFU)
#define CASPER_DREG_REG_VALUE_SHIFT              (0U)
/*! REG_VALUE - Register Value
 */
#define CASPER_DREG_REG_VALUE(x)                 (((uint32_t)(((uint32_t)(x)) << CASPER_DREG_REG_VALUE_SHIFT)) & CASPER_DREG_REG_VALUE_MASK)
/*! @} */

/*! @name RES0 - Result Register 0 */
/*! @{ */
#define CASPER_RES0_REG_VALUE_MASK               (0xFFFFFFFFU)
#define CASPER_RES0_REG_VALUE_SHIFT              (0U)
/*! REG_VALUE - Register Value
 */
#define CASPER_RES0_REG_VALUE(x)                 (((uint32_t)(((uint32_t)(x)) << CASPER_RES0_REG_VALUE_SHIFT)) & CASPER_RES0_REG_VALUE_MASK)
/*! @} */

/*! @name RES1 - Result Register 1 */
/*! @{ */
#define CASPER_RES1_REG_VALUE_MASK               (0xFFFFFFFFU)
#define CASPER_RES1_REG_VALUE_SHIFT              (0U)
/*! REG_VALUE - Register to hold working result (from multiplier, adder/xor, etc).
 */
#define CASPER_RES1_REG_VALUE(x)                 (((uint32_t)(((uint32_t)(x)) << CASPER_RES1_REG_VALUE_SHIFT)) & CASPER_RES1_REG_VALUE_MASK)
/*! @} */

/*! @name RES2 - Result Register 2 */
/*! @{ */
#define CASPER_RES2_REG_VALUE_MASK               (0xFFFFFFFFU)
#define CASPER_RES2_REG_VALUE_SHIFT              (0U)
/*! REG_VALUE - Register Value
 */
#define CASPER_RES2_REG_VALUE(x)                 (((uint32_t)(((uint32_t)(x)) << CASPER_RES2_REG_VALUE_SHIFT)) & CASPER_RES2_REG_VALUE_MASK)
/*! @} */

/*! @name RES3 - Result Register 3 */
/*! @{ */
#define CASPER_RES3_REG_VALUE_MASK               (0xFFFFFFFFU)
#define CASPER_RES3_REG_VALUE_SHIFT              (0U)
/*! REG_VALUE - Register to hold working result (from multiplier, adder/xor, etc).
 */
#define CASPER_RES3_REG_VALUE(x)                 (((uint32_t)(((uint32_t)(x)) << CASPER_RES3_REG_VALUE_SHIFT)) & CASPER_RES3_REG_VALUE_MASK)
/*! @} */

/*! @name MASK - Mask */
/*! @{ */
#define CASPER_MASK_MASK_MASK                    (0xFFFFFFFFU)
#define CASPER_MASK_MASK_SHIFT                   (0U)
/*! MASK - Mask
 */
#define CASPER_MASK_MASK(x)                      (((uint32_t)(((uint32_t)(x)) << CASPER_MASK_MASK_SHIFT)) & CASPER_MASK_MASK_MASK)
/*! @} */

/*! @name REMASK - Remask */
/*! @{ */
#define CASPER_REMASK_MASK_MASK                  (0xFFFFFFFFU)
#define CASPER_REMASK_MASK_SHIFT                 (0U)
/*! MASK - Mask
 */
#define CASPER_REMASK_MASK(x)                    (((uint32_t)(((uint32_t)(x)) << CASPER_REMASK_MASK_SHIFT)) & CASPER_REMASK_MASK_MASK)
/*! @} */

/*! @name LOCK - Lock */
/*! @{ */
#define CASPER_LOCK_LOCK_MASK                    (0x1U)
#define CASPER_LOCK_LOCK_SHIFT                   (0U)
#define CASPER_LOCK_KEY_MASK                     (0x1FFF0U)
#define CASPER_LOCK_KEY_SHIFT                    (4U)
/*! KEY - Key
 *  0b0011100111101..Key Value
 */
#define CASPER_LOCK_KEY(x)                       (((uint32_t)(((uint32_t)(x)) << CASPER_LOCK_KEY_SHIFT)) & CASPER_LOCK_KEY_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group CASPER_Register_Masks */


/* CASPER - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral CASPER base pointer */
  #define CASPER_BASE_PTR                          ((CASPER_MemMapPtr)0x50201000u)
  /** Peripheral CASPER base pointer */
  #define CASPER_BASE_PTR_NS                       ((CASPER_MemMapPtr)0x40201000u)
  /** Array initializer of CASPER peripheral base pointers */
  #define CASPER_BASE_PTRS                         { CASPER_BASE_PTR }
  /** Array initializer of CASPER peripheral base pointers */
  #define CASPER_BASE_PTRS_NS                      { CASPER_BASE_PTR_NS }
#else
  /** Peripheral CASPER base pointer */
  #define CASPER_BASE_PTR                          ((CASPER_MemMapPtr)0x40201000u)
  /** Array initializer of CASPER peripheral base pointers */
  #define CASPER_BASE_PTRS                         { CASPER_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- CASPER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CASPER_Register_Accessor_Macros CASPER - Register accessor macros
 * @{
 */


/* CASPER - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* CASPER */
  #define CASPER_CTRL0                             CASPER_CTRL0_REG(CASPER_BASE_PTR)
  #define CASPER_CTRL0_NS                          CASPER_CTRL0_REG(CASPER_BASE_PTR_NS)
  #define CASPER_CTRL1                             CASPER_CTRL1_REG(CASPER_BASE_PTR)
  #define CASPER_CTRL1_NS                          CASPER_CTRL1_REG(CASPER_BASE_PTR_NS)
  #define CASPER_LOADER                            CASPER_LOADER_REG(CASPER_BASE_PTR)
  #define CASPER_LOADER_NS                         CASPER_LOADER_REG(CASPER_BASE_PTR_NS)
  #define CASPER_STATUS                            CASPER_STATUS_REG(CASPER_BASE_PTR)
  #define CASPER_STATUS_NS                         CASPER_STATUS_REG(CASPER_BASE_PTR_NS)
  #define CASPER_INTENSET                          CASPER_INTENSET_REG(CASPER_BASE_PTR)
  #define CASPER_INTENSET_NS                       CASPER_INTENSET_REG(CASPER_BASE_PTR_NS)
  #define CASPER_INTENCLR                          CASPER_INTENCLR_REG(CASPER_BASE_PTR)
  #define CASPER_INTENCLR_NS                       CASPER_INTENCLR_REG(CASPER_BASE_PTR_NS)
  #define CASPER_INTSTAT                           CASPER_INTSTAT_REG(CASPER_BASE_PTR)
  #define CASPER_INTSTAT_NS                        CASPER_INTSTAT_REG(CASPER_BASE_PTR_NS)
  #define CASPER_AREG                              CASPER_AREG_REG(CASPER_BASE_PTR)
  #define CASPER_AREG_NS                           CASPER_AREG_REG(CASPER_BASE_PTR_NS)
  #define CASPER_BREG                              CASPER_BREG_REG(CASPER_BASE_PTR)
  #define CASPER_BREG_NS                           CASPER_BREG_REG(CASPER_BASE_PTR_NS)
  #define CASPER_CREG                              CASPER_CREG_REG(CASPER_BASE_PTR)
  #define CASPER_CREG_NS                           CASPER_CREG_REG(CASPER_BASE_PTR_NS)
  #define CASPER_DREG                              CASPER_DREG_REG(CASPER_BASE_PTR)
  #define CASPER_DREG_NS                           CASPER_DREG_REG(CASPER_BASE_PTR_NS)
  #define CASPER_RES0                              CASPER_RES0_REG(CASPER_BASE_PTR)
  #define CASPER_RES0_NS                           CASPER_RES0_REG(CASPER_BASE_PTR_NS)
  #define CASPER_RES1                              CASPER_RES1_REG(CASPER_BASE_PTR)
  #define CASPER_RES1_NS                           CASPER_RES1_REG(CASPER_BASE_PTR_NS)
  #define CASPER_RES2                              CASPER_RES2_REG(CASPER_BASE_PTR)
  #define CASPER_RES2_NS                           CASPER_RES2_REG(CASPER_BASE_PTR_NS)
  #define CASPER_RES3                              CASPER_RES3_REG(CASPER_BASE_PTR)
  #define CASPER_RES3_NS                           CASPER_RES3_REG(CASPER_BASE_PTR_NS)
  #define CASPER_MASK                              CASPER_MASK_REG(CASPER_BASE_PTR)
  #define CASPER_MASK_NS                           CASPER_MASK_REG(CASPER_BASE_PTR_NS)
  #define CASPER_REMASK                            CASPER_REMASK_REG(CASPER_BASE_PTR)
  #define CASPER_REMASK_NS                         CASPER_REMASK_REG(CASPER_BASE_PTR_NS)
  #define CASPER_LOCK                              CASPER_LOCK_REG(CASPER_BASE_PTR)
  #define CASPER_LOCK_NS                           CASPER_LOCK_REG(CASPER_BASE_PTR_NS)
#else
  /* CASPER */
  #define CASPER_CTRL0                             CASPER_CTRL0_REG(CASPER_BASE_PTR)
  #define CASPER_CTRL1                             CASPER_CTRL1_REG(CASPER_BASE_PTR)
  #define CASPER_LOADER                            CASPER_LOADER_REG(CASPER_BASE_PTR)
  #define CASPER_STATUS                            CASPER_STATUS_REG(CASPER_BASE_PTR)
  #define CASPER_INTENSET                          CASPER_INTENSET_REG(CASPER_BASE_PTR)
  #define CASPER_INTENCLR                          CASPER_INTENCLR_REG(CASPER_BASE_PTR)
  #define CASPER_INTSTAT                           CASPER_INTSTAT_REG(CASPER_BASE_PTR)
  #define CASPER_AREG                              CASPER_AREG_REG(CASPER_BASE_PTR)
  #define CASPER_BREG                              CASPER_BREG_REG(CASPER_BASE_PTR)
  #define CASPER_CREG                              CASPER_CREG_REG(CASPER_BASE_PTR)
  #define CASPER_DREG                              CASPER_DREG_REG(CASPER_BASE_PTR)
  #define CASPER_RES0                              CASPER_RES0_REG(CASPER_BASE_PTR)
  #define CASPER_RES1                              CASPER_RES1_REG(CASPER_BASE_PTR)
  #define CASPER_RES2                              CASPER_RES2_REG(CASPER_BASE_PTR)
  #define CASPER_RES3                              CASPER_RES3_REG(CASPER_BASE_PTR)
  #define CASPER_MASK                              CASPER_MASK_REG(CASPER_BASE_PTR)
  #define CASPER_REMASK                            CASPER_REMASK_REG(CASPER_BASE_PTR)
  #define CASPER_LOCK                              CASPER_LOCK_REG(CASPER_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group CASPER_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CASPER_Peripheral */


/* ----------------------------------------------------------------------------
   -- CLKCTL0
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CLKCTL0_Peripheral CLKCTL0
 * @{
 */

/** CLKCTL0 - Peripheral register structure */
typedef struct CLKCTL0_MemMap {
  uint8_t RESERVED_0[16];
  uint32_t PSCCTL0;                                /**< Clock Control 0, offset: 0x10 */
  uint32_t PSCCTL1;                                /**< Clock Control 1, offset: 0x14 */
  uint32_t PSCCTL2;                                /**< Clock Control 2, offset: 0x18 */
  uint8_t RESERVED_1[36];
  uint32_t PSCCTL0_SET;                            /**< Clock Control 0 Set, offset: 0x40 */
  uint32_t PSCCTL1_SET;                            /**< Clock Control 1 Set, offset: 0x44 */
  uint32_t PSCCTL2_SET;                            /**< Clock Control 2 Set, offset: 0x48 */
  uint8_t RESERVED_2[36];
  uint32_t PSCCTL0_CLR;                            /**< Clock Control 0 Clear, offset: 0x70 */
  uint32_t PSCCTL1_CLR;                            /**< Clock Control 1 Clear, offset: 0x74 */
  uint32_t PSCCTL2_CLR;                            /**< Clock Control 2 Clear, offset: 0x78 */
  uint8_t RESERVED_3[4];
  uint32_t FRO_CONTROL;                            /**< Free Running Oscillator Control, offset: 0x80 */
  uint32_t FRO_CAPVAL;                             /**< Free Running Oscillator Captured Value, offset: 0x84 */
  uint8_t RESERVED_4[4];
  uint32_t FRO_RDTRIM;                             /**< Free Running Oscillator Trim, offset: 0x8C */
  uint8_t RESERVED_5[120];
  uint32_t FRODIVSEL;                              /**< FRO Clock Divider, offset: 0x108 */
  uint32_t FROCLKSTATUS;                           /**< FRO Clock Status, offset: 0x10C */
  uint32_t FRODIVOEN;                              /**< FRO Enable Register, offset: 0x110 */
  uint8_t RESERVED_6[28];
  uint32_t LOWFREQCLKDIV;                          /**< Low Frequency Clock Divider, offset: 0x130 */
  uint8_t RESERVED_7[44];
  uint32_t SYSOSCCTL0;                             /**< System Oscillator Control 0, offset: 0x160 */
  uint8_t RESERVED_8[4];
  uint32_t SYSOSCBYPASS;                           /**< OSC Clock Source Select, offset: 0x168 */
  uint8_t RESERVED_9[36];
  uint32_t LPOSCCTL0;                              /**< Low Power Oscillator Control 0, offset: 0x190 */
  uint8_t RESERVED_10[44];
  uint32_t OSC32KHZCTL0;                           /**< 32 KHz Oscillator Control 0, offset: 0x1C0 */
  uint8_t RESERVED_11[60];
  uint32_t SYSPLL0CLKSEL;                          /**< System PLL 0 Clock Select, offset: 0x200 */
  uint32_t SYSPLL0CTL0;                            /**< System PLL0 Control 0, offset: 0x204 */
  uint8_t RESERVED_12[4];
  uint32_t SYSPLL0LOCKTIMEDIV2;                    /**< System PLL0 Lock Time Div2, offset: 0x20C */
  uint32_t SYSPLL0NUM;                             /**< System PLL0 Numerator, offset: 0x210 */
  uint32_t SYSPLL0DENOM;                           /**< System PLL0 Denominator, offset: 0x214 */
  uint32_t SYSPLL0PFD;                             /**< System PLL0 PFD, offset: 0x218 */
  uint8_t RESERVED_13[36];
  uint32_t MAINPLLCLKDIV;                          /**< Main PLL Clock Divider, offset: 0x240 */
  uint32_t DSPPLLCLKDIV;                           /**< DSP PLL Clock Divider, offset: 0x244 */
  uint32_t AUX0PLLCLKDIV;                          /**< AUX0 PLL Clock Divider, offset: 0x248 */
  uint32_t AUX1PLLCLKDIV;                          /**< AUX1 PLL Clock Divider, offset: 0x24C */
  uint8_t RESERVED_14[432];
  uint32_t SYSCPUAHBCLKDIV;                        /**< System CPU AHB Clock Divider, offset: 0x400 */
  uint8_t RESERVED_15[44];
  uint32_t MAINCLKSELA;                            /**< Main Clock Select A, offset: 0x430 */
  uint32_t MAINCLKSELB;                            /**< Main Clock Select B, offset: 0x434 */
  uint8_t RESERVED_16[200];
  uint32_t PFCDIV[2];                              /**< PFC divider 0 (trace clock)..PFC divider 1 (USB HS PHY bus clock), array offset: 0x500, array step: 0x4 */
  uint8_t RESERVED_17[280];
  uint32_t FLEXSPI0FCLKSEL;                        /**< FlexSPI0 Functional Clock Select, offset: 0x620 */
  uint32_t FLEXSPI0FCLKDIV;                        /**< FlexSPI0 Functional Clock Divider, offset: 0x624 */
  uint8_t RESERVED_18[8];
  uint32_t FLEXSPI1FCLKSEL;                        /**< FlexSPI1 Functional Clock Select, offset: 0x630 */
  uint32_t FLEXSPI1FCLKDIV;                        /**< FlexSPI1 Functional Clock Divider, offset: 0x634 */
  uint8_t RESERVED_19[8];
  uint32_t SCTFCLKSEL;                             /**< SCT Functional Clock Select, offset: 0x640 */
  uint32_t SCTIN7CLKDIV;                           /**< SCT Functional Clock Divider, offset: 0x644 */
  uint8_t RESERVED_20[24];
  uint32_t USBHSFCLKSEL;                           /**< High Speed USB Functional Clock Select, offset: 0x660 */
  uint32_t USBHSFCLKDIV;                           /**< High Speed USB Functional Clock Divider, offset: 0x664 */
  uint8_t RESERVED_21[24];
  uint32_t SDIO0FCLKSEL;                           /**< SDIO0 Functional Clock Select, offset: 0x680 */
  uint32_t SDIO0FCLKDIV;                           /**< SDIO0 Functional Clock Divider, offset: 0x684 */
  uint8_t RESERVED_22[8];
  uint32_t SDIO1FCLKSEL;                           /**< SDIO1 Functional Clock Select, offset: 0x690 */
  uint32_t SDIO1FCLKDIV;                           /**< SDIO1 Functional Clock Divider, offset: 0x694 */
  uint8_t RESERVED_23[56];
  uint32_t ADC0FCLKSEL0;                           /**< ADC0 Functional Clock Select 0, offset: 0x6D0 */
  uint32_t ADC0FCLKSEL1;                           /**< ADC0 Functional Clock Select 1, offset: 0x6D4 */
  uint32_t ADC0FCLKDIV;                            /**< ADC0 Functional Clock Divider, offset: 0x6D8 */
  uint8_t RESERVED_24[36];
  uint32_t UTICKFCLKSEL;                           /**< UTICK Functional Clock Select, offset: 0x700 */
  uint8_t RESERVED_25[28];
  uint32_t WDT0FCLKSEL;                            /**< WDT0 Functional Clock Select, offset: 0x720 */
  uint8_t RESERVED_26[12];
  uint32_t A32KHZWAKECLKSEL;                       /**< 32 KHz Wake Clock Source Select, offset: 0x730 */
  uint32_t A32KHZWAKECLKDIV;                       /**< 32 KHz Wake Clock Divider, offset: 0x734 */
  uint8_t RESERVED_27[40];
  uint32_t SYSTICKFCLKSEL;                         /**< SYSTICK Functional Clock Select, offset: 0x760 */
  uint32_t SYSTICKFCLKDIV;                         /**< SYSTICK Functional Clock Divider, offset: 0x764 */
  uint8_t RESERVED_28[8];
  uint32_t DPHYCLKSEL;                             /**< MIPI-DSI PHY Clock Select, offset: 0x770 */
  uint32_t DPHYCLKDIV;                             /**< MIPI-DSI PHY Clock Divider, offset: 0x774 */
  uint32_t DPHYESCCLKSEL;                          /**< MIPI-DSI DPHY Escape Mode Clock Select, offset: 0x778 */
  uint32_t DPHYESCRXCLKDIV;                        /**< MIPI-DSI DPHY Escape Mode Receive Clock Divider, offset: 0x77C */
  uint32_t DPHYESCTXCLKDIV;                        /**< MIPI-DSI DPHY Escape Mode Tramsmit Clock Divider, offset: 0x780 */
  uint8_t RESERVED_29[12];
  uint32_t GPUCLKSEL;                              /**< GPU Clock Select, offset: 0x790 */
  uint32_t GPUCLKDIV;                              /**< GPU Clock Divider, offset: 0x794 */
  uint8_t RESERVED_30[8];
  uint32_t DCPIXELCLKSEL;                          /**< LCDIF Pixel Clock Select, offset: 0x7A0 */
  uint32_t DCPIXELCLKDIV;                          /**< LCDIF Pixel Clock Divider, offset: 0x7A4 */
} volatile *CLKCTL0_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CLKCTL0 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CLKCTL0_Register_Accessor_Macros CLKCTL0 - Register accessor macros
 * @{
 */


/* CLKCTL0 - Register accessors */
#define CLKCTL0_PSCCTL0_REG(base)                ((base)->PSCCTL0)
#define CLKCTL0_PSCCTL1_REG(base)                ((base)->PSCCTL1)
#define CLKCTL0_PSCCTL2_REG(base)                ((base)->PSCCTL2)
#define CLKCTL0_PSCCTL0_SET_REG(base)            ((base)->PSCCTL0_SET)
#define CLKCTL0_PSCCTL1_SET_REG(base)            ((base)->PSCCTL1_SET)
#define CLKCTL0_PSCCTL2_SET_REG(base)            ((base)->PSCCTL2_SET)
#define CLKCTL0_PSCCTL0_CLR_REG(base)            ((base)->PSCCTL0_CLR)
#define CLKCTL0_PSCCTL1_CLR_REG(base)            ((base)->PSCCTL1_CLR)
#define CLKCTL0_PSCCTL2_CLR_REG(base)            ((base)->PSCCTL2_CLR)
#define CLKCTL0_FRO_CONTROL_REG(base)            ((base)->FRO_CONTROL)
#define CLKCTL0_FRO_CAPVAL_REG(base)             ((base)->FRO_CAPVAL)
#define CLKCTL0_FRO_RDTRIM_REG(base)             ((base)->FRO_RDTRIM)
#define CLKCTL0_FRODIVSEL_REG(base)              ((base)->FRODIVSEL)
#define CLKCTL0_FROCLKSTATUS_REG(base)           ((base)->FROCLKSTATUS)
#define CLKCTL0_FRODIVOEN_REG(base)              ((base)->FRODIVOEN)
#define CLKCTL0_LOWFREQCLKDIV_REG(base)          ((base)->LOWFREQCLKDIV)
#define CLKCTL0_SYSOSCCTL0_REG(base)             ((base)->SYSOSCCTL0)
#define CLKCTL0_SYSOSCBYPASS_REG(base)           ((base)->SYSOSCBYPASS)
#define CLKCTL0_LPOSCCTL0_REG(base)              ((base)->LPOSCCTL0)
#define CLKCTL0_OSC32KHZCTL0_REG(base)           ((base)->OSC32KHZCTL0)
#define CLKCTL0_SYSPLL0CLKSEL_REG(base)          ((base)->SYSPLL0CLKSEL)
#define CLKCTL0_SYSPLL0CTL0_REG(base)            ((base)->SYSPLL0CTL0)
#define CLKCTL0_SYSPLL0LOCKTIMEDIV2_REG(base)    ((base)->SYSPLL0LOCKTIMEDIV2)
#define CLKCTL0_SYSPLL0NUM_REG(base)             ((base)->SYSPLL0NUM)
#define CLKCTL0_SYSPLL0DENOM_REG(base)           ((base)->SYSPLL0DENOM)
#define CLKCTL0_SYSPLL0PFD_REG(base)             ((base)->SYSPLL0PFD)
#define CLKCTL0_MAINPLLCLKDIV_REG(base)          ((base)->MAINPLLCLKDIV)
#define CLKCTL0_DSPPLLCLKDIV_REG(base)           ((base)->DSPPLLCLKDIV)
#define CLKCTL0_AUX0PLLCLKDIV_REG(base)          ((base)->AUX0PLLCLKDIV)
#define CLKCTL0_AUX1PLLCLKDIV_REG(base)          ((base)->AUX1PLLCLKDIV)
#define CLKCTL0_SYSCPUAHBCLKDIV_REG(base)        ((base)->SYSCPUAHBCLKDIV)
#define CLKCTL0_MAINCLKSELA_REG(base)            ((base)->MAINCLKSELA)
#define CLKCTL0_MAINCLKSELB_REG(base)            ((base)->MAINCLKSELB)
#define CLKCTL0_PFCDIV_REG(base,index)           ((base)->PFCDIV[index])
#define CLKCTL0_FLEXSPI0FCLKSEL_REG(base)        ((base)->FLEXSPI0FCLKSEL)
#define CLKCTL0_FLEXSPI0FCLKDIV_REG(base)        ((base)->FLEXSPI0FCLKDIV)
#define CLKCTL0_FLEXSPI1FCLKSEL_REG(base)        ((base)->FLEXSPI1FCLKSEL)
#define CLKCTL0_FLEXSPI1FCLKDIV_REG(base)        ((base)->FLEXSPI1FCLKDIV)
#define CLKCTL0_SCTFCLKSEL_REG(base)             ((base)->SCTFCLKSEL)
#define CLKCTL0_SCTIN7CLKDIV_REG(base)           ((base)->SCTIN7CLKDIV)
#define CLKCTL0_USBHSFCLKSEL_REG(base)           ((base)->USBHSFCLKSEL)
#define CLKCTL0_USBHSFCLKDIV_REG(base)           ((base)->USBHSFCLKDIV)
#define CLKCTL0_SDIO0FCLKSEL_REG(base)           ((base)->SDIO0FCLKSEL)
#define CLKCTL0_SDIO0FCLKDIV_REG(base)           ((base)->SDIO0FCLKDIV)
#define CLKCTL0_SDIO1FCLKSEL_REG(base)           ((base)->SDIO1FCLKSEL)
#define CLKCTL0_SDIO1FCLKDIV_REG(base)           ((base)->SDIO1FCLKDIV)
#define CLKCTL0_ADC0FCLKSEL0_REG(base)           ((base)->ADC0FCLKSEL0)
#define CLKCTL0_ADC0FCLKSEL1_REG(base)           ((base)->ADC0FCLKSEL1)
#define CLKCTL0_ADC0FCLKDIV_REG(base)            ((base)->ADC0FCLKDIV)
#define CLKCTL0_UTICKFCLKSEL_REG(base)           ((base)->UTICKFCLKSEL)
#define CLKCTL0_WDT0FCLKSEL_REG(base)            ((base)->WDT0FCLKSEL)
#define CLKCTL0_A32KHZWAKECLKSEL_REG(base)       ((base)->A32KHZWAKECLKSEL)
#define CLKCTL0_A32KHZWAKECLKDIV_REG(base)       ((base)->A32KHZWAKECLKDIV)
#define CLKCTL0_SYSTICKFCLKSEL_REG(base)         ((base)->SYSTICKFCLKSEL)
#define CLKCTL0_SYSTICKFCLKDIV_REG(base)         ((base)->SYSTICKFCLKDIV)
#define CLKCTL0_DPHYCLKSEL_REG(base)             ((base)->DPHYCLKSEL)
#define CLKCTL0_DPHYCLKDIV_REG(base)             ((base)->DPHYCLKDIV)
#define CLKCTL0_DPHYESCCLKSEL_REG(base)          ((base)->DPHYESCCLKSEL)
#define CLKCTL0_DPHYESCRXCLKDIV_REG(base)        ((base)->DPHYESCRXCLKDIV)
#define CLKCTL0_DPHYESCTXCLKDIV_REG(base)        ((base)->DPHYESCTXCLKDIV)
#define CLKCTL0_GPUCLKSEL_REG(base)              ((base)->GPUCLKSEL)
#define CLKCTL0_GPUCLKDIV_REG(base)              ((base)->GPUCLKDIV)
#define CLKCTL0_DCPIXELCLKSEL_REG(base)          ((base)->DCPIXELCLKSEL)
#define CLKCTL0_DCPIXELCLKDIV_REG(base)          ((base)->DCPIXELCLKDIV)

/*!
 * @}
 */ /* end of group CLKCTL0_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CLKCTL0 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CLKCTL0_Register_Masks CLKCTL0 Register Masks
 * @{
 */

/*! @name PSCCTL0 - Clock Control 0 */
/*! @{ */
#define CLKCTL0_PSCCTL0_DSP_CLK_MASK             (0x2U)
#define CLKCTL0_PSCCTL0_DSP_CLK_SHIFT            (1U)
#define CLKCTL0_PSCCTL0_ROM_CTRLR_CLK_MASK       (0x4U)
#define CLKCTL0_PSCCTL0_ROM_CTRLR_CLK_SHIFT      (2U)
#define CLKCTL0_PSCCTL0_AXI_SWITCH_CLK_MASK      (0x8U)
#define CLKCTL0_PSCCTL0_AXI_SWITCH_CLK_SHIFT     (3U)
#define CLKCTL0_PSCCTL0_AXI_CTLR_CLK_MASK        (0x10U)
#define CLKCTL0_PSCCTL0_AXI_CTLR_CLK_SHIFT       (4U)
#define CLKCTL0_PSCCTL0_POWERQUAD_CLK_MASK       (0x100U)
#define CLKCTL0_PSCCTL0_POWERQUAD_CLK_SHIFT      (8U)
#define CLKCTL0_PSCCTL0_CASPER_CLK_MASK          (0x200U)
#define CLKCTL0_PSCCTL0_CASPER_CLK_SHIFT         (9U)
#define CLKCTL0_PSCCTL0_HASHCRYPT_CLK_MASK       (0x400U)
#define CLKCTL0_PSCCTL0_HASHCRYPT_CLK_SHIFT      (10U)
#define CLKCTL0_PSCCTL0_PUF_CLK_MASK             (0x800U)
#define CLKCTL0_PSCCTL0_PUF_CLK_SHIFT            (11U)
#define CLKCTL0_PSCCTL0_RNG_CLK_MASK             (0x1000U)
#define CLKCTL0_PSCCTL0_RNG_CLK_SHIFT            (12U)
#define CLKCTL0_PSCCTL0_FLEXSPI0_OTFAD_CLK_MASK  (0x10000U)
#define CLKCTL0_PSCCTL0_FLEXSPI0_OTFAD_CLK_SHIFT (16U)
#define CLKCTL0_PSCCTL0_OTP_CTLR_CLK_MASK        (0x20000U)
#define CLKCTL0_PSCCTL0_OTP_CTLR_CLK_SHIFT       (17U)
#define CLKCTL0_PSCCTL0_FLEXSPI1_CLK_MASK        (0x40000U)
#define CLKCTL0_PSCCTL0_FLEXSPI1_CLK_SHIFT       (18U)
#define CLKCTL0_PSCCTL0_USBHS_PHY_CLK_MASK       (0x100000U)
#define CLKCTL0_PSCCTL0_USBHS_PHY_CLK_SHIFT      (20U)
#define CLKCTL0_PSCCTL0_USBHS_DEVICE_CLK_MASK    (0x200000U)
#define CLKCTL0_PSCCTL0_USBHS_DEVICE_CLK_SHIFT   (21U)
#define CLKCTL0_PSCCTL0_USBHS_HOST_CLK_MASK      (0x400000U)
#define CLKCTL0_PSCCTL0_USBHS_HOST_CLK_SHIFT     (22U)
#define CLKCTL0_PSCCTL0_USBHS_SRAM_CLK_MASK      (0x800000U)
#define CLKCTL0_PSCCTL0_USBHS_SRAM_CLK_SHIFT     (23U)
#define CLKCTL0_PSCCTL0_SCT_CLK_MASK             (0x1000000U)
#define CLKCTL0_PSCCTL0_SCT_CLK_SHIFT            (24U)
#define CLKCTL0_PSCCTL0_GPU_CLK_MASK             (0x4000000U)
#define CLKCTL0_PSCCTL0_GPU_CLK_SHIFT            (26U)
#define CLKCTL0_PSCCTL0_DISPLAY_CTLR_CLK_MASK    (0x8000000U)
#define CLKCTL0_PSCCTL0_DISPLAY_CTLR_CLK_SHIFT   (27U)
#define CLKCTL0_PSCCTL0_MIPI_DSI_CTLR_CLK_MASK   (0x10000000U)
#define CLKCTL0_PSCCTL0_MIPI_DSI_CTLR_CLK_SHIFT  (28U)
#define CLKCTL0_PSCCTL0_SMARTDMA_CLK_MASK        (0x40000000U)
#define CLKCTL0_PSCCTL0_SMARTDMA_CLK_SHIFT       (30U)
/*! @} */

/*! @name PSCCTL1 - Clock Control 1 */
/*! @{ */
#define CLKCTL0_PSCCTL1_SDIO0_CLK_MASK           (0x4U)
#define CLKCTL0_PSCCTL1_SDIO0_CLK_SHIFT          (2U)
#define CLKCTL0_PSCCTL1_SDIO1_CLK_MASK           (0x8U)
#define CLKCTL0_PSCCTL1_SDIO1_CLK_SHIFT          (3U)
#define CLKCTL0_PSCCTL1_ACMP0_CLK_MASK           (0x8000U)
#define CLKCTL0_PSCCTL1_ACMP0_CLK_SHIFT          (15U)
#define CLKCTL0_PSCCTL1_ADC0_CLK_MASK            (0x10000U)
#define CLKCTL0_PSCCTL1_ADC0_CLK_SHIFT           (16U)
#define CLKCTL0_PSCCTL1_SHSGPIO0_CLK_MASK        (0x1000000U)
#define CLKCTL0_PSCCTL1_SHSGPIO0_CLK_SHIFT       (24U)
/*! @} */

/*! @name PSCCTL2 - Clock Control 2 */
/*! @{ */
#define CLKCTL0_PSCCTL2_UTICK0_CLK_MASK          (0x1U)
#define CLKCTL0_PSCCTL2_UTICK0_CLK_SHIFT         (0U)
#define CLKCTL0_PSCCTL2_WWDT0_CLK_MASK           (0x2U)
#define CLKCTL0_PSCCTL2_WWDT0_CLK_SHIFT          (1U)
#define CLKCTL0_PSCCTL2_PMC_CLK_MASK             (0x20000000U)
#define CLKCTL0_PSCCTL2_PMC_CLK_SHIFT            (29U)
/*! @} */

/*! @name PSCCTL0_SET - Clock Control 0 Set */
/*! @{ */
#define CLKCTL0_PSCCTL0_SET_DSP_CLK_MASK         (0x2U)
#define CLKCTL0_PSCCTL0_SET_DSP_CLK_SHIFT        (1U)
#define CLKCTL0_PSCCTL0_SET_ROM_CTRLR_CLK_MASK   (0x4U)
#define CLKCTL0_PSCCTL0_SET_ROM_CTRLR_CLK_SHIFT  (2U)
#define CLKCTL0_PSCCTL0_SET_AXI_SWITCH_CLK_MASK  (0x8U)
#define CLKCTL0_PSCCTL0_SET_AXI_SWITCH_CLK_SHIFT (3U)
#define CLKCTL0_PSCCTL0_SET_AXI_CTLR_CLK_MASK    (0x10U)
#define CLKCTL0_PSCCTL0_SET_AXI_CTLR_CLK_SHIFT   (4U)
#define CLKCTL0_PSCCTL0_SET_POWERQUAD_CLK_MASK   (0x100U)
#define CLKCTL0_PSCCTL0_SET_POWERQUAD_CLK_SHIFT  (8U)
#define CLKCTL0_PSCCTL0_SET_CASPER_CLK_MASK      (0x200U)
#define CLKCTL0_PSCCTL0_SET_CASPER_CLK_SHIFT     (9U)
#define CLKCTL0_PSCCTL0_SET_HASHCRYPT_CLK_MASK   (0x400U)
#define CLKCTL0_PSCCTL0_SET_HASHCRYPT_CLK_SHIFT  (10U)
#define CLKCTL0_PSCCTL0_SET_PUF_CLK_MASK         (0x800U)
#define CLKCTL0_PSCCTL0_SET_PUF_CLK_SHIFT        (11U)
#define CLKCTL0_PSCCTL0_SET_RNG_CLK_MASK         (0x1000U)
#define CLKCTL0_PSCCTL0_SET_RNG_CLK_SHIFT        (12U)
#define CLKCTL0_PSCCTL0_SET_FLEXSPI0_OTFAD_CLK_MASK (0x10000U)
#define CLKCTL0_PSCCTL0_SET_FLEXSPI0_OTFAD_CLK_SHIFT (16U)
#define CLKCTL0_PSCCTL0_SET_OTP_CTLR_CLK_MASK    (0x20000U)
#define CLKCTL0_PSCCTL0_SET_OTP_CTLR_CLK_SHIFT   (17U)
#define CLKCTL0_PSCCTL0_SET_FLEXSPI1_CLK_MASK    (0x40000U)
#define CLKCTL0_PSCCTL0_SET_FLEXSPI1_CLK_SHIFT   (18U)
#define CLKCTL0_PSCCTL0_SET_USBHS_PHY_CLK_MASK   (0x100000U)
#define CLKCTL0_PSCCTL0_SET_USBHS_PHY_CLK_SHIFT  (20U)
#define CLKCTL0_PSCCTL0_SET_USBHS_DEVICE_CLK_MASK (0x200000U)
#define CLKCTL0_PSCCTL0_SET_USBHS_DEVICE_CLK_SHIFT (21U)
#define CLKCTL0_PSCCTL0_SET_USBHS_HOST_CLK_MASK  (0x400000U)
#define CLKCTL0_PSCCTL0_SET_USBHS_HOST_CLK_SHIFT (22U)
#define CLKCTL0_PSCCTL0_SET_USBHS_SRAM_CLK_MASK  (0x800000U)
#define CLKCTL0_PSCCTL0_SET_USBHS_SRAM_CLK_SHIFT (23U)
#define CLKCTL0_PSCCTL0_SET_SCT_CLK_MASK         (0x1000000U)
#define CLKCTL0_PSCCTL0_SET_SCT_CLK_SHIFT        (24U)
#define CLKCTL0_PSCCTL0_SET_GPU_CLK_MASK         (0x4000000U)
#define CLKCTL0_PSCCTL0_SET_GPU_CLK_SHIFT        (26U)
#define CLKCTL0_PSCCTL0_SET_DISPLAY_CTLR_CLK_MASK (0x8000000U)
#define CLKCTL0_PSCCTL0_SET_DISPLAY_CTLR_CLK_SHIFT (27U)
#define CLKCTL0_PSCCTL0_SET_MIPI_DSI_CTLR_CLK_MASK (0x10000000U)
#define CLKCTL0_PSCCTL0_SET_MIPI_DSI_CTLR_CLK_SHIFT (28U)
#define CLKCTL0_PSCCTL0_SET_SMARTDMA_CLK_MASK    (0x40000000U)
#define CLKCTL0_PSCCTL0_SET_SMARTDMA_CLK_SHIFT   (30U)
/*! @} */

/*! @name PSCCTL1_SET - Clock Control 1 Set */
/*! @{ */
#define CLKCTL0_PSCCTL1_SET_SDIO0_CLK_MASK       (0x4U)
#define CLKCTL0_PSCCTL1_SET_SDIO0_CLK_SHIFT      (2U)
#define CLKCTL0_PSCCTL1_SET_SDIO1_CLK_MASK       (0x8U)
#define CLKCTL0_PSCCTL1_SET_SDIO1_CLK_SHIFT      (3U)
#define CLKCTL0_PSCCTL1_SET_ACMP0_CLK_MASK       (0x8000U)
#define CLKCTL0_PSCCTL1_SET_ACMP0_CLK_SHIFT      (15U)
#define CLKCTL0_PSCCTL1_SET_ADC0_CLK_MASK        (0x10000U)
#define CLKCTL0_PSCCTL1_SET_ADC0_CLK_SHIFT       (16U)
#define CLKCTL0_PSCCTL1_SET_SHSGPIO0_CLK_MASK    (0x1000000U)
#define CLKCTL0_PSCCTL1_SET_SHSGPIO0_CLK_SHIFT   (24U)
/*! @} */

/*! @name PSCCTL2_SET - Clock Control 2 Set */
/*! @{ */
#define CLKCTL0_PSCCTL2_SET_UTICK0_CLK_MASK      (0x1U)
#define CLKCTL0_PSCCTL2_SET_UTICK0_CLK_SHIFT     (0U)
#define CLKCTL0_PSCCTL2_SET_WWDT0_CLK_MASK       (0x2U)
#define CLKCTL0_PSCCTL2_SET_WWDT0_CLK_SHIFT      (1U)
#define CLKCTL0_PSCCTL2_SET_PMC_MASK             (0x20000000U)
#define CLKCTL0_PSCCTL2_SET_PMC_SHIFT            (29U)
/*! @} */

/*! @name PSCCTL0_CLR - Clock Control 0 Clear */
/*! @{ */
#define CLKCTL0_PSCCTL0_CLR_DSP_CLK_MASK         (0x2U)
#define CLKCTL0_PSCCTL0_CLR_DSP_CLK_SHIFT        (1U)
#define CLKCTL0_PSCCTL0_CLR_ROM_CTRLR_CLK_MASK   (0x4U)
#define CLKCTL0_PSCCTL0_CLR_ROM_CTRLR_CLK_SHIFT  (2U)
#define CLKCTL0_PSCCTL0_CLR_AXI_SWITCH_CLK_MASK  (0x8U)
#define CLKCTL0_PSCCTL0_CLR_AXI_SWITCH_CLK_SHIFT (3U)
#define CLKCTL0_PSCCTL0_CLR_AXI_CTLR_CLK_MASK    (0x10U)
#define CLKCTL0_PSCCTL0_CLR_AXI_CTLR_CLK_SHIFT   (4U)
#define CLKCTL0_PSCCTL0_CLR_POWERQUAD_CLK_MASK   (0x100U)
#define CLKCTL0_PSCCTL0_CLR_POWERQUAD_CLK_SHIFT  (8U)
#define CLKCTL0_PSCCTL0_CLR_CASPER_CLK_MASK      (0x200U)
#define CLKCTL0_PSCCTL0_CLR_CASPER_CLK_SHIFT     (9U)
#define CLKCTL0_PSCCTL0_CLR_HASHCRYPT_CLK_MASK   (0x400U)
#define CLKCTL0_PSCCTL0_CLR_HASHCRYPT_CLK_SHIFT  (10U)
#define CLKCTL0_PSCCTL0_CLR_PUF_CLK_MASK         (0x800U)
#define CLKCTL0_PSCCTL0_CLR_PUF_CLK_SHIFT        (11U)
#define CLKCTL0_PSCCTL0_CLR_RNG_CLK_MASK         (0x1000U)
#define CLKCTL0_PSCCTL0_CLR_RNG_CLK_SHIFT        (12U)
#define CLKCTL0_PSCCTL0_CLR_FLEXSPI0_OTFAD_CLK_MASK (0x10000U)
#define CLKCTL0_PSCCTL0_CLR_FLEXSPI0_OTFAD_CLK_SHIFT (16U)
#define CLKCTL0_PSCCTL0_CLR_OTP_CTLR_CLK_MASK    (0x20000U)
#define CLKCTL0_PSCCTL0_CLR_OTP_CTLR_CLK_SHIFT   (17U)
#define CLKCTL0_PSCCTL0_CLR_FLEXSPI1_CLK_MASK    (0x40000U)
#define CLKCTL0_PSCCTL0_CLR_FLEXSPI1_CLK_SHIFT   (18U)
#define CLKCTL0_PSCCTL0_CLR_USBHS_PHY_CLK_MASK   (0x100000U)
#define CLKCTL0_PSCCTL0_CLR_USBHS_PHY_CLK_SHIFT  (20U)
#define CLKCTL0_PSCCTL0_CLR_USBHS_DEVICE_CLK_MASK (0x200000U)
#define CLKCTL0_PSCCTL0_CLR_USBHS_DEVICE_CLK_SHIFT (21U)
#define CLKCTL0_PSCCTL0_CLR_USBHS_HOST_CLK_MASK  (0x400000U)
#define CLKCTL0_PSCCTL0_CLR_USBHS_HOST_CLK_SHIFT (22U)
#define CLKCTL0_PSCCTL0_CLR_USBHS_SRAM_CLK_MASK  (0x800000U)
#define CLKCTL0_PSCCTL0_CLR_USBHS_SRAM_CLK_SHIFT (23U)
#define CLKCTL0_PSCCTL0_CLR_SCT_CLK_MASK         (0x1000000U)
#define CLKCTL0_PSCCTL0_CLR_SCT_CLK_SHIFT        (24U)
#define CLKCTL0_PSCCTL0_CLR_GPU_CLK_MASK         (0x4000000U)
#define CLKCTL0_PSCCTL0_CLR_GPU_CLK_SHIFT        (26U)
#define CLKCTL0_PSCCTL0_CLR_DISPLAY_CTLR_CLK_MASK (0x8000000U)
#define CLKCTL0_PSCCTL0_CLR_DISPLAY_CTLR_CLK_SHIFT (27U)
#define CLKCTL0_PSCCTL0_CLR_MIPI_DSI_CTLR_CLK_MASK (0x10000000U)
#define CLKCTL0_PSCCTL0_CLR_MIPI_DSI_CTLR_CLK_SHIFT (28U)
#define CLKCTL0_PSCCTL0_CLR_SMARTDMA_CLK_MASK    (0x40000000U)
#define CLKCTL0_PSCCTL0_CLR_SMARTDMA_CLK_SHIFT   (30U)
/*! @} */

/*! @name PSCCTL1_CLR - Clock Control 1 Clear */
/*! @{ */
#define CLKCTL0_PSCCTL1_CLR_SDIO0_CLK_MASK       (0x4U)
#define CLKCTL0_PSCCTL1_CLR_SDIO0_CLK_SHIFT      (2U)
#define CLKCTL0_PSCCTL1_CLR_SDIO1_CLK_MASK       (0x8U)
#define CLKCTL0_PSCCTL1_CLR_SDIO1_CLK_SHIFT      (3U)
#define CLKCTL0_PSCCTL1_CLR_ACMP0_CLK_MASK       (0x8000U)
#define CLKCTL0_PSCCTL1_CLR_ACMP0_CLK_SHIFT      (15U)
#define CLKCTL0_PSCCTL1_CLR_ADC0_CLK_MASK        (0x10000U)
#define CLKCTL0_PSCCTL1_CLR_ADC0_CLK_SHIFT       (16U)
#define CLKCTL0_PSCCTL1_CLR_SHSGPIO0_CLK_MASK    (0x1000000U)
#define CLKCTL0_PSCCTL1_CLR_SHSGPIO0_CLK_SHIFT   (24U)
/*! @} */

/*! @name PSCCTL2_CLR - Clock Control 2 Clear */
/*! @{ */
#define CLKCTL0_PSCCTL2_CLR_UTICK0_CLK_MASK      (0x1U)
#define CLKCTL0_PSCCTL2_CLR_UTICK0_CLK_SHIFT     (0U)
#define CLKCTL0_PSCCTL2_CLR_WWDT0_CLK_MASK       (0x2U)
#define CLKCTL0_PSCCTL2_CLR_WWDT0_CLK_SHIFT      (1U)
#define CLKCTL0_PSCCTL2_CLR_PMC_CLK_MASK         (0x20000000U)
#define CLKCTL0_PSCCTL2_CLR_PMC_CLK_SHIFT        (29U)
/*! @} */

/*! @name FRO_CONTROL - Free Running Oscillator Control */
/*! @{ */
#define CLKCTL0_FRO_CONTROL_EXP_COUNT_MASK       (0xFFFFU)
#define CLKCTL0_FRO_CONTROL_EXP_COUNT_SHIFT      (0U)
/*! EXP_COUNT - Expected Count
 */
#define CLKCTL0_FRO_CONTROL_EXP_COUNT(x)         (((uint32_t)(((uint32_t)(x)) << CLKCTL0_FRO_CONTROL_EXP_COUNT_SHIFT)) & CLKCTL0_FRO_CONTROL_EXP_COUNT_MASK)
#define CLKCTL0_FRO_CONTROL_THRESH_RANGE_UP_MASK (0x1F0000U)
#define CLKCTL0_FRO_CONTROL_THRESH_RANGE_UP_SHIFT (16U)
/*! THRESH_RANGE_UP - Threshold Range Upper Limit
 */
#define CLKCTL0_FRO_CONTROL_THRESH_RANGE_UP(x)   (((uint32_t)(((uint32_t)(x)) << CLKCTL0_FRO_CONTROL_THRESH_RANGE_UP_SHIFT)) & CLKCTL0_FRO_CONTROL_THRESH_RANGE_UP_MASK)
#define CLKCTL0_FRO_CONTROL_THRESH_RANGE_LOW_MASK (0x3E00000U)
#define CLKCTL0_FRO_CONTROL_THRESH_RANGE_LOW_SHIFT (21U)
/*! THRESH_RANGE_LOW - Threshold Range Lower Limit
 */
#define CLKCTL0_FRO_CONTROL_THRESH_RANGE_LOW(x)  (((uint32_t)(((uint32_t)(x)) << CLKCTL0_FRO_CONTROL_THRESH_RANGE_LOW_SHIFT)) & CLKCTL0_FRO_CONTROL_THRESH_RANGE_LOW_MASK)
#define CLKCTL0_FRO_CONTROL_ENA_TUNE_MASK        (0x80000000U)
#define CLKCTL0_FRO_CONTROL_ENA_TUNE_SHIFT       (31U)
/*! @} */

/*! @name FRO_CAPVAL - Free Running Oscillator Captured Value */
/*! @{ */
#define CLKCTL0_FRO_CAPVAL_CAPVAL_MASK           (0xFFFFU)
#define CLKCTL0_FRO_CAPVAL_CAPVAL_SHIFT          (0U)
/*! CAPVAL - Captured Value
 */
#define CLKCTL0_FRO_CAPVAL_CAPVAL(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL0_FRO_CAPVAL_CAPVAL_SHIFT)) & CLKCTL0_FRO_CAPVAL_CAPVAL_MASK)
#define CLKCTL0_FRO_CAPVAL_DATA_VALID_MASK       (0x80000000U)
#define CLKCTL0_FRO_CAPVAL_DATA_VALID_SHIFT      (31U)
/*! @} */

/*! @name FRO_RDTRIM - Free Running Oscillator Trim */
/*! @{ */
#define CLKCTL0_FRO_RDTRIM_TRIM_MASK             (0x7FFU)
#define CLKCTL0_FRO_RDTRIM_TRIM_SHIFT            (0U)
/*! TRIM - It is the trim value supplied to the oscillator
 */
#define CLKCTL0_FRO_RDTRIM_TRIM(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL0_FRO_RDTRIM_TRIM_SHIFT)) & CLKCTL0_FRO_RDTRIM_TRIM_MASK)
/*! @} */

/*! @name FRODIVSEL - FRO Clock Divider */
/*! @{ */
#define CLKCTL0_FRODIVSEL_SEL_MASK               (0x3U)
#define CLKCTL0_FRODIVSEL_SEL_SHIFT              (0U)
/*! SEL - Select clock
 *  0b00..FRO Clock Divided by 2
 *  0b01..FRO Clock Divided by 4
 *  0b10..FRO Clock Divided by 8
 *  0b11..FRO Clock Divided by 16
 */
#define CLKCTL0_FRODIVSEL_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << CLKCTL0_FRODIVSEL_SEL_SHIFT)) & CLKCTL0_FRODIVSEL_SEL_MASK)
/*! @} */

/*! @name FROCLKSTATUS - FRO Clock Status */
/*! @{ */
#define CLKCTL0_FROCLKSTATUS_CLK_OK_MASK         (0x1U)
#define CLKCTL0_FROCLKSTATUS_CLK_OK_SHIFT        (0U)
/*! @} */

/*! @name FRODIVOEN - FRO Enable Register */
/*! @{ */
#define CLKCTL0_FRODIVOEN_FRO_DIV1_O_EN_MASK     (0x1U)
#define CLKCTL0_FRODIVOEN_FRO_DIV1_O_EN_SHIFT    (0U)
#define CLKCTL0_FRODIVOEN_FRO_DIV2_O_EN_MASK     (0x2U)
#define CLKCTL0_FRODIVOEN_FRO_DIV2_O_EN_SHIFT    (1U)
#define CLKCTL0_FRODIVOEN_FRO_DIV4_O_EN_MASK     (0x4U)
#define CLKCTL0_FRODIVOEN_FRO_DIV4_O_EN_SHIFT    (2U)
#define CLKCTL0_FRODIVOEN_FRO_DIV8_O_EN_MASK     (0x8U)
#define CLKCTL0_FRODIVOEN_FRO_DIV8_O_EN_SHIFT    (3U)
#define CLKCTL0_FRODIVOEN_FRO_DIV16_O_EN_MASK    (0x10U)
#define CLKCTL0_FRODIVOEN_FRO_DIV16_O_EN_SHIFT   (4U)
/*! @} */

/*! @name LOWFREQCLKDIV - Low Frequency Clock Divider */
/*! @{ */
#define CLKCTL0_LOWFREQCLKDIV_DIV_MASK           (0xFFU)
#define CLKCTL0_LOWFREQCLKDIV_DIV_SHIFT          (0U)
/*! DIV - Low Frequency Clock Divider Value
 */
#define CLKCTL0_LOWFREQCLKDIV_DIV(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL0_LOWFREQCLKDIV_DIV_SHIFT)) & CLKCTL0_LOWFREQCLKDIV_DIV_MASK)
#define CLKCTL0_LOWFREQCLKDIV_RESET_MASK         (0x20000000U)
#define CLKCTL0_LOWFREQCLKDIV_RESET_SHIFT        (29U)
#define CLKCTL0_LOWFREQCLKDIV_HALT_MASK          (0x40000000U)
#define CLKCTL0_LOWFREQCLKDIV_HALT_SHIFT         (30U)
#define CLKCTL0_LOWFREQCLKDIV_REQFLAG_MASK       (0x80000000U)
#define CLKCTL0_LOWFREQCLKDIV_REQFLAG_SHIFT      (31U)
/*! @} */

/*! @name SYSOSCCTL0 - System Oscillator Control 0 */
/*! @{ */
#define CLKCTL0_SYSOSCCTL0_LP_ENABLE_MASK        (0x1U)
#define CLKCTL0_SYSOSCCTL0_LP_ENABLE_SHIFT       (0U)
#define CLKCTL0_SYSOSCCTL0_BYPASS_ENABLE_MASK    (0x2U)
#define CLKCTL0_SYSOSCCTL0_BYPASS_ENABLE_SHIFT   (1U)
/*! @} */

/*! @name SYSOSCBYPASS - OSC Clock Source Select */
/*! @{ */
#define CLKCTL0_SYSOSCBYPASS_SEL_MASK            (0x7U)
#define CLKCTL0_SYSOSCBYPASS_SEL_SHIFT           (0U)
/*! SEL - Select SYSOSC Bypass
 *  0b000..Select OSC Clock
 *  0b001..Select Clock IN clock
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed
 */
#define CLKCTL0_SYSOSCBYPASS_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSOSCBYPASS_SEL_SHIFT)) & CLKCTL0_SYSOSCBYPASS_SEL_MASK)
/*! @} */

/*! @name LPOSCCTL0 - Low Power Oscillator Control 0 */
/*! @{ */
#define CLKCTL0_LPOSCCTL0_CLKRDY_MASK            (0x80000000U)
#define CLKCTL0_LPOSCCTL0_CLKRDY_SHIFT           (31U)
/*! @} */

/*! @name OSC32KHZCTL0 - 32 KHz Oscillator Control 0 */
/*! @{ */
#define CLKCTL0_OSC32KHZCTL0_ENA32KHZ_MASK       (0x1U)
#define CLKCTL0_OSC32KHZCTL0_ENA32KHZ_SHIFT      (0U)
/*! @} */

/*! @name SYSPLL0CLKSEL - System PLL 0 Clock Select */
/*! @{ */
#define CLKCTL0_SYSPLL0CLKSEL_SEL_MASK           (0x7U)
#define CLKCTL0_SYSPLL0CLKSEL_SEL_SHIFT          (0U)
/*! SEL - System PLL0 Reference Input Clock Source
 *  0b000..FRO Clock (Divided-by-8 selection)
 *  0b001..OSC_CLK clock
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL0_SYSPLL0CLKSEL_SEL(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSPLL0CLKSEL_SEL_SHIFT)) & CLKCTL0_SYSPLL0CLKSEL_SEL_MASK)
/*! @} */

/*! @name SYSPLL0CTL0 - System PLL0 Control 0 */
/*! @{ */
#define CLKCTL0_SYSPLL0CTL0_BYPASS_MASK          (0x1U)
#define CLKCTL0_SYSPLL0CTL0_BYPASS_SHIFT         (0U)
#define CLKCTL0_SYSPLL0CTL0_RESET_MASK           (0x2U)
#define CLKCTL0_SYSPLL0CTL0_RESET_SHIFT          (1U)
#define CLKCTL0_SYSPLL0CTL0_HOLDRINGOFF_ENA_MASK (0x2000U)
#define CLKCTL0_SYSPLL0CTL0_HOLDRINGOFF_ENA_SHIFT (13U)
#define CLKCTL0_SYSPLL0CTL0_MULT_MASK            (0xFF0000U)
#define CLKCTL0_SYSPLL0CTL0_MULT_SHIFT           (16U)
/*! MULT - Multiplication Factor
 *  0b00010000..Divide by 16
 *  0b00010001..Divide by 17
 *  0b00010010..Divide by 18
 *  0b00010011..Divide by 19
 *  0b00010100..Divide by 20
 *  0b00010101..Divide by 21
 *  0b00010110..Divide by 22
 */
#define CLKCTL0_SYSPLL0CTL0_MULT(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSPLL0CTL0_MULT_SHIFT)) & CLKCTL0_SYSPLL0CTL0_MULT_MASK)
/*! @} */

/*! @name SYSPLL0LOCKTIMEDIV2 - System PLL0 Lock Time Div2 */
/*! @{ */
#define CLKCTL0_SYSPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_MASK (0xFFFFU)
#define CLKCTL0_SYSPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_SHIFT (0U)
/*! LOCKTIMEDIV2 - SYSPLL0 Lock Time Divide-by-2
 */
#define CLKCTL0_SYSPLL0LOCKTIMEDIV2_LOCKTIMEDIV2(x) (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_SHIFT)) & CLKCTL0_SYSPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_MASK)
/*! @} */

/*! @name SYSPLL0NUM - System PLL0 Numerator */
/*! @{ */
#define CLKCTL0_SYSPLL0NUM_NUM_MASK              (0x3FFFFFFFU)
#define CLKCTL0_SYSPLL0NUM_NUM_SHIFT             (0U)
/*! NUM - Numerator of the SYSPLL0 fractional loop divider
 */
#define CLKCTL0_SYSPLL0NUM_NUM(x)                (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSPLL0NUM_NUM_SHIFT)) & CLKCTL0_SYSPLL0NUM_NUM_MASK)
/*! @} */

/*! @name SYSPLL0DENOM - System PLL0 Denominator */
/*! @{ */
#define CLKCTL0_SYSPLL0DENOM_DENOM_MASK          (0x3FFFFFFFU)
#define CLKCTL0_SYSPLL0DENOM_DENOM_SHIFT         (0U)
/*! DENOM - Denominator of the SYSPLL0 fractional loop divider
 */
#define CLKCTL0_SYSPLL0DENOM_DENOM(x)            (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSPLL0DENOM_DENOM_SHIFT)) & CLKCTL0_SYSPLL0DENOM_DENOM_MASK)
/*! @} */

/*! @name SYSPLL0PFD - System PLL0 PFD */
/*! @{ */
#define CLKCTL0_SYSPLL0PFD_PFD0_MASK             (0x3FU)
#define CLKCTL0_SYSPLL0PFD_PFD0_SHIFT            (0U)
/*! PFD0 - PLL Fractional Divider 0
 */
#define CLKCTL0_SYSPLL0PFD_PFD0(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSPLL0PFD_PFD0_SHIFT)) & CLKCTL0_SYSPLL0PFD_PFD0_MASK)
#define CLKCTL0_SYSPLL0PFD_PFD0_CLKRDY_MASK      (0x40U)
#define CLKCTL0_SYSPLL0PFD_PFD0_CLKRDY_SHIFT     (6U)
#define CLKCTL0_SYSPLL0PFD_PFD0_CLKGATE_MASK     (0x80U)
#define CLKCTL0_SYSPLL0PFD_PFD0_CLKGATE_SHIFT    (7U)
#define CLKCTL0_SYSPLL0PFD_PFD1_MASK             (0x3F00U)
#define CLKCTL0_SYSPLL0PFD_PFD1_SHIFT            (8U)
/*! PFD1 - PLL Fractional Divider 1
 */
#define CLKCTL0_SYSPLL0PFD_PFD1(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSPLL0PFD_PFD1_SHIFT)) & CLKCTL0_SYSPLL0PFD_PFD1_MASK)
#define CLKCTL0_SYSPLL0PFD_PFD1_CLKRDY_MASK      (0x4000U)
#define CLKCTL0_SYSPLL0PFD_PFD1_CLKRDY_SHIFT     (14U)
#define CLKCTL0_SYSPLL0PFD_PFD1_CLKGATE_MASK     (0x8000U)
#define CLKCTL0_SYSPLL0PFD_PFD1_CLKGATE_SHIFT    (15U)
#define CLKCTL0_SYSPLL0PFD_PFD2_MASK             (0x3F0000U)
#define CLKCTL0_SYSPLL0PFD_PFD2_SHIFT            (16U)
/*! PFD2 - PLL Fractional Divider 2
 */
#define CLKCTL0_SYSPLL0PFD_PFD2(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSPLL0PFD_PFD2_SHIFT)) & CLKCTL0_SYSPLL0PFD_PFD2_MASK)
#define CLKCTL0_SYSPLL0PFD_PFD2_CLKRDY_MASK      (0x400000U)
#define CLKCTL0_SYSPLL0PFD_PFD2_CLKRDY_SHIFT     (22U)
#define CLKCTL0_SYSPLL0PFD_PFD2_CLKGATE_MASK     (0x800000U)
#define CLKCTL0_SYSPLL0PFD_PFD2_CLKGATE_SHIFT    (23U)
#define CLKCTL0_SYSPLL0PFD_PFD3_MASK             (0x3F000000U)
#define CLKCTL0_SYSPLL0PFD_PFD3_SHIFT            (24U)
/*! PFD3 - PLL Fractional Divider 3
 */
#define CLKCTL0_SYSPLL0PFD_PFD3(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSPLL0PFD_PFD3_SHIFT)) & CLKCTL0_SYSPLL0PFD_PFD3_MASK)
#define CLKCTL0_SYSPLL0PFD_PFD3_CLKRDY_MASK      (0x40000000U)
#define CLKCTL0_SYSPLL0PFD_PFD3_CLKRDY_SHIFT     (30U)
#define CLKCTL0_SYSPLL0PFD_PFD3_CLKGATE_MASK     (0x80000000U)
#define CLKCTL0_SYSPLL0PFD_PFD3_CLKGATE_SHIFT    (31U)
/*! @} */

/*! @name MAINPLLCLKDIV - Main PLL Clock Divider */
/*! @{ */
#define CLKCTL0_MAINPLLCLKDIV_DIV_MASK           (0xFFU)
#define CLKCTL0_MAINPLLCLKDIV_DIV_SHIFT          (0U)
/*! DIV - Low Frequency Clock Divider Value
 */
#define CLKCTL0_MAINPLLCLKDIV_DIV(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL0_MAINPLLCLKDIV_DIV_SHIFT)) & CLKCTL0_MAINPLLCLKDIV_DIV_MASK)
#define CLKCTL0_MAINPLLCLKDIV_RESET_MASK         (0x20000000U)
#define CLKCTL0_MAINPLLCLKDIV_RESET_SHIFT        (29U)
#define CLKCTL0_MAINPLLCLKDIV_HALT_MASK          (0x40000000U)
#define CLKCTL0_MAINPLLCLKDIV_HALT_SHIFT         (30U)
#define CLKCTL0_MAINPLLCLKDIV_REQFLAG_MASK       (0x80000000U)
#define CLKCTL0_MAINPLLCLKDIV_REQFLAG_SHIFT      (31U)
/*! @} */

/*! @name DSPPLLCLKDIV - DSP PLL Clock Divider */
/*! @{ */
#define CLKCTL0_DSPPLLCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL0_DSPPLLCLKDIV_DIV_SHIFT           (0U)
/*! DIV - Low Frequency Clock Divider Value
 */
#define CLKCTL0_DSPPLLCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_DSPPLLCLKDIV_DIV_SHIFT)) & CLKCTL0_DSPPLLCLKDIV_DIV_MASK)
#define CLKCTL0_DSPPLLCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL0_DSPPLLCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL0_DSPPLLCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL0_DSPPLLCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL0_DSPPLLCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL0_DSPPLLCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name AUX0PLLCLKDIV - AUX0 PLL Clock Divider */
/*! @{ */
#define CLKCTL0_AUX0PLLCLKDIV_DIV_MASK           (0xFFU)
#define CLKCTL0_AUX0PLLCLKDIV_DIV_SHIFT          (0U)
/*! DIV - Low Frequency Clock Divider Value
 */
#define CLKCTL0_AUX0PLLCLKDIV_DIV(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL0_AUX0PLLCLKDIV_DIV_SHIFT)) & CLKCTL0_AUX0PLLCLKDIV_DIV_MASK)
#define CLKCTL0_AUX0PLLCLKDIV_RESET_MASK         (0x20000000U)
#define CLKCTL0_AUX0PLLCLKDIV_RESET_SHIFT        (29U)
#define CLKCTL0_AUX0PLLCLKDIV_HALT_MASK          (0x40000000U)
#define CLKCTL0_AUX0PLLCLKDIV_HALT_SHIFT         (30U)
#define CLKCTL0_AUX0PLLCLKDIV_REQFLAG_MASK       (0x80000000U)
#define CLKCTL0_AUX0PLLCLKDIV_REQFLAG_SHIFT      (31U)
/*! @} */

/*! @name AUX1PLLCLKDIV - AUX1 PLL Clock Divider */
/*! @{ */
#define CLKCTL0_AUX1PLLCLKDIV_DIV_MASK           (0xFFU)
#define CLKCTL0_AUX1PLLCLKDIV_DIV_SHIFT          (0U)
/*! DIV - Low Frequency Clock Divider Value
 */
#define CLKCTL0_AUX1PLLCLKDIV_DIV(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL0_AUX1PLLCLKDIV_DIV_SHIFT)) & CLKCTL0_AUX1PLLCLKDIV_DIV_MASK)
#define CLKCTL0_AUX1PLLCLKDIV_RESET_MASK         (0x20000000U)
#define CLKCTL0_AUX1PLLCLKDIV_RESET_SHIFT        (29U)
#define CLKCTL0_AUX1PLLCLKDIV_HALT_MASK          (0x40000000U)
#define CLKCTL0_AUX1PLLCLKDIV_HALT_SHIFT         (30U)
#define CLKCTL0_AUX1PLLCLKDIV_REQFLAG_MASK       (0x80000000U)
#define CLKCTL0_AUX1PLLCLKDIV_REQFLAG_SHIFT      (31U)
/*! @} */

/*! @name SYSCPUAHBCLKDIV - System CPU AHB Clock Divider */
/*! @{ */
#define CLKCTL0_SYSCPUAHBCLKDIV_DIV_MASK         (0xFFU)
#define CLKCTL0_SYSCPUAHBCLKDIV_DIV_SHIFT        (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_SYSCPUAHBCLKDIV_DIV(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSCPUAHBCLKDIV_DIV_SHIFT)) & CLKCTL0_SYSCPUAHBCLKDIV_DIV_MASK)
#define CLKCTL0_SYSCPUAHBCLKDIV_REQFLAG_MASK     (0x80000000U)
#define CLKCTL0_SYSCPUAHBCLKDIV_REQFLAG_SHIFT    (31U)
/*! @} */

/*! @name MAINCLKSELA - Main Clock Select A */
/*! @{ */
#define CLKCTL0_MAINCLKSELA_SEL_MASK             (0x3U)
#define CLKCTL0_MAINCLKSELA_SEL_SHIFT            (0U)
/*! SEL - Control Main 1st Stage Control Clock Source
 *  0b00..Low Power Oscillator Clock (LPOSC)
 *  0b01..FRODIV which is the output of the FRODIVSEL mux
 *  0b10..OSC_CLK clock
 *  0b11..FRO clock
 */
#define CLKCTL0_MAINCLKSELA_SEL(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL0_MAINCLKSELA_SEL_SHIFT)) & CLKCTL0_MAINCLKSELA_SEL_MASK)
/*! @} */

/*! @name MAINCLKSELB - Main Clock Select B */
/*! @{ */
#define CLKCTL0_MAINCLKSELB_SEL_MASK             (0x3U)
#define CLKCTL0_MAINCLKSELB_SEL_SHIFT            (0U)
/*! SEL - Main Clock Source Selection
 *  0b00..MAINCLKSELA 1st Stage Clock
 *  0b01..Main System PLL Clock
 *  0b10..RTC 32 KHz Clock
 *  0b11..Reserved
 */
#define CLKCTL0_MAINCLKSELB_SEL(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL0_MAINCLKSELB_SEL_SHIFT)) & CLKCTL0_MAINCLKSELB_SEL_MASK)
/*! @} */

/*! @name PFCDIV - PFC divider 0 (trace clock)..PFC divider 1 (USB HS PHY bus clock) */
/*! @{ */
#define CLKCTL0_PFCDIV_DIV_MASK                  (0xFFU)
#define CLKCTL0_PFCDIV_DIV_SHIFT                 (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_PFCDIV_DIV(x)                    (((uint32_t)(((uint32_t)(x)) << CLKCTL0_PFCDIV_DIV_SHIFT)) & CLKCTL0_PFCDIV_DIV_MASK)
#define CLKCTL0_PFCDIV_RESET_MASK                (0x20000000U)
#define CLKCTL0_PFCDIV_RESET_SHIFT               (29U)
#define CLKCTL0_PFCDIV_HALT_MASK                 (0x40000000U)
#define CLKCTL0_PFCDIV_HALT_SHIFT                (30U)
#define CLKCTL0_PFCDIV_REQFLAG_MASK              (0x80000000U)
#define CLKCTL0_PFCDIV_REQFLAG_SHIFT             (31U)
/*! @} */

/* The count of CLKCTL0_PFCDIV */
#define CLKCTL0_PFCDIV_COUNT                     (2U)

/*! @name FLEXSPI0FCLKSEL - FlexSPI0 Functional Clock Select */
/*! @{ */
#define CLKCTL0_FLEXSPI0FCLKSEL_SEL_MASK         (0x7U)
#define CLKCTL0_FLEXSPI0FCLKSEL_SEL_SHIFT        (0U)
/*! SEL - Select Clock Source
 *  0b000..Main Clock
 *  0b001..Main System PLL Clock
 *  0b010..SYSPLL0 AUX0_PLL_Clock
 *  0b011..FRO_192M Clock
 *  0b100..SYSPLL0 AUX1_PLL_Clock
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_FLEXSPI0FCLKSEL_SEL(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL0_FLEXSPI0FCLKSEL_SEL_SHIFT)) & CLKCTL0_FLEXSPI0FCLKSEL_SEL_MASK)
/*! @} */

/*! @name FLEXSPI0FCLKDIV - FlexSPI0 Functional Clock Divider */
/*! @{ */
#define CLKCTL0_FLEXSPI0FCLKDIV_DIV_MASK         (0xFFU)
#define CLKCTL0_FLEXSPI0FCLKDIV_DIV_SHIFT        (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_FLEXSPI0FCLKDIV_DIV(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL0_FLEXSPI0FCLKDIV_DIV_SHIFT)) & CLKCTL0_FLEXSPI0FCLKDIV_DIV_MASK)
#define CLKCTL0_FLEXSPI0FCLKDIV_RESET_MASK       (0x20000000U)
#define CLKCTL0_FLEXSPI0FCLKDIV_RESET_SHIFT      (29U)
#define CLKCTL0_FLEXSPI0FCLKDIV_HALT_MASK        (0x40000000U)
#define CLKCTL0_FLEXSPI0FCLKDIV_HALT_SHIFT       (30U)
#define CLKCTL0_FLEXSPI0FCLKDIV_REQFLAG_MASK     (0x80000000U)
#define CLKCTL0_FLEXSPI0FCLKDIV_REQFLAG_SHIFT    (31U)
/*! @} */

/*! @name FLEXSPI1FCLKSEL - FlexSPI1 Functional Clock Select */
/*! @{ */
#define CLKCTL0_FLEXSPI1FCLKSEL_SEL_MASK         (0x7U)
#define CLKCTL0_FLEXSPI1FCLKSEL_SEL_SHIFT        (0U)
/*! SEL - Select Clock Source
 *  0b000..Main Clock
 *  0b001..Main System PLL Clock
 *  0b010..SYSPLL0 AUX0_PLL_Clock
 *  0b011..FRO_192M Clock
 *  0b100..SYSPLL0 AUX1_PLL_Clock
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_FLEXSPI1FCLKSEL_SEL(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL0_FLEXSPI1FCLKSEL_SEL_SHIFT)) & CLKCTL0_FLEXSPI1FCLKSEL_SEL_MASK)
/*! @} */

/*! @name FLEXSPI1FCLKDIV - FlexSPI1 Functional Clock Divider */
/*! @{ */
#define CLKCTL0_FLEXSPI1FCLKDIV_DIV_MASK         (0xFFU)
#define CLKCTL0_FLEXSPI1FCLKDIV_DIV_SHIFT        (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_FLEXSPI1FCLKDIV_DIV(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL0_FLEXSPI1FCLKDIV_DIV_SHIFT)) & CLKCTL0_FLEXSPI1FCLKDIV_DIV_MASK)
#define CLKCTL0_FLEXSPI1FCLKDIV_RESET_MASK       (0x20000000U)
#define CLKCTL0_FLEXSPI1FCLKDIV_RESET_SHIFT      (29U)
#define CLKCTL0_FLEXSPI1FCLKDIV_HALT_MASK        (0x40000000U)
#define CLKCTL0_FLEXSPI1FCLKDIV_HALT_SHIFT       (30U)
#define CLKCTL0_FLEXSPI1FCLKDIV_REQFLAG_MASK     (0x80000000U)
#define CLKCTL0_FLEXSPI1FCLKDIV_REQFLAG_SHIFT    (31U)
/*! @} */

/*! @name SCTFCLKSEL - SCT Functional Clock Select */
/*! @{ */
#define CLKCTL0_SCTFCLKSEL_SEL_MASK              (0x7U)
#define CLKCTL0_SCTFCLKSEL_SEL_SHIFT             (0U)
/*! SEL - Select Clock Source
 *  0b000..Main Clock
 *  0b001..Main System PLL Clock
 *  0b010..SYSPLL0 AUX0_PLL_Clock
 *  0b011..FRO Clock
 *  0b100..SYSPLL0 AUX1_PLL_Clock
 *  0b101..AUDIO PLL Clock
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_SCTFCLKSEL_SEL(x)                (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SCTFCLKSEL_SEL_SHIFT)) & CLKCTL0_SCTFCLKSEL_SEL_MASK)
/*! @} */

/*! @name SCTIN7CLKDIV - SCT Functional Clock Divider */
/*! @{ */
#define CLKCTL0_SCTIN7CLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL0_SCTIN7CLKDIV_DIV_SHIFT           (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_SCTIN7CLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SCTIN7CLKDIV_DIV_SHIFT)) & CLKCTL0_SCTIN7CLKDIV_DIV_MASK)
#define CLKCTL0_SCTIN7CLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL0_SCTIN7CLKDIV_RESET_SHIFT         (29U)
#define CLKCTL0_SCTIN7CLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL0_SCTIN7CLKDIV_HALT_SHIFT          (30U)
#define CLKCTL0_SCTIN7CLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL0_SCTIN7CLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name USBHSFCLKSEL - High Speed USB Functional Clock Select */
/*! @{ */
#define CLKCTL0_USBHSFCLKSEL_SEL_MASK            (0x7U)
#define CLKCTL0_USBHSFCLKSEL_SEL_SHIFT           (0U)
/*! SEL - Select Clock Source
 *  0b000..OSC_CLK Clock
 *  0b001..Main Clock
 *  0b010..Reserved
 *  0b011..AUX0_PLL_CLOCK
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_USBHSFCLKSEL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_USBHSFCLKSEL_SEL_SHIFT)) & CLKCTL0_USBHSFCLKSEL_SEL_MASK)
/*! @} */

/*! @name USBHSFCLKDIV - High Speed USB Functional Clock Divider */
/*! @{ */
#define CLKCTL0_USBHSFCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL0_USBHSFCLKDIV_DIV_SHIFT           (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_USBHSFCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_USBHSFCLKDIV_DIV_SHIFT)) & CLKCTL0_USBHSFCLKDIV_DIV_MASK)
#define CLKCTL0_USBHSFCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL0_USBHSFCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL0_USBHSFCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL0_USBHSFCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL0_USBHSFCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL0_USBHSFCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name SDIO0FCLKSEL - SDIO0 Functional Clock Select */
/*! @{ */
#define CLKCTL0_SDIO0FCLKSEL_SEL_MASK            (0x7U)
#define CLKCTL0_SDIO0FCLKSEL_SEL_SHIFT           (0U)
/*! SEL - Select Clock Source
 *  0b000..Main Clock
 *  0b001..System PLL Clock
 *  0b010..SYSPLL0 AUX0_PLL_Clock
 *  0b011..FRO Clock Divided by 2
 *  0b100..SYSPLL0 AUX1_PLL_Clock
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_SDIO0FCLKSEL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SDIO0FCLKSEL_SEL_SHIFT)) & CLKCTL0_SDIO0FCLKSEL_SEL_MASK)
/*! @} */

/*! @name SDIO0FCLKDIV - SDIO0 Functional Clock Divider */
/*! @{ */
#define CLKCTL0_SDIO0FCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL0_SDIO0FCLKDIV_DIV_SHIFT           (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_SDIO0FCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SDIO0FCLKDIV_DIV_SHIFT)) & CLKCTL0_SDIO0FCLKDIV_DIV_MASK)
#define CLKCTL0_SDIO0FCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL0_SDIO0FCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL0_SDIO0FCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL0_SDIO0FCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL0_SDIO0FCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL0_SDIO0FCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name SDIO1FCLKSEL - SDIO1 Functional Clock Select */
/*! @{ */
#define CLKCTL0_SDIO1FCLKSEL_SEL_MASK            (0x7U)
#define CLKCTL0_SDIO1FCLKSEL_SEL_SHIFT           (0U)
/*! SEL - Select Clock Source
 *  0b000..Main Clock
 *  0b001..Main System PLL Clock
 *  0b010..SYSPLL0 AUX0_PLL_Clock
 *  0b011..FRO Clock Divided by 2
 *  0b100..SYSPLL0 AUX1_PLL_Clock
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_SDIO1FCLKSEL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SDIO1FCLKSEL_SEL_SHIFT)) & CLKCTL0_SDIO1FCLKSEL_SEL_MASK)
/*! @} */

/*! @name SDIO1FCLKDIV - SDIO1 Functional Clock Divider */
/*! @{ */
#define CLKCTL0_SDIO1FCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL0_SDIO1FCLKDIV_DIV_SHIFT           (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_SDIO1FCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SDIO1FCLKDIV_DIV_SHIFT)) & CLKCTL0_SDIO1FCLKDIV_DIV_MASK)
#define CLKCTL0_SDIO1FCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL0_SDIO1FCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL0_SDIO1FCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL0_SDIO1FCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL0_SDIO1FCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL0_SDIO1FCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name ADC0FCLKSEL0 - ADC0 Functional Clock Select 0 */
/*! @{ */
#define CLKCTL0_ADC0FCLKSEL0_SEL_MASK            (0x7U)
#define CLKCTL0_ADC0FCLKSEL0_SEL_SHIFT           (0U)
/*! SEL - Select Clock Source
 *  0b000..OSC_CLK Clock
 *  0b001..Low Power Oscillator Clock (LPOSC)
 *  0b010..FRO Clock Divided by 4
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_ADC0FCLKSEL0_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_ADC0FCLKSEL0_SEL_SHIFT)) & CLKCTL0_ADC0FCLKSEL0_SEL_MASK)
/*! @} */

/*! @name ADC0FCLKSEL1 - ADC0 Functional Clock Select 1 */
/*! @{ */
#define CLKCTL0_ADC0FCLKSEL1_SEL_MASK            (0x7U)
#define CLKCTL0_ADC0FCLKSEL1_SEL_SHIFT           (0U)
/*! SEL - Select Clock Source
 *  0b000..ADC0FCLKSEL0 Multiplexed Output
 *  0b001..SYSPLL0 MAIN_CLK (PFD0 Output)
 *  0b010..SYSPLL0 AUX0_PLL_Clock
 *  0b011..SYSPLL0 AUX1_PLL_Clock
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_ADC0FCLKSEL1_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_ADC0FCLKSEL1_SEL_SHIFT)) & CLKCTL0_ADC0FCLKSEL1_SEL_MASK)
/*! @} */

/*! @name ADC0FCLKDIV - ADC0 Functional Clock Divider */
/*! @{ */
#define CLKCTL0_ADC0FCLKDIV_DIV_MASK             (0xFFU)
#define CLKCTL0_ADC0FCLKDIV_DIV_SHIFT            (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_ADC0FCLKDIV_DIV(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL0_ADC0FCLKDIV_DIV_SHIFT)) & CLKCTL0_ADC0FCLKDIV_DIV_MASK)
#define CLKCTL0_ADC0FCLKDIV_RESET_MASK           (0x20000000U)
#define CLKCTL0_ADC0FCLKDIV_RESET_SHIFT          (29U)
#define CLKCTL0_ADC0FCLKDIV_HALT_MASK            (0x40000000U)
#define CLKCTL0_ADC0FCLKDIV_HALT_SHIFT           (30U)
#define CLKCTL0_ADC0FCLKDIV_REQFLAG_MASK         (0x80000000U)
#define CLKCTL0_ADC0FCLKDIV_REQFLAG_SHIFT        (31U)
/*! @} */

/*! @name UTICKFCLKSEL - UTICK Functional Clock Select */
/*! @{ */
#define CLKCTL0_UTICKFCLKSEL_SEL_MASK            (0x7U)
#define CLKCTL0_UTICKFCLKSEL_SEL_SHIFT           (0U)
/*! SEL - Select Clock Source
 *  0b000..Low Power Oscillator Clock (LPOSC)
 *  0b001..Reserved
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_UTICKFCLKSEL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL0_UTICKFCLKSEL_SEL_SHIFT)) & CLKCTL0_UTICKFCLKSEL_SEL_MASK)
/*! @} */

/*! @name WDT0FCLKSEL - WDT0 Functional Clock Select */
/*! @{ */
#define CLKCTL0_WDT0FCLKSEL_SEL_MASK             (0x7U)
#define CLKCTL0_WDT0FCLKSEL_SEL_SHIFT            (0U)
/*! SEL - Select Clock Source
 *  0b000..Low Power Oscillator Clock (LPOSC)
 *  0b001..Reserved
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_WDT0FCLKSEL_SEL(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL0_WDT0FCLKSEL_SEL_SHIFT)) & CLKCTL0_WDT0FCLKSEL_SEL_MASK)
/*! @} */

/*! @name A32KHZWAKECLKSEL - 32 KHz Wake Clock Source Select */
/*! @{ */
#define CLKCTL0_A32KHZWAKECLKSEL_SEL_MASK        (0x7U)
#define CLKCTL0_A32KHZWAKECLKSEL_SEL_SHIFT       (0U)
/*! SEL - Select Clock Source
 *  0b000..32 KHz
 *  0b001..Low Power Oscillator Clock (LPOSC); divided by 32 by default
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_A32KHZWAKECLKSEL_SEL(x)          (((uint32_t)(((uint32_t)(x)) << CLKCTL0_A32KHZWAKECLKSEL_SEL_SHIFT)) & CLKCTL0_A32KHZWAKECLKSEL_SEL_MASK)
/*! @} */

/*! @name A32KHZWAKECLKDIV - 32 KHz Wake Clock Divider */
/*! @{ */
#define CLKCTL0_A32KHZWAKECLKDIV_DIV_MASK        (0xFFU)
#define CLKCTL0_A32KHZWAKECLKDIV_DIV_SHIFT       (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_A32KHZWAKECLKDIV_DIV(x)          (((uint32_t)(((uint32_t)(x)) << CLKCTL0_A32KHZWAKECLKDIV_DIV_SHIFT)) & CLKCTL0_A32KHZWAKECLKDIV_DIV_MASK)
#define CLKCTL0_A32KHZWAKECLKDIV_RESET_MASK      (0x20000000U)
#define CLKCTL0_A32KHZWAKECLKDIV_RESET_SHIFT     (29U)
#define CLKCTL0_A32KHZWAKECLKDIV_HALT_MASK       (0x40000000U)
#define CLKCTL0_A32KHZWAKECLKDIV_HALT_SHIFT      (30U)
#define CLKCTL0_A32KHZWAKECLKDIV_REQFLAG_MASK    (0x80000000U)
#define CLKCTL0_A32KHZWAKECLKDIV_REQFLAG_SHIFT   (31U)
/*! @} */

/*! @name SYSTICKFCLKSEL - SYSTICK Functional Clock Select */
/*! @{ */
#define CLKCTL0_SYSTICKFCLKSEL_SEL_MASK          (0x7U)
#define CLKCTL0_SYSTICKFCLKSEL_SEL_SHIFT         (0U)
/*! SEL - Select Clock Source
 *  0b000..Systick Divider Output Clock
 *  0b001..Low Power Oscillator Clock (LPOSC)
 *  0b010..32 KHz RTC Clock
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_SYSTICKFCLKSEL_SEL(x)            (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSTICKFCLKSEL_SEL_SHIFT)) & CLKCTL0_SYSTICKFCLKSEL_SEL_MASK)
/*! @} */

/*! @name SYSTICKFCLKDIV - SYSTICK Functional Clock Divider */
/*! @{ */
#define CLKCTL0_SYSTICKFCLKDIV_DIV_MASK          (0xFFU)
#define CLKCTL0_SYSTICKFCLKDIV_DIV_SHIFT         (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_SYSTICKFCLKDIV_DIV(x)            (((uint32_t)(((uint32_t)(x)) << CLKCTL0_SYSTICKFCLKDIV_DIV_SHIFT)) & CLKCTL0_SYSTICKFCLKDIV_DIV_MASK)
#define CLKCTL0_SYSTICKFCLKDIV_RESET_MASK        (0x20000000U)
#define CLKCTL0_SYSTICKFCLKDIV_RESET_SHIFT       (29U)
#define CLKCTL0_SYSTICKFCLKDIV_HALT_MASK         (0x40000000U)
#define CLKCTL0_SYSTICKFCLKDIV_HALT_SHIFT        (30U)
#define CLKCTL0_SYSTICKFCLKDIV_REQFLAG_MASK      (0x80000000U)
#define CLKCTL0_SYSTICKFCLKDIV_REQFLAG_SHIFT     (31U)
/*! @} */

/*! @name DPHYCLKSEL - MIPI-DSI PHY Clock Select */
/*! @{ */
#define CLKCTL0_DPHYCLKSEL_SEL_MASK              (0x7U)
#define CLKCTL0_DPHYCLKSEL_SEL_SHIFT             (0U)
/*! SEL - Select Clock Source
 *  0b000..FRO Clock (Div1 192 MHz)
 *  0b001..SYSPLL0 MAIN_CLK (PFD0 Output)
 *  0b010..SYSPLL0 AUX0_PLL_Clock
 *  0b011..SYSPLL0 AUX1_PLL_Clock
 *  0b100..MIPI PHY Test Clock (from LVDS pads)
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_DPHYCLKSEL_SEL(x)                (((uint32_t)(((uint32_t)(x)) << CLKCTL0_DPHYCLKSEL_SEL_SHIFT)) & CLKCTL0_DPHYCLKSEL_SEL_MASK)
/*! @} */

/*! @name DPHYCLKDIV - MIPI-DSI PHY Clock Divider */
/*! @{ */
#define CLKCTL0_DPHYCLKDIV_DIV_MASK              (0xFFU)
#define CLKCTL0_DPHYCLKDIV_DIV_SHIFT             (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_DPHYCLKDIV_DIV(x)                (((uint32_t)(((uint32_t)(x)) << CLKCTL0_DPHYCLKDIV_DIV_SHIFT)) & CLKCTL0_DPHYCLKDIV_DIV_MASK)
#define CLKCTL0_DPHYCLKDIV_RESET_MASK            (0x20000000U)
#define CLKCTL0_DPHYCLKDIV_RESET_SHIFT           (29U)
#define CLKCTL0_DPHYCLKDIV_HALT_MASK             (0x40000000U)
#define CLKCTL0_DPHYCLKDIV_HALT_SHIFT            (30U)
#define CLKCTL0_DPHYCLKDIV_REQFLAG_MASK          (0x80000000U)
#define CLKCTL0_DPHYCLKDIV_REQFLAG_SHIFT         (31U)
/*! @} */

/*! @name DPHYESCCLKSEL - MIPI-DSI DPHY Escape Mode Clock Select */
/*! @{ */
#define CLKCTL0_DPHYESCCLKSEL_SEL_MASK           (0x7U)
#define CLKCTL0_DPHYESCCLKSEL_SEL_SHIFT          (0U)
/*! SEL - Select Clock Source
 *  0b000..FRO Clock (Div1 or 192 MHz)
 *  0b001..FRO Clock (Div16 or 12 MHz)
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_DPHYESCCLKSEL_SEL(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL0_DPHYESCCLKSEL_SEL_SHIFT)) & CLKCTL0_DPHYESCCLKSEL_SEL_MASK)
/*! @} */

/*! @name DPHYESCRXCLKDIV - MIPI-DSI DPHY Escape Mode Receive Clock Divider */
/*! @{ */
#define CLKCTL0_DPHYESCRXCLKDIV_DIV_MASK         (0xFFU)
#define CLKCTL0_DPHYESCRXCLKDIV_DIV_SHIFT        (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_DPHYESCRXCLKDIV_DIV(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL0_DPHYESCRXCLKDIV_DIV_SHIFT)) & CLKCTL0_DPHYESCRXCLKDIV_DIV_MASK)
#define CLKCTL0_DPHYESCRXCLKDIV_RESET_MASK       (0x20000000U)
#define CLKCTL0_DPHYESCRXCLKDIV_RESET_SHIFT      (29U)
#define CLKCTL0_DPHYESCRXCLKDIV_HALT_MASK        (0x40000000U)
#define CLKCTL0_DPHYESCRXCLKDIV_HALT_SHIFT       (30U)
#define CLKCTL0_DPHYESCRXCLKDIV_REQFLAG_MASK     (0x80000000U)
#define CLKCTL0_DPHYESCRXCLKDIV_REQFLAG_SHIFT    (31U)
/*! @} */

/*! @name DPHYESCTXCLKDIV - MIPI-DSI DPHY Escape Mode Tramsmit Clock Divider */
/*! @{ */
#define CLKCTL0_DPHYESCTXCLKDIV_DIV_MASK         (0xFFU)
#define CLKCTL0_DPHYESCTXCLKDIV_DIV_SHIFT        (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_DPHYESCTXCLKDIV_DIV(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL0_DPHYESCTXCLKDIV_DIV_SHIFT)) & CLKCTL0_DPHYESCTXCLKDIV_DIV_MASK)
#define CLKCTL0_DPHYESCTXCLKDIV_RESET_MASK       (0x20000000U)
#define CLKCTL0_DPHYESCTXCLKDIV_RESET_SHIFT      (29U)
#define CLKCTL0_DPHYESCTXCLKDIV_HALT_MASK        (0x40000000U)
#define CLKCTL0_DPHYESCTXCLKDIV_HALT_SHIFT       (30U)
#define CLKCTL0_DPHYESCTXCLKDIV_REQFLAG_MASK     (0x80000000U)
#define CLKCTL0_DPHYESCTXCLKDIV_REQFLAG_SHIFT    (31U)
/*! @} */

/*! @name GPUCLKSEL - GPU Clock Select */
/*! @{ */
#define CLKCTL0_GPUCLKSEL_SEL_MASK               (0x7U)
#define CLKCTL0_GPUCLKSEL_SEL_SHIFT              (0U)
/*! SEL - Select Clock Source
 *  0b000..Main Clock
 *  0b001..FRO Clock (Div1 or 192 MHz)
 *  0b010..SYSPLL0 MAIN_CLK (PFD0 Output)
 *  0b011..SYSPLL0 AUX0_PLL_Clock
 *  0b100..SYSPLL0 AUX1_PLL_Clock
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_GPUCLKSEL_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << CLKCTL0_GPUCLKSEL_SEL_SHIFT)) & CLKCTL0_GPUCLKSEL_SEL_MASK)
/*! @} */

/*! @name GPUCLKDIV - GPU Clock Divider */
/*! @{ */
#define CLKCTL0_GPUCLKDIV_DIV_MASK               (0xFFU)
#define CLKCTL0_GPUCLKDIV_DIV_SHIFT              (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_GPUCLKDIV_DIV(x)                 (((uint32_t)(((uint32_t)(x)) << CLKCTL0_GPUCLKDIV_DIV_SHIFT)) & CLKCTL0_GPUCLKDIV_DIV_MASK)
#define CLKCTL0_GPUCLKDIV_RESET_MASK             (0x20000000U)
#define CLKCTL0_GPUCLKDIV_RESET_SHIFT            (29U)
#define CLKCTL0_GPUCLKDIV_HALT_MASK              (0x40000000U)
#define CLKCTL0_GPUCLKDIV_HALT_SHIFT             (30U)
#define CLKCTL0_GPUCLKDIV_REQFLAG_MASK           (0x80000000U)
#define CLKCTL0_GPUCLKDIV_REQFLAG_SHIFT          (31U)
/*! @} */

/*! @name DCPIXELCLKSEL - LCDIF Pixel Clock Select */
/*! @{ */
#define CLKCTL0_DCPIXELCLKSEL_SEL_MASK           (0x7U)
#define CLKCTL0_DCPIXELCLKSEL_SEL_SHIFT          (0U)
/*! SEL - Select Clock Source
 *  0b000..MIPI-DSI PHY Clock
 *  0b001..Main Clock
 *  0b010..FRO Clock (Div1 or 192 MHz)
 *  0b011..SYSPLL0 MAIN_CLK (PFD0 Output)
 *  0b100..SYSPLL0 AUX0_PLL_Clock
 *  0b101..SYSPLL0 AUX1_PLL_Clock
 *  0b110..Reserved
 *  0b111..None; this may be selected to reduce power when no output is needed.
 */
#define CLKCTL0_DCPIXELCLKSEL_SEL(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL0_DCPIXELCLKSEL_SEL_SHIFT)) & CLKCTL0_DCPIXELCLKSEL_SEL_MASK)
/*! @} */

/*! @name DCPIXELCLKDIV - LCDIF Pixel Clock Divider */
/*! @{ */
#define CLKCTL0_DCPIXELCLKDIV_DIV_MASK           (0xFFU)
#define CLKCTL0_DCPIXELCLKDIV_DIV_SHIFT          (0U)
/*! DIV - Clock Divider Value Selection
 */
#define CLKCTL0_DCPIXELCLKDIV_DIV(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL0_DCPIXELCLKDIV_DIV_SHIFT)) & CLKCTL0_DCPIXELCLKDIV_DIV_MASK)
#define CLKCTL0_DCPIXELCLKDIV_RESET_MASK         (0x20000000U)
#define CLKCTL0_DCPIXELCLKDIV_RESET_SHIFT        (29U)
#define CLKCTL0_DCPIXELCLKDIV_HALT_MASK          (0x40000000U)
#define CLKCTL0_DCPIXELCLKDIV_HALT_SHIFT         (30U)
#define CLKCTL0_DCPIXELCLKDIV_REQFLAG_MASK       (0x80000000U)
#define CLKCTL0_DCPIXELCLKDIV_REQFLAG_SHIFT      (31U)
/*! @} */


/*!
 * @}
 */ /* end of group CLKCTL0_Register_Masks */


/* CLKCTL0 - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral CLKCTL0 base pointer */
  #define CLKCTL0_BASE_PTR                         ((CLKCTL0_MemMapPtr)0x50001000u)
  /** Peripheral CLKCTL0 base pointer */
  #define CLKCTL0_BASE_PTR_NS                      ((CLKCTL0_MemMapPtr)0x40001000u)
  /** Array initializer of CLKCTL0 peripheral base pointers */
  #define CLKCTL0_BASE_PTRS                        { CLKCTL0_BASE_PTR }
  /** Array initializer of CLKCTL0 peripheral base pointers */
  #define CLKCTL0_BASE_PTRS_NS                     { CLKCTL0_BASE_PTR_NS }
#else
  /** Peripheral CLKCTL0 base pointer */
  #define CLKCTL0_BASE_PTR                         ((CLKCTL0_MemMapPtr)0x40001000u)
  /** Array initializer of CLKCTL0 peripheral base pointers */
  #define CLKCTL0_BASE_PTRS                        { CLKCTL0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- CLKCTL0 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CLKCTL0_Register_Accessor_Macros CLKCTL0 - Register accessor macros
 * @{
 */


/* CLKCTL0 - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* CLKCTL0 */
  #define CLKCTL0_PSCCTL0                          CLKCTL0_PSCCTL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL0_NS                       CLKCTL0_PSCCTL0_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_PSCCTL1                          CLKCTL0_PSCCTL1_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL1_NS                       CLKCTL0_PSCCTL1_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_PSCCTL2                          CLKCTL0_PSCCTL2_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL2_NS                       CLKCTL0_PSCCTL2_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_PSCCTL0_SET                      CLKCTL0_PSCCTL0_SET_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL0_SET_NS                   CLKCTL0_PSCCTL0_SET_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_PSCCTL1_SET                      CLKCTL0_PSCCTL1_SET_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL1_SET_NS                   CLKCTL0_PSCCTL1_SET_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_PSCCTL2_SET                      CLKCTL0_PSCCTL2_SET_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL2_SET_NS                   CLKCTL0_PSCCTL2_SET_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_PSCCTL0_CLR                      CLKCTL0_PSCCTL0_CLR_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL0_CLR_NS                   CLKCTL0_PSCCTL0_CLR_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_PSCCTL1_CLR                      CLKCTL0_PSCCTL1_CLR_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL1_CLR_NS                   CLKCTL0_PSCCTL1_CLR_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_PSCCTL2_CLR                      CLKCTL0_PSCCTL2_CLR_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL2_CLR_NS                   CLKCTL0_PSCCTL2_CLR_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_FRO_CONTROL                      CLKCTL0_FRO_CONTROL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FRO_CONTROL_NS                   CLKCTL0_FRO_CONTROL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_FRO_CAPVAL                       CLKCTL0_FRO_CAPVAL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FRO_CAPVAL_NS                    CLKCTL0_FRO_CAPVAL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_FRO_RDTRIM                       CLKCTL0_FRO_RDTRIM_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FRO_RDTRIM_NS                    CLKCTL0_FRO_RDTRIM_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_FRODIVSEL                        CLKCTL0_FRODIVSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FRODIVSEL_NS                     CLKCTL0_FRODIVSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_FROCLKSTATUS                     CLKCTL0_FROCLKSTATUS_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FROCLKSTATUS_NS                  CLKCTL0_FROCLKSTATUS_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_FRODIVOEN                        CLKCTL0_FRODIVOEN_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FRODIVOEN_NS                     CLKCTL0_FRODIVOEN_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_LOWFREQCLKDIV                    CLKCTL0_LOWFREQCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_LOWFREQCLKDIV_NS                 CLKCTL0_LOWFREQCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSOSCCTL0                       CLKCTL0_SYSOSCCTL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSOSCCTL0_NS                    CLKCTL0_SYSOSCCTL0_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSOSCBYPASS                     CLKCTL0_SYSOSCBYPASS_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSOSCBYPASS_NS                  CLKCTL0_SYSOSCBYPASS_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_LPOSCCTL0                        CLKCTL0_LPOSCCTL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_LPOSCCTL0_NS                     CLKCTL0_LPOSCCTL0_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_OSC32KHZCTL0                     CLKCTL0_OSC32KHZCTL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_OSC32KHZCTL0_NS                  CLKCTL0_OSC32KHZCTL0_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSPLL0CLKSEL                    CLKCTL0_SYSPLL0CLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0CLKSEL_NS                 CLKCTL0_SYSPLL0CLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSPLL0CTL0                      CLKCTL0_SYSPLL0CTL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0CTL0_NS                   CLKCTL0_SYSPLL0CTL0_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSPLL0LOCKTIMEDIV2              CLKCTL0_SYSPLL0LOCKTIMEDIV2_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0LOCKTIMEDIV2_NS           CLKCTL0_SYSPLL0LOCKTIMEDIV2_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSPLL0NUM                       CLKCTL0_SYSPLL0NUM_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0NUM_NS                    CLKCTL0_SYSPLL0NUM_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSPLL0DENOM                     CLKCTL0_SYSPLL0DENOM_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0DENOM_NS                  CLKCTL0_SYSPLL0DENOM_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSPLL0PFD                       CLKCTL0_SYSPLL0PFD_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0PFD_NS                    CLKCTL0_SYSPLL0PFD_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_MAINPLLCLKDIV                    CLKCTL0_MAINPLLCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_MAINPLLCLKDIV_NS                 CLKCTL0_MAINPLLCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_DSPPLLCLKDIV                     CLKCTL0_DSPPLLCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DSPPLLCLKDIV_NS                  CLKCTL0_DSPPLLCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_AUX0PLLCLKDIV                    CLKCTL0_AUX0PLLCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_AUX0PLLCLKDIV_NS                 CLKCTL0_AUX0PLLCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_AUX1PLLCLKDIV                    CLKCTL0_AUX1PLLCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_AUX1PLLCLKDIV_NS                 CLKCTL0_AUX1PLLCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSCPUAHBCLKDIV                  CLKCTL0_SYSCPUAHBCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSCPUAHBCLKDIV_NS               CLKCTL0_SYSCPUAHBCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_MAINCLKSELA                      CLKCTL0_MAINCLKSELA_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_MAINCLKSELA_NS                   CLKCTL0_MAINCLKSELA_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_MAINCLKSELB                      CLKCTL0_MAINCLKSELB_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_MAINCLKSELB_NS                   CLKCTL0_MAINCLKSELB_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_PFC0DIV                          CLKCTL0_PFCDIV_REG(CLKCTL0_BASE_PTR,0)
  #define CLKCTL0_PFC0DIV_NS                       CLKCTL0_PFCDIV_REG(CLKCTL0_BASE_PTR_NS,0)
  #define CLKCTL0_PFC1DIV                          CLKCTL0_PFCDIV_REG(CLKCTL0_BASE_PTR,1)
  #define CLKCTL0_PFC1DIV_NS                       CLKCTL0_PFCDIV_REG(CLKCTL0_BASE_PTR_NS,1)
  #define CLKCTL0_FLEXSPI0FCLKSEL                  CLKCTL0_FLEXSPI0FCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FLEXSPI0FCLKSEL_NS               CLKCTL0_FLEXSPI0FCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_FLEXSPI0FCLKDIV                  CLKCTL0_FLEXSPI0FCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FLEXSPI0FCLKDIV_NS               CLKCTL0_FLEXSPI0FCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_FLEXSPI1FCLKSEL                  CLKCTL0_FLEXSPI1FCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FLEXSPI1FCLKSEL_NS               CLKCTL0_FLEXSPI1FCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_FLEXSPI1FCLKDIV                  CLKCTL0_FLEXSPI1FCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FLEXSPI1FCLKDIV_NS               CLKCTL0_FLEXSPI1FCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SCTFCLKSEL                       CLKCTL0_SCTFCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SCTFCLKSEL_NS                    CLKCTL0_SCTFCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SCTIN7CLKDIV                     CLKCTL0_SCTIN7CLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SCTIN7CLKDIV_NS                  CLKCTL0_SCTIN7CLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_USBHSFCLKSEL                     CLKCTL0_USBHSFCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_USBHSFCLKSEL_NS                  CLKCTL0_USBHSFCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_USBHSFCLKDIV                     CLKCTL0_USBHSFCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_USBHSFCLKDIV_NS                  CLKCTL0_USBHSFCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SDIO0FCLKSEL                     CLKCTL0_SDIO0FCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SDIO0FCLKSEL_NS                  CLKCTL0_SDIO0FCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SDIO0FCLKDIV                     CLKCTL0_SDIO0FCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SDIO0FCLKDIV_NS                  CLKCTL0_SDIO0FCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SDIO1FCLKSEL                     CLKCTL0_SDIO1FCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SDIO1FCLKSEL_NS                  CLKCTL0_SDIO1FCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SDIO1FCLKDIV                     CLKCTL0_SDIO1FCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SDIO1FCLKDIV_NS                  CLKCTL0_SDIO1FCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_ADC0FCLKSEL0                     CLKCTL0_ADC0FCLKSEL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_ADC0FCLKSEL0_NS                  CLKCTL0_ADC0FCLKSEL0_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_ADC0FCLKSEL1                     CLKCTL0_ADC0FCLKSEL1_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_ADC0FCLKSEL1_NS                  CLKCTL0_ADC0FCLKSEL1_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_ADC0FCLKDIV                      CLKCTL0_ADC0FCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_ADC0FCLKDIV_NS                   CLKCTL0_ADC0FCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_UTICKFCLKSEL                     CLKCTL0_UTICKFCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_UTICKFCLKSEL_NS                  CLKCTL0_UTICKFCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_WDT0FCLKSEL                      CLKCTL0_WDT0FCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_WDT0FCLKSEL_NS                   CLKCTL0_WDT0FCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_A32KHZWAKECLKSEL                 CLKCTL0_A32KHZWAKECLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_A32KHZWAKECLKSEL_NS              CLKCTL0_A32KHZWAKECLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_A32KHZWAKECLKDIV                 CLKCTL0_A32KHZWAKECLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_A32KHZWAKECLKDIV_NS              CLKCTL0_A32KHZWAKECLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSTICKFCLKSEL                   CLKCTL0_SYSTICKFCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSTICKFCLKSEL_NS                CLKCTL0_SYSTICKFCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_SYSTICKFCLKDIV                   CLKCTL0_SYSTICKFCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSTICKFCLKDIV_NS                CLKCTL0_SYSTICKFCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_DPHYCLKSEL                       CLKCTL0_DPHYCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DPHYCLKSEL_NS                    CLKCTL0_DPHYCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_DPHYCLKDIV                       CLKCTL0_DPHYCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DPHYCLKDIV_NS                    CLKCTL0_DPHYCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_DPHYESCCLKSEL                    CLKCTL0_DPHYESCCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DPHYESCCLKSEL_NS                 CLKCTL0_DPHYESCCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_DPHYESCRXCLKDIV                  CLKCTL0_DPHYESCRXCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DPHYESCRXCLKDIV_NS               CLKCTL0_DPHYESCRXCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_DPHYESCTXCLKDIV                  CLKCTL0_DPHYESCTXCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DPHYESCTXCLKDIV_NS               CLKCTL0_DPHYESCTXCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_GPUCLKSEL                        CLKCTL0_GPUCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_GPUCLKSEL_NS                     CLKCTL0_GPUCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_GPUCLKDIV                        CLKCTL0_GPUCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_GPUCLKDIV_NS                     CLKCTL0_GPUCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_DCPIXELCLKSEL                    CLKCTL0_DCPIXELCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DCPIXELCLKSEL_NS                 CLKCTL0_DCPIXELCLKSEL_REG(CLKCTL0_BASE_PTR_NS)
  #define CLKCTL0_DCPIXELCLKDIV                    CLKCTL0_DCPIXELCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DCPIXELCLKDIV_NS                 CLKCTL0_DCPIXELCLKDIV_REG(CLKCTL0_BASE_PTR_NS)
#else
  /* CLKCTL0 */
  #define CLKCTL0_PSCCTL0                          CLKCTL0_PSCCTL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL1                          CLKCTL0_PSCCTL1_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL2                          CLKCTL0_PSCCTL2_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL0_SET                      CLKCTL0_PSCCTL0_SET_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL1_SET                      CLKCTL0_PSCCTL1_SET_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL2_SET                      CLKCTL0_PSCCTL2_SET_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL0_CLR                      CLKCTL0_PSCCTL0_CLR_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL1_CLR                      CLKCTL0_PSCCTL1_CLR_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PSCCTL2_CLR                      CLKCTL0_PSCCTL2_CLR_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FRO_CONTROL                      CLKCTL0_FRO_CONTROL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FRO_CAPVAL                       CLKCTL0_FRO_CAPVAL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FRO_RDTRIM                       CLKCTL0_FRO_RDTRIM_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FRODIVSEL                        CLKCTL0_FRODIVSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FROCLKSTATUS                     CLKCTL0_FROCLKSTATUS_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FRODIVOEN                        CLKCTL0_FRODIVOEN_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_LOWFREQCLKDIV                    CLKCTL0_LOWFREQCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSOSCCTL0                       CLKCTL0_SYSOSCCTL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSOSCBYPASS                     CLKCTL0_SYSOSCBYPASS_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_LPOSCCTL0                        CLKCTL0_LPOSCCTL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_OSC32KHZCTL0                     CLKCTL0_OSC32KHZCTL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0CLKSEL                    CLKCTL0_SYSPLL0CLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0CTL0                      CLKCTL0_SYSPLL0CTL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0LOCKTIMEDIV2              CLKCTL0_SYSPLL0LOCKTIMEDIV2_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0NUM                       CLKCTL0_SYSPLL0NUM_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0DENOM                     CLKCTL0_SYSPLL0DENOM_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSPLL0PFD                       CLKCTL0_SYSPLL0PFD_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_MAINPLLCLKDIV                    CLKCTL0_MAINPLLCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DSPPLLCLKDIV                     CLKCTL0_DSPPLLCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_AUX0PLLCLKDIV                    CLKCTL0_AUX0PLLCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_AUX1PLLCLKDIV                    CLKCTL0_AUX1PLLCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSCPUAHBCLKDIV                  CLKCTL0_SYSCPUAHBCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_MAINCLKSELA                      CLKCTL0_MAINCLKSELA_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_MAINCLKSELB                      CLKCTL0_MAINCLKSELB_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_PFC0DIV                          CLKCTL0_PFCDIV_REG(CLKCTL0_BASE_PTR,0)
  #define CLKCTL0_PFC1DIV                          CLKCTL0_PFCDIV_REG(CLKCTL0_BASE_PTR,1)
  #define CLKCTL0_FLEXSPI0FCLKSEL                  CLKCTL0_FLEXSPI0FCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FLEXSPI0FCLKDIV                  CLKCTL0_FLEXSPI0FCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FLEXSPI1FCLKSEL                  CLKCTL0_FLEXSPI1FCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_FLEXSPI1FCLKDIV                  CLKCTL0_FLEXSPI1FCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SCTFCLKSEL                       CLKCTL0_SCTFCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SCTIN7CLKDIV                     CLKCTL0_SCTIN7CLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_USBHSFCLKSEL                     CLKCTL0_USBHSFCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_USBHSFCLKDIV                     CLKCTL0_USBHSFCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SDIO0FCLKSEL                     CLKCTL0_SDIO0FCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SDIO0FCLKDIV                     CLKCTL0_SDIO0FCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SDIO1FCLKSEL                     CLKCTL0_SDIO1FCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SDIO1FCLKDIV                     CLKCTL0_SDIO1FCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_ADC0FCLKSEL0                     CLKCTL0_ADC0FCLKSEL0_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_ADC0FCLKSEL1                     CLKCTL0_ADC0FCLKSEL1_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_ADC0FCLKDIV                      CLKCTL0_ADC0FCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_UTICKFCLKSEL                     CLKCTL0_UTICKFCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_WDT0FCLKSEL                      CLKCTL0_WDT0FCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_A32KHZWAKECLKSEL                 CLKCTL0_A32KHZWAKECLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_A32KHZWAKECLKDIV                 CLKCTL0_A32KHZWAKECLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSTICKFCLKSEL                   CLKCTL0_SYSTICKFCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_SYSTICKFCLKDIV                   CLKCTL0_SYSTICKFCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DPHYCLKSEL                       CLKCTL0_DPHYCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DPHYCLKDIV                       CLKCTL0_DPHYCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DPHYESCCLKSEL                    CLKCTL0_DPHYESCCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DPHYESCRXCLKDIV                  CLKCTL0_DPHYESCRXCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DPHYESCTXCLKDIV                  CLKCTL0_DPHYESCTXCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_GPUCLKSEL                        CLKCTL0_GPUCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_GPUCLKDIV                        CLKCTL0_GPUCLKDIV_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DCPIXELCLKSEL                    CLKCTL0_DCPIXELCLKSEL_REG(CLKCTL0_BASE_PTR)
  #define CLKCTL0_DCPIXELCLKDIV                    CLKCTL0_DCPIXELCLKDIV_REG(CLKCTL0_BASE_PTR)
#endif

/* CLKCTL0 - Register array accessors */
#define CLKCTL0_PFCDIV(index)                    CLKCTL0_PFCDIV_REG(CLKCTL0_BASE_PTR,index)
#define CLKCTL0_PFCDIV_NS(index)                 CLKCTL0_PFCDIV_REG(CLKCTL0_BASE_PTR_NS,index)
#define CLKCTL0_PFCDIV(index)                    CLKCTL0_PFCDIV_REG(CLKCTL0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group CLKCTL0_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CLKCTL0_Peripheral */


/* ----------------------------------------------------------------------------
   -- CLKCTL1
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CLKCTL1_Peripheral CLKCTL1
 * @{
 */

/** CLKCTL1 - Peripheral register structure */
typedef struct CLKCTL1_MemMap {
  uint8_t RESERVED_0[16];
  uint32_t PSCCTL0;                                /**< Clock Control 0, offset: 0x10 */
  uint32_t PSCCTL1;                                /**< Clock Control 1, offset: 0x14 */
  uint32_t PSCCTL2;                                /**< Clock Control 2, offset: 0x18 */
  uint8_t RESERVED_1[36];
  uint32_t PSCCTL0_SET;                            /**< Clock Set 0, offset: 0x40 */
  uint32_t PSCCTL1_SET;                            /**< Clock Set 1, offset: 0x44 */
  uint32_t PSCCTL2_SET;                            /**< Clock Set 2, offset: 0x48 */
  uint8_t RESERVED_2[36];
  uint32_t PSCCTL0_CLR;                            /**< Clock Clear 0, offset: 0x70 */
  uint32_t PSCCTL1_CLR;                            /**< Clock Clear 1, offset: 0x74 */
  uint32_t PSCCTL2_CLR;                            /**< Clock Clear 2, offset: 0x78 */
  uint8_t RESERVED_3[388];
  uint32_t AUDIOPLL0CLKSEL;                        /**< Audio PLL0 Clock Select, offset: 0x200 */
  uint32_t AUDIOPLL0CTL0;                          /**< Audio PLL0 Control 0, offset: 0x204 */
  uint8_t RESERVED_4[4];
  uint32_t AUDIOPLL0LOCKTIMEDIV2;                  /**< Audio PLL0 Lock Time Divide-by-2, offset: 0x20C */
  uint32_t AUDIOPLL0NUM;                           /**< Audio PLL0 Numerator, offset: 0x210 */
  uint32_t AUDIOPLL0DENOM;                         /**< Audio PLL0 Denominator, offset: 0x214 */
  uint32_t AUDIOPLL0PFD;                           /**< Audio PLL0 PFD, offset: 0x218 */
  uint8_t RESERVED_5[36];
  uint32_t AUDIOPLLCLKDIV;                         /**< Audio PLL Clock Divider, offset: 0x240 */
  uint8_t RESERVED_6[444];
  uint32_t DSPCPUCLKDIV;                           /**< DSP CPU Clock Divider, offset: 0x400 */
  uint8_t RESERVED_7[44];
  uint32_t DSPCPUCLKSELA;                          /**< DSP CPU Clock Select A, offset: 0x430 */
  uint32_t DSPCPUCLKSELB;                          /**< DSP CPU Clock Select B, offset: 0x434 */
  uint8_t RESERVED_8[72];
  uint32_t OSEVENTTFCLKSEL;                        /**< OS Event Timer Functional Clock Select, offset: 0x480 */
  uint8_t RESERVED_9[124];
  struct {                                         /* offset: 0x500, array step: 0x20 */
    uint32_t FRGCLKSEL;                              /**< Fractional Rate Generator 0 Clock Select..Fractional Rate Generator 16 Clock Select, array offset: 0x500, array step: 0x20 */
    uint32_t FRGCTL;                                 /**< Fractional Rate Generator 0 Control..Fractional Rate Generator 16 Control, array offset: 0x504, array step: 0x20 */
    uint32_t FCFCLKSEL;                              /**< Flexcomm0 Clock Select..Flexcomm16 Clock Select, array offset: 0x508, array step: 0x20 */
    uint8_t RESERVED_0[20];
  } FLEXCOMM[17];
  uint32_t FRG17CLKSEL;                            /**< Fractional Rate Generator 17 Clock Select, offset: 0x720 */
  uint32_t FRG17CTL;                               /**< Fractional Rate Generator 17 Control, offset: 0x724 */
  uint32_t FLEXIOCLKSEL;                           /**< FlexIO Clock Select, offset: 0x728 */
  uint8_t RESERVED_10[20];
  uint32_t FLEXIOCLKDIV;                           /**< FlexIO Clock Divider, offset: 0x740 */
  uint8_t RESERVED_11[28];
  uint32_t FRGPLLCLKDIV;                           /**< Fractional Rate Generator PLL Clock Divider, offset: 0x760 */
  uint8_t RESERVED_12[28];
  uint32_t DMIC0FCLKSEL;                           /**< DMIC0 Functional Clock Select, offset: 0x780 */
  uint32_t DMIC0FCLKDIV;                           /**< DMIC0 Functional Clock Divider, offset: 0x784 */
  uint8_t RESERVED_13[24];
  uint32_t CT32BITFCLKSEL[5];                      /**< CT32BIT bit timer 0 Functional Clock Select..CT32BIT bit timer 4 Functional Clock Select, array offset: 0x7A0, array step: 0x4 */
  uint8_t RESERVED_14[12];
  uint32_t AUDIOMCLKSEL;                           /**< Audio MCLK Clock Select, offset: 0x7C0 */
  uint32_t AUDIOMCLKDIV;                           /**< Audio MCLK Clock Divider, offset: 0x7C4 */
  uint8_t RESERVED_15[24];
  uint32_t CLKOUTSEL0;                             /**< CLKOUT Clock Select 0, offset: 0x7E0 */
  uint32_t CLKOUTSEL1;                             /**< CLKOUT Clock Select 1, offset: 0x7E4 */
  uint32_t CLKOUTFCLKDIV;                          /**< CLKOUT Functional Clock Divider, offset: 0x7E8 */
  uint8_t RESERVED_16[20];
  uint32_t I3C01FCLKSEL;                           /**< I3C0, I3C1 Functional Clock Select, offset: 0x800 */
  uint32_t I3C01FCLKSTCSEL;                        /**< I3C0, I3C1 Functional Slow Time Control Clock Select, offset: 0x804 */
  uint32_t I3C01FCLKSTCDIV;                        /**< I3C0, I3C1 Functional Slow Time Control Clock Divider, offset: 0x808 */
  uint32_t I3C01FCLKSDIV;                          /**< I3C0, I3C1 Functional Slow Clock Divider, offset: 0x80C */
  uint32_t I3C01FCLKDIV;                           /**< I3C0, I3C1 Functional Clock Divider, offset: 0x810 */
  uint32_t I3C01FCLKSTSTCLKSEL;                    /**< I3C01 Functional Clock Select, offset: 0x814 */
  uint8_t RESERVED_17[8];
  uint32_t WDT1FCLKSEL;                            /**< Watchdog Timer 1 Functional Clock Select, offset: 0x820 */
  uint8_t RESERVED_18[12];
  uint32_t ACMP0FCLKSEL;                           /**< Analog Comparator 0 Clock Select, offset: 0x830 */
  uint32_t ACMP0FCLKDIV;                           /**< Analog comparator 0 FCLK divider, offset: 0x834 */
} volatile *CLKCTL1_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CLKCTL1 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CLKCTL1_Register_Accessor_Macros CLKCTL1 - Register accessor macros
 * @{
 */


/* CLKCTL1 - Register accessors */
#define CLKCTL1_PSCCTL0_REG(base)                ((base)->PSCCTL0)
#define CLKCTL1_PSCCTL1_REG(base)                ((base)->PSCCTL1)
#define CLKCTL1_PSCCTL2_REG(base)                ((base)->PSCCTL2)
#define CLKCTL1_PSCCTL0_SET_REG(base)            ((base)->PSCCTL0_SET)
#define CLKCTL1_PSCCTL1_SET_REG(base)            ((base)->PSCCTL1_SET)
#define CLKCTL1_PSCCTL2_SET_REG(base)            ((base)->PSCCTL2_SET)
#define CLKCTL1_PSCCTL0_CLR_REG(base)            ((base)->PSCCTL0_CLR)
#define CLKCTL1_PSCCTL1_CLR_REG(base)            ((base)->PSCCTL1_CLR)
#define CLKCTL1_PSCCTL2_CLR_REG(base)            ((base)->PSCCTL2_CLR)
#define CLKCTL1_AUDIOPLL0CLKSEL_REG(base)        ((base)->AUDIOPLL0CLKSEL)
#define CLKCTL1_AUDIOPLL0CTL0_REG(base)          ((base)->AUDIOPLL0CTL0)
#define CLKCTL1_AUDIOPLL0LOCKTIMEDIV2_REG(base)  ((base)->AUDIOPLL0LOCKTIMEDIV2)
#define CLKCTL1_AUDIOPLL0NUM_REG(base)           ((base)->AUDIOPLL0NUM)
#define CLKCTL1_AUDIOPLL0DENOM_REG(base)         ((base)->AUDIOPLL0DENOM)
#define CLKCTL1_AUDIOPLL0PFD_REG(base)           ((base)->AUDIOPLL0PFD)
#define CLKCTL1_AUDIOPLLCLKDIV_REG(base)         ((base)->AUDIOPLLCLKDIV)
#define CLKCTL1_DSPCPUCLKDIV_REG(base)           ((base)->DSPCPUCLKDIV)
#define CLKCTL1_DSPCPUCLKSELA_REG(base)          ((base)->DSPCPUCLKSELA)
#define CLKCTL1_DSPCPUCLKSELB_REG(base)          ((base)->DSPCPUCLKSELB)
#define CLKCTL1_OSEVENTTFCLKSEL_REG(base)        ((base)->OSEVENTTFCLKSEL)
#define CLKCTL1_FRGCLKSEL_REG(base,index)        ((base)->FLEXCOMM[index].FRGCLKSEL)
#define CLKCTL1_FRGCTL_REG(base,index)           ((base)->FLEXCOMM[index].FRGCTL)
#define CLKCTL1_FCFCLKSEL_REG(base,index)        ((base)->FLEXCOMM[index].FCFCLKSEL)
#define CLKCTL1_FRG17CLKSEL_REG(base)            ((base)->FRG17CLKSEL)
#define CLKCTL1_FRG17CTL_REG(base)               ((base)->FRG17CTL)
#define CLKCTL1_FLEXIOCLKSEL_REG(base)           ((base)->FLEXIOCLKSEL)
#define CLKCTL1_FLEXIOCLKDIV_REG(base)           ((base)->FLEXIOCLKDIV)
#define CLKCTL1_FRGPLLCLKDIV_REG(base)           ((base)->FRGPLLCLKDIV)
#define CLKCTL1_DMIC0FCLKSEL_REG(base)           ((base)->DMIC0FCLKSEL)
#define CLKCTL1_DMIC0FCLKDIV_REG(base)           ((base)->DMIC0FCLKDIV)
#define CLKCTL1_CT32BITFCLKSEL_REG(base,index)   ((base)->CT32BITFCLKSEL[index])
#define CLKCTL1_AUDIOMCLKSEL_REG(base)           ((base)->AUDIOMCLKSEL)
#define CLKCTL1_AUDIOMCLKDIV_REG(base)           ((base)->AUDIOMCLKDIV)
#define CLKCTL1_CLKOUTSEL0_REG(base)             ((base)->CLKOUTSEL0)
#define CLKCTL1_CLKOUTSEL1_REG(base)             ((base)->CLKOUTSEL1)
#define CLKCTL1_CLKOUTFCLKDIV_REG(base)          ((base)->CLKOUTFCLKDIV)
#define CLKCTL1_I3C01FCLKSEL_REG(base)           ((base)->I3C01FCLKSEL)
#define CLKCTL1_I3C01FCLKSTCSEL_REG(base)        ((base)->I3C01FCLKSTCSEL)
#define CLKCTL1_I3C01FCLKSTCDIV_REG(base)        ((base)->I3C01FCLKSTCDIV)
#define CLKCTL1_I3C01FCLKSDIV_REG(base)          ((base)->I3C01FCLKSDIV)
#define CLKCTL1_I3C01FCLKDIV_REG(base)           ((base)->I3C01FCLKDIV)
#define CLKCTL1_I3C01FCLKSTSTCLKSEL_REG(base)    ((base)->I3C01FCLKSTSTCLKSEL)
#define CLKCTL1_WDT1FCLKSEL_REG(base)            ((base)->WDT1FCLKSEL)
#define CLKCTL1_ACMP0FCLKSEL_REG(base)           ((base)->ACMP0FCLKSEL)
#define CLKCTL1_ACMP0FCLKDIV_REG(base)           ((base)->ACMP0FCLKDIV)

/*!
 * @}
 */ /* end of group CLKCTL1_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CLKCTL1 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CLKCTL1_Register_Masks CLKCTL1 Register Masks
 * @{
 */

/*! @name PSCCTL0 - Clock Control 0 */
/*! @{ */
#define CLKCTL1_PSCCTL0_FC0_CLK_MASK             (0x100U)
#define CLKCTL1_PSCCTL0_FC0_CLK_SHIFT            (8U)
#define CLKCTL1_PSCCTL0_FC1_CLK_MASK             (0x200U)
#define CLKCTL1_PSCCTL0_FC1_CLK_SHIFT            (9U)
#define CLKCTL1_PSCCTL0_FC2_CLK_MASK             (0x400U)
#define CLKCTL1_PSCCTL0_FC2_CLK_SHIFT            (10U)
#define CLKCTL1_PSCCTL0_FC3_CLK_MASK             (0x800U)
#define CLKCTL1_PSCCTL0_FC3_CLK_SHIFT            (11U)
#define CLKCTL1_PSCCTL0_FC4_CLK_MASK             (0x1000U)
#define CLKCTL1_PSCCTL0_FC4_CLK_SHIFT            (12U)
#define CLKCTL1_PSCCTL0_FC5_CLK_MASK             (0x2000U)
#define CLKCTL1_PSCCTL0_FC5_CLK_SHIFT            (13U)
#define CLKCTL1_PSCCTL0_FC6_CLK_MASK             (0x4000U)
#define CLKCTL1_PSCCTL0_FC6_CLK_SHIFT            (14U)
#define CLKCTL1_PSCCTL0_FC7_CLK_MASK             (0x8000U)
#define CLKCTL1_PSCCTL0_FC7_CLK_SHIFT            (15U)
#define CLKCTL1_PSCCTL0_FC8_CLK_MASK             (0x10000U)
#define CLKCTL1_PSCCTL0_FC8_CLK_SHIFT            (16U)
#define CLKCTL1_PSCCTL0_FC9_CLK_MASK             (0x20000U)
#define CLKCTL1_PSCCTL0_FC9_CLK_SHIFT            (17U)
#define CLKCTL1_PSCCTL0_FC10_CLK_MASK            (0x40000U)
#define CLKCTL1_PSCCTL0_FC10_CLK_SHIFT           (18U)
#define CLKCTL1_PSCCTL0_FC11_CLK_MASK            (0x80000U)
#define CLKCTL1_PSCCTL0_FC11_CLK_SHIFT           (19U)
#define CLKCTL1_PSCCTL0_FC12_CLK_MASK            (0x100000U)
#define CLKCTL1_PSCCTL0_FC12_CLK_SHIFT           (20U)
#define CLKCTL1_PSCCTL0_FC13_CLK_MASK            (0x200000U)
#define CLKCTL1_PSCCTL0_FC13_CLK_SHIFT           (21U)
#define CLKCTL1_PSCCTL0_FC14_SPI_CLK_MASK        (0x400000U)
#define CLKCTL1_PSCCTL0_FC14_SPI_CLK_SHIFT       (22U)
#define CLKCTL1_PSCCTL0_FC15_I2C_CLK_MASK        (0x800000U)
#define CLKCTL1_PSCCTL0_FC15_I2C_CLK_SHIFT       (23U)
#define CLKCTL1_PSCCTL0_DMIC0_MASK               (0x1000000U)
#define CLKCTL1_PSCCTL0_DMIC0_SHIFT              (24U)
#define CLKCTL1_PSCCTL0_FC16_SPI_CLK_MASK        (0x2000000U)
#define CLKCTL1_PSCCTL0_FC16_SPI_CLK_SHIFT       (25U)
#define CLKCTL1_PSCCTL0_OSEVENT_TIMER_MASK       (0x8000000U)
#define CLKCTL1_PSCCTL0_OSEVENT_TIMER_SHIFT      (27U)
#define CLKCTL1_PSCCTL0_FlexIO_MASK              (0x20000000U)
#define CLKCTL1_PSCCTL0_FlexIO_SHIFT             (29U)
/*! @} */

/*! @name PSCCTL1 - Clock Control 1 */
/*! @{ */
#define CLKCTL1_PSCCTL1_HSGPIO0_CLK_MASK         (0x1U)
#define CLKCTL1_PSCCTL1_HSGPIO0_CLK_SHIFT        (0U)
#define CLKCTL1_PSCCTL1_HSGPIO1_CLK_MASK         (0x2U)
#define CLKCTL1_PSCCTL1_HSGPIO1_CLK_SHIFT        (1U)
#define CLKCTL1_PSCCTL1_HSGPIO2_CLK_MASK         (0x4U)
#define CLKCTL1_PSCCTL1_HSGPIO2_CLK_SHIFT        (2U)
#define CLKCTL1_PSCCTL1_HSGPIO3_CLK_MASK         (0x8U)
#define CLKCTL1_PSCCTL1_HSGPIO3_CLK_SHIFT        (3U)
#define CLKCTL1_PSCCTL1_HSGPIO4_CLK_MASK         (0x10U)
#define CLKCTL1_PSCCTL1_HSGPIO4_CLK_SHIFT        (4U)
#define CLKCTL1_PSCCTL1_HSGPIO5_CLK_MASK         (0x20U)
#define CLKCTL1_PSCCTL1_HSGPIO5_CLK_SHIFT        (5U)
#define CLKCTL1_PSCCTL1_HSGPIO6_CLK_MASK         (0x40U)
#define CLKCTL1_PSCCTL1_HSGPIO6_CLK_SHIFT        (6U)
#define CLKCTL1_PSCCTL1_HSGPIO7_CLK_MASK         (0x80U)
#define CLKCTL1_PSCCTL1_HSGPIO7_CLK_SHIFT        (7U)
#define CLKCTL1_PSCCTL1_CRC_CLK_MASK             (0x10000U)
#define CLKCTL1_PSCCTL1_CRC_CLK_SHIFT            (16U)
#define CLKCTL1_PSCCTL1_DMAC0_CLK_MASK           (0x800000U)
#define CLKCTL1_PSCCTL1_DMAC0_CLK_SHIFT          (23U)
#define CLKCTL1_PSCCTL1_DMAC1_CLK_MASK           (0x1000000U)
#define CLKCTL1_PSCCTL1_DMAC1_CLK_SHIFT          (24U)
#define CLKCTL1_PSCCTL1_MU_CLK_MASK              (0x10000000U)
#define CLKCTL1_PSCCTL1_MU_CLK_SHIFT             (28U)
#define CLKCTL1_PSCCTL1_SEMA_CLK_MASK            (0x20000000U)
#define CLKCTL1_PSCCTL1_SEMA_CLK_SHIFT           (29U)
#define CLKCTL1_PSCCTL1_FREQME_CLK_MASK          (0x80000000U)
#define CLKCTL1_PSCCTL1_FREQME_CLK_SHIFT         (31U)
/*! @} */

/*! @name PSCCTL2 - Clock Control 2 */
/*! @{ */
#define CLKCTL1_PSCCTL2_CT32BIT0_CLK_MASK        (0x1U)
#define CLKCTL1_PSCCTL2_CT32BIT0_CLK_SHIFT       (0U)
#define CLKCTL1_PSCCTL2_CT32BIT1_CLK_MASK        (0x2U)
#define CLKCTL1_PSCCTL2_CT32BIT1_CLK_SHIFT       (1U)
#define CLKCTL1_PSCCTL2_CT32BIT2_CLK_MASK        (0x4U)
#define CLKCTL1_PSCCTL2_CT32BIT2_CLK_SHIFT       (2U)
#define CLKCTL1_PSCCTL2_CT32BIT3_CLK_MASK        (0x8U)
#define CLKCTL1_PSCCTL2_CT32BIT3_CLK_SHIFT       (3U)
#define CLKCTL1_PSCCTL2_CT32BIT4_CLK_MASK        (0x10U)
#define CLKCTL1_PSCCTL2_CT32BIT4_CLK_SHIFT       (4U)
#define CLKCTL1_PSCCTL2_RTCLITE_CLK_MASK         (0x80U)
#define CLKCTL1_PSCCTL2_RTCLITE_CLK_SHIFT        (7U)
#define CLKCTL1_PSCCTL2_MRT0_CLK_MASK            (0x100U)
#define CLKCTL1_PSCCTL2_MRT0_CLK_SHIFT           (8U)
#define CLKCTL1_PSCCTL2_WWDT1_CLK_MASK           (0x400U)
#define CLKCTL1_PSCCTL2_WWDT1_CLK_SHIFT          (10U)
#define CLKCTL1_PSCCTL2_I3C0_CLK_MASK            (0x10000U)
#define CLKCTL1_PSCCTL2_I3C0_CLK_SHIFT           (16U)
#define CLKCTL1_PSCCTL2_I3C1_CLK_MASK            (0x20000U)
#define CLKCTL1_PSCCTL2_I3C1_CLK_SHIFT           (17U)
#define CLKCTL1_PSCCTL2_GPIOINTCTL_CLK_MASK      (0x40000000U)
#define CLKCTL1_PSCCTL2_GPIOINTCTL_CLK_SHIFT     (30U)
#define CLKCTL1_PSCCTL2_PIMCTL_CLK_MASK          (0x80000000U)
#define CLKCTL1_PSCCTL2_PIMCTL_CLK_SHIFT         (31U)
/*! @} */

/*! @name PSCCTL0_SET - Clock Set 0 */
/*! @{ */
#define CLKCTL1_PSCCTL0_SET_FC0_CLK_MASK         (0x100U)
#define CLKCTL1_PSCCTL0_SET_FC0_CLK_SHIFT        (8U)
#define CLKCTL1_PSCCTL0_SET_FC1_CLK_MASK         (0x200U)
#define CLKCTL1_PSCCTL0_SET_FC1_CLK_SHIFT        (9U)
#define CLKCTL1_PSCCTL0_SET_FC2_CLK_MASK         (0x400U)
#define CLKCTL1_PSCCTL0_SET_FC2_CLK_SHIFT        (10U)
#define CLKCTL1_PSCCTL0_SET_FC3_CLK_MASK         (0x800U)
#define CLKCTL1_PSCCTL0_SET_FC3_CLK_SHIFT        (11U)
#define CLKCTL1_PSCCTL0_SET_FC4_CLK_MASK         (0x1000U)
#define CLKCTL1_PSCCTL0_SET_FC4_CLK_SHIFT        (12U)
#define CLKCTL1_PSCCTL0_SET_FC5_CLK_MASK         (0x2000U)
#define CLKCTL1_PSCCTL0_SET_FC5_CLK_SHIFT        (13U)
#define CLKCTL1_PSCCTL0_SET_FC6_CLK_MASK         (0x4000U)
#define CLKCTL1_PSCCTL0_SET_FC6_CLK_SHIFT        (14U)
#define CLKCTL1_PSCCTL0_SET_FC7_CLK_MASK         (0x8000U)
#define CLKCTL1_PSCCTL0_SET_FC7_CLK_SHIFT        (15U)
#define CLKCTL1_PSCCTL0_SET_FC8_CLK_MASK         (0x10000U)
#define CLKCTL1_PSCCTL0_SET_FC8_CLK_SHIFT        (16U)
#define CLKCTL1_PSCCTL0_SET_FC9_CLK_MASK         (0x20000U)
#define CLKCTL1_PSCCTL0_SET_FC9_CLK_SHIFT        (17U)
#define CLKCTL1_PSCCTL0_SET_FC10_CLK_MASK        (0x40000U)
#define CLKCTL1_PSCCTL0_SET_FC10_CLK_SHIFT       (18U)
#define CLKCTL1_PSCCTL0_SET_FC11_CLK_MASK        (0x80000U)
#define CLKCTL1_PSCCTL0_SET_FC11_CLK_SHIFT       (19U)
#define CLKCTL1_PSCCTL0_SET_FC12_CLK_MASK        (0x100000U)
#define CLKCTL1_PSCCTL0_SET_FC12_CLK_SHIFT       (20U)
#define CLKCTL1_PSCCTL0_SET_FC13_CLK_MASK        (0x200000U)
#define CLKCTL1_PSCCTL0_SET_FC13_CLK_SHIFT       (21U)
#define CLKCTL1_PSCCTL0_SET_FC14_SPI_CLK_MASK    (0x400000U)
#define CLKCTL1_PSCCTL0_SET_FC14_SPI_CLK_SHIFT   (22U)
#define CLKCTL1_PSCCTL0_SET_FC15_I2C_CLK_MASK    (0x800000U)
#define CLKCTL1_PSCCTL0_SET_FC15_I2C_CLK_SHIFT   (23U)
#define CLKCTL1_PSCCTL0_SET_DMIC0_MASK           (0x1000000U)
#define CLKCTL1_PSCCTL0_SET_DMIC0_SHIFT          (24U)
#define CLKCTL1_PSCCTL0_SET_FC16_SPI_CLK_MASK    (0x2000000U)
#define CLKCTL1_PSCCTL0_SET_FC16_SPI_CLK_SHIFT   (25U)
#define CLKCTL1_PSCCTL0_SET_OSEVENT_TIMER_MASK   (0x8000000U)
#define CLKCTL1_PSCCTL0_SET_OSEVENT_TIMER_SHIFT  (27U)
#define CLKCTL1_PSCCTL0_SET_FlexIO_MASK          (0x20000000U)
#define CLKCTL1_PSCCTL0_SET_FlexIO_SHIFT         (29U)
/*! @} */

/*! @name PSCCTL1_SET - Clock Set 1 */
/*! @{ */
#define CLKCTL1_PSCCTL1_SET_HSGPIO0_CLK_MASK     (0x1U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO0_CLK_SHIFT    (0U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO1_CLK_MASK     (0x2U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO1_CLK_SHIFT    (1U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO2_CLK_MASK     (0x4U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO2_CLK_SHIFT    (2U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO3_CLK_MASK     (0x8U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO3_CLK_SHIFT    (3U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO4_CLK_MASK     (0x10U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO4_CLK_SHIFT    (4U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO5_CLK_MASK     (0x20U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO5_CLK_SHIFT    (5U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO6_CLK_MASK     (0x40U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO6_CLK_SHIFT    (6U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO7_CLK_MASK     (0x80U)
#define CLKCTL1_PSCCTL1_SET_HSGPIO7_CLK_SHIFT    (7U)
#define CLKCTL1_PSCCTL1_SET_CRC_CLK_MASK         (0x10000U)
#define CLKCTL1_PSCCTL1_SET_CRC_CLK_SHIFT        (16U)
#define CLKCTL1_PSCCTL1_SET_DMAC0_CLK_MASK       (0x800000U)
#define CLKCTL1_PSCCTL1_SET_DMAC0_CLK_SHIFT      (23U)
#define CLKCTL1_PSCCTL1_SET_DMAC1_CLK_MASK       (0x1000000U)
#define CLKCTL1_PSCCTL1_SET_DMAC1_CLK_SHIFT      (24U)
#define CLKCTL1_PSCCTL1_SET_MU_CLK_MASK          (0x10000000U)
#define CLKCTL1_PSCCTL1_SET_MU_CLK_SHIFT         (28U)
#define CLKCTL1_PSCCTL1_SET_SEMA_CLK_MASK        (0x20000000U)
#define CLKCTL1_PSCCTL1_SET_SEMA_CLK_SHIFT       (29U)
#define CLKCTL1_PSCCTL1_SET_FREQME_CLK_MASK      (0x80000000U)
#define CLKCTL1_PSCCTL1_SET_FREQME_CLK_SHIFT     (31U)
/*! @} */

/*! @name PSCCTL2_SET - Clock Set 2 */
/*! @{ */
#define CLKCTL1_PSCCTL2_SET_CT32BIT0_CLK_MASK    (0x1U)
#define CLKCTL1_PSCCTL2_SET_CT32BIT0_CLK_SHIFT   (0U)
#define CLKCTL1_PSCCTL2_SET_CT32BIT1_CLK_MASK    (0x2U)
#define CLKCTL1_PSCCTL2_SET_CT32BIT1_CLK_SHIFT   (1U)
#define CLKCTL1_PSCCTL2_SET_CT32BIT2_CLK_MASK    (0x4U)
#define CLKCTL1_PSCCTL2_SET_CT32BIT2_CLK_SHIFT   (2U)
#define CLKCTL1_PSCCTL2_SET_CT32BIT3_CLK_MASK    (0x8U)
#define CLKCTL1_PSCCTL2_SET_CT32BIT3_CLK_SHIFT   (3U)
#define CLKCTL1_PSCCTL2_SET_CT32BIT4_CLK_MASK    (0x10U)
#define CLKCTL1_PSCCTL2_SET_CT32BIT4_CLK_SHIFT   (4U)
#define CLKCTL1_PSCCTL2_SET_RTCLITE_CLK_MASK     (0x80U)
#define CLKCTL1_PSCCTL2_SET_RTCLITE_CLK_SHIFT    (7U)
#define CLKCTL1_PSCCTL2_SET_MRT0_CLK_MASK        (0x100U)
#define CLKCTL1_PSCCTL2_SET_MRT0_CLK_SHIFT       (8U)
#define CLKCTL1_PSCCTL2_SET_WWDT1_CLK_MASK       (0x400U)
#define CLKCTL1_PSCCTL2_SET_WWDT1_CLK_SHIFT      (10U)
#define CLKCTL1_PSCCTL2_SET_I3C0_CLK_MASK        (0x10000U)
#define CLKCTL1_PSCCTL2_SET_I3C0_CLK_SHIFT       (16U)
#define CLKCTL1_PSCCTL2_SET_I3C1_CLK_MASK        (0x20000U)
#define CLKCTL1_PSCCTL2_SET_I3C1_CLK_SHIFT       (17U)
#define CLKCTL1_PSCCTL2_SET_GPIOINTCTL_CLK_MASK  (0x40000000U)
#define CLKCTL1_PSCCTL2_SET_GPIOINTCTL_CLK_SHIFT (30U)
#define CLKCTL1_PSCCTL2_SET_PIMCTL_CLK_MASK      (0x80000000U)
#define CLKCTL1_PSCCTL2_SET_PIMCTL_CLK_SHIFT     (31U)
/*! @} */

/*! @name PSCCTL0_CLR - Clock Clear 0 */
/*! @{ */
#define CLKCTL1_PSCCTL0_CLR_FC0_CLK_MASK         (0x100U)
#define CLKCTL1_PSCCTL0_CLR_FC0_CLK_SHIFT        (8U)
#define CLKCTL1_PSCCTL0_CLR_FC1_CLK_MASK         (0x200U)
#define CLKCTL1_PSCCTL0_CLR_FC1_CLK_SHIFT        (9U)
#define CLKCTL1_PSCCTL0_CLR_FC2_CLK_MASK         (0x400U)
#define CLKCTL1_PSCCTL0_CLR_FC2_CLK_SHIFT        (10U)
#define CLKCTL1_PSCCTL0_CLR_FC3_CLK_MASK         (0x800U)
#define CLKCTL1_PSCCTL0_CLR_FC3_CLK_SHIFT        (11U)
#define CLKCTL1_PSCCTL0_CLR_FC4_CLK_MASK         (0x1000U)
#define CLKCTL1_PSCCTL0_CLR_FC4_CLK_SHIFT        (12U)
#define CLKCTL1_PSCCTL0_CLR_FC5_CLK_MASK         (0x2000U)
#define CLKCTL1_PSCCTL0_CLR_FC5_CLK_SHIFT        (13U)
#define CLKCTL1_PSCCTL0_CLR_FC6_CLK_MASK         (0x4000U)
#define CLKCTL1_PSCCTL0_CLR_FC6_CLK_SHIFT        (14U)
#define CLKCTL1_PSCCTL0_CLR_FC7_CLK_MASK         (0x8000U)
#define CLKCTL1_PSCCTL0_CLR_FC7_CLK_SHIFT        (15U)
#define CLKCTL1_PSCCTL0_CLR_FC8_CLK_MASK         (0x10000U)
#define CLKCTL1_PSCCTL0_CLR_FC8_CLK_SHIFT        (16U)
#define CLKCTL1_PSCCTL0_CLR_FC9_CLK_MASK         (0x20000U)
#define CLKCTL1_PSCCTL0_CLR_FC9_CLK_SHIFT        (17U)
#define CLKCTL1_PSCCTL0_CLR_FC10_CLK_MASK        (0x40000U)
#define CLKCTL1_PSCCTL0_CLR_FC10_CLK_SHIFT       (18U)
#define CLKCTL1_PSCCTL0_CLR_FC11_CLK_MASK        (0x80000U)
#define CLKCTL1_PSCCTL0_CLR_FC11_CLK_SHIFT       (19U)
#define CLKCTL1_PSCCTL0_CLR_FC12_CLK_MASK        (0x100000U)
#define CLKCTL1_PSCCTL0_CLR_FC12_CLK_SHIFT       (20U)
#define CLKCTL1_PSCCTL0_CLR_FC13_CLK_MASK        (0x200000U)
#define CLKCTL1_PSCCTL0_CLR_FC13_CLK_SHIFT       (21U)
#define CLKCTL1_PSCCTL0_CLR_FC14_SPI_CLK_MASK    (0x400000U)
#define CLKCTL1_PSCCTL0_CLR_FC14_SPI_CLK_SHIFT   (22U)
#define CLKCTL1_PSCCTL0_CLR_FC15_I2C_CLK_MASK    (0x800000U)
#define CLKCTL1_PSCCTL0_CLR_FC15_I2C_CLK_SHIFT   (23U)
#define CLKCTL1_PSCCTL0_CLR_DMIC0_MASK           (0x1000000U)
#define CLKCTL1_PSCCTL0_CLR_DMIC0_SHIFT          (24U)
#define CLKCTL1_PSCCTL0_CLR_FC16_SPI_CLK_MASK    (0x2000000U)
#define CLKCTL1_PSCCTL0_CLR_FC16_SPI_CLK_SHIFT   (25U)
#define CLKCTL1_PSCCTL0_CLR_OSEVENT_TIMER_MASK   (0x8000000U)
#define CLKCTL1_PSCCTL0_CLR_OSEVENT_TIMER_SHIFT  (27U)
#define CLKCTL1_PSCCTL0_CLR_FlexIO_MASK          (0x20000000U)
#define CLKCTL1_PSCCTL0_CLR_FlexIO_SHIFT         (29U)
/*! @} */

/*! @name PSCCTL1_CLR - Clock Clear 1 */
/*! @{ */
#define CLKCTL1_PSCCTL1_CLR_HSGPIO0_CLK_MASK     (0x1U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO0_CLK_SHIFT    (0U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO1_CLK_MASK     (0x2U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO1_CLK_SHIFT    (1U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO2_CLK_MASK     (0x4U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO2_CLK_SHIFT    (2U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO3_CLK_MASK     (0x8U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO3_CLK_SHIFT    (3U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO4_CLK_MASK     (0x10U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO4_CLK_SHIFT    (4U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO5_CLK_MASK     (0x20U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO5_CLK_SHIFT    (5U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO6_CLK_MASK     (0x40U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO6_CLK_SHIFT    (6U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO7_CLK_MASK     (0x80U)
#define CLKCTL1_PSCCTL1_CLR_HSGPIO7_CLK_SHIFT    (7U)
#define CLKCTL1_PSCCTL1_CLR_CRC_CLK_MASK         (0x10000U)
#define CLKCTL1_PSCCTL1_CLR_CRC_CLK_SHIFT        (16U)
#define CLKCTL1_PSCCTL1_CLR_DMAC0_CLK_MASK       (0x800000U)
#define CLKCTL1_PSCCTL1_CLR_DMAC0_CLK_SHIFT      (23U)
#define CLKCTL1_PSCCTL1_CLR_DMAC1_CLK_MASK       (0x1000000U)
#define CLKCTL1_PSCCTL1_CLR_DMAC1_CLK_SHIFT      (24U)
#define CLKCTL1_PSCCTL1_CLR_MU_CLK_MASK          (0x10000000U)
#define CLKCTL1_PSCCTL1_CLR_MU_CLK_SHIFT         (28U)
#define CLKCTL1_PSCCTL1_CLR_SEMA_CLK_MASK        (0x20000000U)
#define CLKCTL1_PSCCTL1_CLR_SEMA_CLK_SHIFT       (29U)
#define CLKCTL1_PSCCTL1_CLR_FREQME_CLK_MASK      (0x80000000U)
#define CLKCTL1_PSCCTL1_CLR_FREQME_CLK_SHIFT     (31U)
/*! @} */

/*! @name PSCCTL2_CLR - Clock Clear 2 */
/*! @{ */
#define CLKCTL1_PSCCTL2_CLR_CT32BIT0_CLK_MASK    (0x1U)
#define CLKCTL1_PSCCTL2_CLR_CT32BIT0_CLK_SHIFT   (0U)
#define CLKCTL1_PSCCTL2_CLR_CT32BIT1_CLK_MASK    (0x2U)
#define CLKCTL1_PSCCTL2_CLR_CT32BIT1_CLK_SHIFT   (1U)
#define CLKCTL1_PSCCTL2_CLR_CT32BIT2_CLK_MASK    (0x4U)
#define CLKCTL1_PSCCTL2_CLR_CT32BIT2_CLK_SHIFT   (2U)
#define CLKCTL1_PSCCTL2_CLR_CT32BIT3_CLK_MASK    (0x8U)
#define CLKCTL1_PSCCTL2_CLR_CT32BIT3_CLK_SHIFT   (3U)
#define CLKCTL1_PSCCTL2_CLR_CT32BIT4_CLK_MASK    (0x10U)
#define CLKCTL1_PSCCTL2_CLR_CT32BIT4_CLK_SHIFT   (4U)
#define CLKCTL1_PSCCTL2_CLR_RTCLITE_CLK_MASK     (0x80U)
#define CLKCTL1_PSCCTL2_CLR_RTCLITE_CLK_SHIFT    (7U)
#define CLKCTL1_PSCCTL2_CLR_MRT0_CLK_MASK        (0x100U)
#define CLKCTL1_PSCCTL2_CLR_MRT0_CLK_SHIFT       (8U)
#define CLKCTL1_PSCCTL2_CLR_WWDT1_CLK_MASK       (0x400U)
#define CLKCTL1_PSCCTL2_CLR_WWDT1_CLK_SHIFT      (10U)
#define CLKCTL1_PSCCTL2_CLR_I3C0_CLK_MASK        (0x10000U)
#define CLKCTL1_PSCCTL2_CLR_I3C0_CLK_SHIFT       (16U)
#define CLKCTL1_PSCCTL2_CLR_I3C1_CLK_MASK        (0x20000U)
#define CLKCTL1_PSCCTL2_CLR_I3C1_CLK_SHIFT       (17U)
#define CLKCTL1_PSCCTL2_CLR_GPIOINTCTL_CLK_MASK  (0x40000000U)
#define CLKCTL1_PSCCTL2_CLR_GPIOINTCTL_CLK_SHIFT (30U)
#define CLKCTL1_PSCCTL2_CLR_PIMCTL_CLK_MASK      (0x80000000U)
#define CLKCTL1_PSCCTL2_CLR_PIMCTL_CLK_SHIFT     (31U)
/*! @} */

/*! @name AUDIOPLL0CLKSEL - Audio PLL0 Clock Select */
/*! @{ */
#define CLKCTL1_AUDIOPLL0CLKSEL_SEL_MASK         (0x7U)
#define CLKCTL1_AUDIOPLL0CLKSEL_SEL_SHIFT        (0U)
/*! SEL - Audio PLL0 Clock Select
 *  0b000..FRO Clock (Divided-by-8 selection)
 *  0b001..OSC_CLK clock (User-Selectable)
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_AUDIOPLL0CLKSEL_SEL(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOPLL0CLKSEL_SEL_SHIFT)) & CLKCTL1_AUDIOPLL0CLKSEL_SEL_MASK)
/*! @} */

/*! @name AUDIOPLL0CTL0 - Audio PLL0 Control 0 */
/*! @{ */
#define CLKCTL1_AUDIOPLL0CTL0_BYPASS_MASK        (0x1U)
#define CLKCTL1_AUDIOPLL0CTL0_BYPASS_SHIFT       (0U)
#define CLKCTL1_AUDIOPLL0CTL0_RESET_MASK         (0x2U)
#define CLKCTL1_AUDIOPLL0CTL0_RESET_SHIFT        (1U)
#define CLKCTL1_AUDIOPLL0CTL0_HOLDRINGOFF_ENA_MASK (0x2000U)
#define CLKCTL1_AUDIOPLL0CTL0_HOLDRINGOFF_ENA_SHIFT (13U)
#define CLKCTL1_AUDIOPLL0CTL0_MULT_MASK          (0xFF0000U)
#define CLKCTL1_AUDIOPLL0CTL0_MULT_SHIFT         (16U)
/*! MULT - Multiplication Factor
 *  0b00010000..Divide by 16
 *  0b00010001..Divide by 17
 *  0b00010010..Divide by 18
 *  0b00010011..Divide by 19
 *  0b00010100..Divide by 20
 *  0b00010101..Divide by 21
 *  0b00010110..Divide by 22
 */
#define CLKCTL1_AUDIOPLL0CTL0_MULT(x)            (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOPLL0CTL0_MULT_SHIFT)) & CLKCTL1_AUDIOPLL0CTL0_MULT_MASK)
/*! @} */

/*! @name AUDIOPLL0LOCKTIMEDIV2 - Audio PLL0 Lock Time Divide-by-2 */
/*! @{ */
#define CLKCTL1_AUDIOPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_MASK (0xFFFFU)
#define CLKCTL1_AUDIOPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_SHIFT (0U)
/*! LOCKTIMEDIV2 - AUDIOPLL0 Lock Time Divide-by-2
 */
#define CLKCTL1_AUDIOPLL0LOCKTIMEDIV2_LOCKTIMEDIV2(x) (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_SHIFT)) & CLKCTL1_AUDIOPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_MASK)
/*! @} */

/*! @name AUDIOPLL0NUM - Audio PLL0 Numerator */
/*! @{ */
#define CLKCTL1_AUDIOPLL0NUM_NUM_MASK            (0x3FFFFFFFU)
#define CLKCTL1_AUDIOPLL0NUM_NUM_SHIFT           (0U)
/*! NUM - Numerator
 */
#define CLKCTL1_AUDIOPLL0NUM_NUM(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOPLL0NUM_NUM_SHIFT)) & CLKCTL1_AUDIOPLL0NUM_NUM_MASK)
/*! @} */

/*! @name AUDIOPLL0DENOM - Audio PLL0 Denominator */
/*! @{ */
#define CLKCTL1_AUDIOPLL0DENOM_DENOM_MASK        (0x3FFFFFFFU)
#define CLKCTL1_AUDIOPLL0DENOM_DENOM_SHIFT       (0U)
/*! DENOM - Denominator
 */
#define CLKCTL1_AUDIOPLL0DENOM_DENOM(x)          (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOPLL0DENOM_DENOM_SHIFT)) & CLKCTL1_AUDIOPLL0DENOM_DENOM_MASK)
/*! @} */

/*! @name AUDIOPLL0PFD - Audio PLL0 PFD */
/*! @{ */
#define CLKCTL1_AUDIOPLL0PFD_PFD0_MASK           (0x3FU)
#define CLKCTL1_AUDIOPLL0PFD_PFD0_SHIFT          (0U)
/*! PFD0 - PLL Fractional Divider 0
 */
#define CLKCTL1_AUDIOPLL0PFD_PFD0(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOPLL0PFD_PFD0_SHIFT)) & CLKCTL1_AUDIOPLL0PFD_PFD0_MASK)
#define CLKCTL1_AUDIOPLL0PFD_PFD0_CLKRDY_MASK    (0x40U)
#define CLKCTL1_AUDIOPLL0PFD_PFD0_CLKRDY_SHIFT   (6U)
#define CLKCTL1_AUDIOPLL0PFD_PFD0_CLKGATE_MASK   (0x80U)
#define CLKCTL1_AUDIOPLL0PFD_PFD0_CLKGATE_SHIFT  (7U)
#define CLKCTL1_AUDIOPLL0PFD_PFD1_MASK           (0x3F00U)
#define CLKCTL1_AUDIOPLL0PFD_PFD1_SHIFT          (8U)
/*! PFD1 - PLL Fractional Divider 1
 */
#define CLKCTL1_AUDIOPLL0PFD_PFD1(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOPLL0PFD_PFD1_SHIFT)) & CLKCTL1_AUDIOPLL0PFD_PFD1_MASK)
#define CLKCTL1_AUDIOPLL0PFD_PFD1_CLKRDY_MASK    (0x4000U)
#define CLKCTL1_AUDIOPLL0PFD_PFD1_CLKRDY_SHIFT   (14U)
#define CLKCTL1_AUDIOPLL0PFD_PFD1_CLKGATE_MASK   (0x8000U)
#define CLKCTL1_AUDIOPLL0PFD_PFD1_CLKGATE_SHIFT  (15U)
#define CLKCTL1_AUDIOPLL0PFD_PFD2_MASK           (0x3F0000U)
#define CLKCTL1_AUDIOPLL0PFD_PFD2_SHIFT          (16U)
/*! PFD2 - PLL Fractional Divider 2
 */
#define CLKCTL1_AUDIOPLL0PFD_PFD2(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOPLL0PFD_PFD2_SHIFT)) & CLKCTL1_AUDIOPLL0PFD_PFD2_MASK)
#define CLKCTL1_AUDIOPLL0PFD_PFD2_CLKRDY_MASK    (0x400000U)
#define CLKCTL1_AUDIOPLL0PFD_PFD2_CLKRDY_SHIFT   (22U)
#define CLKCTL1_AUDIOPLL0PFD_PFD2_CLKGATE_MASK   (0x800000U)
#define CLKCTL1_AUDIOPLL0PFD_PFD2_CLKGATE_SHIFT  (23U)
#define CLKCTL1_AUDIOPLL0PFD_PFD3_MASK           (0x3F000000U)
#define CLKCTL1_AUDIOPLL0PFD_PFD3_SHIFT          (24U)
/*! PFD3 - PLL Fractional Divider 3
 */
#define CLKCTL1_AUDIOPLL0PFD_PFD3(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOPLL0PFD_PFD3_SHIFT)) & CLKCTL1_AUDIOPLL0PFD_PFD3_MASK)
#define CLKCTL1_AUDIOPLL0PFD_PFD3_CLKRDY_MASK    (0x40000000U)
#define CLKCTL1_AUDIOPLL0PFD_PFD3_CLKRDY_SHIFT   (30U)
#define CLKCTL1_AUDIOPLL0PFD_PFD3_CLKGATE_MASK   (0x80000000U)
#define CLKCTL1_AUDIOPLL0PFD_PFD3_CLKGATE_SHIFT  (31U)
/*! @} */

/*! @name AUDIOPLLCLKDIV - Audio PLL Clock Divider */
/*! @{ */
#define CLKCTL1_AUDIOPLLCLKDIV_DIV_MASK          (0xFFU)
#define CLKCTL1_AUDIOPLLCLKDIV_DIV_SHIFT         (0U)
/*! DIV - 32 KHz Wake Clock Divider Value
 */
#define CLKCTL1_AUDIOPLLCLKDIV_DIV(x)            (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOPLLCLKDIV_DIV_SHIFT)) & CLKCTL1_AUDIOPLLCLKDIV_DIV_MASK)
#define CLKCTL1_AUDIOPLLCLKDIV_RESET_MASK        (0x20000000U)
#define CLKCTL1_AUDIOPLLCLKDIV_RESET_SHIFT       (29U)
#define CLKCTL1_AUDIOPLLCLKDIV_HALT_MASK         (0x40000000U)
#define CLKCTL1_AUDIOPLLCLKDIV_HALT_SHIFT        (30U)
#define CLKCTL1_AUDIOPLLCLKDIV_REQFLAG_MASK      (0x80000000U)
#define CLKCTL1_AUDIOPLLCLKDIV_REQFLAG_SHIFT     (31U)
/*! @} */

/*! @name DSPCPUCLKDIV - DSP CPU Clock Divider */
/*! @{ */
#define CLKCTL1_DSPCPUCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL1_DSPCPUCLKDIV_DIV_SHIFT           (0U)
/*! DIV - DSP Clock Divider Value
 */
#define CLKCTL1_DSPCPUCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_DSPCPUCLKDIV_DIV_SHIFT)) & CLKCTL1_DSPCPUCLKDIV_DIV_MASK)
#define CLKCTL1_DSPCPUCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL1_DSPCPUCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL1_DSPCPUCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL1_DSPCPUCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL1_DSPCPUCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL1_DSPCPUCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name DSPCPUCLKSELA - DSP CPU Clock Select A */
/*! @{ */
#define CLKCTL1_DSPCPUCLKSELA_SEL_MASK           (0x3U)
#define CLKCTL1_DSPCPUCLKSELA_SEL_SHIFT          (0U)
/*! SEL - DSP Main 1st Stage Control Clock Source
 *  0b00..FRO Clock
 *  0b01..OSC_CLK Clock
 *  0b10..Low Power Oscillator Clock (LPOSC)
 *  0b11..Reserved
 */
#define CLKCTL1_DSPCPUCLKSELA_SEL(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL1_DSPCPUCLKSELA_SEL_SHIFT)) & CLKCTL1_DSPCPUCLKSELA_SEL_MASK)
/*! @} */

/*! @name DSPCPUCLKSELB - DSP CPU Clock Select B */
/*! @{ */
#define CLKCTL1_DSPCPUCLKSELB_SEL_MASK           (0x3U)
#define CLKCTL1_DSPCPUCLKSELB_SEL_SHIFT          (0U)
/*! SEL - Main Clock Source
 *  0b00..MAINCLKSELA 1st Stage Clock
 *  0b01..Main System PLL Clock
 *  0b10..DSP System PLL Clock
 *  0b11..RTC 32 KHz Clock
 */
#define CLKCTL1_DSPCPUCLKSELB_SEL(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL1_DSPCPUCLKSELB_SEL_SHIFT)) & CLKCTL1_DSPCPUCLKSELB_SEL_MASK)
/*! @} */

/*! @name OSEVENTTFCLKSEL - OS Event Timer Functional Clock Select */
/*! @{ */
#define CLKCTL1_OSEVENTTFCLKSEL_SEL_MASK         (0x7U)
#define CLKCTL1_OSEVENTTFCLKSEL_SEL_SHIFT        (0U)
/*! SEL - OS Event Timer Functional Clock Source
 *  0b000..Low Power Oscillator Clock (LPOSC)
 *  0b001..RTC 32 KHz Clock
 *  0b010..HCLK Free-Running Clock (Global Time Stamping)
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_OSEVENTTFCLKSEL_SEL(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL1_OSEVENTTFCLKSEL_SEL_SHIFT)) & CLKCTL1_OSEVENTTFCLKSEL_SEL_MASK)
/*! @} */

/*! @name FRGCLKSEL - Fractional Rate Generator 0 Clock Select..Fractional Rate Generator 16 Clock Select */
/*! @{ */
#define CLKCTL1_FRGCLKSEL_SEL_MASK               (0x7U)
#define CLKCTL1_FRGCLKSEL_SEL_SHIFT              (0U)
/*! SEL - Fractional Generator 16 Clock Source
 *  0b000..Main Clock
 *  0b001..FRG PLL Clock
 *  0b010..FRO Clock Divided by 4
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_FRGCLKSEL_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << CLKCTL1_FRGCLKSEL_SEL_SHIFT)) & CLKCTL1_FRGCLKSEL_SEL_MASK)
/*! @} */

/* The count of CLKCTL1_FRGCLKSEL */
#define CLKCTL1_FRGCLKSEL_COUNT                  (17U)

/*! @name FRGCTL - Fractional Rate Generator 0 Control..Fractional Rate Generator 16 Control */
/*! @{ */
#define CLKCTL1_FRGCTL_DIV_MASK                  (0xFFU)
#define CLKCTL1_FRGCTL_DIV_SHIFT                 (0U)
#define CLKCTL1_FRGCTL_DIV(x)                    (((uint32_t)(((uint32_t)(x)) << CLKCTL1_FRGCTL_DIV_SHIFT)) & CLKCTL1_FRGCTL_DIV_MASK)
#define CLKCTL1_FRGCTL_MULT_MASK                 (0xFF00U)
#define CLKCTL1_FRGCTL_MULT_SHIFT                (8U)
#define CLKCTL1_FRGCTL_MULT(x)                   (((uint32_t)(((uint32_t)(x)) << CLKCTL1_FRGCTL_MULT_SHIFT)) & CLKCTL1_FRGCTL_MULT_MASK)
/*! @} */

/* The count of CLKCTL1_FRGCTL */
#define CLKCTL1_FRGCTL_COUNT                     (17U)

/*! @name FCFCLKSEL - Flexcomm0 Clock Select..Flexcomm16 Clock Select */
/*! @{ */
#define CLKCTL1_FCFCLKSEL_SEL_MASK               (0x7U)
#define CLKCTL1_FCFCLKSEL_SEL_SHIFT              (0U)
/*! SEL - Flexcomm Functional Clock Source
 *  0b000..FRO Clock Divided-by-4
 *  0b001..Audio PLL Clock
 *  0b010..Master Clock In
 *  0b011..FCn FRG Clock
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_FCFCLKSEL_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << CLKCTL1_FCFCLKSEL_SEL_SHIFT)) & CLKCTL1_FCFCLKSEL_SEL_MASK)
/*! @} */

/* The count of CLKCTL1_FCFCLKSEL */
#define CLKCTL1_FCFCLKSEL_COUNT                  (17U)

/*! @name FRG17CLKSEL - Fractional Rate Generator 17 Clock Select */
/*! @{ */
#define CLKCTL1_FRG17CLKSEL_SEL_MASK             (0x7U)
#define CLKCTL1_FRG17CLKSEL_SEL_SHIFT            (0U)
/*! SEL - Fractional Generator 17 Clock Source
 *  0b000..Main Clock
 *  0b001..FRG PLL Clock
 *  0b010..FRO Clock Divided by 4
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_FRG17CLKSEL_SEL(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL1_FRG17CLKSEL_SEL_SHIFT)) & CLKCTL1_FRG17CLKSEL_SEL_MASK)
/*! @} */

/*! @name FRG17CTL - Fractional Rate Generator 17 Control */
/*! @{ */
#define CLKCTL1_FRG17CTL_DIV_MASK                (0xFFU)
#define CLKCTL1_FRG17CTL_DIV_SHIFT               (0U)
#define CLKCTL1_FRG17CTL_DIV(x)                  (((uint32_t)(((uint32_t)(x)) << CLKCTL1_FRG17CTL_DIV_SHIFT)) & CLKCTL1_FRG17CTL_DIV_MASK)
#define CLKCTL1_FRG17CTL_MULT_MASK               (0xFF00U)
#define CLKCTL1_FRG17CTL_MULT_SHIFT              (8U)
#define CLKCTL1_FRG17CTL_MULT(x)                 (((uint32_t)(((uint32_t)(x)) << CLKCTL1_FRG17CTL_MULT_SHIFT)) & CLKCTL1_FRG17CTL_MULT_MASK)
/*! @} */

/*! @name FLEXIOCLKSEL - FlexIO Clock Select */
/*! @{ */
#define CLKCTL1_FLEXIOCLKSEL_SEL_MASK            (0x7U)
#define CLKCTL1_FLEXIOCLKSEL_SEL_SHIFT           (0U)
/*! SEL - FlexIO Functional Clock Source
 *  0b000..FRO Clock (Divided-by-4 selection)
 *  0b001..Audio PLL Clock
 *  0b010..Master Clock In
 *  0b011..FC17 FRG Clock
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_FLEXIOCLKSEL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_FLEXIOCLKSEL_SEL_SHIFT)) & CLKCTL1_FLEXIOCLKSEL_SEL_MASK)
/*! @} */

/*! @name FLEXIOCLKDIV - FlexIO Clock Divider */
/*! @{ */
#define CLKCTL1_FLEXIOCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL1_FLEXIOCLKDIV_DIV_SHIFT           (0U)
/*! DIV - FLEXIO Clock Divider Value
 */
#define CLKCTL1_FLEXIOCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_FLEXIOCLKDIV_DIV_SHIFT)) & CLKCTL1_FLEXIOCLKDIV_DIV_MASK)
#define CLKCTL1_FLEXIOCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL1_FLEXIOCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL1_FLEXIOCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL1_FLEXIOCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL1_FLEXIOCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL1_FLEXIOCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name FRGPLLCLKDIV - Fractional Rate Generator PLL Clock Divider */
/*! @{ */
#define CLKCTL1_FRGPLLCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL1_FRGPLLCLKDIV_DIV_SHIFT           (0U)
/*! DIV - FRG PLL Clock Divider Value
 */
#define CLKCTL1_FRGPLLCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_FRGPLLCLKDIV_DIV_SHIFT)) & CLKCTL1_FRGPLLCLKDIV_DIV_MASK)
#define CLKCTL1_FRGPLLCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL1_FRGPLLCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL1_FRGPLLCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL1_FRGPLLCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL1_FRGPLLCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL1_FRGPLLCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name DMIC0FCLKSEL - DMIC0 Functional Clock Select */
/*! @{ */
#define CLKCTL1_DMIC0FCLKSEL_SEL_MASK            (0x7U)
#define CLKCTL1_DMIC0FCLKSEL_SEL_SHIFT           (0U)
/*! SEL - DMIC Functional Clock Source
 *  0b000..FRO Clock (Divided-by-4 selection)
 *  0b001..Audio PLL Clock
 *  0b010..Master Clock In
 *  0b011..Low Power Oscillator Clock (LPOSC)
 *  0b100..32 KHz Wake Clock
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_DMIC0FCLKSEL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_DMIC0FCLKSEL_SEL_SHIFT)) & CLKCTL1_DMIC0FCLKSEL_SEL_MASK)
/*! @} */

/*! @name DMIC0FCLKDIV - DMIC0 Functional Clock Divider */
/*! @{ */
#define CLKCTL1_DMIC0FCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL1_DMIC0FCLKDIV_DIV_SHIFT           (0U)
/*! DIV - 32 KHz Wake Clock Divider Value
 */
#define CLKCTL1_DMIC0FCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_DMIC0FCLKDIV_DIV_SHIFT)) & CLKCTL1_DMIC0FCLKDIV_DIV_MASK)
#define CLKCTL1_DMIC0FCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL1_DMIC0FCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL1_DMIC0FCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL1_DMIC0FCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL1_DMIC0FCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL1_DMIC0FCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name CT32BITFCLKSEL - CT32BIT bit timer 0 Functional Clock Select..CT32BIT bit timer 4 Functional Clock Select */
/*! @{ */
#define CLKCTL1_CT32BITFCLKSEL_SEL_MASK          (0x7U)
#define CLKCTL1_CT32BITFCLKSEL_SEL_SHIFT         (0U)
/*! SEL - CT32BIT bit timer 4 Functional Clock Source
 *  0b000..Main Clock
 *  0b001..FRO Clock
 *  0b010..Audio PLL Clock
 *  0b011..Master Clock In
 *  0b100..32 KHZ Wake Clock
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_CT32BITFCLKSEL_SEL(x)            (((uint32_t)(((uint32_t)(x)) << CLKCTL1_CT32BITFCLKSEL_SEL_SHIFT)) & CLKCTL1_CT32BITFCLKSEL_SEL_MASK)
/*! @} */

/* The count of CLKCTL1_CT32BITFCLKSEL */
#define CLKCTL1_CT32BITFCLKSEL_COUNT             (5U)

/*! @name AUDIOMCLKSEL - Audio MCLK Clock Select */
/*! @{ */
#define CLKCTL1_AUDIOMCLKSEL_SEL_MASK            (0x7U)
#define CLKCTL1_AUDIOMCLKSEL_SEL_SHIFT           (0U)
/*! SEL - Audio MCLK Clock Source Select
 *  0b000..FRO Clock (Divided-by-8 selection)
 *  0b001..AUDIO PLL Clock (Shared Domain)
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_AUDIOMCLKSEL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOMCLKSEL_SEL_SHIFT)) & CLKCTL1_AUDIOMCLKSEL_SEL_MASK)
/*! @} */

/*! @name AUDIOMCLKDIV - Audio MCLK Clock Divider */
/*! @{ */
#define CLKCTL1_AUDIOMCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL1_AUDIOMCLKDIV_DIV_SHIFT           (0U)
/*! DIV - Audio MCLK Clock Divider Value
 */
#define CLKCTL1_AUDIOMCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_AUDIOMCLKDIV_DIV_SHIFT)) & CLKCTL1_AUDIOMCLKDIV_DIV_MASK)
#define CLKCTL1_AUDIOMCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL1_AUDIOMCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL1_AUDIOMCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL1_AUDIOMCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL1_AUDIOMCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL1_AUDIOMCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name CLKOUTSEL0 - CLKOUT Clock Select 0 */
/*! @{ */
#define CLKCTL1_CLKOUTSEL0_SEL_MASK              (0x7U)
#define CLKCTL1_CLKOUTSEL0_SEL_SHIFT             (0U)
/*! SEL - Clock Output Select 1st Stage
 *  0b000..OSC_CLK Clock
 *  0b001..Low Power Oscillator Clock (LPOSC)
 *  0b010..FRO Clock
 *  0b011..Main Clock
 *  0b100..DSP Main Clock
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_CLKOUTSEL0_SEL(x)                (((uint32_t)(((uint32_t)(x)) << CLKCTL1_CLKOUTSEL0_SEL_SHIFT)) & CLKCTL1_CLKOUTSEL0_SEL_MASK)
/*! @} */

/*! @name CLKOUTSEL1 - CLKOUT Clock Select 1 */
/*! @{ */
#define CLKCTL1_CLKOUTSEL1_SEL_MASK              (0x7U)
#define CLKCTL1_CLKOUTSEL1_SEL_SHIFT             (0U)
/*! SEL - Clock Out Source
 *  0b000..CLKOUTSEL0 Multiplexed Output
 *  0b001..Main System PLL Clock
 *  0b010..SYSPLL0 AUX0_PLL_Clock
 *  0b011..DSP PLL Clock
 *  0b100..SYSPLL0 AUX1_PLL_Clock
 *  0b101..AUDIO PLL Clock
 *  0b110..32 KHz RTC Clock
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_CLKOUTSEL1_SEL(x)                (((uint32_t)(((uint32_t)(x)) << CLKCTL1_CLKOUTSEL1_SEL_SHIFT)) & CLKCTL1_CLKOUTSEL1_SEL_MASK)
/*! @} */

/*! @name CLKOUTFCLKDIV - CLKOUT Functional Clock Divider */
/*! @{ */
#define CLKCTL1_CLKOUTFCLKDIV_DIV_MASK           (0xFFU)
#define CLKCTL1_CLKOUTFCLKDIV_DIV_SHIFT          (0U)
/*! DIV - Clock-Out Clock Divider Value
 */
#define CLKCTL1_CLKOUTFCLKDIV_DIV(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL1_CLKOUTFCLKDIV_DIV_SHIFT)) & CLKCTL1_CLKOUTFCLKDIV_DIV_MASK)
#define CLKCTL1_CLKOUTFCLKDIV_RESET_MASK         (0x20000000U)
#define CLKCTL1_CLKOUTFCLKDIV_RESET_SHIFT        (29U)
#define CLKCTL1_CLKOUTFCLKDIV_HALT_MASK          (0x40000000U)
#define CLKCTL1_CLKOUTFCLKDIV_HALT_SHIFT         (30U)
#define CLKCTL1_CLKOUTFCLKDIV_REQFLAG_MASK       (0x80000000U)
#define CLKCTL1_CLKOUTFCLKDIV_REQFLAG_SHIFT      (31U)
/*! @} */

/*! @name I3C01FCLKSEL - I3C0, I3C1 Functional Clock Select */
/*! @{ */
#define CLKCTL1_I3C01FCLKSEL_SEL_MASK            (0x7U)
#define CLKCTL1_I3C01FCLKSEL_SEL_SHIFT           (0U)
/*! SEL - I3C0, I3C1 Clock Source
 *  0b000..Main Clock
 *  0b001..FRO Clock (Divided-by-8 selection)
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_I3C01FCLKSEL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_I3C01FCLKSEL_SEL_SHIFT)) & CLKCTL1_I3C01FCLKSEL_SEL_MASK)
/*! @} */

/*! @name I3C01FCLKSTCSEL - I3C0, I3C1 Functional Slow Time Control Clock Select */
/*! @{ */
#define CLKCTL1_I3C01FCLKSTCSEL_SEL_MASK         (0x7U)
#define CLKCTL1_I3C01FCLKSTCSEL_SEL_SHIFT        (0U)
/*! SEL - I3C0, I3C1 Clock Source
 *  0b000..I3C0 FCLK
 *  0b001..Low Power Oscillator Clock (LPOSC)
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_I3C01FCLKSTCSEL_SEL(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL1_I3C01FCLKSTCSEL_SEL_SHIFT)) & CLKCTL1_I3C01FCLKSTCSEL_SEL_MASK)
/*! @} */

/*! @name I3C01FCLKSTCDIV - I3C0, I3C1 Functional Slow Time Control Clock Divider */
/*! @{ */
#define CLKCTL1_I3C01FCLKSTCDIV_DIV_MASK         (0xFFU)
#define CLKCTL1_I3C01FCLKSTCDIV_DIV_SHIFT        (0U)
/*! DIV - I3C0, I3C1 Clock Divider Value
 */
#define CLKCTL1_I3C01FCLKSTCDIV_DIV(x)           (((uint32_t)(((uint32_t)(x)) << CLKCTL1_I3C01FCLKSTCDIV_DIV_SHIFT)) & CLKCTL1_I3C01FCLKSTCDIV_DIV_MASK)
#define CLKCTL1_I3C01FCLKSTCDIV_RESET_MASK       (0x20000000U)
#define CLKCTL1_I3C01FCLKSTCDIV_RESET_SHIFT      (29U)
#define CLKCTL1_I3C01FCLKSTCDIV_HALT_MASK        (0x40000000U)
#define CLKCTL1_I3C01FCLKSTCDIV_HALT_SHIFT       (30U)
#define CLKCTL1_I3C01FCLKSTCDIV_REQFLAG_MASK     (0x80000000U)
#define CLKCTL1_I3C01FCLKSTCDIV_REQFLAG_SHIFT    (31U)
/*! @} */

/*! @name I3C01FCLKSDIV - I3C0, I3C1 Functional Slow Clock Divider */
/*! @{ */
#define CLKCTL1_I3C01FCLKSDIV_DIV_MASK           (0xFFU)
#define CLKCTL1_I3C01FCLKSDIV_DIV_SHIFT          (0U)
/*! DIV - I3C0, I3C1 Clock Divider Value
 */
#define CLKCTL1_I3C01FCLKSDIV_DIV(x)             (((uint32_t)(((uint32_t)(x)) << CLKCTL1_I3C01FCLKSDIV_DIV_SHIFT)) & CLKCTL1_I3C01FCLKSDIV_DIV_MASK)
#define CLKCTL1_I3C01FCLKSDIV_RESET_MASK         (0x20000000U)
#define CLKCTL1_I3C01FCLKSDIV_RESET_SHIFT        (29U)
#define CLKCTL1_I3C01FCLKSDIV_HALT_MASK          (0x40000000U)
#define CLKCTL1_I3C01FCLKSDIV_HALT_SHIFT         (30U)
#define CLKCTL1_I3C01FCLKSDIV_REQFLAG_MASK       (0x80000000U)
#define CLKCTL1_I3C01FCLKSDIV_REQFLAG_SHIFT      (31U)
/*! @} */

/*! @name I3C01FCLKDIV - I3C0, I3C1 Functional Clock Divider */
/*! @{ */
#define CLKCTL1_I3C01FCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL1_I3C01FCLKDIV_DIV_SHIFT           (0U)
/*! DIV - I3C0, I3C1 Clock Divider Value
 */
#define CLKCTL1_I3C01FCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_I3C01FCLKDIV_DIV_SHIFT)) & CLKCTL1_I3C01FCLKDIV_DIV_MASK)
#define CLKCTL1_I3C01FCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL1_I3C01FCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL1_I3C01FCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL1_I3C01FCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL1_I3C01FCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL1_I3C01FCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */

/*! @name I3C01FCLKSTSTCLKSEL - I3C01 Functional Clock Select */
/*! @{ */
#define CLKCTL1_I3C01FCLKSTSTCLKSEL_SEL_MASK     (0x7U)
#define CLKCTL1_I3C01FCLKSTSTCLKSEL_SEL_SHIFT    (0U)
/*! SEL - I3C0, I3C1 FCLK Test Clock Source
 *  0b000..Low Power Oscillator Clock (LPOSC)
 *  0b001..Reserved
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_I3C01FCLKSTSTCLKSEL_SEL(x)       (((uint32_t)(((uint32_t)(x)) << CLKCTL1_I3C01FCLKSTSTCLKSEL_SEL_SHIFT)) & CLKCTL1_I3C01FCLKSTSTCLKSEL_SEL_MASK)
/*! @} */

/*! @name WDT1FCLKSEL - Watchdog Timer 1 Functional Clock Select */
/*! @{ */
#define CLKCTL1_WDT1FCLKSEL_SEL_MASK             (0x7U)
#define CLKCTL1_WDT1FCLKSEL_SEL_SHIFT            (0U)
/*! SEL - WDT1 Functional Clock Source
 *  0b000..Low Power Oscillator Clock (LPOSC)
 *  0b001..Main Clock
 *  0b010..Reserved
 *  0b011..Reserved
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_WDT1FCLKSEL_SEL(x)               (((uint32_t)(((uint32_t)(x)) << CLKCTL1_WDT1FCLKSEL_SEL_SHIFT)) & CLKCTL1_WDT1FCLKSEL_SEL_MASK)
/*! @} */

/*! @name ACMP0FCLKSEL - Analog Comparator 0 Clock Select */
/*! @{ */
#define CLKCTL1_ACMP0FCLKSEL_SEL_MASK            (0x7U)
#define CLKCTL1_ACMP0FCLKSEL_SEL_SHIFT           (0U)
/*! SEL - ACMP0 Fast Functional Clock Source
 *  0b000..Main Clock
 *  0b001..FRO Clock (Divided-by-4 selection)
 *  0b010..SYSPLL0 AUX0_PLL_Clock
 *  0b011..SYSPLL0 AUX1_PLL_Clock
 *  0b100..Reserved
 *  0b101..Reserved
 *  0b110..Reserved
 *  0b111..None, output gated to reduce power
 */
#define CLKCTL1_ACMP0FCLKSEL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_ACMP0FCLKSEL_SEL_SHIFT)) & CLKCTL1_ACMP0FCLKSEL_SEL_MASK)
/*! @} */

/*! @name ACMP0FCLKDIV - Analog comparator 0 FCLK divider */
/*! @{ */
#define CLKCTL1_ACMP0FCLKDIV_DIV_MASK            (0xFFU)
#define CLKCTL1_ACMP0FCLKDIV_DIV_SHIFT           (0U)
/*! DIV - Clock Out Clock Divider Value
 */
#define CLKCTL1_ACMP0FCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << CLKCTL1_ACMP0FCLKDIV_DIV_SHIFT)) & CLKCTL1_ACMP0FCLKDIV_DIV_MASK)
#define CLKCTL1_ACMP0FCLKDIV_RESET_MASK          (0x20000000U)
#define CLKCTL1_ACMP0FCLKDIV_RESET_SHIFT         (29U)
#define CLKCTL1_ACMP0FCLKDIV_HALT_MASK           (0x40000000U)
#define CLKCTL1_ACMP0FCLKDIV_HALT_SHIFT          (30U)
#define CLKCTL1_ACMP0FCLKDIV_REQFLAG_MASK        (0x80000000U)
#define CLKCTL1_ACMP0FCLKDIV_REQFLAG_SHIFT       (31U)
/*! @} */


/*!
 * @}
 */ /* end of group CLKCTL1_Register_Masks */


/* CLKCTL1 - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral CLKCTL1 base pointer */
  #define CLKCTL1_BASE_PTR                         ((CLKCTL1_MemMapPtr)0x50021000u)
  /** Peripheral CLKCTL1 base pointer */
  #define CLKCTL1_BASE_PTR_NS                      ((CLKCTL1_MemMapPtr)0x40021000u)
  /** Array initializer of CLKCTL1 peripheral base pointers */
  #define CLKCTL1_BASE_PTRS                        { CLKCTL1_BASE_PTR }
  /** Array initializer of CLKCTL1 peripheral base pointers */
  #define CLKCTL1_BASE_PTRS_NS                     { CLKCTL1_BASE_PTR_NS }
#else
  /** Peripheral CLKCTL1 base pointer */
  #define CLKCTL1_BASE_PTR                         ((CLKCTL1_MemMapPtr)0x40021000u)
  /** Array initializer of CLKCTL1 peripheral base pointers */
  #define CLKCTL1_BASE_PTRS                        { CLKCTL1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- CLKCTL1 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CLKCTL1_Register_Accessor_Macros CLKCTL1 - Register accessor macros
 * @{
 */


/* CLKCTL1 - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* CLKCTL1 */
  #define CLKCTL1_PSCCTL0                          CLKCTL1_PSCCTL0_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL0_NS                       CLKCTL1_PSCCTL0_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_PSCCTL1                          CLKCTL1_PSCCTL1_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL1_NS                       CLKCTL1_PSCCTL1_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_PSCCTL2                          CLKCTL1_PSCCTL2_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL2_NS                       CLKCTL1_PSCCTL2_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_PSCCTL0_SET                      CLKCTL1_PSCCTL0_SET_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL0_SET_NS                   CLKCTL1_PSCCTL0_SET_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_PSCCTL1_SET                      CLKCTL1_PSCCTL1_SET_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL1_SET_NS                   CLKCTL1_PSCCTL1_SET_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_PSCCTL2_SET                      CLKCTL1_PSCCTL2_SET_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL2_SET_NS                   CLKCTL1_PSCCTL2_SET_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_PSCCTL0_CLR                      CLKCTL1_PSCCTL0_CLR_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL0_CLR_NS                   CLKCTL1_PSCCTL0_CLR_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_PSCCTL1_CLR                      CLKCTL1_PSCCTL1_CLR_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL1_CLR_NS                   CLKCTL1_PSCCTL1_CLR_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_PSCCTL2_CLR                      CLKCTL1_PSCCTL2_CLR_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL2_CLR_NS                   CLKCTL1_PSCCTL2_CLR_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_AUDIOPLL0CLKSEL                  CLKCTL1_AUDIOPLL0CLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0CLKSEL_NS               CLKCTL1_AUDIOPLL0CLKSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_AUDIOPLL0CTL0                    CLKCTL1_AUDIOPLL0CTL0_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0CTL0_NS                 CLKCTL1_AUDIOPLL0CTL0_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_AUDIOPLL0LOCKTIMEDIV2            CLKCTL1_AUDIOPLL0LOCKTIMEDIV2_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0LOCKTIMEDIV2_NS         CLKCTL1_AUDIOPLL0LOCKTIMEDIV2_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_AUDIOPLL0NUM                     CLKCTL1_AUDIOPLL0NUM_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0NUM_NS                  CLKCTL1_AUDIOPLL0NUM_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_AUDIOPLL0DENOM                   CLKCTL1_AUDIOPLL0DENOM_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0DENOM_NS                CLKCTL1_AUDIOPLL0DENOM_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_AUDIOPLL0PFD                     CLKCTL1_AUDIOPLL0PFD_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0PFD_NS                  CLKCTL1_AUDIOPLL0PFD_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_AUDIOPLLCLKDIV                   CLKCTL1_AUDIOPLLCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLLCLKDIV_NS                CLKCTL1_AUDIOPLLCLKDIV_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_DSPCPUCLKDIV                     CLKCTL1_DSPCPUCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_DSPCPUCLKDIV_NS                  CLKCTL1_DSPCPUCLKDIV_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_DSPCPUCLKSELA                    CLKCTL1_DSPCPUCLKSELA_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_DSPCPUCLKSELA_NS                 CLKCTL1_DSPCPUCLKSELA_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_DSPCPUCLKSELB                    CLKCTL1_DSPCPUCLKSELB_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_DSPCPUCLKSELB_NS                 CLKCTL1_DSPCPUCLKSELB_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_OSEVENTTFCLKSEL                  CLKCTL1_OSEVENTTFCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_OSEVENTTFCLKSEL_NS               CLKCTL1_OSEVENTTFCLKSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_FRG0CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,0)
  #define CLKCTL1_FRG0CLKSEL_NS                    CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,0)
  #define CLKCTL1_FRG0CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,0)
  #define CLKCTL1_FRG0CTL_NS                       CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,0)
  #define CLKCTL1_FC0FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,0)
  #define CLKCTL1_FC0FCLKSEL_NS                    CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,0)
  #define CLKCTL1_FRG1CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,1)
  #define CLKCTL1_FRG1CLKSEL_NS                    CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,1)
  #define CLKCTL1_FRG1CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,1)
  #define CLKCTL1_FRG1CTL_NS                       CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,1)
  #define CLKCTL1_FC1FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,1)
  #define CLKCTL1_FC1FCLKSEL_NS                    CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,1)
  #define CLKCTL1_FRG2CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,2)
  #define CLKCTL1_FRG2CLKSEL_NS                    CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,2)
  #define CLKCTL1_FRG2CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,2)
  #define CLKCTL1_FRG2CTL_NS                       CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,2)
  #define CLKCTL1_FC2FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,2)
  #define CLKCTL1_FC2FCLKSEL_NS                    CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,2)
  #define CLKCTL1_FRG3CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,3)
  #define CLKCTL1_FRG3CLKSEL_NS                    CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,3)
  #define CLKCTL1_FRG3CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,3)
  #define CLKCTL1_FRG3CTL_NS                       CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,3)
  #define CLKCTL1_FC3FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,3)
  #define CLKCTL1_FC3FCLKSEL_NS                    CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,3)
  #define CLKCTL1_FRG4CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,4)
  #define CLKCTL1_FRG4CLKSEL_NS                    CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,4)
  #define CLKCTL1_FRG4CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,4)
  #define CLKCTL1_FRG4CTL_NS                       CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,4)
  #define CLKCTL1_FC4FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,4)
  #define CLKCTL1_FC4FCLKSEL_NS                    CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,4)
  #define CLKCTL1_FRG5CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,5)
  #define CLKCTL1_FRG5CLKSEL_NS                    CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,5)
  #define CLKCTL1_FRG5CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,5)
  #define CLKCTL1_FRG5CTL_NS                       CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,5)
  #define CLKCTL1_FC5FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,5)
  #define CLKCTL1_FC5FCLKSEL_NS                    CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,5)
  #define CLKCTL1_FRG6CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,6)
  #define CLKCTL1_FRG6CLKSEL_NS                    CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,6)
  #define CLKCTL1_FRG6CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,6)
  #define CLKCTL1_FRG6CTL_NS                       CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,6)
  #define CLKCTL1_FC6FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,6)
  #define CLKCTL1_FC6FCLKSEL_NS                    CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,6)
  #define CLKCTL1_FRG7CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,7)
  #define CLKCTL1_FRG7CLKSEL_NS                    CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,7)
  #define CLKCTL1_FRG7CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,7)
  #define CLKCTL1_FRG7CTL_NS                       CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,7)
  #define CLKCTL1_FC7FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,7)
  #define CLKCTL1_FC7FCLKSEL_NS                    CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,7)
  #define CLKCTL1_FRG8CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,8)
  #define CLKCTL1_FRG8CLKSEL_NS                    CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,8)
  #define CLKCTL1_FRG8CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,8)
  #define CLKCTL1_FRG8CTL_NS                       CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,8)
  #define CLKCTL1_FC8FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,8)
  #define CLKCTL1_FC8FCLKSEL_NS                    CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,8)
  #define CLKCTL1_FRG9CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,9)
  #define CLKCTL1_FRG9CLKSEL_NS                    CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,9)
  #define CLKCTL1_FRG9CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,9)
  #define CLKCTL1_FRG9CTL_NS                       CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,9)
  #define CLKCTL1_FC9FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,9)
  #define CLKCTL1_FC9FCLKSEL_NS                    CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,9)
  #define CLKCTL1_FRG10CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,10)
  #define CLKCTL1_FRG10CLKSEL_NS                   CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,10)
  #define CLKCTL1_FRG10CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,10)
  #define CLKCTL1_FRG10CTL_NS                      CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,10)
  #define CLKCTL1_FC10FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,10)
  #define CLKCTL1_FC10FCLKSEL_NS                   CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,10)
  #define CLKCTL1_FRG11CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,11)
  #define CLKCTL1_FRG11CLKSEL_NS                   CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,11)
  #define CLKCTL1_FRG11CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,11)
  #define CLKCTL1_FRG11CTL_NS                      CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,11)
  #define CLKCTL1_FC11FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,11)
  #define CLKCTL1_FC11FCLKSEL_NS                   CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,11)
  #define CLKCTL1_FRG12CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,12)
  #define CLKCTL1_FRG12CLKSEL_NS                   CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,12)
  #define CLKCTL1_FRG12CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,12)
  #define CLKCTL1_FRG12CTL_NS                      CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,12)
  #define CLKCTL1_FC12FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,12)
  #define CLKCTL1_FC12FCLKSEL_NS                   CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,12)
  #define CLKCTL1_FRG13CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,13)
  #define CLKCTL1_FRG13CLKSEL_NS                   CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,13)
  #define CLKCTL1_FRG13CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,13)
  #define CLKCTL1_FRG13CTL_NS                      CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,13)
  #define CLKCTL1_FC13FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,13)
  #define CLKCTL1_FC13FCLKSEL_NS                   CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,13)
  #define CLKCTL1_FRG14CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,14)
  #define CLKCTL1_FRG14CLKSEL_NS                   CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,14)
  #define CLKCTL1_FRG14CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,14)
  #define CLKCTL1_FRG14CTL_NS                      CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,14)
  #define CLKCTL1_FC14FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,14)
  #define CLKCTL1_FC14FCLKSEL_NS                   CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,14)
  #define CLKCTL1_FRG15CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,15)
  #define CLKCTL1_FRG15CLKSEL_NS                   CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,15)
  #define CLKCTL1_FRG15CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,15)
  #define CLKCTL1_FRG15CTL_NS                      CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,15)
  #define CLKCTL1_FC15FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,15)
  #define CLKCTL1_FC15FCLKSEL_NS                   CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,15)
  #define CLKCTL1_FRG16CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,16)
  #define CLKCTL1_FRG16CLKSEL_NS                   CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,16)
  #define CLKCTL1_FRG16CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,16)
  #define CLKCTL1_FRG16CTL_NS                      CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,16)
  #define CLKCTL1_FC16FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,16)
  #define CLKCTL1_FC16FCLKSEL_NS                   CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,16)
  #define CLKCTL1_FRG17CLKSEL                      CLKCTL1_FRG17CLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_FRG17CLKSEL_NS                   CLKCTL1_FRG17CLKSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_FRG17CTL                         CLKCTL1_FRG17CTL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_FRG17CTL_NS                      CLKCTL1_FRG17CTL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_FLEXIOCLKSEL                     CLKCTL1_FLEXIOCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_FLEXIOCLKSEL_NS                  CLKCTL1_FLEXIOCLKSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_FLEXIOCLKDIV                     CLKCTL1_FLEXIOCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_FLEXIOCLKDIV_NS                  CLKCTL1_FLEXIOCLKDIV_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_FRGPLLCLKDIV                     CLKCTL1_FRGPLLCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_FRGPLLCLKDIV_NS                  CLKCTL1_FRGPLLCLKDIV_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_DMIC0FCLKSEL                     CLKCTL1_DMIC0FCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_DMIC0FCLKSEL_NS                  CLKCTL1_DMIC0FCLKSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_DMIC0FCLKDIV                     CLKCTL1_DMIC0FCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_DMIC0FCLKDIV_NS                  CLKCTL1_DMIC0FCLKDIV_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_CT32BIT0FCLKSEL                  CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,0)
  #define CLKCTL1_CT32BIT0FCLKSEL_NS               CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,0)
  #define CLKCTL1_CT32BIT1FCLKSEL                  CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,1)
  #define CLKCTL1_CT32BIT1FCLKSEL_NS               CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,1)
  #define CLKCTL1_CT32BIT2FCLKSEL                  CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,2)
  #define CLKCTL1_CT32BIT2FCLKSEL_NS               CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,2)
  #define CLKCTL1_CT32BIT3FCLKSEL                  CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,3)
  #define CLKCTL1_CT32BIT3FCLKSEL_NS               CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,3)
  #define CLKCTL1_CT32BIT4FCLKSEL                  CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,4)
  #define CLKCTL1_CT32BIT4FCLKSEL_NS               CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,4)
  #define CLKCTL1_AUDIOMCLKSEL                     CLKCTL1_AUDIOMCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOMCLKSEL_NS                  CLKCTL1_AUDIOMCLKSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_AUDIOMCLKDIV                     CLKCTL1_AUDIOMCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOMCLKDIV_NS                  CLKCTL1_AUDIOMCLKDIV_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_CLKOUTSEL0                       CLKCTL1_CLKOUTSEL0_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_CLKOUTSEL0_NS                    CLKCTL1_CLKOUTSEL0_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_CLKOUTSEL1                       CLKCTL1_CLKOUTSEL1_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_CLKOUTSEL1_NS                    CLKCTL1_CLKOUTSEL1_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_CLKOUTFCLKDIV                    CLKCTL1_CLKOUTFCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_CLKOUTFCLKDIV_NS                 CLKCTL1_CLKOUTFCLKDIV_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_I3C01FCLKSEL                     CLKCTL1_I3C01FCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKSEL_NS                  CLKCTL1_I3C01FCLKSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_I3C01FCLKSTCSEL                  CLKCTL1_I3C01FCLKSTCSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKSTCSEL_NS               CLKCTL1_I3C01FCLKSTCSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_I3C01FCLKSTCDIV                  CLKCTL1_I3C01FCLKSTCDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKSTCDIV_NS               CLKCTL1_I3C01FCLKSTCDIV_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_I3C01FCLKSDIV                    CLKCTL1_I3C01FCLKSDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKSDIV_NS                 CLKCTL1_I3C01FCLKSDIV_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_I3C01FCLKDIV                     CLKCTL1_I3C01FCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKDIV_NS                  CLKCTL1_I3C01FCLKDIV_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_I3C01FCLKSTSTCLKSEL              CLKCTL1_I3C01FCLKSTSTCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKSTSTCLKSEL_NS           CLKCTL1_I3C01FCLKSTSTCLKSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_WDT1FCLKSEL                      CLKCTL1_WDT1FCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_WDT1FCLKSEL_NS                   CLKCTL1_WDT1FCLKSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_ACMP0FCLKSEL                     CLKCTL1_ACMP0FCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_ACMP0FCLKSEL_NS                  CLKCTL1_ACMP0FCLKSEL_REG(CLKCTL1_BASE_PTR_NS)
  #define CLKCTL1_ACMP0FCLKDIV                     CLKCTL1_ACMP0FCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_ACMP0FCLKDIV_NS                  CLKCTL1_ACMP0FCLKDIV_REG(CLKCTL1_BASE_PTR_NS)
#else
  /* CLKCTL1 */
  #define CLKCTL1_PSCCTL0                          CLKCTL1_PSCCTL0_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL1                          CLKCTL1_PSCCTL1_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL2                          CLKCTL1_PSCCTL2_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL0_SET                      CLKCTL1_PSCCTL0_SET_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL1_SET                      CLKCTL1_PSCCTL1_SET_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL2_SET                      CLKCTL1_PSCCTL2_SET_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL0_CLR                      CLKCTL1_PSCCTL0_CLR_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL1_CLR                      CLKCTL1_PSCCTL1_CLR_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_PSCCTL2_CLR                      CLKCTL1_PSCCTL2_CLR_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0CLKSEL                  CLKCTL1_AUDIOPLL0CLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0CTL0                    CLKCTL1_AUDIOPLL0CTL0_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0LOCKTIMEDIV2            CLKCTL1_AUDIOPLL0LOCKTIMEDIV2_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0NUM                     CLKCTL1_AUDIOPLL0NUM_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0DENOM                   CLKCTL1_AUDIOPLL0DENOM_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLL0PFD                     CLKCTL1_AUDIOPLL0PFD_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOPLLCLKDIV                   CLKCTL1_AUDIOPLLCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_DSPCPUCLKDIV                     CLKCTL1_DSPCPUCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_DSPCPUCLKSELA                    CLKCTL1_DSPCPUCLKSELA_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_DSPCPUCLKSELB                    CLKCTL1_DSPCPUCLKSELB_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_OSEVENTTFCLKSEL                  CLKCTL1_OSEVENTTFCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_FRG0CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,0)
  #define CLKCTL1_FRG0CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,0)
  #define CLKCTL1_FC0FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,0)
  #define CLKCTL1_FRG1CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,1)
  #define CLKCTL1_FRG1CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,1)
  #define CLKCTL1_FC1FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,1)
  #define CLKCTL1_FRG2CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,2)
  #define CLKCTL1_FRG2CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,2)
  #define CLKCTL1_FC2FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,2)
  #define CLKCTL1_FRG3CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,3)
  #define CLKCTL1_FRG3CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,3)
  #define CLKCTL1_FC3FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,3)
  #define CLKCTL1_FRG4CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,4)
  #define CLKCTL1_FRG4CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,4)
  #define CLKCTL1_FC4FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,4)
  #define CLKCTL1_FRG5CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,5)
  #define CLKCTL1_FRG5CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,5)
  #define CLKCTL1_FC5FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,5)
  #define CLKCTL1_FRG6CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,6)
  #define CLKCTL1_FRG6CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,6)
  #define CLKCTL1_FC6FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,6)
  #define CLKCTL1_FRG7CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,7)
  #define CLKCTL1_FRG7CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,7)
  #define CLKCTL1_FC7FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,7)
  #define CLKCTL1_FRG8CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,8)
  #define CLKCTL1_FRG8CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,8)
  #define CLKCTL1_FC8FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,8)
  #define CLKCTL1_FRG9CLKSEL                       CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,9)
  #define CLKCTL1_FRG9CTL                          CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,9)
  #define CLKCTL1_FC9FCLKSEL                       CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,9)
  #define CLKCTL1_FRG10CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,10)
  #define CLKCTL1_FRG10CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,10)
  #define CLKCTL1_FC10FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,10)
  #define CLKCTL1_FRG11CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,11)
  #define CLKCTL1_FRG11CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,11)
  #define CLKCTL1_FC11FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,11)
  #define CLKCTL1_FRG12CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,12)
  #define CLKCTL1_FRG12CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,12)
  #define CLKCTL1_FC12FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,12)
  #define CLKCTL1_FRG13CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,13)
  #define CLKCTL1_FRG13CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,13)
  #define CLKCTL1_FC13FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,13)
  #define CLKCTL1_FRG14CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,14)
  #define CLKCTL1_FRG14CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,14)
  #define CLKCTL1_FC14FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,14)
  #define CLKCTL1_FRG15CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,15)
  #define CLKCTL1_FRG15CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,15)
  #define CLKCTL1_FC15FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,15)
  #define CLKCTL1_FRG16CLKSEL                      CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,16)
  #define CLKCTL1_FRG16CTL                         CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,16)
  #define CLKCTL1_FC16FCLKSEL                      CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,16)
  #define CLKCTL1_FRG17CLKSEL                      CLKCTL1_FRG17CLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_FRG17CTL                         CLKCTL1_FRG17CTL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_FLEXIOCLKSEL                     CLKCTL1_FLEXIOCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_FLEXIOCLKDIV                     CLKCTL1_FLEXIOCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_FRGPLLCLKDIV                     CLKCTL1_FRGPLLCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_DMIC0FCLKSEL                     CLKCTL1_DMIC0FCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_DMIC0FCLKDIV                     CLKCTL1_DMIC0FCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_CT32BIT0FCLKSEL                  CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,0)
  #define CLKCTL1_CT32BIT1FCLKSEL                  CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,1)
  #define CLKCTL1_CT32BIT2FCLKSEL                  CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,2)
  #define CLKCTL1_CT32BIT3FCLKSEL                  CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,3)
  #define CLKCTL1_CT32BIT4FCLKSEL                  CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,4)
  #define CLKCTL1_AUDIOMCLKSEL                     CLKCTL1_AUDIOMCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_AUDIOMCLKDIV                     CLKCTL1_AUDIOMCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_CLKOUTSEL0                       CLKCTL1_CLKOUTSEL0_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_CLKOUTSEL1                       CLKCTL1_CLKOUTSEL1_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_CLKOUTFCLKDIV                    CLKCTL1_CLKOUTFCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKSEL                     CLKCTL1_I3C01FCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKSTCSEL                  CLKCTL1_I3C01FCLKSTCSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKSTCDIV                  CLKCTL1_I3C01FCLKSTCDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKSDIV                    CLKCTL1_I3C01FCLKSDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKDIV                     CLKCTL1_I3C01FCLKDIV_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_I3C01FCLKSTSTCLKSEL              CLKCTL1_I3C01FCLKSTSTCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_WDT1FCLKSEL                      CLKCTL1_WDT1FCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_ACMP0FCLKSEL                     CLKCTL1_ACMP0FCLKSEL_REG(CLKCTL1_BASE_PTR)
  #define CLKCTL1_ACMP0FCLKDIV                     CLKCTL1_ACMP0FCLKDIV_REG(CLKCTL1_BASE_PTR)
#endif

/* CLKCTL1 - Register array accessors */
#define CLKCTL1_FRGCLKSEL(index)                 CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,index)
#define CLKCTL1_FRGCLKSEL_NS(index)              CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR_NS,index)
#define CLKCTL1_FRGCLKSEL(index)                 CLKCTL1_FRGCLKSEL_REG(CLKCTL1_BASE_PTR,index)
#define CLKCTL1_FRGCTL(index)                    CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,index)
#define CLKCTL1_FRGCTL_NS(index)                 CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR_NS,index)
#define CLKCTL1_FRGCTL(index)                    CLKCTL1_FRGCTL_REG(CLKCTL1_BASE_PTR,index)
#define CLKCTL1_FCFCLKSEL(index)                 CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,index)
#define CLKCTL1_FCFCLKSEL_NS(index)              CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,index)
#define CLKCTL1_FCFCLKSEL(index)                 CLKCTL1_FCFCLKSEL_REG(CLKCTL1_BASE_PTR,index)
#define CLKCTL1_CT32BITFCLKSEL(index)            CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,index)
#define CLKCTL1_CT32BITFCLKSEL_NS(index)         CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR_NS,index)
#define CLKCTL1_CT32BITFCLKSEL(index)            CLKCTL1_CT32BITFCLKSEL_REG(CLKCTL1_BASE_PTR,index)

/*!
 * @}
 */ /* end of group CLKCTL1_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CLKCTL1_Peripheral */


/* ----------------------------------------------------------------------------
   -- CMP
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CMP_Peripheral CMP
 * @{
 */

/** CMP - Peripheral register structure */
typedef struct CMP_MemMap {
  uint32_t VERID;                                  /**< Version ID Register, offset: 0x0 */
  uint32_t PARAM;                                  /**< Parameter Register, offset: 0x4 */
  uint32_t C0;                                     /**< CMP Control Register 0, offset: 0x8 */
  uint32_t C1;                                     /**< CMP Control Register 1, offset: 0xC */
  uint32_t C2;                                     /**< CMP Control Register 2, offset: 0x10 */
  uint32_t C3;                                     /**< CMP Control Register 3, offset: 0x14 */
  uint32_t RR_TIMER_CR;                            /**< Round-Robin Timer Control Register, offset: 0x18 */
} volatile *CMP_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CMP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CMP_Register_Accessor_Macros CMP - Register accessor macros
 * @{
 */


/* CMP - Register accessors */
#define CMP_VERID_REG(base)                      ((base)->VERID)
#define CMP_PARAM_REG(base)                      ((base)->PARAM)
#define CMP_C0_REG(base)                         ((base)->C0)
#define CMP_C1_REG(base)                         ((base)->C1)
#define CMP_C2_REG(base)                         ((base)->C2)
#define CMP_C3_REG(base)                         ((base)->C3)
#define CMP_RR_TIMER_CR_REG(base)                ((base)->RR_TIMER_CR)

/*!
 * @}
 */ /* end of group CMP_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CMP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CMP_Register_Masks CMP Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
/*! @{ */
#define CMP_VERID_FEATURE_MASK                   (0xFFFFU)
#define CMP_VERID_FEATURE_SHIFT                  (0U)
/*! FEATURE - Feature Specification Number. This read only filed returns the feature set number.
 */
#define CMP_VERID_FEATURE(x)                     (((uint32_t)(((uint32_t)(x)) << CMP_VERID_FEATURE_SHIFT)) & CMP_VERID_FEATURE_MASK)
#define CMP_VERID_MINOR_MASK                     (0xFF0000U)
#define CMP_VERID_MINOR_SHIFT                    (16U)
/*! MINOR - Minor Version Number. This read only field returns the minor version number for the module specification.
 */
#define CMP_VERID_MINOR(x)                       (((uint32_t)(((uint32_t)(x)) << CMP_VERID_MINOR_SHIFT)) & CMP_VERID_MINOR_MASK)
#define CMP_VERID_MAJOR_MASK                     (0xFF000000U)
#define CMP_VERID_MAJOR_SHIFT                    (24U)
/*! MAJOR - Major Version Number. This read only field returns the major version number for the module specification.
 */
#define CMP_VERID_MAJOR(x)                       (((uint32_t)(((uint32_t)(x)) << CMP_VERID_MAJOR_SHIFT)) & CMP_VERID_MAJOR_MASK)
/*! @} */

/*! @name PARAM - Parameter Register */
/*! @{ */
#define CMP_PARAM_PARAM_MASK                     (0xFFFFFFFFU)
#define CMP_PARAM_PARAM_SHIFT                    (0U)
/*! PARAM - Parameter Registers. This read only filed returns the feature parameters implemented along with the Version ID register.
 */
#define CMP_PARAM_PARAM(x)                       (((uint32_t)(((uint32_t)(x)) << CMP_PARAM_PARAM_SHIFT)) & CMP_PARAM_PARAM_MASK)
/*! @} */

/*! @name C0 - CMP Control Register 0 */
/*! @{ */
#define CMP_C0_HYSTCTR_MASK                      (0x3U)
#define CMP_C0_HYSTCTR_SHIFT                     (0U)
/*! HYSTCTR - Comparator hard block hysteresis control. See chip data sheet to get the actual hystersis value with each level
 *  0b00..The hard block output has level 0 hysteresis internally.
 *  0b01..The hard block output has level 1 hysteresis internally.
 *  0b10..The hard block output has level 2 hysteresis internally.
 *  0b11..The hard block output has level 3 hysteresis internally.
 */
#define CMP_C0_HYSTCTR(x)                        (((uint32_t)(((uint32_t)(x)) << CMP_C0_HYSTCTR_SHIFT)) & CMP_C0_HYSTCTR_MASK)
#define CMP_C0_FILTER_CNT_MASK                   (0x70U)
#define CMP_C0_FILTER_CNT_SHIFT                  (4U)
/*! FILTER_CNT - Filter Sample Count
 *  0b000..Filter is disabled. If SE = 1, then COUT is a logic zero (this is not a legal state, and is not recommended). If SE = 0, COUT = COUTA.
 *  0b001..1 consecutive sample must agree (comparator output is simply sampled).
 *  0b010..2 consecutive samples must agree.
 *  0b011..3 consecutive samples must agree.
 *  0b100..4 consecutive samples must agree.
 *  0b101..5 consecutive samples must agree.
 *  0b110..6 consecutive samples must agree.
 *  0b111..7 consecutive samples must agree.
 */
#define CMP_C0_FILTER_CNT(x)                     (((uint32_t)(((uint32_t)(x)) << CMP_C0_FILTER_CNT_SHIFT)) & CMP_C0_FILTER_CNT_MASK)
#define CMP_C0_EN_MASK                           (0x100U)
#define CMP_C0_EN_SHIFT                          (8U)
#define CMP_C0_OPE_MASK                          (0x200U)
#define CMP_C0_OPE_SHIFT                         (9U)
#define CMP_C0_COS_MASK                          (0x400U)
#define CMP_C0_COS_SHIFT                         (10U)
#define CMP_C0_INVT_MASK                         (0x800U)
#define CMP_C0_INVT_SHIFT                        (11U)
#define CMP_C0_PMODE_MASK                        (0x1000U)
#define CMP_C0_PMODE_SHIFT                       (12U)
#define CMP_C0_WE_MASK                           (0x4000U)
#define CMP_C0_WE_SHIFT                          (14U)
#define CMP_C0_SE_MASK                           (0x8000U)
#define CMP_C0_SE_SHIFT                          (15U)
#define CMP_C0_FPR_MASK                          (0xFF0000U)
#define CMP_C0_FPR_SHIFT                         (16U)
/*! FPR - Filter Sample Period
 */
#define CMP_C0_FPR(x)                            (((uint32_t)(((uint32_t)(x)) << CMP_C0_FPR_SHIFT)) & CMP_C0_FPR_MASK)
#define CMP_C0_COUT_MASK                         (0x1000000U)
#define CMP_C0_COUT_SHIFT                        (24U)
#define CMP_C0_CFF_MASK                          (0x2000000U)
#define CMP_C0_CFF_SHIFT                         (25U)
#define CMP_C0_CFR_MASK                          (0x4000000U)
#define CMP_C0_CFR_SHIFT                         (26U)
#define CMP_C0_IEF_MASK                          (0x8000000U)
#define CMP_C0_IEF_SHIFT                         (27U)
#define CMP_C0_IER_MASK                          (0x10000000U)
#define CMP_C0_IER_SHIFT                         (28U)
#define CMP_C0_DMAEN_MASK                        (0x40000000U)
#define CMP_C0_DMAEN_SHIFT                       (30U)
#define CMP_C0_LINKEN_MASK                       (0x80000000U)
#define CMP_C0_LINKEN_SHIFT                      (31U)
/*! @} */

/*! @name C1 - CMP Control Register 1 */
/*! @{ */
#define CMP_C1_VOSEL_MASK                        (0xFFU)
#define CMP_C1_VOSEL_SHIFT                       (0U)
/*! VOSEL - DAC Output Voltage Select
 */
#define CMP_C1_VOSEL(x)                          (((uint32_t)(((uint32_t)(x)) << CMP_C1_VOSEL_SHIFT)) & CMP_C1_VOSEL_MASK)
#define CMP_C1_DMODE_MASK                        (0x100U)
#define CMP_C1_DMODE_SHIFT                       (8U)
#define CMP_C1_VRSEL_MASK                        (0x200U)
#define CMP_C1_VRSEL_SHIFT                       (9U)
#define CMP_C1_DACEN_MASK                        (0x400U)
#define CMP_C1_DACEN_SHIFT                       (10U)
#define CMP_C1_PSEL_SEC_MASK                     (0x7000U)
#define CMP_C1_PSEL_SEC_SHIFT                    (12U)
/*! PSEL_SEC - Secondary Plus channel select.
 *  0b000..Input 0 for Plus Channel
 *  0b001..Input 1 for Plus Channel
 *  0b010..Input 2 for Plus Channel
 *  0b011..Input 3 for Plus Channel
 *  0b100..Input 4 for Plus Channel
 *  0b101..Input 5 for Plus Channel
 *  0b110..Input 6 for Plus Channel
 *  0b111..Internal 8b DAC output for Plus Channel
 */
#define CMP_C1_PSEL_SEC(x)                       (((uint32_t)(((uint32_t)(x)) << CMP_C1_PSEL_SEC_SHIFT)) & CMP_C1_PSEL_SEC_MASK)
#define CMP_C1_CHN0_MASK                         (0x10000U)
#define CMP_C1_CHN0_SHIFT                        (16U)
#define CMP_C1_CHN1_MASK                         (0x20000U)
#define CMP_C1_CHN1_SHIFT                        (17U)
#define CMP_C1_CHN2_MASK                         (0x40000U)
#define CMP_C1_CHN2_SHIFT                        (18U)
#define CMP_C1_CHN3_MASK                         (0x80000U)
#define CMP_C1_CHN3_SHIFT                        (19U)
#define CMP_C1_CHN4_MASK                         (0x100000U)
#define CMP_C1_CHN4_SHIFT                        (20U)
#define CMP_C1_CHN5_MASK                         (0x200000U)
#define CMP_C1_CHN5_SHIFT                        (21U)
#define CMP_C1_MSEL_MASK                         (0x7000000U)
#define CMP_C1_MSEL_SHIFT                        (24U)
/*! MSEL - Minus Input MUX Control
 *  0b000..Internal Negative Input 0 for Minus Channel -- Internal Minus Input
 *  0b001..External Input 1 for Minus Channel -- Reference Input 0
 *  0b010..External Input 2 for Minus Channel -- Reference Input 1
 *  0b011..External Input 3 for Minus Channel -- Reference Input 2
 *  0b100..External Input 4 for Minus Channel -- Reference Input 3
 *  0b101..External Input 5 for Minus Channel -- Reference Input 4
 *  0b110..External Input 6 for Minus Channel -- Reference Input 5
 *  0b111..Internal 8b DAC output
 */
#define CMP_C1_MSEL(x)                           (((uint32_t)(((uint32_t)(x)) << CMP_C1_MSEL_SHIFT)) & CMP_C1_MSEL_MASK)
#define CMP_C1_PSEL_MASK                         (0x70000000U)
#define CMP_C1_PSEL_SHIFT                        (28U)
/*! PSEL - Plus Input MUX Control
 *  0b000..Internal Posivite Input 0 for Plus Channel -- Internal Minus Input
 *  0b001..External Input 1 for Plus Channel -- Reference Input 0
 *  0b010..External Input 2 for Plus Channel -- Reference Input 1
 *  0b011..External Input 3 for Plus Channel -- Reference Input 2
 *  0b100..External Input 4 for Plus Channel -- Reference Input 3
 *  0b101..External Input 4 for Plus Channel -- Reference Input 4
 *  0b110..External Input 4 for Plus Channel -- Reference Input 5
 *  0b111..Internal 8b DAC output
 */
#define CMP_C1_PSEL(x)                           (((uint32_t)(((uint32_t)(x)) << CMP_C1_PSEL_SHIFT)) & CMP_C1_PSEL_MASK)
/*! @} */

/*! @name C2 - CMP Control Register 2 */
/*! @{ */
#define CMP_C2_ACOn_MASK                         (0x3FU)
#define CMP_C2_ACOn_SHIFT                        (0U)
/*! ACOn - ACOn
 */
#define CMP_C2_ACOn(x)                           (((uint32_t)(((uint32_t)(x)) << CMP_C2_ACOn_SHIFT)) & CMP_C2_ACOn_MASK)
#define CMP_C2_INITMOD_MASK                      (0x3F00U)
#define CMP_C2_INITMOD_SHIFT                     (8U)
/*! INITMOD - Comparator and DAC initialization delay modulus.
 */
#define CMP_C2_INITMOD(x)                        (((uint32_t)(((uint32_t)(x)) << CMP_C2_INITMOD_SHIFT)) & CMP_C2_INITMOD_MASK)
#define CMP_C2_NSAM_MASK                         (0xC000U)
#define CMP_C2_NSAM_SHIFT                        (14U)
/*! NSAM - Number of sample clocks
 *  0b00..The comparison result is sampled as soon as the active channel is scanned in one round-robin clock.
 *  0b01..The sampling takes place 1 round-robin clock cycle after the next cycle of the round-robin clock.
 *  0b10..The sampling takes place 2 round-robin clock cycles after the next cycle of the round-robin clock.
 *  0b11..The sampling takes place 3 round-robin clock cycles after the next cycle of the round-robin clock.
 */
#define CMP_C2_NSAM(x)                           (((uint32_t)(((uint32_t)(x)) << CMP_C2_NSAM_SHIFT)) & CMP_C2_NSAM_MASK)
#define CMP_C2_CH0F_MASK                         (0x10000U)
#define CMP_C2_CH0F_SHIFT                        (16U)
#define CMP_C2_CH1F_MASK                         (0x20000U)
#define CMP_C2_CH1F_SHIFT                        (17U)
#define CMP_C2_CH2F_MASK                         (0x40000U)
#define CMP_C2_CH2F_SHIFT                        (18U)
#define CMP_C2_CH3F_MASK                         (0x80000U)
#define CMP_C2_CH3F_SHIFT                        (19U)
#define CMP_C2_CH4F_MASK                         (0x100000U)
#define CMP_C2_CH4F_SHIFT                        (20U)
#define CMP_C2_CH5F_MASK                         (0x200000U)
#define CMP_C2_CH5F_SHIFT                        (21U)
#define CMP_C2_FXMXCH_MASK                       (0xE000000U)
#define CMP_C2_FXMXCH_SHIFT                      (25U)
/*! FXMXCH - Fixed channel selection
 *  0b000..External Reference Input 0 is selected as the fixed reference input for the fixed mux port.
 *  0b001..External Reference Input 1 is selected as the fixed reference input for the fixed mux port.
 *  0b010..External Reference Input 2 is selected as the fixed reference input for the fixed mux port.
 *  0b011..External Reference Input 3 is selected as the fixed reference input for the fixed mux port.
 *  0b100..External Reference Input 4 is selected as the fixed reference input for the fixed mux port.
 *  0b101..External Reference Input 5 is selected as the fixed reference input for the fixed mux port.
 *  0b110..Reserved.
 *  0b111..The 8bit DAC is selected as the fixed reference input for the fixed mux port.
 */
#define CMP_C2_FXMXCH(x)                         (((uint32_t)(((uint32_t)(x)) << CMP_C2_FXMXCH_SHIFT)) & CMP_C2_FXMXCH_MASK)
#define CMP_C2_FXMP_MASK                         (0x20000000U)
#define CMP_C2_FXMP_SHIFT                        (29U)
#define CMP_C2_RRIE_MASK                         (0x40000000U)
#define CMP_C2_RRIE_SHIFT                        (30U)
/*! @} */

/*! @name C3 - CMP Control Register 3 */
/*! @{ */
#define CMP_C3_ACPH2TC_MASK                      (0x70U)
#define CMP_C3_ACPH2TC_SHIFT                     (4U)
/*! ACPH2TC - Analog Comparator Phase2 Timing Control.
 *  0b000..Phase2 active time in one sampling period equals to T
 *  0b001..Phase2 active time in one sampling period equals to 2*T
 *  0b010..Phase2 active time in one sampling period equals to 4*T
 *  0b011..Phase2 active time in one sampling period equals to 8*T
 *  0b100..Phase2 active time in one sampling period equals to 16*T
 *  0b101..Phase2 active time in one sampling period equals to 32*T
 *  0b110..Phase2 active time in one sampling period equals to 64*T
 *  0b111..Phase2 active time in one sampling period equals to 16*T
 */
#define CMP_C3_ACPH2TC(x)                        (((uint32_t)(((uint32_t)(x)) << CMP_C3_ACPH2TC_SHIFT)) & CMP_C3_ACPH2TC_MASK)
#define CMP_C3_ACPH1TC_MASK                      (0x700U)
#define CMP_C3_ACPH1TC_SHIFT                     (8U)
/*! ACPH1TC - Analog Comparator Phase1 Timing Control.
 *  0b000..Phase1 active time in one sampling period equals to T
 *  0b001..Phase1 active time in one sampling period equals to 2*T
 *  0b010..Phase1 active time in one sampling period equals to 4*T
 *  0b011..Phase1 active time in one sampling period equals to 8*T
 *  0b100..Phase1 active time in one sampling period equals to T
 *  0b101..Phase1 active time in one sampling period equals to T
 *  0b110..Phase1 active time in one sampling period equals to T
 *  0b111..Phase1 active time in one sampling period equals to 0
 */
#define CMP_C3_ACPH1TC(x)                        (((uint32_t)(((uint32_t)(x)) << CMP_C3_ACPH1TC_SHIFT)) & CMP_C3_ACPH1TC_MASK)
#define CMP_C3_ACSAT_MASK                        (0x7000U)
#define CMP_C3_ACSAT_SHIFT                       (12U)
/*! ACSAT - Analog Comparator Sampling Time control.
 *  0b000..The sampling time equals to T
 *  0b001..The sampling time equasl to 2*T
 *  0b010..The sampling time equasl to 4*T
 *  0b011..The sampling time equasl to 8*T
 *  0b100..The sampling time equasl to 16*T
 *  0b101..The sampling time equasl to 32*T
 *  0b110..The sampling time equasl to 64*T
 *  0b111..The sampling time equasl to 256*T
 */
#define CMP_C3_ACSAT(x)                          (((uint32_t)(((uint32_t)(x)) << CMP_C3_ACSAT_SHIFT)) & CMP_C3_ACSAT_MASK)
#define CMP_C3_DMCS_MASK                         (0x10000U)
#define CMP_C3_DMCS_SHIFT                        (16U)
#define CMP_C3_RDIVE_MASK                        (0x100000U)
#define CMP_C3_RDIVE_SHIFT                       (20U)
#define CMP_C3_NCHCTEN_MASK                      (0x1000000U)
#define CMP_C3_NCHCTEN_SHIFT                     (24U)
#define CMP_C3_PCHCTEN_MASK                      (0x10000000U)
#define CMP_C3_PCHCTEN_SHIFT                     (28U)
/*! @} */

/*! @name RR_TIMER_CR - Round-Robin Timer Control Register */
/*! @{ */
#define CMP_RR_TIMER_CR_RR_TIMER_RELOAD_MASK     (0xFFFFFFFU)
#define CMP_RR_TIMER_CR_RR_TIMER_RELOAD_SHIFT    (0U)
/*! RR_TIMER_RELOAD - This field establishes the repetitive count rate for the timer. Each time the
 *    timer counts down to zero it is reloaded with this value. The rr_trig signal will be generated
 *    at a rate of (rr_timer_reload + 1) times the rr_clock period (typically 30.6 uS)
 */
#define CMP_RR_TIMER_CR_RR_TIMER_RELOAD(x)       (((uint32_t)(((uint32_t)(x)) << CMP_RR_TIMER_CR_RR_TIMER_RELOAD_SHIFT)) & CMP_RR_TIMER_CR_RR_TIMER_RELOAD_MASK)
#define CMP_RR_TIMER_CR_RR_TIMER_ENA_MASK        (0x80000000U)
#define CMP_RR_TIMER_CR_RR_TIMER_ENA_SHIFT       (31U)
/*! @} */


/*!
 * @}
 */ /* end of group CMP_Register_Masks */


/* CMP - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral ACMP0 base pointer */
  #define ACMP0_BASE_PTR                           ((CMP_MemMapPtr)0x50139000u)
  /** Peripheral ACMP0 base pointer */
  #define ACMP0_BASE_PTR_NS                        ((CMP_MemMapPtr)0x40139000u)
  /** Array initializer of CMP peripheral base pointers */
  #define CMP_BASE_PTRS                            { ACMP0_BASE_PTR }
  /** Array initializer of CMP peripheral base pointers */
  #define CMP_BASE_PTRS_NS                         { ACMP0_BASE_PTR_NS }
#else
  /** Peripheral ACMP0 base pointer */
  #define ACMP0_BASE_PTR                           ((CMP_MemMapPtr)0x40139000u)
  /** Array initializer of CMP peripheral base pointers */
  #define CMP_BASE_PTRS                            { ACMP0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- CMP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CMP_Register_Accessor_Macros CMP - Register accessor macros
 * @{
 */


/* CMP - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* ACMP0 */
  #define ACMP0_VERID                              CMP_VERID_REG(ACMP0_BASE_PTR)
  #define ACMP0_VERID_NS                           CMP_VERID_REG(ACMP0_BASE_PTR_NS)
  #define ACMP0_PARAM                              CMP_PARAM_REG(ACMP0_BASE_PTR)
  #define ACMP0_PARAM_NS                           CMP_PARAM_REG(ACMP0_BASE_PTR_NS)
  #define ACMP0_C0                                 CMP_C0_REG(ACMP0_BASE_PTR)
  #define ACMP0_C0_NS                              CMP_C0_REG(ACMP0_BASE_PTR_NS)
  #define ACMP0_C1                                 CMP_C1_REG(ACMP0_BASE_PTR)
  #define ACMP0_C1_NS                              CMP_C1_REG(ACMP0_BASE_PTR_NS)
  #define ACMP0_C2                                 CMP_C2_REG(ACMP0_BASE_PTR)
  #define ACMP0_C2_NS                              CMP_C2_REG(ACMP0_BASE_PTR_NS)
  #define ACMP0_C3                                 CMP_C3_REG(ACMP0_BASE_PTR)
  #define ACMP0_C3_NS                              CMP_C3_REG(ACMP0_BASE_PTR_NS)
  #define ACMP0_RR_TIMER_CR                        CMP_RR_TIMER_CR_REG(ACMP0_BASE_PTR)
  #define ACMP0_RR_TIMER_CR_NS                     CMP_RR_TIMER_CR_REG(ACMP0_BASE_PTR_NS)
#else
  /* ACMP0 */
  #define ACMP0_VERID                              CMP_VERID_REG(ACMP0_BASE_PTR)
  #define ACMP0_PARAM                              CMP_PARAM_REG(ACMP0_BASE_PTR)
  #define ACMP0_C0                                 CMP_C0_REG(ACMP0_BASE_PTR)
  #define ACMP0_C1                                 CMP_C1_REG(ACMP0_BASE_PTR)
  #define ACMP0_C2                                 CMP_C2_REG(ACMP0_BASE_PTR)
  #define ACMP0_C3                                 CMP_C3_REG(ACMP0_BASE_PTR)
  #define ACMP0_RR_TIMER_CR                        CMP_RR_TIMER_CR_REG(ACMP0_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group CMP_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CMP_Peripheral */


/* ----------------------------------------------------------------------------
   -- CRC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CRC_Peripheral CRC
 * @{
 */

/** CRC - Peripheral register structure */
typedef struct CRC_MemMap {
  uint32_t MODE;                                   /**< MODE Register, offset: 0x0 */
  uint32_t SEED;                                   /**< CRC Seed Register, offset: 0x4 */
  union {                                          /* offset: 0x8 */
    uint32_t SUM;                                    /**< CRC Sum, offset: 0x8 */
    uint32_t WR_DATA;                                /**< CRC Write Data, offset: 0x8 */
  };
} volatile *CRC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CRC_Register_Accessor_Macros CRC - Register accessor macros
 * @{
 */


/* CRC - Register accessors */
#define CRC_MODE_REG(base)                       ((base)->MODE)
#define CRC_SEED_REG(base)                       ((base)->SEED)
#define CRC_SUM_REG(base)                        ((base)->SUM)
#define CRC_WR_DATA_REG(base)                    ((base)->WR_DATA)

/*!
 * @}
 */ /* end of group CRC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CRC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CRC_Register_Masks CRC Register Masks
 * @{
 */

/*! @name MODE - MODE Register */
/*! @{ */
#define CRC_MODE_CRC_POLY_MASK                   (0x3U)
#define CRC_MODE_CRC_POLY_SHIFT                  (0U)
/*! CRC_POLY - CRC Polynomial
 *  0b00..Use CRC-CCITT polynomial
 *  0b01..Use CRC-16 polynomial
 *  0b10..Use CRC-32 polynomial
 *  0b11..Reserved
 */
#define CRC_MODE_CRC_POLY(x)                     (((uint32_t)(((uint32_t)(x)) << CRC_MODE_CRC_POLY_SHIFT)) & CRC_MODE_CRC_POLY_MASK)
#define CRC_MODE_BIT_RVS_WR_MASK                 (0x4U)
#define CRC_MODE_BIT_RVS_WR_SHIFT                (2U)
#define CRC_MODE_CMPL_WR_MASK                    (0x8U)
#define CRC_MODE_CMPL_WR_SHIFT                   (3U)
#define CRC_MODE_BIT_RVS_SUM_MASK                (0x10U)
#define CRC_MODE_BIT_RVS_SUM_SHIFT               (4U)
#define CRC_MODE_CMPL_SUM_MASK                   (0x20U)
#define CRC_MODE_CMPL_SUM_SHIFT                  (5U)
/*! @} */

/*! @name SEED - CRC Seed Register */
/*! @{ */
#define CRC_SEED_CRC_SEED_MASK                   (0xFFFFFFFFU)
#define CRC_SEED_CRC_SEED_SHIFT                  (0U)
/*! CRC_SEED - CRC Seed
 */
#define CRC_SEED_CRC_SEED(x)                     (((uint32_t)(((uint32_t)(x)) << CRC_SEED_CRC_SEED_SHIFT)) & CRC_SEED_CRC_SEED_MASK)
/*! @} */

/*! @name SUM - CRC Sum */
/*! @{ */
#define CRC_SUM_CRC_SUM_MASK                     (0xFFFFFFFFU)
#define CRC_SUM_CRC_SUM_SHIFT                    (0U)
/*! CRC_SUM - CRC Sum
 */
#define CRC_SUM_CRC_SUM(x)                       (((uint32_t)(((uint32_t)(x)) << CRC_SUM_CRC_SUM_SHIFT)) & CRC_SUM_CRC_SUM_MASK)
/*! @} */

/*! @name WR_DATA - CRC Write Data */
/*! @{ */
#define CRC_WR_DATA_WR_DATA_MASK                 (0xFFFFFFFFU)
#define CRC_WR_DATA_WR_DATA_SHIFT                (0U)
/*! WR_DATA - CRC Write Data
 */
#define CRC_WR_DATA_WR_DATA(x)                   (((uint32_t)(((uint32_t)(x)) << CRC_WR_DATA_WR_DATA_SHIFT)) & CRC_WR_DATA_WR_DATA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group CRC_Register_Masks */


/* CRC - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral CRC_ENGINE base pointer */
  #define CRC_ENGINE_BASE_PTR                      ((CRC_MemMapPtr)0x50120000u)
  /** Peripheral CRC_ENGINE base pointer */
  #define CRC_ENGINE_BASE_PTR_NS                   ((CRC_MemMapPtr)0x40120000u)
  /** Array initializer of CRC peripheral base pointers */
  #define CRC_BASE_PTRS                            { CRC_ENGINE_BASE_PTR }
  /** Array initializer of CRC peripheral base pointers */
  #define CRC_BASE_PTRS_NS                         { CRC_ENGINE_BASE_PTR_NS }
#else
  /** Peripheral CRC_ENGINE base pointer */
  #define CRC_ENGINE_BASE_PTR                      ((CRC_MemMapPtr)0x40120000u)
  /** Array initializer of CRC peripheral base pointers */
  #define CRC_BASE_PTRS                            { CRC_ENGINE_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- CRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CRC_Register_Accessor_Macros CRC - Register accessor macros
 * @{
 */


/* CRC - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* CRC_ENGINE */
  #define CRC_ENGINE_MODE                          CRC_MODE_REG(CRC_ENGINE_BASE_PTR)
  #define CRC_ENGINE_MODE_NS                       CRC_MODE_REG(CRC_ENGINE_BASE_PTR_NS)
  #define CRC_ENGINE_SEED                          CRC_SEED_REG(CRC_ENGINE_BASE_PTR)
  #define CRC_ENGINE_SEED_NS                       CRC_SEED_REG(CRC_ENGINE_BASE_PTR_NS)
  #define CRC_ENGINE_SUM                           CRC_SUM_REG(CRC_ENGINE_BASE_PTR)
  #define CRC_ENGINE_SUM_NS                        CRC_SUM_REG(CRC_ENGINE_BASE_PTR_NS)
  #define CRC_ENGINE_WR_DATA                       CRC_WR_DATA_REG(CRC_ENGINE_BASE_PTR)
  #define CRC_ENGINE_WR_DATA_NS                    CRC_WR_DATA_REG(CRC_ENGINE_BASE_PTR_NS)
#else
  /* CRC_ENGINE */
  #define CRC_ENGINE_MODE                          CRC_MODE_REG(CRC_ENGINE_BASE_PTR)
  #define CRC_ENGINE_SEED                          CRC_SEED_REG(CRC_ENGINE_BASE_PTR)
  #define CRC_ENGINE_SUM                           CRC_SUM_REG(CRC_ENGINE_BASE_PTR)
  #define CRC_ENGINE_WR_DATA                       CRC_WR_DATA_REG(CRC_ENGINE_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group CRC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CRC_Peripheral */


/* ----------------------------------------------------------------------------
   -- CTIMER
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CTIMER_Peripheral CTIMER
 * @{
 */

/** CTIMER - Peripheral register structure */
typedef struct CTIMER_MemMap {
  uint32_t IR;                                     /**< Interrupt Register., offset: 0x0 */
  uint32_t TCR;                                    /**< Timer Control Register, offset: 0x4 */
  uint32_t TC;                                     /**< Timer Counter, offset: 0x8 */
  uint32_t PR;                                     /**< Prescale Register, offset: 0xC */
  uint32_t PC;                                     /**< Prescale Counter., offset: 0x10 */
  uint32_t MCR;                                    /**< Match Control Register., offset: 0x14 */
  uint32_t MR[4];                                  /**< Match Register, array offset: 0x18, array step: 0x4 */
  uint32_t CCR;                                    /**< Capture Control Register, offset: 0x28 */
  uint32_t CR[4];                                  /**< Capture Register, array offset: 0x2C, array step: 0x4 */
  uint32_t EMR;                                    /**< External Match Register, offset: 0x3C */
  uint8_t RESERVED_0[48];
  uint32_t CTCR;                                   /**< Count Control Register, offset: 0x70 */
  uint32_t PWMC;                                   /**< PWM Control Register, offset: 0x74 */
  uint32_t MSR[4];                                 /**< Match Shadow Register, array offset: 0x78, array step: 0x4 */
} volatile *CTIMER_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CTIMER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CTIMER_Register_Accessor_Macros CTIMER - Register accessor macros
 * @{
 */


/* CTIMER - Register accessors */
#define CTIMER_IR_REG(base)                      ((base)->IR)
#define CTIMER_TCR_REG(base)                     ((base)->TCR)
#define CTIMER_TC_REG(base)                      ((base)->TC)
#define CTIMER_PR_REG(base)                      ((base)->PR)
#define CTIMER_PC_REG(base)                      ((base)->PC)
#define CTIMER_MCR_REG(base)                     ((base)->MCR)
#define CTIMER_MR_REG(base,index)                ((base)->MR[index])
#define CTIMER_CCR_REG(base)                     ((base)->CCR)
#define CTIMER_CR_REG(base,index)                ((base)->CR[index])
#define CTIMER_EMR_REG(base)                     ((base)->EMR)
#define CTIMER_CTCR_REG(base)                    ((base)->CTCR)
#define CTIMER_PWMC_REG(base)                    ((base)->PWMC)
#define CTIMER_MSR_REG(base,index)               ((base)->MSR[index])

/*!
 * @}
 */ /* end of group CTIMER_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CTIMER Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CTIMER_Register_Masks CTIMER Register Masks
 * @{
 */

/*! @name IR - Interrupt Register. */
/*! @{ */
#define CTIMER_IR_MR0INT_MASK                    (0x1U)
#define CTIMER_IR_MR0INT_SHIFT                   (0U)
#define CTIMER_IR_MR1INT_MASK                    (0x2U)
#define CTIMER_IR_MR1INT_SHIFT                   (1U)
#define CTIMER_IR_MR2INT_MASK                    (0x4U)
#define CTIMER_IR_MR2INT_SHIFT                   (2U)
#define CTIMER_IR_MR3INT_MASK                    (0x8U)
#define CTIMER_IR_MR3INT_SHIFT                   (3U)
#define CTIMER_IR_CR0INT_MASK                    (0x10U)
#define CTIMER_IR_CR0INT_SHIFT                   (4U)
#define CTIMER_IR_CR1INT_MASK                    (0x20U)
#define CTIMER_IR_CR1INT_SHIFT                   (5U)
#define CTIMER_IR_CR2INT_MASK                    (0x40U)
#define CTIMER_IR_CR2INT_SHIFT                   (6U)
#define CTIMER_IR_CR3INT_MASK                    (0x80U)
#define CTIMER_IR_CR3INT_SHIFT                   (7U)
/*! @} */

/*! @name TCR - Timer Control Register */
/*! @{ */
#define CTIMER_TCR_CEN_MASK                      (0x1U)
#define CTIMER_TCR_CEN_SHIFT                     (0U)
#define CTIMER_TCR_CRST_MASK                     (0x2U)
#define CTIMER_TCR_CRST_SHIFT                    (1U)
/*! @} */

/*! @name TC - Timer Counter */
/*! @{ */
#define CTIMER_TC_TCVAL_MASK                     (0xFFFFFFFFU)
#define CTIMER_TC_TCVAL_SHIFT                    (0U)
/*! TCVAL - Timer counter value.
 */
#define CTIMER_TC_TCVAL(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_TC_TCVAL_SHIFT)) & CTIMER_TC_TCVAL_MASK)
/*! @} */

/*! @name PR - Prescale Register */
/*! @{ */
#define CTIMER_PR_PRVAL_MASK                     (0xFFFFFFFFU)
#define CTIMER_PR_PRVAL_SHIFT                    (0U)
/*! PRVAL - Prescale reload value.
 */
#define CTIMER_PR_PRVAL(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_PR_PRVAL_SHIFT)) & CTIMER_PR_PRVAL_MASK)
/*! @} */

/*! @name PC - Prescale Counter. */
/*! @{ */
#define CTIMER_PC_PCVAL_MASK                     (0xFFFFFFFFU)
#define CTIMER_PC_PCVAL_SHIFT                    (0U)
/*! PCVAL - Prescale counter value.
 */
#define CTIMER_PC_PCVAL(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_PC_PCVAL_SHIFT)) & CTIMER_PC_PCVAL_MASK)
/*! @} */

/*! @name MCR - Match Control Register. */
/*! @{ */
#define CTIMER_MCR_MR0I_MASK                     (0x1U)
#define CTIMER_MCR_MR0I_SHIFT                    (0U)
#define CTIMER_MCR_MR0R_MASK                     (0x2U)
#define CTIMER_MCR_MR0R_SHIFT                    (1U)
#define CTIMER_MCR_MR0S_MASK                     (0x4U)
#define CTIMER_MCR_MR0S_SHIFT                    (2U)
#define CTIMER_MCR_MR1I_MASK                     (0x8U)
#define CTIMER_MCR_MR1I_SHIFT                    (3U)
#define CTIMER_MCR_MR1R_MASK                     (0x10U)
#define CTIMER_MCR_MR1R_SHIFT                    (4U)
#define CTIMER_MCR_MR1S_MASK                     (0x20U)
#define CTIMER_MCR_MR1S_SHIFT                    (5U)
#define CTIMER_MCR_MR2I_MASK                     (0x40U)
#define CTIMER_MCR_MR2I_SHIFT                    (6U)
#define CTIMER_MCR_MR2R_MASK                     (0x80U)
#define CTIMER_MCR_MR2R_SHIFT                    (7U)
#define CTIMER_MCR_MR2S_MASK                     (0x100U)
#define CTIMER_MCR_MR2S_SHIFT                    (8U)
#define CTIMER_MCR_MR3I_MASK                     (0x200U)
#define CTIMER_MCR_MR3I_SHIFT                    (9U)
#define CTIMER_MCR_MR3R_MASK                     (0x400U)
#define CTIMER_MCR_MR3R_SHIFT                    (10U)
#define CTIMER_MCR_MR3S_MASK                     (0x800U)
#define CTIMER_MCR_MR3S_SHIFT                    (11U)
#define CTIMER_MCR_MR0RL_MASK                    (0x1000000U)
#define CTIMER_MCR_MR0RL_SHIFT                   (24U)
#define CTIMER_MCR_MR1RL_MASK                    (0x2000000U)
#define CTIMER_MCR_MR1RL_SHIFT                   (25U)
#define CTIMER_MCR_MR2RL_MASK                    (0x4000000U)
#define CTIMER_MCR_MR2RL_SHIFT                   (26U)
#define CTIMER_MCR_MR3RL_MASK                    (0x8000000U)
#define CTIMER_MCR_MR3RL_SHIFT                   (27U)
/*! @} */

/*! @name MR - Match Register */
/*! @{ */
#define CTIMER_MR_MATCH_MASK                     (0xFFFFFFFFU)
#define CTIMER_MR_MATCH_SHIFT                    (0U)
/*! MATCH - Timer counter match value.
 */
#define CTIMER_MR_MATCH(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MR_MATCH_SHIFT)) & CTIMER_MR_MATCH_MASK)
/*! @} */

/* The count of CTIMER_MR */
#define CTIMER_MR_COUNT                          (4U)

/*! @name CCR - Capture Control Register */
/*! @{ */
#define CTIMER_CCR_CAP0RE_MASK                   (0x1U)
#define CTIMER_CCR_CAP0RE_SHIFT                  (0U)
#define CTIMER_CCR_CAP0FE_MASK                   (0x2U)
#define CTIMER_CCR_CAP0FE_SHIFT                  (1U)
#define CTIMER_CCR_CAP0I_MASK                    (0x4U)
#define CTIMER_CCR_CAP0I_SHIFT                   (2U)
#define CTIMER_CCR_CAP1RE_MASK                   (0x8U)
#define CTIMER_CCR_CAP1RE_SHIFT                  (3U)
#define CTIMER_CCR_CAP1FE_MASK                   (0x10U)
#define CTIMER_CCR_CAP1FE_SHIFT                  (4U)
#define CTIMER_CCR_CAP1I_MASK                    (0x20U)
#define CTIMER_CCR_CAP1I_SHIFT                   (5U)
#define CTIMER_CCR_CAP2RE_MASK                   (0x40U)
#define CTIMER_CCR_CAP2RE_SHIFT                  (6U)
#define CTIMER_CCR_CAP2FE_MASK                   (0x80U)
#define CTIMER_CCR_CAP2FE_SHIFT                  (7U)
#define CTIMER_CCR_CAP2I_MASK                    (0x100U)
#define CTIMER_CCR_CAP2I_SHIFT                   (8U)
#define CTIMER_CCR_CAP3RE_MASK                   (0x200U)
#define CTIMER_CCR_CAP3RE_SHIFT                  (9U)
#define CTIMER_CCR_CAP3FE_MASK                   (0x400U)
#define CTIMER_CCR_CAP3FE_SHIFT                  (10U)
#define CTIMER_CCR_CAP3I_MASK                    (0x800U)
#define CTIMER_CCR_CAP3I_SHIFT                   (11U)
/*! @} */

/*! @name CR - Capture Register */
/*! @{ */
#define CTIMER_CR_CAP_MASK                       (0xFFFFFFFFU)
#define CTIMER_CR_CAP_SHIFT                      (0U)
/*! CAP - Timer counter capture value.
 */
#define CTIMER_CR_CAP(x)                         (((uint32_t)(((uint32_t)(x)) << CTIMER_CR_CAP_SHIFT)) & CTIMER_CR_CAP_MASK)
/*! @} */

/* The count of CTIMER_CR */
#define CTIMER_CR_COUNT                          (4U)

/*! @name EMR - External Match Register */
/*! @{ */
#define CTIMER_EMR_EM0_MASK                      (0x1U)
#define CTIMER_EMR_EM0_SHIFT                     (0U)
#define CTIMER_EMR_EM1_MASK                      (0x2U)
#define CTIMER_EMR_EM1_SHIFT                     (1U)
#define CTIMER_EMR_EM2_MASK                      (0x4U)
#define CTIMER_EMR_EM2_SHIFT                     (2U)
#define CTIMER_EMR_EM3_MASK                      (0x8U)
#define CTIMER_EMR_EM3_SHIFT                     (3U)
#define CTIMER_EMR_EMC0_MASK                     (0x30U)
#define CTIMER_EMR_EMC0_SHIFT                    (4U)
/*! EMC0 - External Match Control 0
 *  0b00..Do Nothing.
 *  0b01..Clear. Clear the corresponding External Match bit/output to 0 (MAT0 pin is LOW if pinned out).
 *  0b10..Set. Set the corresponding External Match bit/output to 1 (MAT0 pin is HIGH if pinned out).
 *  0b11..Toggle. Toggle the corresponding External Match bit/output.
 */
#define CTIMER_EMR_EMC0(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EMC0_SHIFT)) & CTIMER_EMR_EMC0_MASK)
#define CTIMER_EMR_EMC1_MASK                     (0xC0U)
#define CTIMER_EMR_EMC1_SHIFT                    (6U)
/*! EMC1 - External Match Control 1
 *  0b00..Do Nothing
 *  0b01..Clear. Clear the corresponding External Match bit/output to 0 (MAT1 pin is LOW if pinned out).
 *  0b10..Set. Set the corresponding External Match bit/output to 1 (MAT1 pin is HIGH if pinned out).
 *  0b11..Toggle. Toggle the corresponding External Match bit/output.
 */
#define CTIMER_EMR_EMC1(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EMC1_SHIFT)) & CTIMER_EMR_EMC1_MASK)
#define CTIMER_EMR_EMC2_MASK                     (0x300U)
#define CTIMER_EMR_EMC2_SHIFT                    (8U)
/*! EMC2 - External Match Control 2
 *  0b00..Do Nothing.
 *  0b01..Clear. Clear the corresponding External Match bit/output to 0 (MAT2 pin is LOW if pinned out).
 *  0b10..Set. Set the corresponding External Match bit/output to 1 (MAT2 pin is HIGH if pinned out).
 *  0b11..Toggle. Toggle the corresponding External Match bit/output.
 */
#define CTIMER_EMR_EMC2(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EMC2_SHIFT)) & CTIMER_EMR_EMC2_MASK)
#define CTIMER_EMR_EMC3_MASK                     (0xC00U)
#define CTIMER_EMR_EMC3_SHIFT                    (10U)
/*! EMC3 - External Match Control 3
 *  0b00..Do Nothing.
 *  0b01..Clear. Clear the corresponding External Match bit/output to 0 (MAT3 pin is LOW if pinned out).
 *  0b10..Set. Set the corresponding External Match bit/output to 1 (MAT3 pin is HIGH if pinned out).
 *  0b11..Toggle. Toggle the corresponding External Match bit/output.
 */
#define CTIMER_EMR_EMC3(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EMC3_SHIFT)) & CTIMER_EMR_EMC3_MASK)
/*! @} */

/*! @name CTCR - Count Control Register */
/*! @{ */
#define CTIMER_CTCR_CTMODE_MASK                  (0x3U)
#define CTIMER_CTCR_CTMODE_SHIFT                 (0U)
/*! CTMODE - The Count Control Register (CTCR) is used to select between Timer and Counter mode, and
 *    in Counter mode to select the pin and edge(s) for counting.
 *  0b00..Timer Mode
 *  0b01..Counter Mode rising edge
 *  0b10..Counter Mode falling edge
 *  0b11..Counter Mode dual edge
 */
#define CTIMER_CTCR_CTMODE(x)                    (((uint32_t)(((uint32_t)(x)) << CTIMER_CTCR_CTMODE_SHIFT)) & CTIMER_CTCR_CTMODE_MASK)
#define CTIMER_CTCR_CINSEL_MASK                  (0xCU)
#define CTIMER_CTCR_CINSEL_SHIFT                 (2U)
/*! CINSEL - Count Input Select
 *  0b00..Channel 0. CAPn.0 for CTIMERn
 *  0b01..Channel 1. CAPn.1 for CTIMERn
 *  0b10..Channel 2. CAPn.2 for CTIMERn
 *  0b11..Channel 3. CAPn.3 for CTIMERn
 */
#define CTIMER_CTCR_CINSEL(x)                    (((uint32_t)(((uint32_t)(x)) << CTIMER_CTCR_CINSEL_SHIFT)) & CTIMER_CTCR_CINSEL_MASK)
#define CTIMER_CTCR_ENCC_MASK                    (0x10U)
#define CTIMER_CTCR_ENCC_SHIFT                   (4U)
#define CTIMER_CTCR_SELCC_MASK                   (0xE0U)
#define CTIMER_CTCR_SELCC_SHIFT                  (5U)
/*! SELCC - Edge select
 *  0b000..Channel 0 Rising Edge. Rising edge of the signal on capture channel 0 clears the timer (if bit 4 is set).
 *  0b001..Channel 0 Falling Edge. Falling edge of the signal on capture channel 0 clears the timer (if bit 4 is set).
 *  0b010..Channel 1 Rising Edge. Rising edge of the signal on capture channel 1 clears the timer (if bit 4 is set).
 *  0b011..Channel 1 Falling Edge. Falling edge of the signal on capture channel 1 clears the timer (if bit 4 is set).
 *  0b100..Channel 2 Rising Edge. Rising edge of the signal on capture channel 2 clears the timer (if bit 4 is set).
 *  0b101..Channel 2 Falling Edge. Falling edge of the signal on capture channel 2 clears the timer (if bit 4 is set).
 */
#define CTIMER_CTCR_SELCC(x)                     (((uint32_t)(((uint32_t)(x)) << CTIMER_CTCR_SELCC_SHIFT)) & CTIMER_CTCR_SELCC_MASK)
/*! @} */

/*! @name PWMC - PWM Control Register */
/*! @{ */
#define CTIMER_PWMC_PWMEN0_MASK                  (0x1U)
#define CTIMER_PWMC_PWMEN0_SHIFT                 (0U)
#define CTIMER_PWMC_PWMEN1_MASK                  (0x2U)
#define CTIMER_PWMC_PWMEN1_SHIFT                 (1U)
#define CTIMER_PWMC_PWMEN2_MASK                  (0x4U)
#define CTIMER_PWMC_PWMEN2_SHIFT                 (2U)
#define CTIMER_PWMC_PWMEN3_MASK                  (0x8U)
#define CTIMER_PWMC_PWMEN3_SHIFT                 (3U)
/*! @} */

/*! @name MSR - Match Shadow Register */
/*! @{ */
#define CTIMER_MSR_MATCH_SHADOW_MASK             (0xFFFFFFFFU)
#define CTIMER_MSR_MATCH_SHADOW_SHIFT            (0U)
/*! MATCH_SHADOW - Timer counter match shadow value.
 */
#define CTIMER_MSR_MATCH_SHADOW(x)               (((uint32_t)(((uint32_t)(x)) << CTIMER_MSR_MATCH_SHADOW_SHIFT)) & CTIMER_MSR_MATCH_SHADOW_MASK)
/*! @} */

/* The count of CTIMER_MSR */
#define CTIMER_MSR_COUNT                         (4U)


/*!
 * @}
 */ /* end of group CTIMER_Register_Masks */


/* CTIMER - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral CTIMER0 base pointer */
  #define CTIMER0_BASE_PTR                         ((CTIMER_MemMapPtr)0x50028000u)
  /** Peripheral CTIMER0 base pointer */
  #define CTIMER0_BASE_PTR_NS                      ((CTIMER_MemMapPtr)0x40028000u)
  /** Peripheral CTIMER1 base pointer */
  #define CTIMER1_BASE_PTR                         ((CTIMER_MemMapPtr)0x50029000u)
  /** Peripheral CTIMER1 base pointer */
  #define CTIMER1_BASE_PTR_NS                      ((CTIMER_MemMapPtr)0x40029000u)
  /** Peripheral CTIMER2 base pointer */
  #define CTIMER2_BASE_PTR                         ((CTIMER_MemMapPtr)0x5002A000u)
  /** Peripheral CTIMER2 base pointer */
  #define CTIMER2_BASE_PTR_NS                      ((CTIMER_MemMapPtr)0x4002A000u)
  /** Peripheral CTIMER3 base pointer */
  #define CTIMER3_BASE_PTR                         ((CTIMER_MemMapPtr)0x5002B000u)
  /** Peripheral CTIMER3 base pointer */
  #define CTIMER3_BASE_PTR_NS                      ((CTIMER_MemMapPtr)0x4002B000u)
  /** Peripheral CTIMER4 base pointer */
  #define CTIMER4_BASE_PTR                         ((CTIMER_MemMapPtr)0x5002C000u)
  /** Peripheral CTIMER4 base pointer */
  #define CTIMER4_BASE_PTR_NS                      ((CTIMER_MemMapPtr)0x4002C000u)
  /** Array initializer of CTIMER peripheral base pointers */
  #define CTIMER_BASE_PTRS                         { CTIMER0_BASE_PTR, CTIMER1_BASE_PTR, CTIMER2_BASE_PTR, CTIMER3_BASE_PTR, CTIMER4_BASE_PTR }
  /** Array initializer of CTIMER peripheral base pointers */
  #define CTIMER_BASE_PTRS_NS                      { CTIMER0_BASE_PTR_NS, CTIMER1_BASE_PTR_NS, CTIMER2_BASE_PTR_NS, CTIMER3_BASE_PTR_NS, CTIMER4_BASE_PTR_NS }
#else
  /** Peripheral CTIMER0 base pointer */
  #define CTIMER0_BASE_PTR                         ((CTIMER_MemMapPtr)0x40028000u)
  /** Peripheral CTIMER1 base pointer */
  #define CTIMER1_BASE_PTR                         ((CTIMER_MemMapPtr)0x40029000u)
  /** Peripheral CTIMER2 base pointer */
  #define CTIMER2_BASE_PTR                         ((CTIMER_MemMapPtr)0x4002A000u)
  /** Peripheral CTIMER3 base pointer */
  #define CTIMER3_BASE_PTR                         ((CTIMER_MemMapPtr)0x4002B000u)
  /** Peripheral CTIMER4 base pointer */
  #define CTIMER4_BASE_PTR                         ((CTIMER_MemMapPtr)0x4002C000u)
  /** Array initializer of CTIMER peripheral base pointers */
  #define CTIMER_BASE_PTRS                         { CTIMER0_BASE_PTR, CTIMER1_BASE_PTR, CTIMER2_BASE_PTR, CTIMER3_BASE_PTR, CTIMER4_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- CTIMER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CTIMER_Register_Accessor_Macros CTIMER - Register accessor macros
 * @{
 */


/* CTIMER - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* CTIMER0 */
  #define CTIMER0_IR                               CTIMER_IR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_IR_NS                            CTIMER_IR_REG(CTIMER0_BASE_PTR_NS)
  #define CTIMER0_TCR                              CTIMER_TCR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_TCR_NS                           CTIMER_TCR_REG(CTIMER0_BASE_PTR_NS)
  #define CTIMER0_TC                               CTIMER_TC_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_TC_NS                            CTIMER_TC_REG(CTIMER0_BASE_PTR_NS)
  #define CTIMER0_PR                               CTIMER_PR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_PR_NS                            CTIMER_PR_REG(CTIMER0_BASE_PTR_NS)
  #define CTIMER0_PC                               CTIMER_PC_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_PC_NS                            CTIMER_PC_REG(CTIMER0_BASE_PTR_NS)
  #define CTIMER0_MCR                              CTIMER_MCR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_MCR_NS                           CTIMER_MCR_REG(CTIMER0_BASE_PTR_NS)
  #define CTIMER0_MR0                              CTIMER_MR_REG(CTIMER0_BASE_PTR,0)
  #define CTIMER0_MR0_NS                           CTIMER_MR_REG(CTIMER0_BASE_PTR_NS,0)
  #define CTIMER0_MR1                              CTIMER_MR_REG(CTIMER0_BASE_PTR,1)
  #define CTIMER0_MR1_NS                           CTIMER_MR_REG(CTIMER0_BASE_PTR_NS,1)
  #define CTIMER0_MR2                              CTIMER_MR_REG(CTIMER0_BASE_PTR,2)
  #define CTIMER0_MR2_NS                           CTIMER_MR_REG(CTIMER0_BASE_PTR_NS,2)
  #define CTIMER0_MR3                              CTIMER_MR_REG(CTIMER0_BASE_PTR,3)
  #define CTIMER0_MR3_NS                           CTIMER_MR_REG(CTIMER0_BASE_PTR_NS,3)
  #define CTIMER0_CCR                              CTIMER_CCR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_CCR_NS                           CTIMER_CCR_REG(CTIMER0_BASE_PTR_NS)
  #define CTIMER0_CR0                              CTIMER_CR_REG(CTIMER0_BASE_PTR,0)
  #define CTIMER0_CR0_NS                           CTIMER_CR_REG(CTIMER0_BASE_PTR_NS,0)
  #define CTIMER0_CR1                              CTIMER_CR_REG(CTIMER0_BASE_PTR,1)
  #define CTIMER0_CR1_NS                           CTIMER_CR_REG(CTIMER0_BASE_PTR_NS,1)
  #define CTIMER0_CR2                              CTIMER_CR_REG(CTIMER0_BASE_PTR,2)
  #define CTIMER0_CR2_NS                           CTIMER_CR_REG(CTIMER0_BASE_PTR_NS,2)
  #define CTIMER0_CR3                              CTIMER_CR_REG(CTIMER0_BASE_PTR,3)
  #define CTIMER0_CR3_NS                           CTIMER_CR_REG(CTIMER0_BASE_PTR_NS,3)
  #define CTIMER0_EMR                              CTIMER_EMR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_EMR_NS                           CTIMER_EMR_REG(CTIMER0_BASE_PTR_NS)
  #define CTIMER0_CTCR                             CTIMER_CTCR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_CTCR_NS                          CTIMER_CTCR_REG(CTIMER0_BASE_PTR_NS)
  #define CTIMER0_PWMC                             CTIMER_PWMC_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_PWMC_NS                          CTIMER_PWMC_REG(CTIMER0_BASE_PTR_NS)
  #define CTIMER0_MSR0                             CTIMER_MSR_REG(CTIMER0_BASE_PTR,0)
  #define CTIMER0_MSR0_NS                          CTIMER_MSR_REG(CTIMER0_BASE_PTR_NS,0)
  #define CTIMER0_MSR1                             CTIMER_MSR_REG(CTIMER0_BASE_PTR,1)
  #define CTIMER0_MSR1_NS                          CTIMER_MSR_REG(CTIMER0_BASE_PTR_NS,1)
  #define CTIMER0_MSR2                             CTIMER_MSR_REG(CTIMER0_BASE_PTR,2)
  #define CTIMER0_MSR2_NS                          CTIMER_MSR_REG(CTIMER0_BASE_PTR_NS,2)
  #define CTIMER0_MSR3                             CTIMER_MSR_REG(CTIMER0_BASE_PTR,3)
  #define CTIMER0_MSR3_NS                          CTIMER_MSR_REG(CTIMER0_BASE_PTR_NS,3)
  /* CTIMER1 */
  #define CTIMER1_IR                               CTIMER_IR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_IR_NS                            CTIMER_IR_REG(CTIMER1_BASE_PTR_NS)
  #define CTIMER1_TCR                              CTIMER_TCR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_TCR_NS                           CTIMER_TCR_REG(CTIMER1_BASE_PTR_NS)
  #define CTIMER1_TC                               CTIMER_TC_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_TC_NS                            CTIMER_TC_REG(CTIMER1_BASE_PTR_NS)
  #define CTIMER1_PR                               CTIMER_PR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_PR_NS                            CTIMER_PR_REG(CTIMER1_BASE_PTR_NS)
  #define CTIMER1_PC                               CTIMER_PC_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_PC_NS                            CTIMER_PC_REG(CTIMER1_BASE_PTR_NS)
  #define CTIMER1_MCR                              CTIMER_MCR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_MCR_NS                           CTIMER_MCR_REG(CTIMER1_BASE_PTR_NS)
  #define CTIMER1_MR0                              CTIMER_MR_REG(CTIMER1_BASE_PTR,0)
  #define CTIMER1_MR0_NS                           CTIMER_MR_REG(CTIMER1_BASE_PTR_NS,0)
  #define CTIMER1_MR1                              CTIMER_MR_REG(CTIMER1_BASE_PTR,1)
  #define CTIMER1_MR1_NS                           CTIMER_MR_REG(CTIMER1_BASE_PTR_NS,1)
  #define CTIMER1_MR2                              CTIMER_MR_REG(CTIMER1_BASE_PTR,2)
  #define CTIMER1_MR2_NS                           CTIMER_MR_REG(CTIMER1_BASE_PTR_NS,2)
  #define CTIMER1_MR3                              CTIMER_MR_REG(CTIMER1_BASE_PTR,3)
  #define CTIMER1_MR3_NS                           CTIMER_MR_REG(CTIMER1_BASE_PTR_NS,3)
  #define CTIMER1_CCR                              CTIMER_CCR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_CCR_NS                           CTIMER_CCR_REG(CTIMER1_BASE_PTR_NS)
  #define CTIMER1_CR0                              CTIMER_CR_REG(CTIMER1_BASE_PTR,0)
  #define CTIMER1_CR0_NS                           CTIMER_CR_REG(CTIMER1_BASE_PTR_NS,0)
  #define CTIMER1_CR1                              CTIMER_CR_REG(CTIMER1_BASE_PTR,1)
  #define CTIMER1_CR1_NS                           CTIMER_CR_REG(CTIMER1_BASE_PTR_NS,1)
  #define CTIMER1_CR2                              CTIMER_CR_REG(CTIMER1_BASE_PTR,2)
  #define CTIMER1_CR2_NS                           CTIMER_CR_REG(CTIMER1_BASE_PTR_NS,2)
  #define CTIMER1_CR3                              CTIMER_CR_REG(CTIMER1_BASE_PTR,3)
  #define CTIMER1_CR3_NS                           CTIMER_CR_REG(CTIMER1_BASE_PTR_NS,3)
  #define CTIMER1_EMR                              CTIMER_EMR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_EMR_NS                           CTIMER_EMR_REG(CTIMER1_BASE_PTR_NS)
  #define CTIMER1_CTCR                             CTIMER_CTCR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_CTCR_NS                          CTIMER_CTCR_REG(CTIMER1_BASE_PTR_NS)
  #define CTIMER1_PWMC                             CTIMER_PWMC_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_PWMC_NS                          CTIMER_PWMC_REG(CTIMER1_BASE_PTR_NS)
  #define CTIMER1_MSR0                             CTIMER_MSR_REG(CTIMER1_BASE_PTR,0)
  #define CTIMER1_MSR0_NS                          CTIMER_MSR_REG(CTIMER1_BASE_PTR_NS,0)
  #define CTIMER1_MSR1                             CTIMER_MSR_REG(CTIMER1_BASE_PTR,1)
  #define CTIMER1_MSR1_NS                          CTIMER_MSR_REG(CTIMER1_BASE_PTR_NS,1)
  #define CTIMER1_MSR2                             CTIMER_MSR_REG(CTIMER1_BASE_PTR,2)
  #define CTIMER1_MSR2_NS                          CTIMER_MSR_REG(CTIMER1_BASE_PTR_NS,2)
  #define CTIMER1_MSR3                             CTIMER_MSR_REG(CTIMER1_BASE_PTR,3)
  #define CTIMER1_MSR3_NS                          CTIMER_MSR_REG(CTIMER1_BASE_PTR_NS,3)
  /* CTIMER2 */
  #define CTIMER2_IR                               CTIMER_IR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_IR_NS                            CTIMER_IR_REG(CTIMER2_BASE_PTR_NS)
  #define CTIMER2_TCR                              CTIMER_TCR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_TCR_NS                           CTIMER_TCR_REG(CTIMER2_BASE_PTR_NS)
  #define CTIMER2_TC                               CTIMER_TC_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_TC_NS                            CTIMER_TC_REG(CTIMER2_BASE_PTR_NS)
  #define CTIMER2_PR                               CTIMER_PR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_PR_NS                            CTIMER_PR_REG(CTIMER2_BASE_PTR_NS)
  #define CTIMER2_PC                               CTIMER_PC_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_PC_NS                            CTIMER_PC_REG(CTIMER2_BASE_PTR_NS)
  #define CTIMER2_MCR                              CTIMER_MCR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_MCR_NS                           CTIMER_MCR_REG(CTIMER2_BASE_PTR_NS)
  #define CTIMER2_MR0                              CTIMER_MR_REG(CTIMER2_BASE_PTR,0)
  #define CTIMER2_MR0_NS                           CTIMER_MR_REG(CTIMER2_BASE_PTR_NS,0)
  #define CTIMER2_MR1                              CTIMER_MR_REG(CTIMER2_BASE_PTR,1)
  #define CTIMER2_MR1_NS                           CTIMER_MR_REG(CTIMER2_BASE_PTR_NS,1)
  #define CTIMER2_MR2                              CTIMER_MR_REG(CTIMER2_BASE_PTR,2)
  #define CTIMER2_MR2_NS                           CTIMER_MR_REG(CTIMER2_BASE_PTR_NS,2)
  #define CTIMER2_MR3                              CTIMER_MR_REG(CTIMER2_BASE_PTR,3)
  #define CTIMER2_MR3_NS                           CTIMER_MR_REG(CTIMER2_BASE_PTR_NS,3)
  #define CTIMER2_CCR                              CTIMER_CCR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_CCR_NS                           CTIMER_CCR_REG(CTIMER2_BASE_PTR_NS)
  #define CTIMER2_CR0                              CTIMER_CR_REG(CTIMER2_BASE_PTR,0)
  #define CTIMER2_CR0_NS                           CTIMER_CR_REG(CTIMER2_BASE_PTR_NS,0)
  #define CTIMER2_CR1                              CTIMER_CR_REG(CTIMER2_BASE_PTR,1)
  #define CTIMER2_CR1_NS                           CTIMER_CR_REG(CTIMER2_BASE_PTR_NS,1)
  #define CTIMER2_CR2                              CTIMER_CR_REG(CTIMER2_BASE_PTR,2)
  #define CTIMER2_CR2_NS                           CTIMER_CR_REG(CTIMER2_BASE_PTR_NS,2)
  #define CTIMER2_CR3                              CTIMER_CR_REG(CTIMER2_BASE_PTR,3)
  #define CTIMER2_CR3_NS                           CTIMER_CR_REG(CTIMER2_BASE_PTR_NS,3)
  #define CTIMER2_EMR                              CTIMER_EMR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_EMR_NS                           CTIMER_EMR_REG(CTIMER2_BASE_PTR_NS)
  #define CTIMER2_CTCR                             CTIMER_CTCR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_CTCR_NS                          CTIMER_CTCR_REG(CTIMER2_BASE_PTR_NS)
  #define CTIMER2_PWMC                             CTIMER_PWMC_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_PWMC_NS                          CTIMER_PWMC_REG(CTIMER2_BASE_PTR_NS)
  #define CTIMER2_MSR0                             CTIMER_MSR_REG(CTIMER2_BASE_PTR,0)
  #define CTIMER2_MSR0_NS                          CTIMER_MSR_REG(CTIMER2_BASE_PTR_NS,0)
  #define CTIMER2_MSR1                             CTIMER_MSR_REG(CTIMER2_BASE_PTR,1)
  #define CTIMER2_MSR1_NS                          CTIMER_MSR_REG(CTIMER2_BASE_PTR_NS,1)
  #define CTIMER2_MSR2                             CTIMER_MSR_REG(CTIMER2_BASE_PTR,2)
  #define CTIMER2_MSR2_NS                          CTIMER_MSR_REG(CTIMER2_BASE_PTR_NS,2)
  #define CTIMER2_MSR3                             CTIMER_MSR_REG(CTIMER2_BASE_PTR,3)
  #define CTIMER2_MSR3_NS                          CTIMER_MSR_REG(CTIMER2_BASE_PTR_NS,3)
  /* CTIMER3 */
  #define CTIMER3_IR                               CTIMER_IR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_IR_NS                            CTIMER_IR_REG(CTIMER3_BASE_PTR_NS)
  #define CTIMER3_TCR                              CTIMER_TCR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_TCR_NS                           CTIMER_TCR_REG(CTIMER3_BASE_PTR_NS)
  #define CTIMER3_TC                               CTIMER_TC_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_TC_NS                            CTIMER_TC_REG(CTIMER3_BASE_PTR_NS)
  #define CTIMER3_PR                               CTIMER_PR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_PR_NS                            CTIMER_PR_REG(CTIMER3_BASE_PTR_NS)
  #define CTIMER3_PC                               CTIMER_PC_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_PC_NS                            CTIMER_PC_REG(CTIMER3_BASE_PTR_NS)
  #define CTIMER3_MCR                              CTIMER_MCR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_MCR_NS                           CTIMER_MCR_REG(CTIMER3_BASE_PTR_NS)
  #define CTIMER3_MR0                              CTIMER_MR_REG(CTIMER3_BASE_PTR,0)
  #define CTIMER3_MR0_NS                           CTIMER_MR_REG(CTIMER3_BASE_PTR_NS,0)
  #define CTIMER3_MR1                              CTIMER_MR_REG(CTIMER3_BASE_PTR,1)
  #define CTIMER3_MR1_NS                           CTIMER_MR_REG(CTIMER3_BASE_PTR_NS,1)
  #define CTIMER3_MR2                              CTIMER_MR_REG(CTIMER3_BASE_PTR,2)
  #define CTIMER3_MR2_NS                           CTIMER_MR_REG(CTIMER3_BASE_PTR_NS,2)
  #define CTIMER3_MR3                              CTIMER_MR_REG(CTIMER3_BASE_PTR,3)
  #define CTIMER3_MR3_NS                           CTIMER_MR_REG(CTIMER3_BASE_PTR_NS,3)
  #define CTIMER3_CCR                              CTIMER_CCR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_CCR_NS                           CTIMER_CCR_REG(CTIMER3_BASE_PTR_NS)
  #define CTIMER3_CR0                              CTIMER_CR_REG(CTIMER3_BASE_PTR,0)
  #define CTIMER3_CR0_NS                           CTIMER_CR_REG(CTIMER3_BASE_PTR_NS,0)
  #define CTIMER3_CR1                              CTIMER_CR_REG(CTIMER3_BASE_PTR,1)
  #define CTIMER3_CR1_NS                           CTIMER_CR_REG(CTIMER3_BASE_PTR_NS,1)
  #define CTIMER3_CR2                              CTIMER_CR_REG(CTIMER3_BASE_PTR,2)
  #define CTIMER3_CR2_NS                           CTIMER_CR_REG(CTIMER3_BASE_PTR_NS,2)
  #define CTIMER3_CR3                              CTIMER_CR_REG(CTIMER3_BASE_PTR,3)
  #define CTIMER3_CR3_NS                           CTIMER_CR_REG(CTIMER3_BASE_PTR_NS,3)
  #define CTIMER3_EMR                              CTIMER_EMR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_EMR_NS                           CTIMER_EMR_REG(CTIMER3_BASE_PTR_NS)
  #define CTIMER3_CTCR                             CTIMER_CTCR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_CTCR_NS                          CTIMER_CTCR_REG(CTIMER3_BASE_PTR_NS)
  #define CTIMER3_PWMC                             CTIMER_PWMC_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_PWMC_NS                          CTIMER_PWMC_REG(CTIMER3_BASE_PTR_NS)
  #define CTIMER3_MSR0                             CTIMER_MSR_REG(CTIMER3_BASE_PTR,0)
  #define CTIMER3_MSR0_NS                          CTIMER_MSR_REG(CTIMER3_BASE_PTR_NS,0)
  #define CTIMER3_MSR1                             CTIMER_MSR_REG(CTIMER3_BASE_PTR,1)
  #define CTIMER3_MSR1_NS                          CTIMER_MSR_REG(CTIMER3_BASE_PTR_NS,1)
  #define CTIMER3_MSR2                             CTIMER_MSR_REG(CTIMER3_BASE_PTR,2)
  #define CTIMER3_MSR2_NS                          CTIMER_MSR_REG(CTIMER3_BASE_PTR_NS,2)
  #define CTIMER3_MSR3                             CTIMER_MSR_REG(CTIMER3_BASE_PTR,3)
  #define CTIMER3_MSR3_NS                          CTIMER_MSR_REG(CTIMER3_BASE_PTR_NS,3)
  /* CTIMER4 */
  #define CTIMER4_IR                               CTIMER_IR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_IR_NS                            CTIMER_IR_REG(CTIMER4_BASE_PTR_NS)
  #define CTIMER4_TCR                              CTIMER_TCR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_TCR_NS                           CTIMER_TCR_REG(CTIMER4_BASE_PTR_NS)
  #define CTIMER4_TC                               CTIMER_TC_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_TC_NS                            CTIMER_TC_REG(CTIMER4_BASE_PTR_NS)
  #define CTIMER4_PR                               CTIMER_PR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_PR_NS                            CTIMER_PR_REG(CTIMER4_BASE_PTR_NS)
  #define CTIMER4_PC                               CTIMER_PC_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_PC_NS                            CTIMER_PC_REG(CTIMER4_BASE_PTR_NS)
  #define CTIMER4_MCR                              CTIMER_MCR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_MCR_NS                           CTIMER_MCR_REG(CTIMER4_BASE_PTR_NS)
  #define CTIMER4_MR0                              CTIMER_MR_REG(CTIMER4_BASE_PTR,0)
  #define CTIMER4_MR0_NS                           CTIMER_MR_REG(CTIMER4_BASE_PTR_NS,0)
  #define CTIMER4_MR1                              CTIMER_MR_REG(CTIMER4_BASE_PTR,1)
  #define CTIMER4_MR1_NS                           CTIMER_MR_REG(CTIMER4_BASE_PTR_NS,1)
  #define CTIMER4_MR2                              CTIMER_MR_REG(CTIMER4_BASE_PTR,2)
  #define CTIMER4_MR2_NS                           CTIMER_MR_REG(CTIMER4_BASE_PTR_NS,2)
  #define CTIMER4_MR3                              CTIMER_MR_REG(CTIMER4_BASE_PTR,3)
  #define CTIMER4_MR3_NS                           CTIMER_MR_REG(CTIMER4_BASE_PTR_NS,3)
  #define CTIMER4_CCR                              CTIMER_CCR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_CCR_NS                           CTIMER_CCR_REG(CTIMER4_BASE_PTR_NS)
  #define CTIMER4_CR0                              CTIMER_CR_REG(CTIMER4_BASE_PTR,0)
  #define CTIMER4_CR0_NS                           CTIMER_CR_REG(CTIMER4_BASE_PTR_NS,0)
  #define CTIMER4_CR1                              CTIMER_CR_REG(CTIMER4_BASE_PTR,1)
  #define CTIMER4_CR1_NS                           CTIMER_CR_REG(CTIMER4_BASE_PTR_NS,1)
  #define CTIMER4_CR2                              CTIMER_CR_REG(CTIMER4_BASE_PTR,2)
  #define CTIMER4_CR2_NS                           CTIMER_CR_REG(CTIMER4_BASE_PTR_NS,2)
  #define CTIMER4_CR3                              CTIMER_CR_REG(CTIMER4_BASE_PTR,3)
  #define CTIMER4_CR3_NS                           CTIMER_CR_REG(CTIMER4_BASE_PTR_NS,3)
  #define CTIMER4_EMR                              CTIMER_EMR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_EMR_NS                           CTIMER_EMR_REG(CTIMER4_BASE_PTR_NS)
  #define CTIMER4_CTCR                             CTIMER_CTCR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_CTCR_NS                          CTIMER_CTCR_REG(CTIMER4_BASE_PTR_NS)
  #define CTIMER4_PWMC                             CTIMER_PWMC_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_PWMC_NS                          CTIMER_PWMC_REG(CTIMER4_BASE_PTR_NS)
  #define CTIMER4_MSR0                             CTIMER_MSR_REG(CTIMER4_BASE_PTR,0)
  #define CTIMER4_MSR0_NS                          CTIMER_MSR_REG(CTIMER4_BASE_PTR_NS,0)
  #define CTIMER4_MSR1                             CTIMER_MSR_REG(CTIMER4_BASE_PTR,1)
  #define CTIMER4_MSR1_NS                          CTIMER_MSR_REG(CTIMER4_BASE_PTR_NS,1)
  #define CTIMER4_MSR2                             CTIMER_MSR_REG(CTIMER4_BASE_PTR,2)
  #define CTIMER4_MSR2_NS                          CTIMER_MSR_REG(CTIMER4_BASE_PTR_NS,2)
  #define CTIMER4_MSR3                             CTIMER_MSR_REG(CTIMER4_BASE_PTR,3)
  #define CTIMER4_MSR3_NS                          CTIMER_MSR_REG(CTIMER4_BASE_PTR_NS,3)
#else
  /* CTIMER0 */
  #define CTIMER0_IR                               CTIMER_IR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_TCR                              CTIMER_TCR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_TC                               CTIMER_TC_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_PR                               CTIMER_PR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_PC                               CTIMER_PC_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_MCR                              CTIMER_MCR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_MR0                              CTIMER_MR_REG(CTIMER0_BASE_PTR,0)
  #define CTIMER0_MR1                              CTIMER_MR_REG(CTIMER0_BASE_PTR,1)
  #define CTIMER0_MR2                              CTIMER_MR_REG(CTIMER0_BASE_PTR,2)
  #define CTIMER0_MR3                              CTIMER_MR_REG(CTIMER0_BASE_PTR,3)
  #define CTIMER0_CCR                              CTIMER_CCR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_CR0                              CTIMER_CR_REG(CTIMER0_BASE_PTR,0)
  #define CTIMER0_CR1                              CTIMER_CR_REG(CTIMER0_BASE_PTR,1)
  #define CTIMER0_CR2                              CTIMER_CR_REG(CTIMER0_BASE_PTR,2)
  #define CTIMER0_CR3                              CTIMER_CR_REG(CTIMER0_BASE_PTR,3)
  #define CTIMER0_EMR                              CTIMER_EMR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_CTCR                             CTIMER_CTCR_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_PWMC                             CTIMER_PWMC_REG(CTIMER0_BASE_PTR)
  #define CTIMER0_MSR0                             CTIMER_MSR_REG(CTIMER0_BASE_PTR,0)
  #define CTIMER0_MSR1                             CTIMER_MSR_REG(CTIMER0_BASE_PTR,1)
  #define CTIMER0_MSR2                             CTIMER_MSR_REG(CTIMER0_BASE_PTR,2)
  #define CTIMER0_MSR3                             CTIMER_MSR_REG(CTIMER0_BASE_PTR,3)
  /* CTIMER1 */
  #define CTIMER1_IR                               CTIMER_IR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_TCR                              CTIMER_TCR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_TC                               CTIMER_TC_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_PR                               CTIMER_PR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_PC                               CTIMER_PC_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_MCR                              CTIMER_MCR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_MR0                              CTIMER_MR_REG(CTIMER1_BASE_PTR,0)
  #define CTIMER1_MR1                              CTIMER_MR_REG(CTIMER1_BASE_PTR,1)
  #define CTIMER1_MR2                              CTIMER_MR_REG(CTIMER1_BASE_PTR,2)
  #define CTIMER1_MR3                              CTIMER_MR_REG(CTIMER1_BASE_PTR,3)
  #define CTIMER1_CCR                              CTIMER_CCR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_CR0                              CTIMER_CR_REG(CTIMER1_BASE_PTR,0)
  #define CTIMER1_CR1                              CTIMER_CR_REG(CTIMER1_BASE_PTR,1)
  #define CTIMER1_CR2                              CTIMER_CR_REG(CTIMER1_BASE_PTR,2)
  #define CTIMER1_CR3                              CTIMER_CR_REG(CTIMER1_BASE_PTR,3)
  #define CTIMER1_EMR                              CTIMER_EMR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_CTCR                             CTIMER_CTCR_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_PWMC                             CTIMER_PWMC_REG(CTIMER1_BASE_PTR)
  #define CTIMER1_MSR0                             CTIMER_MSR_REG(CTIMER1_BASE_PTR,0)
  #define CTIMER1_MSR1                             CTIMER_MSR_REG(CTIMER1_BASE_PTR,1)
  #define CTIMER1_MSR2                             CTIMER_MSR_REG(CTIMER1_BASE_PTR,2)
  #define CTIMER1_MSR3                             CTIMER_MSR_REG(CTIMER1_BASE_PTR,3)
  /* CTIMER2 */
  #define CTIMER2_IR                               CTIMER_IR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_TCR                              CTIMER_TCR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_TC                               CTIMER_TC_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_PR                               CTIMER_PR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_PC                               CTIMER_PC_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_MCR                              CTIMER_MCR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_MR0                              CTIMER_MR_REG(CTIMER2_BASE_PTR,0)
  #define CTIMER2_MR1                              CTIMER_MR_REG(CTIMER2_BASE_PTR,1)
  #define CTIMER2_MR2                              CTIMER_MR_REG(CTIMER2_BASE_PTR,2)
  #define CTIMER2_MR3                              CTIMER_MR_REG(CTIMER2_BASE_PTR,3)
  #define CTIMER2_CCR                              CTIMER_CCR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_CR0                              CTIMER_CR_REG(CTIMER2_BASE_PTR,0)
  #define CTIMER2_CR1                              CTIMER_CR_REG(CTIMER2_BASE_PTR,1)
  #define CTIMER2_CR2                              CTIMER_CR_REG(CTIMER2_BASE_PTR,2)
  #define CTIMER2_CR3                              CTIMER_CR_REG(CTIMER2_BASE_PTR,3)
  #define CTIMER2_EMR                              CTIMER_EMR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_CTCR                             CTIMER_CTCR_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_PWMC                             CTIMER_PWMC_REG(CTIMER2_BASE_PTR)
  #define CTIMER2_MSR0                             CTIMER_MSR_REG(CTIMER2_BASE_PTR,0)
  #define CTIMER2_MSR1                             CTIMER_MSR_REG(CTIMER2_BASE_PTR,1)
  #define CTIMER2_MSR2                             CTIMER_MSR_REG(CTIMER2_BASE_PTR,2)
  #define CTIMER2_MSR3                             CTIMER_MSR_REG(CTIMER2_BASE_PTR,3)
  /* CTIMER3 */
  #define CTIMER3_IR                               CTIMER_IR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_TCR                              CTIMER_TCR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_TC                               CTIMER_TC_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_PR                               CTIMER_PR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_PC                               CTIMER_PC_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_MCR                              CTIMER_MCR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_MR0                              CTIMER_MR_REG(CTIMER3_BASE_PTR,0)
  #define CTIMER3_MR1                              CTIMER_MR_REG(CTIMER3_BASE_PTR,1)
  #define CTIMER3_MR2                              CTIMER_MR_REG(CTIMER3_BASE_PTR,2)
  #define CTIMER3_MR3                              CTIMER_MR_REG(CTIMER3_BASE_PTR,3)
  #define CTIMER3_CCR                              CTIMER_CCR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_CR0                              CTIMER_CR_REG(CTIMER3_BASE_PTR,0)
  #define CTIMER3_CR1                              CTIMER_CR_REG(CTIMER3_BASE_PTR,1)
  #define CTIMER3_CR2                              CTIMER_CR_REG(CTIMER3_BASE_PTR,2)
  #define CTIMER3_CR3                              CTIMER_CR_REG(CTIMER3_BASE_PTR,3)
  #define CTIMER3_EMR                              CTIMER_EMR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_CTCR                             CTIMER_CTCR_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_PWMC                             CTIMER_PWMC_REG(CTIMER3_BASE_PTR)
  #define CTIMER3_MSR0                             CTIMER_MSR_REG(CTIMER3_BASE_PTR,0)
  #define CTIMER3_MSR1                             CTIMER_MSR_REG(CTIMER3_BASE_PTR,1)
  #define CTIMER3_MSR2                             CTIMER_MSR_REG(CTIMER3_BASE_PTR,2)
  #define CTIMER3_MSR3                             CTIMER_MSR_REG(CTIMER3_BASE_PTR,3)
  /* CTIMER4 */
  #define CTIMER4_IR                               CTIMER_IR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_TCR                              CTIMER_TCR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_TC                               CTIMER_TC_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_PR                               CTIMER_PR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_PC                               CTIMER_PC_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_MCR                              CTIMER_MCR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_MR0                              CTIMER_MR_REG(CTIMER4_BASE_PTR,0)
  #define CTIMER4_MR1                              CTIMER_MR_REG(CTIMER4_BASE_PTR,1)
  #define CTIMER4_MR2                              CTIMER_MR_REG(CTIMER4_BASE_PTR,2)
  #define CTIMER4_MR3                              CTIMER_MR_REG(CTIMER4_BASE_PTR,3)
  #define CTIMER4_CCR                              CTIMER_CCR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_CR0                              CTIMER_CR_REG(CTIMER4_BASE_PTR,0)
  #define CTIMER4_CR1                              CTIMER_CR_REG(CTIMER4_BASE_PTR,1)
  #define CTIMER4_CR2                              CTIMER_CR_REG(CTIMER4_BASE_PTR,2)
  #define CTIMER4_CR3                              CTIMER_CR_REG(CTIMER4_BASE_PTR,3)
  #define CTIMER4_EMR                              CTIMER_EMR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_CTCR                             CTIMER_CTCR_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_PWMC                             CTIMER_PWMC_REG(CTIMER4_BASE_PTR)
  #define CTIMER4_MSR0                             CTIMER_MSR_REG(CTIMER4_BASE_PTR,0)
  #define CTIMER4_MSR1                             CTIMER_MSR_REG(CTIMER4_BASE_PTR,1)
  #define CTIMER4_MSR2                             CTIMER_MSR_REG(CTIMER4_BASE_PTR,2)
  #define CTIMER4_MSR3                             CTIMER_MSR_REG(CTIMER4_BASE_PTR,3)
#endif

/* CTIMER - Register array accessors */
#define CTIMER0_MR(index)                        CTIMER_MR_REG(CTIMER0_BASE_PTR,index)
#define CTIMER0_MR_NS(index)                     CTIMER_MR_REG(CTIMER0_BASE_PTR_NS,index)
#define CTIMER0_MR(index)                        CTIMER_MR_REG(CTIMER0_BASE_PTR,index)
#define CTIMER1_MR(index)                        CTIMER_MR_REG(CTIMER1_BASE_PTR,index)
#define CTIMER1_MR_NS(index)                     CTIMER_MR_REG(CTIMER1_BASE_PTR_NS,index)
#define CTIMER1_MR(index)                        CTIMER_MR_REG(CTIMER1_BASE_PTR,index)
#define CTIMER2_MR(index)                        CTIMER_MR_REG(CTIMER2_BASE_PTR,index)
#define CTIMER2_MR_NS(index)                     CTIMER_MR_REG(CTIMER2_BASE_PTR_NS,index)
#define CTIMER2_MR(index)                        CTIMER_MR_REG(CTIMER2_BASE_PTR,index)
#define CTIMER3_MR(index)                        CTIMER_MR_REG(CTIMER3_BASE_PTR,index)
#define CTIMER3_MR_NS(index)                     CTIMER_MR_REG(CTIMER3_BASE_PTR_NS,index)
#define CTIMER3_MR(index)                        CTIMER_MR_REG(CTIMER3_BASE_PTR,index)
#define CTIMER4_MR(index)                        CTIMER_MR_REG(CTIMER4_BASE_PTR,index)
#define CTIMER4_MR_NS(index)                     CTIMER_MR_REG(CTIMER4_BASE_PTR_NS,index)
#define CTIMER4_MR(index)                        CTIMER_MR_REG(CTIMER4_BASE_PTR,index)
#define CTIMER0_CR(index)                        CTIMER_CR_REG(CTIMER0_BASE_PTR,index)
#define CTIMER0_CR_NS(index)                     CTIMER_CR_REG(CTIMER0_BASE_PTR_NS,index)
#define CTIMER0_CR(index)                        CTIMER_CR_REG(CTIMER0_BASE_PTR,index)
#define CTIMER1_CR(index)                        CTIMER_CR_REG(CTIMER1_BASE_PTR,index)
#define CTIMER1_CR_NS(index)                     CTIMER_CR_REG(CTIMER1_BASE_PTR_NS,index)
#define CTIMER1_CR(index)                        CTIMER_CR_REG(CTIMER1_BASE_PTR,index)
#define CTIMER2_CR(index)                        CTIMER_CR_REG(CTIMER2_BASE_PTR,index)
#define CTIMER2_CR_NS(index)                     CTIMER_CR_REG(CTIMER2_BASE_PTR_NS,index)
#define CTIMER2_CR(index)                        CTIMER_CR_REG(CTIMER2_BASE_PTR,index)
#define CTIMER3_CR(index)                        CTIMER_CR_REG(CTIMER3_BASE_PTR,index)
#define CTIMER3_CR_NS(index)                     CTIMER_CR_REG(CTIMER3_BASE_PTR_NS,index)
#define CTIMER3_CR(index)                        CTIMER_CR_REG(CTIMER3_BASE_PTR,index)
#define CTIMER4_CR(index)                        CTIMER_CR_REG(CTIMER4_BASE_PTR,index)
#define CTIMER4_CR_NS(index)                     CTIMER_CR_REG(CTIMER4_BASE_PTR_NS,index)
#define CTIMER4_CR(index)                        CTIMER_CR_REG(CTIMER4_BASE_PTR,index)
#define CTIMER0_MSR(index)                       CTIMER_MSR_REG(CTIMER0_BASE_PTR,index)
#define CTIMER0_MSR_NS(index)                    CTIMER_MSR_REG(CTIMER0_BASE_PTR_NS,index)
#define CTIMER0_MSR(index)                       CTIMER_MSR_REG(CTIMER0_BASE_PTR,index)
#define CTIMER1_MSR(index)                       CTIMER_MSR_REG(CTIMER1_BASE_PTR,index)
#define CTIMER1_MSR_NS(index)                    CTIMER_MSR_REG(CTIMER1_BASE_PTR_NS,index)
#define CTIMER1_MSR(index)                       CTIMER_MSR_REG(CTIMER1_BASE_PTR,index)
#define CTIMER2_MSR(index)                       CTIMER_MSR_REG(CTIMER2_BASE_PTR,index)
#define CTIMER2_MSR_NS(index)                    CTIMER_MSR_REG(CTIMER2_BASE_PTR_NS,index)
#define CTIMER2_MSR(index)                       CTIMER_MSR_REG(CTIMER2_BASE_PTR,index)
#define CTIMER3_MSR(index)                       CTIMER_MSR_REG(CTIMER3_BASE_PTR,index)
#define CTIMER3_MSR_NS(index)                    CTIMER_MSR_REG(CTIMER3_BASE_PTR_NS,index)
#define CTIMER3_MSR(index)                       CTIMER_MSR_REG(CTIMER3_BASE_PTR,index)
#define CTIMER4_MSR(index)                       CTIMER_MSR_REG(CTIMER4_BASE_PTR,index)
#define CTIMER4_MSR_NS(index)                    CTIMER_MSR_REG(CTIMER4_BASE_PTR_NS,index)
#define CTIMER4_MSR(index)                       CTIMER_MSR_REG(CTIMER4_BASE_PTR,index)

/*!
 * @}
 */ /* end of group CTIMER_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CTIMER_Peripheral */


/* ----------------------------------------------------------------------------
   -- DEBUGGER_MAILBOX
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DEBUGGER_MAILBOX_Peripheral DEBUGGER_MAILBOX
 * @{
 */

/** DEBUGGER_MAILBOX - Peripheral register structure */
typedef struct DEBUGGER_MAILBOX_MemMap {
  uint32_t CSW;                                    /**< Command and status word, offset: 0x0 */
  uint32_t REQUEST;                                /**< Request Value, offset: 0x4 */
  uint32_t RETURN;                                 /**< Return Value, offset: 0x8 */
  uint8_t RESERVED_0[240];
  uint32_t ID;                                     /**< Identification, offset: 0xFC */
} volatile *DEBUGGER_MAILBOX_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DEBUGGER_MAILBOX - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DEBUGGER_MAILBOX_Register_Accessor_Macros DEBUGGER_MAILBOX - Register accessor macros
 * @{
 */


/* DEBUGGER_MAILBOX - Register accessors */
#define DEBUGGER_MAILBOX_CSW_REG(base)           ((base)->CSW)
#define DEBUGGER_MAILBOX_REQUEST_REG(base)       ((base)->REQUEST)
#define DEBUGGER_MAILBOX_RETURN_REG(base)        ((base)->RETURN)
#define DEBUGGER_MAILBOX_ID_REG(base)            ((base)->ID)

/*!
 * @}
 */ /* end of group DEBUGGER_MAILBOX_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DEBUGGER_MAILBOX Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DEBUGGER_MAILBOX_Register_Masks DEBUGGER_MAILBOX Register Masks
 * @{
 */

/*! @name CSW - Command and status word */
/*! @{ */
#define DEBUGGER_MAILBOX_CSW_RESYNCH_REQ_MASK    (0x1U)
#define DEBUGGER_MAILBOX_CSW_RESYNCH_REQ_SHIFT   (0U)
#define DEBUGGER_MAILBOX_CSW_REQ_PENDING_MASK    (0x2U)
#define DEBUGGER_MAILBOX_CSW_REQ_PENDING_SHIFT   (1U)
#define DEBUGGER_MAILBOX_CSW_DBG_OR_ERR_MASK     (0x4U)
#define DEBUGGER_MAILBOX_CSW_DBG_OR_ERR_SHIFT    (2U)
#define DEBUGGER_MAILBOX_CSW_AHB_OR_ERR_MASK     (0x8U)
#define DEBUGGER_MAILBOX_CSW_AHB_OR_ERR_SHIFT    (3U)
#define DEBUGGER_MAILBOX_CSW_SOFT_RESET_MASK     (0x10U)
#define DEBUGGER_MAILBOX_CSW_SOFT_RESET_SHIFT    (4U)
#define DEBUGGER_MAILBOX_CSW_CHIP_RESET_REQ_MASK (0x20U)
#define DEBUGGER_MAILBOX_CSW_CHIP_RESET_REQ_SHIFT (5U)
/*! @} */

/*! @name REQUEST - Request Value */
/*! @{ */
#define DEBUGGER_MAILBOX_REQUEST_REQUEST_MASK    (0xFFFFFFFFU)
#define DEBUGGER_MAILBOX_REQUEST_REQUEST_SHIFT   (0U)
/*! REQUEST - Request Value
 */
#define DEBUGGER_MAILBOX_REQUEST_REQUEST(x)      (((uint32_t)(((uint32_t)(x)) << DEBUGGER_MAILBOX_REQUEST_REQUEST_SHIFT)) & DEBUGGER_MAILBOX_REQUEST_REQUEST_MASK)
/*! @} */

/*! @name RETURN - Return Value */
/*! @{ */
#define DEBUGGER_MAILBOX_RETURN_RETURN_MASK      (0xFFFFFFFFU)
#define DEBUGGER_MAILBOX_RETURN_RETURN_SHIFT     (0U)
/*! RETURN - Return Value
 */
#define DEBUGGER_MAILBOX_RETURN_RETURN(x)        (((uint32_t)(((uint32_t)(x)) << DEBUGGER_MAILBOX_RETURN_RETURN_SHIFT)) & DEBUGGER_MAILBOX_RETURN_RETURN_MASK)
/*! @} */

/*! @name ID - Identification */
/*! @{ */
#define DEBUGGER_MAILBOX_ID_ID_MASK              (0xFFFFFFFFU)
#define DEBUGGER_MAILBOX_ID_ID_SHIFT             (0U)
/*! ID - Identification Value
 */
#define DEBUGGER_MAILBOX_ID_ID(x)                (((uint32_t)(((uint32_t)(x)) << DEBUGGER_MAILBOX_ID_ID_SHIFT)) & DEBUGGER_MAILBOX_ID_ID_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group DEBUGGER_MAILBOX_Register_Masks */


/* DEBUGGER_MAILBOX - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral DEBUGGER_MAILBOX base pointer */
  #define DEBUGGER_MAILBOX_BASE_PTR                ((DEBUGGER_MAILBOX_MemMapPtr)0x5010F000u)
  /** Peripheral DEBUGGER_MAILBOX base pointer */
  #define DEBUGGER_MAILBOX_BASE_PTR_NS             ((DEBUGGER_MAILBOX_MemMapPtr)0x4010F000u)
  /** Array initializer of DEBUGGER_MAILBOX peripheral base pointers */
  #define DEBUGGER_MAILBOX_BASE_PTRS               { DEBUGGER_MAILBOX_BASE_PTR }
  /** Array initializer of DEBUGGER_MAILBOX peripheral base pointers */
  #define DEBUGGER_MAILBOX_BASE_PTRS_NS            { DEBUGGER_MAILBOX_BASE_PTR_NS }
#else
  /** Peripheral DEBUGGER_MAILBOX base pointer */
  #define DEBUGGER_MAILBOX_BASE_PTR                ((DEBUGGER_MAILBOX_MemMapPtr)0x4010F000u)
  /** Array initializer of DEBUGGER_MAILBOX peripheral base pointers */
  #define DEBUGGER_MAILBOX_BASE_PTRS               { DEBUGGER_MAILBOX_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- DEBUGGER_MAILBOX - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DEBUGGER_MAILBOX_Register_Accessor_Macros DEBUGGER_MAILBOX - Register accessor macros
 * @{
 */


/* DEBUGGER_MAILBOX - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* DEBUGGER_MAILBOX */
  #define DEBUGGER_MAILBOX_CSW                     DEBUGGER_MAILBOX_CSW_REG(DEBUGGER_MAILBOX_BASE_PTR)
  #define DEBUGGER_MAILBOX_CSW_NS                  DEBUGGER_MAILBOX_CSW_REG(DEBUGGER_MAILBOX_BASE_PTR_NS)
  #define DEBUGGER_MAILBOX_REQUEST                 DEBUGGER_MAILBOX_REQUEST_REG(DEBUGGER_MAILBOX_BASE_PTR)
  #define DEBUGGER_MAILBOX_REQUEST_NS              DEBUGGER_MAILBOX_REQUEST_REG(DEBUGGER_MAILBOX_BASE_PTR_NS)
  #define DEBUGGER_MAILBOX_RETURN                  DEBUGGER_MAILBOX_RETURN_REG(DEBUGGER_MAILBOX_BASE_PTR)
  #define DEBUGGER_MAILBOX_RETURN_NS               DEBUGGER_MAILBOX_RETURN_REG(DEBUGGER_MAILBOX_BASE_PTR_NS)
  #define DEBUGGER_MAILBOX_ID                      DEBUGGER_MAILBOX_ID_REG(DEBUGGER_MAILBOX_BASE_PTR)
  #define DEBUGGER_MAILBOX_ID_NS                   DEBUGGER_MAILBOX_ID_REG(DEBUGGER_MAILBOX_BASE_PTR_NS)
#else
  /* DEBUGGER_MAILBOX */
  #define DEBUGGER_MAILBOX_CSW                     DEBUGGER_MAILBOX_CSW_REG(DEBUGGER_MAILBOX_BASE_PTR)
  #define DEBUGGER_MAILBOX_REQUEST                 DEBUGGER_MAILBOX_REQUEST_REG(DEBUGGER_MAILBOX_BASE_PTR)
  #define DEBUGGER_MAILBOX_RETURN                  DEBUGGER_MAILBOX_RETURN_REG(DEBUGGER_MAILBOX_BASE_PTR)
  #define DEBUGGER_MAILBOX_ID                      DEBUGGER_MAILBOX_ID_REG(DEBUGGER_MAILBOX_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group DEBUGGER_MAILBOX_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DEBUGGER_MAILBOX_Peripheral */


/* ----------------------------------------------------------------------------
   -- DMA
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMA_Peripheral DMA
 * @{
 */

/** DMA - Peripheral register structure */
typedef struct DMA_MemMap {
  uint32_t CTRL;                                   /**< DMA control, offset: 0x0 */
  uint32_t INTSTAT;                                /**< Interrupt status, offset: 0x4 */
  uint32_t SRAMBASE;                               /**< SRAM address of the channel configuration table, offset: 0x8 */
  uint8_t RESERVED_0[20];
  struct {                                         /* offset: 0x20, array step: 0x60 */
    uint32_t ENABLESET;                              /**< Channel Enable read and set for all DMA channels, array offset: 0x20, array step: 0x60 */
    uint32_t ENABLESET1;                             /**< Channel Enable read and set for all DMA channels, array offset: 0x24, array step: 0x60 */
    uint32_t ENABLECLR;                              /**< Channel Enable Clear for all DMA channels, array offset: 0x28, array step: 0x60 */
    uint32_t ENABLECLR1;                             /**< Channel Enable Clear for all DMA channels, array offset: 0x2C, array step: 0x60 */
    uint32_t ACTIVE;                                 /**< Channel Active status for all DMA channels, array offset: 0x30, array step: 0x60 */
    uint32_t ACTIVE1;                                /**< Channel Active status for all DMA channels, array offset: 0x34, array step: 0x60 */
    uint32_t BUSY;                                   /**< Channel Busy status for all DMA channels, array offset: 0x38, array step: 0x60 */
    uint32_t BUSY1;                                  /**< Channel Busy status for all DMA channels, array offset: 0x3C, array step: 0x60 */
    uint32_t ERRINT;                                 /**< Error Interrupt status for all DMA channels, array offset: 0x40, array step: 0x60 */
    uint32_t ERRINT1;                                /**< Error Interrupt status for all DMA channels, array offset: 0x44, array step: 0x60 */
    uint32_t INTENSET;                               /**< Interrupt Enable read and Set for all DMA channels, array offset: 0x48, array step: 0x60 */
    uint32_t INTENSET1;                              /**< Interrupt Enable read and Set for all DMA channels, array offset: 0x4C, array step: 0x60 */
    uint32_t INTENCLR;                               /**< Interrupt Enable Clear for all DMA channels, array offset: 0x50, array step: 0x60 */
    uint32_t INTENCLR1;                              /**< Interrupt Enable Clear for all DMA channels, array offset: 0x54, array step: 0x60 */
    uint32_t INTA;                                   /**< Interrupt A status for all DMA channels, array offset: 0x58, array step: 0x60 */
    uint32_t INTA1;                                  /**< Interrupt A status for all DMA channels, array offset: 0x5C, array step: 0x60 */
    uint32_t INTB;                                   /**< Interrupt B status for all DMA channels, array offset: 0x60, array step: 0x60 */
    uint32_t INTB1;                                  /**< Interrupt B status for all DMA channels, array offset: 0x64, array step: 0x60 */
    uint32_t SETVALID;                               /**< Set ValidPending control bits for all DMA channels, array offset: 0x68, array step: 0x60 */
    uint32_t SETVALID1;                              /**< Set ValidPending control bits for all DMA channels, array offset: 0x6C, array step: 0x60 */
    uint32_t SETTRIG;                                /**< Set Trigger control bits for all DMA channels, array offset: 0x70, array step: 0x60 */
    uint32_t SETTRIG1;                               /**< Set Trigger control bits for all DMA channels, array offset: 0x74, array step: 0x60 */
    uint32_t ABORT;                                  /**< Channel Abort control for all DMA channels, array offset: 0x78, array step: 0x60 */
    uint32_t ABORT1;                                 /**< Channel Abort control for all DMA channels, array offset: 0x7C, array step: 0x60 */
  } COMMON[1];
  uint8_t RESERVED_1[896];
  struct {                                         /* offset: 0x400, array step: 0x10 */
    uint32_t CFG;                                    /**< Configuration register for DMA channel, array offset: 0x400, array step: 0x10 */
    uint32_t CTLSTAT;                                /**< Control and status register for DMA channel, array offset: 0x404, array step: 0x10 */
    uint32_t XFERCFG;                                /**< Transfer configuration register for DMA channel, array offset: 0x408, array step: 0x10 */
    uint8_t RESERVED_0[4];
  } CHANNEL[37];
} volatile *DMA_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DMA - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMA_Register_Accessor_Macros DMA - Register accessor macros
 * @{
 */


/* DMA - Register accessors */
#define DMA_CTRL_REG(base)                       ((base)->CTRL)
#define DMA_INTSTAT_REG(base)                    ((base)->INTSTAT)
#define DMA_SRAMBASE_REG(base)                   ((base)->SRAMBASE)
#define DMA_COMMON_ENABLESET_REG(base,index)     ((base)->COMMON[index].ENABLESET)
#define DMA_COMMON_ENABLESET1_REG(base,index)    ((base)->COMMON[index].ENABLESET1)
#define DMA_COMMON_ENABLECLR_REG(base,index)     ((base)->COMMON[index].ENABLECLR)
#define DMA_COMMON_ENABLECLR1_REG(base,index)    ((base)->COMMON[index].ENABLECLR1)
#define DMA_COMMON_ACTIVE_REG(base,index)        ((base)->COMMON[index].ACTIVE)
#define DMA_COMMON_ACTIVE1_REG(base,index)       ((base)->COMMON[index].ACTIVE1)
#define DMA_COMMON_BUSY_REG(base,index)          ((base)->COMMON[index].BUSY)
#define DMA_COMMON_BUSY1_REG(base,index)         ((base)->COMMON[index].BUSY1)
#define DMA_COMMON_ERRINT_REG(base,index)        ((base)->COMMON[index].ERRINT)
#define DMA_COMMON_ERRINT1_REG(base,index)       ((base)->COMMON[index].ERRINT1)
#define DMA_COMMON_INTENSET_REG(base,index)      ((base)->COMMON[index].INTENSET)
#define DMA_COMMON_INTENSET1_REG(base,index)     ((base)->COMMON[index].INTENSET1)
#define DMA_COMMON_INTENCLR_REG(base,index)      ((base)->COMMON[index].INTENCLR)
#define DMA_COMMON_INTENCLR1_REG(base,index)     ((base)->COMMON[index].INTENCLR1)
#define DMA_COMMON_INTA_REG(base,index)          ((base)->COMMON[index].INTA)
#define DMA_COMMON_INTA1_REG(base,index)         ((base)->COMMON[index].INTA1)
#define DMA_COMMON_INTB_REG(base,index)          ((base)->COMMON[index].INTB)
#define DMA_COMMON_INTB1_REG(base,index)         ((base)->COMMON[index].INTB1)
#define DMA_COMMON_SETVALID_REG(base,index)      ((base)->COMMON[index].SETVALID)
#define DMA_COMMON_SETVALID1_REG(base,index)     ((base)->COMMON[index].SETVALID1)
#define DMA_COMMON_SETTRIG_REG(base,index)       ((base)->COMMON[index].SETTRIG)
#define DMA_COMMON_SETTRIG1_REG(base,index)      ((base)->COMMON[index].SETTRIG1)
#define DMA_COMMON_ABORT_REG(base,index)         ((base)->COMMON[index].ABORT)
#define DMA_COMMON_ABORT1_REG(base,index)        ((base)->COMMON[index].ABORT1)
#define DMA_CHANNEL_CFG_REG(base,index)          ((base)->CHANNEL[index].CFG)
#define DMA_CHANNEL_CTLSTAT_REG(base,index)      ((base)->CHANNEL[index].CTLSTAT)
#define DMA_CHANNEL_XFERCFG_REG(base,index)      ((base)->CHANNEL[index].XFERCFG)

/*!
 * @}
 */ /* end of group DMA_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DMA Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMA_Register_Masks DMA Register Masks
 * @{
 */

/*! @name CTRL - DMA control */
/*! @{ */
#define DMA_CTRL_ENABLE_MASK                     (0x1U)
#define DMA_CTRL_ENABLE_SHIFT                    (0U)
/*! @} */

/*! @name INTSTAT - Interrupt status */
/*! @{ */
#define DMA_INTSTAT_ACTIVEINT_MASK               (0x2U)
#define DMA_INTSTAT_ACTIVEINT_SHIFT              (1U)
#define DMA_INTSTAT_ACTIVEERRINT_MASK            (0x4U)
#define DMA_INTSTAT_ACTIVEERRINT_SHIFT           (2U)
/*! @} */

/*! @name SRAMBASE - SRAM address of the channel configuration table */
/*! @{ */
#define DMA_SRAMBASE_OFFSET_MASK                 (0xFFFFFE00U)
#define DMA_SRAMBASE_OFFSET_SHIFT                (9U)
/*! OFFSET - Offset
 */
#define DMA_SRAMBASE_OFFSET(x)                   (((uint32_t)(((uint32_t)(x)) << DMA_SRAMBASE_OFFSET_SHIFT)) & DMA_SRAMBASE_OFFSET_MASK)
/*! @} */

/*! @name COMMON_ENABLESET - Channel Enable read and set for all DMA channels */
/*! @{ */
#define DMA_COMMON_ENABLESET_ENABLE0_MASK        (0x1U)
#define DMA_COMMON_ENABLESET_ENABLE0_SHIFT       (0U)
#define DMA_COMMON_ENABLESET_ENABLE1_MASK        (0x2U)
#define DMA_COMMON_ENABLESET_ENABLE1_SHIFT       (1U)
#define DMA_COMMON_ENABLESET_ENABLE2_MASK        (0x4U)
#define DMA_COMMON_ENABLESET_ENABLE2_SHIFT       (2U)
#define DMA_COMMON_ENABLESET_ENABLE3_MASK        (0x8U)
#define DMA_COMMON_ENABLESET_ENABLE3_SHIFT       (3U)
#define DMA_COMMON_ENABLESET_ENABLE4_MASK        (0x10U)
#define DMA_COMMON_ENABLESET_ENABLE4_SHIFT       (4U)
#define DMA_COMMON_ENABLESET_ENABLE5_MASK        (0x20U)
#define DMA_COMMON_ENABLESET_ENABLE5_SHIFT       (5U)
#define DMA_COMMON_ENABLESET_ENABLE6_MASK        (0x40U)
#define DMA_COMMON_ENABLESET_ENABLE6_SHIFT       (6U)
#define DMA_COMMON_ENABLESET_ENABLE7_MASK        (0x80U)
#define DMA_COMMON_ENABLESET_ENABLE7_SHIFT       (7U)
#define DMA_COMMON_ENABLESET_ENABLE8_MASK        (0x100U)
#define DMA_COMMON_ENABLESET_ENABLE8_SHIFT       (8U)
#define DMA_COMMON_ENABLESET_ENABLE9_MASK        (0x200U)
#define DMA_COMMON_ENABLESET_ENABLE9_SHIFT       (9U)
#define DMA_COMMON_ENABLESET_ENABLE10_MASK       (0x400U)
#define DMA_COMMON_ENABLESET_ENABLE10_SHIFT      (10U)
#define DMA_COMMON_ENABLESET_ENABLE11_MASK       (0x800U)
#define DMA_COMMON_ENABLESET_ENABLE11_SHIFT      (11U)
#define DMA_COMMON_ENABLESET_ENABLE12_MASK       (0x1000U)
#define DMA_COMMON_ENABLESET_ENABLE12_SHIFT      (12U)
#define DMA_COMMON_ENABLESET_ENABLE13_MASK       (0x2000U)
#define DMA_COMMON_ENABLESET_ENABLE13_SHIFT      (13U)
#define DMA_COMMON_ENABLESET_ENABLE14_MASK       (0x4000U)
#define DMA_COMMON_ENABLESET_ENABLE14_SHIFT      (14U)
#define DMA_COMMON_ENABLESET_ENABLE15_MASK       (0x8000U)
#define DMA_COMMON_ENABLESET_ENABLE15_SHIFT      (15U)
#define DMA_COMMON_ENABLESET_ENABLE16_MASK       (0x10000U)
#define DMA_COMMON_ENABLESET_ENABLE16_SHIFT      (16U)
#define DMA_COMMON_ENABLESET_ENABLE17_MASK       (0x20000U)
#define DMA_COMMON_ENABLESET_ENABLE17_SHIFT      (17U)
#define DMA_COMMON_ENABLESET_ENABLE18_MASK       (0x40000U)
#define DMA_COMMON_ENABLESET_ENABLE18_SHIFT      (18U)
#define DMA_COMMON_ENABLESET_ENABLE19_MASK       (0x80000U)
#define DMA_COMMON_ENABLESET_ENABLE19_SHIFT      (19U)
#define DMA_COMMON_ENABLESET_ENABLE20_MASK       (0x100000U)
#define DMA_COMMON_ENABLESET_ENABLE20_SHIFT      (20U)
#define DMA_COMMON_ENABLESET_ENABLE21_MASK       (0x200000U)
#define DMA_COMMON_ENABLESET_ENABLE21_SHIFT      (21U)
#define DMA_COMMON_ENABLESET_ENABLE22_MASK       (0x400000U)
#define DMA_COMMON_ENABLESET_ENABLE22_SHIFT      (22U)
#define DMA_COMMON_ENABLESET_ENABLE23_MASK       (0x800000U)
#define DMA_COMMON_ENABLESET_ENABLE23_SHIFT      (23U)
#define DMA_COMMON_ENABLESET_ENABLE24_MASK       (0x1000000U)
#define DMA_COMMON_ENABLESET_ENABLE24_SHIFT      (24U)
#define DMA_COMMON_ENABLESET_ENABLE25_MASK       (0x2000000U)
#define DMA_COMMON_ENABLESET_ENABLE25_SHIFT      (25U)
#define DMA_COMMON_ENABLESET_ENABLE26_MASK       (0x4000000U)
#define DMA_COMMON_ENABLESET_ENABLE26_SHIFT      (26U)
#define DMA_COMMON_ENABLESET_ENABLE27_MASK       (0x8000000U)
#define DMA_COMMON_ENABLESET_ENABLE27_SHIFT      (27U)
#define DMA_COMMON_ENABLESET_ENABLE28_MASK       (0x10000000U)
#define DMA_COMMON_ENABLESET_ENABLE28_SHIFT      (28U)
#define DMA_COMMON_ENABLESET_ENABLE29_MASK       (0x20000000U)
#define DMA_COMMON_ENABLESET_ENABLE29_SHIFT      (29U)
#define DMA_COMMON_ENABLESET_ENABLE30_MASK       (0x40000000U)
#define DMA_COMMON_ENABLESET_ENABLE30_SHIFT      (30U)
#define DMA_COMMON_ENABLESET_ENABLE31_MASK       (0x80000000U)
#define DMA_COMMON_ENABLESET_ENABLE31_SHIFT      (31U)
/*! @} */

/* The count of DMA_COMMON_ENABLESET */
#define DMA_COMMON_ENABLESET_COUNT               (1U)

/*! @name COMMON_ENABLESET1 - Channel Enable read and set for all DMA channels */
/*! @{ */
#define DMA_COMMON_ENABLESET1_ENABLE32_MASK      (0x1U)
#define DMA_COMMON_ENABLESET1_ENABLE32_SHIFT     (0U)
#define DMA_COMMON_ENABLESET1_ENABLE33_MASK      (0x2U)
#define DMA_COMMON_ENABLESET1_ENABLE33_SHIFT     (1U)
#define DMA_COMMON_ENABLESET1_ENABLE34_MASK      (0x4U)
#define DMA_COMMON_ENABLESET1_ENABLE34_SHIFT     (2U)
#define DMA_COMMON_ENABLESET1_ENABLE35_MASK      (0x8U)
#define DMA_COMMON_ENABLESET1_ENABLE35_SHIFT     (3U)
#define DMA_COMMON_ENABLESET1_ENABLE36_MASK      (0x10U)
#define DMA_COMMON_ENABLESET1_ENABLE36_SHIFT     (4U)
/*! @} */

/* The count of DMA_COMMON_ENABLESET1 */
#define DMA_COMMON_ENABLESET1_COUNT              (1U)

/*! @name COMMON_ENABLECLR - Channel Enable Clear for all DMA channels */
/*! @{ */
#define DMA_COMMON_ENABLECLR_CLR0_MASK           (0x1U)
#define DMA_COMMON_ENABLECLR_CLR0_SHIFT          (0U)
#define DMA_COMMON_ENABLECLR_CLR1_MASK           (0x2U)
#define DMA_COMMON_ENABLECLR_CLR1_SHIFT          (1U)
#define DMA_COMMON_ENABLECLR_CLR2_MASK           (0x4U)
#define DMA_COMMON_ENABLECLR_CLR2_SHIFT          (2U)
#define DMA_COMMON_ENABLECLR_CLR3_MASK           (0x8U)
#define DMA_COMMON_ENABLECLR_CLR3_SHIFT          (3U)
#define DMA_COMMON_ENABLECLR_CLR4_MASK           (0x10U)
#define DMA_COMMON_ENABLECLR_CLR4_SHIFT          (4U)
#define DMA_COMMON_ENABLECLR_CLR5_MASK           (0x20U)
#define DMA_COMMON_ENABLECLR_CLR5_SHIFT          (5U)
#define DMA_COMMON_ENABLECLR_CLR6_MASK           (0x40U)
#define DMA_COMMON_ENABLECLR_CLR6_SHIFT          (6U)
#define DMA_COMMON_ENABLECLR_CLR7_MASK           (0x80U)
#define DMA_COMMON_ENABLECLR_CLR7_SHIFT          (7U)
#define DMA_COMMON_ENABLECLR_CLR8_MASK           (0x100U)
#define DMA_COMMON_ENABLECLR_CLR8_SHIFT          (8U)
#define DMA_COMMON_ENABLECLR_CLR9_MASK           (0x200U)
#define DMA_COMMON_ENABLECLR_CLR9_SHIFT          (9U)
#define DMA_COMMON_ENABLECLR_CLR10_MASK          (0x400U)
#define DMA_COMMON_ENABLECLR_CLR10_SHIFT         (10U)
#define DMA_COMMON_ENABLECLR_CLR11_MASK          (0x800U)
#define DMA_COMMON_ENABLECLR_CLR11_SHIFT         (11U)
#define DMA_COMMON_ENABLECLR_CLR12_MASK          (0x1000U)
#define DMA_COMMON_ENABLECLR_CLR12_SHIFT         (12U)
#define DMA_COMMON_ENABLECLR_CLR13_MASK          (0x2000U)
#define DMA_COMMON_ENABLECLR_CLR13_SHIFT         (13U)
#define DMA_COMMON_ENABLECLR_CLR14_MASK          (0x4000U)
#define DMA_COMMON_ENABLECLR_CLR14_SHIFT         (14U)
#define DMA_COMMON_ENABLECLR_CLR15_MASK          (0x8000U)
#define DMA_COMMON_ENABLECLR_CLR15_SHIFT         (15U)
#define DMA_COMMON_ENABLECLR_CLR16_MASK          (0x10000U)
#define DMA_COMMON_ENABLECLR_CLR16_SHIFT         (16U)
#define DMA_COMMON_ENABLECLR_CLR17_MASK          (0x20000U)
#define DMA_COMMON_ENABLECLR_CLR17_SHIFT         (17U)
#define DMA_COMMON_ENABLECLR_CLR18_MASK          (0x40000U)
#define DMA_COMMON_ENABLECLR_CLR18_SHIFT         (18U)
#define DMA_COMMON_ENABLECLR_CLR19_MASK          (0x80000U)
#define DMA_COMMON_ENABLECLR_CLR19_SHIFT         (19U)
#define DMA_COMMON_ENABLECLR_CLR20_MASK          (0x100000U)
#define DMA_COMMON_ENABLECLR_CLR20_SHIFT         (20U)
#define DMA_COMMON_ENABLECLR_CLR21_MASK          (0x200000U)
#define DMA_COMMON_ENABLECLR_CLR21_SHIFT         (21U)
#define DMA_COMMON_ENABLECLR_CLR22_MASK          (0x400000U)
#define DMA_COMMON_ENABLECLR_CLR22_SHIFT         (22U)
#define DMA_COMMON_ENABLECLR_CLR23_MASK          (0x800000U)
#define DMA_COMMON_ENABLECLR_CLR23_SHIFT         (23U)
#define DMA_COMMON_ENABLECLR_CLR24_MASK          (0x1000000U)
#define DMA_COMMON_ENABLECLR_CLR24_SHIFT         (24U)
#define DMA_COMMON_ENABLECLR_CLR25_MASK          (0x2000000U)
#define DMA_COMMON_ENABLECLR_CLR25_SHIFT         (25U)
#define DMA_COMMON_ENABLECLR_CLR26_MASK          (0x4000000U)
#define DMA_COMMON_ENABLECLR_CLR26_SHIFT         (26U)
#define DMA_COMMON_ENABLECLR_CLR27_MASK          (0x8000000U)
#define DMA_COMMON_ENABLECLR_CLR27_SHIFT         (27U)
#define DMA_COMMON_ENABLECLR_CLR28_MASK          (0x10000000U)
#define DMA_COMMON_ENABLECLR_CLR28_SHIFT         (28U)
#define DMA_COMMON_ENABLECLR_CLR29_MASK          (0x20000000U)
#define DMA_COMMON_ENABLECLR_CLR29_SHIFT         (29U)
#define DMA_COMMON_ENABLECLR_CLR30_MASK          (0x40000000U)
#define DMA_COMMON_ENABLECLR_CLR30_SHIFT         (30U)
#define DMA_COMMON_ENABLECLR_CLR31_MASK          (0x80000000U)
#define DMA_COMMON_ENABLECLR_CLR31_SHIFT         (31U)
/*! @} */

/* The count of DMA_COMMON_ENABLECLR */
#define DMA_COMMON_ENABLECLR_COUNT               (1U)

/*! @name COMMON_ENABLECLR1 - Channel Enable Clear for all DMA channels */
/*! @{ */
#define DMA_COMMON_ENABLECLR1_CLR32_MASK         (0x1U)
#define DMA_COMMON_ENABLECLR1_CLR32_SHIFT        (0U)
#define DMA_COMMON_ENABLECLR1_CLR33_MASK         (0x2U)
#define DMA_COMMON_ENABLECLR1_CLR33_SHIFT        (1U)
#define DMA_COMMON_ENABLECLR1_CLR34_MASK         (0x4U)
#define DMA_COMMON_ENABLECLR1_CLR34_SHIFT        (2U)
#define DMA_COMMON_ENABLECLR1_CLR35_MASK         (0x8U)
#define DMA_COMMON_ENABLECLR1_CLR35_SHIFT        (3U)
#define DMA_COMMON_ENABLECLR1_CLR36_MASK         (0x10U)
#define DMA_COMMON_ENABLECLR1_CLR36_SHIFT        (4U)
/*! @} */

/* The count of DMA_COMMON_ENABLECLR1 */
#define DMA_COMMON_ENABLECLR1_COUNT              (1U)

/*! @name COMMON_ACTIVE - Channel Active status for all DMA channels */
/*! @{ */
#define DMA_COMMON_ACTIVE_ACTIVE0_MASK           (0x1U)
#define DMA_COMMON_ACTIVE_ACTIVE0_SHIFT          (0U)
#define DMA_COMMON_ACTIVE_ACTIVE1_MASK           (0x2U)
#define DMA_COMMON_ACTIVE_ACTIVE1_SHIFT          (1U)
#define DMA_COMMON_ACTIVE_ACTIVE2_MASK           (0x4U)
#define DMA_COMMON_ACTIVE_ACTIVE2_SHIFT          (2U)
#define DMA_COMMON_ACTIVE_ACTIVE3_MASK           (0x8U)
#define DMA_COMMON_ACTIVE_ACTIVE3_SHIFT          (3U)
#define DMA_COMMON_ACTIVE_ACTIVE4_MASK           (0x10U)
#define DMA_COMMON_ACTIVE_ACTIVE4_SHIFT          (4U)
#define DMA_COMMON_ACTIVE_ACTIVE5_MASK           (0x20U)
#define DMA_COMMON_ACTIVE_ACTIVE5_SHIFT          (5U)
#define DMA_COMMON_ACTIVE_ACTIVE6_MASK           (0x40U)
#define DMA_COMMON_ACTIVE_ACTIVE6_SHIFT          (6U)
#define DMA_COMMON_ACTIVE_ACTIVE7_MASK           (0x80U)
#define DMA_COMMON_ACTIVE_ACTIVE7_SHIFT          (7U)
#define DMA_COMMON_ACTIVE_ACTIVE8_MASK           (0x100U)
#define DMA_COMMON_ACTIVE_ACTIVE8_SHIFT          (8U)
#define DMA_COMMON_ACTIVE_ACTIVE9_MASK           (0x200U)
#define DMA_COMMON_ACTIVE_ACTIVE9_SHIFT          (9U)
#define DMA_COMMON_ACTIVE_ACTIVE10_MASK          (0x400U)
#define DMA_COMMON_ACTIVE_ACTIVE10_SHIFT         (10U)
#define DMA_COMMON_ACTIVE_ACTIVE11_MASK          (0x800U)
#define DMA_COMMON_ACTIVE_ACTIVE11_SHIFT         (11U)
#define DMA_COMMON_ACTIVE_ACTIVE12_MASK          (0x1000U)
#define DMA_COMMON_ACTIVE_ACTIVE12_SHIFT         (12U)
#define DMA_COMMON_ACTIVE_ACTIVE13_MASK          (0x2000U)
#define DMA_COMMON_ACTIVE_ACTIVE13_SHIFT         (13U)
#define DMA_COMMON_ACTIVE_ACTIVE14_MASK          (0x4000U)
#define DMA_COMMON_ACTIVE_ACTIVE14_SHIFT         (14U)
#define DMA_COMMON_ACTIVE_ACTIVE15_MASK          (0x8000U)
#define DMA_COMMON_ACTIVE_ACTIVE15_SHIFT         (15U)
#define DMA_COMMON_ACTIVE_ACTIVE16_MASK          (0x10000U)
#define DMA_COMMON_ACTIVE_ACTIVE16_SHIFT         (16U)
#define DMA_COMMON_ACTIVE_ACTIVE17_MASK          (0x20000U)
#define DMA_COMMON_ACTIVE_ACTIVE17_SHIFT         (17U)
#define DMA_COMMON_ACTIVE_ACTIVE18_MASK          (0x40000U)
#define DMA_COMMON_ACTIVE_ACTIVE18_SHIFT         (18U)
#define DMA_COMMON_ACTIVE_ACTIVE19_MASK          (0x80000U)
#define DMA_COMMON_ACTIVE_ACTIVE19_SHIFT         (19U)
#define DMA_COMMON_ACTIVE_ACTIVE20_MASK          (0x100000U)
#define DMA_COMMON_ACTIVE_ACTIVE20_SHIFT         (20U)
#define DMA_COMMON_ACTIVE_ACTIVE21_MASK          (0x200000U)
#define DMA_COMMON_ACTIVE_ACTIVE21_SHIFT         (21U)
#define DMA_COMMON_ACTIVE_ACTIVE22_MASK          (0x400000U)
#define DMA_COMMON_ACTIVE_ACTIVE22_SHIFT         (22U)
#define DMA_COMMON_ACTIVE_ACTIVE23_MASK          (0x800000U)
#define DMA_COMMON_ACTIVE_ACTIVE23_SHIFT         (23U)
#define DMA_COMMON_ACTIVE_ACTIVE24_MASK          (0x1000000U)
#define DMA_COMMON_ACTIVE_ACTIVE24_SHIFT         (24U)
#define DMA_COMMON_ACTIVE_ACTIVE25_MASK          (0x2000000U)
#define DMA_COMMON_ACTIVE_ACTIVE25_SHIFT         (25U)
#define DMA_COMMON_ACTIVE_ACTIVE26_MASK          (0x4000000U)
#define DMA_COMMON_ACTIVE_ACTIVE26_SHIFT         (26U)
#define DMA_COMMON_ACTIVE_ACTIVE27_MASK          (0x8000000U)
#define DMA_COMMON_ACTIVE_ACTIVE27_SHIFT         (27U)
#define DMA_COMMON_ACTIVE_ACTIVE28_MASK          (0x10000000U)
#define DMA_COMMON_ACTIVE_ACTIVE28_SHIFT         (28U)
#define DMA_COMMON_ACTIVE_ACTIVE29_MASK          (0x20000000U)
#define DMA_COMMON_ACTIVE_ACTIVE29_SHIFT         (29U)
#define DMA_COMMON_ACTIVE_ACTIVE30_MASK          (0x40000000U)
#define DMA_COMMON_ACTIVE_ACTIVE30_SHIFT         (30U)
#define DMA_COMMON_ACTIVE_ACTIVE31_MASK          (0x80000000U)
#define DMA_COMMON_ACTIVE_ACTIVE31_SHIFT         (31U)
/*! @} */

/* The count of DMA_COMMON_ACTIVE */
#define DMA_COMMON_ACTIVE_COUNT                  (1U)

/*! @name COMMON_ACTIVE1 - Channel Active status for all DMA channels */
/*! @{ */
#define DMA_COMMON_ACTIVE1_ACTIVE32_MASK         (0x1U)
#define DMA_COMMON_ACTIVE1_ACTIVE32_SHIFT        (0U)
#define DMA_COMMON_ACTIVE1_ACTIVE33_MASK         (0x2U)
#define DMA_COMMON_ACTIVE1_ACTIVE33_SHIFT        (1U)
#define DMA_COMMON_ACTIVE1_ACTIVE34_MASK         (0x4U)
#define DMA_COMMON_ACTIVE1_ACTIVE34_SHIFT        (2U)
#define DMA_COMMON_ACTIVE1_ACTIVE35_MASK         (0x8U)
#define DMA_COMMON_ACTIVE1_ACTIVE35_SHIFT        (3U)
#define DMA_COMMON_ACTIVE1_ACTIVE36_MASK         (0x10U)
#define DMA_COMMON_ACTIVE1_ACTIVE36_SHIFT        (4U)
/*! @} */

/* The count of DMA_COMMON_ACTIVE1 */
#define DMA_COMMON_ACTIVE1_COUNT                 (1U)

/*! @name COMMON_BUSY - Channel Busy status for all DMA channels */
/*! @{ */
#define DMA_COMMON_BUSY_BUSY0_MASK               (0x1U)
#define DMA_COMMON_BUSY_BUSY0_SHIFT              (0U)
#define DMA_COMMON_BUSY_BUSY1_MASK               (0x2U)
#define DMA_COMMON_BUSY_BUSY1_SHIFT              (1U)
#define DMA_COMMON_BUSY_BUSY2_MASK               (0x4U)
#define DMA_COMMON_BUSY_BUSY2_SHIFT              (2U)
#define DMA_COMMON_BUSY_BUSY3_MASK               (0x8U)
#define DMA_COMMON_BUSY_BUSY3_SHIFT              (3U)
#define DMA_COMMON_BUSY_BUSY4_MASK               (0x10U)
#define DMA_COMMON_BUSY_BUSY4_SHIFT              (4U)
#define DMA_COMMON_BUSY_BUSY5_MASK               (0x20U)
#define DMA_COMMON_BUSY_BUSY5_SHIFT              (5U)
#define DMA_COMMON_BUSY_BUSY6_MASK               (0x40U)
#define DMA_COMMON_BUSY_BUSY6_SHIFT              (6U)
#define DMA_COMMON_BUSY_BUSY7_MASK               (0x80U)
#define DMA_COMMON_BUSY_BUSY7_SHIFT              (7U)
#define DMA_COMMON_BUSY_BUSY8_MASK               (0x100U)
#define DMA_COMMON_BUSY_BUSY8_SHIFT              (8U)
#define DMA_COMMON_BUSY_BUSY9_MASK               (0x200U)
#define DMA_COMMON_BUSY_BUSY9_SHIFT              (9U)
#define DMA_COMMON_BUSY_BUSY10_MASK              (0x400U)
#define DMA_COMMON_BUSY_BUSY10_SHIFT             (10U)
#define DMA_COMMON_BUSY_BUSY11_MASK              (0x800U)
#define DMA_COMMON_BUSY_BUSY11_SHIFT             (11U)
#define DMA_COMMON_BUSY_BUSY12_MASK              (0x1000U)
#define DMA_COMMON_BUSY_BUSY12_SHIFT             (12U)
#define DMA_COMMON_BUSY_BUSY13_MASK              (0x2000U)
#define DMA_COMMON_BUSY_BUSY13_SHIFT             (13U)
#define DMA_COMMON_BUSY_BUSY14_MASK              (0x4000U)
#define DMA_COMMON_BUSY_BUSY14_SHIFT             (14U)
#define DMA_COMMON_BUSY_BUSY15_MASK              (0x8000U)
#define DMA_COMMON_BUSY_BUSY15_SHIFT             (15U)
#define DMA_COMMON_BUSY_BUSY16_MASK              (0x10000U)
#define DMA_COMMON_BUSY_BUSY16_SHIFT             (16U)
#define DMA_COMMON_BUSY_BUSY17_MASK              (0x20000U)
#define DMA_COMMON_BUSY_BUSY17_SHIFT             (17U)
#define DMA_COMMON_BUSY_BUSY18_MASK              (0x40000U)
#define DMA_COMMON_BUSY_BUSY18_SHIFT             (18U)
#define DMA_COMMON_BUSY_BUSY19_MASK              (0x80000U)
#define DMA_COMMON_BUSY_BUSY19_SHIFT             (19U)
#define DMA_COMMON_BUSY_BUSY20_MASK              (0x100000U)
#define DMA_COMMON_BUSY_BUSY20_SHIFT             (20U)
#define DMA_COMMON_BUSY_BUSY21_MASK              (0x200000U)
#define DMA_COMMON_BUSY_BUSY21_SHIFT             (21U)
#define DMA_COMMON_BUSY_BUSY22_MASK              (0x400000U)
#define DMA_COMMON_BUSY_BUSY22_SHIFT             (22U)
#define DMA_COMMON_BUSY_BUSY23_MASK              (0x800000U)
#define DMA_COMMON_BUSY_BUSY23_SHIFT             (23U)
#define DMA_COMMON_BUSY_BUSY24_MASK              (0x1000000U)
#define DMA_COMMON_BUSY_BUSY24_SHIFT             (24U)
#define DMA_COMMON_BUSY_BUSY25_MASK              (0x2000000U)
#define DMA_COMMON_BUSY_BUSY25_SHIFT             (25U)
#define DMA_COMMON_BUSY_BUSY26_MASK              (0x4000000U)
#define DMA_COMMON_BUSY_BUSY26_SHIFT             (26U)
#define DMA_COMMON_BUSY_BUSY27_MASK              (0x8000000U)
#define DMA_COMMON_BUSY_BUSY27_SHIFT             (27U)
#define DMA_COMMON_BUSY_BUSY28_MASK              (0x10000000U)
#define DMA_COMMON_BUSY_BUSY28_SHIFT             (28U)
#define DMA_COMMON_BUSY_BUSY29_MASK              (0x20000000U)
#define DMA_COMMON_BUSY_BUSY29_SHIFT             (29U)
#define DMA_COMMON_BUSY_BUSY30_MASK              (0x40000000U)
#define DMA_COMMON_BUSY_BUSY30_SHIFT             (30U)
#define DMA_COMMON_BUSY_BUSY31_MASK              (0x80000000U)
#define DMA_COMMON_BUSY_BUSY31_SHIFT             (31U)
/*! @} */

/* The count of DMA_COMMON_BUSY */
#define DMA_COMMON_BUSY_COUNT                    (1U)

/*! @name COMMON_BUSY1 - Channel Busy status for all DMA channels */
/*! @{ */
#define DMA_COMMON_BUSY1_BUSY32_MASK             (0x1U)
#define DMA_COMMON_BUSY1_BUSY32_SHIFT            (0U)
#define DMA_COMMON_BUSY1_BUSY33_MASK             (0x2U)
#define DMA_COMMON_BUSY1_BUSY33_SHIFT            (1U)
#define DMA_COMMON_BUSY1_BUSY34_MASK             (0x4U)
#define DMA_COMMON_BUSY1_BUSY34_SHIFT            (2U)
#define DMA_COMMON_BUSY1_BUSY35_MASK             (0x8U)
#define DMA_COMMON_BUSY1_BUSY35_SHIFT            (3U)
#define DMA_COMMON_BUSY1_BUSY36_MASK             (0x10U)
#define DMA_COMMON_BUSY1_BUSY36_SHIFT            (4U)
/*! @} */

/* The count of DMA_COMMON_BUSY1 */
#define DMA_COMMON_BUSY1_COUNT                   (1U)

/*! @name COMMON_ERRINT - Error Interrupt status for all DMA channels */
/*! @{ */
#define DMA_COMMON_ERRINT_ERR0_MASK              (0x1U)
#define DMA_COMMON_ERRINT_ERR0_SHIFT             (0U)
#define DMA_COMMON_ERRINT_ERR1_MASK              (0x2U)
#define DMA_COMMON_ERRINT_ERR1_SHIFT             (1U)
#define DMA_COMMON_ERRINT_ERR2_MASK              (0x4U)
#define DMA_COMMON_ERRINT_ERR2_SHIFT             (2U)
#define DMA_COMMON_ERRINT_ERR3_MASK              (0x8U)
#define DMA_COMMON_ERRINT_ERR3_SHIFT             (3U)
#define DMA_COMMON_ERRINT_ERR4_MASK              (0x10U)
#define DMA_COMMON_ERRINT_ERR4_SHIFT             (4U)
#define DMA_COMMON_ERRINT_ERR5_MASK              (0x20U)
#define DMA_COMMON_ERRINT_ERR5_SHIFT             (5U)
#define DMA_COMMON_ERRINT_ERR6_MASK              (0x40U)
#define DMA_COMMON_ERRINT_ERR6_SHIFT             (6U)
#define DMA_COMMON_ERRINT_ERR7_MASK              (0x80U)
#define DMA_COMMON_ERRINT_ERR7_SHIFT             (7U)
#define DMA_COMMON_ERRINT_ERR8_MASK              (0x100U)
#define DMA_COMMON_ERRINT_ERR8_SHIFT             (8U)
#define DMA_COMMON_ERRINT_ERR9_MASK              (0x200U)
#define DMA_COMMON_ERRINT_ERR9_SHIFT             (9U)
#define DMA_COMMON_ERRINT_ERR10_MASK             (0x400U)
#define DMA_COMMON_ERRINT_ERR10_SHIFT            (10U)
#define DMA_COMMON_ERRINT_ERR11_MASK             (0x800U)
#define DMA_COMMON_ERRINT_ERR11_SHIFT            (11U)
#define DMA_COMMON_ERRINT_ERR12_MASK             (0x1000U)
#define DMA_COMMON_ERRINT_ERR12_SHIFT            (12U)
#define DMA_COMMON_ERRINT_ERR13_MASK             (0x2000U)
#define DMA_COMMON_ERRINT_ERR13_SHIFT            (13U)
#define DMA_COMMON_ERRINT_ERR14_MASK             (0x4000U)
#define DMA_COMMON_ERRINT_ERR14_SHIFT            (14U)
#define DMA_COMMON_ERRINT_ERR15_MASK             (0x8000U)
#define DMA_COMMON_ERRINT_ERR15_SHIFT            (15U)
#define DMA_COMMON_ERRINT_ERR16_MASK             (0x10000U)
#define DMA_COMMON_ERRINT_ERR16_SHIFT            (16U)
#define DMA_COMMON_ERRINT_ERR17_MASK             (0x20000U)
#define DMA_COMMON_ERRINT_ERR17_SHIFT            (17U)
#define DMA_COMMON_ERRINT_ERR18_MASK             (0x40000U)
#define DMA_COMMON_ERRINT_ERR18_SHIFT            (18U)
#define DMA_COMMON_ERRINT_ERR19_MASK             (0x80000U)
#define DMA_COMMON_ERRINT_ERR19_SHIFT            (19U)
#define DMA_COMMON_ERRINT_ERR20_MASK             (0x100000U)
#define DMA_COMMON_ERRINT_ERR20_SHIFT            (20U)
#define DMA_COMMON_ERRINT_ERR21_MASK             (0x200000U)
#define DMA_COMMON_ERRINT_ERR21_SHIFT            (21U)
#define DMA_COMMON_ERRINT_ERR22_MASK             (0x400000U)
#define DMA_COMMON_ERRINT_ERR22_SHIFT            (22U)
#define DMA_COMMON_ERRINT_ERR23_MASK             (0x800000U)
#define DMA_COMMON_ERRINT_ERR23_SHIFT            (23U)
#define DMA_COMMON_ERRINT_ERR24_MASK             (0x1000000U)
#define DMA_COMMON_ERRINT_ERR24_SHIFT            (24U)
#define DMA_COMMON_ERRINT_ERR25_MASK             (0x2000000U)
#define DMA_COMMON_ERRINT_ERR25_SHIFT            (25U)
#define DMA_COMMON_ERRINT_ERR26_MASK             (0x4000000U)
#define DMA_COMMON_ERRINT_ERR26_SHIFT            (26U)
#define DMA_COMMON_ERRINT_ERR27_MASK             (0x8000000U)
#define DMA_COMMON_ERRINT_ERR27_SHIFT            (27U)
#define DMA_COMMON_ERRINT_ERR28_MASK             (0x10000000U)
#define DMA_COMMON_ERRINT_ERR28_SHIFT            (28U)
#define DMA_COMMON_ERRINT_ERR29_MASK             (0x20000000U)
#define DMA_COMMON_ERRINT_ERR29_SHIFT            (29U)
#define DMA_COMMON_ERRINT_ERR30_MASK             (0x40000000U)
#define DMA_COMMON_ERRINT_ERR30_SHIFT            (30U)
#define DMA_COMMON_ERRINT_ERR31_MASK             (0x80000000U)
#define DMA_COMMON_ERRINT_ERR31_SHIFT            (31U)
/*! @} */

/* The count of DMA_COMMON_ERRINT */
#define DMA_COMMON_ERRINT_COUNT                  (1U)

/*! @name COMMON_ERRINT1 - Error Interrupt status for all DMA channels */
/*! @{ */
#define DMA_COMMON_ERRINT1_ERR32_MASK            (0x1U)
#define DMA_COMMON_ERRINT1_ERR32_SHIFT           (0U)
#define DMA_COMMON_ERRINT1_ERR33_MASK            (0x2U)
#define DMA_COMMON_ERRINT1_ERR33_SHIFT           (1U)
#define DMA_COMMON_ERRINT1_ERR34_MASK            (0x4U)
#define DMA_COMMON_ERRINT1_ERR34_SHIFT           (2U)
#define DMA_COMMON_ERRINT1_ERR35_MASK            (0x8U)
#define DMA_COMMON_ERRINT1_ERR35_SHIFT           (3U)
#define DMA_COMMON_ERRINT1_ERR36_MASK            (0x10U)
#define DMA_COMMON_ERRINT1_ERR36_SHIFT           (4U)
/*! @} */

/* The count of DMA_COMMON_ERRINT1 */
#define DMA_COMMON_ERRINT1_COUNT                 (1U)

/*! @name COMMON_INTENSET - Interrupt Enable read and Set for all DMA channels */
/*! @{ */
#define DMA_COMMON_INTENSET_INTEN0_MASK          (0x1U)
#define DMA_COMMON_INTENSET_INTEN0_SHIFT         (0U)
#define DMA_COMMON_INTENSET_INTEN1_MASK          (0x2U)
#define DMA_COMMON_INTENSET_INTEN1_SHIFT         (1U)
#define DMA_COMMON_INTENSET_INTEN2_MASK          (0x4U)
#define DMA_COMMON_INTENSET_INTEN2_SHIFT         (2U)
#define DMA_COMMON_INTENSET_INTEN3_MASK          (0x8U)
#define DMA_COMMON_INTENSET_INTEN3_SHIFT         (3U)
#define DMA_COMMON_INTENSET_INTEN4_MASK          (0x10U)
#define DMA_COMMON_INTENSET_INTEN4_SHIFT         (4U)
#define DMA_COMMON_INTENSET_INTEN5_MASK          (0x20U)
#define DMA_COMMON_INTENSET_INTEN5_SHIFT         (5U)
#define DMA_COMMON_INTENSET_INTEN6_MASK          (0x40U)
#define DMA_COMMON_INTENSET_INTEN6_SHIFT         (6U)
#define DMA_COMMON_INTENSET_INTEN7_MASK          (0x80U)
#define DMA_COMMON_INTENSET_INTEN7_SHIFT         (7U)
#define DMA_COMMON_INTENSET_INTEN8_MASK          (0x100U)
#define DMA_COMMON_INTENSET_INTEN8_SHIFT         (8U)
#define DMA_COMMON_INTENSET_INTEN9_MASK          (0x200U)
#define DMA_COMMON_INTENSET_INTEN9_SHIFT         (9U)
#define DMA_COMMON_INTENSET_INTEN10_MASK         (0x400U)
#define DMA_COMMON_INTENSET_INTEN10_SHIFT        (10U)
#define DMA_COMMON_INTENSET_INTEN11_MASK         (0x800U)
#define DMA_COMMON_INTENSET_INTEN11_SHIFT        (11U)
#define DMA_COMMON_INTENSET_INTEN12_MASK         (0x1000U)
#define DMA_COMMON_INTENSET_INTEN12_SHIFT        (12U)
#define DMA_COMMON_INTENSET_INTEN13_MASK         (0x2000U)
#define DMA_COMMON_INTENSET_INTEN13_SHIFT        (13U)
#define DMA_COMMON_INTENSET_INTEN14_MASK         (0x4000U)
#define DMA_COMMON_INTENSET_INTEN14_SHIFT        (14U)
#define DMA_COMMON_INTENSET_INTEN15_MASK         (0x8000U)
#define DMA_COMMON_INTENSET_INTEN15_SHIFT        (15U)
#define DMA_COMMON_INTENSET_INTEN16_MASK         (0x10000U)
#define DMA_COMMON_INTENSET_INTEN16_SHIFT        (16U)
#define DMA_COMMON_INTENSET_INTEN17_MASK         (0x20000U)
#define DMA_COMMON_INTENSET_INTEN17_SHIFT        (17U)
#define DMA_COMMON_INTENSET_INTEN18_MASK         (0x40000U)
#define DMA_COMMON_INTENSET_INTEN18_SHIFT        (18U)
#define DMA_COMMON_INTENSET_INTEN19_MASK         (0x80000U)
#define DMA_COMMON_INTENSET_INTEN19_SHIFT        (19U)
#define DMA_COMMON_INTENSET_INTEN20_MASK         (0x100000U)
#define DMA_COMMON_INTENSET_INTEN20_SHIFT        (20U)
#define DMA_COMMON_INTENSET_INTEN21_MASK         (0x200000U)
#define DMA_COMMON_INTENSET_INTEN21_SHIFT        (21U)
#define DMA_COMMON_INTENSET_INTEN22_MASK         (0x400000U)
#define DMA_COMMON_INTENSET_INTEN22_SHIFT        (22U)
#define DMA_COMMON_INTENSET_INTEN23_MASK         (0x800000U)
#define DMA_COMMON_INTENSET_INTEN23_SHIFT        (23U)
#define DMA_COMMON_INTENSET_INTEN24_MASK         (0x1000000U)
#define DMA_COMMON_INTENSET_INTEN24_SHIFT        (24U)
#define DMA_COMMON_INTENSET_INTEN25_MASK         (0x2000000U)
#define DMA_COMMON_INTENSET_INTEN25_SHIFT        (25U)
#define DMA_COMMON_INTENSET_INTEN26_MASK         (0x4000000U)
#define DMA_COMMON_INTENSET_INTEN26_SHIFT        (26U)
#define DMA_COMMON_INTENSET_INTEN27_MASK         (0x8000000U)
#define DMA_COMMON_INTENSET_INTEN27_SHIFT        (27U)
#define DMA_COMMON_INTENSET_INTEN28_MASK         (0x10000000U)
#define DMA_COMMON_INTENSET_INTEN28_SHIFT        (28U)
#define DMA_COMMON_INTENSET_INTEN29_MASK         (0x20000000U)
#define DMA_COMMON_INTENSET_INTEN29_SHIFT        (29U)
#define DMA_COMMON_INTENSET_INTEN30_MASK         (0x40000000U)
#define DMA_COMMON_INTENSET_INTEN30_SHIFT        (30U)
#define DMA_COMMON_INTENSET_INTEN31_MASK         (0x80000000U)
#define DMA_COMMON_INTENSET_INTEN31_SHIFT        (31U)
/*! @} */

/* The count of DMA_COMMON_INTENSET */
#define DMA_COMMON_INTENSET_COUNT                (1U)

/*! @name COMMON_INTENSET1 - Interrupt Enable read and Set for all DMA channels */
/*! @{ */
#define DMA_COMMON_INTENSET1_INTEN32_MASK        (0x1U)
#define DMA_COMMON_INTENSET1_INTEN32_SHIFT       (0U)
#define DMA_COMMON_INTENSET1_INTEN33_MASK        (0x2U)
#define DMA_COMMON_INTENSET1_INTEN33_SHIFT       (1U)
#define DMA_COMMON_INTENSET1_INTEN34_MASK        (0x4U)
#define DMA_COMMON_INTENSET1_INTEN34_SHIFT       (2U)
#define DMA_COMMON_INTENSET1_INTEN35_MASK        (0x8U)
#define DMA_COMMON_INTENSET1_INTEN35_SHIFT       (3U)
#define DMA_COMMON_INTENSET1_INTEN36_MASK        (0x10U)
#define DMA_COMMON_INTENSET1_INTEN36_SHIFT       (4U)
/*! @} */

/* The count of DMA_COMMON_INTENSET1 */
#define DMA_COMMON_INTENSET1_COUNT               (1U)

/*! @name COMMON_INTENCLR - Interrupt Enable Clear for all DMA channels */
/*! @{ */
#define DMA_COMMON_INTENCLR_CLR0_MASK            (0x1U)
#define DMA_COMMON_INTENCLR_CLR0_SHIFT           (0U)
#define DMA_COMMON_INTENCLR_CLR1_MASK            (0x2U)
#define DMA_COMMON_INTENCLR_CLR1_SHIFT           (1U)
#define DMA_COMMON_INTENCLR_CLR2_MASK            (0x4U)
#define DMA_COMMON_INTENCLR_CLR2_SHIFT           (2U)
#define DMA_COMMON_INTENCLR_CLR3_MASK            (0x8U)
#define DMA_COMMON_INTENCLR_CLR3_SHIFT           (3U)
#define DMA_COMMON_INTENCLR_CLR4_MASK            (0x10U)
#define DMA_COMMON_INTENCLR_CLR4_SHIFT           (4U)
#define DMA_COMMON_INTENCLR_CLR5_MASK            (0x20U)
#define DMA_COMMON_INTENCLR_CLR5_SHIFT           (5U)
#define DMA_COMMON_INTENCLR_CLR6_MASK            (0x40U)
#define DMA_COMMON_INTENCLR_CLR6_SHIFT           (6U)
#define DMA_COMMON_INTENCLR_CLR7_MASK            (0x80U)
#define DMA_COMMON_INTENCLR_CLR7_SHIFT           (7U)
#define DMA_COMMON_INTENCLR_CLR8_MASK            (0x100U)
#define DMA_COMMON_INTENCLR_CLR8_SHIFT           (8U)
#define DMA_COMMON_INTENCLR_CLR9_MASK            (0x200U)
#define DMA_COMMON_INTENCLR_CLR9_SHIFT           (9U)
#define DMA_COMMON_INTENCLR_CLR10_MASK           (0x400U)
#define DMA_COMMON_INTENCLR_CLR10_SHIFT          (10U)
#define DMA_COMMON_INTENCLR_CLR11_MASK           (0x800U)
#define DMA_COMMON_INTENCLR_CLR11_SHIFT          (11U)
#define DMA_COMMON_INTENCLR_CLR12_MASK           (0x1000U)
#define DMA_COMMON_INTENCLR_CLR12_SHIFT          (12U)
#define DMA_COMMON_INTENCLR_CLR13_MASK           (0x2000U)
#define DMA_COMMON_INTENCLR_CLR13_SHIFT          (13U)
#define DMA_COMMON_INTENCLR_CLR14_MASK           (0x4000U)
#define DMA_COMMON_INTENCLR_CLR14_SHIFT          (14U)
#define DMA_COMMON_INTENCLR_CLR15_MASK           (0x8000U)
#define DMA_COMMON_INTENCLR_CLR15_SHIFT          (15U)
#define DMA_COMMON_INTENCLR_CLR16_MASK           (0x10000U)
#define DMA_COMMON_INTENCLR_CLR16_SHIFT          (16U)
#define DMA_COMMON_INTENCLR_CLR17_MASK           (0x20000U)
#define DMA_COMMON_INTENCLR_CLR17_SHIFT          (17U)
#define DMA_COMMON_INTENCLR_CLR18_MASK           (0x40000U)
#define DMA_COMMON_INTENCLR_CLR18_SHIFT          (18U)
#define DMA_COMMON_INTENCLR_CLR19_MASK           (0x80000U)
#define DMA_COMMON_INTENCLR_CLR19_SHIFT          (19U)
#define DMA_COMMON_INTENCLR_CLR20_MASK           (0x100000U)
#define DMA_COMMON_INTENCLR_CLR20_SHIFT          (20U)
#define DMA_COMMON_INTENCLR_CLR21_MASK           (0x200000U)
#define DMA_COMMON_INTENCLR_CLR21_SHIFT          (21U)
#define DMA_COMMON_INTENCLR_CLR22_MASK           (0x400000U)
#define DMA_COMMON_INTENCLR_CLR22_SHIFT          (22U)
#define DMA_COMMON_INTENCLR_CLR23_MASK           (0x800000U)
#define DMA_COMMON_INTENCLR_CLR23_SHIFT          (23U)
#define DMA_COMMON_INTENCLR_CLR24_MASK           (0x1000000U)
#define DMA_COMMON_INTENCLR_CLR24_SHIFT          (24U)
#define DMA_COMMON_INTENCLR_CLR25_MASK           (0x2000000U)
#define DMA_COMMON_INTENCLR_CLR25_SHIFT          (25U)
#define DMA_COMMON_INTENCLR_CLR26_MASK           (0x4000000U)
#define DMA_COMMON_INTENCLR_CLR26_SHIFT          (26U)
#define DMA_COMMON_INTENCLR_CLR27_MASK           (0x8000000U)
#define DMA_COMMON_INTENCLR_CLR27_SHIFT          (27U)
#define DMA_COMMON_INTENCLR_CLR28_MASK           (0x10000000U)
#define DMA_COMMON_INTENCLR_CLR28_SHIFT          (28U)
#define DMA_COMMON_INTENCLR_CLR29_MASK           (0x20000000U)
#define DMA_COMMON_INTENCLR_CLR29_SHIFT          (29U)
#define DMA_COMMON_INTENCLR_CLR30_MASK           (0x40000000U)
#define DMA_COMMON_INTENCLR_CLR30_SHIFT          (30U)
#define DMA_COMMON_INTENCLR_CLR31_MASK           (0x80000000U)
#define DMA_COMMON_INTENCLR_CLR31_SHIFT          (31U)
/*! @} */

/* The count of DMA_COMMON_INTENCLR */
#define DMA_COMMON_INTENCLR_COUNT                (1U)

/*! @name COMMON_INTENCLR1 - Interrupt Enable Clear for all DMA channels */
/*! @{ */
#define DMA_COMMON_INTENCLR1_CLR32_MASK          (0x1U)
#define DMA_COMMON_INTENCLR1_CLR32_SHIFT         (0U)
#define DMA_COMMON_INTENCLR1_CLR33_MASK          (0x2U)
#define DMA_COMMON_INTENCLR1_CLR33_SHIFT         (1U)
#define DMA_COMMON_INTENCLR1_CLR34_MASK          (0x4U)
#define DMA_COMMON_INTENCLR1_CLR34_SHIFT         (2U)
#define DMA_COMMON_INTENCLR1_CLR35_MASK          (0x8U)
#define DMA_COMMON_INTENCLR1_CLR35_SHIFT         (3U)
#define DMA_COMMON_INTENCLR1_CLR36_MASK          (0x10U)
#define DMA_COMMON_INTENCLR1_CLR36_SHIFT         (4U)
/*! @} */

/* The count of DMA_COMMON_INTENCLR1 */
#define DMA_COMMON_INTENCLR1_COUNT               (1U)

/*! @name COMMON_INTA - Interrupt A status for all DMA channels */
/*! @{ */
#define DMA_COMMON_INTA_INTA0_MASK               (0x1U)
#define DMA_COMMON_INTA_INTA0_SHIFT              (0U)
#define DMA_COMMON_INTA_INTA1_MASK               (0x2U)
#define DMA_COMMON_INTA_INTA1_SHIFT              (1U)
#define DMA_COMMON_INTA_INTA2_MASK               (0x4U)
#define DMA_COMMON_INTA_INTA2_SHIFT              (2U)
#define DMA_COMMON_INTA_INTA3_MASK               (0x8U)
#define DMA_COMMON_INTA_INTA3_SHIFT              (3U)
#define DMA_COMMON_INTA_INTA4_MASK               (0x10U)
#define DMA_COMMON_INTA_INTA4_SHIFT              (4U)
#define DMA_COMMON_INTA_INTA5_MASK               (0x20U)
#define DMA_COMMON_INTA_INTA5_SHIFT              (5U)
#define DMA_COMMON_INTA_INTA6_MASK               (0x40U)
#define DMA_COMMON_INTA_INTA6_SHIFT              (6U)
#define DMA_COMMON_INTA_INTA7_MASK               (0x80U)
#define DMA_COMMON_INTA_INTA7_SHIFT              (7U)
#define DMA_COMMON_INTA_INTA8_MASK               (0x100U)
#define DMA_COMMON_INTA_INTA8_SHIFT              (8U)
#define DMA_COMMON_INTA_INTA9_MASK               (0x200U)
#define DMA_COMMON_INTA_INTA9_SHIFT              (9U)
#define DMA_COMMON_INTA_INTA10_MASK              (0x400U)
#define DMA_COMMON_INTA_INTA10_SHIFT             (10U)
#define DMA_COMMON_INTA_INTA11_MASK              (0x800U)
#define DMA_COMMON_INTA_INTA11_SHIFT             (11U)
#define DMA_COMMON_INTA_INTA12_MASK              (0x1000U)
#define DMA_COMMON_INTA_INTA12_SHIFT             (12U)
#define DMA_COMMON_INTA_INTA13_MASK              (0x2000U)
#define DMA_COMMON_INTA_INTA13_SHIFT             (13U)
#define DMA_COMMON_INTA_INTA14_MASK              (0x4000U)
#define DMA_COMMON_INTA_INTA14_SHIFT             (14U)
#define DMA_COMMON_INTA_INTA15_MASK              (0x8000U)
#define DMA_COMMON_INTA_INTA15_SHIFT             (15U)
#define DMA_COMMON_INTA_INTA16_MASK              (0x10000U)
#define DMA_COMMON_INTA_INTA16_SHIFT             (16U)
#define DMA_COMMON_INTA_INTA17_MASK              (0x20000U)
#define DMA_COMMON_INTA_INTA17_SHIFT             (17U)
#define DMA_COMMON_INTA_INTA18_MASK              (0x40000U)
#define DMA_COMMON_INTA_INTA18_SHIFT             (18U)
#define DMA_COMMON_INTA_INTA19_MASK              (0x80000U)
#define DMA_COMMON_INTA_INTA19_SHIFT             (19U)
#define DMA_COMMON_INTA_INTA20_MASK              (0x100000U)
#define DMA_COMMON_INTA_INTA20_SHIFT             (20U)
#define DMA_COMMON_INTA_INTA21_MASK              (0x200000U)
#define DMA_COMMON_INTA_INTA21_SHIFT             (21U)
#define DMA_COMMON_INTA_INTA22_MASK              (0x400000U)
#define DMA_COMMON_INTA_INTA22_SHIFT             (22U)
#define DMA_COMMON_INTA_INTA23_MASK              (0x800000U)
#define DMA_COMMON_INTA_INTA23_SHIFT             (23U)
#define DMA_COMMON_INTA_INTA24_MASK              (0x1000000U)
#define DMA_COMMON_INTA_INTA24_SHIFT             (24U)
#define DMA_COMMON_INTA_INTA25_MASK              (0x2000000U)
#define DMA_COMMON_INTA_INTA25_SHIFT             (25U)
#define DMA_COMMON_INTA_INTA26_MASK              (0x4000000U)
#define DMA_COMMON_INTA_INTA26_SHIFT             (26U)
#define DMA_COMMON_INTA_INTA27_MASK              (0x8000000U)
#define DMA_COMMON_INTA_INTA27_SHIFT             (27U)
#define DMA_COMMON_INTA_INTA28_MASK              (0x10000000U)
#define DMA_COMMON_INTA_INTA28_SHIFT             (28U)
#define DMA_COMMON_INTA_INTA29_MASK              (0x20000000U)
#define DMA_COMMON_INTA_INTA29_SHIFT             (29U)
#define DMA_COMMON_INTA_INTA30_MASK              (0x40000000U)
#define DMA_COMMON_INTA_INTA30_SHIFT             (30U)
#define DMA_COMMON_INTA_INTA31_MASK              (0x80000000U)
#define DMA_COMMON_INTA_INTA31_SHIFT             (31U)
/*! @} */

/* The count of DMA_COMMON_INTA */
#define DMA_COMMON_INTA_COUNT                    (1U)

/*! @name COMMON_INTA1 - Interrupt A status for all DMA channels */
/*! @{ */
#define DMA_COMMON_INTA1_INTA32_MASK             (0x1U)
#define DMA_COMMON_INTA1_INTA32_SHIFT            (0U)
#define DMA_COMMON_INTA1_INTA33_MASK             (0x2U)
#define DMA_COMMON_INTA1_INTA33_SHIFT            (1U)
#define DMA_COMMON_INTA1_INTA34_MASK             (0x4U)
#define DMA_COMMON_INTA1_INTA34_SHIFT            (2U)
#define DMA_COMMON_INTA1_INTA35_MASK             (0x8U)
#define DMA_COMMON_INTA1_INTA35_SHIFT            (3U)
#define DMA_COMMON_INTA1_INTA36_MASK             (0x10U)
#define DMA_COMMON_INTA1_INTA36_SHIFT            (4U)
/*! @} */

/* The count of DMA_COMMON_INTA1 */
#define DMA_COMMON_INTA1_COUNT                   (1U)

/*! @name COMMON_INTB - Interrupt B status for all DMA channels */
/*! @{ */
#define DMA_COMMON_INTB_INTB0_MASK               (0x1U)
#define DMA_COMMON_INTB_INTB0_SHIFT              (0U)
#define DMA_COMMON_INTB_INTB1_MASK               (0x2U)
#define DMA_COMMON_INTB_INTB1_SHIFT              (1U)
#define DMA_COMMON_INTB_INTB2_MASK               (0x4U)
#define DMA_COMMON_INTB_INTB2_SHIFT              (2U)
#define DMA_COMMON_INTB_INTB3_MASK               (0x8U)
#define DMA_COMMON_INTB_INTB3_SHIFT              (3U)
#define DMA_COMMON_INTB_INTB4_MASK               (0x10U)
#define DMA_COMMON_INTB_INTB4_SHIFT              (4U)
#define DMA_COMMON_INTB_INTB5_MASK               (0x20U)
#define DMA_COMMON_INTB_INTB5_SHIFT              (5U)
#define DMA_COMMON_INTB_INTB6_MASK               (0x40U)
#define DMA_COMMON_INTB_INTB6_SHIFT              (6U)
#define DMA_COMMON_INTB_INTB7_MASK               (0x80U)
#define DMA_COMMON_INTB_INTB7_SHIFT              (7U)
#define DMA_COMMON_INTB_INTB8_MASK               (0x100U)
#define DMA_COMMON_INTB_INTB8_SHIFT              (8U)
#define DMA_COMMON_INTB_INTB9_MASK               (0x200U)
#define DMA_COMMON_INTB_INTB9_SHIFT              (9U)
#define DMA_COMMON_INTB_INTB10_MASK              (0x400U)
#define DMA_COMMON_INTB_INTB10_SHIFT             (10U)
#define DMA_COMMON_INTB_INTB11_MASK              (0x800U)
#define DMA_COMMON_INTB_INTB11_SHIFT             (11U)
#define DMA_COMMON_INTB_INTB12_MASK              (0x1000U)
#define DMA_COMMON_INTB_INTB12_SHIFT             (12U)
#define DMA_COMMON_INTB_INTB13_MASK              (0x2000U)
#define DMA_COMMON_INTB_INTB13_SHIFT             (13U)
#define DMA_COMMON_INTB_INTB14_MASK              (0x4000U)
#define DMA_COMMON_INTB_INTB14_SHIFT             (14U)
#define DMA_COMMON_INTB_INTB15_MASK              (0x8000U)
#define DMA_COMMON_INTB_INTB15_SHIFT             (15U)
#define DMA_COMMON_INTB_INTB16_MASK              (0x10000U)
#define DMA_COMMON_INTB_INTB16_SHIFT             (16U)
#define DMA_COMMON_INTB_INTB17_MASK              (0x20000U)
#define DMA_COMMON_INTB_INTB17_SHIFT             (17U)
#define DMA_COMMON_INTB_INTB18_MASK              (0x40000U)
#define DMA_COMMON_INTB_INTB18_SHIFT             (18U)
#define DMA_COMMON_INTB_INTB19_MASK              (0x80000U)
#define DMA_COMMON_INTB_INTB19_SHIFT             (19U)
#define DMA_COMMON_INTB_INTB20_MASK              (0x100000U)
#define DMA_COMMON_INTB_INTB20_SHIFT             (20U)
#define DMA_COMMON_INTB_INTB21_MASK              (0x200000U)
#define DMA_COMMON_INTB_INTB21_SHIFT             (21U)
#define DMA_COMMON_INTB_INTB22_MASK              (0x400000U)
#define DMA_COMMON_INTB_INTB22_SHIFT             (22U)
#define DMA_COMMON_INTB_INTB23_MASK              (0x800000U)
#define DMA_COMMON_INTB_INTB23_SHIFT             (23U)
#define DMA_COMMON_INTB_INTB24_MASK              (0x1000000U)
#define DMA_COMMON_INTB_INTB24_SHIFT             (24U)
#define DMA_COMMON_INTB_INTB25_MASK              (0x2000000U)
#define DMA_COMMON_INTB_INTB25_SHIFT             (25U)
#define DMA_COMMON_INTB_INTB26_MASK              (0x4000000U)
#define DMA_COMMON_INTB_INTB26_SHIFT             (26U)
#define DMA_COMMON_INTB_INTB27_MASK              (0x8000000U)
#define DMA_COMMON_INTB_INTB27_SHIFT             (27U)
#define DMA_COMMON_INTB_INTB28_MASK              (0x10000000U)
#define DMA_COMMON_INTB_INTB28_SHIFT             (28U)
#define DMA_COMMON_INTB_INTB29_MASK              (0x20000000U)
#define DMA_COMMON_INTB_INTB29_SHIFT             (29U)
#define DMA_COMMON_INTB_INTB30_MASK              (0x40000000U)
#define DMA_COMMON_INTB_INTB30_SHIFT             (30U)
#define DMA_COMMON_INTB_INTB31_MASK              (0x80000000U)
#define DMA_COMMON_INTB_INTB31_SHIFT             (31U)
/*! @} */

/* The count of DMA_COMMON_INTB */
#define DMA_COMMON_INTB_COUNT                    (1U)

/*! @name COMMON_INTB1 - Interrupt B status for all DMA channels */
/*! @{ */
#define DMA_COMMON_INTB1_INTB0_MASK              (0x1U)
#define DMA_COMMON_INTB1_INTB0_SHIFT             (0U)
#define DMA_COMMON_INTB1_INTB1_MASK              (0x2U)
#define DMA_COMMON_INTB1_INTB1_SHIFT             (1U)
#define DMA_COMMON_INTB1_INTB2_MASK              (0x4U)
#define DMA_COMMON_INTB1_INTB2_SHIFT             (2U)
#define DMA_COMMON_INTB1_INTB3_MASK              (0x8U)
#define DMA_COMMON_INTB1_INTB3_SHIFT             (3U)
#define DMA_COMMON_INTB1_INTB4_MASK              (0x10U)
#define DMA_COMMON_INTB1_INTB4_SHIFT             (4U)
/*! @} */

/* The count of DMA_COMMON_INTB1 */
#define DMA_COMMON_INTB1_COUNT                   (1U)

/*! @name COMMON_SETVALID - Set ValidPending control bits for all DMA channels */
/*! @{ */
#define DMA_COMMON_SETVALID_SETVALID0_MASK       (0x1U)
#define DMA_COMMON_SETVALID_SETVALID0_SHIFT      (0U)
#define DMA_COMMON_SETVALID_SETVALID1_MASK       (0x2U)
#define DMA_COMMON_SETVALID_SETVALID1_SHIFT      (1U)
#define DMA_COMMON_SETVALID_SETVALID2_MASK       (0x4U)
#define DMA_COMMON_SETVALID_SETVALID2_SHIFT      (2U)
#define DMA_COMMON_SETVALID_SETVALID3_MASK       (0x8U)
#define DMA_COMMON_SETVALID_SETVALID3_SHIFT      (3U)
#define DMA_COMMON_SETVALID_SETVALID4_MASK       (0x10U)
#define DMA_COMMON_SETVALID_SETVALID4_SHIFT      (4U)
#define DMA_COMMON_SETVALID_SETVALID5_MASK       (0x20U)
#define DMA_COMMON_SETVALID_SETVALID5_SHIFT      (5U)
#define DMA_COMMON_SETVALID_SETVALID6_MASK       (0x40U)
#define DMA_COMMON_SETVALID_SETVALID6_SHIFT      (6U)
#define DMA_COMMON_SETVALID_SETVALID7_MASK       (0x80U)
#define DMA_COMMON_SETVALID_SETVALID7_SHIFT      (7U)
#define DMA_COMMON_SETVALID_SETVALID8_MASK       (0x100U)
#define DMA_COMMON_SETVALID_SETVALID8_SHIFT      (8U)
#define DMA_COMMON_SETVALID_SETVALID9_MASK       (0x200U)
#define DMA_COMMON_SETVALID_SETVALID9_SHIFT      (9U)
#define DMA_COMMON_SETVALID_SETVALID10_MASK      (0x400U)
#define DMA_COMMON_SETVALID_SETVALID10_SHIFT     (10U)
#define DMA_COMMON_SETVALID_SETVALID11_MASK      (0x800U)
#define DMA_COMMON_SETVALID_SETVALID11_SHIFT     (11U)
#define DMA_COMMON_SETVALID_SETVALID12_MASK      (0x1000U)
#define DMA_COMMON_SETVALID_SETVALID12_SHIFT     (12U)
#define DMA_COMMON_SETVALID_SETVALID13_MASK      (0x2000U)
#define DMA_COMMON_SETVALID_SETVALID13_SHIFT     (13U)
#define DMA_COMMON_SETVALID_SETVALID14_MASK      (0x4000U)
#define DMA_COMMON_SETVALID_SETVALID14_SHIFT     (14U)
#define DMA_COMMON_SETVALID_SETVALID15_MASK      (0x8000U)
#define DMA_COMMON_SETVALID_SETVALID15_SHIFT     (15U)
#define DMA_COMMON_SETVALID_SETVALID16_MASK      (0x10000U)
#define DMA_COMMON_SETVALID_SETVALID16_SHIFT     (16U)
#define DMA_COMMON_SETVALID_SETVALID17_MASK      (0x20000U)
#define DMA_COMMON_SETVALID_SETVALID17_SHIFT     (17U)
#define DMA_COMMON_SETVALID_SETVALID18_MASK      (0x40000U)
#define DMA_COMMON_SETVALID_SETVALID18_SHIFT     (18U)
#define DMA_COMMON_SETVALID_SETVALID19_MASK      (0x80000U)
#define DMA_COMMON_SETVALID_SETVALID19_SHIFT     (19U)
#define DMA_COMMON_SETVALID_SETVALID20_MASK      (0x100000U)
#define DMA_COMMON_SETVALID_SETVALID20_SHIFT     (20U)
#define DMA_COMMON_SETVALID_SETVALID21_MASK      (0x200000U)
#define DMA_COMMON_SETVALID_SETVALID21_SHIFT     (21U)
#define DMA_COMMON_SETVALID_SETVALID22_MASK      (0x400000U)
#define DMA_COMMON_SETVALID_SETVALID22_SHIFT     (22U)
#define DMA_COMMON_SETVALID_SETVALID23_MASK      (0x800000U)
#define DMA_COMMON_SETVALID_SETVALID23_SHIFT     (23U)
#define DMA_COMMON_SETVALID_SETVALID24_MASK      (0x1000000U)
#define DMA_COMMON_SETVALID_SETVALID24_SHIFT     (24U)
#define DMA_COMMON_SETVALID_SETVALID25_MASK      (0x2000000U)
#define DMA_COMMON_SETVALID_SETVALID25_SHIFT     (25U)
#define DMA_COMMON_SETVALID_SETVALID26_MASK      (0x4000000U)
#define DMA_COMMON_SETVALID_SETVALID26_SHIFT     (26U)
#define DMA_COMMON_SETVALID_SETVALID27_MASK      (0x8000000U)
#define DMA_COMMON_SETVALID_SETVALID27_SHIFT     (27U)
#define DMA_COMMON_SETVALID_SETVALID28_MASK      (0x10000000U)
#define DMA_COMMON_SETVALID_SETVALID28_SHIFT     (28U)
#define DMA_COMMON_SETVALID_SETVALID29_MASK      (0x20000000U)
#define DMA_COMMON_SETVALID_SETVALID29_SHIFT     (29U)
#define DMA_COMMON_SETVALID_SETVALID30_MASK      (0x40000000U)
#define DMA_COMMON_SETVALID_SETVALID30_SHIFT     (30U)
#define DMA_COMMON_SETVALID_SETVALID31_MASK      (0x80000000U)
#define DMA_COMMON_SETVALID_SETVALID31_SHIFT     (31U)
/*! @} */

/* The count of DMA_COMMON_SETVALID */
#define DMA_COMMON_SETVALID_COUNT                (1U)

/*! @name COMMON_SETVALID1 - Set ValidPending control bits for all DMA channels */
/*! @{ */
#define DMA_COMMON_SETVALID1_SETVALID32_MASK     (0x1U)
#define DMA_COMMON_SETVALID1_SETVALID32_SHIFT    (0U)
#define DMA_COMMON_SETVALID1_SETVALID33_MASK     (0x2U)
#define DMA_COMMON_SETVALID1_SETVALID33_SHIFT    (1U)
#define DMA_COMMON_SETVALID1_SETVALID34_MASK     (0x4U)
#define DMA_COMMON_SETVALID1_SETVALID34_SHIFT    (2U)
#define DMA_COMMON_SETVALID1_SETVALID35_MASK     (0x8U)
#define DMA_COMMON_SETVALID1_SETVALID35_SHIFT    (3U)
#define DMA_COMMON_SETVALID1_SETVALID36_MASK     (0x10U)
#define DMA_COMMON_SETVALID1_SETVALID36_SHIFT    (4U)
/*! @} */

/* The count of DMA_COMMON_SETVALID1 */
#define DMA_COMMON_SETVALID1_COUNT               (1U)

/*! @name COMMON_SETTRIG - Set Trigger control bits for all DMA channels */
/*! @{ */
#define DMA_COMMON_SETTRIG_SETTRIG0_MASK         (0x1U)
#define DMA_COMMON_SETTRIG_SETTRIG0_SHIFT        (0U)
#define DMA_COMMON_SETTRIG_SETTRIG1_MASK         (0x2U)
#define DMA_COMMON_SETTRIG_SETTRIG1_SHIFT        (1U)
#define DMA_COMMON_SETTRIG_SETTRIG2_MASK         (0x4U)
#define DMA_COMMON_SETTRIG_SETTRIG2_SHIFT        (2U)
#define DMA_COMMON_SETTRIG_SETTRIG3_MASK         (0x8U)
#define DMA_COMMON_SETTRIG_SETTRIG3_SHIFT        (3U)
#define DMA_COMMON_SETTRIG_SETTRIG4_MASK         (0x10U)
#define DMA_COMMON_SETTRIG_SETTRIG4_SHIFT        (4U)
#define DMA_COMMON_SETTRIG_SETTRIG5_MASK         (0x20U)
#define DMA_COMMON_SETTRIG_SETTRIG5_SHIFT        (5U)
#define DMA_COMMON_SETTRIG_SETTRIG6_MASK         (0x40U)
#define DMA_COMMON_SETTRIG_SETTRIG6_SHIFT        (6U)
#define DMA_COMMON_SETTRIG_SETTRIG7_MASK         (0x80U)
#define DMA_COMMON_SETTRIG_SETTRIG7_SHIFT        (7U)
#define DMA_COMMON_SETTRIG_SETTRIG8_MASK         (0x100U)
#define DMA_COMMON_SETTRIG_SETTRIG8_SHIFT        (8U)
#define DMA_COMMON_SETTRIG_SETTRIG9_MASK         (0x200U)
#define DMA_COMMON_SETTRIG_SETTRIG9_SHIFT        (9U)
#define DMA_COMMON_SETTRIG_SETTRIG10_MASK        (0x400U)
#define DMA_COMMON_SETTRIG_SETTRIG10_SHIFT       (10U)
#define DMA_COMMON_SETTRIG_SETTRIG11_MASK        (0x800U)
#define DMA_COMMON_SETTRIG_SETTRIG11_SHIFT       (11U)
#define DMA_COMMON_SETTRIG_SETTRIG12_MASK        (0x1000U)
#define DMA_COMMON_SETTRIG_SETTRIG12_SHIFT       (12U)
#define DMA_COMMON_SETTRIG_SETTRIG13_MASK        (0x2000U)
#define DMA_COMMON_SETTRIG_SETTRIG13_SHIFT       (13U)
#define DMA_COMMON_SETTRIG_SETTRIG14_MASK        (0x4000U)
#define DMA_COMMON_SETTRIG_SETTRIG14_SHIFT       (14U)
#define DMA_COMMON_SETTRIG_SETTRIG15_MASK        (0x8000U)
#define DMA_COMMON_SETTRIG_SETTRIG15_SHIFT       (15U)
#define DMA_COMMON_SETTRIG_SETTRIG16_MASK        (0x10000U)
#define DMA_COMMON_SETTRIG_SETTRIG16_SHIFT       (16U)
#define DMA_COMMON_SETTRIG_SETTRIG17_MASK        (0x20000U)
#define DMA_COMMON_SETTRIG_SETTRIG17_SHIFT       (17U)
#define DMA_COMMON_SETTRIG_SETTRIG18_MASK        (0x40000U)
#define DMA_COMMON_SETTRIG_SETTRIG18_SHIFT       (18U)
#define DMA_COMMON_SETTRIG_SETTRIG19_MASK        (0x80000U)
#define DMA_COMMON_SETTRIG_SETTRIG19_SHIFT       (19U)
#define DMA_COMMON_SETTRIG_SETTRIG20_MASK        (0x100000U)
#define DMA_COMMON_SETTRIG_SETTRIG20_SHIFT       (20U)
#define DMA_COMMON_SETTRIG_SETTRIG21_MASK        (0x200000U)
#define DMA_COMMON_SETTRIG_SETTRIG21_SHIFT       (21U)
#define DMA_COMMON_SETTRIG_SETTRIG22_MASK        (0x400000U)
#define DMA_COMMON_SETTRIG_SETTRIG22_SHIFT       (22U)
#define DMA_COMMON_SETTRIG_SETTRIG23_MASK        (0x800000U)
#define DMA_COMMON_SETTRIG_SETTRIG23_SHIFT       (23U)
#define DMA_COMMON_SETTRIG_SETTRIG24_MASK        (0x1000000U)
#define DMA_COMMON_SETTRIG_SETTRIG24_SHIFT       (24U)
#define DMA_COMMON_SETTRIG_SETTRIG25_MASK        (0x2000000U)
#define DMA_COMMON_SETTRIG_SETTRIG25_SHIFT       (25U)
#define DMA_COMMON_SETTRIG_SETTRIG26_MASK        (0x4000000U)
#define DMA_COMMON_SETTRIG_SETTRIG26_SHIFT       (26U)
#define DMA_COMMON_SETTRIG_SETTRIG27_MASK        (0x8000000U)
#define DMA_COMMON_SETTRIG_SETTRIG27_SHIFT       (27U)
#define DMA_COMMON_SETTRIG_SETTRIG28_MASK        (0x10000000U)
#define DMA_COMMON_SETTRIG_SETTRIG28_SHIFT       (28U)
#define DMA_COMMON_SETTRIG_SETTRIG29_MASK        (0x20000000U)
#define DMA_COMMON_SETTRIG_SETTRIG29_SHIFT       (29U)
#define DMA_COMMON_SETTRIG_SETTRIG30_MASK        (0x40000000U)
#define DMA_COMMON_SETTRIG_SETTRIG30_SHIFT       (30U)
#define DMA_COMMON_SETTRIG_SETTRIG31_MASK        (0x80000000U)
#define DMA_COMMON_SETTRIG_SETTRIG31_SHIFT       (31U)
/*! @} */

/* The count of DMA_COMMON_SETTRIG */
#define DMA_COMMON_SETTRIG_COUNT                 (1U)

/*! @name COMMON_SETTRIG1 - Set Trigger control bits for all DMA channels */
/*! @{ */
#define DMA_COMMON_SETTRIG1_SETTRIG32_MASK       (0x1U)
#define DMA_COMMON_SETTRIG1_SETTRIG32_SHIFT      (0U)
#define DMA_COMMON_SETTRIG1_SETTRIG33_MASK       (0x2U)
#define DMA_COMMON_SETTRIG1_SETTRIG33_SHIFT      (1U)
#define DMA_COMMON_SETTRIG1_SETTRIG34_MASK       (0x4U)
#define DMA_COMMON_SETTRIG1_SETTRIG34_SHIFT      (2U)
#define DMA_COMMON_SETTRIG1_SETTRIG35_MASK       (0x8U)
#define DMA_COMMON_SETTRIG1_SETTRIG35_SHIFT      (3U)
#define DMA_COMMON_SETTRIG1_SETTRIG36_MASK       (0x10U)
#define DMA_COMMON_SETTRIG1_SETTRIG36_SHIFT      (4U)
/*! @} */

/* The count of DMA_COMMON_SETTRIG1 */
#define DMA_COMMON_SETTRIG1_COUNT                (1U)

/*! @name COMMON_ABORT - Channel Abort control for all DMA channels */
/*! @{ */
#define DMA_COMMON_ABORT_ABORT0_MASK             (0x1U)
#define DMA_COMMON_ABORT_ABORT0_SHIFT            (0U)
#define DMA_COMMON_ABORT_ABORT1_MASK             (0x2U)
#define DMA_COMMON_ABORT_ABORT1_SHIFT            (1U)
#define DMA_COMMON_ABORT_ABORT2_MASK             (0x4U)
#define DMA_COMMON_ABORT_ABORT2_SHIFT            (2U)
#define DMA_COMMON_ABORT_ABORT3_MASK             (0x8U)
#define DMA_COMMON_ABORT_ABORT3_SHIFT            (3U)
#define DMA_COMMON_ABORT_ABORT4_MASK             (0x10U)
#define DMA_COMMON_ABORT_ABORT4_SHIFT            (4U)
#define DMA_COMMON_ABORT_ABORT5_MASK             (0x20U)
#define DMA_COMMON_ABORT_ABORT5_SHIFT            (5U)
#define DMA_COMMON_ABORT_ABORT6_MASK             (0x40U)
#define DMA_COMMON_ABORT_ABORT6_SHIFT            (6U)
#define DMA_COMMON_ABORT_ABORT7_MASK             (0x80U)
#define DMA_COMMON_ABORT_ABORT7_SHIFT            (7U)
#define DMA_COMMON_ABORT_ABORT8_MASK             (0x100U)
#define DMA_COMMON_ABORT_ABORT8_SHIFT            (8U)
#define DMA_COMMON_ABORT_ABORT9_MASK             (0x200U)
#define DMA_COMMON_ABORT_ABORT9_SHIFT            (9U)
#define DMA_COMMON_ABORT_ABORT10_MASK            (0x400U)
#define DMA_COMMON_ABORT_ABORT10_SHIFT           (10U)
#define DMA_COMMON_ABORT_ABORT11_MASK            (0x800U)
#define DMA_COMMON_ABORT_ABORT11_SHIFT           (11U)
#define DMA_COMMON_ABORT_ABORT12_MASK            (0x1000U)
#define DMA_COMMON_ABORT_ABORT12_SHIFT           (12U)
#define DMA_COMMON_ABORT_ABORT13_MASK            (0x2000U)
#define DMA_COMMON_ABORT_ABORT13_SHIFT           (13U)
#define DMA_COMMON_ABORT_ABORT14_MASK            (0x4000U)
#define DMA_COMMON_ABORT_ABORT14_SHIFT           (14U)
#define DMA_COMMON_ABORT_ABORT15_MASK            (0x8000U)
#define DMA_COMMON_ABORT_ABORT15_SHIFT           (15U)
#define DMA_COMMON_ABORT_ABORT16_MASK            (0x10000U)
#define DMA_COMMON_ABORT_ABORT16_SHIFT           (16U)
#define DMA_COMMON_ABORT_ABORT17_MASK            (0x20000U)
#define DMA_COMMON_ABORT_ABORT17_SHIFT           (17U)
#define DMA_COMMON_ABORT_ABORT18_MASK            (0x40000U)
#define DMA_COMMON_ABORT_ABORT18_SHIFT           (18U)
#define DMA_COMMON_ABORT_ABORT19_MASK            (0x80000U)
#define DMA_COMMON_ABORT_ABORT19_SHIFT           (19U)
#define DMA_COMMON_ABORT_ABORT20_MASK            (0x100000U)
#define DMA_COMMON_ABORT_ABORT20_SHIFT           (20U)
#define DMA_COMMON_ABORT_ABORT21_MASK            (0x200000U)
#define DMA_COMMON_ABORT_ABORT21_SHIFT           (21U)
#define DMA_COMMON_ABORT_ABORT22_MASK            (0x400000U)
#define DMA_COMMON_ABORT_ABORT22_SHIFT           (22U)
#define DMA_COMMON_ABORT_ABORT23_MASK            (0x800000U)
#define DMA_COMMON_ABORT_ABORT23_SHIFT           (23U)
#define DMA_COMMON_ABORT_ABORT24_MASK            (0x1000000U)
#define DMA_COMMON_ABORT_ABORT24_SHIFT           (24U)
#define DMA_COMMON_ABORT_ABORT25_MASK            (0x2000000U)
#define DMA_COMMON_ABORT_ABORT25_SHIFT           (25U)
#define DMA_COMMON_ABORT_ABORT26_MASK            (0x4000000U)
#define DMA_COMMON_ABORT_ABORT26_SHIFT           (26U)
#define DMA_COMMON_ABORT_ABORT27_MASK            (0x8000000U)
#define DMA_COMMON_ABORT_ABORT27_SHIFT           (27U)
#define DMA_COMMON_ABORT_ABORT28_MASK            (0x10000000U)
#define DMA_COMMON_ABORT_ABORT28_SHIFT           (28U)
#define DMA_COMMON_ABORT_ABORT29_MASK            (0x20000000U)
#define DMA_COMMON_ABORT_ABORT29_SHIFT           (29U)
#define DMA_COMMON_ABORT_ABORT30_MASK            (0x40000000U)
#define DMA_COMMON_ABORT_ABORT30_SHIFT           (30U)
#define DMA_COMMON_ABORT_ABORT31_MASK            (0x80000000U)
#define DMA_COMMON_ABORT_ABORT31_SHIFT           (31U)
/*! @} */

/* The count of DMA_COMMON_ABORT */
#define DMA_COMMON_ABORT_COUNT                   (1U)

/*! @name COMMON_ABORT1 - Channel Abort control for all DMA channels */
/*! @{ */
#define DMA_COMMON_ABORT1_ABORT32_MASK           (0x1U)
#define DMA_COMMON_ABORT1_ABORT32_SHIFT          (0U)
#define DMA_COMMON_ABORT1_ABORT33_MASK           (0x2U)
#define DMA_COMMON_ABORT1_ABORT33_SHIFT          (1U)
#define DMA_COMMON_ABORT1_ABORT34_MASK           (0x4U)
#define DMA_COMMON_ABORT1_ABORT34_SHIFT          (2U)
#define DMA_COMMON_ABORT1_ABORT35_MASK           (0x8U)
#define DMA_COMMON_ABORT1_ABORT35_SHIFT          (3U)
#define DMA_COMMON_ABORT1_ABORT36_MASK           (0x10U)
#define DMA_COMMON_ABORT1_ABORT36_SHIFT          (4U)
/*! @} */

/* The count of DMA_COMMON_ABORT1 */
#define DMA_COMMON_ABORT1_COUNT                  (1U)

/*! @name CHANNEL_CFG - Configuration register for DMA channel */
/*! @{ */
#define DMA_CHANNEL_CFG_PERIPHREQEN_MASK         (0x1U)
#define DMA_CHANNEL_CFG_PERIPHREQEN_SHIFT        (0U)
#define DMA_CHANNEL_CFG_HWTRIGEN_MASK            (0x2U)
#define DMA_CHANNEL_CFG_HWTRIGEN_SHIFT           (1U)
#define DMA_CHANNEL_CFG_TRIGPOL_MASK             (0x10U)
#define DMA_CHANNEL_CFG_TRIGPOL_SHIFT            (4U)
#define DMA_CHANNEL_CFG_TRIGTYPE_MASK            (0x20U)
#define DMA_CHANNEL_CFG_TRIGTYPE_SHIFT           (5U)
#define DMA_CHANNEL_CFG_TRIGBURST_MASK           (0x40U)
#define DMA_CHANNEL_CFG_TRIGBURST_SHIFT          (6U)
#define DMA_CHANNEL_CFG_BURSTPOWER_MASK          (0xF00U)
#define DMA_CHANNEL_CFG_BURSTPOWER_SHIFT         (8U)
/*! BURSTPOWER - Burst Power.
 */
#define DMA_CHANNEL_CFG_BURSTPOWER(x)            (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_BURSTPOWER_SHIFT)) & DMA_CHANNEL_CFG_BURSTPOWER_MASK)
#define DMA_CHANNEL_CFG_SRCBURSTWRAP_MASK        (0x4000U)
#define DMA_CHANNEL_CFG_SRCBURSTWRAP_SHIFT       (14U)
#define DMA_CHANNEL_CFG_DSTBURSTWRAP_MASK        (0x8000U)
#define DMA_CHANNEL_CFG_DSTBURSTWRAP_SHIFT       (15U)
#define DMA_CHANNEL_CFG_CHPRIORITY_MASK          (0x70000U)
#define DMA_CHANNEL_CFG_CHPRIORITY_SHIFT         (16U)
/*! CHPRIORITY - Priority of channel when multiple DMA requests are pending.
 */
#define DMA_CHANNEL_CFG_CHPRIORITY(x)            (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_CHPRIORITY_SHIFT)) & DMA_CHANNEL_CFG_CHPRIORITY_MASK)
/*! @} */

/* The count of DMA_CHANNEL_CFG */
#define DMA_CHANNEL_CFG_COUNT                    (37U)

/*! @name CHANNEL_CTLSTAT - Control and status register for DMA channel */
/*! @{ */
#define DMA_CHANNEL_CTLSTAT_VALIDPENDING_MASK    (0x1U)
#define DMA_CHANNEL_CTLSTAT_VALIDPENDING_SHIFT   (0U)
#define DMA_CHANNEL_CTLSTAT_TRIG_MASK            (0x4U)
#define DMA_CHANNEL_CTLSTAT_TRIG_SHIFT           (2U)
/*! @} */

/* The count of DMA_CHANNEL_CTLSTAT */
#define DMA_CHANNEL_CTLSTAT_COUNT                (37U)

/*! @name CHANNEL_XFERCFG - Transfer configuration register for DMA channel */
/*! @{ */
#define DMA_CHANNEL_XFERCFG_CFGVALID_MASK        (0x1U)
#define DMA_CHANNEL_XFERCFG_CFGVALID_SHIFT       (0U)
#define DMA_CHANNEL_XFERCFG_RELOAD_MASK          (0x2U)
#define DMA_CHANNEL_XFERCFG_RELOAD_SHIFT         (1U)
#define DMA_CHANNEL_XFERCFG_SWTRIG_MASK          (0x4U)
#define DMA_CHANNEL_XFERCFG_SWTRIG_SHIFT         (2U)
#define DMA_CHANNEL_XFERCFG_CLRTRIG_MASK         (0x8U)
#define DMA_CHANNEL_XFERCFG_CLRTRIG_SHIFT        (3U)
#define DMA_CHANNEL_XFERCFG_SETINTA_MASK         (0x10U)
#define DMA_CHANNEL_XFERCFG_SETINTA_SHIFT        (4U)
#define DMA_CHANNEL_XFERCFG_SETINTB_MASK         (0x20U)
#define DMA_CHANNEL_XFERCFG_SETINTB_SHIFT        (5U)
#define DMA_CHANNEL_XFERCFG_WIDTH_MASK           (0x300U)
#define DMA_CHANNEL_XFERCFG_WIDTH_SHIFT          (8U)
/*! WIDTH - Transfer width used for this DMA channel.
 *  0b00..8-bit.
 *  0b01..16-bit.
 *  0b10..32-bit.
 *  0b11..Reserved.
 */
#define DMA_CHANNEL_XFERCFG_WIDTH(x)             (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_WIDTH_SHIFT)) & DMA_CHANNEL_XFERCFG_WIDTH_MASK)
#define DMA_CHANNEL_XFERCFG_SRCINC_MASK          (0x3000U)
#define DMA_CHANNEL_XFERCFG_SRCINC_SHIFT         (12U)
/*! SRCINC - Source address increment
 *  0b00..No increment.
 *  0b01..1 x width.
 *  0b10..2 x width.
 *  0b11..4 x width.
 */
#define DMA_CHANNEL_XFERCFG_SRCINC(x)            (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_SRCINC_SHIFT)) & DMA_CHANNEL_XFERCFG_SRCINC_MASK)
#define DMA_CHANNEL_XFERCFG_DSTINC_MASK          (0xC000U)
#define DMA_CHANNEL_XFERCFG_DSTINC_SHIFT         (14U)
/*! DSTINC - Destination address increment
 *  0b00..No increment.
 *  0b01..1 x width.
 *  0b10..2 x width.
 *  0b11..4 x width.
 */
#define DMA_CHANNEL_XFERCFG_DSTINC(x)            (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_DSTINC_SHIFT)) & DMA_CHANNEL_XFERCFG_DSTINC_MASK)
#define DMA_CHANNEL_XFERCFG_XFERCOUNT_MASK       (0x3FF0000U)
#define DMA_CHANNEL_XFERCFG_XFERCOUNT_SHIFT      (16U)
/*! XFERCOUNT - Total number of transfers to be performed, minus 1 encoded.
 */
#define DMA_CHANNEL_XFERCFG_XFERCOUNT(x)         (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_XFERCOUNT_SHIFT)) & DMA_CHANNEL_XFERCFG_XFERCOUNT_MASK)
/*! @} */

/* The count of DMA_CHANNEL_XFERCFG */
#define DMA_CHANNEL_XFERCFG_COUNT                (37U)


/*!
 * @}
 */ /* end of group DMA_Register_Masks */


/* DMA - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral DMA0 base pointer */
  #define DMA0_BASE_PTR                            ((DMA_MemMapPtr)0x50104000u)
  /** Peripheral DMA0 base pointer */
  #define DMA0_BASE_PTR_NS                         ((DMA_MemMapPtr)0x40104000u)
  /** Peripheral DMA1 base pointer */
  #define DMA1_BASE_PTR                            ((DMA_MemMapPtr)0x50105000u)
  /** Peripheral DMA1 base pointer */
  #define DMA1_BASE_PTR_NS                         ((DMA_MemMapPtr)0x40105000u)
  /** Array initializer of DMA peripheral base pointers */
  #define DMA_BASE_PTRS                            { DMA0_BASE_PTR, DMA1_BASE_PTR }
  /** Array initializer of DMA peripheral base pointers */
  #define DMA_BASE_PTRS_NS                         { DMA0_BASE_PTR_NS, DMA1_BASE_PTR_NS }
#else
  /** Peripheral DMA0 base pointer */
  #define DMA0_BASE_PTR                            ((DMA_MemMapPtr)0x40104000u)
  /** Peripheral DMA1 base pointer */
  #define DMA1_BASE_PTR                            ((DMA_MemMapPtr)0x40105000u)
  /** Array initializer of DMA peripheral base pointers */
  #define DMA_BASE_PTRS                            { DMA0_BASE_PTR, DMA1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- DMA - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMA_Register_Accessor_Macros DMA - Register accessor macros
 * @{
 */


/* DMA - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* DMA0 */
  #define DMA0_CTRL                                DMA_CTRL_REG(DMA0_BASE_PTR)
  #define DMA0_CTRL_NS                             DMA_CTRL_REG(DMA0_BASE_PTR_NS)
  #define DMA0_INTSTAT                             DMA_INTSTAT_REG(DMA0_BASE_PTR)
  #define DMA0_INTSTAT_NS                          DMA_INTSTAT_REG(DMA0_BASE_PTR_NS)
  #define DMA0_SRAMBASE                            DMA_SRAMBASE_REG(DMA0_BASE_PTR)
  #define DMA0_SRAMBASE_NS                         DMA_SRAMBASE_REG(DMA0_BASE_PTR_NS)
  #define DMA0_ENABLESET0                          DMA_COMMON_ENABLESET_REG(DMA0_BASE_PTR,0)
  #define DMA0_ENABLESET0_NS                       DMA_COMMON_ENABLESET_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_ENABLESET1                          DMA_COMMON_ENABLESET1_REG(DMA0_BASE_PTR,0)
  #define DMA0_ENABLESET1_NS                       DMA_COMMON_ENABLESET1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_ENABLECLR0                          DMA_COMMON_ENABLECLR_REG(DMA0_BASE_PTR,0)
  #define DMA0_ENABLECLR0_NS                       DMA_COMMON_ENABLECLR_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_ENABLECLR1                          DMA_COMMON_ENABLECLR1_REG(DMA0_BASE_PTR,0)
  #define DMA0_ENABLECLR1_NS                       DMA_COMMON_ENABLECLR1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_ACTIVE0                             DMA_COMMON_ACTIVE_REG(DMA0_BASE_PTR,0)
  #define DMA0_ACTIVE0_NS                          DMA_COMMON_ACTIVE_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_ACTIVE1                             DMA_COMMON_ACTIVE1_REG(DMA0_BASE_PTR,0)
  #define DMA0_ACTIVE1_NS                          DMA_COMMON_ACTIVE1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_BUSY0                               DMA_COMMON_BUSY_REG(DMA0_BASE_PTR,0)
  #define DMA0_BUSY0_NS                            DMA_COMMON_BUSY_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_BUSY1                               DMA_COMMON_BUSY1_REG(DMA0_BASE_PTR,0)
  #define DMA0_BUSY1_NS                            DMA_COMMON_BUSY1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_ERRINT0                             DMA_COMMON_ERRINT_REG(DMA0_BASE_PTR,0)
  #define DMA0_ERRINT0_NS                          DMA_COMMON_ERRINT_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_ERRINT1                             DMA_COMMON_ERRINT1_REG(DMA0_BASE_PTR,0)
  #define DMA0_ERRINT1_NS                          DMA_COMMON_ERRINT1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_INTENSET0                           DMA_COMMON_INTENSET_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTENSET0_NS                        DMA_COMMON_INTENSET_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_INTENSET1                           DMA_COMMON_INTENSET1_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTENSET1_NS                        DMA_COMMON_INTENSET1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_INTENCLR0                           DMA_COMMON_INTENCLR_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTENCLR0_NS                        DMA_COMMON_INTENCLR_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_INTENCLR1                           DMA_COMMON_INTENCLR1_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTENCLR1_NS                        DMA_COMMON_INTENCLR1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_INTA0                               DMA_COMMON_INTA_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTA0_NS                            DMA_COMMON_INTA_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_INTA1                               DMA_COMMON_INTA1_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTA1_NS                            DMA_COMMON_INTA1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_INTB0                               DMA_COMMON_INTB_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTB0_NS                            DMA_COMMON_INTB_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_INTB1                               DMA_COMMON_INTB1_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTB1_NS                            DMA_COMMON_INTB1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_SETVALID0                           DMA_COMMON_SETVALID_REG(DMA0_BASE_PTR,0)
  #define DMA0_SETVALID0_NS                        DMA_COMMON_SETVALID_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_SETVALID1                           DMA_COMMON_SETVALID1_REG(DMA0_BASE_PTR,0)
  #define DMA0_SETVALID1_NS                        DMA_COMMON_SETVALID1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_SETTRIG0                            DMA_COMMON_SETTRIG_REG(DMA0_BASE_PTR,0)
  #define DMA0_SETTRIG0_NS                         DMA_COMMON_SETTRIG_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_SETTRIG1                            DMA_COMMON_SETTRIG1_REG(DMA0_BASE_PTR,0)
  #define DMA0_SETTRIG1_NS                         DMA_COMMON_SETTRIG1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_ABORT0                              DMA_COMMON_ABORT_REG(DMA0_BASE_PTR,0)
  #define DMA0_ABORT0_NS                           DMA_COMMON_ABORT_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_ABORT1                              DMA_COMMON_ABORT1_REG(DMA0_BASE_PTR,0)
  #define DMA0_ABORT1_NS                           DMA_COMMON_ABORT1_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_CFG0                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,0)
  #define DMA0_CFG0_NS                             DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_CTLSTAT0                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,0)
  #define DMA0_CTLSTAT0_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_XFERCFG0                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,0)
  #define DMA0_XFERCFG0_NS                         DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,0)
  #define DMA0_CFG1                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,1)
  #define DMA0_CFG1_NS                             DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,1)
  #define DMA0_CTLSTAT1                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,1)
  #define DMA0_CTLSTAT1_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,1)
  #define DMA0_XFERCFG1                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,1)
  #define DMA0_XFERCFG1_NS                         DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,1)
  #define DMA0_CFG2                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,2)
  #define DMA0_CFG2_NS                             DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,2)
  #define DMA0_CTLSTAT2                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,2)
  #define DMA0_CTLSTAT2_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,2)
  #define DMA0_XFERCFG2                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,2)
  #define DMA0_XFERCFG2_NS                         DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,2)
  #define DMA0_CFG3                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,3)
  #define DMA0_CFG3_NS                             DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,3)
  #define DMA0_CTLSTAT3                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,3)
  #define DMA0_CTLSTAT3_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,3)
  #define DMA0_XFERCFG3                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,3)
  #define DMA0_XFERCFG3_NS                         DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,3)
  #define DMA0_CFG4                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,4)
  #define DMA0_CFG4_NS                             DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,4)
  #define DMA0_CTLSTAT4                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,4)
  #define DMA0_CTLSTAT4_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,4)
  #define DMA0_XFERCFG4                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,4)
  #define DMA0_XFERCFG4_NS                         DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,4)
  #define DMA0_CFG5                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,5)
  #define DMA0_CFG5_NS                             DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,5)
  #define DMA0_CTLSTAT5                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,5)
  #define DMA0_CTLSTAT5_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,5)
  #define DMA0_XFERCFG5                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,5)
  #define DMA0_XFERCFG5_NS                         DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,5)
  #define DMA0_CFG6                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,6)
  #define DMA0_CFG6_NS                             DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,6)
  #define DMA0_CTLSTAT6                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,6)
  #define DMA0_CTLSTAT6_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,6)
  #define DMA0_XFERCFG6                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,6)
  #define DMA0_XFERCFG6_NS                         DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,6)
  #define DMA0_CFG7                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,7)
  #define DMA0_CFG7_NS                             DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,7)
  #define DMA0_CTLSTAT7                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,7)
  #define DMA0_CTLSTAT7_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,7)
  #define DMA0_XFERCFG7                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,7)
  #define DMA0_XFERCFG7_NS                         DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,7)
  #define DMA0_CFG8                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,8)
  #define DMA0_CFG8_NS                             DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,8)
  #define DMA0_CTLSTAT8                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,8)
  #define DMA0_CTLSTAT8_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,8)
  #define DMA0_XFERCFG8                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,8)
  #define DMA0_XFERCFG8_NS                         DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,8)
  #define DMA0_CFG9                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,9)
  #define DMA0_CFG9_NS                             DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,9)
  #define DMA0_CTLSTAT9                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,9)
  #define DMA0_CTLSTAT9_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,9)
  #define DMA0_XFERCFG9                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,9)
  #define DMA0_XFERCFG9_NS                         DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,9)
  #define DMA0_CFG10                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,10)
  #define DMA0_CFG10_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,10)
  #define DMA0_CTLSTAT10                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,10)
  #define DMA0_CTLSTAT10_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,10)
  #define DMA0_XFERCFG10                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,10)
  #define DMA0_XFERCFG10_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,10)
  #define DMA0_CFG11                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,11)
  #define DMA0_CFG11_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,11)
  #define DMA0_CTLSTAT11                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,11)
  #define DMA0_CTLSTAT11_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,11)
  #define DMA0_XFERCFG11                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,11)
  #define DMA0_XFERCFG11_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,11)
  #define DMA0_CFG12                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,12)
  #define DMA0_CFG12_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,12)
  #define DMA0_CTLSTAT12                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,12)
  #define DMA0_CTLSTAT12_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,12)
  #define DMA0_XFERCFG12                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,12)
  #define DMA0_XFERCFG12_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,12)
  #define DMA0_CFG13                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,13)
  #define DMA0_CFG13_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,13)
  #define DMA0_CTLSTAT13                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,13)
  #define DMA0_CTLSTAT13_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,13)
  #define DMA0_XFERCFG13                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,13)
  #define DMA0_XFERCFG13_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,13)
  #define DMA0_CFG14                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,14)
  #define DMA0_CFG14_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,14)
  #define DMA0_CTLSTAT14                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,14)
  #define DMA0_CTLSTAT14_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,14)
  #define DMA0_XFERCFG14                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,14)
  #define DMA0_XFERCFG14_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,14)
  #define DMA0_CFG15                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,15)
  #define DMA0_CFG15_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,15)
  #define DMA0_CTLSTAT15                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,15)
  #define DMA0_CTLSTAT15_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,15)
  #define DMA0_XFERCFG15                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,15)
  #define DMA0_XFERCFG15_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,15)
  #define DMA0_CFG16                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,16)
  #define DMA0_CFG16_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,16)
  #define DMA0_CTLSTAT16                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,16)
  #define DMA0_CTLSTAT16_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,16)
  #define DMA0_XFERCFG16                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,16)
  #define DMA0_XFERCFG16_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,16)
  #define DMA0_CFG17                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,17)
  #define DMA0_CFG17_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,17)
  #define DMA0_CTLSTAT17                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,17)
  #define DMA0_CTLSTAT17_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,17)
  #define DMA0_XFERCFG17                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,17)
  #define DMA0_XFERCFG17_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,17)
  #define DMA0_CFG18                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,18)
  #define DMA0_CFG18_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,18)
  #define DMA0_CTLSTAT18                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,18)
  #define DMA0_CTLSTAT18_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,18)
  #define DMA0_XFERCFG18                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,18)
  #define DMA0_XFERCFG18_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,18)
  #define DMA0_CFG19                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,19)
  #define DMA0_CFG19_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,19)
  #define DMA0_CTLSTAT19                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,19)
  #define DMA0_CTLSTAT19_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,19)
  #define DMA0_XFERCFG19                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,19)
  #define DMA0_XFERCFG19_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,19)
  #define DMA0_CFG20                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,20)
  #define DMA0_CFG20_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,20)
  #define DMA0_CTLSTAT20                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,20)
  #define DMA0_CTLSTAT20_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,20)
  #define DMA0_XFERCFG20                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,20)
  #define DMA0_XFERCFG20_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,20)
  #define DMA0_CFG21                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,21)
  #define DMA0_CFG21_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,21)
  #define DMA0_CTLSTAT21                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,21)
  #define DMA0_CTLSTAT21_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,21)
  #define DMA0_XFERCFG21                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,21)
  #define DMA0_XFERCFG21_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,21)
  #define DMA0_CFG22                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,22)
  #define DMA0_CFG22_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,22)
  #define DMA0_CTLSTAT22                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,22)
  #define DMA0_CTLSTAT22_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,22)
  #define DMA0_XFERCFG22                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,22)
  #define DMA0_XFERCFG22_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,22)
  #define DMA0_CFG23                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,23)
  #define DMA0_CFG23_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,23)
  #define DMA0_CTLSTAT23                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,23)
  #define DMA0_CTLSTAT23_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,23)
  #define DMA0_XFERCFG23                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,23)
  #define DMA0_XFERCFG23_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,23)
  #define DMA0_CFG24                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,24)
  #define DMA0_CFG24_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,24)
  #define DMA0_CTLSTAT24                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,24)
  #define DMA0_CTLSTAT24_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,24)
  #define DMA0_XFERCFG24                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,24)
  #define DMA0_XFERCFG24_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,24)
  #define DMA0_CFG25                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,25)
  #define DMA0_CFG25_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,25)
  #define DMA0_CTLSTAT25                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,25)
  #define DMA0_CTLSTAT25_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,25)
  #define DMA0_XFERCFG25                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,25)
  #define DMA0_XFERCFG25_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,25)
  #define DMA0_CFG26                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,26)
  #define DMA0_CFG26_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,26)
  #define DMA0_CTLSTAT26                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,26)
  #define DMA0_CTLSTAT26_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,26)
  #define DMA0_XFERCFG26                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,26)
  #define DMA0_XFERCFG26_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,26)
  #define DMA0_CFG27                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,27)
  #define DMA0_CFG27_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,27)
  #define DMA0_CTLSTAT27                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,27)
  #define DMA0_CTLSTAT27_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,27)
  #define DMA0_XFERCFG27                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,27)
  #define DMA0_XFERCFG27_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,27)
  #define DMA0_CFG28                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,28)
  #define DMA0_CFG28_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,28)
  #define DMA0_CTLSTAT28                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,28)
  #define DMA0_CTLSTAT28_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,28)
  #define DMA0_XFERCFG28                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,28)
  #define DMA0_XFERCFG28_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,28)
  #define DMA0_CFG29                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,29)
  #define DMA0_CFG29_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,29)
  #define DMA0_CTLSTAT29                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,29)
  #define DMA0_CTLSTAT29_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,29)
  #define DMA0_XFERCFG29                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,29)
  #define DMA0_XFERCFG29_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,29)
  #define DMA0_CFG30                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,30)
  #define DMA0_CFG30_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,30)
  #define DMA0_CTLSTAT30                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,30)
  #define DMA0_CTLSTAT30_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,30)
  #define DMA0_XFERCFG30                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,30)
  #define DMA0_XFERCFG30_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,30)
  #define DMA0_CFG31                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,31)
  #define DMA0_CFG31_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,31)
  #define DMA0_CTLSTAT31                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,31)
  #define DMA0_CTLSTAT31_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,31)
  #define DMA0_XFERCFG31                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,31)
  #define DMA0_XFERCFG31_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,31)
  #define DMA0_CFG32                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,32)
  #define DMA0_CFG32_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,32)
  #define DMA0_CTLSTAT32                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,32)
  #define DMA0_CTLSTAT32_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,32)
  #define DMA0_XFERCFG32                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,32)
  #define DMA0_XFERCFG32_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,32)
  #define DMA0_CFG33                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,33)
  #define DMA0_CFG33_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,33)
  #define DMA0_CTLSTAT33                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,33)
  #define DMA0_CTLSTAT33_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,33)
  #define DMA0_XFERCFG33                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,33)
  #define DMA0_XFERCFG33_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,33)
  #define DMA0_CFG34                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,34)
  #define DMA0_CFG34_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,34)
  #define DMA0_CTLSTAT34                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,34)
  #define DMA0_CTLSTAT34_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,34)
  #define DMA0_XFERCFG34                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,34)
  #define DMA0_XFERCFG34_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,34)
  #define DMA0_CFG35                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,35)
  #define DMA0_CFG35_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,35)
  #define DMA0_CTLSTAT35                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,35)
  #define DMA0_CTLSTAT35_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,35)
  #define DMA0_XFERCFG35                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,35)
  #define DMA0_XFERCFG35_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,35)
  #define DMA0_CFG36                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,36)
  #define DMA0_CFG36_NS                            DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,36)
  #define DMA0_CTLSTAT36                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,36)
  #define DMA0_CTLSTAT36_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,36)
  #define DMA0_XFERCFG36                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,36)
  #define DMA0_XFERCFG36_NS                        DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,36)
  /* DMA1 */
  #define DMA1_CTRL                                DMA_CTRL_REG(DMA1_BASE_PTR)
  #define DMA1_CTRL_NS                             DMA_CTRL_REG(DMA1_BASE_PTR_NS)
  #define DMA1_INTSTAT                             DMA_INTSTAT_REG(DMA1_BASE_PTR)
  #define DMA1_INTSTAT_NS                          DMA_INTSTAT_REG(DMA1_BASE_PTR_NS)
  #define DMA1_SRAMBASE                            DMA_SRAMBASE_REG(DMA1_BASE_PTR)
  #define DMA1_SRAMBASE_NS                         DMA_SRAMBASE_REG(DMA1_BASE_PTR_NS)
  #define DMA1_ENABLESET0                          DMA_COMMON_ENABLESET_REG(DMA1_BASE_PTR,0)
  #define DMA1_ENABLESET0_NS                       DMA_COMMON_ENABLESET_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_ENABLESET1                          DMA_COMMON_ENABLESET1_REG(DMA1_BASE_PTR,0)
  #define DMA1_ENABLESET1_NS                       DMA_COMMON_ENABLESET1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_ENABLECLR0                          DMA_COMMON_ENABLECLR_REG(DMA1_BASE_PTR,0)
  #define DMA1_ENABLECLR0_NS                       DMA_COMMON_ENABLECLR_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_ENABLECLR1                          DMA_COMMON_ENABLECLR1_REG(DMA1_BASE_PTR,0)
  #define DMA1_ENABLECLR1_NS                       DMA_COMMON_ENABLECLR1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_ACTIVE0                             DMA_COMMON_ACTIVE_REG(DMA1_BASE_PTR,0)
  #define DMA1_ACTIVE0_NS                          DMA_COMMON_ACTIVE_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_ACTIVE1                             DMA_COMMON_ACTIVE1_REG(DMA1_BASE_PTR,0)
  #define DMA1_ACTIVE1_NS                          DMA_COMMON_ACTIVE1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_BUSY0                               DMA_COMMON_BUSY_REG(DMA1_BASE_PTR,0)
  #define DMA1_BUSY0_NS                            DMA_COMMON_BUSY_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_BUSY1                               DMA_COMMON_BUSY1_REG(DMA1_BASE_PTR,0)
  #define DMA1_BUSY1_NS                            DMA_COMMON_BUSY1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_ERRINT0                             DMA_COMMON_ERRINT_REG(DMA1_BASE_PTR,0)
  #define DMA1_ERRINT0_NS                          DMA_COMMON_ERRINT_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_ERRINT1                             DMA_COMMON_ERRINT1_REG(DMA1_BASE_PTR,0)
  #define DMA1_ERRINT1_NS                          DMA_COMMON_ERRINT1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_INTENSET0                           DMA_COMMON_INTENSET_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTENSET0_NS                        DMA_COMMON_INTENSET_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_INTENSET1                           DMA_COMMON_INTENSET1_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTENSET1_NS                        DMA_COMMON_INTENSET1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_INTENCLR0                           DMA_COMMON_INTENCLR_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTENCLR0_NS                        DMA_COMMON_INTENCLR_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_INTENCLR1                           DMA_COMMON_INTENCLR1_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTENCLR1_NS                        DMA_COMMON_INTENCLR1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_INTA0                               DMA_COMMON_INTA_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTA0_NS                            DMA_COMMON_INTA_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_INTA1                               DMA_COMMON_INTA1_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTA1_NS                            DMA_COMMON_INTA1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_INTB0                               DMA_COMMON_INTB_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTB0_NS                            DMA_COMMON_INTB_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_INTB1                               DMA_COMMON_INTB1_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTB1_NS                            DMA_COMMON_INTB1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_SETVALID0                           DMA_COMMON_SETVALID_REG(DMA1_BASE_PTR,0)
  #define DMA1_SETVALID0_NS                        DMA_COMMON_SETVALID_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_SETVALID1                           DMA_COMMON_SETVALID1_REG(DMA1_BASE_PTR,0)
  #define DMA1_SETVALID1_NS                        DMA_COMMON_SETVALID1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_SETTRIG0                            DMA_COMMON_SETTRIG_REG(DMA1_BASE_PTR,0)
  #define DMA1_SETTRIG0_NS                         DMA_COMMON_SETTRIG_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_SETTRIG1                            DMA_COMMON_SETTRIG1_REG(DMA1_BASE_PTR,0)
  #define DMA1_SETTRIG1_NS                         DMA_COMMON_SETTRIG1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_ABORT0                              DMA_COMMON_ABORT_REG(DMA1_BASE_PTR,0)
  #define DMA1_ABORT0_NS                           DMA_COMMON_ABORT_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_ABORT1                              DMA_COMMON_ABORT1_REG(DMA1_BASE_PTR,0)
  #define DMA1_ABORT1_NS                           DMA_COMMON_ABORT1_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_CFG0                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,0)
  #define DMA1_CFG0_NS                             DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_CTLSTAT0                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,0)
  #define DMA1_CTLSTAT0_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_XFERCFG0                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,0)
  #define DMA1_XFERCFG0_NS                         DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,0)
  #define DMA1_CFG1                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,1)
  #define DMA1_CFG1_NS                             DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,1)
  #define DMA1_CTLSTAT1                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,1)
  #define DMA1_CTLSTAT1_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,1)
  #define DMA1_XFERCFG1                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,1)
  #define DMA1_XFERCFG1_NS                         DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,1)
  #define DMA1_CFG2                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,2)
  #define DMA1_CFG2_NS                             DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,2)
  #define DMA1_CTLSTAT2                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,2)
  #define DMA1_CTLSTAT2_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,2)
  #define DMA1_XFERCFG2                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,2)
  #define DMA1_XFERCFG2_NS                         DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,2)
  #define DMA1_CFG3                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,3)
  #define DMA1_CFG3_NS                             DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,3)
  #define DMA1_CTLSTAT3                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,3)
  #define DMA1_CTLSTAT3_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,3)
  #define DMA1_XFERCFG3                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,3)
  #define DMA1_XFERCFG3_NS                         DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,3)
  #define DMA1_CFG4                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,4)
  #define DMA1_CFG4_NS                             DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,4)
  #define DMA1_CTLSTAT4                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,4)
  #define DMA1_CTLSTAT4_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,4)
  #define DMA1_XFERCFG4                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,4)
  #define DMA1_XFERCFG4_NS                         DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,4)
  #define DMA1_CFG5                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,5)
  #define DMA1_CFG5_NS                             DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,5)
  #define DMA1_CTLSTAT5                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,5)
  #define DMA1_CTLSTAT5_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,5)
  #define DMA1_XFERCFG5                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,5)
  #define DMA1_XFERCFG5_NS                         DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,5)
  #define DMA1_CFG6                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,6)
  #define DMA1_CFG6_NS                             DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,6)
  #define DMA1_CTLSTAT6                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,6)
  #define DMA1_CTLSTAT6_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,6)
  #define DMA1_XFERCFG6                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,6)
  #define DMA1_XFERCFG6_NS                         DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,6)
  #define DMA1_CFG7                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,7)
  #define DMA1_CFG7_NS                             DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,7)
  #define DMA1_CTLSTAT7                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,7)
  #define DMA1_CTLSTAT7_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,7)
  #define DMA1_XFERCFG7                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,7)
  #define DMA1_XFERCFG7_NS                         DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,7)
  #define DMA1_CFG8                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,8)
  #define DMA1_CFG8_NS                             DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,8)
  #define DMA1_CTLSTAT8                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,8)
  #define DMA1_CTLSTAT8_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,8)
  #define DMA1_XFERCFG8                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,8)
  #define DMA1_XFERCFG8_NS                         DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,8)
  #define DMA1_CFG9                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,9)
  #define DMA1_CFG9_NS                             DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,9)
  #define DMA1_CTLSTAT9                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,9)
  #define DMA1_CTLSTAT9_NS                         DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,9)
  #define DMA1_XFERCFG9                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,9)
  #define DMA1_XFERCFG9_NS                         DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,9)
  #define DMA1_CFG10                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,10)
  #define DMA1_CFG10_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,10)
  #define DMA1_CTLSTAT10                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,10)
  #define DMA1_CTLSTAT10_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,10)
  #define DMA1_XFERCFG10                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,10)
  #define DMA1_XFERCFG10_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,10)
  #define DMA1_CFG11                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,11)
  #define DMA1_CFG11_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,11)
  #define DMA1_CTLSTAT11                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,11)
  #define DMA1_CTLSTAT11_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,11)
  #define DMA1_XFERCFG11                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,11)
  #define DMA1_XFERCFG11_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,11)
  #define DMA1_CFG12                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,12)
  #define DMA1_CFG12_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,12)
  #define DMA1_CTLSTAT12                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,12)
  #define DMA1_CTLSTAT12_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,12)
  #define DMA1_XFERCFG12                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,12)
  #define DMA1_XFERCFG12_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,12)
  #define DMA1_CFG13                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,13)
  #define DMA1_CFG13_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,13)
  #define DMA1_CTLSTAT13                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,13)
  #define DMA1_CTLSTAT13_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,13)
  #define DMA1_XFERCFG13                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,13)
  #define DMA1_XFERCFG13_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,13)
  #define DMA1_CFG14                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,14)
  #define DMA1_CFG14_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,14)
  #define DMA1_CTLSTAT14                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,14)
  #define DMA1_CTLSTAT14_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,14)
  #define DMA1_XFERCFG14                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,14)
  #define DMA1_XFERCFG14_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,14)
  #define DMA1_CFG15                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,15)
  #define DMA1_CFG15_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,15)
  #define DMA1_CTLSTAT15                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,15)
  #define DMA1_CTLSTAT15_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,15)
  #define DMA1_XFERCFG15                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,15)
  #define DMA1_XFERCFG15_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,15)
  #define DMA1_CFG16                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,16)
  #define DMA1_CFG16_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,16)
  #define DMA1_CTLSTAT16                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,16)
  #define DMA1_CTLSTAT16_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,16)
  #define DMA1_XFERCFG16                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,16)
  #define DMA1_XFERCFG16_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,16)
  #define DMA1_CFG17                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,17)
  #define DMA1_CFG17_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,17)
  #define DMA1_CTLSTAT17                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,17)
  #define DMA1_CTLSTAT17_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,17)
  #define DMA1_XFERCFG17                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,17)
  #define DMA1_XFERCFG17_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,17)
  #define DMA1_CFG18                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,18)
  #define DMA1_CFG18_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,18)
  #define DMA1_CTLSTAT18                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,18)
  #define DMA1_CTLSTAT18_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,18)
  #define DMA1_XFERCFG18                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,18)
  #define DMA1_XFERCFG18_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,18)
  #define DMA1_CFG19                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,19)
  #define DMA1_CFG19_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,19)
  #define DMA1_CTLSTAT19                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,19)
  #define DMA1_CTLSTAT19_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,19)
  #define DMA1_XFERCFG19                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,19)
  #define DMA1_XFERCFG19_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,19)
  #define DMA1_CFG20                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,20)
  #define DMA1_CFG20_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,20)
  #define DMA1_CTLSTAT20                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,20)
  #define DMA1_CTLSTAT20_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,20)
  #define DMA1_XFERCFG20                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,20)
  #define DMA1_XFERCFG20_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,20)
  #define DMA1_CFG21                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,21)
  #define DMA1_CFG21_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,21)
  #define DMA1_CTLSTAT21                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,21)
  #define DMA1_CTLSTAT21_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,21)
  #define DMA1_XFERCFG21                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,21)
  #define DMA1_XFERCFG21_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,21)
  #define DMA1_CFG22                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,22)
  #define DMA1_CFG22_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,22)
  #define DMA1_CTLSTAT22                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,22)
  #define DMA1_CTLSTAT22_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,22)
  #define DMA1_XFERCFG22                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,22)
  #define DMA1_XFERCFG22_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,22)
  #define DMA1_CFG23                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,23)
  #define DMA1_CFG23_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,23)
  #define DMA1_CTLSTAT23                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,23)
  #define DMA1_CTLSTAT23_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,23)
  #define DMA1_XFERCFG23                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,23)
  #define DMA1_XFERCFG23_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,23)
  #define DMA1_CFG24                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,24)
  #define DMA1_CFG24_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,24)
  #define DMA1_CTLSTAT24                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,24)
  #define DMA1_CTLSTAT24_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,24)
  #define DMA1_XFERCFG24                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,24)
  #define DMA1_XFERCFG24_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,24)
  #define DMA1_CFG25                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,25)
  #define DMA1_CFG25_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,25)
  #define DMA1_CTLSTAT25                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,25)
  #define DMA1_CTLSTAT25_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,25)
  #define DMA1_XFERCFG25                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,25)
  #define DMA1_XFERCFG25_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,25)
  #define DMA1_CFG26                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,26)
  #define DMA1_CFG26_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,26)
  #define DMA1_CTLSTAT26                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,26)
  #define DMA1_CTLSTAT26_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,26)
  #define DMA1_XFERCFG26                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,26)
  #define DMA1_XFERCFG26_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,26)
  #define DMA1_CFG27                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,27)
  #define DMA1_CFG27_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,27)
  #define DMA1_CTLSTAT27                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,27)
  #define DMA1_CTLSTAT27_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,27)
  #define DMA1_XFERCFG27                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,27)
  #define DMA1_XFERCFG27_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,27)
  #define DMA1_CFG28                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,28)
  #define DMA1_CFG28_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,28)
  #define DMA1_CTLSTAT28                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,28)
  #define DMA1_CTLSTAT28_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,28)
  #define DMA1_XFERCFG28                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,28)
  #define DMA1_XFERCFG28_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,28)
  #define DMA1_CFG29                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,29)
  #define DMA1_CFG29_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,29)
  #define DMA1_CTLSTAT29                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,29)
  #define DMA1_CTLSTAT29_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,29)
  #define DMA1_XFERCFG29                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,29)
  #define DMA1_XFERCFG29_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,29)
  #define DMA1_CFG30                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,30)
  #define DMA1_CFG30_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,30)
  #define DMA1_CTLSTAT30                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,30)
  #define DMA1_CTLSTAT30_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,30)
  #define DMA1_XFERCFG30                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,30)
  #define DMA1_XFERCFG30_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,30)
  #define DMA1_CFG31                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,31)
  #define DMA1_CFG31_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,31)
  #define DMA1_CTLSTAT31                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,31)
  #define DMA1_CTLSTAT31_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,31)
  #define DMA1_XFERCFG31                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,31)
  #define DMA1_XFERCFG31_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,31)
  #define DMA1_CFG32                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,32)
  #define DMA1_CFG32_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,32)
  #define DMA1_CTLSTAT32                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,32)
  #define DMA1_CTLSTAT32_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,32)
  #define DMA1_XFERCFG32                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,32)
  #define DMA1_XFERCFG32_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,32)
  #define DMA1_CFG33                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,33)
  #define DMA1_CFG33_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,33)
  #define DMA1_CTLSTAT33                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,33)
  #define DMA1_CTLSTAT33_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,33)
  #define DMA1_XFERCFG33                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,33)
  #define DMA1_XFERCFG33_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,33)
  #define DMA1_CFG34                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,34)
  #define DMA1_CFG34_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,34)
  #define DMA1_CTLSTAT34                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,34)
  #define DMA1_CTLSTAT34_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,34)
  #define DMA1_XFERCFG34                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,34)
  #define DMA1_XFERCFG34_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,34)
  #define DMA1_CFG35                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,35)
  #define DMA1_CFG35_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,35)
  #define DMA1_CTLSTAT35                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,35)
  #define DMA1_CTLSTAT35_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,35)
  #define DMA1_XFERCFG35                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,35)
  #define DMA1_XFERCFG35_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,35)
  #define DMA1_CFG36                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,36)
  #define DMA1_CFG36_NS                            DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,36)
  #define DMA1_CTLSTAT36                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,36)
  #define DMA1_CTLSTAT36_NS                        DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,36)
  #define DMA1_XFERCFG36                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,36)
  #define DMA1_XFERCFG36_NS                        DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,36)
#else
  /* DMA0 */
  #define DMA0_CTRL                                DMA_CTRL_REG(DMA0_BASE_PTR)
  #define DMA0_INTSTAT                             DMA_INTSTAT_REG(DMA0_BASE_PTR)
  #define DMA0_SRAMBASE                            DMA_SRAMBASE_REG(DMA0_BASE_PTR)
  #define DMA0_ENABLESET0                          DMA_COMMON_ENABLESET_REG(DMA0_BASE_PTR,0)
  #define DMA0_ENABLESET1                          DMA_COMMON_ENABLESET1_REG(DMA0_BASE_PTR,0)
  #define DMA0_ENABLECLR0                          DMA_COMMON_ENABLECLR_REG(DMA0_BASE_PTR,0)
  #define DMA0_ENABLECLR1                          DMA_COMMON_ENABLECLR1_REG(DMA0_BASE_PTR,0)
  #define DMA0_ACTIVE0                             DMA_COMMON_ACTIVE_REG(DMA0_BASE_PTR,0)
  #define DMA0_ACTIVE1                             DMA_COMMON_ACTIVE1_REG(DMA0_BASE_PTR,0)
  #define DMA0_BUSY0                               DMA_COMMON_BUSY_REG(DMA0_BASE_PTR,0)
  #define DMA0_BUSY1                               DMA_COMMON_BUSY1_REG(DMA0_BASE_PTR,0)
  #define DMA0_ERRINT0                             DMA_COMMON_ERRINT_REG(DMA0_BASE_PTR,0)
  #define DMA0_ERRINT1                             DMA_COMMON_ERRINT1_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTENSET0                           DMA_COMMON_INTENSET_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTENSET1                           DMA_COMMON_INTENSET1_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTENCLR0                           DMA_COMMON_INTENCLR_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTENCLR1                           DMA_COMMON_INTENCLR1_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTA0                               DMA_COMMON_INTA_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTA1                               DMA_COMMON_INTA1_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTB0                               DMA_COMMON_INTB_REG(DMA0_BASE_PTR,0)
  #define DMA0_INTB1                               DMA_COMMON_INTB1_REG(DMA0_BASE_PTR,0)
  #define DMA0_SETVALID0                           DMA_COMMON_SETVALID_REG(DMA0_BASE_PTR,0)
  #define DMA0_SETVALID1                           DMA_COMMON_SETVALID1_REG(DMA0_BASE_PTR,0)
  #define DMA0_SETTRIG0                            DMA_COMMON_SETTRIG_REG(DMA0_BASE_PTR,0)
  #define DMA0_SETTRIG1                            DMA_COMMON_SETTRIG1_REG(DMA0_BASE_PTR,0)
  #define DMA0_ABORT0                              DMA_COMMON_ABORT_REG(DMA0_BASE_PTR,0)
  #define DMA0_ABORT1                              DMA_COMMON_ABORT1_REG(DMA0_BASE_PTR,0)
  #define DMA0_CFG0                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,0)
  #define DMA0_CTLSTAT0                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,0)
  #define DMA0_XFERCFG0                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,0)
  #define DMA0_CFG1                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,1)
  #define DMA0_CTLSTAT1                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,1)
  #define DMA0_XFERCFG1                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,1)
  #define DMA0_CFG2                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,2)
  #define DMA0_CTLSTAT2                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,2)
  #define DMA0_XFERCFG2                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,2)
  #define DMA0_CFG3                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,3)
  #define DMA0_CTLSTAT3                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,3)
  #define DMA0_XFERCFG3                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,3)
  #define DMA0_CFG4                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,4)
  #define DMA0_CTLSTAT4                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,4)
  #define DMA0_XFERCFG4                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,4)
  #define DMA0_CFG5                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,5)
  #define DMA0_CTLSTAT5                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,5)
  #define DMA0_XFERCFG5                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,5)
  #define DMA0_CFG6                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,6)
  #define DMA0_CTLSTAT6                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,6)
  #define DMA0_XFERCFG6                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,6)
  #define DMA0_CFG7                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,7)
  #define DMA0_CTLSTAT7                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,7)
  #define DMA0_XFERCFG7                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,7)
  #define DMA0_CFG8                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,8)
  #define DMA0_CTLSTAT8                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,8)
  #define DMA0_XFERCFG8                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,8)
  #define DMA0_CFG9                                DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,9)
  #define DMA0_CTLSTAT9                            DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,9)
  #define DMA0_XFERCFG9                            DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,9)
  #define DMA0_CFG10                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,10)
  #define DMA0_CTLSTAT10                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,10)
  #define DMA0_XFERCFG10                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,10)
  #define DMA0_CFG11                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,11)
  #define DMA0_CTLSTAT11                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,11)
  #define DMA0_XFERCFG11                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,11)
  #define DMA0_CFG12                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,12)
  #define DMA0_CTLSTAT12                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,12)
  #define DMA0_XFERCFG12                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,12)
  #define DMA0_CFG13                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,13)
  #define DMA0_CTLSTAT13                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,13)
  #define DMA0_XFERCFG13                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,13)
  #define DMA0_CFG14                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,14)
  #define DMA0_CTLSTAT14                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,14)
  #define DMA0_XFERCFG14                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,14)
  #define DMA0_CFG15                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,15)
  #define DMA0_CTLSTAT15                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,15)
  #define DMA0_XFERCFG15                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,15)
  #define DMA0_CFG16                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,16)
  #define DMA0_CTLSTAT16                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,16)
  #define DMA0_XFERCFG16                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,16)
  #define DMA0_CFG17                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,17)
  #define DMA0_CTLSTAT17                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,17)
  #define DMA0_XFERCFG17                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,17)
  #define DMA0_CFG18                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,18)
  #define DMA0_CTLSTAT18                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,18)
  #define DMA0_XFERCFG18                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,18)
  #define DMA0_CFG19                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,19)
  #define DMA0_CTLSTAT19                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,19)
  #define DMA0_XFERCFG19                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,19)
  #define DMA0_CFG20                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,20)
  #define DMA0_CTLSTAT20                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,20)
  #define DMA0_XFERCFG20                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,20)
  #define DMA0_CFG21                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,21)
  #define DMA0_CTLSTAT21                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,21)
  #define DMA0_XFERCFG21                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,21)
  #define DMA0_CFG22                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,22)
  #define DMA0_CTLSTAT22                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,22)
  #define DMA0_XFERCFG22                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,22)
  #define DMA0_CFG23                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,23)
  #define DMA0_CTLSTAT23                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,23)
  #define DMA0_XFERCFG23                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,23)
  #define DMA0_CFG24                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,24)
  #define DMA0_CTLSTAT24                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,24)
  #define DMA0_XFERCFG24                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,24)
  #define DMA0_CFG25                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,25)
  #define DMA0_CTLSTAT25                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,25)
  #define DMA0_XFERCFG25                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,25)
  #define DMA0_CFG26                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,26)
  #define DMA0_CTLSTAT26                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,26)
  #define DMA0_XFERCFG26                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,26)
  #define DMA0_CFG27                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,27)
  #define DMA0_CTLSTAT27                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,27)
  #define DMA0_XFERCFG27                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,27)
  #define DMA0_CFG28                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,28)
  #define DMA0_CTLSTAT28                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,28)
  #define DMA0_XFERCFG28                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,28)
  #define DMA0_CFG29                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,29)
  #define DMA0_CTLSTAT29                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,29)
  #define DMA0_XFERCFG29                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,29)
  #define DMA0_CFG30                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,30)
  #define DMA0_CTLSTAT30                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,30)
  #define DMA0_XFERCFG30                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,30)
  #define DMA0_CFG31                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,31)
  #define DMA0_CTLSTAT31                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,31)
  #define DMA0_XFERCFG31                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,31)
  #define DMA0_CFG32                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,32)
  #define DMA0_CTLSTAT32                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,32)
  #define DMA0_XFERCFG32                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,32)
  #define DMA0_CFG33                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,33)
  #define DMA0_CTLSTAT33                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,33)
  #define DMA0_XFERCFG33                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,33)
  #define DMA0_CFG34                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,34)
  #define DMA0_CTLSTAT34                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,34)
  #define DMA0_XFERCFG34                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,34)
  #define DMA0_CFG35                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,35)
  #define DMA0_CTLSTAT35                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,35)
  #define DMA0_XFERCFG35                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,35)
  #define DMA0_CFG36                               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,36)
  #define DMA0_CTLSTAT36                           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,36)
  #define DMA0_XFERCFG36                           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,36)
  /* DMA1 */
  #define DMA1_CTRL                                DMA_CTRL_REG(DMA1_BASE_PTR)
  #define DMA1_INTSTAT                             DMA_INTSTAT_REG(DMA1_BASE_PTR)
  #define DMA1_SRAMBASE                            DMA_SRAMBASE_REG(DMA1_BASE_PTR)
  #define DMA1_ENABLESET0                          DMA_COMMON_ENABLESET_REG(DMA1_BASE_PTR,0)
  #define DMA1_ENABLESET1                          DMA_COMMON_ENABLESET1_REG(DMA1_BASE_PTR,0)
  #define DMA1_ENABLECLR0                          DMA_COMMON_ENABLECLR_REG(DMA1_BASE_PTR,0)
  #define DMA1_ENABLECLR1                          DMA_COMMON_ENABLECLR1_REG(DMA1_BASE_PTR,0)
  #define DMA1_ACTIVE0                             DMA_COMMON_ACTIVE_REG(DMA1_BASE_PTR,0)
  #define DMA1_ACTIVE1                             DMA_COMMON_ACTIVE1_REG(DMA1_BASE_PTR,0)
  #define DMA1_BUSY0                               DMA_COMMON_BUSY_REG(DMA1_BASE_PTR,0)
  #define DMA1_BUSY1                               DMA_COMMON_BUSY1_REG(DMA1_BASE_PTR,0)
  #define DMA1_ERRINT0                             DMA_COMMON_ERRINT_REG(DMA1_BASE_PTR,0)
  #define DMA1_ERRINT1                             DMA_COMMON_ERRINT1_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTENSET0                           DMA_COMMON_INTENSET_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTENSET1                           DMA_COMMON_INTENSET1_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTENCLR0                           DMA_COMMON_INTENCLR_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTENCLR1                           DMA_COMMON_INTENCLR1_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTA0                               DMA_COMMON_INTA_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTA1                               DMA_COMMON_INTA1_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTB0                               DMA_COMMON_INTB_REG(DMA1_BASE_PTR,0)
  #define DMA1_INTB1                               DMA_COMMON_INTB1_REG(DMA1_BASE_PTR,0)
  #define DMA1_SETVALID0                           DMA_COMMON_SETVALID_REG(DMA1_BASE_PTR,0)
  #define DMA1_SETVALID1                           DMA_COMMON_SETVALID1_REG(DMA1_BASE_PTR,0)
  #define DMA1_SETTRIG0                            DMA_COMMON_SETTRIG_REG(DMA1_BASE_PTR,0)
  #define DMA1_SETTRIG1                            DMA_COMMON_SETTRIG1_REG(DMA1_BASE_PTR,0)
  #define DMA1_ABORT0                              DMA_COMMON_ABORT_REG(DMA1_BASE_PTR,0)
  #define DMA1_ABORT1                              DMA_COMMON_ABORT1_REG(DMA1_BASE_PTR,0)
  #define DMA1_CFG0                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,0)
  #define DMA1_CTLSTAT0                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,0)
  #define DMA1_XFERCFG0                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,0)
  #define DMA1_CFG1                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,1)
  #define DMA1_CTLSTAT1                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,1)
  #define DMA1_XFERCFG1                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,1)
  #define DMA1_CFG2                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,2)
  #define DMA1_CTLSTAT2                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,2)
  #define DMA1_XFERCFG2                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,2)
  #define DMA1_CFG3                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,3)
  #define DMA1_CTLSTAT3                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,3)
  #define DMA1_XFERCFG3                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,3)
  #define DMA1_CFG4                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,4)
  #define DMA1_CTLSTAT4                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,4)
  #define DMA1_XFERCFG4                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,4)
  #define DMA1_CFG5                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,5)
  #define DMA1_CTLSTAT5                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,5)
  #define DMA1_XFERCFG5                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,5)
  #define DMA1_CFG6                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,6)
  #define DMA1_CTLSTAT6                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,6)
  #define DMA1_XFERCFG6                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,6)
  #define DMA1_CFG7                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,7)
  #define DMA1_CTLSTAT7                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,7)
  #define DMA1_XFERCFG7                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,7)
  #define DMA1_CFG8                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,8)
  #define DMA1_CTLSTAT8                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,8)
  #define DMA1_XFERCFG8                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,8)
  #define DMA1_CFG9                                DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,9)
  #define DMA1_CTLSTAT9                            DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,9)
  #define DMA1_XFERCFG9                            DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,9)
  #define DMA1_CFG10                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,10)
  #define DMA1_CTLSTAT10                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,10)
  #define DMA1_XFERCFG10                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,10)
  #define DMA1_CFG11                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,11)
  #define DMA1_CTLSTAT11                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,11)
  #define DMA1_XFERCFG11                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,11)
  #define DMA1_CFG12                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,12)
  #define DMA1_CTLSTAT12                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,12)
  #define DMA1_XFERCFG12                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,12)
  #define DMA1_CFG13                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,13)
  #define DMA1_CTLSTAT13                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,13)
  #define DMA1_XFERCFG13                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,13)
  #define DMA1_CFG14                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,14)
  #define DMA1_CTLSTAT14                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,14)
  #define DMA1_XFERCFG14                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,14)
  #define DMA1_CFG15                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,15)
  #define DMA1_CTLSTAT15                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,15)
  #define DMA1_XFERCFG15                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,15)
  #define DMA1_CFG16                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,16)
  #define DMA1_CTLSTAT16                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,16)
  #define DMA1_XFERCFG16                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,16)
  #define DMA1_CFG17                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,17)
  #define DMA1_CTLSTAT17                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,17)
  #define DMA1_XFERCFG17                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,17)
  #define DMA1_CFG18                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,18)
  #define DMA1_CTLSTAT18                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,18)
  #define DMA1_XFERCFG18                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,18)
  #define DMA1_CFG19                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,19)
  #define DMA1_CTLSTAT19                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,19)
  #define DMA1_XFERCFG19                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,19)
  #define DMA1_CFG20                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,20)
  #define DMA1_CTLSTAT20                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,20)
  #define DMA1_XFERCFG20                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,20)
  #define DMA1_CFG21                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,21)
  #define DMA1_CTLSTAT21                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,21)
  #define DMA1_XFERCFG21                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,21)
  #define DMA1_CFG22                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,22)
  #define DMA1_CTLSTAT22                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,22)
  #define DMA1_XFERCFG22                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,22)
  #define DMA1_CFG23                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,23)
  #define DMA1_CTLSTAT23                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,23)
  #define DMA1_XFERCFG23                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,23)
  #define DMA1_CFG24                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,24)
  #define DMA1_CTLSTAT24                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,24)
  #define DMA1_XFERCFG24                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,24)
  #define DMA1_CFG25                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,25)
  #define DMA1_CTLSTAT25                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,25)
  #define DMA1_XFERCFG25                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,25)
  #define DMA1_CFG26                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,26)
  #define DMA1_CTLSTAT26                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,26)
  #define DMA1_XFERCFG26                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,26)
  #define DMA1_CFG27                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,27)
  #define DMA1_CTLSTAT27                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,27)
  #define DMA1_XFERCFG27                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,27)
  #define DMA1_CFG28                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,28)
  #define DMA1_CTLSTAT28                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,28)
  #define DMA1_XFERCFG28                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,28)
  #define DMA1_CFG29                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,29)
  #define DMA1_CTLSTAT29                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,29)
  #define DMA1_XFERCFG29                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,29)
  #define DMA1_CFG30                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,30)
  #define DMA1_CTLSTAT30                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,30)
  #define DMA1_XFERCFG30                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,30)
  #define DMA1_CFG31                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,31)
  #define DMA1_CTLSTAT31                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,31)
  #define DMA1_XFERCFG31                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,31)
  #define DMA1_CFG32                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,32)
  #define DMA1_CTLSTAT32                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,32)
  #define DMA1_XFERCFG32                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,32)
  #define DMA1_CFG33                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,33)
  #define DMA1_CTLSTAT33                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,33)
  #define DMA1_XFERCFG33                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,33)
  #define DMA1_CFG34                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,34)
  #define DMA1_CTLSTAT34                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,34)
  #define DMA1_XFERCFG34                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,34)
  #define DMA1_CFG35                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,35)
  #define DMA1_CTLSTAT35                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,35)
  #define DMA1_XFERCFG35                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,35)
  #define DMA1_CFG36                               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,36)
  #define DMA1_CTLSTAT36                           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,36)
  #define DMA1_XFERCFG36                           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,36)
#endif

/* DMA - Register array accessors */
#define DMA0_CHANNEL_CFG(index)                  DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,index)
#define DMA0_CHANNEL_CFG_NS(index)               DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR_NS,index)
#define DMA0_CHANNEL_CFG(index)                  DMA_CHANNEL_CFG_REG(DMA0_BASE_PTR,index)
#define DMA1_CHANNEL_CFG(index)                  DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,index)
#define DMA1_CHANNEL_CFG_NS(index)               DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR_NS,index)
#define DMA1_CHANNEL_CFG(index)                  DMA_CHANNEL_CFG_REG(DMA1_BASE_PTR,index)
#define DMA0_CHANNEL_CTLSTAT(index)              DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,index)
#define DMA0_CHANNEL_CTLSTAT_NS(index)           DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR_NS,index)
#define DMA0_CHANNEL_CTLSTAT(index)              DMA_CHANNEL_CTLSTAT_REG(DMA0_BASE_PTR,index)
#define DMA1_CHANNEL_CTLSTAT(index)              DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,index)
#define DMA1_CHANNEL_CTLSTAT_NS(index)           DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR_NS,index)
#define DMA1_CHANNEL_CTLSTAT(index)              DMA_CHANNEL_CTLSTAT_REG(DMA1_BASE_PTR,index)
#define DMA0_CHANNEL_XFERCFG(index)              DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,index)
#define DMA0_CHANNEL_XFERCFG_NS(index)           DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR_NS,index)
#define DMA0_CHANNEL_XFERCFG(index)              DMA_CHANNEL_XFERCFG_REG(DMA0_BASE_PTR,index)
#define DMA1_CHANNEL_XFERCFG(index)              DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,index)
#define DMA1_CHANNEL_XFERCFG_NS(index)           DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR_NS,index)
#define DMA1_CHANNEL_XFERCFG(index)              DMA_CHANNEL_XFERCFG_REG(DMA1_BASE_PTR,index)

/*!
 * @}
 */ /* end of group DMA_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DMA_Peripheral */


/* ----------------------------------------------------------------------------
   -- DMIC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMIC_Peripheral DMIC
 * @{
 */

/** DMIC - Peripheral register structure */
typedef struct DMIC_MemMap {
  struct {                                         /* offset: 0x0, array step: 0x100 */
    uint32_t OSR;                                    /**< Oversample Rate, array offset: 0x0, array step: 0x100 */
    uint32_t DIVHFCLK;                               /**< DMIC Clock, array offset: 0x4, array step: 0x100 */
    uint32_t PREAC2FSCOEF;                           /**< Compensation Filter for 2 FS, array offset: 0x8, array step: 0x100 */
    uint32_t PREAC4FSCOEF;                           /**< Compensation Filter for 4 FS, array offset: 0xC, array step: 0x100 */
    uint32_t GAINSHIFT;                              /**< Decimator Gain Shift, array offset: 0x10, array step: 0x100 */
    uint8_t RESERVED_0[108];
    uint32_t FIFO_CTRL;                              /**< FIFO Control, array offset: 0x80, array step: 0x100 */
    uint32_t FIFO_STATUS;                            /**< FIFO Status, array offset: 0x84, array step: 0x100 */
    uint32_t FIFO_DATA;                              /**< FIFO Data, array offset: 0x88, array step: 0x100 */
    uint32_t PHY_CTRL;                               /**< Physical Control, array offset: 0x8C, array step: 0x100 */
    uint32_t DC_CTRL;                                /**< DC Filter Control, array offset: 0x90, array step: 0x100 */
    uint8_t RESERVED_1[108];
  } CHANNEL[8];
  uint8_t RESERVED_0[1792];
  uint32_t CHANEN;                                 /**< Channel Enable, offset: 0xF00 */
  uint8_t RESERVED_1[12];
  uint32_t USE2FS;                                 /**< Use 2 FS register, offset: 0xF10 */
  uint32_t GLOBAL_SYCN_EN;                         /**< Global Channel Synchronization Enable, offset: 0xF14 */
  uint32_t GLOBAL_COUNT_VAL;                       /**< Global channel synchronization counter value, offset: 0xF18 */
  uint32_t DECRESET;                               /**< DMIC decimator reset, offset: 0xF1C */
  uint8_t RESERVED_2[96];
  uint32_t HWVADGAIN;                              /**< HWVAD Input Gain, offset: 0xF80 */
  uint32_t HWVADHPFS;                              /**< HWVAD Filter Control, offset: 0xF84 */
  uint32_t HWVADST10;                              /**< HWVAD Control, offset: 0xF88 */
  uint32_t HWVADRSTT;                              /**< HWVAD Filter Reset, offset: 0xF8C */
  uint32_t HWVADTHGN;                              /**< HWVAD Noise Estimator Gain, offset: 0xF90 */
  uint32_t HWVADTHGS;                              /**< HWVAD Signal Estimator Gain, offset: 0xF94 */
  uint32_t HWVADLOWZ;                              /**< HWVAD Noise Envelope Estimator, offset: 0xF98 */
} volatile *DMIC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DMIC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMIC_Register_Accessor_Macros DMIC - Register accessor macros
 * @{
 */


/* DMIC - Register accessors */
#define DMIC_CHANNEL_OSR_REG(base,index)         ((base)->CHANNEL[index].OSR)
#define DMIC_CHANNEL_DIVHFCLK_REG(base,index)    ((base)->CHANNEL[index].DIVHFCLK)
#define DMIC_CHANNEL_PREAC2FSCOEF_REG(base,index) ((base)->CHANNEL[index].PREAC2FSCOEF)
#define DMIC_CHANNEL_PREAC4FSCOEF_REG(base,index) ((base)->CHANNEL[index].PREAC4FSCOEF)
#define DMIC_CHANNEL_GAINSHIFT_REG(base,index)   ((base)->CHANNEL[index].GAINSHIFT)
#define DMIC_CHANNEL_FIFO_CTRL_REG(base,index)   ((base)->CHANNEL[index].FIFO_CTRL)
#define DMIC_CHANNEL_FIFO_STATUS_REG(base,index) ((base)->CHANNEL[index].FIFO_STATUS)
#define DMIC_CHANNEL_FIFO_DATA_REG(base,index)   ((base)->CHANNEL[index].FIFO_DATA)
#define DMIC_CHANNEL_PHY_CTRL_REG(base,index)    ((base)->CHANNEL[index].PHY_CTRL)
#define DMIC_CHANNEL_DC_CTRL_REG(base,index)     ((base)->CHANNEL[index].DC_CTRL)
#define DMIC_CHANEN_REG(base)                    ((base)->CHANEN)
#define DMIC_USE2FS_REG(base)                    ((base)->USE2FS)
#define DMIC_GLOBAL_SYCN_EN_REG(base)            ((base)->GLOBAL_SYCN_EN)
#define DMIC_GLOBAL_COUNT_VAL_REG(base)          ((base)->GLOBAL_COUNT_VAL)
#define DMIC_DECRESET_REG(base)                  ((base)->DECRESET)
#define DMIC_HWVADGAIN_REG(base)                 ((base)->HWVADGAIN)
#define DMIC_HWVADHPFS_REG(base)                 ((base)->HWVADHPFS)
#define DMIC_HWVADST10_REG(base)                 ((base)->HWVADST10)
#define DMIC_HWVADRSTT_REG(base)                 ((base)->HWVADRSTT)
#define DMIC_HWVADTHGN_REG(base)                 ((base)->HWVADTHGN)
#define DMIC_HWVADTHGS_REG(base)                 ((base)->HWVADTHGS)
#define DMIC_HWVADLOWZ_REG(base)                 ((base)->HWVADLOWZ)

/*!
 * @}
 */ /* end of group DMIC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DMIC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMIC_Register_Masks DMIC Register Masks
 * @{
 */

/*! @name CHANNEL_OSR - Oversample Rate */
/*! @{ */
#define DMIC_CHANNEL_OSR_OSR_MASK                (0xFFU)
#define DMIC_CHANNEL_OSR_OSR_SHIFT               (0U)
/*! OSR - Oversample Rate
 */
#define DMIC_CHANNEL_OSR_OSR(x)                  (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_OSR_OSR_SHIFT)) & DMIC_CHANNEL_OSR_OSR_MASK)
/*! @} */

/* The count of DMIC_CHANNEL_OSR */
#define DMIC_CHANNEL_OSR_COUNT                   (8U)

/*! @name CHANNEL_DIVHFCLK - DMIC Clock */
/*! @{ */
#define DMIC_CHANNEL_DIVHFCLK_PDMDIV_MASK        (0xFU)
#define DMIC_CHANNEL_DIVHFCLK_PDMDIV_SHIFT       (0U)
/*! PDMDIV - PDM Clock Divider Value
 *  0b0000..Divide by 1
 *  0b0001..Divide by 2
 *  0b0010..Divide by 3
 *  0b0011..Divide by 4
 *  0b0100..Divide by 6
 *  0b0101..Divide by 8
 *  0b0110..Divide by 12
 *  0b0111..Divide by 16
 *  0b1000..Divide by 24
 *  0b1001..Divide by 32
 *  0b1010..Divide by 48
 *  0b1011..Divide by 64
 *  0b1100..Divide by 96
 *  0b1101..Divide by 128
 *  0b1110-0b1111..Reserved
 */
#define DMIC_CHANNEL_DIVHFCLK_PDMDIV(x)          (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_DIVHFCLK_PDMDIV_SHIFT)) & DMIC_CHANNEL_DIVHFCLK_PDMDIV_MASK)
/*! @} */

/* The count of DMIC_CHANNEL_DIVHFCLK */
#define DMIC_CHANNEL_DIVHFCLK_COUNT              (8U)

/*! @name CHANNEL_PREAC2FSCOEF - Compensation Filter for 2 FS */
/*! @{ */
#define DMIC_CHANNEL_PREAC2FSCOEF_COMP_MASK      (0x3U)
#define DMIC_CHANNEL_PREAC2FSCOEF_COMP_SHIFT     (0U)
/*! COMP - Compensation value
 *  0b00..Compensation = 0. This is the recommended setting.
 *  0b01..Compensation = -0.16
 *  0b10..Compensation = -0.15
 *  0b11..Compensation = -0.13
 */
#define DMIC_CHANNEL_PREAC2FSCOEF_COMP(x)        (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_PREAC2FSCOEF_COMP_SHIFT)) & DMIC_CHANNEL_PREAC2FSCOEF_COMP_MASK)
/*! @} */

/* The count of DMIC_CHANNEL_PREAC2FSCOEF */
#define DMIC_CHANNEL_PREAC2FSCOEF_COUNT          (8U)

/*! @name CHANNEL_PREAC4FSCOEF - Compensation Filter for 4 FS */
/*! @{ */
#define DMIC_CHANNEL_PREAC4FSCOEF_COMP_MASK      (0x3U)
#define DMIC_CHANNEL_PREAC4FSCOEF_COMP_SHIFT     (0U)
/*! COMP - Compensation value
 *  0b00..Compensation = 0. This is the recommended setting.
 *  0b01..Compensation = -0.16
 *  0b10..Compensation = -0.15
 *  0b11..Compensation = -0.13
 */
#define DMIC_CHANNEL_PREAC4FSCOEF_COMP(x)        (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_PREAC4FSCOEF_COMP_SHIFT)) & DMIC_CHANNEL_PREAC4FSCOEF_COMP_MASK)
/*! @} */

/* The count of DMIC_CHANNEL_PREAC4FSCOEF */
#define DMIC_CHANNEL_PREAC4FSCOEF_COUNT          (8U)

/*! @name CHANNEL_GAINSHIFT - Decimator Gain Shift */
/*! @{ */
#define DMIC_CHANNEL_GAINSHIFT_GAIN_MASK         (0x3FU)
#define DMIC_CHANNEL_GAINSHIFT_GAIN_SHIFT        (0U)
/*! GAIN - Gain
 */
#define DMIC_CHANNEL_GAINSHIFT_GAIN(x)           (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_GAINSHIFT_GAIN_SHIFT)) & DMIC_CHANNEL_GAINSHIFT_GAIN_MASK)
/*! @} */

/* The count of DMIC_CHANNEL_GAINSHIFT */
#define DMIC_CHANNEL_GAINSHIFT_COUNT             (8U)

/*! @name CHANNEL_FIFO_CTRL - FIFO Control */
/*! @{ */
#define DMIC_CHANNEL_FIFO_CTRL_ENABLE_MASK       (0x1U)
#define DMIC_CHANNEL_FIFO_CTRL_ENABLE_SHIFT      (0U)
#define DMIC_CHANNEL_FIFO_CTRL_RESETN_MASK       (0x2U)
#define DMIC_CHANNEL_FIFO_CTRL_RESETN_SHIFT      (1U)
#define DMIC_CHANNEL_FIFO_CTRL_INTEN_MASK        (0x4U)
#define DMIC_CHANNEL_FIFO_CTRL_INTEN_SHIFT       (2U)
#define DMIC_CHANNEL_FIFO_CTRL_DMAEN_MASK        (0x8U)
#define DMIC_CHANNEL_FIFO_CTRL_DMAEN_SHIFT       (3U)
#define DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_MASK      (0x1F0000U)
#define DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_SHIFT     (16U)
/*! TRIGLVL - FIFO Trigger Level for Interrupt
 *  0b00000..Trigger when the FIFO has received one entry (is no longer empty).
 *  0b00001..Trigger when the FIFO has received two entries.
 *  0b01110..Trigger when the FIFO has received 15 entries.
 *  0b01111..Trigger when the FIFO has received 16 entries (has become full).
 */
#define DMIC_CHANNEL_FIFO_CTRL_TRIGLVL(x)        (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_SHIFT)) & DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_MASK)
/*! @} */

/* The count of DMIC_CHANNEL_FIFO_CTRL */
#define DMIC_CHANNEL_FIFO_CTRL_COUNT             (8U)

/*! @name CHANNEL_FIFO_STATUS - FIFO Status */
/*! @{ */
#define DMIC_CHANNEL_FIFO_STATUS_INT_MASK        (0x1U)
#define DMIC_CHANNEL_FIFO_STATUS_INT_SHIFT       (0U)
#define DMIC_CHANNEL_FIFO_STATUS_OVERRUN_MASK    (0x2U)
#define DMIC_CHANNEL_FIFO_STATUS_OVERRUN_SHIFT   (1U)
#define DMIC_CHANNEL_FIFO_STATUS_UNDERRUN_MASK   (0x4U)
#define DMIC_CHANNEL_FIFO_STATUS_UNDERRUN_SHIFT  (2U)
/*! @} */

/* The count of DMIC_CHANNEL_FIFO_STATUS */
#define DMIC_CHANNEL_FIFO_STATUS_COUNT           (8U)

/*! @name CHANNEL_FIFO_DATA - FIFO Data */
/*! @{ */
#define DMIC_CHANNEL_FIFO_DATA_DATA_MASK         (0xFFFFFFU)
#define DMIC_CHANNEL_FIFO_DATA_DATA_SHIFT        (0U)
/*! DATA - PCM Data
 */
#define DMIC_CHANNEL_FIFO_DATA_DATA(x)           (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_DATA_DATA_SHIFT)) & DMIC_CHANNEL_FIFO_DATA_DATA_MASK)
/*! @} */

/* The count of DMIC_CHANNEL_FIFO_DATA */
#define DMIC_CHANNEL_FIFO_DATA_COUNT             (8U)

/*! @name CHANNEL_PHY_CTRL - Physical Control */
/*! @{ */
#define DMIC_CHANNEL_PHY_CTRL_PHY_FALL_MASK      (0x1U)
#define DMIC_CHANNEL_PHY_CTRL_PHY_FALL_SHIFT     (0U)
#define DMIC_CHANNEL_PHY_CTRL_PHY_HALF_MASK      (0x2U)
#define DMIC_CHANNEL_PHY_CTRL_PHY_HALF_SHIFT     (1U)
/*! @} */

/* The count of DMIC_CHANNEL_PHY_CTRL */
#define DMIC_CHANNEL_PHY_CTRL_COUNT              (8U)

/*! @name CHANNEL_DC_CTRL - DC Filter Control */
/*! @{ */
#define DMIC_CHANNEL_DC_CTRL_DCPOLE_MASK         (0x3U)
#define DMIC_CHANNEL_DC_CTRL_DCPOLE_SHIFT        (0U)
/*! DCPOLE - DC Block Filter
 *  0b00..Flat Response, no filter
 *  0b01..155 Hz
 *  0b10..78 Hz
 *  0b11..39 Hz
 */
#define DMIC_CHANNEL_DC_CTRL_DCPOLE(x)           (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_DC_CTRL_DCPOLE_SHIFT)) & DMIC_CHANNEL_DC_CTRL_DCPOLE_MASK)
#define DMIC_CHANNEL_DC_CTRL_DCGAIN_MASK         (0xF0U)
#define DMIC_CHANNEL_DC_CTRL_DCGAIN_SHIFT        (4U)
/*! DCGAIN - DC Gain
 */
#define DMIC_CHANNEL_DC_CTRL_DCGAIN(x)           (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_DC_CTRL_DCGAIN_SHIFT)) & DMIC_CHANNEL_DC_CTRL_DCGAIN_MASK)
#define DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT_MASK (0x100U)
#define DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT_SHIFT (8U)
#define DMIC_CHANNEL_DC_CTRL_SIGNEXTEND_MASK     (0x200U)
#define DMIC_CHANNEL_DC_CTRL_SIGNEXTEND_SHIFT    (9U)
/*! @} */

/* The count of DMIC_CHANNEL_DC_CTRL */
#define DMIC_CHANNEL_DC_CTRL_COUNT               (8U)

/*! @name CHANEN - Channel Enable */
/*! @{ */
#define DMIC_CHANEN_EN_CH0_MASK                  (0x1U)
#define DMIC_CHANEN_EN_CH0_SHIFT                 (0U)
#define DMIC_CHANEN_EN_CH1_MASK                  (0x2U)
#define DMIC_CHANEN_EN_CH1_SHIFT                 (1U)
#define DMIC_CHANEN_EN_CH2_MASK                  (0x4U)
#define DMIC_CHANEN_EN_CH2_SHIFT                 (2U)
#define DMIC_CHANEN_EN_CH3_MASK                  (0x8U)
#define DMIC_CHANEN_EN_CH3_SHIFT                 (3U)
#define DMIC_CHANEN_EN_CH4_MASK                  (0x10U)
#define DMIC_CHANEN_EN_CH4_SHIFT                 (4U)
#define DMIC_CHANEN_EN_CH5_MASK                  (0x20U)
#define DMIC_CHANEN_EN_CH5_SHIFT                 (5U)
#define DMIC_CHANEN_EN_CH6_MASK                  (0x40U)
#define DMIC_CHANEN_EN_CH6_SHIFT                 (6U)
#define DMIC_CHANEN_EN_CH7_MASK                  (0x80U)
#define DMIC_CHANEN_EN_CH7_SHIFT                 (7U)
/*! @} */

/*! @name USE2FS - Use 2 FS register */
/*! @{ */
#define DMIC_USE2FS_USE2FS_MASK                  (0x1U)
#define DMIC_USE2FS_USE2FS_SHIFT                 (0U)
/*! @} */

/*! @name GLOBAL_SYCN_EN - Global Channel Synchronization Enable */
/*! @{ */
#define DMIC_GLOBAL_SYCN_EN_CH_SYNC_EN_MASK      (0xFFU)
#define DMIC_GLOBAL_SYCN_EN_CH_SYNC_EN_SHIFT     (0U)
/*! CH_SYNC_EN - Channel synch enable
 */
#define DMIC_GLOBAL_SYCN_EN_CH_SYNC_EN(x)        (((uint32_t)(((uint32_t)(x)) << DMIC_GLOBAL_SYCN_EN_CH_SYNC_EN_SHIFT)) & DMIC_GLOBAL_SYCN_EN_CH_SYNC_EN_MASK)
/*! @} */

/*! @name GLOBAL_COUNT_VAL - Global channel synchronization counter value */
/*! @{ */
#define DMIC_GLOBAL_COUNT_VAL_CCOUNTVAL_MASK     (0xFFFFFFFFU)
#define DMIC_GLOBAL_COUNT_VAL_CCOUNTVAL_SHIFT    (0U)
/*! CCOUNTVAL - Channel Counter Value
 */
#define DMIC_GLOBAL_COUNT_VAL_CCOUNTVAL(x)       (((uint32_t)(((uint32_t)(x)) << DMIC_GLOBAL_COUNT_VAL_CCOUNTVAL_SHIFT)) & DMIC_GLOBAL_COUNT_VAL_CCOUNTVAL_MASK)
/*! @} */

/*! @name DECRESET - DMIC decimator reset */
/*! @{ */
#define DMIC_DECRESET_DECRESET_MASK              (0xFFU)
#define DMIC_DECRESET_DECRESET_SHIFT             (0U)
/*! DECRESET - Decimator reset
 *  0b00000000..Release reset to decimator
 *  0b00000001..Assert reset to decimator
 */
#define DMIC_DECRESET_DECRESET(x)                (((uint32_t)(((uint32_t)(x)) << DMIC_DECRESET_DECRESET_SHIFT)) & DMIC_DECRESET_DECRESET_MASK)
/*! @} */

/*! @name HWVADGAIN - HWVAD Input Gain */
/*! @{ */
#define DMIC_HWVADGAIN_INPUTGAIN_MASK            (0xFU)
#define DMIC_HWVADGAIN_INPUTGAIN_SHIFT           (0U)
/*! INPUTGAIN
 *  0b0000..-10 bits
 *  0b0001..-8 bits
 *  0b0010..-6 bits
 *  0b0011..-4 bits
 *  0b0100..-2 bits
 *  0b0101..0 bits (default)
 *  0b0110..+2 bits
 *  0b0111..+4 bits
 *  0b1000..+6 bits
 *  0b1001..+8 bits
 *  0b1010..+10 bits
 *  0b1011..+12 bits
 *  0b1100..+14 bits
 *  0b1101-0b1111..Reserved
 */
#define DMIC_HWVADGAIN_INPUTGAIN(x)              (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADGAIN_INPUTGAIN_SHIFT)) & DMIC_HWVADGAIN_INPUTGAIN_MASK)
/*! @} */

/*! @name HWVADHPFS - HWVAD Filter Control */
/*! @{ */
#define DMIC_HWVADHPFS_HPFS_MASK                 (0x3U)
#define DMIC_HWVADHPFS_HPFS_SHIFT                (0U)
/*! HPFS - The HPFS field chooses the High Pass filter in first part of HWVAD.
 *  0b00..BYPASS. First filter by-pass.
 *  0b01..HIGH_PASS_1750HZ. High pass filter with -3dB cut-off at 1750 Hz.
 *  0b10..HIGH_PASS_215HZ. High pass filter with -3dB cut-off at 215 Hz.
 *  0b11..Reserved
 */
#define DMIC_HWVADHPFS_HPFS(x)                   (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADHPFS_HPFS_SHIFT)) & DMIC_HWVADHPFS_HPFS_MASK)
/*! @} */

/*! @name HWVADST10 - HWVAD Control */
/*! @{ */
#define DMIC_HWVADST10_ST10_MASK                 (0x1U)
#define DMIC_HWVADST10_ST10_SHIFT                (0U)
/*! @} */

/*! @name HWVADRSTT - HWVAD Filter Reset */
/*! @{ */
#define DMIC_HWVADRSTT_RSST_MASK                 (0x1U)
#define DMIC_HWVADRSTT_RSST_SHIFT                (0U)
/*! @} */

/*! @name HWVADTHGN - HWVAD Noise Estimator Gain */
/*! @{ */
#define DMIC_HWVADTHGN_THGN_MASK                 (0xFU)
#define DMIC_HWVADTHGN_THGN_SHIFT                (0U)
/*! THGN - Gain Factor for Noise Estimator
 */
#define DMIC_HWVADTHGN_THGN(x)                   (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADTHGN_THGN_SHIFT)) & DMIC_HWVADTHGN_THGN_MASK)
/*! @} */

/*! @name HWVADTHGS - HWVAD Signal Estimator Gain */
/*! @{ */
#define DMIC_HWVADTHGS_THGS_MASK                 (0xFU)
#define DMIC_HWVADTHGS_THGS_SHIFT                (0U)
/*! THGS - Signal Gain Factor
 */
#define DMIC_HWVADTHGS_THGS(x)                   (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADTHGS_THGS_SHIFT)) & DMIC_HWVADTHGS_THGS_MASK)
/*! @} */

/*! @name HWVADLOWZ - HWVAD Noise Envelope Estimator */
/*! @{ */
#define DMIC_HWVADLOWZ_LOWZ_MASK                 (0xFFFFU)
#define DMIC_HWVADLOWZ_LOWZ_SHIFT                (0U)
/*! LOWZ - Average Noise-floor Value
 */
#define DMIC_HWVADLOWZ_LOWZ(x)                   (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADLOWZ_LOWZ_SHIFT)) & DMIC_HWVADLOWZ_LOWZ_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group DMIC_Register_Masks */


/* DMIC - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral DMIC0 base pointer */
  #define DMIC0_BASE_PTR                           ((DMIC_MemMapPtr)0x50121000u)
  /** Peripheral DMIC0 base pointer */
  #define DMIC0_BASE_PTR_NS                        ((DMIC_MemMapPtr)0x40121000u)
  /** Array initializer of DMIC peripheral base pointers */
  #define DMIC_BASE_PTRS                           { DMIC0_BASE_PTR }
  /** Array initializer of DMIC peripheral base pointers */
  #define DMIC_BASE_PTRS_NS                        { DMIC0_BASE_PTR_NS }
#else
  /** Peripheral DMIC0 base pointer */
  #define DMIC0_BASE_PTR                           ((DMIC_MemMapPtr)0x40121000u)
  /** Array initializer of DMIC peripheral base pointers */
  #define DMIC_BASE_PTRS                           { DMIC0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- DMIC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMIC_Register_Accessor_Macros DMIC - Register accessor macros
 * @{
 */


/* DMIC - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* DMIC0 */
  #define DMIC0_OSR0                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_OSR0_NS                            DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR_NS,0)
  #define DMIC0_DIVHFCLK0                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_DIVHFCLK0_NS                       DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR_NS,0)
  #define DMIC0_PREAC2FSCOEF0                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_PREAC2FSCOEF0_NS                   DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR_NS,0)
  #define DMIC0_PREAC4FSCOEF0                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_PREAC4FSCOEF0_NS                   DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR_NS,0)
  #define DMIC0_GAINSHIFT0                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_GAINSHIFT0_NS                      DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR_NS,0)
  #define DMIC0_FIFO_CTRL0                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_FIFO_CTRL0_NS                      DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR_NS,0)
  #define DMIC0_FIFO_STATUS0                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_FIFO_STATUS0_NS                    DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR_NS,0)
  #define DMIC0_FIFO_DATA0                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_FIFO_DATA0_NS                      DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR_NS,0)
  #define DMIC0_PHY_CTRL0                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_PHY_CTRL0_NS                       DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR_NS,0)
  #define DMIC0_DC_CTRL0                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_DC_CTRL0_NS                        DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR_NS,0)
  #define DMIC0_OSR1                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_OSR1_NS                            DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR_NS,1)
  #define DMIC0_DIVHFCLK1                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_DIVHFCLK1_NS                       DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR_NS,1)
  #define DMIC0_PREAC2FSCOEF1                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_PREAC2FSCOEF1_NS                   DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR_NS,1)
  #define DMIC0_PREAC4FSCOEF1                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_PREAC4FSCOEF1_NS                   DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR_NS,1)
  #define DMIC0_GAINSHIFT1                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_GAINSHIFT1_NS                      DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR_NS,1)
  #define DMIC0_FIFO_CTRL1                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_FIFO_CTRL1_NS                      DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR_NS,1)
  #define DMIC0_FIFO_STATUS1                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_FIFO_STATUS1_NS                    DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR_NS,1)
  #define DMIC0_FIFO_DATA1                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_FIFO_DATA1_NS                      DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR_NS,1)
  #define DMIC0_PHY_CTRL1                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_PHY_CTRL1_NS                       DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR_NS,1)
  #define DMIC0_DC_CTRL1                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_DC_CTRL1_NS                        DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR_NS,1)
  #define DMIC0_OSR2                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_OSR2_NS                            DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR_NS,2)
  #define DMIC0_DIVHFCLK2                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_DIVHFCLK2_NS                       DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR_NS,2)
  #define DMIC0_PREAC2FSCOEF2                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_PREAC2FSCOEF2_NS                   DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR_NS,2)
  #define DMIC0_PREAC4FSCOEF2                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_PREAC4FSCOEF2_NS                   DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR_NS,2)
  #define DMIC0_GAINSHIFT2                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_GAINSHIFT2_NS                      DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR_NS,2)
  #define DMIC0_FIFO_CTRL2                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_FIFO_CTRL2_NS                      DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR_NS,2)
  #define DMIC0_FIFO_STATUS2                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_FIFO_STATUS2_NS                    DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR_NS,2)
  #define DMIC0_FIFO_DATA2                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_FIFO_DATA2_NS                      DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR_NS,2)
  #define DMIC0_PHY_CTRL2                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_PHY_CTRL2_NS                       DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR_NS,2)
  #define DMIC0_DC_CTRL2                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_DC_CTRL2_NS                        DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR_NS,2)
  #define DMIC0_OSR3                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_OSR3_NS                            DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR_NS,3)
  #define DMIC0_DIVHFCLK3                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_DIVHFCLK3_NS                       DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR_NS,3)
  #define DMIC0_PREAC2FSCOEF3                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_PREAC2FSCOEF3_NS                   DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR_NS,3)
  #define DMIC0_PREAC4FSCOEF3                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_PREAC4FSCOEF3_NS                   DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR_NS,3)
  #define DMIC0_GAINSHIFT3                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_GAINSHIFT3_NS                      DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR_NS,3)
  #define DMIC0_FIFO_CTRL3                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_FIFO_CTRL3_NS                      DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR_NS,3)
  #define DMIC0_FIFO_STATUS3                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_FIFO_STATUS3_NS                    DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR_NS,3)
  #define DMIC0_FIFO_DATA3                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_FIFO_DATA3_NS                      DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR_NS,3)
  #define DMIC0_PHY_CTRL3                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_PHY_CTRL3_NS                       DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR_NS,3)
  #define DMIC0_DC_CTRL3                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_DC_CTRL3_NS                        DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR_NS,3)
  #define DMIC0_OSR4                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_OSR4_NS                            DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR_NS,4)
  #define DMIC0_DIVHFCLK4                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_DIVHFCLK4_NS                       DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR_NS,4)
  #define DMIC0_PREAC2FSCOEF4                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_PREAC2FSCOEF4_NS                   DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR_NS,4)
  #define DMIC0_PREAC4FSCOEF4                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_PREAC4FSCOEF4_NS                   DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR_NS,4)
  #define DMIC0_GAINSHIFT4                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_GAINSHIFT4_NS                      DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR_NS,4)
  #define DMIC0_FIFO_CTRL4                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_FIFO_CTRL4_NS                      DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR_NS,4)
  #define DMIC0_FIFO_STATUS4                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_FIFO_STATUS4_NS                    DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR_NS,4)
  #define DMIC0_FIFO_DATA4                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_FIFO_DATA4_NS                      DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR_NS,4)
  #define DMIC0_PHY_CTRL4                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_PHY_CTRL4_NS                       DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR_NS,4)
  #define DMIC0_DC_CTRL4                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_DC_CTRL4_NS                        DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR_NS,4)
  #define DMIC0_OSR5                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_OSR5_NS                            DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR_NS,5)
  #define DMIC0_DIVHFCLK5                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_DIVHFCLK5_NS                       DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR_NS,5)
  #define DMIC0_PREAC2FSCOEF5                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_PREAC2FSCOEF5_NS                   DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR_NS,5)
  #define DMIC0_PREAC4FSCOEF5                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_PREAC4FSCOEF5_NS                   DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR_NS,5)
  #define DMIC0_GAINSHIFT5                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_GAINSHIFT5_NS                      DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR_NS,5)
  #define DMIC0_FIFO_CTRL5                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_FIFO_CTRL5_NS                      DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR_NS,5)
  #define DMIC0_FIFO_STATUS5                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_FIFO_STATUS5_NS                    DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR_NS,5)
  #define DMIC0_FIFO_DATA5                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_FIFO_DATA5_NS                      DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR_NS,5)
  #define DMIC0_PHY_CTRL5                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_PHY_CTRL5_NS                       DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR_NS,5)
  #define DMIC0_DC_CTRL5                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_DC_CTRL5_NS                        DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR_NS,5)
  #define DMIC0_OSR6                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_OSR6_NS                            DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR_NS,6)
  #define DMIC0_DIVHFCLK6                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_DIVHFCLK6_NS                       DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR_NS,6)
  #define DMIC0_PREAC2FSCOEF6                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_PREAC2FSCOEF6_NS                   DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR_NS,6)
  #define DMIC0_PREAC4FSCOEF6                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_PREAC4FSCOEF6_NS                   DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR_NS,6)
  #define DMIC0_GAINSHIFT6                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_GAINSHIFT6_NS                      DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR_NS,6)
  #define DMIC0_FIFO_CTRL6                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_FIFO_CTRL6_NS                      DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR_NS,6)
  #define DMIC0_FIFO_STATUS6                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_FIFO_STATUS6_NS                    DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR_NS,6)
  #define DMIC0_FIFO_DATA6                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_FIFO_DATA6_NS                      DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR_NS,6)
  #define DMIC0_PHY_CTRL6                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_PHY_CTRL6_NS                       DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR_NS,6)
  #define DMIC0_DC_CTRL6                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_DC_CTRL6_NS                        DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR_NS,6)
  #define DMIC0_OSR7                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_OSR7_NS                            DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR_NS,7)
  #define DMIC0_DIVHFCLK7                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_DIVHFCLK7_NS                       DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR_NS,7)
  #define DMIC0_PREAC2FSCOEF7                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_PREAC2FSCOEF7_NS                   DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR_NS,7)
  #define DMIC0_PREAC4FSCOEF7                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_PREAC4FSCOEF7_NS                   DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR_NS,7)
  #define DMIC0_GAINSHIFT7                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_GAINSHIFT7_NS                      DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR_NS,7)
  #define DMIC0_FIFO_CTRL7                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_FIFO_CTRL7_NS                      DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR_NS,7)
  #define DMIC0_FIFO_STATUS7                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_FIFO_STATUS7_NS                    DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR_NS,7)
  #define DMIC0_FIFO_DATA7                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_FIFO_DATA7_NS                      DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR_NS,7)
  #define DMIC0_PHY_CTRL7                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_PHY_CTRL7_NS                       DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR_NS,7)
  #define DMIC0_DC_CTRL7                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_DC_CTRL7_NS                        DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR_NS,7)
  #define DMIC0_CHANEN                             DMIC_CHANEN_REG(DMIC0_BASE_PTR)
  #define DMIC0_CHANEN_NS                          DMIC_CHANEN_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_USE2FS                             DMIC_USE2FS_REG(DMIC0_BASE_PTR)
  #define DMIC0_USE2FS_NS                          DMIC_USE2FS_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_GLOBAL_SYCN_EN                     DMIC_GLOBAL_SYCN_EN_REG(DMIC0_BASE_PTR)
  #define DMIC0_GLOBAL_SYCN_EN_NS                  DMIC_GLOBAL_SYCN_EN_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_GLOBAL_COUNT_VAL                   DMIC_GLOBAL_COUNT_VAL_REG(DMIC0_BASE_PTR)
  #define DMIC0_GLOBAL_COUNT_VAL_NS                DMIC_GLOBAL_COUNT_VAL_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_DECRESET                           DMIC_DECRESET_REG(DMIC0_BASE_PTR)
  #define DMIC0_DECRESET_NS                        DMIC_DECRESET_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_HWVADGAIN                          DMIC_HWVADGAIN_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADGAIN_NS                       DMIC_HWVADGAIN_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_HWVADHPFS                          DMIC_HWVADHPFS_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADHPFS_NS                       DMIC_HWVADHPFS_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_HWVADST10                          DMIC_HWVADST10_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADST10_NS                       DMIC_HWVADST10_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_HWVADRSTT                          DMIC_HWVADRSTT_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADRSTT_NS                       DMIC_HWVADRSTT_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_HWVADTHGN                          DMIC_HWVADTHGN_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADTHGN_NS                       DMIC_HWVADTHGN_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_HWVADTHGS                          DMIC_HWVADTHGS_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADTHGS_NS                       DMIC_HWVADTHGS_REG(DMIC0_BASE_PTR_NS)
  #define DMIC0_HWVADLOWZ                          DMIC_HWVADLOWZ_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADLOWZ_NS                       DMIC_HWVADLOWZ_REG(DMIC0_BASE_PTR_NS)
#else
  /* DMIC0 */
  #define DMIC0_OSR0                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_DIVHFCLK0                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_PREAC2FSCOEF0                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_PREAC4FSCOEF0                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_GAINSHIFT0                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_FIFO_CTRL0                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_FIFO_STATUS0                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_FIFO_DATA0                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_PHY_CTRL0                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_DC_CTRL0                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,0)
  #define DMIC0_OSR1                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_DIVHFCLK1                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_PREAC2FSCOEF1                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_PREAC4FSCOEF1                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_GAINSHIFT1                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_FIFO_CTRL1                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_FIFO_STATUS1                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_FIFO_DATA1                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_PHY_CTRL1                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_DC_CTRL1                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,1)
  #define DMIC0_OSR2                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_DIVHFCLK2                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_PREAC2FSCOEF2                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_PREAC4FSCOEF2                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_GAINSHIFT2                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_FIFO_CTRL2                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_FIFO_STATUS2                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_FIFO_DATA2                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_PHY_CTRL2                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_DC_CTRL2                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,2)
  #define DMIC0_OSR3                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_DIVHFCLK3                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_PREAC2FSCOEF3                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_PREAC4FSCOEF3                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_GAINSHIFT3                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_FIFO_CTRL3                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_FIFO_STATUS3                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_FIFO_DATA3                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_PHY_CTRL3                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_DC_CTRL3                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,3)
  #define DMIC0_OSR4                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_DIVHFCLK4                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_PREAC2FSCOEF4                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_PREAC4FSCOEF4                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_GAINSHIFT4                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_FIFO_CTRL4                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_FIFO_STATUS4                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_FIFO_DATA4                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_PHY_CTRL4                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_DC_CTRL4                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,4)
  #define DMIC0_OSR5                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_DIVHFCLK5                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_PREAC2FSCOEF5                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_PREAC4FSCOEF5                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_GAINSHIFT5                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_FIFO_CTRL5                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_FIFO_STATUS5                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_FIFO_DATA5                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_PHY_CTRL5                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_DC_CTRL5                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,5)
  #define DMIC0_OSR6                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_DIVHFCLK6                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_PREAC2FSCOEF6                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_PREAC4FSCOEF6                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_GAINSHIFT6                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_FIFO_CTRL6                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_FIFO_STATUS6                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_FIFO_DATA6                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_PHY_CTRL6                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_DC_CTRL6                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,6)
  #define DMIC0_OSR7                               DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_DIVHFCLK7                          DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_PREAC2FSCOEF7                      DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_PREAC4FSCOEF7                      DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_GAINSHIFT7                         DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_FIFO_CTRL7                         DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_FIFO_STATUS7                       DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_FIFO_DATA7                         DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_PHY_CTRL7                          DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_DC_CTRL7                           DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,7)
  #define DMIC0_CHANEN                             DMIC_CHANEN_REG(DMIC0_BASE_PTR)
  #define DMIC0_USE2FS                             DMIC_USE2FS_REG(DMIC0_BASE_PTR)
  #define DMIC0_GLOBAL_SYCN_EN                     DMIC_GLOBAL_SYCN_EN_REG(DMIC0_BASE_PTR)
  #define DMIC0_GLOBAL_COUNT_VAL                   DMIC_GLOBAL_COUNT_VAL_REG(DMIC0_BASE_PTR)
  #define DMIC0_DECRESET                           DMIC_DECRESET_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADGAIN                          DMIC_HWVADGAIN_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADHPFS                          DMIC_HWVADHPFS_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADST10                          DMIC_HWVADST10_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADRSTT                          DMIC_HWVADRSTT_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADTHGN                          DMIC_HWVADTHGN_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADTHGS                          DMIC_HWVADTHGS_REG(DMIC0_BASE_PTR)
  #define DMIC0_HWVADLOWZ                          DMIC_HWVADLOWZ_REG(DMIC0_BASE_PTR)
#endif

/* DMIC - Register array accessors */
#define DMIC0_CHANNEL_OSR(index)                 DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_OSR_NS(index)              DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR_NS,index)
#define DMIC0_CHANNEL_OSR(index)                 DMIC_CHANNEL_OSR_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_DIVHFCLK(index)            DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_DIVHFCLK_NS(index)         DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR_NS,index)
#define DMIC0_CHANNEL_DIVHFCLK(index)            DMIC_CHANNEL_DIVHFCLK_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_PREAC2FSCOEF(index)        DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_PREAC2FSCOEF_NS(index)     DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR_NS,index)
#define DMIC0_CHANNEL_PREAC2FSCOEF(index)        DMIC_CHANNEL_PREAC2FSCOEF_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_PREAC4FSCOEF(index)        DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_PREAC4FSCOEF_NS(index)     DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR_NS,index)
#define DMIC0_CHANNEL_PREAC4FSCOEF(index)        DMIC_CHANNEL_PREAC4FSCOEF_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_GAINSHIFT(index)           DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_GAINSHIFT_NS(index)        DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR_NS,index)
#define DMIC0_CHANNEL_GAINSHIFT(index)           DMIC_CHANNEL_GAINSHIFT_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_FIFO_CTRL(index)           DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_FIFO_CTRL_NS(index)        DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR_NS,index)
#define DMIC0_CHANNEL_FIFO_CTRL(index)           DMIC_CHANNEL_FIFO_CTRL_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_FIFO_STATUS(index)         DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_FIFO_STATUS_NS(index)      DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR_NS,index)
#define DMIC0_CHANNEL_FIFO_STATUS(index)         DMIC_CHANNEL_FIFO_STATUS_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_FIFO_DATA(index)           DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_FIFO_DATA_NS(index)        DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR_NS,index)
#define DMIC0_CHANNEL_FIFO_DATA(index)           DMIC_CHANNEL_FIFO_DATA_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_PHY_CTRL(index)            DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_PHY_CTRL_NS(index)         DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR_NS,index)
#define DMIC0_CHANNEL_PHY_CTRL(index)            DMIC_CHANNEL_PHY_CTRL_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_DC_CTRL(index)             DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,index)
#define DMIC0_CHANNEL_DC_CTRL_NS(index)          DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR_NS,index)
#define DMIC0_CHANNEL_DC_CTRL(index)             DMIC_CHANNEL_DC_CTRL_REG(DMIC0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group DMIC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DMIC_Peripheral */


/* ----------------------------------------------------------------------------
   -- FLEXCOMM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXCOMM_Peripheral FLEXCOMM
 * @{
 */

/** FLEXCOMM - Peripheral register structure */
typedef struct FLEXCOMM_MemMap {
  uint8_t RESERVED_0[4088];
  uint32_t PSELID;                                 /**< Peripheral Select and Flexcomm module ID, offset: 0xFF8 */
  uint32_t PID;                                    /**< Peripheral Identification, offset: 0xFFC */
} volatile *FLEXCOMM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- FLEXCOMM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXCOMM_Register_Accessor_Macros FLEXCOMM - Register accessor macros
 * @{
 */


/* FLEXCOMM - Register accessors */
#define FLEXCOMM_PSELID_REG(base)                ((base)->PSELID)
#define FLEXCOMM_PID_REG(base)                   ((base)->PID)

/*!
 * @}
 */ /* end of group FLEXCOMM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- FLEXCOMM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXCOMM_Register_Masks FLEXCOMM Register Masks
 * @{
 */

/*! @name PSELID - Peripheral Select and Flexcomm module ID */
/*! @{ */
#define FLEXCOMM_PSELID_PERSEL_MASK              (0x7U)
#define FLEXCOMM_PSELID_PERSEL_SHIFT             (0U)
/*! PERSEL - Peripheral Select
 *  0b000..No peripheral selected.
 *  0b001..USART function selected
 *  0b010..SPI function selected
 *  0b011..I2C
 *  0b100..I2S Transmit
 *  0b101..I2S Receive
 *  0b110..Reserved
 *  0b111..Reserved
 */
#define FLEXCOMM_PSELID_PERSEL(x)                (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PSELID_PERSEL_SHIFT)) & FLEXCOMM_PSELID_PERSEL_MASK)
#define FLEXCOMM_PSELID_LOCK_MASK                (0x8U)
#define FLEXCOMM_PSELID_LOCK_SHIFT               (3U)
#define FLEXCOMM_PSELID_USARTPRESENT_MASK        (0x10U)
#define FLEXCOMM_PSELID_USARTPRESENT_SHIFT       (4U)
#define FLEXCOMM_PSELID_SPIPRESENT_MASK          (0x20U)
#define FLEXCOMM_PSELID_SPIPRESENT_SHIFT         (5U)
#define FLEXCOMM_PSELID_I2CPRESENT_MASK          (0x40U)
#define FLEXCOMM_PSELID_I2CPRESENT_SHIFT         (6U)
#define FLEXCOMM_PSELID_I2SPRESENT_MASK          (0x80U)
#define FLEXCOMM_PSELID_I2SPRESENT_SHIFT         (7U)
#define FLEXCOMM_PSELID_ID_MASK                  (0xFFFFF000U)
#define FLEXCOMM_PSELID_ID_SHIFT                 (12U)
/*! ID - Flexcomm ID
 */
#define FLEXCOMM_PSELID_ID(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PSELID_ID_SHIFT)) & FLEXCOMM_PSELID_ID_MASK)
/*! @} */

/*! @name PID - Peripheral Identification */
/*! @{ */
#define FLEXCOMM_PID_Minor_Rev_MASK              (0xF00U)
#define FLEXCOMM_PID_Minor_Rev_SHIFT             (8U)
/*! Minor_Rev - Minor revision of module implementation
 */
#define FLEXCOMM_PID_Minor_Rev(x)                (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PID_Minor_Rev_SHIFT)) & FLEXCOMM_PID_Minor_Rev_MASK)
#define FLEXCOMM_PID_Major_Rev_MASK              (0xF000U)
#define FLEXCOMM_PID_Major_Rev_SHIFT             (12U)
/*! Major_Rev - Major revision of module implementation
 */
#define FLEXCOMM_PID_Major_Rev(x)                (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PID_Major_Rev_SHIFT)) & FLEXCOMM_PID_Major_Rev_MASK)
#define FLEXCOMM_PID_ID_MASK                     (0xFFFF0000U)
#define FLEXCOMM_PID_ID_SHIFT                    (16U)
/*! ID - Module identifier for the selected function
 */
#define FLEXCOMM_PID_ID(x)                       (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PID_ID_SHIFT)) & FLEXCOMM_PID_ID_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group FLEXCOMM_Register_Masks */


/* FLEXCOMM - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral FLEXCOMM0 base pointer */
  #define FLEXCOMM0_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x50106000u)
  /** Peripheral FLEXCOMM0 base pointer */
  #define FLEXCOMM0_BASE_PTR_NS                    ((FLEXCOMM_MemMapPtr)0x40106000u)
  /** Peripheral FLEXCOMM1 base pointer */
  #define FLEXCOMM1_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x50107000u)
  /** Peripheral FLEXCOMM1 base pointer */
  #define FLEXCOMM1_BASE_PTR_NS                    ((FLEXCOMM_MemMapPtr)0x40107000u)
  /** Peripheral FLEXCOMM2 base pointer */
  #define FLEXCOMM2_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x50108000u)
  /** Peripheral FLEXCOMM2 base pointer */
  #define FLEXCOMM2_BASE_PTR_NS                    ((FLEXCOMM_MemMapPtr)0x40108000u)
  /** Peripheral FLEXCOMM3 base pointer */
  #define FLEXCOMM3_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x50109000u)
  /** Peripheral FLEXCOMM3 base pointer */
  #define FLEXCOMM3_BASE_PTR_NS                    ((FLEXCOMM_MemMapPtr)0x40109000u)
  /** Peripheral FLEXCOMM4 base pointer */
  #define FLEXCOMM4_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x50122000u)
  /** Peripheral FLEXCOMM4 base pointer */
  #define FLEXCOMM4_BASE_PTR_NS                    ((FLEXCOMM_MemMapPtr)0x40122000u)
  /** Peripheral FLEXCOMM5 base pointer */
  #define FLEXCOMM5_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x50123000u)
  /** Peripheral FLEXCOMM5 base pointer */
  #define FLEXCOMM5_BASE_PTR_NS                    ((FLEXCOMM_MemMapPtr)0x40123000u)
  /** Peripheral FLEXCOMM6 base pointer */
  #define FLEXCOMM6_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x50124000u)
  /** Peripheral FLEXCOMM6 base pointer */
  #define FLEXCOMM6_BASE_PTR_NS                    ((FLEXCOMM_MemMapPtr)0x40124000u)
  /** Peripheral FLEXCOMM7 base pointer */
  #define FLEXCOMM7_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x50125000u)
  /** Peripheral FLEXCOMM7 base pointer */
  #define FLEXCOMM7_BASE_PTR_NS                    ((FLEXCOMM_MemMapPtr)0x40125000u)
  /** Peripheral FLEXCOMM8 base pointer */
  #define FLEXCOMM8_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x50209000u)
  /** Peripheral FLEXCOMM8 base pointer */
  #define FLEXCOMM8_BASE_PTR_NS                    ((FLEXCOMM_MemMapPtr)0x40209000u)
  /** Peripheral FLEXCOMM9 base pointer */
  #define FLEXCOMM9_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x5020A000u)
  /** Peripheral FLEXCOMM9 base pointer */
  #define FLEXCOMM9_BASE_PTR_NS                    ((FLEXCOMM_MemMapPtr)0x4020A000u)
  /** Peripheral FLEXCOMM10 base pointer */
  #define FLEXCOMM10_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x5020B000u)
  /** Peripheral FLEXCOMM10 base pointer */
  #define FLEXCOMM10_BASE_PTR_NS                   ((FLEXCOMM_MemMapPtr)0x4020B000u)
  /** Peripheral FLEXCOMM11 base pointer */
  #define FLEXCOMM11_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x5020C000u)
  /** Peripheral FLEXCOMM11 base pointer */
  #define FLEXCOMM11_BASE_PTR_NS                   ((FLEXCOMM_MemMapPtr)0x4020C000u)
  /** Peripheral FLEXCOMM12 base pointer */
  #define FLEXCOMM12_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x5020D000u)
  /** Peripheral FLEXCOMM12 base pointer */
  #define FLEXCOMM12_BASE_PTR_NS                   ((FLEXCOMM_MemMapPtr)0x4020D000u)
  /** Peripheral FLEXCOMM13 base pointer */
  #define FLEXCOMM13_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x5020E000u)
  /** Peripheral FLEXCOMM13 base pointer */
  #define FLEXCOMM13_BASE_PTR_NS                   ((FLEXCOMM_MemMapPtr)0x4020E000u)
  /** Peripheral FLEXCOMM14 base pointer */
  #define FLEXCOMM14_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x50126000u)
  /** Peripheral FLEXCOMM14 base pointer */
  #define FLEXCOMM14_BASE_PTR_NS                   ((FLEXCOMM_MemMapPtr)0x40126000u)
  /** Peripheral FLEXCOMM15 base pointer */
  #define FLEXCOMM15_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x50127000u)
  /** Peripheral FLEXCOMM15 base pointer */
  #define FLEXCOMM15_BASE_PTR_NS                   ((FLEXCOMM_MemMapPtr)0x40127000u)
  /** Peripheral FLEXCOMM16 base pointer */
  #define FLEXCOMM16_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x50128000u)
  /** Peripheral FLEXCOMM16 base pointer */
  #define FLEXCOMM16_BASE_PTR_NS                   ((FLEXCOMM_MemMapPtr)0x40128000u)
  /** Array initializer of FLEXCOMM peripheral base pointers */
  #define FLEXCOMM_BASE_PTRS                       { FLEXCOMM0_BASE_PTR, FLEXCOMM1_BASE_PTR, FLEXCOMM2_BASE_PTR, FLEXCOMM3_BASE_PTR, FLEXCOMM4_BASE_PTR, FLEXCOMM5_BASE_PTR, FLEXCOMM6_BASE_PTR, FLEXCOMM7_BASE_PTR, FLEXCOMM8_BASE_PTR, FLEXCOMM9_BASE_PTR, FLEXCOMM10_BASE_PTR, FLEXCOMM11_BASE_PTR, FLEXCOMM12_BASE_PTR, FLEXCOMM13_BASE_PTR, FLEXCOMM14_BASE_PTR, FLEXCOMM15_BASE_PTR, FLEXCOMM16_BASE_PTR }
  /** Array initializer of FLEXCOMM peripheral base pointers */
  #define FLEXCOMM_BASE_PTRS_NS                    { FLEXCOMM0_BASE_PTR_NS, FLEXCOMM1_BASE_PTR_NS, FLEXCOMM2_BASE_PTR_NS, FLEXCOMM3_BASE_PTR_NS, FLEXCOMM4_BASE_PTR_NS, FLEXCOMM5_BASE_PTR_NS, FLEXCOMM6_BASE_PTR_NS, FLEXCOMM7_BASE_PTR_NS, FLEXCOMM8_BASE_PTR_NS, FLEXCOMM9_BASE_PTR_NS, FLEXCOMM10_BASE_PTR_NS, FLEXCOMM11_BASE_PTR_NS, FLEXCOMM12_BASE_PTR_NS, FLEXCOMM13_BASE_PTR_NS, FLEXCOMM14_BASE_PTR_NS, FLEXCOMM15_BASE_PTR_NS, FLEXCOMM16_BASE_PTR_NS }
#else
  /** Peripheral FLEXCOMM0 base pointer */
  #define FLEXCOMM0_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x40106000u)
  /** Peripheral FLEXCOMM1 base pointer */
  #define FLEXCOMM1_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x40107000u)
  /** Peripheral FLEXCOMM2 base pointer */
  #define FLEXCOMM2_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x40108000u)
  /** Peripheral FLEXCOMM3 base pointer */
  #define FLEXCOMM3_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x40109000u)
  /** Peripheral FLEXCOMM4 base pointer */
  #define FLEXCOMM4_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x40122000u)
  /** Peripheral FLEXCOMM5 base pointer */
  #define FLEXCOMM5_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x40123000u)
  /** Peripheral FLEXCOMM6 base pointer */
  #define FLEXCOMM6_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x40124000u)
  /** Peripheral FLEXCOMM7 base pointer */
  #define FLEXCOMM7_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x40125000u)
  /** Peripheral FLEXCOMM8 base pointer */
  #define FLEXCOMM8_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x40209000u)
  /** Peripheral FLEXCOMM9 base pointer */
  #define FLEXCOMM9_BASE_PTR                       ((FLEXCOMM_MemMapPtr)0x4020A000u)
  /** Peripheral FLEXCOMM10 base pointer */
  #define FLEXCOMM10_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x4020B000u)
  /** Peripheral FLEXCOMM11 base pointer */
  #define FLEXCOMM11_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x4020C000u)
  /** Peripheral FLEXCOMM12 base pointer */
  #define FLEXCOMM12_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x4020D000u)
  /** Peripheral FLEXCOMM13 base pointer */
  #define FLEXCOMM13_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x4020E000u)
  /** Peripheral FLEXCOMM14 base pointer */
  #define FLEXCOMM14_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x40126000u)
  /** Peripheral FLEXCOMM15 base pointer */
  #define FLEXCOMM15_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x40127000u)
  /** Peripheral FLEXCOMM16 base pointer */
  #define FLEXCOMM16_BASE_PTR                      ((FLEXCOMM_MemMapPtr)0x40128000u)
  /** Array initializer of FLEXCOMM peripheral base pointers */
  #define FLEXCOMM_BASE_PTRS                       { FLEXCOMM0_BASE_PTR, FLEXCOMM1_BASE_PTR, FLEXCOMM2_BASE_PTR, FLEXCOMM3_BASE_PTR, FLEXCOMM4_BASE_PTR, FLEXCOMM5_BASE_PTR, FLEXCOMM6_BASE_PTR, FLEXCOMM7_BASE_PTR, FLEXCOMM8_BASE_PTR, FLEXCOMM9_BASE_PTR, FLEXCOMM10_BASE_PTR, FLEXCOMM11_BASE_PTR, FLEXCOMM12_BASE_PTR, FLEXCOMM13_BASE_PTR, FLEXCOMM14_BASE_PTR, FLEXCOMM15_BASE_PTR, FLEXCOMM16_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- FLEXCOMM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXCOMM_Register_Accessor_Macros FLEXCOMM - Register accessor macros
 * @{
 */


/* FLEXCOMM - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* FLEXCOMM0 */
  #define FLEXCOMM0__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM0_BASE_PTR)
  #define FLEXCOMM0__SELECT_PSELID_NS              FLEXCOMM_PSELID_REG(FLEXCOMM0_BASE_PTR_NS)
  #define FLEXCOMM0__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM0_BASE_PTR)
  #define FLEXCOMM0__SELECT_PID_NS                 FLEXCOMM_PID_REG(FLEXCOMM0_BASE_PTR_NS)
  /* FLEXCOMM1 */
  #define FLEXCOMM1__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM1_BASE_PTR)
  #define FLEXCOMM1__SELECT_PSELID_NS              FLEXCOMM_PSELID_REG(FLEXCOMM1_BASE_PTR_NS)
  #define FLEXCOMM1__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM1_BASE_PTR)
  #define FLEXCOMM1__SELECT_PID_NS                 FLEXCOMM_PID_REG(FLEXCOMM1_BASE_PTR_NS)
  /* FLEXCOMM2 */
  #define FLEXCOMM2__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM2_BASE_PTR)
  #define FLEXCOMM2__SELECT_PSELID_NS              FLEXCOMM_PSELID_REG(FLEXCOMM2_BASE_PTR_NS)
  #define FLEXCOMM2__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM2_BASE_PTR)
  #define FLEXCOMM2__SELECT_PID_NS                 FLEXCOMM_PID_REG(FLEXCOMM2_BASE_PTR_NS)
  /* FLEXCOMM3 */
  #define FLEXCOMM3__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM3_BASE_PTR)
  #define FLEXCOMM3__SELECT_PSELID_NS              FLEXCOMM_PSELID_REG(FLEXCOMM3_BASE_PTR_NS)
  #define FLEXCOMM3__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM3_BASE_PTR)
  #define FLEXCOMM3__SELECT_PID_NS                 FLEXCOMM_PID_REG(FLEXCOMM3_BASE_PTR_NS)
  /* FLEXCOMM4 */
  #define FLEXCOMM4__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM4_BASE_PTR)
  #define FLEXCOMM4__SELECT_PSELID_NS              FLEXCOMM_PSELID_REG(FLEXCOMM4_BASE_PTR_NS)
  #define FLEXCOMM4__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM4_BASE_PTR)
  #define FLEXCOMM4__SELECT_PID_NS                 FLEXCOMM_PID_REG(FLEXCOMM4_BASE_PTR_NS)
  /* FLEXCOMM5 */
  #define FLEXCOMM5__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM5_BASE_PTR)
  #define FLEXCOMM5__SELECT_PSELID_NS              FLEXCOMM_PSELID_REG(FLEXCOMM5_BASE_PTR_NS)
  #define FLEXCOMM5__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM5_BASE_PTR)
  #define FLEXCOMM5__SELECT_PID_NS                 FLEXCOMM_PID_REG(FLEXCOMM5_BASE_PTR_NS)
  /* FLEXCOMM6 */
  #define FLEXCOMM6__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM6_BASE_PTR)
  #define FLEXCOMM6__SELECT_PSELID_NS              FLEXCOMM_PSELID_REG(FLEXCOMM6_BASE_PTR_NS)
  #define FLEXCOMM6__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM6_BASE_PTR)
  #define FLEXCOMM6__SELECT_PID_NS                 FLEXCOMM_PID_REG(FLEXCOMM6_BASE_PTR_NS)
  /* FLEXCOMM7 */
  #define FLEXCOMM7__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM7_BASE_PTR)
  #define FLEXCOMM7__SELECT_PSELID_NS              FLEXCOMM_PSELID_REG(FLEXCOMM7_BASE_PTR_NS)
  #define FLEXCOMM7__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM7_BASE_PTR)
  #define FLEXCOMM7__SELECT_PID_NS                 FLEXCOMM_PID_REG(FLEXCOMM7_BASE_PTR_NS)
  /* FLEXCOMM8 */
  #define FLEXCOMM8__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM8_BASE_PTR)
  #define FLEXCOMM8__SELECT_PSELID_NS              FLEXCOMM_PSELID_REG(FLEXCOMM8_BASE_PTR_NS)
  #define FLEXCOMM8__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM8_BASE_PTR)
  #define FLEXCOMM8__SELECT_PID_NS                 FLEXCOMM_PID_REG(FLEXCOMM8_BASE_PTR_NS)
  /* FLEXCOMM9 */
  #define FLEXCOMM9__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM9_BASE_PTR)
  #define FLEXCOMM9__SELECT_PSELID_NS              FLEXCOMM_PSELID_REG(FLEXCOMM9_BASE_PTR_NS)
  #define FLEXCOMM9__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM9_BASE_PTR)
  #define FLEXCOMM9__SELECT_PID_NS                 FLEXCOMM_PID_REG(FLEXCOMM9_BASE_PTR_NS)
  /* FLEXCOMM10 */
  #define FLEXCOMM10__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM10_BASE_PTR)
  #define FLEXCOMM10__SELECT_PSELID_NS             FLEXCOMM_PSELID_REG(FLEXCOMM10_BASE_PTR_NS)
  #define FLEXCOMM10__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM10_BASE_PTR)
  #define FLEXCOMM10__SELECT_PID_NS                FLEXCOMM_PID_REG(FLEXCOMM10_BASE_PTR_NS)
  /* FLEXCOMM11 */
  #define FLEXCOMM11__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM11_BASE_PTR)
  #define FLEXCOMM11__SELECT_PSELID_NS             FLEXCOMM_PSELID_REG(FLEXCOMM11_BASE_PTR_NS)
  #define FLEXCOMM11__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM11_BASE_PTR)
  #define FLEXCOMM11__SELECT_PID_NS                FLEXCOMM_PID_REG(FLEXCOMM11_BASE_PTR_NS)
  /* FLEXCOMM12 */
  #define FLEXCOMM12__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM12_BASE_PTR)
  #define FLEXCOMM12__SELECT_PSELID_NS             FLEXCOMM_PSELID_REG(FLEXCOMM12_BASE_PTR_NS)
  #define FLEXCOMM12__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM12_BASE_PTR)
  #define FLEXCOMM12__SELECT_PID_NS                FLEXCOMM_PID_REG(FLEXCOMM12_BASE_PTR_NS)
  /* FLEXCOMM13 */
  #define FLEXCOMM13__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM13_BASE_PTR)
  #define FLEXCOMM13__SELECT_PSELID_NS             FLEXCOMM_PSELID_REG(FLEXCOMM13_BASE_PTR_NS)
  #define FLEXCOMM13__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM13_BASE_PTR)
  #define FLEXCOMM13__SELECT_PID_NS                FLEXCOMM_PID_REG(FLEXCOMM13_BASE_PTR_NS)
  /* FLEXCOMM14 */
  #define FLEXCOMM14__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM14_BASE_PTR)
  #define FLEXCOMM14__SELECT_PSELID_NS             FLEXCOMM_PSELID_REG(FLEXCOMM14_BASE_PTR_NS)
  #define FLEXCOMM14__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM14_BASE_PTR)
  #define FLEXCOMM14__SELECT_PID_NS                FLEXCOMM_PID_REG(FLEXCOMM14_BASE_PTR_NS)
  /* FLEXCOMM15 */
  #define FLEXCOMM15__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM15_BASE_PTR)
  #define FLEXCOMM15__SELECT_PSELID_NS             FLEXCOMM_PSELID_REG(FLEXCOMM15_BASE_PTR_NS)
  #define FLEXCOMM15__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM15_BASE_PTR)
  #define FLEXCOMM15__SELECT_PID_NS                FLEXCOMM_PID_REG(FLEXCOMM15_BASE_PTR_NS)
  /* FLEXCOMM16 */
  #define FLEXCOMM16__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM16_BASE_PTR)
  #define FLEXCOMM16__SELECT_PSELID_NS             FLEXCOMM_PSELID_REG(FLEXCOMM16_BASE_PTR_NS)
  #define FLEXCOMM16__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM16_BASE_PTR)
  #define FLEXCOMM16__SELECT_PID_NS                FLEXCOMM_PID_REG(FLEXCOMM16_BASE_PTR_NS)
#else
  /* FLEXCOMM0 */
  #define FLEXCOMM0__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM0_BASE_PTR)
  #define FLEXCOMM0__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM0_BASE_PTR)
  /* FLEXCOMM1 */
  #define FLEXCOMM1__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM1_BASE_PTR)
  #define FLEXCOMM1__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM1_BASE_PTR)
  /* FLEXCOMM2 */
  #define FLEXCOMM2__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM2_BASE_PTR)
  #define FLEXCOMM2__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM2_BASE_PTR)
  /* FLEXCOMM3 */
  #define FLEXCOMM3__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM3_BASE_PTR)
  #define FLEXCOMM3__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM3_BASE_PTR)
  /* FLEXCOMM4 */
  #define FLEXCOMM4__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM4_BASE_PTR)
  #define FLEXCOMM4__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM4_BASE_PTR)
  /* FLEXCOMM5 */
  #define FLEXCOMM5__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM5_BASE_PTR)
  #define FLEXCOMM5__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM5_BASE_PTR)
  /* FLEXCOMM6 */
  #define FLEXCOMM6__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM6_BASE_PTR)
  #define FLEXCOMM6__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM6_BASE_PTR)
  /* FLEXCOMM7 */
  #define FLEXCOMM7__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM7_BASE_PTR)
  #define FLEXCOMM7__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM7_BASE_PTR)
  /* FLEXCOMM8 */
  #define FLEXCOMM8__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM8_BASE_PTR)
  #define FLEXCOMM8__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM8_BASE_PTR)
  /* FLEXCOMM9 */
  #define FLEXCOMM9__SELECT_PSELID                 FLEXCOMM_PSELID_REG(FLEXCOMM9_BASE_PTR)
  #define FLEXCOMM9__SELECT_PID                    FLEXCOMM_PID_REG(FLEXCOMM9_BASE_PTR)
  /* FLEXCOMM10 */
  #define FLEXCOMM10__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM10_BASE_PTR)
  #define FLEXCOMM10__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM10_BASE_PTR)
  /* FLEXCOMM11 */
  #define FLEXCOMM11__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM11_BASE_PTR)
  #define FLEXCOMM11__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM11_BASE_PTR)
  /* FLEXCOMM12 */
  #define FLEXCOMM12__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM12_BASE_PTR)
  #define FLEXCOMM12__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM12_BASE_PTR)
  /* FLEXCOMM13 */
  #define FLEXCOMM13__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM13_BASE_PTR)
  #define FLEXCOMM13__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM13_BASE_PTR)
  /* FLEXCOMM14 */
  #define FLEXCOMM14__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM14_BASE_PTR)
  #define FLEXCOMM14__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM14_BASE_PTR)
  /* FLEXCOMM15 */
  #define FLEXCOMM15__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM15_BASE_PTR)
  #define FLEXCOMM15__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM15_BASE_PTR)
  /* FLEXCOMM16 */
  #define FLEXCOMM16__SELECT_PSELID                FLEXCOMM_PSELID_REG(FLEXCOMM16_BASE_PTR)
  #define FLEXCOMM16__SELECT_PID                   FLEXCOMM_PID_REG(FLEXCOMM16_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group FLEXCOMM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group FLEXCOMM_Peripheral */


/* ----------------------------------------------------------------------------
   -- FLEXIO
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXIO_Peripheral FLEXIO
 * @{
 */

/** FLEXIO - Peripheral register structure */
typedef struct FLEXIO_MemMap {
  uint32_t VERID;                                  /**< Version ID Register, offset: 0x0 */
  uint32_t PARAM;                                  /**< Parameter Register, offset: 0x4 */
  uint32_t CTRL;                                   /**< FlexIO Control Register, offset: 0x8 */
  uint32_t PIN;                                    /**< Pin State Register, offset: 0xC */
  uint32_t SHIFTSTAT;                              /**< Shifter Status Register, offset: 0x10 */
  uint32_t SHIFTERR;                               /**< Shifter Error Register, offset: 0x14 */
  uint32_t TIMSTAT;                                /**< Timer Status Register, offset: 0x18 */
  uint8_t RESERVED_0[4];
  uint32_t SHIFTSIEN;                              /**< Shifter Status Interrupt Enable, offset: 0x20 */
  uint32_t SHIFTEIEN;                              /**< Shifter Error Interrupt Enable, offset: 0x24 */
  uint32_t TIMIEN;                                 /**< Timer Interrupt Enable Register, offset: 0x28 */
  uint8_t RESERVED_1[4];
  uint32_t SHIFTSDEN;                              /**< Shifter Status DMA Enable, offset: 0x30 */
  uint8_t RESERVED_2[4];
  uint32_t TIMERSDEN;                              /**< Timer Status DMA Enable, offset: 0x38 */
  uint8_t RESERVED_3[4];
  uint32_t SHIFTSTATE;                             /**< Shifter State Register, offset: 0x40 */
  uint8_t RESERVED_4[4];
  uint32_t TRGSTAT;                                /**< Trigger Status Register, offset: 0x48 */
  uint32_t TRIGIEN;                                /**< External Trigger Interrupt Enable Register, offset: 0x4C */
  uint32_t PINSTAT;                                /**< Pin Status Register, offset: 0x50 */
  uint32_t PINIEN;                                 /**< Pin Interrupt Enable Register, offset: 0x54 */
  uint32_t PINREN;                                 /**< Pin Rising Edge Enable Register, offset: 0x58 */
  uint32_t PINFEN;                                 /**< Pin Falling Edge Enable Register, offset: 0x5C */
  uint32_t PINOUTD;                                /**< Pin Output Data Register, offset: 0x60 */
  uint32_t PINOUTE;                                /**< Pin Output Enable Register, offset: 0x64 */
  uint32_t PINOUTDIS;                              /**< Pin Output Disable Register, offset: 0x68 */
  uint32_t PINOUTCLR;                              /**< Pin Output Clear Register, offset: 0x6C */
  uint32_t PINOUTSET;                              /**< Pin Output Set Register, offset: 0x70 */
  uint32_t PINOUTTOG;                              /**< Pin Output Toggle Register, offset: 0x74 */
  uint8_t RESERVED_5[8];
  uint32_t SHIFTCTL[8];                            /**< Shifter Control N Register, array offset: 0x80, array step: 0x4 */
  uint8_t RESERVED_6[96];
  uint32_t SHIFTCFG[8];                            /**< Shifter Configuration N Register, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_7[224];
  uint32_t SHIFTBUF[8];                            /**< Shifter Buffer N Register, array offset: 0x200, array step: 0x4 */
  uint8_t RESERVED_8[96];
  uint32_t SHIFTBUFBIS[8];                         /**< Shifter Buffer N Bit Swapped Register, array offset: 0x280, array step: 0x4 */
  uint8_t RESERVED_9[96];
  uint32_t SHIFTBUFBYS[8];                         /**< Shifter Buffer N Byte Swapped Register, array offset: 0x300, array step: 0x4 */
  uint8_t RESERVED_10[96];
  uint32_t SHIFTBUFBBS[8];                         /**< Shifter Buffer N Bit Byte Swapped Register, array offset: 0x380, array step: 0x4 */
  uint8_t RESERVED_11[96];
  uint32_t TIMCTL[8];                              /**< Timer Control N Register, array offset: 0x400, array step: 0x4 */
  uint8_t RESERVED_12[96];
  uint32_t TIMCFG[8];                              /**< Timer Configuration N Register, array offset: 0x480, array step: 0x4 */
  uint8_t RESERVED_13[96];
  uint32_t TIMCMP[8];                              /**< Timer Compare N Register, array offset: 0x500, array step: 0x4 */
  uint8_t RESERVED_14[352];
  uint32_t SHIFTBUFNBS[8];                         /**< Shifter Buffer N Nibble Byte Swapped Register, array offset: 0x680, array step: 0x4 */
  uint8_t RESERVED_15[96];
  uint32_t SHIFTBUFHWS[8];                         /**< Shifter Buffer N Half Word Swapped Register, array offset: 0x700, array step: 0x4 */
  uint8_t RESERVED_16[96];
  uint32_t SHIFTBUFNIS[8];                         /**< Shifter Buffer N Nibble Swapped Register, array offset: 0x780, array step: 0x4 */
  uint8_t RESERVED_17[96];
  uint32_t SHIFTBUFOES[8];                         /**< Shifter Buffer N Odd Even Swapped Register, array offset: 0x800, array step: 0x4 */
  uint8_t RESERVED_18[96];
  uint32_t SHIFTBUFEOS[8];                         /**< Shifter Buffer N Even Odd Swapped Register, array offset: 0x880, array step: 0x4 */
} volatile *FLEXIO_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- FLEXIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXIO_Register_Accessor_Macros FLEXIO - Register accessor macros
 * @{
 */


/* FLEXIO - Register accessors */
#define FLEXIO_VERID_REG(base)                   ((base)->VERID)
#define FLEXIO_PARAM_REG(base)                   ((base)->PARAM)
#define FLEXIO_CTRL_REG(base)                    ((base)->CTRL)
#define FLEXIO_PIN_REG(base)                     ((base)->PIN)
#define FLEXIO_SHIFTSTAT_REG(base)               ((base)->SHIFTSTAT)
#define FLEXIO_SHIFTERR_REG(base)                ((base)->SHIFTERR)
#define FLEXIO_TIMSTAT_REG(base)                 ((base)->TIMSTAT)
#define FLEXIO_SHIFTSIEN_REG(base)               ((base)->SHIFTSIEN)
#define FLEXIO_SHIFTEIEN_REG(base)               ((base)->SHIFTEIEN)
#define FLEXIO_TIMIEN_REG(base)                  ((base)->TIMIEN)
#define FLEXIO_SHIFTSDEN_REG(base)               ((base)->SHIFTSDEN)
#define FLEXIO_TIMERSDEN_REG(base)               ((base)->TIMERSDEN)
#define FLEXIO_SHIFTSTATE_REG(base)              ((base)->SHIFTSTATE)
#define FLEXIO_TRGSTAT_REG(base)                 ((base)->TRGSTAT)
#define FLEXIO_TRIGIEN_REG(base)                 ((base)->TRIGIEN)
#define FLEXIO_PINSTAT_REG(base)                 ((base)->PINSTAT)
#define FLEXIO_PINIEN_REG(base)                  ((base)->PINIEN)
#define FLEXIO_PINREN_REG(base)                  ((base)->PINREN)
#define FLEXIO_PINFEN_REG(base)                  ((base)->PINFEN)
#define FLEXIO_PINOUTD_REG(base)                 ((base)->PINOUTD)
#define FLEXIO_PINOUTE_REG(base)                 ((base)->PINOUTE)
#define FLEXIO_PINOUTDIS_REG(base)               ((base)->PINOUTDIS)
#define FLEXIO_PINOUTCLR_REG(base)               ((base)->PINOUTCLR)
#define FLEXIO_PINOUTSET_REG(base)               ((base)->PINOUTSET)
#define FLEXIO_PINOUTTOG_REG(base)               ((base)->PINOUTTOG)
#define FLEXIO_SHIFTCTL_REG(base,index)          ((base)->SHIFTCTL[index])
#define FLEXIO_SHIFTCFG_REG(base,index)          ((base)->SHIFTCFG[index])
#define FLEXIO_SHIFTBUF_REG(base,index)          ((base)->SHIFTBUF[index])
#define FLEXIO_SHIFTBUFBIS_REG(base,index)       ((base)->SHIFTBUFBIS[index])
#define FLEXIO_SHIFTBUFBYS_REG(base,index)       ((base)->SHIFTBUFBYS[index])
#define FLEXIO_SHIFTBUFBBS_REG(base,index)       ((base)->SHIFTBUFBBS[index])
#define FLEXIO_TIMCTL_REG(base,index)            ((base)->TIMCTL[index])
#define FLEXIO_TIMCFG_REG(base,index)            ((base)->TIMCFG[index])
#define FLEXIO_TIMCMP_REG(base,index)            ((base)->TIMCMP[index])
#define FLEXIO_SHIFTBUFNBS_REG(base,index)       ((base)->SHIFTBUFNBS[index])
#define FLEXIO_SHIFTBUFHWS_REG(base,index)       ((base)->SHIFTBUFHWS[index])
#define FLEXIO_SHIFTBUFNIS_REG(base,index)       ((base)->SHIFTBUFNIS[index])
#define FLEXIO_SHIFTBUFOES_REG(base,index)       ((base)->SHIFTBUFOES[index])
#define FLEXIO_SHIFTBUFEOS_REG(base,index)       ((base)->SHIFTBUFEOS[index])

/*!
 * @}
 */ /* end of group FLEXIO_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- FLEXIO Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXIO_Register_Masks FLEXIO Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
/*! @{ */
#define FLEXIO_VERID_FEATURE_MASK                (0xFFFFU)
#define FLEXIO_VERID_FEATURE_SHIFT               (0U)
/*! FEATURE - Feature Specification Number
 *  0b0000000000000000..Standard features implemented.
 *  0b0000000000000001..Supports state, logic and parallel modes.
 *  0b0000000000000010..Supports pin control registers.
 *  0b0000000000000011..Supports state, logic and parallel modes; plus pin control registers.
 */
#define FLEXIO_VERID_FEATURE(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_VERID_FEATURE_SHIFT)) & FLEXIO_VERID_FEATURE_MASK)
#define FLEXIO_VERID_MINOR_MASK                  (0xFF0000U)
#define FLEXIO_VERID_MINOR_SHIFT                 (16U)
/*! MINOR - Minor Version Number
 */
#define FLEXIO_VERID_MINOR(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_VERID_MINOR_SHIFT)) & FLEXIO_VERID_MINOR_MASK)
#define FLEXIO_VERID_MAJOR_MASK                  (0xFF000000U)
#define FLEXIO_VERID_MAJOR_SHIFT                 (24U)
/*! MAJOR - Major Version Number
 */
#define FLEXIO_VERID_MAJOR(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_VERID_MAJOR_SHIFT)) & FLEXIO_VERID_MAJOR_MASK)
/*! @} */

/*! @name PARAM - Parameter Register */
/*! @{ */
#define FLEXIO_PARAM_SHIFTER_MASK                (0xFFU)
#define FLEXIO_PARAM_SHIFTER_SHIFT               (0U)
/*! SHIFTER - Shifter Number
 */
#define FLEXIO_PARAM_SHIFTER(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_PARAM_SHIFTER_SHIFT)) & FLEXIO_PARAM_SHIFTER_MASK)
#define FLEXIO_PARAM_TIMER_MASK                  (0xFF00U)
#define FLEXIO_PARAM_TIMER_SHIFT                 (8U)
/*! TIMER - Timer Number
 */
#define FLEXIO_PARAM_TIMER(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_PARAM_TIMER_SHIFT)) & FLEXIO_PARAM_TIMER_MASK)
#define FLEXIO_PARAM_PIN_MASK                    (0xFF0000U)
#define FLEXIO_PARAM_PIN_SHIFT                   (16U)
/*! PIN - Pin Number
 */
#define FLEXIO_PARAM_PIN(x)                      (((uint32_t)(((uint32_t)(x)) << FLEXIO_PARAM_PIN_SHIFT)) & FLEXIO_PARAM_PIN_MASK)
#define FLEXIO_PARAM_TRIGGER_MASK                (0xFF000000U)
#define FLEXIO_PARAM_TRIGGER_SHIFT               (24U)
/*! TRIGGER - Trigger Number
 */
#define FLEXIO_PARAM_TRIGGER(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_PARAM_TRIGGER_SHIFT)) & FLEXIO_PARAM_TRIGGER_MASK)
/*! @} */

/*! @name CTRL - FlexIO Control Register */
/*! @{ */
#define FLEXIO_CTRL_FLEXEN_MASK                  (0x1U)
#define FLEXIO_CTRL_FLEXEN_SHIFT                 (0U)
#define FLEXIO_CTRL_SWRST_MASK                   (0x2U)
#define FLEXIO_CTRL_SWRST_SHIFT                  (1U)
#define FLEXIO_CTRL_FASTACC_MASK                 (0x4U)
#define FLEXIO_CTRL_FASTACC_SHIFT                (2U)
#define FLEXIO_CTRL_DBGE_MASK                    (0x40000000U)
#define FLEXIO_CTRL_DBGE_SHIFT                   (30U)
#define FLEXIO_CTRL_DOZEN_MASK                   (0x80000000U)
#define FLEXIO_CTRL_DOZEN_SHIFT                  (31U)
/*! @} */

/*! @name PIN - Pin State Register */
/*! @{ */
#define FLEXIO_PIN_PDI_MASK                      (0xFFFFU)
#define FLEXIO_PIN_PDI_SHIFT                     (0U)
/*! PDI - Pin Data Input
 */
#define FLEXIO_PIN_PDI(x)                        (((uint32_t)(((uint32_t)(x)) << FLEXIO_PIN_PDI_SHIFT)) & FLEXIO_PIN_PDI_MASK)
/*! @} */

/*! @name SHIFTSTAT - Shifter Status Register */
/*! @{ */
#define FLEXIO_SHIFTSTAT_SSF_MASK                (0xFFU)
#define FLEXIO_SHIFTSTAT_SSF_SHIFT               (0U)
/*! SSF - Shifter Status Flag
 */
#define FLEXIO_SHIFTSTAT_SSF(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTSTAT_SSF_SHIFT)) & FLEXIO_SHIFTSTAT_SSF_MASK)
/*! @} */

/*! @name SHIFTERR - Shifter Error Register */
/*! @{ */
#define FLEXIO_SHIFTERR_SEF_MASK                 (0xFFU)
#define FLEXIO_SHIFTERR_SEF_SHIFT                (0U)
/*! SEF - Shifter Error Flags
 */
#define FLEXIO_SHIFTERR_SEF(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTERR_SEF_SHIFT)) & FLEXIO_SHIFTERR_SEF_MASK)
/*! @} */

/*! @name TIMSTAT - Timer Status Register */
/*! @{ */
#define FLEXIO_TIMSTAT_TSF_MASK                  (0xFFU)
#define FLEXIO_TIMSTAT_TSF_SHIFT                 (0U)
/*! TSF - Timer Status Flags
 */
#define FLEXIO_TIMSTAT_TSF(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMSTAT_TSF_SHIFT)) & FLEXIO_TIMSTAT_TSF_MASK)
/*! @} */

/*! @name SHIFTSIEN - Shifter Status Interrupt Enable */
/*! @{ */
#define FLEXIO_SHIFTSIEN_SSIE_MASK               (0xFFU)
#define FLEXIO_SHIFTSIEN_SSIE_SHIFT              (0U)
/*! SSIE - Shifter Status Interrupt Enable
 */
#define FLEXIO_SHIFTSIEN_SSIE(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTSIEN_SSIE_SHIFT)) & FLEXIO_SHIFTSIEN_SSIE_MASK)
/*! @} */

/*! @name SHIFTEIEN - Shifter Error Interrupt Enable */
/*! @{ */
#define FLEXIO_SHIFTEIEN_SEIE_MASK               (0xFFU)
#define FLEXIO_SHIFTEIEN_SEIE_SHIFT              (0U)
/*! SEIE - Shifter Error Interrupt Enable
 */
#define FLEXIO_SHIFTEIEN_SEIE(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTEIEN_SEIE_SHIFT)) & FLEXIO_SHIFTEIEN_SEIE_MASK)
/*! @} */

/*! @name TIMIEN - Timer Interrupt Enable Register */
/*! @{ */
#define FLEXIO_TIMIEN_TEIE_MASK                  (0xFFU)
#define FLEXIO_TIMIEN_TEIE_SHIFT                 (0U)
/*! TEIE - Timer Status Interrupt Enable
 */
#define FLEXIO_TIMIEN_TEIE(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMIEN_TEIE_SHIFT)) & FLEXIO_TIMIEN_TEIE_MASK)
/*! @} */

/*! @name SHIFTSDEN - Shifter Status DMA Enable */
/*! @{ */
#define FLEXIO_SHIFTSDEN_SSDE_MASK               (0xFFU)
#define FLEXIO_SHIFTSDEN_SSDE_SHIFT              (0U)
/*! SSDE - Shifter Status DMA Enable
 */
#define FLEXIO_SHIFTSDEN_SSDE(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTSDEN_SSDE_SHIFT)) & FLEXIO_SHIFTSDEN_SSDE_MASK)
/*! @} */

/*! @name TIMERSDEN - Timer Status DMA Enable */
/*! @{ */
#define FLEXIO_TIMERSDEN_TSDE_MASK               (0xFFU)
#define FLEXIO_TIMERSDEN_TSDE_SHIFT              (0U)
/*! TSDE - Timer Status DMA Enable
 */
#define FLEXIO_TIMERSDEN_TSDE(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMERSDEN_TSDE_SHIFT)) & FLEXIO_TIMERSDEN_TSDE_MASK)
/*! @} */

/*! @name SHIFTSTATE - Shifter State Register */
/*! @{ */
#define FLEXIO_SHIFTSTATE_STATE_MASK             (0x7U)
#define FLEXIO_SHIFTSTATE_STATE_SHIFT            (0U)
/*! STATE - Current State Pointer
 */
#define FLEXIO_SHIFTSTATE_STATE(x)               (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTSTATE_STATE_SHIFT)) & FLEXIO_SHIFTSTATE_STATE_MASK)
/*! @} */

/*! @name TRGSTAT - Trigger Status Register */
/*! @{ */
#define FLEXIO_TRGSTAT_ETSF_MASK                 (0xFFFFU)
#define FLEXIO_TRGSTAT_ETSF_SHIFT                (0U)
/*! ETSF - External Trigger Status Flags
 */
#define FLEXIO_TRGSTAT_ETSF(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXIO_TRGSTAT_ETSF_SHIFT)) & FLEXIO_TRGSTAT_ETSF_MASK)
/*! @} */

/*! @name TRIGIEN - External Trigger Interrupt Enable Register */
/*! @{ */
#define FLEXIO_TRIGIEN_TRIE_MASK                 (0xFFFFU)
#define FLEXIO_TRIGIEN_TRIE_SHIFT                (0U)
/*! TRIE - External Trigger Interrupt Enable
 */
#define FLEXIO_TRIGIEN_TRIE(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXIO_TRIGIEN_TRIE_SHIFT)) & FLEXIO_TRIGIEN_TRIE_MASK)
/*! @} */

/*! @name PINSTAT - Pin Status Register */
/*! @{ */
#define FLEXIO_PINSTAT_PSF_MASK                  (0xFFFFU)
#define FLEXIO_PINSTAT_PSF_SHIFT                 (0U)
/*! PSF - Pin Status Flags
 */
#define FLEXIO_PINSTAT_PSF(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_PINSTAT_PSF_SHIFT)) & FLEXIO_PINSTAT_PSF_MASK)
/*! @} */

/*! @name PINIEN - Pin Interrupt Enable Register */
/*! @{ */
#define FLEXIO_PINIEN_PSIE_MASK                  (0xFFFFU)
#define FLEXIO_PINIEN_PSIE_SHIFT                 (0U)
/*! PSIE - Pin Status Interrupt Enable
 */
#define FLEXIO_PINIEN_PSIE(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_PINIEN_PSIE_SHIFT)) & FLEXIO_PINIEN_PSIE_MASK)
/*! @} */

/*! @name PINREN - Pin Rising Edge Enable Register */
/*! @{ */
#define FLEXIO_PINREN_PRE_MASK                   (0xFFFFU)
#define FLEXIO_PINREN_PRE_SHIFT                  (0U)
/*! PRE - Pin Rising Edge
 */
#define FLEXIO_PINREN_PRE(x)                     (((uint32_t)(((uint32_t)(x)) << FLEXIO_PINREN_PRE_SHIFT)) & FLEXIO_PINREN_PRE_MASK)
/*! @} */

/*! @name PINFEN - Pin Falling Edge Enable Register */
/*! @{ */
#define FLEXIO_PINFEN_PFE_MASK                   (0xFFFFU)
#define FLEXIO_PINFEN_PFE_SHIFT                  (0U)
/*! PFE - Pin Falling Edge
 */
#define FLEXIO_PINFEN_PFE(x)                     (((uint32_t)(((uint32_t)(x)) << FLEXIO_PINFEN_PFE_SHIFT)) & FLEXIO_PINFEN_PFE_MASK)
/*! @} */

/*! @name PINOUTD - Pin Output Data Register */
/*! @{ */
#define FLEXIO_PINOUTD_OUTD_MASK                 (0xFFFFU)
#define FLEXIO_PINOUTD_OUTD_SHIFT                (0U)
/*! OUTD - Output Data
 */
#define FLEXIO_PINOUTD_OUTD(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXIO_PINOUTD_OUTD_SHIFT)) & FLEXIO_PINOUTD_OUTD_MASK)
/*! @} */

/*! @name PINOUTE - Pin Output Enable Register */
/*! @{ */
#define FLEXIO_PINOUTE_OUTE_MASK                 (0xFFFFU)
#define FLEXIO_PINOUTE_OUTE_SHIFT                (0U)
/*! OUTE - Output Enable
 */
#define FLEXIO_PINOUTE_OUTE(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXIO_PINOUTE_OUTE_SHIFT)) & FLEXIO_PINOUTE_OUTE_MASK)
/*! @} */

/*! @name PINOUTDIS - Pin Output Disable Register */
/*! @{ */
#define FLEXIO_PINOUTDIS_OUTDIS_MASK             (0xFFFFU)
#define FLEXIO_PINOUTDIS_OUTDIS_SHIFT            (0U)
/*! OUTDIS - Output Disable
 */
#define FLEXIO_PINOUTDIS_OUTDIS(x)               (((uint32_t)(((uint32_t)(x)) << FLEXIO_PINOUTDIS_OUTDIS_SHIFT)) & FLEXIO_PINOUTDIS_OUTDIS_MASK)
/*! @} */

/*! @name PINOUTCLR - Pin Output Clear Register */
/*! @{ */
#define FLEXIO_PINOUTCLR_OUTCLR_MASK             (0xFFFFU)
#define FLEXIO_PINOUTCLR_OUTCLR_SHIFT            (0U)
/*! OUTCLR - Output Clear
 */
#define FLEXIO_PINOUTCLR_OUTCLR(x)               (((uint32_t)(((uint32_t)(x)) << FLEXIO_PINOUTCLR_OUTCLR_SHIFT)) & FLEXIO_PINOUTCLR_OUTCLR_MASK)
/*! @} */

/*! @name PINOUTSET - Pin Output Set Register */
/*! @{ */
#define FLEXIO_PINOUTSET_OUTSET_MASK             (0xFFFFU)
#define FLEXIO_PINOUTSET_OUTSET_SHIFT            (0U)
/*! OUTSET - Output Set
 */
#define FLEXIO_PINOUTSET_OUTSET(x)               (((uint32_t)(((uint32_t)(x)) << FLEXIO_PINOUTSET_OUTSET_SHIFT)) & FLEXIO_PINOUTSET_OUTSET_MASK)
/*! @} */

/*! @name PINOUTTOG - Pin Output Toggle Register */
/*! @{ */
#define FLEXIO_PINOUTTOG_OUTTOG_MASK             (0xFFFFU)
#define FLEXIO_PINOUTTOG_OUTTOG_SHIFT            (0U)
/*! OUTTOG - Output Toggle
 */
#define FLEXIO_PINOUTTOG_OUTTOG(x)               (((uint32_t)(((uint32_t)(x)) << FLEXIO_PINOUTTOG_OUTTOG_SHIFT)) & FLEXIO_PINOUTTOG_OUTTOG_MASK)
/*! @} */

/*! @name SHIFTCTL - Shifter Control N Register */
/*! @{ */
#define FLEXIO_SHIFTCTL_SMOD_MASK                (0x7U)
#define FLEXIO_SHIFTCTL_SMOD_SHIFT               (0U)
/*! SMOD - Shifter Mode
 *  0b000..Disabled.
 *  0b001..Receive mode. Captures the current Shifter content into the SHIFTBUF on expiration of the Timer.
 *  0b010..Transmit mode. Load SHIFTBUF contents into the Shifter on expiration of the Timer.
 *  0b011..Reserved.
 *  0b100..Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the Timer.
 *  0b101..Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents.
 *  0b110..State mode. SHIFTBUF contents are used for storing programmable state attributes.
 *  0b111..Logic mode. SHIFTBUF contents are used for implementing programmable logic look up table.
 */
#define FLEXIO_SHIFTCTL_SMOD(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCTL_SMOD_SHIFT)) & FLEXIO_SHIFTCTL_SMOD_MASK)
#define FLEXIO_SHIFTCTL_PINPOL_MASK              (0x80U)
#define FLEXIO_SHIFTCTL_PINPOL_SHIFT             (7U)
#define FLEXIO_SHIFTCTL_PINSEL_MASK              (0xF00U)
#define FLEXIO_SHIFTCTL_PINSEL_SHIFT             (8U)
/*! PINSEL - Shifter Pin Select
 */
#define FLEXIO_SHIFTCTL_PINSEL(x)                (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCTL_PINSEL_SHIFT)) & FLEXIO_SHIFTCTL_PINSEL_MASK)
#define FLEXIO_SHIFTCTL_PINCFG_MASK              (0x30000U)
#define FLEXIO_SHIFTCTL_PINCFG_SHIFT             (16U)
/*! PINCFG - Shifter Pin Configuration
 *  0b00..Shifter pin output disabled
 *  0b01..Shifter pin open drain or bidirectional output enable
 *  0b10..Shifter pin bidirectional output data
 *  0b11..Shifter pin output
 */
#define FLEXIO_SHIFTCTL_PINCFG(x)                (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCTL_PINCFG_SHIFT)) & FLEXIO_SHIFTCTL_PINCFG_MASK)
#define FLEXIO_SHIFTCTL_TIMPOL_MASK              (0x800000U)
#define FLEXIO_SHIFTCTL_TIMPOL_SHIFT             (23U)
#define FLEXIO_SHIFTCTL_TIMSEL_MASK              (0x7000000U)
#define FLEXIO_SHIFTCTL_TIMSEL_SHIFT             (24U)
/*! TIMSEL - Timer Select
 */
#define FLEXIO_SHIFTCTL_TIMSEL(x)                (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCTL_TIMSEL_SHIFT)) & FLEXIO_SHIFTCTL_TIMSEL_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTCTL */
#define FLEXIO_SHIFTCTL_COUNT                    (8U)

/*! @name SHIFTCFG - Shifter Configuration N Register */
/*! @{ */
#define FLEXIO_SHIFTCFG_SSTART_MASK              (0x3U)
#define FLEXIO_SHIFTCFG_SSTART_SHIFT             (0U)
/*! SSTART - Shifter Start bit
 *  0b00..Start bit disabled for transmitter/receiver/match store, transmitter loads data on enable
 *  0b01..Start bit disabled for transmitter/receiver/match store, transmitter loads data on first shift
 *  0b10..Transmitter outputs start bit value 0 before loading data on first shift, receiver/match store sets error flag if start bit is not 0
 *  0b11..Transmitter outputs start bit value 1 before loading data on first shift, receiver/match store sets error flag if start bit is not 1
 */
#define FLEXIO_SHIFTCFG_SSTART(x)                (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCFG_SSTART_SHIFT)) & FLEXIO_SHIFTCFG_SSTART_MASK)
#define FLEXIO_SHIFTCFG_SSTOP_MASK               (0x30U)
#define FLEXIO_SHIFTCFG_SSTOP_SHIFT              (4U)
/*! SSTOP - Shifter Stop bit
 *  0b00..Stop bit disabled for transmitter/receiver/match store
 *  0b01..Reserved for transmitter/receiver/match store
 *  0b10..Transmitter outputs stop bit value 0 on store, receiver/match store sets error flag if stop bit is not 0
 *  0b11..Transmitter outputs stop bit value 1 on store, receiver/match store sets error flag if stop bit is not 1
 */
#define FLEXIO_SHIFTCFG_SSTOP(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCFG_SSTOP_SHIFT)) & FLEXIO_SHIFTCFG_SSTOP_MASK)
#define FLEXIO_SHIFTCFG_INSRC_MASK               (0x100U)
#define FLEXIO_SHIFTCFG_INSRC_SHIFT              (8U)
#define FLEXIO_SHIFTCFG_LATST_MASK               (0x200U)
#define FLEXIO_SHIFTCFG_LATST_SHIFT              (9U)
#define FLEXIO_SHIFTCFG_PWIDTH_MASK              (0xF0000U)
#define FLEXIO_SHIFTCFG_PWIDTH_SHIFT             (16U)
/*! PWIDTH - Parallel Width
 */
#define FLEXIO_SHIFTCFG_PWIDTH(x)                (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCFG_PWIDTH_SHIFT)) & FLEXIO_SHIFTCFG_PWIDTH_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTCFG */
#define FLEXIO_SHIFTCFG_COUNT                    (8U)

/*! @name SHIFTBUF - Shifter Buffer N Register */
/*! @{ */
#define FLEXIO_SHIFTBUF_SHIFTBUF_MASK            (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUF_SHIFTBUF_SHIFT           (0U)
/*! SHIFTBUF - Shift Buffer
 */
#define FLEXIO_SHIFTBUF_SHIFTBUF(x)              (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUF_SHIFTBUF_SHIFT)) & FLEXIO_SHIFTBUF_SHIFTBUF_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTBUF */
#define FLEXIO_SHIFTBUF_COUNT                    (8U)

/*! @name SHIFTBUFBIS - Shifter Buffer N Bit Swapped Register */
/*! @{ */
#define FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_SHIFT     (0U)
/*! SHIFTBUFBIS - Shift Buffer
 */
#define FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_SHIFT)) & FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTBUFBIS */
#define FLEXIO_SHIFTBUFBIS_COUNT                 (8U)

/*! @name SHIFTBUFBYS - Shifter Buffer N Byte Swapped Register */
/*! @{ */
#define FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_SHIFT     (0U)
/*! SHIFTBUFBYS - Shift Buffer
 */
#define FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_SHIFT)) & FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTBUFBYS */
#define FLEXIO_SHIFTBUFBYS_COUNT                 (8U)

/*! @name SHIFTBUFBBS - Shifter Buffer N Bit Byte Swapped Register */
/*! @{ */
#define FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_SHIFT     (0U)
/*! SHIFTBUFBBS - Shift Buffer
 */
#define FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_SHIFT)) & FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTBUFBBS */
#define FLEXIO_SHIFTBUFBBS_COUNT                 (8U)

/*! @name TIMCTL - Timer Control N Register */
/*! @{ */
#define FLEXIO_TIMCTL_TIMOD_MASK                 (0x7U)
#define FLEXIO_TIMCTL_TIMOD_SHIFT                (0U)
/*! TIMOD - Timer Mode
 *  0b000..Timer Disabled.
 *  0b001..Dual 8-bit counters baud mode.
 *  0b010..Dual 8-bit counters PWM high mode.
 *  0b011..Single 16-bit counter mode.
 *  0b100..Single 16-bit counter disable mode.
 *  0b101..Dual 8-bit counters word mode.
 *  0b110..Dual 8-bit counters PWM low mode.
 *  0b111..Single 16-bit input capture mode.
 */
#define FLEXIO_TIMCTL_TIMOD(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCTL_TIMOD_SHIFT)) & FLEXIO_TIMCTL_TIMOD_MASK)
#define FLEXIO_TIMCTL_ONETIM_MASK                (0x20U)
#define FLEXIO_TIMCTL_ONETIM_SHIFT               (5U)
#define FLEXIO_TIMCTL_PININS_MASK                (0x40U)
#define FLEXIO_TIMCTL_PININS_SHIFT               (6U)
#define FLEXIO_TIMCTL_PINPOL_MASK                (0x80U)
#define FLEXIO_TIMCTL_PINPOL_SHIFT               (7U)
#define FLEXIO_TIMCTL_PINSEL_MASK                (0xF00U)
#define FLEXIO_TIMCTL_PINSEL_SHIFT               (8U)
/*! PINSEL - Timer Pin Select
 */
#define FLEXIO_TIMCTL_PINSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCTL_PINSEL_SHIFT)) & FLEXIO_TIMCTL_PINSEL_MASK)
#define FLEXIO_TIMCTL_PINCFG_MASK                (0x30000U)
#define FLEXIO_TIMCTL_PINCFG_SHIFT               (16U)
/*! PINCFG - Timer Pin Configuration
 *  0b00..Timer pin output disabled
 *  0b01..Timer pin open drain or bidirectional output enable
 *  0b10..Timer pin bidirectional output data
 *  0b11..Timer pin output
 */
#define FLEXIO_TIMCTL_PINCFG(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCTL_PINCFG_SHIFT)) & FLEXIO_TIMCTL_PINCFG_MASK)
#define FLEXIO_TIMCTL_TRGSRC_MASK                (0x400000U)
#define FLEXIO_TIMCTL_TRGSRC_SHIFT               (22U)
#define FLEXIO_TIMCTL_TRGPOL_MASK                (0x800000U)
#define FLEXIO_TIMCTL_TRGPOL_SHIFT               (23U)
#define FLEXIO_TIMCTL_TRGSEL_MASK                (0x1F000000U)
#define FLEXIO_TIMCTL_TRGSEL_SHIFT               (24U)
/*! TRGSEL - Trigger Select
 */
#define FLEXIO_TIMCTL_TRGSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCTL_TRGSEL_SHIFT)) & FLEXIO_TIMCTL_TRGSEL_MASK)
/*! @} */

/* The count of FLEXIO_TIMCTL */
#define FLEXIO_TIMCTL_COUNT                      (8U)

/*! @name TIMCFG - Timer Configuration N Register */
/*! @{ */
#define FLEXIO_TIMCFG_TSTART_MASK                (0x2U)
#define FLEXIO_TIMCFG_TSTART_SHIFT               (1U)
#define FLEXIO_TIMCFG_TSTOP_MASK                 (0x30U)
#define FLEXIO_TIMCFG_TSTOP_SHIFT                (4U)
/*! TSTOP - Timer Stop Bit
 *  0b00..Stop bit disabled
 *  0b01..Stop bit is enabled on timer compare
 *  0b10..Stop bit is enabled on timer disable
 *  0b11..Stop bit is enabled on timer compare and timer disable
 */
#define FLEXIO_TIMCFG_TSTOP(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TSTOP_SHIFT)) & FLEXIO_TIMCFG_TSTOP_MASK)
#define FLEXIO_TIMCFG_TIMENA_MASK                (0x700U)
#define FLEXIO_TIMCFG_TIMENA_SHIFT               (8U)
/*! TIMENA - Timer Enable
 *  0b000..Timer always enabled
 *  0b001..Timer enabled on Timer N-1 enable
 *  0b010..Timer enabled on Trigger high
 *  0b011..Timer enabled on Trigger high and Pin high
 *  0b100..Timer enabled on Pin rising edge
 *  0b101..Timer enabled on Pin rising edge and Trigger high
 *  0b110..Timer enabled on Trigger rising edge
 *  0b111..Timer enabled on Trigger rising or falling edge
 */
#define FLEXIO_TIMCFG_TIMENA(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TIMENA_SHIFT)) & FLEXIO_TIMCFG_TIMENA_MASK)
#define FLEXIO_TIMCFG_TIMDIS_MASK                (0x7000U)
#define FLEXIO_TIMCFG_TIMDIS_SHIFT               (12U)
/*! TIMDIS - Timer Disable
 *  0b000..Timer never disabled
 *  0b001..Timer disabled on Timer N-1 disable
 *  0b010..Timer disabled on Timer compare (upper 8-bits match and decrement)
 *  0b011..Timer disabled on Timer compare (upper 8-bits match and decrement) and Trigger Low
 *  0b100..Timer disabled on Pin rising or falling edge
 *  0b101..Timer disabled on Pin rising or falling edge provided Trigger is high
 *  0b110..Timer disabled on Trigger falling edge
 *  0b111..Reserved
 */
#define FLEXIO_TIMCFG_TIMDIS(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TIMDIS_SHIFT)) & FLEXIO_TIMCFG_TIMDIS_MASK)
#define FLEXIO_TIMCFG_TIMRST_MASK                (0x70000U)
#define FLEXIO_TIMCFG_TIMRST_SHIFT               (16U)
/*! TIMRST - Timer Reset
 *  0b000..Timer never reset
 *  0b001..Timer reset on Timer Output high.
 *  0b010..Timer reset on Timer Pin equal to Timer Output
 *  0b011..Timer reset on Timer Trigger equal to Timer Output
 *  0b100..Timer reset on Timer Pin rising edge
 *  0b101..Reserved
 *  0b110..Timer reset on Trigger rising edge
 *  0b111..Timer reset on Trigger rising or falling edge
 */
#define FLEXIO_TIMCFG_TIMRST(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TIMRST_SHIFT)) & FLEXIO_TIMCFG_TIMRST_MASK)
#define FLEXIO_TIMCFG_TIMDEC_MASK                (0x700000U)
#define FLEXIO_TIMCFG_TIMDEC_SHIFT               (20U)
/*! TIMDEC - Timer Decrement
 *  0b000..Decrement counter on FlexIO clock, Shift clock equals Timer output.
 *  0b001..Decrement counter on Trigger input (both edges), Shift clock equals Timer output.
 *  0b010..Decrement counter on Pin input (both edges), Shift clock equals Pin input.
 *  0b011..Decrement counter on Trigger input (both edges), Shift clock equals Trigger input.
 *  0b100..Decrement counter on FlexIO clock divided by 16, Shift clock equals Timer output.
 *  0b101..Decrement counter on FlexIO clock divided by 256, Shift clock equals Timer output.
 *  0b110..Decrement counter on Pin input (rising edge), Shift clock equals Pin input.
 *  0b111..Decrement counter on Trigger input (rising edge), Shift clock equals Trigger input.
 */
#define FLEXIO_TIMCFG_TIMDEC(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TIMDEC_SHIFT)) & FLEXIO_TIMCFG_TIMDEC_MASK)
#define FLEXIO_TIMCFG_TIMOUT_MASK                (0x3000000U)
#define FLEXIO_TIMCFG_TIMOUT_SHIFT               (24U)
/*! TIMOUT - Timer Output
 *  0b00..Timer output is logic one when enabled and is not affected by timer reset
 *  0b01..Timer output is logic zero when enabled and is not affected by timer reset
 *  0b10..Timer output is logic one when enabled and on timer reset
 *  0b11..Timer output is logic zero when enabled and on timer reset
 */
#define FLEXIO_TIMCFG_TIMOUT(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TIMOUT_SHIFT)) & FLEXIO_TIMCFG_TIMOUT_MASK)
/*! @} */

/* The count of FLEXIO_TIMCFG */
#define FLEXIO_TIMCFG_COUNT                      (8U)

/*! @name TIMCMP - Timer Compare N Register */
/*! @{ */
#define FLEXIO_TIMCMP_CMP_MASK                   (0xFFFFU)
#define FLEXIO_TIMCMP_CMP_SHIFT                  (0U)
/*! CMP - Timer Compare Value
 */
#define FLEXIO_TIMCMP_CMP(x)                     (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCMP_CMP_SHIFT)) & FLEXIO_TIMCMP_CMP_MASK)
/*! @} */

/* The count of FLEXIO_TIMCMP */
#define FLEXIO_TIMCMP_COUNT                      (8U)

/*! @name SHIFTBUFNBS - Shifter Buffer N Nibble Byte Swapped Register */
/*! @{ */
#define FLEXIO_SHIFTBUFNBS_SHIFTBUFNBS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFNBS_SHIFTBUFNBS_SHIFT     (0U)
/*! SHIFTBUFNBS - Shift Buffer
 */
#define FLEXIO_SHIFTBUFNBS_SHIFTBUFNBS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFNBS_SHIFTBUFNBS_SHIFT)) & FLEXIO_SHIFTBUFNBS_SHIFTBUFNBS_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTBUFNBS */
#define FLEXIO_SHIFTBUFNBS_COUNT                 (8U)

/*! @name SHIFTBUFHWS - Shifter Buffer N Half Word Swapped Register */
/*! @{ */
#define FLEXIO_SHIFTBUFHWS_SHIFTBUFHWS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFHWS_SHIFTBUFHWS_SHIFT     (0U)
/*! SHIFTBUFHWS - Shift Buffer
 */
#define FLEXIO_SHIFTBUFHWS_SHIFTBUFHWS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFHWS_SHIFTBUFHWS_SHIFT)) & FLEXIO_SHIFTBUFHWS_SHIFTBUFHWS_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTBUFHWS */
#define FLEXIO_SHIFTBUFHWS_COUNT                 (8U)

/*! @name SHIFTBUFNIS - Shifter Buffer N Nibble Swapped Register */
/*! @{ */
#define FLEXIO_SHIFTBUFNIS_SHIFTBUFNIS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFNIS_SHIFTBUFNIS_SHIFT     (0U)
/*! SHIFTBUFNIS - Shift Buffer
 */
#define FLEXIO_SHIFTBUFNIS_SHIFTBUFNIS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFNIS_SHIFTBUFNIS_SHIFT)) & FLEXIO_SHIFTBUFNIS_SHIFTBUFNIS_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTBUFNIS */
#define FLEXIO_SHIFTBUFNIS_COUNT                 (8U)

/*! @name SHIFTBUFOES - Shifter Buffer N Odd Even Swapped Register */
/*! @{ */
#define FLEXIO_SHIFTBUFOES_SHIFTBUFOES_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFOES_SHIFTBUFOES_SHIFT     (0U)
/*! SHIFTBUFOES - Shift Buffer
 */
#define FLEXIO_SHIFTBUFOES_SHIFTBUFOES(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFOES_SHIFTBUFOES_SHIFT)) & FLEXIO_SHIFTBUFOES_SHIFTBUFOES_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTBUFOES */
#define FLEXIO_SHIFTBUFOES_COUNT                 (8U)

/*! @name SHIFTBUFEOS - Shifter Buffer N Even Odd Swapped Register */
/*! @{ */
#define FLEXIO_SHIFTBUFEOS_SHIFTBUFEOS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFEOS_SHIFTBUFEOS_SHIFT     (0U)
/*! SHIFTBUFEOS - Shift Buffer
 */
#define FLEXIO_SHIFTBUFEOS_SHIFTBUFEOS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFEOS_SHIFTBUFEOS_SHIFT)) & FLEXIO_SHIFTBUFEOS_SHIFTBUFEOS_MASK)
/*! @} */

/* The count of FLEXIO_SHIFTBUFEOS */
#define FLEXIO_SHIFTBUFEOS_COUNT                 (8U)


/*!
 * @}
 */ /* end of group FLEXIO_Register_Masks */


/* FLEXIO - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral FLEXIO0 base pointer */
  #define FLEXIO0_BASE_PTR                         ((FLEXIO_MemMapPtr)0x50032000u)
  /** Peripheral FLEXIO0 base pointer */
  #define FLEXIO0_BASE_PTR_NS                      ((FLEXIO_MemMapPtr)0x40032000u)
  /** Array initializer of FLEXIO peripheral base pointers */
  #define FLEXIO_BASE_PTRS                         { FLEXIO0_BASE_PTR }
  /** Array initializer of FLEXIO peripheral base pointers */
  #define FLEXIO_BASE_PTRS_NS                      { FLEXIO0_BASE_PTR_NS }
#else
  /** Peripheral FLEXIO0 base pointer */
  #define FLEXIO0_BASE_PTR                         ((FLEXIO_MemMapPtr)0x40032000u)
  /** Array initializer of FLEXIO peripheral base pointers */
  #define FLEXIO_BASE_PTRS                         { FLEXIO0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- FLEXIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXIO_Register_Accessor_Macros FLEXIO - Register accessor macros
 * @{
 */


/* FLEXIO - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* FLEXIO0 */
  #define FLEXIO0_VERID                            FLEXIO_VERID_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_VERID_NS                         FLEXIO_VERID_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PARAM                            FLEXIO_PARAM_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PARAM_NS                         FLEXIO_PARAM_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_CTRL                             FLEXIO_CTRL_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_CTRL_NS                          FLEXIO_CTRL_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PIN                              FLEXIO_PIN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PIN_NS                           FLEXIO_PIN_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_SHIFTSTAT                        FLEXIO_SHIFTSTAT_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTSTAT_NS                     FLEXIO_SHIFTSTAT_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_SHIFTERR                         FLEXIO_SHIFTERR_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTERR_NS                      FLEXIO_SHIFTERR_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_TIMSTAT                          FLEXIO_TIMSTAT_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_TIMSTAT_NS                       FLEXIO_TIMSTAT_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_SHIFTSIEN                        FLEXIO_SHIFTSIEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTSIEN_NS                     FLEXIO_SHIFTSIEN_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_SHIFTEIEN                        FLEXIO_SHIFTEIEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTEIEN_NS                     FLEXIO_SHIFTEIEN_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_TIMIEN                           FLEXIO_TIMIEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_TIMIEN_NS                        FLEXIO_TIMIEN_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_SHIFTSDEN                        FLEXIO_SHIFTSDEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTSDEN_NS                     FLEXIO_SHIFTSDEN_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_TIMERSDEN                        FLEXIO_TIMERSDEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_TIMERSDEN_NS                     FLEXIO_TIMERSDEN_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_SHIFTSTATE                       FLEXIO_SHIFTSTATE_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTSTATE_NS                    FLEXIO_SHIFTSTATE_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_TRGSTAT                          FLEXIO_TRGSTAT_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_TRGSTAT_NS                       FLEXIO_TRGSTAT_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_TRIGIEN                          FLEXIO_TRIGIEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_TRIGIEN_NS                       FLEXIO_TRIGIEN_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PINSTAT                          FLEXIO_PINSTAT_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINSTAT_NS                       FLEXIO_PINSTAT_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PINIEN                           FLEXIO_PINIEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINIEN_NS                        FLEXIO_PINIEN_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PINREN                           FLEXIO_PINREN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINREN_NS                        FLEXIO_PINREN_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PINFEN                           FLEXIO_PINFEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINFEN_NS                        FLEXIO_PINFEN_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PINOUTD                          FLEXIO_PINOUTD_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTD_NS                       FLEXIO_PINOUTD_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PINOUTE                          FLEXIO_PINOUTE_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTE_NS                       FLEXIO_PINOUTE_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PINOUTDIS                        FLEXIO_PINOUTDIS_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTDIS_NS                     FLEXIO_PINOUTDIS_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PINOUTCLR                        FLEXIO_PINOUTCLR_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTCLR_NS                     FLEXIO_PINOUTCLR_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PINOUTSET                        FLEXIO_PINOUTSET_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTSET_NS                     FLEXIO_PINOUTSET_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_PINOUTTOG                        FLEXIO_PINOUTTOG_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTTOG_NS                     FLEXIO_PINOUTTOG_REG(FLEXIO0_BASE_PTR_NS)
  #define FLEXIO0_SHIFTCTL0                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTCTL0_NS                     FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTCTL1                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTCTL1_NS                     FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTCTL2                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTCTL2_NS                     FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTCTL3                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTCTL3_NS                     FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTCTL4                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTCTL4_NS                     FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTCTL5                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTCTL5_NS                     FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTCTL6                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTCTL6_NS                     FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTCTL7                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTCTL7_NS                     FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_SHIFTCFG0                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTCFG0_NS                     FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTCFG1                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTCFG1_NS                     FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTCFG2                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTCFG2_NS                     FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTCFG3                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTCFG3_NS                     FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTCFG4                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTCFG4_NS                     FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTCFG5                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTCFG5_NS                     FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTCFG6                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTCFG6_NS                     FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTCFG7                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTCFG7_NS                     FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_SHIFTBUF0                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUF0_NS                     FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTBUF1                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUF1_NS                     FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTBUF2                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUF2_NS                     FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTBUF3                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUF3_NS                     FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTBUF4                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUF4_NS                     FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTBUF5                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUF5_NS                     FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTBUF6                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUF6_NS                     FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTBUF7                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUF7_NS                     FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_SHIFTBUFBIS0                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFBIS0_NS                  FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTBUFBIS1                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFBIS1_NS                  FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTBUFBIS2                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFBIS2_NS                  FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTBUFBIS3                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFBIS3_NS                  FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTBUFBIS4                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFBIS4_NS                  FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTBUFBIS5                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFBIS5_NS                  FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTBUFBIS6                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFBIS6_NS                  FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTBUFBIS7                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFBIS7_NS                  FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_SHIFTBUFBYS0                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFBYS0_NS                  FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTBUFBYS1                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFBYS1_NS                  FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTBUFBYS2                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFBYS2_NS                  FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTBUFBYS3                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFBYS3_NS                  FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTBUFBYS4                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFBYS4_NS                  FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTBUFBYS5                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFBYS5_NS                  FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTBUFBYS6                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFBYS6_NS                  FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTBUFBYS7                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFBYS7_NS                  FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_SHIFTBUFBBS0                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFBBS0_NS                  FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTBUFBBS1                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFBBS1_NS                  FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTBUFBBS2                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFBBS2_NS                  FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTBUFBBS3                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFBBS3_NS                  FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTBUFBBS4                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFBBS4_NS                  FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTBUFBBS5                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFBBS5_NS                  FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTBUFBBS6                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFBBS6_NS                  FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTBUFBBS7                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFBBS7_NS                  FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_TIMCTL0                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_TIMCTL0_NS                       FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_TIMCTL1                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_TIMCTL1_NS                       FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_TIMCTL2                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_TIMCTL2_NS                       FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_TIMCTL3                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_TIMCTL3_NS                       FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_TIMCTL4                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_TIMCTL4_NS                       FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_TIMCTL5                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_TIMCTL5_NS                       FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_TIMCTL6                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_TIMCTL6_NS                       FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_TIMCTL7                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_TIMCTL7_NS                       FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_TIMCFG0                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_TIMCFG0_NS                       FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_TIMCFG1                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_TIMCFG1_NS                       FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_TIMCFG2                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_TIMCFG2_NS                       FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_TIMCFG3                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_TIMCFG3_NS                       FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_TIMCFG4                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_TIMCFG4_NS                       FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_TIMCFG5                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_TIMCFG5_NS                       FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_TIMCFG6                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_TIMCFG6_NS                       FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_TIMCFG7                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_TIMCFG7_NS                       FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_TIMCMP0                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_TIMCMP0_NS                       FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_TIMCMP1                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_TIMCMP1_NS                       FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_TIMCMP2                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_TIMCMP2_NS                       FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_TIMCMP3                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_TIMCMP3_NS                       FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_TIMCMP4                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_TIMCMP4_NS                       FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_TIMCMP5                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_TIMCMP5_NS                       FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_TIMCMP6                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_TIMCMP6_NS                       FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_TIMCMP7                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_TIMCMP7_NS                       FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_SHIFTBUFNBS0                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFNBS0_NS                  FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTBUFNBS1                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFNBS1_NS                  FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTBUFNBS2                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFNBS2_NS                  FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTBUFNBS3                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFNBS3_NS                  FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTBUFNBS4                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFNBS4_NS                  FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTBUFNBS5                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFNBS5_NS                  FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTBUFNBS6                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFNBS6_NS                  FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTBUFNBS7                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFNBS7_NS                  FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_SHIFTBUFHWS0                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFHWS0_NS                  FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTBUFHWS1                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFHWS1_NS                  FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTBUFHWS2                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFHWS2_NS                  FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTBUFHWS3                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFHWS3_NS                  FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTBUFHWS4                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFHWS4_NS                  FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTBUFHWS5                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFHWS5_NS                  FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTBUFHWS6                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFHWS6_NS                  FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTBUFHWS7                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFHWS7_NS                  FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_SHIFTBUFNIS0                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFNIS0_NS                  FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTBUFNIS1                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFNIS1_NS                  FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTBUFNIS2                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFNIS2_NS                  FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTBUFNIS3                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFNIS3_NS                  FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTBUFNIS4                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFNIS4_NS                  FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTBUFNIS5                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFNIS5_NS                  FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTBUFNIS6                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFNIS6_NS                  FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTBUFNIS7                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFNIS7_NS                  FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_SHIFTBUFOES0                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFOES0_NS                  FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTBUFOES1                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFOES1_NS                  FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTBUFOES2                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFOES2_NS                  FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTBUFOES3                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFOES3_NS                  FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTBUFOES4                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFOES4_NS                  FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTBUFOES5                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFOES5_NS                  FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTBUFOES6                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFOES6_NS                  FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTBUFOES7                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFOES7_NS                  FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR_NS,7)
  #define FLEXIO0_SHIFTBUFEOS0                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFEOS0_NS                  FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR_NS,0)
  #define FLEXIO0_SHIFTBUFEOS1                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFEOS1_NS                  FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR_NS,1)
  #define FLEXIO0_SHIFTBUFEOS2                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFEOS2_NS                  FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR_NS,2)
  #define FLEXIO0_SHIFTBUFEOS3                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFEOS3_NS                  FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR_NS,3)
  #define FLEXIO0_SHIFTBUFEOS4                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFEOS4_NS                  FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR_NS,4)
  #define FLEXIO0_SHIFTBUFEOS5                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFEOS5_NS                  FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR_NS,5)
  #define FLEXIO0_SHIFTBUFEOS6                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFEOS6_NS                  FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR_NS,6)
  #define FLEXIO0_SHIFTBUFEOS7                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFEOS7_NS                  FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR_NS,7)
#else
  /* FLEXIO0 */
  #define FLEXIO0_VERID                            FLEXIO_VERID_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PARAM                            FLEXIO_PARAM_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_CTRL                             FLEXIO_CTRL_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PIN                              FLEXIO_PIN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTSTAT                        FLEXIO_SHIFTSTAT_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTERR                         FLEXIO_SHIFTERR_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_TIMSTAT                          FLEXIO_TIMSTAT_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTSIEN                        FLEXIO_SHIFTSIEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTEIEN                        FLEXIO_SHIFTEIEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_TIMIEN                           FLEXIO_TIMIEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTSDEN                        FLEXIO_SHIFTSDEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_TIMERSDEN                        FLEXIO_TIMERSDEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTSTATE                       FLEXIO_SHIFTSTATE_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_TRGSTAT                          FLEXIO_TRGSTAT_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_TRIGIEN                          FLEXIO_TRIGIEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINSTAT                          FLEXIO_PINSTAT_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINIEN                           FLEXIO_PINIEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINREN                           FLEXIO_PINREN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINFEN                           FLEXIO_PINFEN_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTD                          FLEXIO_PINOUTD_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTE                          FLEXIO_PINOUTE_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTDIS                        FLEXIO_PINOUTDIS_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTCLR                        FLEXIO_PINOUTCLR_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTSET                        FLEXIO_PINOUTSET_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_PINOUTTOG                        FLEXIO_PINOUTTOG_REG(FLEXIO0_BASE_PTR)
  #define FLEXIO0_SHIFTCTL0                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTCTL1                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTCTL2                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTCTL3                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTCTL4                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTCTL5                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTCTL6                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTCTL7                        FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTCFG0                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTCFG1                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTCFG2                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTCFG3                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTCFG4                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTCFG5                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTCFG6                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTCFG7                        FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUF0                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUF1                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUF2                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUF3                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUF4                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUF5                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUF6                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUF7                        FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFBIS0                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFBIS1                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFBIS2                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFBIS3                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFBIS4                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFBIS5                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFBIS6                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFBIS7                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFBYS0                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFBYS1                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFBYS2                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFBYS3                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFBYS4                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFBYS5                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFBYS6                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFBYS7                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFBBS0                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFBBS1                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFBBS2                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFBBS3                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFBBS4                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFBBS5                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFBBS6                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFBBS7                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_TIMCTL0                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_TIMCTL1                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_TIMCTL2                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_TIMCTL3                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_TIMCTL4                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_TIMCTL5                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_TIMCTL6                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_TIMCTL7                          FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_TIMCFG0                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_TIMCFG1                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_TIMCFG2                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_TIMCFG3                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_TIMCFG4                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_TIMCFG5                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_TIMCFG6                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_TIMCFG7                          FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_TIMCMP0                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_TIMCMP1                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_TIMCMP2                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_TIMCMP3                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_TIMCMP4                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_TIMCMP5                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_TIMCMP6                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_TIMCMP7                          FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFNBS0                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFNBS1                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFNBS2                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFNBS3                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFNBS4                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFNBS5                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFNBS6                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFNBS7                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFHWS0                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFHWS1                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFHWS2                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFHWS3                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFHWS4                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFHWS5                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFHWS6                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFHWS7                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFNIS0                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFNIS1                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFNIS2                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFNIS3                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFNIS4                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFNIS5                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFNIS6                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFNIS7                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFOES0                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFOES1                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFOES2                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFOES3                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFOES4                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFOES5                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFOES6                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFOES7                     FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,7)
  #define FLEXIO0_SHIFTBUFEOS0                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,0)
  #define FLEXIO0_SHIFTBUFEOS1                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,1)
  #define FLEXIO0_SHIFTBUFEOS2                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,2)
  #define FLEXIO0_SHIFTBUFEOS3                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,3)
  #define FLEXIO0_SHIFTBUFEOS4                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,4)
  #define FLEXIO0_SHIFTBUFEOS5                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,5)
  #define FLEXIO0_SHIFTBUFEOS6                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,6)
  #define FLEXIO0_SHIFTBUFEOS7                     FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,7)
#endif

/* FLEXIO - Register array accessors */
#define FLEXIO0_SHIFTCTL(index)                  FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTCTL_NS(index)               FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTCTL(index)                  FLEXIO_SHIFTCTL_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTCFG(index)                  FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTCFG_NS(index)               FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTCFG(index)                  FLEXIO_SHIFTCFG_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUF(index)                  FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUF_NS(index)               FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTBUF(index)                  FLEXIO_SHIFTBUF_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFBIS(index)               FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFBIS_NS(index)            FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTBUFBIS(index)               FLEXIO_SHIFTBUFBIS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFBYS(index)               FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFBYS_NS(index)            FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTBUFBYS(index)               FLEXIO_SHIFTBUFBYS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFBBS(index)               FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFBBS_NS(index)            FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTBUFBBS(index)               FLEXIO_SHIFTBUFBBS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_TIMCTL(index)                    FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_TIMCTL_NS(index)                 FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_TIMCTL(index)                    FLEXIO_TIMCTL_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_TIMCFG(index)                    FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_TIMCFG_NS(index)                 FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_TIMCFG(index)                    FLEXIO_TIMCFG_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_TIMCMP(index)                    FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_TIMCMP_NS(index)                 FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_TIMCMP(index)                    FLEXIO_TIMCMP_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFNBS(index)               FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFNBS_NS(index)            FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTBUFNBS(index)               FLEXIO_SHIFTBUFNBS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFHWS(index)               FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFHWS_NS(index)            FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTBUFHWS(index)               FLEXIO_SHIFTBUFHWS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFNIS(index)               FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFNIS_NS(index)            FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTBUFNIS(index)               FLEXIO_SHIFTBUFNIS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFOES(index)               FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFOES_NS(index)            FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTBUFOES(index)               FLEXIO_SHIFTBUFOES_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFEOS(index)               FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,index)
#define FLEXIO0_SHIFTBUFEOS_NS(index)            FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR_NS,index)
#define FLEXIO0_SHIFTBUFEOS(index)               FLEXIO_SHIFTBUFEOS_REG(FLEXIO0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group FLEXIO_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group FLEXIO_Peripheral */


/* ----------------------------------------------------------------------------
   -- FLEXSPI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXSPI_Peripheral FLEXSPI
 * @{
 */

/** FLEXSPI - Peripheral register structure */
typedef struct FLEXSPI_MemMap {
  uint32_t MCR0;                                   /**< Module Control Register 0, offset: 0x0 */
  uint32_t MCR1;                                   /**< Module Control Register 1, offset: 0x4 */
  uint32_t MCR2;                                   /**< Module Control Register 2, offset: 0x8 */
  uint32_t AHBCR;                                  /**< AHB Bus Control Register, offset: 0xC */
  uint32_t INTEN;                                  /**< Interrupt Enable Register, offset: 0x10 */
  uint32_t INTR;                                   /**< Interrupt Register, offset: 0x14 */
  uint32_t LUTKEY;                                 /**< LUT Key Register, offset: 0x18 */
  uint32_t LUTCR;                                  /**< LUT Control Register, offset: 0x1C */
  uint32_t AHBRXBUFCR0[8];                         /**< AHB RX Buffer 0 Control Register 0..AHB RX Buffer 7 Control Register 0, array offset: 0x20, array step: 0x4 */
  uint8_t RESERVED_0[32];
  uint32_t FLSHCR0[4];                             /**< Flash Control Register 0, array offset: 0x60, array step: 0x4 */
  uint32_t FLSHCR1[4];                             /**< Flash Control Register 1, array offset: 0x70, array step: 0x4 */
  uint32_t FLSHCR2[4];                             /**< Flash Control Register 2, array offset: 0x80, array step: 0x4 */
  uint8_t RESERVED_1[4];
  uint32_t FLSHCR4;                                /**< Flash Control Register 4, offset: 0x94 */
  uint8_t RESERVED_2[8];
  uint32_t IPCR0;                                  /**< IP Control Register 0, offset: 0xA0 */
  uint32_t IPCR1;                                  /**< IP Control Register 1, offset: 0xA4 */
  uint8_t RESERVED_3[8];
  uint32_t IPCMD;                                  /**< IP Command Register, offset: 0xB0 */
  uint32_t DLPR;                                   /**< Data Learn Pattern Register, offset: 0xB4 */
  uint32_t IPRXFCR;                                /**< IP RX FIFO Control Register, offset: 0xB8 */
  uint32_t IPTXFCR;                                /**< IP TX FIFO Control Register, offset: 0xBC */
  uint32_t DLLCR[2];                               /**< DLL Control Register 0, array offset: 0xC0, array step: 0x4 */
  uint8_t RESERVED_4[24];
  uint32_t STS0;                                   /**< Status Register 0, offset: 0xE0 */
  uint32_t STS1;                                   /**< Status Register 1, offset: 0xE4 */
  uint32_t STS2;                                   /**< Status Register 2, offset: 0xE8 */
  uint32_t AHBSPNDSTS;                             /**< AHB Suspend Status Register, offset: 0xEC */
  uint32_t IPRXFSTS;                               /**< IP RX FIFO Status Register, offset: 0xF0 */
  uint32_t IPTXFSTS;                               /**< IP TX FIFO Status Register, offset: 0xF4 */
  uint8_t RESERVED_5[8];
  uint32_t RFDR[32];                               /**< IP RX FIFO Data Register 0..IP RX FIFO Data Register 31, array offset: 0x100, array step: 0x4 */
  uint32_t TFDR[32];                               /**< IP TX FIFO Data Register 0..IP TX FIFO Data Register 31, array offset: 0x180, array step: 0x4 */
  uint32_t LUT[64];                                /**< LUT 0..LUT 63, array offset: 0x200, array step: 0x4 */
} volatile *FLEXSPI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- FLEXSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXSPI_Register_Accessor_Macros FLEXSPI - Register accessor macros
 * @{
 */


/* FLEXSPI - Register accessors */
#define FLEXSPI_MCR0_REG(base)                   ((base)->MCR0)
#define FLEXSPI_MCR1_REG(base)                   ((base)->MCR1)
#define FLEXSPI_MCR2_REG(base)                   ((base)->MCR2)
#define FLEXSPI_AHBCR_REG(base)                  ((base)->AHBCR)
#define FLEXSPI_INTEN_REG(base)                  ((base)->INTEN)
#define FLEXSPI_INTR_REG(base)                   ((base)->INTR)
#define FLEXSPI_LUTKEY_REG(base)                 ((base)->LUTKEY)
#define FLEXSPI_LUTCR_REG(base)                  ((base)->LUTCR)
#define FLEXSPI_AHBRXBUFCR0_REG(base,index)      ((base)->AHBRXBUFCR0[index])
#define FLEXSPI_FLSHCR0_REG(base,index)          ((base)->FLSHCR0[index])
#define FLEXSPI_FLSHCR1_REG(base,index)          ((base)->FLSHCR1[index])
#define FLEXSPI_FLSHCR2_REG(base,index)          ((base)->FLSHCR2[index])
#define FLEXSPI_FLSHCR4_REG(base)                ((base)->FLSHCR4)
#define FLEXSPI_IPCR0_REG(base)                  ((base)->IPCR0)
#define FLEXSPI_IPCR1_REG(base)                  ((base)->IPCR1)
#define FLEXSPI_IPCMD_REG(base)                  ((base)->IPCMD)
#define FLEXSPI_DLPR_REG(base)                   ((base)->DLPR)
#define FLEXSPI_IPRXFCR_REG(base)                ((base)->IPRXFCR)
#define FLEXSPI_IPTXFCR_REG(base)                ((base)->IPTXFCR)
#define FLEXSPI_DLLCR_REG(base,index)            ((base)->DLLCR[index])
#define FLEXSPI_STS0_REG(base)                   ((base)->STS0)
#define FLEXSPI_STS1_REG(base)                   ((base)->STS1)
#define FLEXSPI_STS2_REG(base)                   ((base)->STS2)
#define FLEXSPI_AHBSPNDSTS_REG(base)             ((base)->AHBSPNDSTS)
#define FLEXSPI_IPRXFSTS_REG(base)               ((base)->IPRXFSTS)
#define FLEXSPI_IPTXFSTS_REG(base)               ((base)->IPTXFSTS)
#define FLEXSPI_RFDR_REG(base,index)             ((base)->RFDR[index])
#define FLEXSPI_TFDR_REG(base,index)             ((base)->TFDR[index])
#define FLEXSPI_LUT_REG(base,index)              ((base)->LUT[index])

/*!
 * @}
 */ /* end of group FLEXSPI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- FLEXSPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXSPI_Register_Masks FLEXSPI Register Masks
 * @{
 */

/*! @name MCR0 - Module Control Register 0 */
/*! @{ */
#define FLEXSPI_MCR0_SWRESET_MASK                (0x1U)
#define FLEXSPI_MCR0_SWRESET_SHIFT               (0U)
#define FLEXSPI_MCR0_MDIS_MASK                   (0x2U)
#define FLEXSPI_MCR0_MDIS_SHIFT                  (1U)
#define FLEXSPI_MCR0_RXCLKSRC_MASK               (0x30U)
#define FLEXSPI_MCR0_RXCLKSRC_SHIFT              (4U)
/*! RXCLKSRC - Sample Clock source selection for Flash Reading
 *  0b00..Dummy Read strobe generated by FlexSPI Controller and loopback internally.
 *  0b01..Dummy Read strobe generated by FlexSPI Controller and loopback from DQS pad.
 *  0b10..Reserved
 *  0b11..Flash provided Read strobe and input from DQS pad
 */
#define FLEXSPI_MCR0_RXCLKSRC(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR0_RXCLKSRC_SHIFT)) & FLEXSPI_MCR0_RXCLKSRC_MASK)
#define FLEXSPI_MCR0_SERCLKDIV_MASK              (0x700U)
#define FLEXSPI_MCR0_SERCLKDIV_SHIFT             (8U)
/*! SERCLKDIV - The serial root clock could be divided inside FlexSPI wrapper. Refer Clocks chapter for more details on clocking.
 *  0b000..Divided by 1
 *  0b001..Divided by 2
 *  0b010..Divided by 3
 *  0b011..Divided by 4
 *  0b100..Divided by 5
 *  0b101..Divided by 6
 *  0b110..Divided by 7
 *  0b111..Divided by 8
 */
#define FLEXSPI_MCR0_SERCLKDIV(x)                (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR0_SERCLKDIV_SHIFT)) & FLEXSPI_MCR0_SERCLKDIV_MASK)
#define FLEXSPI_MCR0_HSEN_MASK                   (0x800U)
#define FLEXSPI_MCR0_HSEN_SHIFT                  (11U)
#define FLEXSPI_MCR0_DOZEEN_MASK                 (0x1000U)
#define FLEXSPI_MCR0_DOZEEN_SHIFT                (12U)
#define FLEXSPI_MCR0_COMBINATIONEN_MASK          (0x2000U)
#define FLEXSPI_MCR0_COMBINATIONEN_SHIFT         (13U)
#define FLEXSPI_MCR0_SCKFREERUNEN_MASK           (0x4000U)
#define FLEXSPI_MCR0_SCKFREERUNEN_SHIFT          (14U)
#define FLEXSPI_MCR0_LEARNEN_MASK                (0x8000U)
#define FLEXSPI_MCR0_LEARNEN_SHIFT               (15U)
#define FLEXSPI_MCR0_IPGRANTWAIT_MASK            (0xFF0000U)
#define FLEXSPI_MCR0_IPGRANTWAIT_SHIFT           (16U)
/*! IPGRANTWAIT - Time out wait cycle for IP command grant.
 */
#define FLEXSPI_MCR0_IPGRANTWAIT(x)              (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR0_IPGRANTWAIT_SHIFT)) & FLEXSPI_MCR0_IPGRANTWAIT_MASK)
#define FLEXSPI_MCR0_AHBGRANTWAIT_MASK           (0xFF000000U)
#define FLEXSPI_MCR0_AHBGRANTWAIT_SHIFT          (24U)
/*! AHBGRANTWAIT - Timeout wait cycle for AHB command grant.
 */
#define FLEXSPI_MCR0_AHBGRANTWAIT(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR0_AHBGRANTWAIT_SHIFT)) & FLEXSPI_MCR0_AHBGRANTWAIT_MASK)
/*! @} */

/*! @name MCR1 - Module Control Register 1 */
/*! @{ */
#define FLEXSPI_MCR1_AHBBUSWAIT_MASK             (0xFFFFU)
#define FLEXSPI_MCR1_AHBBUSWAIT_SHIFT            (0U)
#define FLEXSPI_MCR1_AHBBUSWAIT(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR1_AHBBUSWAIT_SHIFT)) & FLEXSPI_MCR1_AHBBUSWAIT_MASK)
#define FLEXSPI_MCR1_SEQWAIT_MASK                (0xFFFF0000U)
#define FLEXSPI_MCR1_SEQWAIT_SHIFT               (16U)
#define FLEXSPI_MCR1_SEQWAIT(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR1_SEQWAIT_SHIFT)) & FLEXSPI_MCR1_SEQWAIT_MASK)
/*! @} */

/*! @name MCR2 - Module Control Register 2 */
/*! @{ */
#define FLEXSPI_MCR2_CLRAHBBUFOPT_MASK           (0x800U)
#define FLEXSPI_MCR2_CLRAHBBUFOPT_SHIFT          (11U)
#define FLEXSPI_MCR2_CLRLEARNPHASE_MASK          (0x4000U)
#define FLEXSPI_MCR2_CLRLEARNPHASE_SHIFT         (14U)
#define FLEXSPI_MCR2_SAMEDEVICEEN_MASK           (0x8000U)
#define FLEXSPI_MCR2_SAMEDEVICEEN_SHIFT          (15U)
#define FLEXSPI_MCR2_SCKBDIFFOPT_MASK            (0x80000U)
#define FLEXSPI_MCR2_SCKBDIFFOPT_SHIFT           (19U)
#define FLEXSPI_MCR2_RESUMEWAIT_MASK             (0xFF000000U)
#define FLEXSPI_MCR2_RESUMEWAIT_SHIFT            (24U)
/*! RESUMEWAIT - Wait cycle (in AHB clock cycle) for idle state before suspended command sequence resumed.
 */
#define FLEXSPI_MCR2_RESUMEWAIT(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR2_RESUMEWAIT_SHIFT)) & FLEXSPI_MCR2_RESUMEWAIT_MASK)
/*! @} */

/*! @name AHBCR - AHB Bus Control Register */
/*! @{ */
#define FLEXSPI_AHBCR_APAREN_MASK                (0x1U)
#define FLEXSPI_AHBCR_APAREN_SHIFT               (0U)
#define FLEXSPI_AHBCR_CACHABLEEN_MASK            (0x8U)
#define FLEXSPI_AHBCR_CACHABLEEN_SHIFT           (3U)
#define FLEXSPI_AHBCR_BUFFERABLEEN_MASK          (0x10U)
#define FLEXSPI_AHBCR_BUFFERABLEEN_SHIFT         (4U)
#define FLEXSPI_AHBCR_PREFETCHEN_MASK            (0x20U)
#define FLEXSPI_AHBCR_PREFETCHEN_SHIFT           (5U)
#define FLEXSPI_AHBCR_READADDROPT_MASK           (0x40U)
#define FLEXSPI_AHBCR_READADDROPT_SHIFT          (6U)
#define FLEXSPI_AHBCR_READSZALIGN_MASK           (0x400U)
#define FLEXSPI_AHBCR_READSZALIGN_SHIFT          (10U)
/*! @} */

/*! @name INTEN - Interrupt Enable Register */
/*! @{ */
#define FLEXSPI_INTEN_IPCMDDONEEN_MASK           (0x1U)
#define FLEXSPI_INTEN_IPCMDDONEEN_SHIFT          (0U)
#define FLEXSPI_INTEN_IPCMDGEEN_MASK             (0x2U)
#define FLEXSPI_INTEN_IPCMDGEEN_SHIFT            (1U)
#define FLEXSPI_INTEN_AHBCMDGEEN_MASK            (0x4U)
#define FLEXSPI_INTEN_AHBCMDGEEN_SHIFT           (2U)
#define FLEXSPI_INTEN_IPCMDERREN_MASK            (0x8U)
#define FLEXSPI_INTEN_IPCMDERREN_SHIFT           (3U)
#define FLEXSPI_INTEN_AHBCMDERREN_MASK           (0x10U)
#define FLEXSPI_INTEN_AHBCMDERREN_SHIFT          (4U)
#define FLEXSPI_INTEN_IPRXWAEN_MASK              (0x20U)
#define FLEXSPI_INTEN_IPRXWAEN_SHIFT             (5U)
#define FLEXSPI_INTEN_IPTXWEEN_MASK              (0x40U)
#define FLEXSPI_INTEN_IPTXWEEN_SHIFT             (6U)
#define FLEXSPI_INTEN_DATALEARNFAILEN_MASK       (0x80U)
#define FLEXSPI_INTEN_DATALEARNFAILEN_SHIFT      (7U)
#define FLEXSPI_INTEN_SCKSTOPBYRDEN_MASK         (0x100U)
#define FLEXSPI_INTEN_SCKSTOPBYRDEN_SHIFT        (8U)
#define FLEXSPI_INTEN_SCKSTOPBYWREN_MASK         (0x200U)
#define FLEXSPI_INTEN_SCKSTOPBYWREN_SHIFT        (9U)
#define FLEXSPI_INTEN_AHBBUSERROREN_MASK         (0x400U)
#define FLEXSPI_INTEN_AHBBUSERROREN_SHIFT        (10U)
#define FLEXSPI_INTEN_AHBBUSTIMEOUTEN_MASK       (0x400U)
#define FLEXSPI_INTEN_AHBBUSTIMEOUTEN_SHIFT      (10U)
#define FLEXSPI_INTEN_SEQTIMEOUTEN_MASK          (0x800U)
#define FLEXSPI_INTEN_SEQTIMEOUTEN_SHIFT         (11U)
#define FLEXSPI_INTEN_KEYDONEEN_MASK             (0x1000U)
#define FLEXSPI_INTEN_KEYDONEEN_SHIFT            (12U)
#define FLEXSPI_INTEN_KEYERROREN_MASK            (0x2000U)
#define FLEXSPI_INTEN_KEYERROREN_SHIFT           (13U)
/*! @} */

/*! @name INTR - Interrupt Register */
/*! @{ */
#define FLEXSPI_INTR_IPCMDDONE_MASK              (0x1U)
#define FLEXSPI_INTR_IPCMDDONE_SHIFT             (0U)
#define FLEXSPI_INTR_IPCMDGE_MASK                (0x2U)
#define FLEXSPI_INTR_IPCMDGE_SHIFT               (1U)
#define FLEXSPI_INTR_AHBCMDGE_MASK               (0x4U)
#define FLEXSPI_INTR_AHBCMDGE_SHIFT              (2U)
#define FLEXSPI_INTR_IPCMDERR_MASK               (0x8U)
#define FLEXSPI_INTR_IPCMDERR_SHIFT              (3U)
#define FLEXSPI_INTR_AHBCMDERR_MASK              (0x10U)
#define FLEXSPI_INTR_AHBCMDERR_SHIFT             (4U)
#define FLEXSPI_INTR_IPRXWA_MASK                 (0x20U)
#define FLEXSPI_INTR_IPRXWA_SHIFT                (5U)
#define FLEXSPI_INTR_IPTXWE_MASK                 (0x40U)
#define FLEXSPI_INTR_IPTXWE_SHIFT                (6U)
#define FLEXSPI_INTR_DATALEARNFAIL_MASK          (0x80U)
#define FLEXSPI_INTR_DATALEARNFAIL_SHIFT         (7U)
#define FLEXSPI_INTR_SCKSTOPBYRD_MASK            (0x100U)
#define FLEXSPI_INTR_SCKSTOPBYRD_SHIFT           (8U)
#define FLEXSPI_INTR_SCKSTOPBYWR_MASK            (0x200U)
#define FLEXSPI_INTR_SCKSTOPBYWR_SHIFT           (9U)
#define FLEXSPI_INTR_AHBBUSERROR_MASK            (0x400U)
#define FLEXSPI_INTR_AHBBUSERROR_SHIFT           (10U)
#define FLEXSPI_INTR_AHBBUSTIMEOUT_MASK          (0x400U)
#define FLEXSPI_INTR_AHBBUSTIMEOUT_SHIFT         (10U)
#define FLEXSPI_INTR_SEQTIMEOUT_MASK             (0x800U)
#define FLEXSPI_INTR_SEQTIMEOUT_SHIFT            (11U)
#define FLEXSPI_INTR_KEYDONE_MASK                (0x1000U)
#define FLEXSPI_INTR_KEYDONE_SHIFT               (12U)
#define FLEXSPI_INTR_KEYERROR_MASK               (0x2000U)
#define FLEXSPI_INTR_KEYERROR_SHIFT              (13U)
/*! @} */

/*! @name LUTKEY - LUT Key Register */
/*! @{ */
#define FLEXSPI_LUTKEY_KEY_MASK                  (0xFFFFFFFFU)
#define FLEXSPI_LUTKEY_KEY_SHIFT                 (0U)
/*! KEY - The Key to lock or unlock LUT.
 */
#define FLEXSPI_LUTKEY_KEY(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUTKEY_KEY_SHIFT)) & FLEXSPI_LUTKEY_KEY_MASK)
/*! @} */

/*! @name LUTCR - LUT Control Register */
/*! @{ */
#define FLEXSPI_LUTCR_LOCK_MASK                  (0x1U)
#define FLEXSPI_LUTCR_LOCK_SHIFT                 (0U)
#define FLEXSPI_LUTCR_UNLOCK_MASK                (0x2U)
#define FLEXSPI_LUTCR_UNLOCK_SHIFT               (1U)
/*! @} */

/*! @name AHBRXBUFCR0 - AHB RX Buffer 0 Control Register 0..AHB RX Buffer 7 Control Register 0 */
/*! @{ */
#define FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK           (0x1FFU)  /* Merged from fields with different position or width, of widths (8, 9), largest definition used */
#define FLEXSPI_AHBRXBUFCR0_BUFSZ_SHIFT          (0U)
/*! BUFSZ - AHB RX Buffer Size in 64 bits.
 */
#define FLEXSPI_AHBRXBUFCR0_BUFSZ(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_AHBRXBUFCR0_BUFSZ_SHIFT)) & FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK)  /* Merged from fields with different position or width, of widths (8, 9), largest definition used */
#define FLEXSPI_AHBRXBUFCR0_MSTRID_MASK          (0xF0000U)
#define FLEXSPI_AHBRXBUFCR0_MSTRID_SHIFT         (16U)
/*! MSTRID - This AHB RX Buffer is assigned according to AHB Master with ID (MSTR_ID).
 */
#define FLEXSPI_AHBRXBUFCR0_MSTRID(x)            (((uint32_t)(((uint32_t)(x)) << FLEXSPI_AHBRXBUFCR0_MSTRID_SHIFT)) & FLEXSPI_AHBRXBUFCR0_MSTRID_MASK)
#define FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK        (0x7000000U)
#define FLEXSPI_AHBRXBUFCR0_PRIORITY_SHIFT       (24U)
/*! PRIORITY - This priority for AHB Master Read which this AHB RX Buffer is assigned. 7 is the highest priority, 0 the lowest.
 */
#define FLEXSPI_AHBRXBUFCR0_PRIORITY(x)          (((uint32_t)(((uint32_t)(x)) << FLEXSPI_AHBRXBUFCR0_PRIORITY_SHIFT)) & FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK)
#define FLEXSPI_AHBRXBUFCR0_PREFETCHEN_MASK      (0x80000000U)
#define FLEXSPI_AHBRXBUFCR0_PREFETCHEN_SHIFT     (31U)
/*! @} */

/* The count of FLEXSPI_AHBRXBUFCR0 */
#define FLEXSPI_AHBRXBUFCR0_COUNT                (8U)

/*! @name FLSHCR0 - Flash Control Register 0 */
/*! @{ */
#define FLEXSPI_FLSHCR0_FLSHSZ_MASK              (0x7FFFFFU)
#define FLEXSPI_FLSHCR0_FLSHSZ_SHIFT             (0U)
/*! FLSHSZ - Flash Size in KByte.
 */
#define FLEXSPI_FLSHCR0_FLSHSZ(x)                (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR0_FLSHSZ_SHIFT)) & FLEXSPI_FLSHCR0_FLSHSZ_MASK)
/*! @} */

/* The count of FLEXSPI_FLSHCR0 */
#define FLEXSPI_FLSHCR0_COUNT                    (4U)

/*! @name FLSHCR1 - Flash Control Register 1 */
/*! @{ */
#define FLEXSPI_FLSHCR1_TCSS_MASK                (0x1FU)
#define FLEXSPI_FLSHCR1_TCSS_SHIFT               (0U)
/*! TCSS - Serial Flash CS setup time.
 */
#define FLEXSPI_FLSHCR1_TCSS(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR1_TCSS_SHIFT)) & FLEXSPI_FLSHCR1_TCSS_MASK)
#define FLEXSPI_FLSHCR1_TCSH_MASK                (0x3E0U)
#define FLEXSPI_FLSHCR1_TCSH_SHIFT               (5U)
/*! TCSH - Serial Flash CS Hold time.
 */
#define FLEXSPI_FLSHCR1_TCSH(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR1_TCSH_SHIFT)) & FLEXSPI_FLSHCR1_TCSH_MASK)
#define FLEXSPI_FLSHCR1_WA_MASK                  (0x400U)
#define FLEXSPI_FLSHCR1_WA_SHIFT                 (10U)
#define FLEXSPI_FLSHCR1_CAS_MASK                 (0x7800U)
#define FLEXSPI_FLSHCR1_CAS_SHIFT                (11U)
/*! CAS - Column Address Size.
 */
#define FLEXSPI_FLSHCR1_CAS(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR1_CAS_SHIFT)) & FLEXSPI_FLSHCR1_CAS_MASK)
#define FLEXSPI_FLSHCR1_CSINTERVALUNIT_MASK      (0x8000U)
#define FLEXSPI_FLSHCR1_CSINTERVALUNIT_SHIFT     (15U)
#define FLEXSPI_FLSHCR1_CSINTERVAL_MASK          (0xFFFF0000U)
#define FLEXSPI_FLSHCR1_CSINTERVAL_SHIFT         (16U)
/*! CSINTERVAL - This field is used to set the minimum interval between flash device Chip selection
 *    deassertion and flash device Chip selection assertion. If external flash has a limitation on
 *    the interval between command sequences, this field should be set accordingly. If there is no
 *    limitation, set this field with value 0x0.
 */
#define FLEXSPI_FLSHCR1_CSINTERVAL(x)            (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR1_CSINTERVAL_SHIFT)) & FLEXSPI_FLSHCR1_CSINTERVAL_MASK)
/*! @} */

/* The count of FLEXSPI_FLSHCR1 */
#define FLEXSPI_FLSHCR1_COUNT                    (4U)

/*! @name FLSHCR2 - Flash Control Register 2 */
/*! @{ */
#define FLEXSPI_FLSHCR2_ARDSEQID_MASK            (0xFU)
#define FLEXSPI_FLSHCR2_ARDSEQID_SHIFT           (0U)
/*! ARDSEQID - Sequence Index for AHB Read triggered Command in LUT.
 */
#define FLEXSPI_FLSHCR2_ARDSEQID(x)              (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_ARDSEQID_SHIFT)) & FLEXSPI_FLSHCR2_ARDSEQID_MASK)
#define FLEXSPI_FLSHCR2_ARDSEQNUM_MASK           (0xE0U)
#define FLEXSPI_FLSHCR2_ARDSEQNUM_SHIFT          (5U)
/*! ARDSEQNUM - Sequence Number for AHB Read triggered Command in LUT.
 */
#define FLEXSPI_FLSHCR2_ARDSEQNUM(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_ARDSEQNUM_SHIFT)) & FLEXSPI_FLSHCR2_ARDSEQNUM_MASK)
#define FLEXSPI_FLSHCR2_AWRSEQID_MASK            (0xF00U)
#define FLEXSPI_FLSHCR2_AWRSEQID_SHIFT           (8U)
/*! AWRSEQID - Sequence Index for AHB Write triggered Command.
 */
#define FLEXSPI_FLSHCR2_AWRSEQID(x)              (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_AWRSEQID_SHIFT)) & FLEXSPI_FLSHCR2_AWRSEQID_MASK)
#define FLEXSPI_FLSHCR2_AWRSEQNUM_MASK           (0xE000U)
#define FLEXSPI_FLSHCR2_AWRSEQNUM_SHIFT          (13U)
/*! AWRSEQNUM - Sequence Number for AHB Write triggered Command.
 */
#define FLEXSPI_FLSHCR2_AWRSEQNUM(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_AWRSEQNUM_SHIFT)) & FLEXSPI_FLSHCR2_AWRSEQNUM_MASK)
#define FLEXSPI_FLSHCR2_AWRWAIT_MASK             (0xFFF0000U)
#define FLEXSPI_FLSHCR2_AWRWAIT_SHIFT            (16U)
#define FLEXSPI_FLSHCR2_AWRWAIT(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_AWRWAIT_SHIFT)) & FLEXSPI_FLSHCR2_AWRWAIT_MASK)
#define FLEXSPI_FLSHCR2_AWRWAITUNIT_MASK         (0x70000000U)
#define FLEXSPI_FLSHCR2_AWRWAITUNIT_SHIFT        (28U)
/*! AWRWAITUNIT - AWRWAIT unit
 *  0b000..The AWRWAIT unit is 2 ahb clock cycle
 *  0b001..The AWRWAIT unit is 8 ahb clock cycle
 *  0b010..The AWRWAIT unit is 32 ahb clock cycle
 *  0b011..The AWRWAIT unit is 128 ahb clock cycle
 *  0b100..The AWRWAIT unit is 512 ahb clock cycle
 *  0b101..The AWRWAIT unit is 2048 ahb clock cycle
 *  0b110..The AWRWAIT unit is 8192 ahb clock cycle
 *  0b111..The AWRWAIT unit is 32768 ahb clock cycle
 */
#define FLEXSPI_FLSHCR2_AWRWAITUNIT(x)           (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_AWRWAITUNIT_SHIFT)) & FLEXSPI_FLSHCR2_AWRWAITUNIT_MASK)
#define FLEXSPI_FLSHCR2_CLRINSTRPTR_MASK         (0x80000000U)
#define FLEXSPI_FLSHCR2_CLRINSTRPTR_SHIFT        (31U)
/*! @} */

/* The count of FLEXSPI_FLSHCR2 */
#define FLEXSPI_FLSHCR2_COUNT                    (4U)

/*! @name FLSHCR4 - Flash Control Register 4 */
/*! @{ */
#define FLEXSPI_FLSHCR4_WMOPT1_MASK              (0x1U)
#define FLEXSPI_FLSHCR4_WMOPT1_SHIFT             (0U)
#define FLEXSPI_FLSHCR4_WMENA_MASK               (0x4U)
#define FLEXSPI_FLSHCR4_WMENA_SHIFT              (2U)
#define FLEXSPI_FLSHCR4_WMENB_MASK               (0x8U)
#define FLEXSPI_FLSHCR4_WMENB_SHIFT              (3U)
/*! @} */

/*! @name IPCR0 - IP Control Register 0 */
/*! @{ */
#define FLEXSPI_IPCR0_SFAR_MASK                  (0xFFFFFFFFU)
#define FLEXSPI_IPCR0_SFAR_SHIFT                 (0U)
/*! SFAR - Serial Flash Address for IP command.
 */
#define FLEXSPI_IPCR0_SFAR(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPCR0_SFAR_SHIFT)) & FLEXSPI_IPCR0_SFAR_MASK)
/*! @} */

/*! @name IPCR1 - IP Control Register 1 */
/*! @{ */
#define FLEXSPI_IPCR1_IDATSZ_MASK                (0xFFFFU)
#define FLEXSPI_IPCR1_IDATSZ_SHIFT               (0U)
/*! IDATSZ - Flash Read/Program Data Size (in Bytes) for IP command.
 */
#define FLEXSPI_IPCR1_IDATSZ(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPCR1_IDATSZ_SHIFT)) & FLEXSPI_IPCR1_IDATSZ_MASK)
#define FLEXSPI_IPCR1_ISEQID_MASK                (0xF0000U)
#define FLEXSPI_IPCR1_ISEQID_SHIFT               (16U)
/*! ISEQID - Sequence Index in LUT for IP command.
 */
#define FLEXSPI_IPCR1_ISEQID(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPCR1_ISEQID_SHIFT)) & FLEXSPI_IPCR1_ISEQID_MASK)
#define FLEXSPI_IPCR1_ISEQNUM_MASK               (0x7000000U)
#define FLEXSPI_IPCR1_ISEQNUM_SHIFT              (24U)
/*! ISEQNUM - Sequence Number for IP command: ISEQNUM+1.
 */
#define FLEXSPI_IPCR1_ISEQNUM(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPCR1_ISEQNUM_SHIFT)) & FLEXSPI_IPCR1_ISEQNUM_MASK)
#define FLEXSPI_IPCR1_IPAREN_MASK                (0x80000000U)
#define FLEXSPI_IPCR1_IPAREN_SHIFT               (31U)
/*! @} */

/*! @name IPCMD - IP Command Register */
/*! @{ */
#define FLEXSPI_IPCMD_TRG_MASK                   (0x1U)
#define FLEXSPI_IPCMD_TRG_SHIFT                  (0U)
/*! @} */

/*! @name DLPR - Data Learn Pattern Register */
/*! @{ */
#define FLEXSPI_DLPR_DLP_MASK                    (0xFFFFFFFFU)
#define FLEXSPI_DLPR_DLP_SHIFT                   (0U)
/*! DLP - Data Learning Pattern.
 */
#define FLEXSPI_DLPR_DLP(x)                      (((uint32_t)(((uint32_t)(x)) << FLEXSPI_DLPR_DLP_SHIFT)) & FLEXSPI_DLPR_DLP_MASK)
/*! @} */

/*! @name IPRXFCR - IP RX FIFO Control Register */
/*! @{ */
#define FLEXSPI_IPRXFCR_CLRIPRXF_MASK            (0x1U)
#define FLEXSPI_IPRXFCR_CLRIPRXF_SHIFT           (0U)
#define FLEXSPI_IPRXFCR_RXDMAEN_MASK             (0x2U)
#define FLEXSPI_IPRXFCR_RXDMAEN_SHIFT            (1U)
#define FLEXSPI_IPRXFCR_RXWMRK_MASK              (0x1FCU)
#define FLEXSPI_IPRXFCR_RXWMRK_SHIFT             (2U)
/*! RXWMRK - Watermark level is (RXWMRK+1)*64 Bits.
 */
#define FLEXSPI_IPRXFCR_RXWMRK(x)                (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPRXFCR_RXWMRK_SHIFT)) & FLEXSPI_IPRXFCR_RXWMRK_MASK)
/*! @} */

/*! @name IPTXFCR - IP TX FIFO Control Register */
/*! @{ */
#define FLEXSPI_IPTXFCR_CLRIPTXF_MASK            (0x1U)
#define FLEXSPI_IPTXFCR_CLRIPTXF_SHIFT           (0U)
#define FLEXSPI_IPTXFCR_TXDMAEN_MASK             (0x2U)
#define FLEXSPI_IPTXFCR_TXDMAEN_SHIFT            (1U)
#define FLEXSPI_IPTXFCR_TXWMRK_MASK              (0x1FCU)
#define FLEXSPI_IPTXFCR_TXWMRK_SHIFT             (2U)
/*! TXWMRK - Watermark level is (TXWMRK+1)*64 Bits.
 */
#define FLEXSPI_IPTXFCR_TXWMRK(x)                (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPTXFCR_TXWMRK_SHIFT)) & FLEXSPI_IPTXFCR_TXWMRK_MASK)
/*! @} */

/*! @name DLLCR - DLL Control Register 0 */
/*! @{ */
#define FLEXSPI_DLLCR_DLLEN_MASK                 (0x1U)
#define FLEXSPI_DLLCR_DLLEN_SHIFT                (0U)
#define FLEXSPI_DLLCR_DLLRESET_MASK              (0x2U)
#define FLEXSPI_DLLCR_DLLRESET_SHIFT             (1U)
#define FLEXSPI_DLLCR_SLVDLYTARGET_MASK          (0x78U)
#define FLEXSPI_DLLCR_SLVDLYTARGET_SHIFT         (3U)
/*! SLVDLYTARGET - The delay target for slave delay line is: ((SLVDLYTARGET+1) * 1/32 * clock cycle
 *    of reference clock (serial root clock). If serial root clock is >= 100 MHz, DLLEN set to 0x1,
 *    OVRDEN set to =0x0, then SLVDLYTARGET setting of 0xF is recommended.
 */
#define FLEXSPI_DLLCR_SLVDLYTARGET(x)            (((uint32_t)(((uint32_t)(x)) << FLEXSPI_DLLCR_SLVDLYTARGET_SHIFT)) & FLEXSPI_DLLCR_SLVDLYTARGET_MASK)
#define FLEXSPI_DLLCR_OVRDEN_MASK                (0x100U)
#define FLEXSPI_DLLCR_OVRDEN_SHIFT               (8U)
#define FLEXSPI_DLLCR_OVRDVAL_MASK               (0x7E00U)
#define FLEXSPI_DLLCR_OVRDVAL_SHIFT              (9U)
/*! OVRDVAL - Slave clock delay line delay cell number selection override value.
 */
#define FLEXSPI_DLLCR_OVRDVAL(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_DLLCR_OVRDVAL_SHIFT)) & FLEXSPI_DLLCR_OVRDVAL_MASK)
/*! @} */

/* The count of FLEXSPI_DLLCR */
#define FLEXSPI_DLLCR_COUNT                      (2U)

/*! @name STS0 - Status Register 0 */
/*! @{ */
#define FLEXSPI_STS0_SEQIDLE_MASK                (0x1U)
#define FLEXSPI_STS0_SEQIDLE_SHIFT               (0U)
#define FLEXSPI_STS0_ARBIDLE_MASK                (0x2U)
#define FLEXSPI_STS0_ARBIDLE_SHIFT               (1U)
#define FLEXSPI_STS0_ARBCMDSRC_MASK              (0xCU)
#define FLEXSPI_STS0_ARBCMDSRC_SHIFT             (2U)
/*! ARBCMDSRC - This status field indicates the trigger source of current command sequence granted
 *    by arbitrator. This field value is meaningless when ARB_CTL is not busy (STS0[ARBIDLE]=0x1).
 *  0b00..Triggered by AHB read command (triggered by AHB read).
 *  0b01..Triggered by AHB write command (triggered by AHB Write).
 *  0b10..Triggered by IP command (triggered by setting register bit IPCMD.TRG).
 *  0b11..Triggered by suspended command (resumed).
 */
#define FLEXSPI_STS0_ARBCMDSRC(x)                (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS0_ARBCMDSRC_SHIFT)) & FLEXSPI_STS0_ARBCMDSRC_MASK)
#define FLEXSPI_STS0_DATALEARNPHASEA_MASK        (0xF0U)
#define FLEXSPI_STS0_DATALEARNPHASEA_SHIFT       (4U)
/*! DATALEARNPHASEA - Indicate the sampling clock phase selection on Port A after Data Learning.
 */
#define FLEXSPI_STS0_DATALEARNPHASEA(x)          (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS0_DATALEARNPHASEA_SHIFT)) & FLEXSPI_STS0_DATALEARNPHASEA_MASK)
#define FLEXSPI_STS0_DATALEARNPHASEB_MASK        (0xF00U)
#define FLEXSPI_STS0_DATALEARNPHASEB_SHIFT       (8U)
/*! DATALEARNPHASEB - Indicate the sampling clock phase selection on Port B after Data Learning.
 */
#define FLEXSPI_STS0_DATALEARNPHASEB(x)          (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS0_DATALEARNPHASEB_SHIFT)) & FLEXSPI_STS0_DATALEARNPHASEB_MASK)
/*! @} */

/*! @name STS1 - Status Register 1 */
/*! @{ */
#define FLEXSPI_STS1_AHBCMDERRID_MASK            (0xFU)
#define FLEXSPI_STS1_AHBCMDERRID_SHIFT           (0U)
/*! AHBCMDERRID - Indicates the sequence index when an AHB command error is detected. This field
 *    will be cleared when INTR[AHBCMDERR] is write-1-clear(w1c).
 */
#define FLEXSPI_STS1_AHBCMDERRID(x)              (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS1_AHBCMDERRID_SHIFT)) & FLEXSPI_STS1_AHBCMDERRID_MASK)
#define FLEXSPI_STS1_AHBCMDERRCODE_MASK          (0xF00U)
#define FLEXSPI_STS1_AHBCMDERRCODE_SHIFT         (8U)
/*! AHBCMDERRCODE - Indicates the Error Code when AHB command Error detected. This field will be
 *    cleared when INTR[AHBCMDERR] is write-1-clear(w1c).
 *  0b0000..No error.
 *  0b0010..AHB Write command with JMP_ON_CS instruction used in the sequence.
 *  0b0011..There is unknown instruction opcode in the sequence.
 *  0b0100..Instruction DUMMY_SDR/DUMMY_RWDS_SDR used in DDR sequence.
 *  0b0101..Instruction DUMMY_DDR/DUMMY_RWDS_DDR used in SDR sequence.
 *  0b1110..Sequence execution timeout.
 */
#define FLEXSPI_STS1_AHBCMDERRCODE(x)            (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS1_AHBCMDERRCODE_SHIFT)) & FLEXSPI_STS1_AHBCMDERRCODE_MASK)
#define FLEXSPI_STS1_IPCMDERRID_MASK             (0xF0000U)
#define FLEXSPI_STS1_IPCMDERRID_SHIFT            (16U)
/*! IPCMDERRID - Indicates the sequence Index when IP command error detected. This field will be
 *    cleared when INTR[IPCMDERR] is write-1-clear(w1c).
 */
#define FLEXSPI_STS1_IPCMDERRID(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS1_IPCMDERRID_SHIFT)) & FLEXSPI_STS1_IPCMDERRID_MASK)
#define FLEXSPI_STS1_IPCMDERRCODE_MASK           (0xF000000U)
#define FLEXSPI_STS1_IPCMDERRCODE_SHIFT          (24U)
/*! IPCMDERRCODE - Indicates the Error Code when IP command Error detected. This field will be
 *    cleared when INTR[IPCMDERR] is write-1-clear(w1c).
 *  0b0000..No error.
 *  0b0010..IP command with JMP_ON_CS instruction used in the sequence.
 *  0b0011..There is unknown instruction opcode in the sequence.
 *  0b0100..Instruction DUMMY_SDR/DUMMY_RWDS_SDR used in DDR sequence.
 *  0b0101..Instruction DUMMY_DDR/DUMMY_RWDS_DDR used in SDR sequence.
 *  0b0110..Flash access start address exceed the whole flash address range (A1/A2/B1/B2).
 *  0b1110..Sequence execution timeout.
 *  0b1111..Flash boundary crossed.
 */
#define FLEXSPI_STS1_IPCMDERRCODE(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS1_IPCMDERRCODE_SHIFT)) & FLEXSPI_STS1_IPCMDERRCODE_MASK)
/*! @} */

/*! @name STS2 - Status Register 2 */
/*! @{ */
#define FLEXSPI_STS2_ASLVLOCK_MASK               (0x1U)
#define FLEXSPI_STS2_ASLVLOCK_SHIFT              (0U)
#define FLEXSPI_STS2_AREFLOCK_MASK               (0x2U)
#define FLEXSPI_STS2_AREFLOCK_SHIFT              (1U)
#define FLEXSPI_STS2_ASLVSEL_MASK                (0xFCU)
#define FLEXSPI_STS2_ASLVSEL_SHIFT               (2U)
/*! ASLVSEL - Flash A sample clock slave delay line delay cell number selection .
 */
#define FLEXSPI_STS2_ASLVSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS2_ASLVSEL_SHIFT)) & FLEXSPI_STS2_ASLVSEL_MASK)
#define FLEXSPI_STS2_AREFSEL_MASK                (0x3F00U)
#define FLEXSPI_STS2_AREFSEL_SHIFT               (8U)
/*! AREFSEL - Flash A sample clock reference delay line delay cell number selection.
 */
#define FLEXSPI_STS2_AREFSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS2_AREFSEL_SHIFT)) & FLEXSPI_STS2_AREFSEL_MASK)
#define FLEXSPI_STS2_BSLVLOCK_MASK               (0x10000U)
#define FLEXSPI_STS2_BSLVLOCK_SHIFT              (16U)
#define FLEXSPI_STS2_BREFLOCK_MASK               (0x20000U)
#define FLEXSPI_STS2_BREFLOCK_SHIFT              (17U)
#define FLEXSPI_STS2_BSLVSEL_MASK                (0xFC0000U)
#define FLEXSPI_STS2_BSLVSEL_SHIFT               (18U)
/*! BSLVSEL - Flash B sample clock slave delay line delay cell number selection.
 */
#define FLEXSPI_STS2_BSLVSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS2_BSLVSEL_SHIFT)) & FLEXSPI_STS2_BSLVSEL_MASK)
#define FLEXSPI_STS2_BREFSEL_MASK                (0x3F000000U)
#define FLEXSPI_STS2_BREFSEL_SHIFT               (24U)
/*! BREFSEL - Flash B sample clock reference delay line delay cell number selection.
 */
#define FLEXSPI_STS2_BREFSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS2_BREFSEL_SHIFT)) & FLEXSPI_STS2_BREFSEL_MASK)
/*! @} */

/*! @name AHBSPNDSTS - AHB Suspend Status Register */
/*! @{ */
#define FLEXSPI_AHBSPNDSTS_ACTIVE_MASK           (0x1U)
#define FLEXSPI_AHBSPNDSTS_ACTIVE_SHIFT          (0U)
#define FLEXSPI_AHBSPNDSTS_BUFID_MASK            (0xEU)
#define FLEXSPI_AHBSPNDSTS_BUFID_SHIFT           (1U)
/*! BUFID - AHB RX BUF ID for suspended command sequence.
 */
#define FLEXSPI_AHBSPNDSTS_BUFID(x)              (((uint32_t)(((uint32_t)(x)) << FLEXSPI_AHBSPNDSTS_BUFID_SHIFT)) & FLEXSPI_AHBSPNDSTS_BUFID_MASK)
#define FLEXSPI_AHBSPNDSTS_DATLFT_MASK           (0xFFFF0000U)
#define FLEXSPI_AHBSPNDSTS_DATLFT_SHIFT          (16U)
/*! DATLFT - Left Data size for suspended command sequence (in byte).
 */
#define FLEXSPI_AHBSPNDSTS_DATLFT(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_AHBSPNDSTS_DATLFT_SHIFT)) & FLEXSPI_AHBSPNDSTS_DATLFT_MASK)
/*! @} */

/*! @name IPRXFSTS - IP RX FIFO Status Register */
/*! @{ */
#define FLEXSPI_IPRXFSTS_FILL_MASK               (0xFFU)
#define FLEXSPI_IPRXFSTS_FILL_SHIFT              (0U)
/*! FILL - Fill level of IP RX FIFO.
 */
#define FLEXSPI_IPRXFSTS_FILL(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPRXFSTS_FILL_SHIFT)) & FLEXSPI_IPRXFSTS_FILL_MASK)
#define FLEXSPI_IPRXFSTS_RDCNTR_MASK             (0xFFFF0000U)
#define FLEXSPI_IPRXFSTS_RDCNTR_SHIFT            (16U)
/*! RDCNTR - Total Read Data Counter: RDCNTR * 64 Bits.
 */
#define FLEXSPI_IPRXFSTS_RDCNTR(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPRXFSTS_RDCNTR_SHIFT)) & FLEXSPI_IPRXFSTS_RDCNTR_MASK)
/*! @} */

/*! @name IPTXFSTS - IP TX FIFO Status Register */
/*! @{ */
#define FLEXSPI_IPTXFSTS_FILL_MASK               (0xFFU)
#define FLEXSPI_IPTXFSTS_FILL_SHIFT              (0U)
/*! FILL - Fill level of IP TX FIFO.
 */
#define FLEXSPI_IPTXFSTS_FILL(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPTXFSTS_FILL_SHIFT)) & FLEXSPI_IPTXFSTS_FILL_MASK)
#define FLEXSPI_IPTXFSTS_WRCNTR_MASK             (0xFFFF0000U)
#define FLEXSPI_IPTXFSTS_WRCNTR_SHIFT            (16U)
/*! WRCNTR - Total Write Data Counter: WRCNTR * 64 Bits.
 */
#define FLEXSPI_IPTXFSTS_WRCNTR(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPTXFSTS_WRCNTR_SHIFT)) & FLEXSPI_IPTXFSTS_WRCNTR_MASK)
/*! @} */

/*! @name RFDR - IP RX FIFO Data Register 0..IP RX FIFO Data Register 31 */
/*! @{ */
#define FLEXSPI_RFDR_RXDATA_MASK                 (0xFFFFFFFFU)
#define FLEXSPI_RFDR_RXDATA_SHIFT                (0U)
/*! RXDATA - RX Data
 */
#define FLEXSPI_RFDR_RXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXSPI_RFDR_RXDATA_SHIFT)) & FLEXSPI_RFDR_RXDATA_MASK)
/*! @} */

/* The count of FLEXSPI_RFDR */
#define FLEXSPI_RFDR_COUNT                       (32U)

/*! @name TFDR - IP TX FIFO Data Register 0..IP TX FIFO Data Register 31 */
/*! @{ */
#define FLEXSPI_TFDR_TXDATA_MASK                 (0xFFFFFFFFU)
#define FLEXSPI_TFDR_TXDATA_SHIFT                (0U)
/*! TXDATA - TX Data
 */
#define FLEXSPI_TFDR_TXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXSPI_TFDR_TXDATA_SHIFT)) & FLEXSPI_TFDR_TXDATA_MASK)
/*! @} */

/* The count of FLEXSPI_TFDR */
#define FLEXSPI_TFDR_COUNT                       (32U)

/*! @name LUT - LUT 0..LUT 63 */
/*! @{ */
#define FLEXSPI_LUT_OPERAND0_MASK                (0xFFU)
#define FLEXSPI_LUT_OPERAND0_SHIFT               (0U)
/*! OPERAND0 - OPERAND0
 */
#define FLEXSPI_LUT_OPERAND0(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_OPERAND0_SHIFT)) & FLEXSPI_LUT_OPERAND0_MASK)
#define FLEXSPI_LUT_NUM_PADS0_MASK               (0x300U)
#define FLEXSPI_LUT_NUM_PADS0_SHIFT              (8U)
/*! NUM_PADS0 - NUM_PADS0
 */
#define FLEXSPI_LUT_NUM_PADS0(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_NUM_PADS0_SHIFT)) & FLEXSPI_LUT_NUM_PADS0_MASK)
#define FLEXSPI_LUT_OPCODE0_MASK                 (0xFC00U)
#define FLEXSPI_LUT_OPCODE0_SHIFT                (10U)
/*! OPCODE0 - OPCODE
 */
#define FLEXSPI_LUT_OPCODE0(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_OPCODE0_SHIFT)) & FLEXSPI_LUT_OPCODE0_MASK)
#define FLEXSPI_LUT_OPERAND1_MASK                (0xFF0000U)
#define FLEXSPI_LUT_OPERAND1_SHIFT               (16U)
/*! OPERAND1 - OPERAND1
 */
#define FLEXSPI_LUT_OPERAND1(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_OPERAND1_SHIFT)) & FLEXSPI_LUT_OPERAND1_MASK)
#define FLEXSPI_LUT_NUM_PADS1_MASK               (0x3000000U)
#define FLEXSPI_LUT_NUM_PADS1_SHIFT              (24U)
/*! NUM_PADS1 - NUM_PADS1
 */
#define FLEXSPI_LUT_NUM_PADS1(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_NUM_PADS1_SHIFT)) & FLEXSPI_LUT_NUM_PADS1_MASK)
#define FLEXSPI_LUT_OPCODE1_MASK                 (0xFC000000U)
#define FLEXSPI_LUT_OPCODE1_SHIFT                (26U)
/*! OPCODE1 - OPCODE1
 */
#define FLEXSPI_LUT_OPCODE1(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_OPCODE1_SHIFT)) & FLEXSPI_LUT_OPCODE1_MASK)
/*! @} */

/* The count of FLEXSPI_LUT */
#define FLEXSPI_LUT_COUNT                        (64U)


/*!
 * @}
 */ /* end of group FLEXSPI_Register_Masks */


/* FLEXSPI - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral FLEXSPI0 base pointer */
  #define FLEXSPI0_BASE_PTR                        ((FLEXSPI_MemMapPtr)0x50134000u)
  /** Peripheral FLEXSPI0 base pointer */
  #define FLEXSPI0_BASE_PTR_NS                     ((FLEXSPI_MemMapPtr)0x40134000u)
  /** Peripheral FLEXSPI1 base pointer */
  #define FLEXSPI1_BASE_PTR                        ((FLEXSPI_MemMapPtr)0x5013C000u)
  /** Peripheral FLEXSPI1 base pointer */
  #define FLEXSPI1_BASE_PTR_NS                     ((FLEXSPI_MemMapPtr)0x4013C000u)
  /** Array initializer of FLEXSPI peripheral base pointers */
  #define FLEXSPI_BASE_PTRS                        { FLEXSPI0_BASE_PTR, FLEXSPI1_BASE_PTR }
  /** Array initializer of FLEXSPI peripheral base pointers */
  #define FLEXSPI_BASE_PTRS_NS                     { FLEXSPI0_BASE_PTR_NS, FLEXSPI1_BASE_PTR_NS }
#else
  /** Peripheral FLEXSPI0 base pointer */
  #define FLEXSPI0_BASE_PTR                        ((FLEXSPI_MemMapPtr)0x40134000u)
  /** Peripheral FLEXSPI1 base pointer */
  #define FLEXSPI1_BASE_PTR                        ((FLEXSPI_MemMapPtr)0x4013C000u)
  /** Array initializer of FLEXSPI peripheral base pointers */
  #define FLEXSPI_BASE_PTRS                        { FLEXSPI0_BASE_PTR, FLEXSPI1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- FLEXSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXSPI_Register_Accessor_Macros FLEXSPI - Register accessor macros
 * @{
 */


/* FLEXSPI - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* FLEXSPI0 */
  #define FLEXSPI0_MCR0                            FLEXSPI_MCR0_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_MCR0_NS                         FLEXSPI_MCR0_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_MCR1                            FLEXSPI_MCR1_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_MCR1_NS                         FLEXSPI_MCR1_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_MCR2                            FLEXSPI_MCR2_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_MCR2_NS                         FLEXSPI_MCR2_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_AHBCR                           FLEXSPI_AHBCR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_AHBCR_NS                        FLEXSPI_AHBCR_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_INTEN                           FLEXSPI_INTEN_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_INTEN_NS                        FLEXSPI_INTEN_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_INTR                            FLEXSPI_INTR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_INTR_NS                         FLEXSPI_INTR_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_LUTKEY                          FLEXSPI_LUTKEY_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_LUTKEY_NS                       FLEXSPI_LUTKEY_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_LUTCR                           FLEXSPI_LUTCR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_LUTCR_NS                        FLEXSPI_LUTCR_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_AHBRXBUF0CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_AHBRXBUF0CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR_NS,0)
  #define FLEXSPI0_AHBRXBUF1CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_AHBRXBUF1CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR_NS,1)
  #define FLEXSPI0_AHBRXBUF2CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_AHBRXBUF2CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR_NS,2)
  #define FLEXSPI0_AHBRXBUF3CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_AHBRXBUF3CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR_NS,3)
  #define FLEXSPI0_AHBRXBUF4CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,4)
  #define FLEXSPI0_AHBRXBUF4CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR_NS,4)
  #define FLEXSPI0_AHBRXBUF5CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,5)
  #define FLEXSPI0_AHBRXBUF5CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR_NS,5)
  #define FLEXSPI0_AHBRXBUF6CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,6)
  #define FLEXSPI0_AHBRXBUF6CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR_NS,6)
  #define FLEXSPI0_AHBRXBUF7CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,7)
  #define FLEXSPI0_AHBRXBUF7CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR_NS,7)
  #define FLEXSPI0_FLSHA1CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_FLSHA1CR0_NS                    FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR_NS,0)
  #define FLEXSPI0_FLSHA2CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_FLSHA2CR0_NS                    FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR_NS,1)
  #define FLEXSPI0_FLSHB1CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_FLSHB1CR0_NS                    FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR_NS,2)
  #define FLEXSPI0_FLSHB2CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_FLSHB2CR0_NS                    FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR_NS,3)
  #define FLEXSPI0_FLSHA1CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_FLSHA1CR1_NS                    FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR_NS,0)
  #define FLEXSPI0_FLSHA2CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_FLSHA2CR1_NS                    FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR_NS,1)
  #define FLEXSPI0_FLSHB1CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_FLSHB1CR1_NS                    FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR_NS,2)
  #define FLEXSPI0_FLSHB2CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_FLSHB2CR1_NS                    FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR_NS,3)
  #define FLEXSPI0_FLSHA1CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_FLSHA1CR2_NS                    FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR_NS,0)
  #define FLEXSPI0_FLSHA2CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_FLSHA2CR2_NS                    FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR_NS,1)
  #define FLEXSPI0_FLSHB1CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_FLSHB1CR2_NS                    FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR_NS,2)
  #define FLEXSPI0_FLSHB2CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_FLSHB2CR2_NS                    FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR_NS,3)
  #define FLEXSPI0_FLSHCR4                         FLEXSPI_FLSHCR4_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_FLSHCR4_NS                      FLEXSPI_FLSHCR4_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_IPCR0                           FLEXSPI_IPCR0_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPCR0_NS                        FLEXSPI_IPCR0_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_IPCR1                           FLEXSPI_IPCR1_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPCR1_NS                        FLEXSPI_IPCR1_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_IPCMD                           FLEXSPI_IPCMD_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPCMD_NS                        FLEXSPI_IPCMD_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_DLPR                            FLEXSPI_DLPR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_DLPR_NS                         FLEXSPI_DLPR_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_IPRXFCR                         FLEXSPI_IPRXFCR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPRXFCR_NS                      FLEXSPI_IPRXFCR_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_IPTXFCR                         FLEXSPI_IPTXFCR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPTXFCR_NS                      FLEXSPI_IPTXFCR_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_DLLACR                          FLEXSPI_DLLCR_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_DLLACR_NS                       FLEXSPI_DLLCR_REG(FLEXSPI0_BASE_PTR_NS,0)
  #define FLEXSPI0_DLLBCR                          FLEXSPI_DLLCR_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_DLLBCR_NS                       FLEXSPI_DLLCR_REG(FLEXSPI0_BASE_PTR_NS,1)
  #define FLEXSPI0_STS0                            FLEXSPI_STS0_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_STS0_NS                         FLEXSPI_STS0_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_STS1                            FLEXSPI_STS1_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_STS1_NS                         FLEXSPI_STS1_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_STS2                            FLEXSPI_STS2_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_STS2_NS                         FLEXSPI_STS2_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_AHBSPNDSTS                      FLEXSPI_AHBSPNDSTS_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_AHBSPNDSTS_NS                   FLEXSPI_AHBSPNDSTS_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_IPRXFSTS                        FLEXSPI_IPRXFSTS_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPRXFSTS_NS                     FLEXSPI_IPRXFSTS_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_IPTXFSTS                        FLEXSPI_IPTXFSTS_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPTXFSTS_NS                     FLEXSPI_IPTXFSTS_REG(FLEXSPI0_BASE_PTR_NS)
  #define FLEXSPI0_RFDR0                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_RFDR0_NS                        FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,0)
  #define FLEXSPI0_RFDR1                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_RFDR1_NS                        FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,1)
  #define FLEXSPI0_RFDR2                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_RFDR2_NS                        FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,2)
  #define FLEXSPI0_RFDR3                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_RFDR3_NS                        FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,3)
  #define FLEXSPI0_RFDR4                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,4)
  #define FLEXSPI0_RFDR4_NS                        FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,4)
  #define FLEXSPI0_RFDR5                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,5)
  #define FLEXSPI0_RFDR5_NS                        FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,5)
  #define FLEXSPI0_RFDR6                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,6)
  #define FLEXSPI0_RFDR6_NS                        FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,6)
  #define FLEXSPI0_RFDR7                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,7)
  #define FLEXSPI0_RFDR7_NS                        FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,7)
  #define FLEXSPI0_RFDR8                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,8)
  #define FLEXSPI0_RFDR8_NS                        FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,8)
  #define FLEXSPI0_RFDR9                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,9)
  #define FLEXSPI0_RFDR9_NS                        FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,9)
  #define FLEXSPI0_RFDR10                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,10)
  #define FLEXSPI0_RFDR10_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,10)
  #define FLEXSPI0_RFDR11                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,11)
  #define FLEXSPI0_RFDR11_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,11)
  #define FLEXSPI0_RFDR12                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,12)
  #define FLEXSPI0_RFDR12_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,12)
  #define FLEXSPI0_RFDR13                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,13)
  #define FLEXSPI0_RFDR13_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,13)
  #define FLEXSPI0_RFDR14                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,14)
  #define FLEXSPI0_RFDR14_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,14)
  #define FLEXSPI0_RFDR15                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,15)
  #define FLEXSPI0_RFDR15_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,15)
  #define FLEXSPI0_RFDR16                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,16)
  #define FLEXSPI0_RFDR16_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,16)
  #define FLEXSPI0_RFDR17                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,17)
  #define FLEXSPI0_RFDR17_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,17)
  #define FLEXSPI0_RFDR18                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,18)
  #define FLEXSPI0_RFDR18_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,18)
  #define FLEXSPI0_RFDR19                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,19)
  #define FLEXSPI0_RFDR19_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,19)
  #define FLEXSPI0_RFDR20                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,20)
  #define FLEXSPI0_RFDR20_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,20)
  #define FLEXSPI0_RFDR21                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,21)
  #define FLEXSPI0_RFDR21_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,21)
  #define FLEXSPI0_RFDR22                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,22)
  #define FLEXSPI0_RFDR22_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,22)
  #define FLEXSPI0_RFDR23                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,23)
  #define FLEXSPI0_RFDR23_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,23)
  #define FLEXSPI0_RFDR24                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,24)
  #define FLEXSPI0_RFDR24_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,24)
  #define FLEXSPI0_RFDR25                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,25)
  #define FLEXSPI0_RFDR25_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,25)
  #define FLEXSPI0_RFDR26                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,26)
  #define FLEXSPI0_RFDR26_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,26)
  #define FLEXSPI0_RFDR27                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,27)
  #define FLEXSPI0_RFDR27_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,27)
  #define FLEXSPI0_RFDR28                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,28)
  #define FLEXSPI0_RFDR28_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,28)
  #define FLEXSPI0_RFDR29                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,29)
  #define FLEXSPI0_RFDR29_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,29)
  #define FLEXSPI0_RFDR30                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,30)
  #define FLEXSPI0_RFDR30_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,30)
  #define FLEXSPI0_RFDR31                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,31)
  #define FLEXSPI0_RFDR31_NS                       FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,31)
  #define FLEXSPI0_TFDR0                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_TFDR0_NS                        FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,0)
  #define FLEXSPI0_TFDR1                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_TFDR1_NS                        FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,1)
  #define FLEXSPI0_TFDR2                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_TFDR2_NS                        FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,2)
  #define FLEXSPI0_TFDR3                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_TFDR3_NS                        FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,3)
  #define FLEXSPI0_TFDR4                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,4)
  #define FLEXSPI0_TFDR4_NS                        FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,4)
  #define FLEXSPI0_TFDR5                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,5)
  #define FLEXSPI0_TFDR5_NS                        FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,5)
  #define FLEXSPI0_TFDR6                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,6)
  #define FLEXSPI0_TFDR6_NS                        FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,6)
  #define FLEXSPI0_TFDR7                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,7)
  #define FLEXSPI0_TFDR7_NS                        FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,7)
  #define FLEXSPI0_TFDR8                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,8)
  #define FLEXSPI0_TFDR8_NS                        FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,8)
  #define FLEXSPI0_TFDR9                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,9)
  #define FLEXSPI0_TFDR9_NS                        FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,9)
  #define FLEXSPI0_TFDR10                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,10)
  #define FLEXSPI0_TFDR10_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,10)
  #define FLEXSPI0_TFDR11                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,11)
  #define FLEXSPI0_TFDR11_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,11)
  #define FLEXSPI0_TFDR12                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,12)
  #define FLEXSPI0_TFDR12_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,12)
  #define FLEXSPI0_TFDR13                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,13)
  #define FLEXSPI0_TFDR13_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,13)
  #define FLEXSPI0_TFDR14                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,14)
  #define FLEXSPI0_TFDR14_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,14)
  #define FLEXSPI0_TFDR15                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,15)
  #define FLEXSPI0_TFDR15_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,15)
  #define FLEXSPI0_TFDR16                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,16)
  #define FLEXSPI0_TFDR16_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,16)
  #define FLEXSPI0_TFDR17                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,17)
  #define FLEXSPI0_TFDR17_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,17)
  #define FLEXSPI0_TFDR18                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,18)
  #define FLEXSPI0_TFDR18_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,18)
  #define FLEXSPI0_TFDR19                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,19)
  #define FLEXSPI0_TFDR19_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,19)
  #define FLEXSPI0_TFDR20                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,20)
  #define FLEXSPI0_TFDR20_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,20)
  #define FLEXSPI0_TFDR21                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,21)
  #define FLEXSPI0_TFDR21_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,21)
  #define FLEXSPI0_TFDR22                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,22)
  #define FLEXSPI0_TFDR22_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,22)
  #define FLEXSPI0_TFDR23                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,23)
  #define FLEXSPI0_TFDR23_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,23)
  #define FLEXSPI0_TFDR24                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,24)
  #define FLEXSPI0_TFDR24_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,24)
  #define FLEXSPI0_TFDR25                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,25)
  #define FLEXSPI0_TFDR25_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,25)
  #define FLEXSPI0_TFDR26                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,26)
  #define FLEXSPI0_TFDR26_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,26)
  #define FLEXSPI0_TFDR27                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,27)
  #define FLEXSPI0_TFDR27_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,27)
  #define FLEXSPI0_TFDR28                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,28)
  #define FLEXSPI0_TFDR28_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,28)
  #define FLEXSPI0_TFDR29                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,29)
  #define FLEXSPI0_TFDR29_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,29)
  #define FLEXSPI0_TFDR30                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,30)
  #define FLEXSPI0_TFDR30_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,30)
  #define FLEXSPI0_TFDR31                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,31)
  #define FLEXSPI0_TFDR31_NS                       FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,31)
  #define FLEXSPI0_LUT0                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_LUT0_NS                         FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,0)
  #define FLEXSPI0_LUT1                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_LUT1_NS                         FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,1)
  #define FLEXSPI0_LUT2                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_LUT2_NS                         FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,2)
  #define FLEXSPI0_LUT3                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_LUT3_NS                         FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,3)
  #define FLEXSPI0_LUT4                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,4)
  #define FLEXSPI0_LUT4_NS                         FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,4)
  #define FLEXSPI0_LUT5                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,5)
  #define FLEXSPI0_LUT5_NS                         FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,5)
  #define FLEXSPI0_LUT6                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,6)
  #define FLEXSPI0_LUT6_NS                         FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,6)
  #define FLEXSPI0_LUT7                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,7)
  #define FLEXSPI0_LUT7_NS                         FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,7)
  #define FLEXSPI0_LUT8                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,8)
  #define FLEXSPI0_LUT8_NS                         FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,8)
  #define FLEXSPI0_LUT9                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,9)
  #define FLEXSPI0_LUT9_NS                         FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,9)
  #define FLEXSPI0_LUT10                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,10)
  #define FLEXSPI0_LUT10_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,10)
  #define FLEXSPI0_LUT11                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,11)
  #define FLEXSPI0_LUT11_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,11)
  #define FLEXSPI0_LUT12                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,12)
  #define FLEXSPI0_LUT12_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,12)
  #define FLEXSPI0_LUT13                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,13)
  #define FLEXSPI0_LUT13_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,13)
  #define FLEXSPI0_LUT14                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,14)
  #define FLEXSPI0_LUT14_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,14)
  #define FLEXSPI0_LUT15                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,15)
  #define FLEXSPI0_LUT15_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,15)
  #define FLEXSPI0_LUT16                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,16)
  #define FLEXSPI0_LUT16_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,16)
  #define FLEXSPI0_LUT17                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,17)
  #define FLEXSPI0_LUT17_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,17)
  #define FLEXSPI0_LUT18                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,18)
  #define FLEXSPI0_LUT18_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,18)
  #define FLEXSPI0_LUT19                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,19)
  #define FLEXSPI0_LUT19_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,19)
  #define FLEXSPI0_LUT20                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,20)
  #define FLEXSPI0_LUT20_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,20)
  #define FLEXSPI0_LUT21                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,21)
  #define FLEXSPI0_LUT21_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,21)
  #define FLEXSPI0_LUT22                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,22)
  #define FLEXSPI0_LUT22_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,22)
  #define FLEXSPI0_LUT23                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,23)
  #define FLEXSPI0_LUT23_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,23)
  #define FLEXSPI0_LUT24                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,24)
  #define FLEXSPI0_LUT24_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,24)
  #define FLEXSPI0_LUT25                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,25)
  #define FLEXSPI0_LUT25_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,25)
  #define FLEXSPI0_LUT26                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,26)
  #define FLEXSPI0_LUT26_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,26)
  #define FLEXSPI0_LUT27                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,27)
  #define FLEXSPI0_LUT27_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,27)
  #define FLEXSPI0_LUT28                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,28)
  #define FLEXSPI0_LUT28_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,28)
  #define FLEXSPI0_LUT29                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,29)
  #define FLEXSPI0_LUT29_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,29)
  #define FLEXSPI0_LUT30                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,30)
  #define FLEXSPI0_LUT30_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,30)
  #define FLEXSPI0_LUT31                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,31)
  #define FLEXSPI0_LUT31_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,31)
  #define FLEXSPI0_LUT32                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,32)
  #define FLEXSPI0_LUT32_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,32)
  #define FLEXSPI0_LUT33                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,33)
  #define FLEXSPI0_LUT33_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,33)
  #define FLEXSPI0_LUT34                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,34)
  #define FLEXSPI0_LUT34_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,34)
  #define FLEXSPI0_LUT35                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,35)
  #define FLEXSPI0_LUT35_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,35)
  #define FLEXSPI0_LUT36                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,36)
  #define FLEXSPI0_LUT36_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,36)
  #define FLEXSPI0_LUT37                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,37)
  #define FLEXSPI0_LUT37_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,37)
  #define FLEXSPI0_LUT38                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,38)
  #define FLEXSPI0_LUT38_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,38)
  #define FLEXSPI0_LUT39                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,39)
  #define FLEXSPI0_LUT39_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,39)
  #define FLEXSPI0_LUT40                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,40)
  #define FLEXSPI0_LUT40_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,40)
  #define FLEXSPI0_LUT41                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,41)
  #define FLEXSPI0_LUT41_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,41)
  #define FLEXSPI0_LUT42                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,42)
  #define FLEXSPI0_LUT42_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,42)
  #define FLEXSPI0_LUT43                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,43)
  #define FLEXSPI0_LUT43_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,43)
  #define FLEXSPI0_LUT44                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,44)
  #define FLEXSPI0_LUT44_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,44)
  #define FLEXSPI0_LUT45                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,45)
  #define FLEXSPI0_LUT45_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,45)
  #define FLEXSPI0_LUT46                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,46)
  #define FLEXSPI0_LUT46_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,46)
  #define FLEXSPI0_LUT47                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,47)
  #define FLEXSPI0_LUT47_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,47)
  #define FLEXSPI0_LUT48                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,48)
  #define FLEXSPI0_LUT48_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,48)
  #define FLEXSPI0_LUT49                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,49)
  #define FLEXSPI0_LUT49_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,49)
  #define FLEXSPI0_LUT50                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,50)
  #define FLEXSPI0_LUT50_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,50)
  #define FLEXSPI0_LUT51                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,51)
  #define FLEXSPI0_LUT51_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,51)
  #define FLEXSPI0_LUT52                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,52)
  #define FLEXSPI0_LUT52_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,52)
  #define FLEXSPI0_LUT53                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,53)
  #define FLEXSPI0_LUT53_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,53)
  #define FLEXSPI0_LUT54                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,54)
  #define FLEXSPI0_LUT54_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,54)
  #define FLEXSPI0_LUT55                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,55)
  #define FLEXSPI0_LUT55_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,55)
  #define FLEXSPI0_LUT56                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,56)
  #define FLEXSPI0_LUT56_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,56)
  #define FLEXSPI0_LUT57                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,57)
  #define FLEXSPI0_LUT57_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,57)
  #define FLEXSPI0_LUT58                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,58)
  #define FLEXSPI0_LUT58_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,58)
  #define FLEXSPI0_LUT59                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,59)
  #define FLEXSPI0_LUT59_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,59)
  #define FLEXSPI0_LUT60                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,60)
  #define FLEXSPI0_LUT60_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,60)
  #define FLEXSPI0_LUT61                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,61)
  #define FLEXSPI0_LUT61_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,61)
  #define FLEXSPI0_LUT62                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,62)
  #define FLEXSPI0_LUT62_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,62)
  #define FLEXSPI0_LUT63                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,63)
  #define FLEXSPI0_LUT63_NS                        FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,63)
  /* FLEXSPI1 */
  #define FLEXSPI1_MCR0                            FLEXSPI_MCR0_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_MCR0_NS                         FLEXSPI_MCR0_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_MCR1                            FLEXSPI_MCR1_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_MCR1_NS                         FLEXSPI_MCR1_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_MCR2                            FLEXSPI_MCR2_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_MCR2_NS                         FLEXSPI_MCR2_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_AHBCR                           FLEXSPI_AHBCR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_AHBCR_NS                        FLEXSPI_AHBCR_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_INTEN                           FLEXSPI_INTEN_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_INTEN_NS                        FLEXSPI_INTEN_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_INTR                            FLEXSPI_INTR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_INTR_NS                         FLEXSPI_INTR_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_LUTKEY                          FLEXSPI_LUTKEY_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_LUTKEY_NS                       FLEXSPI_LUTKEY_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_LUTCR                           FLEXSPI_LUTCR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_LUTCR_NS                        FLEXSPI_LUTCR_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_AHBRXBUF0CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_AHBRXBUF0CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR_NS,0)
  #define FLEXSPI1_AHBRXBUF1CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_AHBRXBUF1CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR_NS,1)
  #define FLEXSPI1_AHBRXBUF2CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_AHBRXBUF2CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR_NS,2)
  #define FLEXSPI1_AHBRXBUF3CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_AHBRXBUF3CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR_NS,3)
  #define FLEXSPI1_AHBRXBUF4CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,4)
  #define FLEXSPI1_AHBRXBUF4CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR_NS,4)
  #define FLEXSPI1_AHBRXBUF5CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,5)
  #define FLEXSPI1_AHBRXBUF5CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR_NS,5)
  #define FLEXSPI1_AHBRXBUF6CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,6)
  #define FLEXSPI1_AHBRXBUF6CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR_NS,6)
  #define FLEXSPI1_AHBRXBUF7CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,7)
  #define FLEXSPI1_AHBRXBUF7CR0_NS                 FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR_NS,7)
  #define FLEXSPI1_FLSHA1CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_FLSHA1CR0_NS                    FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR_NS,0)
  #define FLEXSPI1_FLSHA2CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_FLSHA2CR0_NS                    FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR_NS,1)
  #define FLEXSPI1_FLSHB1CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_FLSHB1CR0_NS                    FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR_NS,2)
  #define FLEXSPI1_FLSHB2CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_FLSHB2CR0_NS                    FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR_NS,3)
  #define FLEXSPI1_FLSHA1CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_FLSHA1CR1_NS                    FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR_NS,0)
  #define FLEXSPI1_FLSHA2CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_FLSHA2CR1_NS                    FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR_NS,1)
  #define FLEXSPI1_FLSHB1CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_FLSHB1CR1_NS                    FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR_NS,2)
  #define FLEXSPI1_FLSHB2CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_FLSHB2CR1_NS                    FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR_NS,3)
  #define FLEXSPI1_FLSHA1CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_FLSHA1CR2_NS                    FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR_NS,0)
  #define FLEXSPI1_FLSHA2CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_FLSHA2CR2_NS                    FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR_NS,1)
  #define FLEXSPI1_FLSHB1CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_FLSHB1CR2_NS                    FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR_NS,2)
  #define FLEXSPI1_FLSHB2CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_FLSHB2CR2_NS                    FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR_NS,3)
  #define FLEXSPI1_FLSHCR4                         FLEXSPI_FLSHCR4_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_FLSHCR4_NS                      FLEXSPI_FLSHCR4_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_IPCR0                           FLEXSPI_IPCR0_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPCR0_NS                        FLEXSPI_IPCR0_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_IPCR1                           FLEXSPI_IPCR1_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPCR1_NS                        FLEXSPI_IPCR1_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_IPCMD                           FLEXSPI_IPCMD_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPCMD_NS                        FLEXSPI_IPCMD_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_DLPR                            FLEXSPI_DLPR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_DLPR_NS                         FLEXSPI_DLPR_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_IPRXFCR                         FLEXSPI_IPRXFCR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPRXFCR_NS                      FLEXSPI_IPRXFCR_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_IPTXFCR                         FLEXSPI_IPTXFCR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPTXFCR_NS                      FLEXSPI_IPTXFCR_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_DLLACR                          FLEXSPI_DLLCR_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_DLLACR_NS                       FLEXSPI_DLLCR_REG(FLEXSPI1_BASE_PTR_NS,0)
  #define FLEXSPI1_DLLBCR                          FLEXSPI_DLLCR_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_DLLBCR_NS                       FLEXSPI_DLLCR_REG(FLEXSPI1_BASE_PTR_NS,1)
  #define FLEXSPI1_STS0                            FLEXSPI_STS0_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_STS0_NS                         FLEXSPI_STS0_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_STS1                            FLEXSPI_STS1_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_STS1_NS                         FLEXSPI_STS1_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_STS2                            FLEXSPI_STS2_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_STS2_NS                         FLEXSPI_STS2_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_AHBSPNDSTS                      FLEXSPI_AHBSPNDSTS_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_AHBSPNDSTS_NS                   FLEXSPI_AHBSPNDSTS_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_IPRXFSTS                        FLEXSPI_IPRXFSTS_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPRXFSTS_NS                     FLEXSPI_IPRXFSTS_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_IPTXFSTS                        FLEXSPI_IPTXFSTS_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPTXFSTS_NS                     FLEXSPI_IPTXFSTS_REG(FLEXSPI1_BASE_PTR_NS)
  #define FLEXSPI1_RFDR0                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_RFDR0_NS                        FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,0)
  #define FLEXSPI1_RFDR1                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_RFDR1_NS                        FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,1)
  #define FLEXSPI1_RFDR2                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_RFDR2_NS                        FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,2)
  #define FLEXSPI1_RFDR3                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_RFDR3_NS                        FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,3)
  #define FLEXSPI1_RFDR4                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,4)
  #define FLEXSPI1_RFDR4_NS                        FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,4)
  #define FLEXSPI1_RFDR5                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,5)
  #define FLEXSPI1_RFDR5_NS                        FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,5)
  #define FLEXSPI1_RFDR6                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,6)
  #define FLEXSPI1_RFDR6_NS                        FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,6)
  #define FLEXSPI1_RFDR7                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,7)
  #define FLEXSPI1_RFDR7_NS                        FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,7)
  #define FLEXSPI1_RFDR8                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,8)
  #define FLEXSPI1_RFDR8_NS                        FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,8)
  #define FLEXSPI1_RFDR9                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,9)
  #define FLEXSPI1_RFDR9_NS                        FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,9)
  #define FLEXSPI1_RFDR10                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,10)
  #define FLEXSPI1_RFDR10_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,10)
  #define FLEXSPI1_RFDR11                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,11)
  #define FLEXSPI1_RFDR11_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,11)
  #define FLEXSPI1_RFDR12                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,12)
  #define FLEXSPI1_RFDR12_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,12)
  #define FLEXSPI1_RFDR13                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,13)
  #define FLEXSPI1_RFDR13_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,13)
  #define FLEXSPI1_RFDR14                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,14)
  #define FLEXSPI1_RFDR14_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,14)
  #define FLEXSPI1_RFDR15                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,15)
  #define FLEXSPI1_RFDR15_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,15)
  #define FLEXSPI1_RFDR16                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,16)
  #define FLEXSPI1_RFDR16_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,16)
  #define FLEXSPI1_RFDR17                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,17)
  #define FLEXSPI1_RFDR17_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,17)
  #define FLEXSPI1_RFDR18                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,18)
  #define FLEXSPI1_RFDR18_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,18)
  #define FLEXSPI1_RFDR19                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,19)
  #define FLEXSPI1_RFDR19_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,19)
  #define FLEXSPI1_RFDR20                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,20)
  #define FLEXSPI1_RFDR20_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,20)
  #define FLEXSPI1_RFDR21                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,21)
  #define FLEXSPI1_RFDR21_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,21)
  #define FLEXSPI1_RFDR22                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,22)
  #define FLEXSPI1_RFDR22_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,22)
  #define FLEXSPI1_RFDR23                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,23)
  #define FLEXSPI1_RFDR23_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,23)
  #define FLEXSPI1_RFDR24                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,24)
  #define FLEXSPI1_RFDR24_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,24)
  #define FLEXSPI1_RFDR25                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,25)
  #define FLEXSPI1_RFDR25_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,25)
  #define FLEXSPI1_RFDR26                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,26)
  #define FLEXSPI1_RFDR26_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,26)
  #define FLEXSPI1_RFDR27                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,27)
  #define FLEXSPI1_RFDR27_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,27)
  #define FLEXSPI1_RFDR28                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,28)
  #define FLEXSPI1_RFDR28_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,28)
  #define FLEXSPI1_RFDR29                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,29)
  #define FLEXSPI1_RFDR29_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,29)
  #define FLEXSPI1_RFDR30                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,30)
  #define FLEXSPI1_RFDR30_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,30)
  #define FLEXSPI1_RFDR31                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,31)
  #define FLEXSPI1_RFDR31_NS                       FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,31)
  #define FLEXSPI1_TFDR0                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_TFDR0_NS                        FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,0)
  #define FLEXSPI1_TFDR1                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_TFDR1_NS                        FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,1)
  #define FLEXSPI1_TFDR2                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_TFDR2_NS                        FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,2)
  #define FLEXSPI1_TFDR3                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_TFDR3_NS                        FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,3)
  #define FLEXSPI1_TFDR4                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,4)
  #define FLEXSPI1_TFDR4_NS                        FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,4)
  #define FLEXSPI1_TFDR5                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,5)
  #define FLEXSPI1_TFDR5_NS                        FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,5)
  #define FLEXSPI1_TFDR6                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,6)
  #define FLEXSPI1_TFDR6_NS                        FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,6)
  #define FLEXSPI1_TFDR7                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,7)
  #define FLEXSPI1_TFDR7_NS                        FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,7)
  #define FLEXSPI1_TFDR8                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,8)
  #define FLEXSPI1_TFDR8_NS                        FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,8)
  #define FLEXSPI1_TFDR9                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,9)
  #define FLEXSPI1_TFDR9_NS                        FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,9)
  #define FLEXSPI1_TFDR10                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,10)
  #define FLEXSPI1_TFDR10_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,10)
  #define FLEXSPI1_TFDR11                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,11)
  #define FLEXSPI1_TFDR11_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,11)
  #define FLEXSPI1_TFDR12                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,12)
  #define FLEXSPI1_TFDR12_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,12)
  #define FLEXSPI1_TFDR13                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,13)
  #define FLEXSPI1_TFDR13_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,13)
  #define FLEXSPI1_TFDR14                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,14)
  #define FLEXSPI1_TFDR14_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,14)
  #define FLEXSPI1_TFDR15                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,15)
  #define FLEXSPI1_TFDR15_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,15)
  #define FLEXSPI1_TFDR16                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,16)
  #define FLEXSPI1_TFDR16_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,16)
  #define FLEXSPI1_TFDR17                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,17)
  #define FLEXSPI1_TFDR17_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,17)
  #define FLEXSPI1_TFDR18                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,18)
  #define FLEXSPI1_TFDR18_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,18)
  #define FLEXSPI1_TFDR19                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,19)
  #define FLEXSPI1_TFDR19_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,19)
  #define FLEXSPI1_TFDR20                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,20)
  #define FLEXSPI1_TFDR20_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,20)
  #define FLEXSPI1_TFDR21                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,21)
  #define FLEXSPI1_TFDR21_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,21)
  #define FLEXSPI1_TFDR22                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,22)
  #define FLEXSPI1_TFDR22_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,22)
  #define FLEXSPI1_TFDR23                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,23)
  #define FLEXSPI1_TFDR23_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,23)
  #define FLEXSPI1_TFDR24                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,24)
  #define FLEXSPI1_TFDR24_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,24)
  #define FLEXSPI1_TFDR25                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,25)
  #define FLEXSPI1_TFDR25_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,25)
  #define FLEXSPI1_TFDR26                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,26)
  #define FLEXSPI1_TFDR26_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,26)
  #define FLEXSPI1_TFDR27                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,27)
  #define FLEXSPI1_TFDR27_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,27)
  #define FLEXSPI1_TFDR28                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,28)
  #define FLEXSPI1_TFDR28_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,28)
  #define FLEXSPI1_TFDR29                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,29)
  #define FLEXSPI1_TFDR29_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,29)
  #define FLEXSPI1_TFDR30                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,30)
  #define FLEXSPI1_TFDR30_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,30)
  #define FLEXSPI1_TFDR31                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,31)
  #define FLEXSPI1_TFDR31_NS                       FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,31)
  #define FLEXSPI1_LUT0                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_LUT0_NS                         FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,0)
  #define FLEXSPI1_LUT1                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_LUT1_NS                         FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,1)
  #define FLEXSPI1_LUT2                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_LUT2_NS                         FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,2)
  #define FLEXSPI1_LUT3                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_LUT3_NS                         FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,3)
  #define FLEXSPI1_LUT4                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,4)
  #define FLEXSPI1_LUT4_NS                         FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,4)
  #define FLEXSPI1_LUT5                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,5)
  #define FLEXSPI1_LUT5_NS                         FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,5)
  #define FLEXSPI1_LUT6                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,6)
  #define FLEXSPI1_LUT6_NS                         FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,6)
  #define FLEXSPI1_LUT7                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,7)
  #define FLEXSPI1_LUT7_NS                         FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,7)
  #define FLEXSPI1_LUT8                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,8)
  #define FLEXSPI1_LUT8_NS                         FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,8)
  #define FLEXSPI1_LUT9                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,9)
  #define FLEXSPI1_LUT9_NS                         FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,9)
  #define FLEXSPI1_LUT10                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,10)
  #define FLEXSPI1_LUT10_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,10)
  #define FLEXSPI1_LUT11                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,11)
  #define FLEXSPI1_LUT11_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,11)
  #define FLEXSPI1_LUT12                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,12)
  #define FLEXSPI1_LUT12_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,12)
  #define FLEXSPI1_LUT13                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,13)
  #define FLEXSPI1_LUT13_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,13)
  #define FLEXSPI1_LUT14                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,14)
  #define FLEXSPI1_LUT14_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,14)
  #define FLEXSPI1_LUT15                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,15)
  #define FLEXSPI1_LUT15_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,15)
  #define FLEXSPI1_LUT16                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,16)
  #define FLEXSPI1_LUT16_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,16)
  #define FLEXSPI1_LUT17                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,17)
  #define FLEXSPI1_LUT17_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,17)
  #define FLEXSPI1_LUT18                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,18)
  #define FLEXSPI1_LUT18_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,18)
  #define FLEXSPI1_LUT19                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,19)
  #define FLEXSPI1_LUT19_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,19)
  #define FLEXSPI1_LUT20                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,20)
  #define FLEXSPI1_LUT20_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,20)
  #define FLEXSPI1_LUT21                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,21)
  #define FLEXSPI1_LUT21_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,21)
  #define FLEXSPI1_LUT22                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,22)
  #define FLEXSPI1_LUT22_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,22)
  #define FLEXSPI1_LUT23                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,23)
  #define FLEXSPI1_LUT23_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,23)
  #define FLEXSPI1_LUT24                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,24)
  #define FLEXSPI1_LUT24_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,24)
  #define FLEXSPI1_LUT25                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,25)
  #define FLEXSPI1_LUT25_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,25)
  #define FLEXSPI1_LUT26                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,26)
  #define FLEXSPI1_LUT26_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,26)
  #define FLEXSPI1_LUT27                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,27)
  #define FLEXSPI1_LUT27_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,27)
  #define FLEXSPI1_LUT28                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,28)
  #define FLEXSPI1_LUT28_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,28)
  #define FLEXSPI1_LUT29                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,29)
  #define FLEXSPI1_LUT29_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,29)
  #define FLEXSPI1_LUT30                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,30)
  #define FLEXSPI1_LUT30_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,30)
  #define FLEXSPI1_LUT31                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,31)
  #define FLEXSPI1_LUT31_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,31)
  #define FLEXSPI1_LUT32                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,32)
  #define FLEXSPI1_LUT32_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,32)
  #define FLEXSPI1_LUT33                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,33)
  #define FLEXSPI1_LUT33_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,33)
  #define FLEXSPI1_LUT34                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,34)
  #define FLEXSPI1_LUT34_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,34)
  #define FLEXSPI1_LUT35                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,35)
  #define FLEXSPI1_LUT35_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,35)
  #define FLEXSPI1_LUT36                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,36)
  #define FLEXSPI1_LUT36_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,36)
  #define FLEXSPI1_LUT37                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,37)
  #define FLEXSPI1_LUT37_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,37)
  #define FLEXSPI1_LUT38                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,38)
  #define FLEXSPI1_LUT38_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,38)
  #define FLEXSPI1_LUT39                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,39)
  #define FLEXSPI1_LUT39_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,39)
  #define FLEXSPI1_LUT40                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,40)
  #define FLEXSPI1_LUT40_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,40)
  #define FLEXSPI1_LUT41                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,41)
  #define FLEXSPI1_LUT41_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,41)
  #define FLEXSPI1_LUT42                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,42)
  #define FLEXSPI1_LUT42_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,42)
  #define FLEXSPI1_LUT43                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,43)
  #define FLEXSPI1_LUT43_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,43)
  #define FLEXSPI1_LUT44                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,44)
  #define FLEXSPI1_LUT44_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,44)
  #define FLEXSPI1_LUT45                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,45)
  #define FLEXSPI1_LUT45_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,45)
  #define FLEXSPI1_LUT46                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,46)
  #define FLEXSPI1_LUT46_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,46)
  #define FLEXSPI1_LUT47                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,47)
  #define FLEXSPI1_LUT47_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,47)
  #define FLEXSPI1_LUT48                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,48)
  #define FLEXSPI1_LUT48_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,48)
  #define FLEXSPI1_LUT49                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,49)
  #define FLEXSPI1_LUT49_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,49)
  #define FLEXSPI1_LUT50                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,50)
  #define FLEXSPI1_LUT50_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,50)
  #define FLEXSPI1_LUT51                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,51)
  #define FLEXSPI1_LUT51_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,51)
  #define FLEXSPI1_LUT52                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,52)
  #define FLEXSPI1_LUT52_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,52)
  #define FLEXSPI1_LUT53                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,53)
  #define FLEXSPI1_LUT53_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,53)
  #define FLEXSPI1_LUT54                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,54)
  #define FLEXSPI1_LUT54_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,54)
  #define FLEXSPI1_LUT55                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,55)
  #define FLEXSPI1_LUT55_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,55)
  #define FLEXSPI1_LUT56                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,56)
  #define FLEXSPI1_LUT56_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,56)
  #define FLEXSPI1_LUT57                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,57)
  #define FLEXSPI1_LUT57_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,57)
  #define FLEXSPI1_LUT58                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,58)
  #define FLEXSPI1_LUT58_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,58)
  #define FLEXSPI1_LUT59                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,59)
  #define FLEXSPI1_LUT59_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,59)
  #define FLEXSPI1_LUT60                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,60)
  #define FLEXSPI1_LUT60_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,60)
  #define FLEXSPI1_LUT61                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,61)
  #define FLEXSPI1_LUT61_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,61)
  #define FLEXSPI1_LUT62                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,62)
  #define FLEXSPI1_LUT62_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,62)
  #define FLEXSPI1_LUT63                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,63)
  #define FLEXSPI1_LUT63_NS                        FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,63)
#else
  /* FLEXSPI0 */
  #define FLEXSPI0_MCR0                            FLEXSPI_MCR0_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_MCR1                            FLEXSPI_MCR1_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_MCR2                            FLEXSPI_MCR2_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_AHBCR                           FLEXSPI_AHBCR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_INTEN                           FLEXSPI_INTEN_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_INTR                            FLEXSPI_INTR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_LUTKEY                          FLEXSPI_LUTKEY_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_LUTCR                           FLEXSPI_LUTCR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_AHBRXBUF0CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_AHBRXBUF1CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_AHBRXBUF2CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_AHBRXBUF3CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_AHBRXBUF4CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,4)
  #define FLEXSPI0_AHBRXBUF5CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,5)
  #define FLEXSPI0_AHBRXBUF6CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,6)
  #define FLEXSPI0_AHBRXBUF7CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,7)
  #define FLEXSPI0_FLSHA1CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_FLSHA2CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_FLSHB1CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_FLSHB2CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_FLSHA1CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_FLSHA2CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_FLSHB1CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_FLSHB2CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_FLSHA1CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_FLSHA2CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_FLSHB1CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_FLSHB2CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_FLSHCR4                         FLEXSPI_FLSHCR4_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPCR0                           FLEXSPI_IPCR0_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPCR1                           FLEXSPI_IPCR1_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPCMD                           FLEXSPI_IPCMD_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_DLPR                            FLEXSPI_DLPR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPRXFCR                         FLEXSPI_IPRXFCR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPTXFCR                         FLEXSPI_IPTXFCR_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_DLLACR                          FLEXSPI_DLLCR_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_DLLBCR                          FLEXSPI_DLLCR_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_STS0                            FLEXSPI_STS0_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_STS1                            FLEXSPI_STS1_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_STS2                            FLEXSPI_STS2_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_AHBSPNDSTS                      FLEXSPI_AHBSPNDSTS_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPRXFSTS                        FLEXSPI_IPRXFSTS_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_IPTXFSTS                        FLEXSPI_IPTXFSTS_REG(FLEXSPI0_BASE_PTR)
  #define FLEXSPI0_RFDR0                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_RFDR1                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_RFDR2                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_RFDR3                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_RFDR4                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,4)
  #define FLEXSPI0_RFDR5                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,5)
  #define FLEXSPI0_RFDR6                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,6)
  #define FLEXSPI0_RFDR7                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,7)
  #define FLEXSPI0_RFDR8                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,8)
  #define FLEXSPI0_RFDR9                           FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,9)
  #define FLEXSPI0_RFDR10                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,10)
  #define FLEXSPI0_RFDR11                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,11)
  #define FLEXSPI0_RFDR12                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,12)
  #define FLEXSPI0_RFDR13                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,13)
  #define FLEXSPI0_RFDR14                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,14)
  #define FLEXSPI0_RFDR15                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,15)
  #define FLEXSPI0_RFDR16                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,16)
  #define FLEXSPI0_RFDR17                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,17)
  #define FLEXSPI0_RFDR18                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,18)
  #define FLEXSPI0_RFDR19                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,19)
  #define FLEXSPI0_RFDR20                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,20)
  #define FLEXSPI0_RFDR21                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,21)
  #define FLEXSPI0_RFDR22                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,22)
  #define FLEXSPI0_RFDR23                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,23)
  #define FLEXSPI0_RFDR24                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,24)
  #define FLEXSPI0_RFDR25                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,25)
  #define FLEXSPI0_RFDR26                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,26)
  #define FLEXSPI0_RFDR27                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,27)
  #define FLEXSPI0_RFDR28                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,28)
  #define FLEXSPI0_RFDR29                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,29)
  #define FLEXSPI0_RFDR30                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,30)
  #define FLEXSPI0_RFDR31                          FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,31)
  #define FLEXSPI0_TFDR0                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_TFDR1                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_TFDR2                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_TFDR3                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_TFDR4                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,4)
  #define FLEXSPI0_TFDR5                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,5)
  #define FLEXSPI0_TFDR6                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,6)
  #define FLEXSPI0_TFDR7                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,7)
  #define FLEXSPI0_TFDR8                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,8)
  #define FLEXSPI0_TFDR9                           FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,9)
  #define FLEXSPI0_TFDR10                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,10)
  #define FLEXSPI0_TFDR11                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,11)
  #define FLEXSPI0_TFDR12                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,12)
  #define FLEXSPI0_TFDR13                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,13)
  #define FLEXSPI0_TFDR14                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,14)
  #define FLEXSPI0_TFDR15                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,15)
  #define FLEXSPI0_TFDR16                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,16)
  #define FLEXSPI0_TFDR17                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,17)
  #define FLEXSPI0_TFDR18                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,18)
  #define FLEXSPI0_TFDR19                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,19)
  #define FLEXSPI0_TFDR20                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,20)
  #define FLEXSPI0_TFDR21                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,21)
  #define FLEXSPI0_TFDR22                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,22)
  #define FLEXSPI0_TFDR23                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,23)
  #define FLEXSPI0_TFDR24                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,24)
  #define FLEXSPI0_TFDR25                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,25)
  #define FLEXSPI0_TFDR26                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,26)
  #define FLEXSPI0_TFDR27                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,27)
  #define FLEXSPI0_TFDR28                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,28)
  #define FLEXSPI0_TFDR29                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,29)
  #define FLEXSPI0_TFDR30                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,30)
  #define FLEXSPI0_TFDR31                          FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,31)
  #define FLEXSPI0_LUT0                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,0)
  #define FLEXSPI0_LUT1                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,1)
  #define FLEXSPI0_LUT2                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,2)
  #define FLEXSPI0_LUT3                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,3)
  #define FLEXSPI0_LUT4                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,4)
  #define FLEXSPI0_LUT5                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,5)
  #define FLEXSPI0_LUT6                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,6)
  #define FLEXSPI0_LUT7                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,7)
  #define FLEXSPI0_LUT8                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,8)
  #define FLEXSPI0_LUT9                            FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,9)
  #define FLEXSPI0_LUT10                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,10)
  #define FLEXSPI0_LUT11                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,11)
  #define FLEXSPI0_LUT12                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,12)
  #define FLEXSPI0_LUT13                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,13)
  #define FLEXSPI0_LUT14                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,14)
  #define FLEXSPI0_LUT15                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,15)
  #define FLEXSPI0_LUT16                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,16)
  #define FLEXSPI0_LUT17                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,17)
  #define FLEXSPI0_LUT18                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,18)
  #define FLEXSPI0_LUT19                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,19)
  #define FLEXSPI0_LUT20                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,20)
  #define FLEXSPI0_LUT21                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,21)
  #define FLEXSPI0_LUT22                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,22)
  #define FLEXSPI0_LUT23                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,23)
  #define FLEXSPI0_LUT24                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,24)
  #define FLEXSPI0_LUT25                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,25)
  #define FLEXSPI0_LUT26                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,26)
  #define FLEXSPI0_LUT27                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,27)
  #define FLEXSPI0_LUT28                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,28)
  #define FLEXSPI0_LUT29                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,29)
  #define FLEXSPI0_LUT30                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,30)
  #define FLEXSPI0_LUT31                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,31)
  #define FLEXSPI0_LUT32                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,32)
  #define FLEXSPI0_LUT33                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,33)
  #define FLEXSPI0_LUT34                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,34)
  #define FLEXSPI0_LUT35                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,35)
  #define FLEXSPI0_LUT36                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,36)
  #define FLEXSPI0_LUT37                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,37)
  #define FLEXSPI0_LUT38                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,38)
  #define FLEXSPI0_LUT39                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,39)
  #define FLEXSPI0_LUT40                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,40)
  #define FLEXSPI0_LUT41                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,41)
  #define FLEXSPI0_LUT42                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,42)
  #define FLEXSPI0_LUT43                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,43)
  #define FLEXSPI0_LUT44                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,44)
  #define FLEXSPI0_LUT45                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,45)
  #define FLEXSPI0_LUT46                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,46)
  #define FLEXSPI0_LUT47                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,47)
  #define FLEXSPI0_LUT48                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,48)
  #define FLEXSPI0_LUT49                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,49)
  #define FLEXSPI0_LUT50                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,50)
  #define FLEXSPI0_LUT51                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,51)
  #define FLEXSPI0_LUT52                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,52)
  #define FLEXSPI0_LUT53                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,53)
  #define FLEXSPI0_LUT54                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,54)
  #define FLEXSPI0_LUT55                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,55)
  #define FLEXSPI0_LUT56                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,56)
  #define FLEXSPI0_LUT57                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,57)
  #define FLEXSPI0_LUT58                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,58)
  #define FLEXSPI0_LUT59                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,59)
  #define FLEXSPI0_LUT60                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,60)
  #define FLEXSPI0_LUT61                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,61)
  #define FLEXSPI0_LUT62                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,62)
  #define FLEXSPI0_LUT63                           FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,63)
  /* FLEXSPI1 */
  #define FLEXSPI1_MCR0                            FLEXSPI_MCR0_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_MCR1                            FLEXSPI_MCR1_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_MCR2                            FLEXSPI_MCR2_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_AHBCR                           FLEXSPI_AHBCR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_INTEN                           FLEXSPI_INTEN_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_INTR                            FLEXSPI_INTR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_LUTKEY                          FLEXSPI_LUTKEY_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_LUTCR                           FLEXSPI_LUTCR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_AHBRXBUF0CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_AHBRXBUF1CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_AHBRXBUF2CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_AHBRXBUF3CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_AHBRXBUF4CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,4)
  #define FLEXSPI1_AHBRXBUF5CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,5)
  #define FLEXSPI1_AHBRXBUF6CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,6)
  #define FLEXSPI1_AHBRXBUF7CR0                    FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,7)
  #define FLEXSPI1_FLSHA1CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_FLSHA2CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_FLSHB1CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_FLSHB2CR0                       FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_FLSHA1CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_FLSHA2CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_FLSHB1CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_FLSHB2CR1                       FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_FLSHA1CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_FLSHA2CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_FLSHB1CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_FLSHB2CR2                       FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_FLSHCR4                         FLEXSPI_FLSHCR4_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPCR0                           FLEXSPI_IPCR0_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPCR1                           FLEXSPI_IPCR1_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPCMD                           FLEXSPI_IPCMD_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_DLPR                            FLEXSPI_DLPR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPRXFCR                         FLEXSPI_IPRXFCR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPTXFCR                         FLEXSPI_IPTXFCR_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_DLLACR                          FLEXSPI_DLLCR_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_DLLBCR                          FLEXSPI_DLLCR_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_STS0                            FLEXSPI_STS0_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_STS1                            FLEXSPI_STS1_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_STS2                            FLEXSPI_STS2_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_AHBSPNDSTS                      FLEXSPI_AHBSPNDSTS_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPRXFSTS                        FLEXSPI_IPRXFSTS_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_IPTXFSTS                        FLEXSPI_IPTXFSTS_REG(FLEXSPI1_BASE_PTR)
  #define FLEXSPI1_RFDR0                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_RFDR1                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_RFDR2                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_RFDR3                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_RFDR4                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,4)
  #define FLEXSPI1_RFDR5                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,5)
  #define FLEXSPI1_RFDR6                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,6)
  #define FLEXSPI1_RFDR7                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,7)
  #define FLEXSPI1_RFDR8                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,8)
  #define FLEXSPI1_RFDR9                           FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,9)
  #define FLEXSPI1_RFDR10                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,10)
  #define FLEXSPI1_RFDR11                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,11)
  #define FLEXSPI1_RFDR12                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,12)
  #define FLEXSPI1_RFDR13                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,13)
  #define FLEXSPI1_RFDR14                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,14)
  #define FLEXSPI1_RFDR15                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,15)
  #define FLEXSPI1_RFDR16                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,16)
  #define FLEXSPI1_RFDR17                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,17)
  #define FLEXSPI1_RFDR18                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,18)
  #define FLEXSPI1_RFDR19                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,19)
  #define FLEXSPI1_RFDR20                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,20)
  #define FLEXSPI1_RFDR21                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,21)
  #define FLEXSPI1_RFDR22                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,22)
  #define FLEXSPI1_RFDR23                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,23)
  #define FLEXSPI1_RFDR24                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,24)
  #define FLEXSPI1_RFDR25                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,25)
  #define FLEXSPI1_RFDR26                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,26)
  #define FLEXSPI1_RFDR27                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,27)
  #define FLEXSPI1_RFDR28                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,28)
  #define FLEXSPI1_RFDR29                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,29)
  #define FLEXSPI1_RFDR30                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,30)
  #define FLEXSPI1_RFDR31                          FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,31)
  #define FLEXSPI1_TFDR0                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_TFDR1                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_TFDR2                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_TFDR3                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_TFDR4                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,4)
  #define FLEXSPI1_TFDR5                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,5)
  #define FLEXSPI1_TFDR6                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,6)
  #define FLEXSPI1_TFDR7                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,7)
  #define FLEXSPI1_TFDR8                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,8)
  #define FLEXSPI1_TFDR9                           FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,9)
  #define FLEXSPI1_TFDR10                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,10)
  #define FLEXSPI1_TFDR11                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,11)
  #define FLEXSPI1_TFDR12                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,12)
  #define FLEXSPI1_TFDR13                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,13)
  #define FLEXSPI1_TFDR14                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,14)
  #define FLEXSPI1_TFDR15                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,15)
  #define FLEXSPI1_TFDR16                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,16)
  #define FLEXSPI1_TFDR17                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,17)
  #define FLEXSPI1_TFDR18                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,18)
  #define FLEXSPI1_TFDR19                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,19)
  #define FLEXSPI1_TFDR20                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,20)
  #define FLEXSPI1_TFDR21                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,21)
  #define FLEXSPI1_TFDR22                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,22)
  #define FLEXSPI1_TFDR23                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,23)
  #define FLEXSPI1_TFDR24                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,24)
  #define FLEXSPI1_TFDR25                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,25)
  #define FLEXSPI1_TFDR26                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,26)
  #define FLEXSPI1_TFDR27                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,27)
  #define FLEXSPI1_TFDR28                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,28)
  #define FLEXSPI1_TFDR29                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,29)
  #define FLEXSPI1_TFDR30                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,30)
  #define FLEXSPI1_TFDR31                          FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,31)
  #define FLEXSPI1_LUT0                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,0)
  #define FLEXSPI1_LUT1                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,1)
  #define FLEXSPI1_LUT2                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,2)
  #define FLEXSPI1_LUT3                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,3)
  #define FLEXSPI1_LUT4                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,4)
  #define FLEXSPI1_LUT5                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,5)
  #define FLEXSPI1_LUT6                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,6)
  #define FLEXSPI1_LUT7                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,7)
  #define FLEXSPI1_LUT8                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,8)
  #define FLEXSPI1_LUT9                            FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,9)
  #define FLEXSPI1_LUT10                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,10)
  #define FLEXSPI1_LUT11                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,11)
  #define FLEXSPI1_LUT12                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,12)
  #define FLEXSPI1_LUT13                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,13)
  #define FLEXSPI1_LUT14                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,14)
  #define FLEXSPI1_LUT15                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,15)
  #define FLEXSPI1_LUT16                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,16)
  #define FLEXSPI1_LUT17                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,17)
  #define FLEXSPI1_LUT18                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,18)
  #define FLEXSPI1_LUT19                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,19)
  #define FLEXSPI1_LUT20                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,20)
  #define FLEXSPI1_LUT21                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,21)
  #define FLEXSPI1_LUT22                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,22)
  #define FLEXSPI1_LUT23                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,23)
  #define FLEXSPI1_LUT24                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,24)
  #define FLEXSPI1_LUT25                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,25)
  #define FLEXSPI1_LUT26                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,26)
  #define FLEXSPI1_LUT27                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,27)
  #define FLEXSPI1_LUT28                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,28)
  #define FLEXSPI1_LUT29                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,29)
  #define FLEXSPI1_LUT30                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,30)
  #define FLEXSPI1_LUT31                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,31)
  #define FLEXSPI1_LUT32                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,32)
  #define FLEXSPI1_LUT33                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,33)
  #define FLEXSPI1_LUT34                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,34)
  #define FLEXSPI1_LUT35                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,35)
  #define FLEXSPI1_LUT36                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,36)
  #define FLEXSPI1_LUT37                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,37)
  #define FLEXSPI1_LUT38                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,38)
  #define FLEXSPI1_LUT39                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,39)
  #define FLEXSPI1_LUT40                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,40)
  #define FLEXSPI1_LUT41                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,41)
  #define FLEXSPI1_LUT42                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,42)
  #define FLEXSPI1_LUT43                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,43)
  #define FLEXSPI1_LUT44                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,44)
  #define FLEXSPI1_LUT45                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,45)
  #define FLEXSPI1_LUT46                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,46)
  #define FLEXSPI1_LUT47                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,47)
  #define FLEXSPI1_LUT48                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,48)
  #define FLEXSPI1_LUT49                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,49)
  #define FLEXSPI1_LUT50                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,50)
  #define FLEXSPI1_LUT51                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,51)
  #define FLEXSPI1_LUT52                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,52)
  #define FLEXSPI1_LUT53                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,53)
  #define FLEXSPI1_LUT54                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,54)
  #define FLEXSPI1_LUT55                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,55)
  #define FLEXSPI1_LUT56                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,56)
  #define FLEXSPI1_LUT57                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,57)
  #define FLEXSPI1_LUT58                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,58)
  #define FLEXSPI1_LUT59                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,59)
  #define FLEXSPI1_LUT60                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,60)
  #define FLEXSPI1_LUT61                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,61)
  #define FLEXSPI1_LUT62                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,62)
  #define FLEXSPI1_LUT63                           FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,63)
#endif

/* FLEXSPI - Register array accessors */
#define FLEXSPI0_AHBRXBUFCR0(index)              FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI0_AHBRXBUFCR0_NS(index)           FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR_NS,index)
#define FLEXSPI0_AHBRXBUFCR0(index)              FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI1_AHBRXBUFCR0(index)              FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI1_AHBRXBUFCR0_NS(index)           FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR_NS,index)
#define FLEXSPI1_AHBRXBUFCR0(index)              FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI0_FLSHCR0(index)                  FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI0_FLSHCR0_NS(index)               FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR_NS,index)
#define FLEXSPI0_FLSHCR0(index)                  FLEXSPI_FLSHCR0_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI1_FLSHCR0(index)                  FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI1_FLSHCR0_NS(index)               FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR_NS,index)
#define FLEXSPI1_FLSHCR0(index)                  FLEXSPI_FLSHCR0_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI0_FLSHCR1(index)                  FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI0_FLSHCR1_NS(index)               FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR_NS,index)
#define FLEXSPI0_FLSHCR1(index)                  FLEXSPI_FLSHCR1_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI1_FLSHCR1(index)                  FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI1_FLSHCR1_NS(index)               FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR_NS,index)
#define FLEXSPI1_FLSHCR1(index)                  FLEXSPI_FLSHCR1_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI0_FLSHCR2(index)                  FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI0_FLSHCR2_NS(index)               FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR_NS,index)
#define FLEXSPI0_FLSHCR2(index)                  FLEXSPI_FLSHCR2_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI1_FLSHCR2(index)                  FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI1_FLSHCR2_NS(index)               FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR_NS,index)
#define FLEXSPI1_FLSHCR2(index)                  FLEXSPI_FLSHCR2_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI0_DLLCR(index)                    FLEXSPI_DLLCR_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI0_DLLCR_NS(index)                 FLEXSPI_DLLCR_REG(FLEXSPI0_BASE_PTR_NS,index)
#define FLEXSPI0_DLLCR(index)                    FLEXSPI_DLLCR_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI1_DLLCR(index)                    FLEXSPI_DLLCR_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI1_DLLCR_NS(index)                 FLEXSPI_DLLCR_REG(FLEXSPI1_BASE_PTR_NS,index)
#define FLEXSPI1_DLLCR(index)                    FLEXSPI_DLLCR_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI0_RFDR(index)                     FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI0_RFDR_NS(index)                  FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR_NS,index)
#define FLEXSPI0_RFDR(index)                     FLEXSPI_RFDR_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI1_RFDR(index)                     FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI1_RFDR_NS(index)                  FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR_NS,index)
#define FLEXSPI1_RFDR(index)                     FLEXSPI_RFDR_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI0_TFDR(index)                     FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI0_TFDR_NS(index)                  FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR_NS,index)
#define FLEXSPI0_TFDR(index)                     FLEXSPI_TFDR_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI1_TFDR(index)                     FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI1_TFDR_NS(index)                  FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR_NS,index)
#define FLEXSPI1_TFDR(index)                     FLEXSPI_TFDR_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI0_LUT(index)                      FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI0_LUT_NS(index)                   FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR_NS,index)
#define FLEXSPI0_LUT(index)                      FLEXSPI_LUT_REG(FLEXSPI0_BASE_PTR,index)
#define FLEXSPI1_LUT(index)                      FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,index)
#define FLEXSPI1_LUT_NS(index)                   FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR_NS,index)
#define FLEXSPI1_LUT(index)                      FLEXSPI_LUT_REG(FLEXSPI1_BASE_PTR,index)

/*!
 * @}
 */ /* end of group FLEXSPI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group FLEXSPI_Peripheral */


/* ----------------------------------------------------------------------------
   -- FREQME
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FREQME_Peripheral FREQME
 * @{
 */

/** FREQME - Peripheral register structure */
typedef struct FREQME_MemMap {
  union {                                          /* offset: 0x0 */
    uint32_t FREQMECTRL_R;                           /**< Frequency Measurement (in Read mode), offset: 0x0 */
    uint32_t FREQMECTRL_W;                           /**< Frequency Measurement (in Write mode), offset: 0x0 */
  };
} volatile *FREQME_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- FREQME - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FREQME_Register_Accessor_Macros FREQME - Register accessor macros
 * @{
 */


/* FREQME - Register accessors */
#define FREQME_FREQMECTRL_R_REG(base)            ((base)->FREQMECTRL_R)
#define FREQME_FREQMECTRL_W_REG(base)            ((base)->FREQMECTRL_W)

/*!
 * @}
 */ /* end of group FREQME_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- FREQME Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FREQME_Register_Masks FREQME Register Masks
 * @{
 */

/*! @name FREQMECTRL_R - Frequency Measurement (in Read mode) */
/*! @{ */
#define FREQME_FREQMECTRL_R_RESULT_MASK          (0x7FFFFFFFU)
#define FREQME_FREQMECTRL_R_RESULT_SHIFT         (0U)
/*! RESULT - Result
 */
#define FREQME_FREQMECTRL_R_RESULT(x)            (((uint32_t)(((uint32_t)(x)) << FREQME_FREQMECTRL_R_RESULT_SHIFT)) & FREQME_FREQMECTRL_R_RESULT_MASK)
#define FREQME_FREQMECTRL_R_MEASURE_IN_PROGRESS_MASK (0x80000000U)
#define FREQME_FREQMECTRL_R_MEASURE_IN_PROGRESS_SHIFT (31U)
/*! @} */

/*! @name FREQMECTRL_W - Frequency Measurement (in Write mode) */
/*! @{ */
#define FREQME_FREQMECTRL_W_REF_SCALE_MASK       (0x1FU)
#define FREQME_FREQMECTRL_W_REF_SCALE_SHIFT      (0U)
/*! REF_SCALE - Reference Clock Scaling Factor
 *  0b00000..Count cycle = 2 ^ 0 = 1
 *  0b00001..Count cycle = 2 ^ 1 = 2
 *  0b00010..Count cycle = 2 ^ 2 = 4
 *  0b11111..Count cycle = 2 ^ 31 = 2,147,483,648
 */
#define FREQME_FREQMECTRL_W_REF_SCALE(x)         (((uint32_t)(((uint32_t)(x)) << FREQME_FREQMECTRL_W_REF_SCALE_SHIFT)) & FREQME_FREQMECTRL_W_REF_SCALE_MASK)
#define FREQME_FREQMECTRL_W_PULSE_MODE_MASK      (0x100U)
#define FREQME_FREQMECTRL_W_PULSE_MODE_SHIFT     (8U)
#define FREQME_FREQMECTRL_W_PULSE_POL_MASK       (0x200U)
#define FREQME_FREQMECTRL_W_PULSE_POL_SHIFT      (9U)
#define FREQME_FREQMECTRL_W_MEASURE_IN_PROGRESS_MASK (0x80000000U)
#define FREQME_FREQMECTRL_W_MEASURE_IN_PROGRESS_SHIFT (31U)
/*! @} */


/*!
 * @}
 */ /* end of group FREQME_Register_Masks */


/* FREQME - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral FREQME base pointer */
  #define FREQME_BASE_PTR                          ((FREQME_MemMapPtr)0x5002F000u)
  /** Peripheral FREQME base pointer */
  #define FREQME_BASE_PTR_NS                       ((FREQME_MemMapPtr)0x4002F000u)
  /** Array initializer of FREQME peripheral base pointers */
  #define FREQME_BASE_PTRS                         { FREQME_BASE_PTR }
  /** Array initializer of FREQME peripheral base pointers */
  #define FREQME_BASE_PTRS_NS                      { FREQME_BASE_PTR_NS }
#else
  /** Peripheral FREQME base pointer */
  #define FREQME_BASE_PTR                          ((FREQME_MemMapPtr)0x4002F000u)
  /** Array initializer of FREQME peripheral base pointers */
  #define FREQME_BASE_PTRS                         { FREQME_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- FREQME - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FREQME_Register_Accessor_Macros FREQME - Register accessor macros
 * @{
 */


/* FREQME - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* FREQME */
  #define FREQME_FREQMECTRL_R                      FREQME_FREQMECTRL_R_REG(FREQME_BASE_PTR)
  #define FREQME_FREQMECTRL_R_NS                   FREQME_FREQMECTRL_R_REG(FREQME_BASE_PTR_NS)
  #define FREQME_FREQMECTRL_W                      FREQME_FREQMECTRL_W_REG(FREQME_BASE_PTR)
  #define FREQME_FREQMECTRL_W_NS                   FREQME_FREQMECTRL_W_REG(FREQME_BASE_PTR_NS)
#else
  /* FREQME */
  #define FREQME_FREQMECTRL_R                      FREQME_FREQMECTRL_R_REG(FREQME_BASE_PTR)
  #define FREQME_FREQMECTRL_W                      FREQME_FREQMECTRL_W_REG(FREQME_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group FREQME_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group FREQME_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPIO
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Peripheral GPIO
 * @{
 */

/** GPIO - Peripheral register structure */
typedef struct GPIO_MemMap {
  uint8_t B[7][32];                                /**< Byte pin registers for all port GPIO pins, array offset: 0x0, array step: index*0x20, index2*0x1 */
  uint8_t RESERVED_0[3872];
  uint32_t W[7][32];                               /**< Word pin registers for all port GPIO pins, array offset: 0x1000, array step: index*0x80, index2*0x4 */
  uint8_t RESERVED_1[3200];
  uint32_t DIR[8];                                 /**< Port direction, array offset: 0x2000, array step: 0x4 */
  uint8_t RESERVED_2[96];
  uint32_t MASK[8];                                /**< Port mask, array offset: 0x2080, array step: 0x4 */
  uint8_t RESERVED_3[96];
  uint32_t PIN[8];                                 /**< Port pin, array offset: 0x2100, array step: 0x4 */
  uint8_t RESERVED_4[96];
  uint32_t MPIN[8];                                /**< Masked Port Pin, array offset: 0x2180, array step: 0x4 */
  uint8_t RESERVED_5[96];
  uint32_t SET[8];                                 /**< Port set, array offset: 0x2200, array step: 0x4 */
  uint8_t RESERVED_6[96];
  uint32_t CLR[8];                                 /**< Port clear, array offset: 0x2280, array step: 0x4 */
  uint8_t RESERVED_7[96];
  uint32_t NOT[8];                                 /**< Port toggle, array offset: 0x2300, array step: 0x4 */
  uint8_t RESERVED_8[96];
  uint32_t DIRSET[8];                              /**< Port direction set, array offset: 0x2380, array step: 0x4 */
  uint8_t RESERVED_9[96];
  uint32_t DIRCLR[8];                              /**< Port direction clear, array offset: 0x2400, array step: 0x4 */
  uint8_t RESERVED_10[96];
  uint32_t DIRNOT[8];                              /**< Port direction toggle, array offset: 0x2480, array step: 0x4 */
  uint8_t RESERVED_11[96];
  uint32_t INTENA[8];                              /**< Interrupt A enable control, array offset: 0x2500, array step: 0x4 */
  uint8_t RESERVED_12[96];
  uint32_t INTENB[8];                              /**< Interrupt B enable control, array offset: 0x2580, array step: 0x4 */
  uint8_t RESERVED_13[96];
  uint32_t INTPOL[8];                              /**< Interupt polarity control, array offset: 0x2600, array step: 0x4 */
  uint8_t RESERVED_14[96];
  uint32_t INTEDG[8];                              /**< Interrupt edge select, array offset: 0x2680, array step: 0x4 */
  uint8_t RESERVED_15[96];
  uint32_t INTSTATA[8];                            /**< Interrupt status for interrupt A, array offset: 0x2700, array step: 0x4 */
  uint8_t RESERVED_16[96];
  uint32_t INTSTATB[8];                            /**< Interrupt status for interrupt B, array offset: 0x2780, array step: 0x4 */
} volatile *GPIO_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register accessors */
#define GPIO_B_REG(base,index,index2)            ((base)->B[index][index2])
#define GPIO_W_REG(base,index,index2)            ((base)->W[index][index2])
#define GPIO_DIR_REG(base,index)                 ((base)->DIR[index])
#define GPIO_MASK_REG(base,index)                ((base)->MASK[index])
#define GPIO_PIN_REG(base,index)                 ((base)->PIN[index])
#define GPIO_MPIN_REG(base,index)                ((base)->MPIN[index])
#define GPIO_SET_REG(base,index)                 ((base)->SET[index])
#define GPIO_CLR_REG(base,index)                 ((base)->CLR[index])
#define GPIO_NOT_REG(base,index)                 ((base)->NOT[index])
#define GPIO_DIRSET_REG(base,index)              ((base)->DIRSET[index])
#define GPIO_DIRCLR_REG(base,index)              ((base)->DIRCLR[index])
#define GPIO_DIRNOT_REG(base,index)              ((base)->DIRNOT[index])
#define GPIO_INTENA_REG(base,index)              ((base)->INTENA[index])
#define GPIO_INTENB_REG(base,index)              ((base)->INTENB[index])
#define GPIO_INTPOL_REG(base,index)              ((base)->INTPOL[index])
#define GPIO_INTEDG_REG(base,index)              ((base)->INTEDG[index])
#define GPIO_INTSTATA_REG(base,index)            ((base)->INTSTATA[index])
#define GPIO_INTSTATB_REG(base,index)            ((base)->INTSTATB[index])

/*!
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPIO Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Masks GPIO Register Masks
 * @{
 */

/*! @name B - Byte pin registers for all port GPIO pins */
/*! @{ */
#define GPIO_B_PBYTE_MASK                        (0x1U)
#define GPIO_B_PBYTE_SHIFT                       (0U)
/*! @} */

/* The count of GPIO_B */
#define GPIO_B_COUNT                             (7U)

/* The count of GPIO_B */
#define GPIO_B_COUNT2                            (32U)

/*! @name W - Word pin registers for all port GPIO pins */
/*! @{ */
#define GPIO_W_PWORD_MASK                        (0xFFFFFFFFU)
#define GPIO_W_PWORD_SHIFT                       (0U)
/*! PWORD - PWORD
 */
#define GPIO_W_PWORD(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_W_PWORD_SHIFT)) & GPIO_W_PWORD_MASK)
/*! @} */

/* The count of GPIO_W */
#define GPIO_W_COUNT                             (7U)

/* The count of GPIO_W */
#define GPIO_W_COUNT2                            (32U)

/*! @name DIR - Port direction */
/*! @{ */
#define GPIO_DIR_DIRP0_MASK                      (0x1U)
#define GPIO_DIR_DIRP0_SHIFT                     (0U)
#define GPIO_DIR_DIRP1_MASK                      (0x2U)
#define GPIO_DIR_DIRP1_SHIFT                     (1U)
#define GPIO_DIR_DIRP2_MASK                      (0x4U)
#define GPIO_DIR_DIRP2_SHIFT                     (2U)
#define GPIO_DIR_DIRP3_MASK                      (0x8U)
#define GPIO_DIR_DIRP3_SHIFT                     (3U)
#define GPIO_DIR_DIRP4_MASK                      (0x10U)
#define GPIO_DIR_DIRP4_SHIFT                     (4U)
#define GPIO_DIR_DIRP5_MASK                      (0x20U)
#define GPIO_DIR_DIRP5_SHIFT                     (5U)
#define GPIO_DIR_DIRP6_MASK                      (0x40U)
#define GPIO_DIR_DIRP6_SHIFT                     (6U)
#define GPIO_DIR_DIRP7_MASK                      (0x80U)
#define GPIO_DIR_DIRP7_SHIFT                     (7U)
#define GPIO_DIR_DIRP8_MASK                      (0x100U)
#define GPIO_DIR_DIRP8_SHIFT                     (8U)
#define GPIO_DIR_DIRP9_MASK                      (0x200U)
#define GPIO_DIR_DIRP9_SHIFT                     (9U)
#define GPIO_DIR_DIRP10_MASK                     (0x400U)
#define GPIO_DIR_DIRP10_SHIFT                    (10U)
#define GPIO_DIR_DIRP11_MASK                     (0x800U)
#define GPIO_DIR_DIRP11_SHIFT                    (11U)
#define GPIO_DIR_DIRP12_MASK                     (0x1000U)
#define GPIO_DIR_DIRP12_SHIFT                    (12U)
#define GPIO_DIR_DIRP13_MASK                     (0x2000U)
#define GPIO_DIR_DIRP13_SHIFT                    (13U)
#define GPIO_DIR_DIRP14_MASK                     (0x4000U)
#define GPIO_DIR_DIRP14_SHIFT                    (14U)
#define GPIO_DIR_DIRP15_MASK                     (0x8000U)
#define GPIO_DIR_DIRP15_SHIFT                    (15U)
#define GPIO_DIR_DIRP16_MASK                     (0x10000U)
#define GPIO_DIR_DIRP16_SHIFT                    (16U)
#define GPIO_DIR_DIRP17_MASK                     (0x20000U)
#define GPIO_DIR_DIRP17_SHIFT                    (17U)
#define GPIO_DIR_DIRP18_MASK                     (0x40000U)
#define GPIO_DIR_DIRP18_SHIFT                    (18U)
#define GPIO_DIR_DIRP19_MASK                     (0x80000U)
#define GPIO_DIR_DIRP19_SHIFT                    (19U)
#define GPIO_DIR_DIRP20_MASK                     (0x100000U)
#define GPIO_DIR_DIRP20_SHIFT                    (20U)
#define GPIO_DIR_DIRP21_MASK                     (0x200000U)
#define GPIO_DIR_DIRP21_SHIFT                    (21U)
#define GPIO_DIR_DIRP22_MASK                     (0x400000U)
#define GPIO_DIR_DIRP22_SHIFT                    (22U)
#define GPIO_DIR_DIRP23_MASK                     (0x800000U)
#define GPIO_DIR_DIRP23_SHIFT                    (23U)
#define GPIO_DIR_DIRP24_MASK                     (0x1000000U)
#define GPIO_DIR_DIRP24_SHIFT                    (24U)
#define GPIO_DIR_DIRP25_MASK                     (0x2000000U)
#define GPIO_DIR_DIRP25_SHIFT                    (25U)
#define GPIO_DIR_DIRP26_MASK                     (0x4000000U)
#define GPIO_DIR_DIRP26_SHIFT                    (26U)
#define GPIO_DIR_DIRP27_MASK                     (0x8000000U)
#define GPIO_DIR_DIRP27_SHIFT                    (27U)
#define GPIO_DIR_DIRP28_MASK                     (0x10000000U)
#define GPIO_DIR_DIRP28_SHIFT                    (28U)
#define GPIO_DIR_DIRP29_MASK                     (0x20000000U)
#define GPIO_DIR_DIRP29_SHIFT                    (29U)
#define GPIO_DIR_DIRP30_MASK                     (0x40000000U)
#define GPIO_DIR_DIRP30_SHIFT                    (30U)
#define GPIO_DIR_DIRP31_MASK                     (0x80000000U)
#define GPIO_DIR_DIRP31_SHIFT                    (31U)
/*! @} */

/* The count of GPIO_DIR */
#define GPIO_DIR_COUNT                           (8U)

/*! @name MASK - Port mask */
/*! @{ */
#define GPIO_MASK_MASKP0_MASK                    (0x1U)
#define GPIO_MASK_MASKP0_SHIFT                   (0U)
#define GPIO_MASK_MASKP1_MASK                    (0x2U)
#define GPIO_MASK_MASKP1_SHIFT                   (1U)
#define GPIO_MASK_MASKP2_MASK                    (0x4U)
#define GPIO_MASK_MASKP2_SHIFT                   (2U)
#define GPIO_MASK_MASKP3_MASK                    (0x8U)
#define GPIO_MASK_MASKP3_SHIFT                   (3U)
#define GPIO_MASK_MASKP4_MASK                    (0x10U)
#define GPIO_MASK_MASKP4_SHIFT                   (4U)
#define GPIO_MASK_MASKP5_MASK                    (0x20U)
#define GPIO_MASK_MASKP5_SHIFT                   (5U)
#define GPIO_MASK_MASKP6_MASK                    (0x40U)
#define GPIO_MASK_MASKP6_SHIFT                   (6U)
#define GPIO_MASK_MASKP7_MASK                    (0x80U)
#define GPIO_MASK_MASKP7_SHIFT                   (7U)
#define GPIO_MASK_MASKP8_MASK                    (0x100U)
#define GPIO_MASK_MASKP8_SHIFT                   (8U)
#define GPIO_MASK_MASKP9_MASK                    (0x200U)
#define GPIO_MASK_MASKP9_SHIFT                   (9U)
#define GPIO_MASK_MASKP10_MASK                   (0x400U)
#define GPIO_MASK_MASKP10_SHIFT                  (10U)
#define GPIO_MASK_MASKP11_MASK                   (0x800U)
#define GPIO_MASK_MASKP11_SHIFT                  (11U)
#define GPIO_MASK_MASKP12_MASK                   (0x1000U)
#define GPIO_MASK_MASKP12_SHIFT                  (12U)
#define GPIO_MASK_MASKP13_MASK                   (0x2000U)
#define GPIO_MASK_MASKP13_SHIFT                  (13U)
#define GPIO_MASK_MASKP14_MASK                   (0x4000U)
#define GPIO_MASK_MASKP14_SHIFT                  (14U)
#define GPIO_MASK_MASKP15_MASK                   (0x8000U)
#define GPIO_MASK_MASKP15_SHIFT                  (15U)
#define GPIO_MASK_MASKP16_MASK                   (0x10000U)
#define GPIO_MASK_MASKP16_SHIFT                  (16U)
#define GPIO_MASK_MASKP17_MASK                   (0x20000U)
#define GPIO_MASK_MASKP17_SHIFT                  (17U)
#define GPIO_MASK_MASKP18_MASK                   (0x40000U)
#define GPIO_MASK_MASKP18_SHIFT                  (18U)
#define GPIO_MASK_MASKP19_MASK                   (0x80000U)
#define GPIO_MASK_MASKP19_SHIFT                  (19U)
#define GPIO_MASK_MASKP20_MASK                   (0x100000U)
#define GPIO_MASK_MASKP20_SHIFT                  (20U)
#define GPIO_MASK_MASKP21_MASK                   (0x200000U)
#define GPIO_MASK_MASKP21_SHIFT                  (21U)
#define GPIO_MASK_MASKP22_MASK                   (0x400000U)
#define GPIO_MASK_MASKP22_SHIFT                  (22U)
#define GPIO_MASK_MASKP23_MASK                   (0x800000U)
#define GPIO_MASK_MASKP23_SHIFT                  (23U)
#define GPIO_MASK_MASKP24_MASK                   (0x1000000U)
#define GPIO_MASK_MASKP24_SHIFT                  (24U)
#define GPIO_MASK_MASKP25_MASK                   (0x2000000U)
#define GPIO_MASK_MASKP25_SHIFT                  (25U)
#define GPIO_MASK_MASKP26_MASK                   (0x4000000U)
#define GPIO_MASK_MASKP26_SHIFT                  (26U)
#define GPIO_MASK_MASKP27_MASK                   (0x8000000U)
#define GPIO_MASK_MASKP27_SHIFT                  (27U)
#define GPIO_MASK_MASKP28_MASK                   (0x10000000U)
#define GPIO_MASK_MASKP28_SHIFT                  (28U)
#define GPIO_MASK_MASKP29_MASK                   (0x20000000U)
#define GPIO_MASK_MASKP29_SHIFT                  (29U)
#define GPIO_MASK_MASKP30_MASK                   (0x40000000U)
#define GPIO_MASK_MASKP30_SHIFT                  (30U)
#define GPIO_MASK_MASKP31_MASK                   (0x80000000U)
#define GPIO_MASK_MASKP31_SHIFT                  (31U)
/*! @} */

/* The count of GPIO_MASK */
#define GPIO_MASK_COUNT                          (8U)

/*! @name PIN - Port pin */
/*! @{ */
#define GPIO_PIN_PORT0_MASK                      (0x1U)
#define GPIO_PIN_PORT0_SHIFT                     (0U)
#define GPIO_PIN_PORT1_MASK                      (0x2U)
#define GPIO_PIN_PORT1_SHIFT                     (1U)
#define GPIO_PIN_PORT2_MASK                      (0x4U)
#define GPIO_PIN_PORT2_SHIFT                     (2U)
#define GPIO_PIN_PORT3_MASK                      (0x8U)
#define GPIO_PIN_PORT3_SHIFT                     (3U)
#define GPIO_PIN_PORT4_MASK                      (0x10U)
#define GPIO_PIN_PORT4_SHIFT                     (4U)
#define GPIO_PIN_PORT5_MASK                      (0x20U)
#define GPIO_PIN_PORT5_SHIFT                     (5U)
#define GPIO_PIN_PORT6_MASK                      (0x40U)
#define GPIO_PIN_PORT6_SHIFT                     (6U)
#define GPIO_PIN_PORT7_MASK                      (0x80U)
#define GPIO_PIN_PORT7_SHIFT                     (7U)
#define GPIO_PIN_PORT8_MASK                      (0x100U)
#define GPIO_PIN_PORT8_SHIFT                     (8U)
#define GPIO_PIN_PORT9_MASK                      (0x200U)
#define GPIO_PIN_PORT9_SHIFT                     (9U)
#define GPIO_PIN_PORT10_MASK                     (0x400U)
#define GPIO_PIN_PORT10_SHIFT                    (10U)
#define GPIO_PIN_PORT11_MASK                     (0x800U)
#define GPIO_PIN_PORT11_SHIFT                    (11U)
#define GPIO_PIN_PORT12_MASK                     (0x1000U)
#define GPIO_PIN_PORT12_SHIFT                    (12U)
#define GPIO_PIN_PORT13_MASK                     (0x2000U)
#define GPIO_PIN_PORT13_SHIFT                    (13U)
#define GPIO_PIN_PORT14_MASK                     (0x4000U)
#define GPIO_PIN_PORT14_SHIFT                    (14U)
#define GPIO_PIN_PORT15_MASK                     (0x8000U)
#define GPIO_PIN_PORT15_SHIFT                    (15U)
#define GPIO_PIN_PORT16_MASK                     (0x10000U)
#define GPIO_PIN_PORT16_SHIFT                    (16U)
#define GPIO_PIN_PORT17_MASK                     (0x20000U)
#define GPIO_PIN_PORT17_SHIFT                    (17U)
#define GPIO_PIN_PORT18_MASK                     (0x40000U)
#define GPIO_PIN_PORT18_SHIFT                    (18U)
#define GPIO_PIN_PORT19_MASK                     (0x80000U)
#define GPIO_PIN_PORT19_SHIFT                    (19U)
#define GPIO_PIN_PORT20_MASK                     (0x100000U)
#define GPIO_PIN_PORT20_SHIFT                    (20U)
#define GPIO_PIN_PORT21_MASK                     (0x200000U)
#define GPIO_PIN_PORT21_SHIFT                    (21U)
#define GPIO_PIN_PORT22_MASK                     (0x400000U)
#define GPIO_PIN_PORT22_SHIFT                    (22U)
#define GPIO_PIN_PORT23_MASK                     (0x800000U)
#define GPIO_PIN_PORT23_SHIFT                    (23U)
#define GPIO_PIN_PORT24_MASK                     (0x1000000U)
#define GPIO_PIN_PORT24_SHIFT                    (24U)
#define GPIO_PIN_PORT25_MASK                     (0x2000000U)
#define GPIO_PIN_PORT25_SHIFT                    (25U)
#define GPIO_PIN_PORT26_MASK                     (0x4000000U)
#define GPIO_PIN_PORT26_SHIFT                    (26U)
#define GPIO_PIN_PORT27_MASK                     (0x8000000U)
#define GPIO_PIN_PORT27_SHIFT                    (27U)
#define GPIO_PIN_PORT28_MASK                     (0x10000000U)
#define GPIO_PIN_PORT28_SHIFT                    (28U)
#define GPIO_PIN_PORT29_MASK                     (0x20000000U)
#define GPIO_PIN_PORT29_SHIFT                    (29U)
#define GPIO_PIN_PORT30_MASK                     (0x40000000U)
#define GPIO_PIN_PORT30_SHIFT                    (30U)
#define GPIO_PIN_PORT31_MASK                     (0x80000000U)
#define GPIO_PIN_PORT31_SHIFT                    (31U)
/*! @} */

/* The count of GPIO_PIN */
#define GPIO_PIN_COUNT                           (8U)

/*! @name MPIN - Masked Port Pin */
/*! @{ */
#define GPIO_MPIN_MPORTP0_MASK                   (0x1U)
#define GPIO_MPIN_MPORTP0_SHIFT                  (0U)
#define GPIO_MPIN_MPORTP1_MASK                   (0x2U)
#define GPIO_MPIN_MPORTP1_SHIFT                  (1U)
#define GPIO_MPIN_MPORTP2_MASK                   (0x4U)
#define GPIO_MPIN_MPORTP2_SHIFT                  (2U)
#define GPIO_MPIN_MPORTP3_MASK                   (0x8U)
#define GPIO_MPIN_MPORTP3_SHIFT                  (3U)
#define GPIO_MPIN_MPORTP4_MASK                   (0x10U)
#define GPIO_MPIN_MPORTP4_SHIFT                  (4U)
#define GPIO_MPIN_MPORTP5_MASK                   (0x20U)
#define GPIO_MPIN_MPORTP5_SHIFT                  (5U)
#define GPIO_MPIN_MPORTP6_MASK                   (0x40U)
#define GPIO_MPIN_MPORTP6_SHIFT                  (6U)
#define GPIO_MPIN_MPORTP7_MASK                   (0x80U)
#define GPIO_MPIN_MPORTP7_SHIFT                  (7U)
#define GPIO_MPIN_MPORTP8_MASK                   (0x100U)
#define GPIO_MPIN_MPORTP8_SHIFT                  (8U)
#define GPIO_MPIN_MPORTP9_MASK                   (0x200U)
#define GPIO_MPIN_MPORTP9_SHIFT                  (9U)
#define GPIO_MPIN_MPORTP10_MASK                  (0x400U)
#define GPIO_MPIN_MPORTP10_SHIFT                 (10U)
#define GPIO_MPIN_MPORTP11_MASK                  (0x800U)
#define GPIO_MPIN_MPORTP11_SHIFT                 (11U)
#define GPIO_MPIN_MPORTP12_MASK                  (0x1000U)
#define GPIO_MPIN_MPORTP12_SHIFT                 (12U)
#define GPIO_MPIN_MPORTP13_MASK                  (0x2000U)
#define GPIO_MPIN_MPORTP13_SHIFT                 (13U)
#define GPIO_MPIN_MPORTP14_MASK                  (0x4000U)
#define GPIO_MPIN_MPORTP14_SHIFT                 (14U)
#define GPIO_MPIN_MPORTP15_MASK                  (0x8000U)
#define GPIO_MPIN_MPORTP15_SHIFT                 (15U)
#define GPIO_MPIN_MPORTP16_MASK                  (0x10000U)
#define GPIO_MPIN_MPORTP16_SHIFT                 (16U)
#define GPIO_MPIN_MPORTP17_MASK                  (0x20000U)
#define GPIO_MPIN_MPORTP17_SHIFT                 (17U)
#define GPIO_MPIN_MPORTP18_MASK                  (0x40000U)
#define GPIO_MPIN_MPORTP18_SHIFT                 (18U)
#define GPIO_MPIN_MPORTP19_MASK                  (0x80000U)
#define GPIO_MPIN_MPORTP19_SHIFT                 (19U)
#define GPIO_MPIN_MPORTP20_MASK                  (0x100000U)
#define GPIO_MPIN_MPORTP20_SHIFT                 (20U)
#define GPIO_MPIN_MPORTP21_MASK                  (0x200000U)
#define GPIO_MPIN_MPORTP21_SHIFT                 (21U)
#define GPIO_MPIN_MPORTP22_MASK                  (0x400000U)
#define GPIO_MPIN_MPORTP22_SHIFT                 (22U)
#define GPIO_MPIN_MPORTP23_MASK                  (0x800000U)
#define GPIO_MPIN_MPORTP23_SHIFT                 (23U)
#define GPIO_MPIN_MPORTP24_MASK                  (0x1000000U)
#define GPIO_MPIN_MPORTP24_SHIFT                 (24U)
#define GPIO_MPIN_MPORTP25_MASK                  (0x2000000U)
#define GPIO_MPIN_MPORTP25_SHIFT                 (25U)
#define GPIO_MPIN_MPORTP26_MASK                  (0x4000000U)
#define GPIO_MPIN_MPORTP26_SHIFT                 (26U)
#define GPIO_MPIN_MPORTP27_MASK                  (0x8000000U)
#define GPIO_MPIN_MPORTP27_SHIFT                 (27U)
#define GPIO_MPIN_MPORTP28_MASK                  (0x10000000U)
#define GPIO_MPIN_MPORTP28_SHIFT                 (28U)
#define GPIO_MPIN_MPORTP29_MASK                  (0x20000000U)
#define GPIO_MPIN_MPORTP29_SHIFT                 (29U)
#define GPIO_MPIN_MPORTP30_MASK                  (0x40000000U)
#define GPIO_MPIN_MPORTP30_SHIFT                 (30U)
#define GPIO_MPIN_MPORTP31_MASK                  (0x80000000U)
#define GPIO_MPIN_MPORTP31_SHIFT                 (31U)
/*! @} */

/* The count of GPIO_MPIN */
#define GPIO_MPIN_COUNT                          (8U)

/*! @name SET - Port set */
/*! @{ */
#define GPIO_SET_SETP_MASK                       (0xFFFFFFFFU)
#define GPIO_SET_SETP_SHIFT                      (0U)
/*! SETP - Read or set output bits
 *  0b00000000000000000000000000000000..Read- output bit; write- no operation
 *  0b00000000000000000000000000000001..Read- output bit; write- set output bit
 */
#define GPIO_SET_SETP(x)                         (((uint32_t)(((uint32_t)(x)) << GPIO_SET_SETP_SHIFT)) & GPIO_SET_SETP_MASK)
/*! @} */

/* The count of GPIO_SET */
#define GPIO_SET_COUNT                           (8U)

/*! @name CLR - Port clear */
/*! @{ */
#define GPIO_CLR_CLRP0_MASK                      (0x1U)
#define GPIO_CLR_CLRP0_SHIFT                     (0U)
#define GPIO_CLR_CLRP1_MASK                      (0x2U)
#define GPIO_CLR_CLRP1_SHIFT                     (1U)
#define GPIO_CLR_CLRP2_MASK                      (0x4U)
#define GPIO_CLR_CLRP2_SHIFT                     (2U)
#define GPIO_CLR_CLRP3_MASK                      (0x8U)
#define GPIO_CLR_CLRP3_SHIFT                     (3U)
#define GPIO_CLR_CLRP4_MASK                      (0x10U)
#define GPIO_CLR_CLRP4_SHIFT                     (4U)
#define GPIO_CLR_CLRP5_MASK                      (0x20U)
#define GPIO_CLR_CLRP5_SHIFT                     (5U)
#define GPIO_CLR_CLRP6_MASK                      (0x40U)
#define GPIO_CLR_CLRP6_SHIFT                     (6U)
#define GPIO_CLR_CLRP7_MASK                      (0x80U)
#define GPIO_CLR_CLRP7_SHIFT                     (7U)
#define GPIO_CLR_CLRP8_MASK                      (0x100U)
#define GPIO_CLR_CLRP8_SHIFT                     (8U)
#define GPIO_CLR_CLRP9_MASK                      (0x200U)
#define GPIO_CLR_CLRP9_SHIFT                     (9U)
#define GPIO_CLR_CLRP10_MASK                     (0x400U)
#define GPIO_CLR_CLRP10_SHIFT                    (10U)
#define GPIO_CLR_CLRP11_MASK                     (0x800U)
#define GPIO_CLR_CLRP11_SHIFT                    (11U)
#define GPIO_CLR_CLRP12_MASK                     (0x1000U)
#define GPIO_CLR_CLRP12_SHIFT                    (12U)
#define GPIO_CLR_CLRP13_MASK                     (0x2000U)
#define GPIO_CLR_CLRP13_SHIFT                    (13U)
#define GPIO_CLR_CLRP14_MASK                     (0x4000U)
#define GPIO_CLR_CLRP14_SHIFT                    (14U)
#define GPIO_CLR_CLRP15_MASK                     (0x8000U)
#define GPIO_CLR_CLRP15_SHIFT                    (15U)
#define GPIO_CLR_CLRP16_MASK                     (0x10000U)
#define GPIO_CLR_CLRP16_SHIFT                    (16U)
#define GPIO_CLR_CLRP17_MASK                     (0x20000U)
#define GPIO_CLR_CLRP17_SHIFT                    (17U)
#define GPIO_CLR_CLRP18_MASK                     (0x40000U)
#define GPIO_CLR_CLRP18_SHIFT                    (18U)
#define GPIO_CLR_CLRP19_MASK                     (0x80000U)
#define GPIO_CLR_CLRP19_SHIFT                    (19U)
#define GPIO_CLR_CLRP20_MASK                     (0x100000U)
#define GPIO_CLR_CLRP20_SHIFT                    (20U)
#define GPIO_CLR_CLRP21_MASK                     (0x200000U)
#define GPIO_CLR_CLRP21_SHIFT                    (21U)
#define GPIO_CLR_CLRP22_MASK                     (0x400000U)
#define GPIO_CLR_CLRP22_SHIFT                    (22U)
#define GPIO_CLR_CLRP23_MASK                     (0x800000U)
#define GPIO_CLR_CLRP23_SHIFT                    (23U)
#define GPIO_CLR_CLRP24_MASK                     (0x1000000U)
#define GPIO_CLR_CLRP24_SHIFT                    (24U)
#define GPIO_CLR_CLRP25_MASK                     (0x2000000U)
#define GPIO_CLR_CLRP25_SHIFT                    (25U)
#define GPIO_CLR_CLRP26_MASK                     (0x4000000U)
#define GPIO_CLR_CLRP26_SHIFT                    (26U)
#define GPIO_CLR_CLRP27_MASK                     (0x8000000U)
#define GPIO_CLR_CLRP27_SHIFT                    (27U)
#define GPIO_CLR_CLRP28_MASK                     (0x10000000U)
#define GPIO_CLR_CLRP28_SHIFT                    (28U)
#define GPIO_CLR_CLRP29_MASK                     (0x20000000U)
#define GPIO_CLR_CLRP29_SHIFT                    (29U)
#define GPIO_CLR_CLRP30_MASK                     (0x40000000U)
#define GPIO_CLR_CLRP30_SHIFT                    (30U)
#define GPIO_CLR_CLRP31_MASK                     (0x80000000U)
#define GPIO_CLR_CLRP31_SHIFT                    (31U)
/*! @} */

/* The count of GPIO_CLR */
#define GPIO_CLR_COUNT                           (8U)

/*! @name NOT - Port toggle */
/*! @{ */
#define GPIO_NOT_NOTP0_MASK                      (0x1U)
#define GPIO_NOT_NOTP0_SHIFT                     (0U)
#define GPIO_NOT_NOTP1_MASK                      (0x2U)
#define GPIO_NOT_NOTP1_SHIFT                     (1U)
#define GPIO_NOT_NOTP2_MASK                      (0x4U)
#define GPIO_NOT_NOTP2_SHIFT                     (2U)
#define GPIO_NOT_NOTP3_MASK                      (0x8U)
#define GPIO_NOT_NOTP3_SHIFT                     (3U)
#define GPIO_NOT_NOTP4_MASK                      (0x10U)
#define GPIO_NOT_NOTP4_SHIFT                     (4U)
#define GPIO_NOT_NOTP5_MASK                      (0x20U)
#define GPIO_NOT_NOTP5_SHIFT                     (5U)
#define GPIO_NOT_NOTP6_MASK                      (0x40U)
#define GPIO_NOT_NOTP6_SHIFT                     (6U)
#define GPIO_NOT_NOTP7_MASK                      (0x80U)
#define GPIO_NOT_NOTP7_SHIFT                     (7U)
#define GPIO_NOT_NOTP8_MASK                      (0x100U)
#define GPIO_NOT_NOTP8_SHIFT                     (8U)
#define GPIO_NOT_NOTP9_MASK                      (0x200U)
#define GPIO_NOT_NOTP9_SHIFT                     (9U)
#define GPIO_NOT_NOTP10_MASK                     (0x400U)
#define GPIO_NOT_NOTP10_SHIFT                    (10U)
#define GPIO_NOT_NOTP11_MASK                     (0x800U)
#define GPIO_NOT_NOTP11_SHIFT                    (11U)
#define GPIO_NOT_NOTP12_MASK                     (0x1000U)
#define GPIO_NOT_NOTP12_SHIFT                    (12U)
#define GPIO_NOT_NOTP13_MASK                     (0x2000U)
#define GPIO_NOT_NOTP13_SHIFT                    (13U)
#define GPIO_NOT_NOTP14_MASK                     (0x4000U)
#define GPIO_NOT_NOTP14_SHIFT                    (14U)
#define GPIO_NOT_NOTP15_MASK                     (0x8000U)
#define GPIO_NOT_NOTP15_SHIFT                    (15U)
#define GPIO_NOT_NOTP16_MASK                     (0x10000U)
#define GPIO_NOT_NOTP16_SHIFT                    (16U)
#define GPIO_NOT_NOTP17_MASK                     (0x20000U)
#define GPIO_NOT_NOTP17_SHIFT                    (17U)
#define GPIO_NOT_NOTP18_MASK                     (0x40000U)
#define GPIO_NOT_NOTP18_SHIFT                    (18U)
#define GPIO_NOT_NOTP19_MASK                     (0x80000U)
#define GPIO_NOT_NOTP19_SHIFT                    (19U)
#define GPIO_NOT_NOTP20_MASK                     (0x100000U)
#define GPIO_NOT_NOTP20_SHIFT                    (20U)
#define GPIO_NOT_NOTP21_MASK                     (0x200000U)
#define GPIO_NOT_NOTP21_SHIFT                    (21U)
#define GPIO_NOT_NOTP22_MASK                     (0x400000U)
#define GPIO_NOT_NOTP22_SHIFT                    (22U)
#define GPIO_NOT_NOTP23_MASK                     (0x800000U)
#define GPIO_NOT_NOTP23_SHIFT                    (23U)
#define GPIO_NOT_NOTP24_MASK                     (0x1000000U)
#define GPIO_NOT_NOTP24_SHIFT                    (24U)
#define GPIO_NOT_NOTP25_MASK                     (0x2000000U)
#define GPIO_NOT_NOTP25_SHIFT                    (25U)
#define GPIO_NOT_NOTP26_MASK                     (0x4000000U)
#define GPIO_NOT_NOTP26_SHIFT                    (26U)
#define GPIO_NOT_NOTP27_MASK                     (0x8000000U)
#define GPIO_NOT_NOTP27_SHIFT                    (27U)
#define GPIO_NOT_NOTP28_MASK                     (0x10000000U)
#define GPIO_NOT_NOTP28_SHIFT                    (28U)
#define GPIO_NOT_NOTP29_MASK                     (0x20000000U)
#define GPIO_NOT_NOTP29_SHIFT                    (29U)
#define GPIO_NOT_NOTP30_MASK                     (0x40000000U)
#define GPIO_NOT_NOTP30_SHIFT                    (30U)
#define GPIO_NOT_NOTP31_MASK                     (0x80000000U)
#define GPIO_NOT_NOTP31_SHIFT                    (31U)
/*! @} */

/* The count of GPIO_NOT */
#define GPIO_NOT_COUNT                           (8U)

/*! @name DIRSET - Port direction set */
/*! @{ */
#define GPIO_DIRSET_DIRSETP0_MASK                (0x1U)
#define GPIO_DIRSET_DIRSETP0_SHIFT               (0U)
#define GPIO_DIRSET_DIRSETP1_MASK                (0x2U)
#define GPIO_DIRSET_DIRSETP1_SHIFT               (1U)
#define GPIO_DIRSET_DIRSETP2_MASK                (0x4U)
#define GPIO_DIRSET_DIRSETP2_SHIFT               (2U)
#define GPIO_DIRSET_DIRSETP3_MASK                (0x8U)
#define GPIO_DIRSET_DIRSETP3_SHIFT               (3U)
#define GPIO_DIRSET_DIRSETP4_MASK                (0x10U)
#define GPIO_DIRSET_DIRSETP4_SHIFT               (4U)
#define GPIO_DIRSET_DIRSETP5_MASK                (0x20U)
#define GPIO_DIRSET_DIRSETP5_SHIFT               (5U)
#define GPIO_DIRSET_DIRSETP6_MASK                (0x40U)
#define GPIO_DIRSET_DIRSETP6_SHIFT               (6U)
#define GPIO_DIRSET_DIRSETP7_MASK                (0x80U)
#define GPIO_DIRSET_DIRSETP7_SHIFT               (7U)
#define GPIO_DIRSET_DIRSETP8_MASK                (0x100U)
#define GPIO_DIRSET_DIRSETP8_SHIFT               (8U)
#define GPIO_DIRSET_DIRSETP9_MASK                (0x200U)
#define GPIO_DIRSET_DIRSETP9_SHIFT               (9U)
#define GPIO_DIRSET_DIRSETP10_MASK               (0x400U)
#define GPIO_DIRSET_DIRSETP10_SHIFT              (10U)
#define GPIO_DIRSET_DIRSETP11_MASK               (0x800U)
#define GPIO_DIRSET_DIRSETP11_SHIFT              (11U)
#define GPIO_DIRSET_DIRSETP12_MASK               (0x1000U)
#define GPIO_DIRSET_DIRSETP12_SHIFT              (12U)
#define GPIO_DIRSET_DIRSETP13_MASK               (0x2000U)
#define GPIO_DIRSET_DIRSETP13_SHIFT              (13U)
#define GPIO_DIRSET_DIRSETP14_MASK               (0x4000U)
#define GPIO_DIRSET_DIRSETP14_SHIFT              (14U)
#define GPIO_DIRSET_DIRSETP15_MASK               (0x8000U)
#define GPIO_DIRSET_DIRSETP15_SHIFT              (15U)
#define GPIO_DIRSET_DIRSETP16_MASK               (0x10000U)
#define GPIO_DIRSET_DIRSETP16_SHIFT              (16U)
#define GPIO_DIRSET_DIRSETP17_MASK               (0x20000U)
#define GPIO_DIRSET_DIRSETP17_SHIFT              (17U)
#define GPIO_DIRSET_DIRSETP18_MASK               (0x40000U)
#define GPIO_DIRSET_DIRSETP18_SHIFT              (18U)
#define GPIO_DIRSET_DIRSETP19_MASK               (0x80000U)
#define GPIO_DIRSET_DIRSETP19_SHIFT              (19U)
#define GPIO_DIRSET_DIRSETP20_MASK               (0x100000U)
#define GPIO_DIRSET_DIRSETP20_SHIFT              (20U)
#define GPIO_DIRSET_DIRSETP21_MASK               (0x200000U)
#define GPIO_DIRSET_DIRSETP21_SHIFT              (21U)
#define GPIO_DIRSET_DIRSETP22_MASK               (0x400000U)
#define GPIO_DIRSET_DIRSETP22_SHIFT              (22U)
#define GPIO_DIRSET_DIRSETP23_MASK               (0x800000U)
#define GPIO_DIRSET_DIRSETP23_SHIFT              (23U)
#define GPIO_DIRSET_DIRSETP24_MASK               (0x1000000U)
#define GPIO_DIRSET_DIRSETP24_SHIFT              (24U)
#define GPIO_DIRSET_DIRSETP25_MASK               (0x2000000U)
#define GPIO_DIRSET_DIRSETP25_SHIFT              (25U)
#define GPIO_DIRSET_DIRSETP26_MASK               (0x4000000U)
#define GPIO_DIRSET_DIRSETP26_SHIFT              (26U)
#define GPIO_DIRSET_DIRSETP27_MASK               (0x8000000U)
#define GPIO_DIRSET_DIRSETP27_SHIFT              (27U)
#define GPIO_DIRSET_DIRSETP28_MASK               (0x10000000U)
#define GPIO_DIRSET_DIRSETP28_SHIFT              (28U)
#define GPIO_DIRSET_DIRSETP29_MASK               (0x20000000U)
#define GPIO_DIRSET_DIRSETP29_SHIFT              (29U)
#define GPIO_DIRSET_DIRSETP30_MASK               (0x40000000U)
#define GPIO_DIRSET_DIRSETP30_SHIFT              (30U)
#define GPIO_DIRSET_DIRSETP31_MASK               (0x80000000U)
#define GPIO_DIRSET_DIRSETP31_SHIFT              (31U)
/*! @} */

/* The count of GPIO_DIRSET */
#define GPIO_DIRSET_COUNT                        (8U)

/*! @name DIRCLR - Port direction clear */
/*! @{ */
#define GPIO_DIRCLR_DIRCLRP0_MASK                (0x1U)
#define GPIO_DIRCLR_DIRCLRP0_SHIFT               (0U)
#define GPIO_DIRCLR_DIRCLRP1_MASK                (0x2U)
#define GPIO_DIRCLR_DIRCLRP1_SHIFT               (1U)
#define GPIO_DIRCLR_DIRCLRP2_MASK                (0x4U)
#define GPIO_DIRCLR_DIRCLRP2_SHIFT               (2U)
#define GPIO_DIRCLR_DIRCLRP3_MASK                (0x8U)
#define GPIO_DIRCLR_DIRCLRP3_SHIFT               (3U)
#define GPIO_DIRCLR_DIRCLRP4_MASK                (0x10U)
#define GPIO_DIRCLR_DIRCLRP4_SHIFT               (4U)
#define GPIO_DIRCLR_DIRCLRP5_MASK                (0x20U)
#define GPIO_DIRCLR_DIRCLRP5_SHIFT               (5U)
#define GPIO_DIRCLR_DIRCLRP6_MASK                (0x40U)
#define GPIO_DIRCLR_DIRCLRP6_SHIFT               (6U)
#define GPIO_DIRCLR_DIRCLRP7_MASK                (0x80U)
#define GPIO_DIRCLR_DIRCLRP7_SHIFT               (7U)
#define GPIO_DIRCLR_DIRCLRP8_MASK                (0x100U)
#define GPIO_DIRCLR_DIRCLRP8_SHIFT               (8U)
#define GPIO_DIRCLR_DIRCLRP9_MASK                (0x200U)
#define GPIO_DIRCLR_DIRCLRP9_SHIFT               (9U)
#define GPIO_DIRCLR_DIRCLRP10_MASK               (0x400U)
#define GPIO_DIRCLR_DIRCLRP10_SHIFT              (10U)
#define GPIO_DIRCLR_DIRCLRP11_MASK               (0x800U)
#define GPIO_DIRCLR_DIRCLRP11_SHIFT              (11U)
#define GPIO_DIRCLR_DIRCLRP12_MASK               (0x1000U)
#define GPIO_DIRCLR_DIRCLRP12_SHIFT              (12U)
#define GPIO_DIRCLR_DIRCLRP13_MASK               (0x2000U)
#define GPIO_DIRCLR_DIRCLRP13_SHIFT              (13U)
#define GPIO_DIRCLR_DIRCLRP14_MASK               (0x4000U)
#define GPIO_DIRCLR_DIRCLRP14_SHIFT              (14U)
#define GPIO_DIRCLR_DIRCLRP15_MASK               (0x8000U)
#define GPIO_DIRCLR_DIRCLRP15_SHIFT              (15U)
#define GPIO_DIRCLR_DIRCLRP16_MASK               (0x10000U)
#define GPIO_DIRCLR_DIRCLRP16_SHIFT              (16U)
#define GPIO_DIRCLR_DIRCLRP17_MASK               (0x20000U)
#define GPIO_DIRCLR_DIRCLRP17_SHIFT              (17U)
#define GPIO_DIRCLR_DIRCLRP18_MASK               (0x40000U)
#define GPIO_DIRCLR_DIRCLRP18_SHIFT              (18U)
#define GPIO_DIRCLR_DIRCLRP19_MASK               (0x80000U)
#define GPIO_DIRCLR_DIRCLRP19_SHIFT              (19U)
#define GPIO_DIRCLR_DIRCLRP20_MASK               (0x100000U)
#define GPIO_DIRCLR_DIRCLRP20_SHIFT              (20U)
#define GPIO_DIRCLR_DIRCLRP21_MASK               (0x200000U)
#define GPIO_DIRCLR_DIRCLRP21_SHIFT              (21U)
#define GPIO_DIRCLR_DIRCLRP22_MASK               (0x400000U)
#define GPIO_DIRCLR_DIRCLRP22_SHIFT              (22U)
#define GPIO_DIRCLR_DIRCLRP23_MASK               (0x800000U)
#define GPIO_DIRCLR_DIRCLRP23_SHIFT              (23U)
#define GPIO_DIRCLR_DIRCLRP24_MASK               (0x1000000U)
#define GPIO_DIRCLR_DIRCLRP24_SHIFT              (24U)
#define GPIO_DIRCLR_DIRCLRP25_MASK               (0x2000000U)
#define GPIO_DIRCLR_DIRCLRP25_SHIFT              (25U)
#define GPIO_DIRCLR_DIRCLRP26_MASK               (0x4000000U)
#define GPIO_DIRCLR_DIRCLRP26_SHIFT              (26U)
#define GPIO_DIRCLR_DIRCLRP27_MASK               (0x8000000U)
#define GPIO_DIRCLR_DIRCLRP27_SHIFT              (27U)
#define GPIO_DIRCLR_DIRCLRP28_MASK               (0x10000000U)
#define GPIO_DIRCLR_DIRCLRP28_SHIFT              (28U)
#define GPIO_DIRCLR_DIRCLRP29_MASK               (0x20000000U)
#define GPIO_DIRCLR_DIRCLRP29_SHIFT              (29U)
#define GPIO_DIRCLR_DIRCLRP30_MASK               (0x40000000U)
#define GPIO_DIRCLR_DIRCLRP30_SHIFT              (30U)
#define GPIO_DIRCLR_DIRCLRP31_MASK               (0x80000000U)
#define GPIO_DIRCLR_DIRCLRP31_SHIFT              (31U)
/*! @} */

/* The count of GPIO_DIRCLR */
#define GPIO_DIRCLR_COUNT                        (8U)

/*! @name DIRNOT - Port direction toggle */
/*! @{ */
#define GPIO_DIRNOT_DIRNOTP_MASK                 (0x1FFFFFFFU)
#define GPIO_DIRNOT_DIRNOTP_SHIFT                (0U)
/*! DIRNOTP - Toggle direction bits.
 *  0b00000000000000000000000000000..No operation
 *  0b00000000000000000000000000001..Toggles direction bit
 */
#define GPIO_DIRNOT_DIRNOTP(x)                   (((uint32_t)(((uint32_t)(x)) << GPIO_DIRNOT_DIRNOTP_SHIFT)) & GPIO_DIRNOT_DIRNOTP_MASK)
/*! @} */

/* The count of GPIO_DIRNOT */
#define GPIO_DIRNOT_COUNT                        (8U)

/*! @name INTENA - Interrupt A enable control */
/*! @{ */
#define GPIO_INTENA_INT_EN0_MASK                 (0x1U)
#define GPIO_INTENA_INT_EN0_SHIFT                (0U)
#define GPIO_INTENA_INT_EN1_MASK                 (0x2U)
#define GPIO_INTENA_INT_EN1_SHIFT                (1U)
#define GPIO_INTENA_INT_EN2_MASK                 (0x4U)
#define GPIO_INTENA_INT_EN2_SHIFT                (2U)
#define GPIO_INTENA_INT_EN3_MASK                 (0x8U)
#define GPIO_INTENA_INT_EN3_SHIFT                (3U)
#define GPIO_INTENA_INT_EN4_MASK                 (0x10U)
#define GPIO_INTENA_INT_EN4_SHIFT                (4U)
#define GPIO_INTENA_INT_EN5_MASK                 (0x20U)
#define GPIO_INTENA_INT_EN5_SHIFT                (5U)
#define GPIO_INTENA_INT_EN6_MASK                 (0x40U)
#define GPIO_INTENA_INT_EN6_SHIFT                (6U)
#define GPIO_INTENA_INT_EN7_MASK                 (0x80U)
#define GPIO_INTENA_INT_EN7_SHIFT                (7U)
#define GPIO_INTENA_INT_EN8_MASK                 (0x100U)
#define GPIO_INTENA_INT_EN8_SHIFT                (8U)
#define GPIO_INTENA_INT_EN9_MASK                 (0x200U)
#define GPIO_INTENA_INT_EN9_SHIFT                (9U)
#define GPIO_INTENA_INT_EN10_MASK                (0x400U)
#define GPIO_INTENA_INT_EN10_SHIFT               (10U)
#define GPIO_INTENA_INT_EN11_MASK                (0x800U)
#define GPIO_INTENA_INT_EN11_SHIFT               (11U)
#define GPIO_INTENA_INT_EN12_MASK                (0x1000U)
#define GPIO_INTENA_INT_EN12_SHIFT               (12U)
#define GPIO_INTENA_INT_EN13_MASK                (0x2000U)
#define GPIO_INTENA_INT_EN13_SHIFT               (13U)
#define GPIO_INTENA_INT_EN14_MASK                (0x4000U)
#define GPIO_INTENA_INT_EN14_SHIFT               (14U)
#define GPIO_INTENA_INT_EN15_MASK                (0x8000U)
#define GPIO_INTENA_INT_EN15_SHIFT               (15U)
#define GPIO_INTENA_INT_EN16_MASK                (0x10000U)
#define GPIO_INTENA_INT_EN16_SHIFT               (16U)
#define GPIO_INTENA_INT_EN17_MASK                (0x20000U)
#define GPIO_INTENA_INT_EN17_SHIFT               (17U)
#define GPIO_INTENA_INT_EN18_MASK                (0x40000U)
#define GPIO_INTENA_INT_EN18_SHIFT               (18U)
#define GPIO_INTENA_INT_EN19_MASK                (0x80000U)
#define GPIO_INTENA_INT_EN19_SHIFT               (19U)
#define GPIO_INTENA_INT_EN20_MASK                (0x100000U)
#define GPIO_INTENA_INT_EN20_SHIFT               (20U)
#define GPIO_INTENA_INT_EN21_MASK                (0x200000U)
#define GPIO_INTENA_INT_EN21_SHIFT               (21U)
#define GPIO_INTENA_INT_EN22_MASK                (0x400000U)
#define GPIO_INTENA_INT_EN22_SHIFT               (22U)
#define GPIO_INTENA_INT_EN23_MASK                (0x800000U)
#define GPIO_INTENA_INT_EN23_SHIFT               (23U)
#define GPIO_INTENA_INT_EN24_MASK                (0x1000000U)
#define GPIO_INTENA_INT_EN24_SHIFT               (24U)
#define GPIO_INTENA_INT_EN25_MASK                (0x2000000U)
#define GPIO_INTENA_INT_EN25_SHIFT               (25U)
#define GPIO_INTENA_INT_EN26_MASK                (0x4000000U)
#define GPIO_INTENA_INT_EN26_SHIFT               (26U)
#define GPIO_INTENA_INT_EN27_MASK                (0x8000000U)
#define GPIO_INTENA_INT_EN27_SHIFT               (27U)
#define GPIO_INTENA_INT_EN28_MASK                (0x10000000U)
#define GPIO_INTENA_INT_EN28_SHIFT               (28U)
#define GPIO_INTENA_INT_EN29_MASK                (0x20000000U)
#define GPIO_INTENA_INT_EN29_SHIFT               (29U)
#define GPIO_INTENA_INT_EN30_MASK                (0x40000000U)
#define GPIO_INTENA_INT_EN30_SHIFT               (30U)
#define GPIO_INTENA_INT_EN31_MASK                (0x80000000U)
#define GPIO_INTENA_INT_EN31_SHIFT               (31U)
/*! @} */

/* The count of GPIO_INTENA */
#define GPIO_INTENA_COUNT                        (8U)

/*! @name INTENB - Interrupt B enable control */
/*! @{ */
#define GPIO_INTENB_INT_EN0_MASK                 (0x1U)
#define GPIO_INTENB_INT_EN0_SHIFT                (0U)
#define GPIO_INTENB_INT_EN1_MASK                 (0x2U)
#define GPIO_INTENB_INT_EN1_SHIFT                (1U)
#define GPIO_INTENB_INT_EN2_MASK                 (0x4U)
#define GPIO_INTENB_INT_EN2_SHIFT                (2U)
#define GPIO_INTENB_INT_EN3_MASK                 (0x8U)
#define GPIO_INTENB_INT_EN3_SHIFT                (3U)
#define GPIO_INTENB_INT_EN4_MASK                 (0x10U)
#define GPIO_INTENB_INT_EN4_SHIFT                (4U)
#define GPIO_INTENB_INT_EN5_MASK                 (0x20U)
#define GPIO_INTENB_INT_EN5_SHIFT                (5U)
#define GPIO_INTENB_INT_EN6_MASK                 (0x40U)
#define GPIO_INTENB_INT_EN6_SHIFT                (6U)
#define GPIO_INTENB_INT_EN7_MASK                 (0x80U)
#define GPIO_INTENB_INT_EN7_SHIFT                (7U)
#define GPIO_INTENB_INT_EN8_MASK                 (0x100U)
#define GPIO_INTENB_INT_EN8_SHIFT                (8U)
#define GPIO_INTENB_INT_EN9_MASK                 (0x200U)
#define GPIO_INTENB_INT_EN9_SHIFT                (9U)
#define GPIO_INTENB_INT_EN10_MASK                (0x400U)
#define GPIO_INTENB_INT_EN10_SHIFT               (10U)
#define GPIO_INTENB_INT_EN11_MASK                (0x800U)
#define GPIO_INTENB_INT_EN11_SHIFT               (11U)
#define GPIO_INTENB_INT_EN12_MASK                (0x1000U)
#define GPIO_INTENB_INT_EN12_SHIFT               (12U)
#define GPIO_INTENB_INT_EN13_MASK                (0x2000U)
#define GPIO_INTENB_INT_EN13_SHIFT               (13U)
#define GPIO_INTENB_INT_EN14_MASK                (0x4000U)
#define GPIO_INTENB_INT_EN14_SHIFT               (14U)
#define GPIO_INTENB_INT_EN15_MASK                (0x8000U)
#define GPIO_INTENB_INT_EN15_SHIFT               (15U)
#define GPIO_INTENB_INT_EN16_MASK                (0x10000U)
#define GPIO_INTENB_INT_EN16_SHIFT               (16U)
#define GPIO_INTENB_INT_EN17_MASK                (0x20000U)
#define GPIO_INTENB_INT_EN17_SHIFT               (17U)
#define GPIO_INTENB_INT_EN18_MASK                (0x40000U)
#define GPIO_INTENB_INT_EN18_SHIFT               (18U)
#define GPIO_INTENB_INT_EN19_MASK                (0x80000U)
#define GPIO_INTENB_INT_EN19_SHIFT               (19U)
#define GPIO_INTENB_INT_EN20_MASK                (0x100000U)
#define GPIO_INTENB_INT_EN20_SHIFT               (20U)
#define GPIO_INTENB_INT_EN21_MASK                (0x200000U)
#define GPIO_INTENB_INT_EN21_SHIFT               (21U)
#define GPIO_INTENB_INT_EN22_MASK                (0x400000U)
#define GPIO_INTENB_INT_EN22_SHIFT               (22U)
#define GPIO_INTENB_INT_EN23_MASK                (0x800000U)
#define GPIO_INTENB_INT_EN23_SHIFT               (23U)
#define GPIO_INTENB_INT_EN24_MASK                (0x1000000U)
#define GPIO_INTENB_INT_EN24_SHIFT               (24U)
#define GPIO_INTENB_INT_EN25_MASK                (0x2000000U)
#define GPIO_INTENB_INT_EN25_SHIFT               (25U)
#define GPIO_INTENB_INT_EN26_MASK                (0x4000000U)
#define GPIO_INTENB_INT_EN26_SHIFT               (26U)
#define GPIO_INTENB_INT_EN27_MASK                (0x8000000U)
#define GPIO_INTENB_INT_EN27_SHIFT               (27U)
#define GPIO_INTENB_INT_EN28_MASK                (0x10000000U)
#define GPIO_INTENB_INT_EN28_SHIFT               (28U)
#define GPIO_INTENB_INT_EN29_MASK                (0x20000000U)
#define GPIO_INTENB_INT_EN29_SHIFT               (29U)
#define GPIO_INTENB_INT_EN30_MASK                (0x40000000U)
#define GPIO_INTENB_INT_EN30_SHIFT               (30U)
#define GPIO_INTENB_INT_EN31_MASK                (0x80000000U)
#define GPIO_INTENB_INT_EN31_SHIFT               (31U)
/*! @} */

/* The count of GPIO_INTENB */
#define GPIO_INTENB_COUNT                        (8U)

/*! @name INTPOL - Interupt polarity control */
/*! @{ */
#define GPIO_INTPOL_POL_CTL0_MASK                (0x1U)
#define GPIO_INTPOL_POL_CTL0_SHIFT               (0U)
#define GPIO_INTPOL_POL_CTL1_MASK                (0x2U)
#define GPIO_INTPOL_POL_CTL1_SHIFT               (1U)
#define GPIO_INTPOL_POL_CTL2_MASK                (0x4U)
#define GPIO_INTPOL_POL_CTL2_SHIFT               (2U)
#define GPIO_INTPOL_POL_CTL3_MASK                (0x8U)
#define GPIO_INTPOL_POL_CTL3_SHIFT               (3U)
#define GPIO_INTPOL_POL_CTL4_MASK                (0x10U)
#define GPIO_INTPOL_POL_CTL4_SHIFT               (4U)
#define GPIO_INTPOL_POL_CTL5_MASK                (0x20U)
#define GPIO_INTPOL_POL_CTL5_SHIFT               (5U)
#define GPIO_INTPOL_POL_CTL6_MASK                (0x40U)
#define GPIO_INTPOL_POL_CTL6_SHIFT               (6U)
#define GPIO_INTPOL_POL_CTL7_MASK                (0x80U)
#define GPIO_INTPOL_POL_CTL7_SHIFT               (7U)
#define GPIO_INTPOL_POL_CTL8_MASK                (0x100U)
#define GPIO_INTPOL_POL_CTL8_SHIFT               (8U)
#define GPIO_INTPOL_POL_CTL9_MASK                (0x200U)
#define GPIO_INTPOL_POL_CTL9_SHIFT               (9U)
#define GPIO_INTPOL_POL_CTL10_MASK               (0x400U)
#define GPIO_INTPOL_POL_CTL10_SHIFT              (10U)
#define GPIO_INTPOL_POL_CTL11_MASK               (0x800U)
#define GPIO_INTPOL_POL_CTL11_SHIFT              (11U)
#define GPIO_INTPOL_POL_CTL12_MASK               (0x1000U)
#define GPIO_INTPOL_POL_CTL12_SHIFT              (12U)
#define GPIO_INTPOL_POL_CTL13_MASK               (0x2000U)
#define GPIO_INTPOL_POL_CTL13_SHIFT              (13U)
#define GPIO_INTPOL_POL_CTL14_MASK               (0x4000U)
#define GPIO_INTPOL_POL_CTL14_SHIFT              (14U)
#define GPIO_INTPOL_POL_CTL15_MASK               (0x8000U)
#define GPIO_INTPOL_POL_CTL15_SHIFT              (15U)
#define GPIO_INTPOL_POL_CTL16_MASK               (0x10000U)
#define GPIO_INTPOL_POL_CTL16_SHIFT              (16U)
#define GPIO_INTPOL_POL_CTL17_MASK               (0x20000U)
#define GPIO_INTPOL_POL_CTL17_SHIFT              (17U)
#define GPIO_INTPOL_POL_CTL18_MASK               (0x40000U)
#define GPIO_INTPOL_POL_CTL18_SHIFT              (18U)
#define GPIO_INTPOL_POL_CTL19_MASK               (0x80000U)
#define GPIO_INTPOL_POL_CTL19_SHIFT              (19U)
#define GPIO_INTPOL_POL_CTL20_MASK               (0x100000U)
#define GPIO_INTPOL_POL_CTL20_SHIFT              (20U)
#define GPIO_INTPOL_POL_CTL21_MASK               (0x200000U)
#define GPIO_INTPOL_POL_CTL21_SHIFT              (21U)
#define GPIO_INTPOL_POL_CTL22_MASK               (0x400000U)
#define GPIO_INTPOL_POL_CTL22_SHIFT              (22U)
#define GPIO_INTPOL_POL_CTL23_MASK               (0x800000U)
#define GPIO_INTPOL_POL_CTL23_SHIFT              (23U)
#define GPIO_INTPOL_POL_CTL24_MASK               (0x1000000U)
#define GPIO_INTPOL_POL_CTL24_SHIFT              (24U)
#define GPIO_INTPOL_POL_CTL25_MASK               (0x2000000U)
#define GPIO_INTPOL_POL_CTL25_SHIFT              (25U)
#define GPIO_INTPOL_POL_CTL26_MASK               (0x4000000U)
#define GPIO_INTPOL_POL_CTL26_SHIFT              (26U)
#define GPIO_INTPOL_POL_CTL27_MASK               (0x8000000U)
#define GPIO_INTPOL_POL_CTL27_SHIFT              (27U)
#define GPIO_INTPOL_POL_CTL28_MASK               (0x10000000U)
#define GPIO_INTPOL_POL_CTL28_SHIFT              (28U)
#define GPIO_INTPOL_POL_CTL29_MASK               (0x20000000U)
#define GPIO_INTPOL_POL_CTL29_SHIFT              (29U)
#define GPIO_INTPOL_POL_CTL30_MASK               (0x40000000U)
#define GPIO_INTPOL_POL_CTL30_SHIFT              (30U)
#define GPIO_INTPOL_POL_CTL31_MASK               (0x80000000U)
#define GPIO_INTPOL_POL_CTL31_SHIFT              (31U)
/*! @} */

/* The count of GPIO_INTPOL */
#define GPIO_INTPOL_COUNT                        (8U)

/*! @name INTEDG - Interrupt edge select */
/*! @{ */
#define GPIO_INTEDG_EDGE0_MASK                   (0x1U)
#define GPIO_INTEDG_EDGE0_SHIFT                  (0U)
#define GPIO_INTEDG_EDGE1_MASK                   (0x2U)
#define GPIO_INTEDG_EDGE1_SHIFT                  (1U)
#define GPIO_INTEDG_EDGE2_MASK                   (0x4U)
#define GPIO_INTEDG_EDGE2_SHIFT                  (2U)
#define GPIO_INTEDG_EDGE3_MASK                   (0x8U)
#define GPIO_INTEDG_EDGE3_SHIFT                  (3U)
#define GPIO_INTEDG_EDGE4_MASK                   (0x10U)
#define GPIO_INTEDG_EDGE4_SHIFT                  (4U)
#define GPIO_INTEDG_EDGE5_MASK                   (0x20U)
#define GPIO_INTEDG_EDGE5_SHIFT                  (5U)
#define GPIO_INTEDG_EDGE6_MASK                   (0x40U)
#define GPIO_INTEDG_EDGE6_SHIFT                  (6U)
#define GPIO_INTEDG_EDGE7_MASK                   (0x80U)
#define GPIO_INTEDG_EDGE7_SHIFT                  (7U)
#define GPIO_INTEDG_EDGE8_MASK                   (0x100U)
#define GPIO_INTEDG_EDGE8_SHIFT                  (8U)
#define GPIO_INTEDG_EDGE9_MASK                   (0x200U)
#define GPIO_INTEDG_EDGE9_SHIFT                  (9U)
#define GPIO_INTEDG_EDGE10_MASK                  (0x400U)
#define GPIO_INTEDG_EDGE10_SHIFT                 (10U)
#define GPIO_INTEDG_EDGE11_MASK                  (0x800U)
#define GPIO_INTEDG_EDGE11_SHIFT                 (11U)
#define GPIO_INTEDG_EDGE12_MASK                  (0x1000U)
#define GPIO_INTEDG_EDGE12_SHIFT                 (12U)
#define GPIO_INTEDG_EDGE13_MASK                  (0x2000U)
#define GPIO_INTEDG_EDGE13_SHIFT                 (13U)
#define GPIO_INTEDG_EDGE14_MASK                  (0x4000U)
#define GPIO_INTEDG_EDGE14_SHIFT                 (14U)
#define GPIO_INTEDG_EDGE15_MASK                  (0x8000U)
#define GPIO_INTEDG_EDGE15_SHIFT                 (15U)
#define GPIO_INTEDG_EDGE16_MASK                  (0x10000U)
#define GPIO_INTEDG_EDGE16_SHIFT                 (16U)
#define GPIO_INTEDG_EDGE17_MASK                  (0x20000U)
#define GPIO_INTEDG_EDGE17_SHIFT                 (17U)
#define GPIO_INTEDG_EDGE18_MASK                  (0x40000U)
#define GPIO_INTEDG_EDGE18_SHIFT                 (18U)
#define GPIO_INTEDG_EDGE19_MASK                  (0x80000U)
#define GPIO_INTEDG_EDGE19_SHIFT                 (19U)
#define GPIO_INTEDG_EDGE20_MASK                  (0x100000U)
#define GPIO_INTEDG_EDGE20_SHIFT                 (20U)
#define GPIO_INTEDG_EDGE21_MASK                  (0x200000U)
#define GPIO_INTEDG_EDGE21_SHIFT                 (21U)
#define GPIO_INTEDG_EDGE22_MASK                  (0x400000U)
#define GPIO_INTEDG_EDGE22_SHIFT                 (22U)
#define GPIO_INTEDG_EDGE23_MASK                  (0x800000U)
#define GPIO_INTEDG_EDGE23_SHIFT                 (23U)
#define GPIO_INTEDG_EDGE24_MASK                  (0x1000000U)
#define GPIO_INTEDG_EDGE24_SHIFT                 (24U)
#define GPIO_INTEDG_EDGE25_MASK                  (0x2000000U)
#define GPIO_INTEDG_EDGE25_SHIFT                 (25U)
#define GPIO_INTEDG_EDGE26_MASK                  (0x4000000U)
#define GPIO_INTEDG_EDGE26_SHIFT                 (26U)
#define GPIO_INTEDG_EDGE27_MASK                  (0x8000000U)
#define GPIO_INTEDG_EDGE27_SHIFT                 (27U)
#define GPIO_INTEDG_EDGE28_MASK                  (0x10000000U)
#define GPIO_INTEDG_EDGE28_SHIFT                 (28U)
#define GPIO_INTEDG_EDGE29_MASK                  (0x20000000U)
#define GPIO_INTEDG_EDGE29_SHIFT                 (29U)
#define GPIO_INTEDG_EDGE30_MASK                  (0x40000000U)
#define GPIO_INTEDG_EDGE30_SHIFT                 (30U)
#define GPIO_INTEDG_EDGE31_MASK                  (0x80000000U)
#define GPIO_INTEDG_EDGE31_SHIFT                 (31U)
/*! @} */

/* The count of GPIO_INTEDG */
#define GPIO_INTEDG_COUNT                        (8U)

/*! @name INTSTATA - Interrupt status for interrupt A */
/*! @{ */
#define GPIO_INTSTATA_STATUS_MASK                (0xFFFFFFFFU)
#define GPIO_INTSTATA_STATUS_SHIFT               (0U)
/*! STATUS - Interrupt status.
 */
#define GPIO_INTSTATA_STATUS(x)                  (((uint32_t)(((uint32_t)(x)) << GPIO_INTSTATA_STATUS_SHIFT)) & GPIO_INTSTATA_STATUS_MASK)
/*! @} */

/* The count of GPIO_INTSTATA */
#define GPIO_INTSTATA_COUNT                      (8U)

/*! @name INTSTATB - Interrupt status for interrupt B */
/*! @{ */
#define GPIO_INTSTATB_STATUS_MASK                (0xFFFFFFFFU)
#define GPIO_INTSTATB_STATUS_SHIFT               (0U)
/*! STATUS - Interrupt status
 */
#define GPIO_INTSTATB_STATUS(x)                  (((uint32_t)(((uint32_t)(x)) << GPIO_INTSTATB_STATUS_SHIFT)) & GPIO_INTSTATB_STATUS_MASK)
/*! @} */

/* The count of GPIO_INTSTATB */
#define GPIO_INTSTATB_COUNT                      (8U)


/*!
 * @}
 */ /* end of group GPIO_Register_Masks */


/* GPIO - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral GPIO base pointer */
  #define GPIO_BASE_PTR                            ((GPIO_MemMapPtr)0x50100000u)
  /** Peripheral GPIO base pointer */
  #define GPIO_BASE_PTR_NS                         ((GPIO_MemMapPtr)0x40100000u)
  /** Peripheral SECGPIO base pointer */
  #define SECGPIO_BASE_PTR                         ((GPIO_MemMapPtr)0x50204000u)
  /** Peripheral SECGPIO base pointer */
  #define SECGPIO_BASE_PTR_NS                      ((GPIO_MemMapPtr)0x40204000u)
  /** Array initializer of GPIO peripheral base pointers */
  #define GPIO_BASE_PTRS                           { GPIO_BASE_PTR, SECGPIO_BASE_PTR }
  /** Array initializer of GPIO peripheral base pointers */
  #define GPIO_BASE_PTRS_NS                        { GPIO_BASE_PTR_NS, SECGPIO_BASE_PTR_NS }
#else
  /** Peripheral GPIO base pointer */
  #define GPIO_BASE_PTR                            ((GPIO_MemMapPtr)0x40100000u)
  /** Peripheral SECGPIO base pointer */
  #define SECGPIO_BASE_PTR                         ((GPIO_MemMapPtr)0x40204000u)
  /** Array initializer of GPIO peripheral base pointers */
  #define GPIO_BASE_PTRS                           { GPIO_BASE_PTR, SECGPIO_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* GPIO */
  #define GPIO_PORT0_B0                            GPIO_B_REG(GPIO_BASE_PTR,0,0)
  #define GPIO_PORT0_B0_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,0,0)
  #define GPIO_PORT0_B1                            GPIO_B_REG(GPIO_BASE_PTR,0,1)
  #define GPIO_PORT0_B1_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,0,1)
  #define GPIO_PORT0_B2                            GPIO_B_REG(GPIO_BASE_PTR,0,2)
  #define GPIO_PORT0_B2_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,0,2)
  #define GPIO_PORT0_B3                            GPIO_B_REG(GPIO_BASE_PTR,0,3)
  #define GPIO_PORT0_B3_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,0,3)
  #define GPIO_PORT0_B4                            GPIO_B_REG(GPIO_BASE_PTR,0,4)
  #define GPIO_PORT0_B4_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,0,4)
  #define GPIO_PORT0_B5                            GPIO_B_REG(GPIO_BASE_PTR,0,5)
  #define GPIO_PORT0_B5_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,0,5)
  #define GPIO_PORT0_B6                            GPIO_B_REG(GPIO_BASE_PTR,0,6)
  #define GPIO_PORT0_B6_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,0,6)
  #define GPIO_PORT0_B7                            GPIO_B_REG(GPIO_BASE_PTR,0,7)
  #define GPIO_PORT0_B7_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,0,7)
  #define GPIO_PORT0_B8                            GPIO_B_REG(GPIO_BASE_PTR,0,8)
  #define GPIO_PORT0_B8_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,0,8)
  #define GPIO_PORT0_B9                            GPIO_B_REG(GPIO_BASE_PTR,0,9)
  #define GPIO_PORT0_B9_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,0,9)
  #define GPIO_PORT0_B10                           GPIO_B_REG(GPIO_BASE_PTR,0,10)
  #define GPIO_PORT0_B10_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,10)
  #define GPIO_PORT0_B11                           GPIO_B_REG(GPIO_BASE_PTR,0,11)
  #define GPIO_PORT0_B11_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,11)
  #define GPIO_PORT0_B12                           GPIO_B_REG(GPIO_BASE_PTR,0,12)
  #define GPIO_PORT0_B12_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,12)
  #define GPIO_PORT0_B13                           GPIO_B_REG(GPIO_BASE_PTR,0,13)
  #define GPIO_PORT0_B13_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,13)
  #define GPIO_PORT0_B14                           GPIO_B_REG(GPIO_BASE_PTR,0,14)
  #define GPIO_PORT0_B14_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,14)
  #define GPIO_PORT0_B15                           GPIO_B_REG(GPIO_BASE_PTR,0,15)
  #define GPIO_PORT0_B15_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,15)
  #define GPIO_PORT0_B16                           GPIO_B_REG(GPIO_BASE_PTR,0,16)
  #define GPIO_PORT0_B16_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,16)
  #define GPIO_PORT0_B17                           GPIO_B_REG(GPIO_BASE_PTR,0,17)
  #define GPIO_PORT0_B17_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,17)
  #define GPIO_PORT0_B18                           GPIO_B_REG(GPIO_BASE_PTR,0,18)
  #define GPIO_PORT0_B18_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,18)
  #define GPIO_PORT0_B19                           GPIO_B_REG(GPIO_BASE_PTR,0,19)
  #define GPIO_PORT0_B19_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,19)
  #define GPIO_PORT0_B20                           GPIO_B_REG(GPIO_BASE_PTR,0,20)
  #define GPIO_PORT0_B20_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,20)
  #define GPIO_PORT0_B21                           GPIO_B_REG(GPIO_BASE_PTR,0,21)
  #define GPIO_PORT0_B21_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,21)
  #define GPIO_PORT0_B22                           GPIO_B_REG(GPIO_BASE_PTR,0,22)
  #define GPIO_PORT0_B22_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,22)
  #define GPIO_PORT0_B23                           GPIO_B_REG(GPIO_BASE_PTR,0,23)
  #define GPIO_PORT0_B23_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,23)
  #define GPIO_PORT0_B24                           GPIO_B_REG(GPIO_BASE_PTR,0,24)
  #define GPIO_PORT0_B24_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,24)
  #define GPIO_PORT0_B25                           GPIO_B_REG(GPIO_BASE_PTR,0,25)
  #define GPIO_PORT0_B25_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,25)
  #define GPIO_PORT0_B26                           GPIO_B_REG(GPIO_BASE_PTR,0,26)
  #define GPIO_PORT0_B26_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,26)
  #define GPIO_PORT0_B27                           GPIO_B_REG(GPIO_BASE_PTR,0,27)
  #define GPIO_PORT0_B27_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,27)
  #define GPIO_PORT0_B28                           GPIO_B_REG(GPIO_BASE_PTR,0,28)
  #define GPIO_PORT0_B28_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,28)
  #define GPIO_PORT0_B29                           GPIO_B_REG(GPIO_BASE_PTR,0,29)
  #define GPIO_PORT0_B29_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,29)
  #define GPIO_PORT0_B30                           GPIO_B_REG(GPIO_BASE_PTR,0,30)
  #define GPIO_PORT0_B30_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,30)
  #define GPIO_PORT0_B31                           GPIO_B_REG(GPIO_BASE_PTR,0,31)
  #define GPIO_PORT0_B31_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,0,31)
  #define GPIO_PORT1_B0                            GPIO_B_REG(GPIO_BASE_PTR,1,0)
  #define GPIO_PORT1_B0_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,1,0)
  #define GPIO_PORT1_B1                            GPIO_B_REG(GPIO_BASE_PTR,1,1)
  #define GPIO_PORT1_B1_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,1,1)
  #define GPIO_PORT1_B2                            GPIO_B_REG(GPIO_BASE_PTR,1,2)
  #define GPIO_PORT1_B2_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,1,2)
  #define GPIO_PORT1_B3                            GPIO_B_REG(GPIO_BASE_PTR,1,3)
  #define GPIO_PORT1_B3_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,1,3)
  #define GPIO_PORT1_B4                            GPIO_B_REG(GPIO_BASE_PTR,1,4)
  #define GPIO_PORT1_B4_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,1,4)
  #define GPIO_PORT1_B5                            GPIO_B_REG(GPIO_BASE_PTR,1,5)
  #define GPIO_PORT1_B5_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,1,5)
  #define GPIO_PORT1_B6                            GPIO_B_REG(GPIO_BASE_PTR,1,6)
  #define GPIO_PORT1_B6_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,1,6)
  #define GPIO_PORT1_B7                            GPIO_B_REG(GPIO_BASE_PTR,1,7)
  #define GPIO_PORT1_B7_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,1,7)
  #define GPIO_PORT1_B8                            GPIO_B_REG(GPIO_BASE_PTR,1,8)
  #define GPIO_PORT1_B8_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,1,8)
  #define GPIO_PORT1_B9                            GPIO_B_REG(GPIO_BASE_PTR,1,9)
  #define GPIO_PORT1_B9_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,1,9)
  #define GPIO_PORT1_B10                           GPIO_B_REG(GPIO_BASE_PTR,1,10)
  #define GPIO_PORT1_B10_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,10)
  #define GPIO_PORT1_B11                           GPIO_B_REG(GPIO_BASE_PTR,1,11)
  #define GPIO_PORT1_B11_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,11)
  #define GPIO_PORT1_B12                           GPIO_B_REG(GPIO_BASE_PTR,1,12)
  #define GPIO_PORT1_B12_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,12)
  #define GPIO_PORT1_B13                           GPIO_B_REG(GPIO_BASE_PTR,1,13)
  #define GPIO_PORT1_B13_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,13)
  #define GPIO_PORT1_B14                           GPIO_B_REG(GPIO_BASE_PTR,1,14)
  #define GPIO_PORT1_B14_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,14)
  #define GPIO_PORT1_B15                           GPIO_B_REG(GPIO_BASE_PTR,1,15)
  #define GPIO_PORT1_B15_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,15)
  #define GPIO_PORT1_B16                           GPIO_B_REG(GPIO_BASE_PTR,1,16)
  #define GPIO_PORT1_B16_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,16)
  #define GPIO_PORT1_B17                           GPIO_B_REG(GPIO_BASE_PTR,1,17)
  #define GPIO_PORT1_B17_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,17)
  #define GPIO_PORT1_B18                           GPIO_B_REG(GPIO_BASE_PTR,1,18)
  #define GPIO_PORT1_B18_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,18)
  #define GPIO_PORT1_B19                           GPIO_B_REG(GPIO_BASE_PTR,1,19)
  #define GPIO_PORT1_B19_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,19)
  #define GPIO_PORT1_B20                           GPIO_B_REG(GPIO_BASE_PTR,1,20)
  #define GPIO_PORT1_B20_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,20)
  #define GPIO_PORT1_B21                           GPIO_B_REG(GPIO_BASE_PTR,1,21)
  #define GPIO_PORT1_B21_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,21)
  #define GPIO_PORT1_B22                           GPIO_B_REG(GPIO_BASE_PTR,1,22)
  #define GPIO_PORT1_B22_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,22)
  #define GPIO_PORT1_B23                           GPIO_B_REG(GPIO_BASE_PTR,1,23)
  #define GPIO_PORT1_B23_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,23)
  #define GPIO_PORT1_B24                           GPIO_B_REG(GPIO_BASE_PTR,1,24)
  #define GPIO_PORT1_B24_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,24)
  #define GPIO_PORT1_B25                           GPIO_B_REG(GPIO_BASE_PTR,1,25)
  #define GPIO_PORT1_B25_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,25)
  #define GPIO_PORT1_B26                           GPIO_B_REG(GPIO_BASE_PTR,1,26)
  #define GPIO_PORT1_B26_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,26)
  #define GPIO_PORT1_B27                           GPIO_B_REG(GPIO_BASE_PTR,1,27)
  #define GPIO_PORT1_B27_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,27)
  #define GPIO_PORT1_B28                           GPIO_B_REG(GPIO_BASE_PTR,1,28)
  #define GPIO_PORT1_B28_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,28)
  #define GPIO_PORT1_B29                           GPIO_B_REG(GPIO_BASE_PTR,1,29)
  #define GPIO_PORT1_B29_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,29)
  #define GPIO_PORT1_B30                           GPIO_B_REG(GPIO_BASE_PTR,1,30)
  #define GPIO_PORT1_B30_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,30)
  #define GPIO_PORT1_B31                           GPIO_B_REG(GPIO_BASE_PTR,1,31)
  #define GPIO_PORT1_B31_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,1,31)
  #define GPIO_PORT2_B0                            GPIO_B_REG(GPIO_BASE_PTR,2,0)
  #define GPIO_PORT2_B0_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,2,0)
  #define GPIO_PORT2_B1                            GPIO_B_REG(GPIO_BASE_PTR,2,1)
  #define GPIO_PORT2_B1_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,2,1)
  #define GPIO_PORT2_B2                            GPIO_B_REG(GPIO_BASE_PTR,2,2)
  #define GPIO_PORT2_B2_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,2,2)
  #define GPIO_PORT2_B3                            GPIO_B_REG(GPIO_BASE_PTR,2,3)
  #define GPIO_PORT2_B3_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,2,3)
  #define GPIO_PORT2_B4                            GPIO_B_REG(GPIO_BASE_PTR,2,4)
  #define GPIO_PORT2_B4_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,2,4)
  #define GPIO_PORT2_B5                            GPIO_B_REG(GPIO_BASE_PTR,2,5)
  #define GPIO_PORT2_B5_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,2,5)
  #define GPIO_PORT2_B6                            GPIO_B_REG(GPIO_BASE_PTR,2,6)
  #define GPIO_PORT2_B6_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,2,6)
  #define GPIO_PORT2_B7                            GPIO_B_REG(GPIO_BASE_PTR,2,7)
  #define GPIO_PORT2_B7_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,2,7)
  #define GPIO_PORT2_B8                            GPIO_B_REG(GPIO_BASE_PTR,2,8)
  #define GPIO_PORT2_B8_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,2,8)
  #define GPIO_PORT2_B9                            GPIO_B_REG(GPIO_BASE_PTR,2,9)
  #define GPIO_PORT2_B9_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,2,9)
  #define GPIO_PORT2_B10                           GPIO_B_REG(GPIO_BASE_PTR,2,10)
  #define GPIO_PORT2_B10_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,10)
  #define GPIO_PORT2_B11                           GPIO_B_REG(GPIO_BASE_PTR,2,11)
  #define GPIO_PORT2_B11_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,11)
  #define GPIO_PORT2_B12                           GPIO_B_REG(GPIO_BASE_PTR,2,12)
  #define GPIO_PORT2_B12_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,12)
  #define GPIO_PORT2_B13                           GPIO_B_REG(GPIO_BASE_PTR,2,13)
  #define GPIO_PORT2_B13_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,13)
  #define GPIO_PORT2_B14                           GPIO_B_REG(GPIO_BASE_PTR,2,14)
  #define GPIO_PORT2_B14_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,14)
  #define GPIO_PORT2_B15                           GPIO_B_REG(GPIO_BASE_PTR,2,15)
  #define GPIO_PORT2_B15_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,15)
  #define GPIO_PORT2_B16                           GPIO_B_REG(GPIO_BASE_PTR,2,16)
  #define GPIO_PORT2_B16_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,16)
  #define GPIO_PORT2_B17                           GPIO_B_REG(GPIO_BASE_PTR,2,17)
  #define GPIO_PORT2_B17_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,17)
  #define GPIO_PORT2_B18                           GPIO_B_REG(GPIO_BASE_PTR,2,18)
  #define GPIO_PORT2_B18_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,18)
  #define GPIO_PORT2_B19                           GPIO_B_REG(GPIO_BASE_PTR,2,19)
  #define GPIO_PORT2_B19_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,19)
  #define GPIO_PORT2_B20                           GPIO_B_REG(GPIO_BASE_PTR,2,20)
  #define GPIO_PORT2_B20_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,20)
  #define GPIO_PORT2_B21                           GPIO_B_REG(GPIO_BASE_PTR,2,21)
  #define GPIO_PORT2_B21_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,21)
  #define GPIO_PORT2_B22                           GPIO_B_REG(GPIO_BASE_PTR,2,22)
  #define GPIO_PORT2_B22_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,22)
  #define GPIO_PORT2_B23                           GPIO_B_REG(GPIO_BASE_PTR,2,23)
  #define GPIO_PORT2_B23_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,23)
  #define GPIO_PORT2_B24                           GPIO_B_REG(GPIO_BASE_PTR,2,24)
  #define GPIO_PORT2_B24_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,24)
  #define GPIO_PORT2_B25                           GPIO_B_REG(GPIO_BASE_PTR,2,25)
  #define GPIO_PORT2_B25_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,25)
  #define GPIO_PORT2_B26                           GPIO_B_REG(GPIO_BASE_PTR,2,26)
  #define GPIO_PORT2_B26_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,26)
  #define GPIO_PORT2_B27                           GPIO_B_REG(GPIO_BASE_PTR,2,27)
  #define GPIO_PORT2_B27_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,27)
  #define GPIO_PORT2_B28                           GPIO_B_REG(GPIO_BASE_PTR,2,28)
  #define GPIO_PORT2_B28_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,28)
  #define GPIO_PORT2_B29                           GPIO_B_REG(GPIO_BASE_PTR,2,29)
  #define GPIO_PORT2_B29_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,29)
  #define GPIO_PORT2_B30                           GPIO_B_REG(GPIO_BASE_PTR,2,30)
  #define GPIO_PORT2_B30_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,30)
  #define GPIO_PORT2_B31                           GPIO_B_REG(GPIO_BASE_PTR,2,31)
  #define GPIO_PORT2_B31_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,2,31)
  #define GPIO_PORT3_B0                            GPIO_B_REG(GPIO_BASE_PTR,3,0)
  #define GPIO_PORT3_B0_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,3,0)
  #define GPIO_PORT3_B1                            GPIO_B_REG(GPIO_BASE_PTR,3,1)
  #define GPIO_PORT3_B1_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,3,1)
  #define GPIO_PORT3_B2                            GPIO_B_REG(GPIO_BASE_PTR,3,2)
  #define GPIO_PORT3_B2_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,3,2)
  #define GPIO_PORT3_B3                            GPIO_B_REG(GPIO_BASE_PTR,3,3)
  #define GPIO_PORT3_B3_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,3,3)
  #define GPIO_PORT3_B4                            GPIO_B_REG(GPIO_BASE_PTR,3,4)
  #define GPIO_PORT3_B4_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,3,4)
  #define GPIO_PORT3_B5                            GPIO_B_REG(GPIO_BASE_PTR,3,5)
  #define GPIO_PORT3_B5_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,3,5)
  #define GPIO_PORT3_B6                            GPIO_B_REG(GPIO_BASE_PTR,3,6)
  #define GPIO_PORT3_B6_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,3,6)
  #define GPIO_PORT3_B7                            GPIO_B_REG(GPIO_BASE_PTR,3,7)
  #define GPIO_PORT3_B7_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,3,7)
  #define GPIO_PORT3_B8                            GPIO_B_REG(GPIO_BASE_PTR,3,8)
  #define GPIO_PORT3_B8_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,3,8)
  #define GPIO_PORT3_B9                            GPIO_B_REG(GPIO_BASE_PTR,3,9)
  #define GPIO_PORT3_B9_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,3,9)
  #define GPIO_PORT3_B10                           GPIO_B_REG(GPIO_BASE_PTR,3,10)
  #define GPIO_PORT3_B10_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,10)
  #define GPIO_PORT3_B11                           GPIO_B_REG(GPIO_BASE_PTR,3,11)
  #define GPIO_PORT3_B11_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,11)
  #define GPIO_PORT3_B12                           GPIO_B_REG(GPIO_BASE_PTR,3,12)
  #define GPIO_PORT3_B12_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,12)
  #define GPIO_PORT3_B13                           GPIO_B_REG(GPIO_BASE_PTR,3,13)
  #define GPIO_PORT3_B13_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,13)
  #define GPIO_PORT3_B14                           GPIO_B_REG(GPIO_BASE_PTR,3,14)
  #define GPIO_PORT3_B14_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,14)
  #define GPIO_PORT3_B15                           GPIO_B_REG(GPIO_BASE_PTR,3,15)
  #define GPIO_PORT3_B15_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,15)
  #define GPIO_PORT3_B16                           GPIO_B_REG(GPIO_BASE_PTR,3,16)
  #define GPIO_PORT3_B16_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,16)
  #define GPIO_PORT3_B17                           GPIO_B_REG(GPIO_BASE_PTR,3,17)
  #define GPIO_PORT3_B17_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,17)
  #define GPIO_PORT3_B18                           GPIO_B_REG(GPIO_BASE_PTR,3,18)
  #define GPIO_PORT3_B18_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,18)
  #define GPIO_PORT3_B19                           GPIO_B_REG(GPIO_BASE_PTR,3,19)
  #define GPIO_PORT3_B19_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,19)
  #define GPIO_PORT3_B20                           GPIO_B_REG(GPIO_BASE_PTR,3,20)
  #define GPIO_PORT3_B20_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,20)
  #define GPIO_PORT3_B21                           GPIO_B_REG(GPIO_BASE_PTR,3,21)
  #define GPIO_PORT3_B21_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,21)
  #define GPIO_PORT3_B22                           GPIO_B_REG(GPIO_BASE_PTR,3,22)
  #define GPIO_PORT3_B22_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,22)
  #define GPIO_PORT3_B23                           GPIO_B_REG(GPIO_BASE_PTR,3,23)
  #define GPIO_PORT3_B23_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,23)
  #define GPIO_PORT3_B24                           GPIO_B_REG(GPIO_BASE_PTR,3,24)
  #define GPIO_PORT3_B24_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,24)
  #define GPIO_PORT3_B25                           GPIO_B_REG(GPIO_BASE_PTR,3,25)
  #define GPIO_PORT3_B25_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,25)
  #define GPIO_PORT3_B26                           GPIO_B_REG(GPIO_BASE_PTR,3,26)
  #define GPIO_PORT3_B26_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,26)
  #define GPIO_PORT3_B27                           GPIO_B_REG(GPIO_BASE_PTR,3,27)
  #define GPIO_PORT3_B27_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,27)
  #define GPIO_PORT3_B28                           GPIO_B_REG(GPIO_BASE_PTR,3,28)
  #define GPIO_PORT3_B28_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,28)
  #define GPIO_PORT3_B29                           GPIO_B_REG(GPIO_BASE_PTR,3,29)
  #define GPIO_PORT3_B29_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,29)
  #define GPIO_PORT3_B30                           GPIO_B_REG(GPIO_BASE_PTR,3,30)
  #define GPIO_PORT3_B30_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,30)
  #define GPIO_PORT3_B31                           GPIO_B_REG(GPIO_BASE_PTR,3,31)
  #define GPIO_PORT3_B31_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,3,31)
  #define GPIO_PORT4_B0                            GPIO_B_REG(GPIO_BASE_PTR,4,0)
  #define GPIO_PORT4_B0_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,4,0)
  #define GPIO_PORT4_B1                            GPIO_B_REG(GPIO_BASE_PTR,4,1)
  #define GPIO_PORT4_B1_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,4,1)
  #define GPIO_PORT4_B2                            GPIO_B_REG(GPIO_BASE_PTR,4,2)
  #define GPIO_PORT4_B2_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,4,2)
  #define GPIO_PORT4_B3                            GPIO_B_REG(GPIO_BASE_PTR,4,3)
  #define GPIO_PORT4_B3_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,4,3)
  #define GPIO_PORT4_B4                            GPIO_B_REG(GPIO_BASE_PTR,4,4)
  #define GPIO_PORT4_B4_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,4,4)
  #define GPIO_PORT4_B5                            GPIO_B_REG(GPIO_BASE_PTR,4,5)
  #define GPIO_PORT4_B5_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,4,5)
  #define GPIO_PORT4_B6                            GPIO_B_REG(GPIO_BASE_PTR,4,6)
  #define GPIO_PORT4_B6_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,4,6)
  #define GPIO_PORT4_B7                            GPIO_B_REG(GPIO_BASE_PTR,4,7)
  #define GPIO_PORT4_B7_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,4,7)
  #define GPIO_PORT4_B8                            GPIO_B_REG(GPIO_BASE_PTR,4,8)
  #define GPIO_PORT4_B8_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,4,8)
  #define GPIO_PORT4_B9                            GPIO_B_REG(GPIO_BASE_PTR,4,9)
  #define GPIO_PORT4_B9_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,4,9)
  #define GPIO_PORT4_B10                           GPIO_B_REG(GPIO_BASE_PTR,4,10)
  #define GPIO_PORT4_B10_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,10)
  #define GPIO_PORT4_B11                           GPIO_B_REG(GPIO_BASE_PTR,4,11)
  #define GPIO_PORT4_B11_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,11)
  #define GPIO_PORT4_B12                           GPIO_B_REG(GPIO_BASE_PTR,4,12)
  #define GPIO_PORT4_B12_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,12)
  #define GPIO_PORT4_B13                           GPIO_B_REG(GPIO_BASE_PTR,4,13)
  #define GPIO_PORT4_B13_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,13)
  #define GPIO_PORT4_B14                           GPIO_B_REG(GPIO_BASE_PTR,4,14)
  #define GPIO_PORT4_B14_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,14)
  #define GPIO_PORT4_B15                           GPIO_B_REG(GPIO_BASE_PTR,4,15)
  #define GPIO_PORT4_B15_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,15)
  #define GPIO_PORT4_B16                           GPIO_B_REG(GPIO_BASE_PTR,4,16)
  #define GPIO_PORT4_B16_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,16)
  #define GPIO_PORT4_B17                           GPIO_B_REG(GPIO_BASE_PTR,4,17)
  #define GPIO_PORT4_B17_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,17)
  #define GPIO_PORT4_B18                           GPIO_B_REG(GPIO_BASE_PTR,4,18)
  #define GPIO_PORT4_B18_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,18)
  #define GPIO_PORT4_B19                           GPIO_B_REG(GPIO_BASE_PTR,4,19)
  #define GPIO_PORT4_B19_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,19)
  #define GPIO_PORT4_B20                           GPIO_B_REG(GPIO_BASE_PTR,4,20)
  #define GPIO_PORT4_B20_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,20)
  #define GPIO_PORT4_B21                           GPIO_B_REG(GPIO_BASE_PTR,4,21)
  #define GPIO_PORT4_B21_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,21)
  #define GPIO_PORT4_B22                           GPIO_B_REG(GPIO_BASE_PTR,4,22)
  #define GPIO_PORT4_B22_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,22)
  #define GPIO_PORT4_B23                           GPIO_B_REG(GPIO_BASE_PTR,4,23)
  #define GPIO_PORT4_B23_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,23)
  #define GPIO_PORT4_B24                           GPIO_B_REG(GPIO_BASE_PTR,4,24)
  #define GPIO_PORT4_B24_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,24)
  #define GPIO_PORT4_B25                           GPIO_B_REG(GPIO_BASE_PTR,4,25)
  #define GPIO_PORT4_B25_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,25)
  #define GPIO_PORT4_B26                           GPIO_B_REG(GPIO_BASE_PTR,4,26)
  #define GPIO_PORT4_B26_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,26)
  #define GPIO_PORT4_B27                           GPIO_B_REG(GPIO_BASE_PTR,4,27)
  #define GPIO_PORT4_B27_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,27)
  #define GPIO_PORT4_B28                           GPIO_B_REG(GPIO_BASE_PTR,4,28)
  #define GPIO_PORT4_B28_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,28)
  #define GPIO_PORT4_B29                           GPIO_B_REG(GPIO_BASE_PTR,4,29)
  #define GPIO_PORT4_B29_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,29)
  #define GPIO_PORT4_B30                           GPIO_B_REG(GPIO_BASE_PTR,4,30)
  #define GPIO_PORT4_B30_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,30)
  #define GPIO_PORT4_B31                           GPIO_B_REG(GPIO_BASE_PTR,4,31)
  #define GPIO_PORT4_B31_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,4,31)
  #define GPIO_PORT5_B0                            GPIO_B_REG(GPIO_BASE_PTR,5,0)
  #define GPIO_PORT5_B0_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,5,0)
  #define GPIO_PORT5_B1                            GPIO_B_REG(GPIO_BASE_PTR,5,1)
  #define GPIO_PORT5_B1_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,5,1)
  #define GPIO_PORT5_B2                            GPIO_B_REG(GPIO_BASE_PTR,5,2)
  #define GPIO_PORT5_B2_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,5,2)
  #define GPIO_PORT5_B3                            GPIO_B_REG(GPIO_BASE_PTR,5,3)
  #define GPIO_PORT5_B3_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,5,3)
  #define GPIO_PORT5_B4                            GPIO_B_REG(GPIO_BASE_PTR,5,4)
  #define GPIO_PORT5_B4_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,5,4)
  #define GPIO_PORT5_B5                            GPIO_B_REG(GPIO_BASE_PTR,5,5)
  #define GPIO_PORT5_B5_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,5,5)
  #define GPIO_PORT5_B6                            GPIO_B_REG(GPIO_BASE_PTR,5,6)
  #define GPIO_PORT5_B6_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,5,6)
  #define GPIO_PORT5_B7                            GPIO_B_REG(GPIO_BASE_PTR,5,7)
  #define GPIO_PORT5_B7_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,5,7)
  #define GPIO_PORT5_B8                            GPIO_B_REG(GPIO_BASE_PTR,5,8)
  #define GPIO_PORT5_B8_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,5,8)
  #define GPIO_PORT5_B9                            GPIO_B_REG(GPIO_BASE_PTR,5,9)
  #define GPIO_PORT5_B9_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,5,9)
  #define GPIO_PORT5_B10                           GPIO_B_REG(GPIO_BASE_PTR,5,10)
  #define GPIO_PORT5_B10_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,10)
  #define GPIO_PORT5_B11                           GPIO_B_REG(GPIO_BASE_PTR,5,11)
  #define GPIO_PORT5_B11_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,11)
  #define GPIO_PORT5_B12                           GPIO_B_REG(GPIO_BASE_PTR,5,12)
  #define GPIO_PORT5_B12_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,12)
  #define GPIO_PORT5_B13                           GPIO_B_REG(GPIO_BASE_PTR,5,13)
  #define GPIO_PORT5_B13_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,13)
  #define GPIO_PORT5_B14                           GPIO_B_REG(GPIO_BASE_PTR,5,14)
  #define GPIO_PORT5_B14_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,14)
  #define GPIO_PORT5_B15                           GPIO_B_REG(GPIO_BASE_PTR,5,15)
  #define GPIO_PORT5_B15_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,15)
  #define GPIO_PORT5_B16                           GPIO_B_REG(GPIO_BASE_PTR,5,16)
  #define GPIO_PORT5_B16_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,16)
  #define GPIO_PORT5_B17                           GPIO_B_REG(GPIO_BASE_PTR,5,17)
  #define GPIO_PORT5_B17_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,17)
  #define GPIO_PORT5_B18                           GPIO_B_REG(GPIO_BASE_PTR,5,18)
  #define GPIO_PORT5_B18_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,18)
  #define GPIO_PORT5_B19                           GPIO_B_REG(GPIO_BASE_PTR,5,19)
  #define GPIO_PORT5_B19_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,19)
  #define GPIO_PORT5_B20                           GPIO_B_REG(GPIO_BASE_PTR,5,20)
  #define GPIO_PORT5_B20_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,20)
  #define GPIO_PORT5_B21                           GPIO_B_REG(GPIO_BASE_PTR,5,21)
  #define GPIO_PORT5_B21_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,21)
  #define GPIO_PORT5_B22                           GPIO_B_REG(GPIO_BASE_PTR,5,22)
  #define GPIO_PORT5_B22_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,22)
  #define GPIO_PORT5_B23                           GPIO_B_REG(GPIO_BASE_PTR,5,23)
  #define GPIO_PORT5_B23_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,23)
  #define GPIO_PORT5_B24                           GPIO_B_REG(GPIO_BASE_PTR,5,24)
  #define GPIO_PORT5_B24_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,24)
  #define GPIO_PORT5_B25                           GPIO_B_REG(GPIO_BASE_PTR,5,25)
  #define GPIO_PORT5_B25_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,25)
  #define GPIO_PORT5_B26                           GPIO_B_REG(GPIO_BASE_PTR,5,26)
  #define GPIO_PORT5_B26_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,26)
  #define GPIO_PORT5_B27                           GPIO_B_REG(GPIO_BASE_PTR,5,27)
  #define GPIO_PORT5_B27_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,27)
  #define GPIO_PORT5_B28                           GPIO_B_REG(GPIO_BASE_PTR,5,28)
  #define GPIO_PORT5_B28_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,28)
  #define GPIO_PORT5_B29                           GPIO_B_REG(GPIO_BASE_PTR,5,29)
  #define GPIO_PORT5_B29_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,29)
  #define GPIO_PORT5_B30                           GPIO_B_REG(GPIO_BASE_PTR,5,30)
  #define GPIO_PORT5_B30_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,30)
  #define GPIO_PORT5_B31                           GPIO_B_REG(GPIO_BASE_PTR,5,31)
  #define GPIO_PORT5_B31_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,5,31)
  #define GPIO_PORT6_B0                            GPIO_B_REG(GPIO_BASE_PTR,6,0)
  #define GPIO_PORT6_B0_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,6,0)
  #define GPIO_PORT6_B1                            GPIO_B_REG(GPIO_BASE_PTR,6,1)
  #define GPIO_PORT6_B1_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,6,1)
  #define GPIO_PORT6_B2                            GPIO_B_REG(GPIO_BASE_PTR,6,2)
  #define GPIO_PORT6_B2_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,6,2)
  #define GPIO_PORT6_B3                            GPIO_B_REG(GPIO_BASE_PTR,6,3)
  #define GPIO_PORT6_B3_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,6,3)
  #define GPIO_PORT6_B4                            GPIO_B_REG(GPIO_BASE_PTR,6,4)
  #define GPIO_PORT6_B4_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,6,4)
  #define GPIO_PORT6_B5                            GPIO_B_REG(GPIO_BASE_PTR,6,5)
  #define GPIO_PORT6_B5_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,6,5)
  #define GPIO_PORT6_B6                            GPIO_B_REG(GPIO_BASE_PTR,6,6)
  #define GPIO_PORT6_B6_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,6,6)
  #define GPIO_PORT6_B7                            GPIO_B_REG(GPIO_BASE_PTR,6,7)
  #define GPIO_PORT6_B7_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,6,7)
  #define GPIO_PORT6_B8                            GPIO_B_REG(GPIO_BASE_PTR,6,8)
  #define GPIO_PORT6_B8_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,6,8)
  #define GPIO_PORT6_B9                            GPIO_B_REG(GPIO_BASE_PTR,6,9)
  #define GPIO_PORT6_B9_NS                         GPIO_B_REG(GPIO_BASE_PTR_NS,6,9)
  #define GPIO_PORT6_B10                           GPIO_B_REG(GPIO_BASE_PTR,6,10)
  #define GPIO_PORT6_B10_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,10)
  #define GPIO_PORT6_B11                           GPIO_B_REG(GPIO_BASE_PTR,6,11)
  #define GPIO_PORT6_B11_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,11)
  #define GPIO_PORT6_B12                           GPIO_B_REG(GPIO_BASE_PTR,6,12)
  #define GPIO_PORT6_B12_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,12)
  #define GPIO_PORT6_B13                           GPIO_B_REG(GPIO_BASE_PTR,6,13)
  #define GPIO_PORT6_B13_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,13)
  #define GPIO_PORT6_B14                           GPIO_B_REG(GPIO_BASE_PTR,6,14)
  #define GPIO_PORT6_B14_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,14)
  #define GPIO_PORT6_B15                           GPIO_B_REG(GPIO_BASE_PTR,6,15)
  #define GPIO_PORT6_B15_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,15)
  #define GPIO_PORT6_B16                           GPIO_B_REG(GPIO_BASE_PTR,6,16)
  #define GPIO_PORT6_B16_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,16)
  #define GPIO_PORT6_B17                           GPIO_B_REG(GPIO_BASE_PTR,6,17)
  #define GPIO_PORT6_B17_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,17)
  #define GPIO_PORT6_B18                           GPIO_B_REG(GPIO_BASE_PTR,6,18)
  #define GPIO_PORT6_B18_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,18)
  #define GPIO_PORT6_B19                           GPIO_B_REG(GPIO_BASE_PTR,6,19)
  #define GPIO_PORT6_B19_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,19)
  #define GPIO_PORT6_B20                           GPIO_B_REG(GPIO_BASE_PTR,6,20)
  #define GPIO_PORT6_B20_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,20)
  #define GPIO_PORT6_B21                           GPIO_B_REG(GPIO_BASE_PTR,6,21)
  #define GPIO_PORT6_B21_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,21)
  #define GPIO_PORT6_B22                           GPIO_B_REG(GPIO_BASE_PTR,6,22)
  #define GPIO_PORT6_B22_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,22)
  #define GPIO_PORT6_B23                           GPIO_B_REG(GPIO_BASE_PTR,6,23)
  #define GPIO_PORT6_B23_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,23)
  #define GPIO_PORT6_B24                           GPIO_B_REG(GPIO_BASE_PTR,6,24)
  #define GPIO_PORT6_B24_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,24)
  #define GPIO_PORT6_B25                           GPIO_B_REG(GPIO_BASE_PTR,6,25)
  #define GPIO_PORT6_B25_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,25)
  #define GPIO_PORT6_B26                           GPIO_B_REG(GPIO_BASE_PTR,6,26)
  #define GPIO_PORT6_B26_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,26)
  #define GPIO_PORT6_B27                           GPIO_B_REG(GPIO_BASE_PTR,6,27)
  #define GPIO_PORT6_B27_NS                        GPIO_B_REG(GPIO_BASE_PTR_NS,6,27)
  #define GPIO_PORT0_W0                            GPIO_W_REG(GPIO_BASE_PTR,0,0)
  #define GPIO_PORT0_W0_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,0,0)
  #define GPIO_PORT0_W1                            GPIO_W_REG(GPIO_BASE_PTR,0,1)
  #define GPIO_PORT0_W1_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,0,1)
  #define GPIO_PORT0_W2                            GPIO_W_REG(GPIO_BASE_PTR,0,2)
  #define GPIO_PORT0_W2_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,0,2)
  #define GPIO_PORT0_W3                            GPIO_W_REG(GPIO_BASE_PTR,0,3)
  #define GPIO_PORT0_W3_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,0,3)
  #define GPIO_PORT0_W4                            GPIO_W_REG(GPIO_BASE_PTR,0,4)
  #define GPIO_PORT0_W4_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,0,4)
  #define GPIO_PORT0_W5                            GPIO_W_REG(GPIO_BASE_PTR,0,5)
  #define GPIO_PORT0_W5_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,0,5)
  #define GPIO_PORT0_W6                            GPIO_W_REG(GPIO_BASE_PTR,0,6)
  #define GPIO_PORT0_W6_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,0,6)
  #define GPIO_PORT0_W7                            GPIO_W_REG(GPIO_BASE_PTR,0,7)
  #define GPIO_PORT0_W7_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,0,7)
  #define GPIO_PORT0_W8                            GPIO_W_REG(GPIO_BASE_PTR,0,8)
  #define GPIO_PORT0_W8_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,0,8)
  #define GPIO_PORT0_W9                            GPIO_W_REG(GPIO_BASE_PTR,0,9)
  #define GPIO_PORT0_W9_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,0,9)
  #define GPIO_PORT0_W10                           GPIO_W_REG(GPIO_BASE_PTR,0,10)
  #define GPIO_PORT0_W10_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,10)
  #define GPIO_PORT0_W11                           GPIO_W_REG(GPIO_BASE_PTR,0,11)
  #define GPIO_PORT0_W11_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,11)
  #define GPIO_PORT0_W12                           GPIO_W_REG(GPIO_BASE_PTR,0,12)
  #define GPIO_PORT0_W12_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,12)
  #define GPIO_PORT0_W13                           GPIO_W_REG(GPIO_BASE_PTR,0,13)
  #define GPIO_PORT0_W13_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,13)
  #define GPIO_PORT0_W14                           GPIO_W_REG(GPIO_BASE_PTR,0,14)
  #define GPIO_PORT0_W14_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,14)
  #define GPIO_PORT0_W15                           GPIO_W_REG(GPIO_BASE_PTR,0,15)
  #define GPIO_PORT0_W15_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,15)
  #define GPIO_PORT0_W16                           GPIO_W_REG(GPIO_BASE_PTR,0,16)
  #define GPIO_PORT0_W16_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,16)
  #define GPIO_PORT0_W17                           GPIO_W_REG(GPIO_BASE_PTR,0,17)
  #define GPIO_PORT0_W17_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,17)
  #define GPIO_PORT0_W18                           GPIO_W_REG(GPIO_BASE_PTR,0,18)
  #define GPIO_PORT0_W18_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,18)
  #define GPIO_PORT0_W19                           GPIO_W_REG(GPIO_BASE_PTR,0,19)
  #define GPIO_PORT0_W19_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,19)
  #define GPIO_PORT0_W20                           GPIO_W_REG(GPIO_BASE_PTR,0,20)
  #define GPIO_PORT0_W20_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,20)
  #define GPIO_PORT0_W21                           GPIO_W_REG(GPIO_BASE_PTR,0,21)
  #define GPIO_PORT0_W21_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,21)
  #define GPIO_PORT0_W22                           GPIO_W_REG(GPIO_BASE_PTR,0,22)
  #define GPIO_PORT0_W22_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,22)
  #define GPIO_PORT0_W23                           GPIO_W_REG(GPIO_BASE_PTR,0,23)
  #define GPIO_PORT0_W23_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,23)
  #define GPIO_PORT0_W24                           GPIO_W_REG(GPIO_BASE_PTR,0,24)
  #define GPIO_PORT0_W24_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,24)
  #define GPIO_PORT0_W25                           GPIO_W_REG(GPIO_BASE_PTR,0,25)
  #define GPIO_PORT0_W25_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,25)
  #define GPIO_PORT0_W26                           GPIO_W_REG(GPIO_BASE_PTR,0,26)
  #define GPIO_PORT0_W26_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,26)
  #define GPIO_PORT0_W27                           GPIO_W_REG(GPIO_BASE_PTR,0,27)
  #define GPIO_PORT0_W27_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,27)
  #define GPIO_PORT0_W28                           GPIO_W_REG(GPIO_BASE_PTR,0,28)
  #define GPIO_PORT0_W28_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,28)
  #define GPIO_PORT0_W29                           GPIO_W_REG(GPIO_BASE_PTR,0,29)
  #define GPIO_PORT0_W29_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,29)
  #define GPIO_PORT0_W30                           GPIO_W_REG(GPIO_BASE_PTR,0,30)
  #define GPIO_PORT0_W30_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,30)
  #define GPIO_PORT0_W31                           GPIO_W_REG(GPIO_BASE_PTR,0,31)
  #define GPIO_PORT0_W31_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,0,31)
  #define GPIO_PORT1_W0                            GPIO_W_REG(GPIO_BASE_PTR,1,0)
  #define GPIO_PORT1_W0_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,1,0)
  #define GPIO_PORT1_W1                            GPIO_W_REG(GPIO_BASE_PTR,1,1)
  #define GPIO_PORT1_W1_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,1,1)
  #define GPIO_PORT1_W2                            GPIO_W_REG(GPIO_BASE_PTR,1,2)
  #define GPIO_PORT1_W2_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,1,2)
  #define GPIO_PORT1_W3                            GPIO_W_REG(GPIO_BASE_PTR,1,3)
  #define GPIO_PORT1_W3_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,1,3)
  #define GPIO_PORT1_W4                            GPIO_W_REG(GPIO_BASE_PTR,1,4)
  #define GPIO_PORT1_W4_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,1,4)
  #define GPIO_PORT1_W5                            GPIO_W_REG(GPIO_BASE_PTR,1,5)
  #define GPIO_PORT1_W5_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,1,5)
  #define GPIO_PORT1_W6                            GPIO_W_REG(GPIO_BASE_PTR,1,6)
  #define GPIO_PORT1_W6_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,1,6)
  #define GPIO_PORT1_W7                            GPIO_W_REG(GPIO_BASE_PTR,1,7)
  #define GPIO_PORT1_W7_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,1,7)
  #define GPIO_PORT1_W8                            GPIO_W_REG(GPIO_BASE_PTR,1,8)
  #define GPIO_PORT1_W8_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,1,8)
  #define GPIO_PORT1_W9                            GPIO_W_REG(GPIO_BASE_PTR,1,9)
  #define GPIO_PORT1_W9_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,1,9)
  #define GPIO_PORT1_W10                           GPIO_W_REG(GPIO_BASE_PTR,1,10)
  #define GPIO_PORT1_W10_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,10)
  #define GPIO_PORT1_W11                           GPIO_W_REG(GPIO_BASE_PTR,1,11)
  #define GPIO_PORT1_W11_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,11)
  #define GPIO_PORT1_W12                           GPIO_W_REG(GPIO_BASE_PTR,1,12)
  #define GPIO_PORT1_W12_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,12)
  #define GPIO_PORT1_W13                           GPIO_W_REG(GPIO_BASE_PTR,1,13)
  #define GPIO_PORT1_W13_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,13)
  #define GPIO_PORT1_W14                           GPIO_W_REG(GPIO_BASE_PTR,1,14)
  #define GPIO_PORT1_W14_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,14)
  #define GPIO_PORT1_W15                           GPIO_W_REG(GPIO_BASE_PTR,1,15)
  #define GPIO_PORT1_W15_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,15)
  #define GPIO_PORT1_W16                           GPIO_W_REG(GPIO_BASE_PTR,1,16)
  #define GPIO_PORT1_W16_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,16)
  #define GPIO_PORT1_W17                           GPIO_W_REG(GPIO_BASE_PTR,1,17)
  #define GPIO_PORT1_W17_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,17)
  #define GPIO_PORT1_W18                           GPIO_W_REG(GPIO_BASE_PTR,1,18)
  #define GPIO_PORT1_W18_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,18)
  #define GPIO_PORT1_W19                           GPIO_W_REG(GPIO_BASE_PTR,1,19)
  #define GPIO_PORT1_W19_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,19)
  #define GPIO_PORT1_W20                           GPIO_W_REG(GPIO_BASE_PTR,1,20)
  #define GPIO_PORT1_W20_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,20)
  #define GPIO_PORT1_W21                           GPIO_W_REG(GPIO_BASE_PTR,1,21)
  #define GPIO_PORT1_W21_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,21)
  #define GPIO_PORT1_W22                           GPIO_W_REG(GPIO_BASE_PTR,1,22)
  #define GPIO_PORT1_W22_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,22)
  #define GPIO_PORT1_W23                           GPIO_W_REG(GPIO_BASE_PTR,1,23)
  #define GPIO_PORT1_W23_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,23)
  #define GPIO_PORT1_W24                           GPIO_W_REG(GPIO_BASE_PTR,1,24)
  #define GPIO_PORT1_W24_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,24)
  #define GPIO_PORT1_W25                           GPIO_W_REG(GPIO_BASE_PTR,1,25)
  #define GPIO_PORT1_W25_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,25)
  #define GPIO_PORT1_W26                           GPIO_W_REG(GPIO_BASE_PTR,1,26)
  #define GPIO_PORT1_W26_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,26)
  #define GPIO_PORT1_W27                           GPIO_W_REG(GPIO_BASE_PTR,1,27)
  #define GPIO_PORT1_W27_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,27)
  #define GPIO_PORT1_W28                           GPIO_W_REG(GPIO_BASE_PTR,1,28)
  #define GPIO_PORT1_W28_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,28)
  #define GPIO_PORT1_W29                           GPIO_W_REG(GPIO_BASE_PTR,1,29)
  #define GPIO_PORT1_W29_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,29)
  #define GPIO_PORT1_W30                           GPIO_W_REG(GPIO_BASE_PTR,1,30)
  #define GPIO_PORT1_W30_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,30)
  #define GPIO_PORT1_W31                           GPIO_W_REG(GPIO_BASE_PTR,1,31)
  #define GPIO_PORT1_W31_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,1,31)
  #define GPIO_PORT2_W0                            GPIO_W_REG(GPIO_BASE_PTR,2,0)
  #define GPIO_PORT2_W0_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,2,0)
  #define GPIO_PORT2_W1                            GPIO_W_REG(GPIO_BASE_PTR,2,1)
  #define GPIO_PORT2_W1_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,2,1)
  #define GPIO_PORT2_W2                            GPIO_W_REG(GPIO_BASE_PTR,2,2)
  #define GPIO_PORT2_W2_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,2,2)
  #define GPIO_PORT2_W3                            GPIO_W_REG(GPIO_BASE_PTR,2,3)
  #define GPIO_PORT2_W3_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,2,3)
  #define GPIO_PORT2_W4                            GPIO_W_REG(GPIO_BASE_PTR,2,4)
  #define GPIO_PORT2_W4_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,2,4)
  #define GPIO_PORT2_W5                            GPIO_W_REG(GPIO_BASE_PTR,2,5)
  #define GPIO_PORT2_W5_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,2,5)
  #define GPIO_PORT2_W6                            GPIO_W_REG(GPIO_BASE_PTR,2,6)
  #define GPIO_PORT2_W6_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,2,6)
  #define GPIO_PORT2_W7                            GPIO_W_REG(GPIO_BASE_PTR,2,7)
  #define GPIO_PORT2_W7_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,2,7)
  #define GPIO_PORT2_W8                            GPIO_W_REG(GPIO_BASE_PTR,2,8)
  #define GPIO_PORT2_W8_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,2,8)
  #define GPIO_PORT2_W9                            GPIO_W_REG(GPIO_BASE_PTR,2,9)
  #define GPIO_PORT2_W9_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,2,9)
  #define GPIO_PORT2_W10                           GPIO_W_REG(GPIO_BASE_PTR,2,10)
  #define GPIO_PORT2_W10_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,10)
  #define GPIO_PORT2_W11                           GPIO_W_REG(GPIO_BASE_PTR,2,11)
  #define GPIO_PORT2_W11_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,11)
  #define GPIO_PORT2_W12                           GPIO_W_REG(GPIO_BASE_PTR,2,12)
  #define GPIO_PORT2_W12_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,12)
  #define GPIO_PORT2_W13                           GPIO_W_REG(GPIO_BASE_PTR,2,13)
  #define GPIO_PORT2_W13_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,13)
  #define GPIO_PORT2_W14                           GPIO_W_REG(GPIO_BASE_PTR,2,14)
  #define GPIO_PORT2_W14_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,14)
  #define GPIO_PORT2_W15                           GPIO_W_REG(GPIO_BASE_PTR,2,15)
  #define GPIO_PORT2_W15_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,15)
  #define GPIO_PORT2_W16                           GPIO_W_REG(GPIO_BASE_PTR,2,16)
  #define GPIO_PORT2_W16_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,16)
  #define GPIO_PORT2_W17                           GPIO_W_REG(GPIO_BASE_PTR,2,17)
  #define GPIO_PORT2_W17_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,17)
  #define GPIO_PORT2_W18                           GPIO_W_REG(GPIO_BASE_PTR,2,18)
  #define GPIO_PORT2_W18_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,18)
  #define GPIO_PORT2_W19                           GPIO_W_REG(GPIO_BASE_PTR,2,19)
  #define GPIO_PORT2_W19_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,19)
  #define GPIO_PORT2_W20                           GPIO_W_REG(GPIO_BASE_PTR,2,20)
  #define GPIO_PORT2_W20_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,20)
  #define GPIO_PORT2_W21                           GPIO_W_REG(GPIO_BASE_PTR,2,21)
  #define GPIO_PORT2_W21_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,21)
  #define GPIO_PORT2_W22                           GPIO_W_REG(GPIO_BASE_PTR,2,22)
  #define GPIO_PORT2_W22_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,22)
  #define GPIO_PORT2_W23                           GPIO_W_REG(GPIO_BASE_PTR,2,23)
  #define GPIO_PORT2_W23_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,23)
  #define GPIO_PORT2_W24                           GPIO_W_REG(GPIO_BASE_PTR,2,24)
  #define GPIO_PORT2_W24_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,24)
  #define GPIO_PORT2_W25                           GPIO_W_REG(GPIO_BASE_PTR,2,25)
  #define GPIO_PORT2_W25_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,25)
  #define GPIO_PORT2_W26                           GPIO_W_REG(GPIO_BASE_PTR,2,26)
  #define GPIO_PORT2_W26_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,26)
  #define GPIO_PORT2_W27                           GPIO_W_REG(GPIO_BASE_PTR,2,27)
  #define GPIO_PORT2_W27_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,27)
  #define GPIO_PORT2_W28                           GPIO_W_REG(GPIO_BASE_PTR,2,28)
  #define GPIO_PORT2_W28_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,28)
  #define GPIO_PORT2_W29                           GPIO_W_REG(GPIO_BASE_PTR,2,29)
  #define GPIO_PORT2_W29_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,29)
  #define GPIO_PORT2_W30                           GPIO_W_REG(GPIO_BASE_PTR,2,30)
  #define GPIO_PORT2_W30_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,30)
  #define GPIO_PORT2_W31                           GPIO_W_REG(GPIO_BASE_PTR,2,31)
  #define GPIO_PORT2_W31_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,2,31)
  #define GPIO_PORT3_W0                            GPIO_W_REG(GPIO_BASE_PTR,3,0)
  #define GPIO_PORT3_W0_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,3,0)
  #define GPIO_PORT3_W1                            GPIO_W_REG(GPIO_BASE_PTR,3,1)
  #define GPIO_PORT3_W1_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,3,1)
  #define GPIO_PORT3_W2                            GPIO_W_REG(GPIO_BASE_PTR,3,2)
  #define GPIO_PORT3_W2_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,3,2)
  #define GPIO_PORT3_W3                            GPIO_W_REG(GPIO_BASE_PTR,3,3)
  #define GPIO_PORT3_W3_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,3,3)
  #define GPIO_PORT3_W4                            GPIO_W_REG(GPIO_BASE_PTR,3,4)
  #define GPIO_PORT3_W4_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,3,4)
  #define GPIO_PORT3_W5                            GPIO_W_REG(GPIO_BASE_PTR,3,5)
  #define GPIO_PORT3_W5_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,3,5)
  #define GPIO_PORT3_W6                            GPIO_W_REG(GPIO_BASE_PTR,3,6)
  #define GPIO_PORT3_W6_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,3,6)
  #define GPIO_PORT3_W7                            GPIO_W_REG(GPIO_BASE_PTR,3,7)
  #define GPIO_PORT3_W7_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,3,7)
  #define GPIO_PORT3_W8                            GPIO_W_REG(GPIO_BASE_PTR,3,8)
  #define GPIO_PORT3_W8_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,3,8)
  #define GPIO_PORT3_W9                            GPIO_W_REG(GPIO_BASE_PTR,3,9)
  #define GPIO_PORT3_W9_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,3,9)
  #define GPIO_PORT3_W10                           GPIO_W_REG(GPIO_BASE_PTR,3,10)
  #define GPIO_PORT3_W10_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,10)
  #define GPIO_PORT3_W11                           GPIO_W_REG(GPIO_BASE_PTR,3,11)
  #define GPIO_PORT3_W11_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,11)
  #define GPIO_PORT3_W12                           GPIO_W_REG(GPIO_BASE_PTR,3,12)
  #define GPIO_PORT3_W12_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,12)
  #define GPIO_PORT3_W13                           GPIO_W_REG(GPIO_BASE_PTR,3,13)
  #define GPIO_PORT3_W13_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,13)
  #define GPIO_PORT3_W14                           GPIO_W_REG(GPIO_BASE_PTR,3,14)
  #define GPIO_PORT3_W14_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,14)
  #define GPIO_PORT3_W15                           GPIO_W_REG(GPIO_BASE_PTR,3,15)
  #define GPIO_PORT3_W15_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,15)
  #define GPIO_PORT3_W16                           GPIO_W_REG(GPIO_BASE_PTR,3,16)
  #define GPIO_PORT3_W16_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,16)
  #define GPIO_PORT3_W17                           GPIO_W_REG(GPIO_BASE_PTR,3,17)
  #define GPIO_PORT3_W17_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,17)
  #define GPIO_PORT3_W18                           GPIO_W_REG(GPIO_BASE_PTR,3,18)
  #define GPIO_PORT3_W18_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,18)
  #define GPIO_PORT3_W19                           GPIO_W_REG(GPIO_BASE_PTR,3,19)
  #define GPIO_PORT3_W19_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,19)
  #define GPIO_PORT3_W20                           GPIO_W_REG(GPIO_BASE_PTR,3,20)
  #define GPIO_PORT3_W20_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,20)
  #define GPIO_PORT3_W21                           GPIO_W_REG(GPIO_BASE_PTR,3,21)
  #define GPIO_PORT3_W21_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,21)
  #define GPIO_PORT3_W22                           GPIO_W_REG(GPIO_BASE_PTR,3,22)
  #define GPIO_PORT3_W22_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,22)
  #define GPIO_PORT3_W23                           GPIO_W_REG(GPIO_BASE_PTR,3,23)
  #define GPIO_PORT3_W23_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,23)
  #define GPIO_PORT3_W24                           GPIO_W_REG(GPIO_BASE_PTR,3,24)
  #define GPIO_PORT3_W24_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,24)
  #define GPIO_PORT3_W25                           GPIO_W_REG(GPIO_BASE_PTR,3,25)
  #define GPIO_PORT3_W25_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,25)
  #define GPIO_PORT3_W26                           GPIO_W_REG(GPIO_BASE_PTR,3,26)
  #define GPIO_PORT3_W26_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,26)
  #define GPIO_PORT3_W27                           GPIO_W_REG(GPIO_BASE_PTR,3,27)
  #define GPIO_PORT3_W27_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,27)
  #define GPIO_PORT3_W28                           GPIO_W_REG(GPIO_BASE_PTR,3,28)
  #define GPIO_PORT3_W28_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,28)
  #define GPIO_PORT3_W29                           GPIO_W_REG(GPIO_BASE_PTR,3,29)
  #define GPIO_PORT3_W29_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,29)
  #define GPIO_PORT3_W30                           GPIO_W_REG(GPIO_BASE_PTR,3,30)
  #define GPIO_PORT3_W30_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,30)
  #define GPIO_PORT3_W31                           GPIO_W_REG(GPIO_BASE_PTR,3,31)
  #define GPIO_PORT3_W31_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,3,31)
  #define GPIO_PORT4_W0                            GPIO_W_REG(GPIO_BASE_PTR,4,0)
  #define GPIO_PORT4_W0_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,4,0)
  #define GPIO_PORT4_W1                            GPIO_W_REG(GPIO_BASE_PTR,4,1)
  #define GPIO_PORT4_W1_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,4,1)
  #define GPIO_PORT4_W2                            GPIO_W_REG(GPIO_BASE_PTR,4,2)
  #define GPIO_PORT4_W2_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,4,2)
  #define GPIO_PORT4_W3                            GPIO_W_REG(GPIO_BASE_PTR,4,3)
  #define GPIO_PORT4_W3_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,4,3)
  #define GPIO_PORT4_W4                            GPIO_W_REG(GPIO_BASE_PTR,4,4)
  #define GPIO_PORT4_W4_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,4,4)
  #define GPIO_PORT4_W5                            GPIO_W_REG(GPIO_BASE_PTR,4,5)
  #define GPIO_PORT4_W5_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,4,5)
  #define GPIO_PORT4_W6                            GPIO_W_REG(GPIO_BASE_PTR,4,6)
  #define GPIO_PORT4_W6_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,4,6)
  #define GPIO_PORT4_W7                            GPIO_W_REG(GPIO_BASE_PTR,4,7)
  #define GPIO_PORT4_W7_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,4,7)
  #define GPIO_PORT4_W8                            GPIO_W_REG(GPIO_BASE_PTR,4,8)
  #define GPIO_PORT4_W8_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,4,8)
  #define GPIO_PORT4_W9                            GPIO_W_REG(GPIO_BASE_PTR,4,9)
  #define GPIO_PORT4_W9_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,4,9)
  #define GPIO_PORT4_W10                           GPIO_W_REG(GPIO_BASE_PTR,4,10)
  #define GPIO_PORT4_W10_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,10)
  #define GPIO_PORT4_W11                           GPIO_W_REG(GPIO_BASE_PTR,4,11)
  #define GPIO_PORT4_W11_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,11)
  #define GPIO_PORT4_W12                           GPIO_W_REG(GPIO_BASE_PTR,4,12)
  #define GPIO_PORT4_W12_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,12)
  #define GPIO_PORT4_W13                           GPIO_W_REG(GPIO_BASE_PTR,4,13)
  #define GPIO_PORT4_W13_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,13)
  #define GPIO_PORT4_W14                           GPIO_W_REG(GPIO_BASE_PTR,4,14)
  #define GPIO_PORT4_W14_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,14)
  #define GPIO_PORT4_W15                           GPIO_W_REG(GPIO_BASE_PTR,4,15)
  #define GPIO_PORT4_W15_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,15)
  #define GPIO_PORT4_W16                           GPIO_W_REG(GPIO_BASE_PTR,4,16)
  #define GPIO_PORT4_W16_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,16)
  #define GPIO_PORT4_W17                           GPIO_W_REG(GPIO_BASE_PTR,4,17)
  #define GPIO_PORT4_W17_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,17)
  #define GPIO_PORT4_W18                           GPIO_W_REG(GPIO_BASE_PTR,4,18)
  #define GPIO_PORT4_W18_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,18)
  #define GPIO_PORT4_W19                           GPIO_W_REG(GPIO_BASE_PTR,4,19)
  #define GPIO_PORT4_W19_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,19)
  #define GPIO_PORT4_W20                           GPIO_W_REG(GPIO_BASE_PTR,4,20)
  #define GPIO_PORT4_W20_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,20)
  #define GPIO_PORT4_W21                           GPIO_W_REG(GPIO_BASE_PTR,4,21)
  #define GPIO_PORT4_W21_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,21)
  #define GPIO_PORT4_W22                           GPIO_W_REG(GPIO_BASE_PTR,4,22)
  #define GPIO_PORT4_W22_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,22)
  #define GPIO_PORT4_W23                           GPIO_W_REG(GPIO_BASE_PTR,4,23)
  #define GPIO_PORT4_W23_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,23)
  #define GPIO_PORT4_W24                           GPIO_W_REG(GPIO_BASE_PTR,4,24)
  #define GPIO_PORT4_W24_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,24)
  #define GPIO_PORT4_W25                           GPIO_W_REG(GPIO_BASE_PTR,4,25)
  #define GPIO_PORT4_W25_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,25)
  #define GPIO_PORT4_W26                           GPIO_W_REG(GPIO_BASE_PTR,4,26)
  #define GPIO_PORT4_W26_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,26)
  #define GPIO_PORT4_W27                           GPIO_W_REG(GPIO_BASE_PTR,4,27)
  #define GPIO_PORT4_W27_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,27)
  #define GPIO_PORT4_W28                           GPIO_W_REG(GPIO_BASE_PTR,4,28)
  #define GPIO_PORT4_W28_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,28)
  #define GPIO_PORT4_W29                           GPIO_W_REG(GPIO_BASE_PTR,4,29)
  #define GPIO_PORT4_W29_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,29)
  #define GPIO_PORT4_W30                           GPIO_W_REG(GPIO_BASE_PTR,4,30)
  #define GPIO_PORT4_W30_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,30)
  #define GPIO_PORT4_W31                           GPIO_W_REG(GPIO_BASE_PTR,4,31)
  #define GPIO_PORT4_W31_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,4,31)
  #define GPIO_PORT5_W0                            GPIO_W_REG(GPIO_BASE_PTR,5,0)
  #define GPIO_PORT5_W0_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,5,0)
  #define GPIO_PORT5_W1                            GPIO_W_REG(GPIO_BASE_PTR,5,1)
  #define GPIO_PORT5_W1_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,5,1)
  #define GPIO_PORT5_W2                            GPIO_W_REG(GPIO_BASE_PTR,5,2)
  #define GPIO_PORT5_W2_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,5,2)
  #define GPIO_PORT5_W3                            GPIO_W_REG(GPIO_BASE_PTR,5,3)
  #define GPIO_PORT5_W3_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,5,3)
  #define GPIO_PORT5_W4                            GPIO_W_REG(GPIO_BASE_PTR,5,4)
  #define GPIO_PORT5_W4_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,5,4)
  #define GPIO_PORT5_W5                            GPIO_W_REG(GPIO_BASE_PTR,5,5)
  #define GPIO_PORT5_W5_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,5,5)
  #define GPIO_PORT5_W6                            GPIO_W_REG(GPIO_BASE_PTR,5,6)
  #define GPIO_PORT5_W6_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,5,6)
  #define GPIO_PORT5_W7                            GPIO_W_REG(GPIO_BASE_PTR,5,7)
  #define GPIO_PORT5_W7_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,5,7)
  #define GPIO_PORT5_W8                            GPIO_W_REG(GPIO_BASE_PTR,5,8)
  #define GPIO_PORT5_W8_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,5,8)
  #define GPIO_PORT5_W9                            GPIO_W_REG(GPIO_BASE_PTR,5,9)
  #define GPIO_PORT5_W9_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,5,9)
  #define GPIO_PORT5_W10                           GPIO_W_REG(GPIO_BASE_PTR,5,10)
  #define GPIO_PORT5_W10_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,10)
  #define GPIO_PORT5_W11                           GPIO_W_REG(GPIO_BASE_PTR,5,11)
  #define GPIO_PORT5_W11_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,11)
  #define GPIO_PORT5_W12                           GPIO_W_REG(GPIO_BASE_PTR,5,12)
  #define GPIO_PORT5_W12_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,12)
  #define GPIO_PORT5_W13                           GPIO_W_REG(GPIO_BASE_PTR,5,13)
  #define GPIO_PORT5_W13_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,13)
  #define GPIO_PORT5_W14                           GPIO_W_REG(GPIO_BASE_PTR,5,14)
  #define GPIO_PORT5_W14_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,14)
  #define GPIO_PORT5_W15                           GPIO_W_REG(GPIO_BASE_PTR,5,15)
  #define GPIO_PORT5_W15_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,15)
  #define GPIO_PORT5_W16                           GPIO_W_REG(GPIO_BASE_PTR,5,16)
  #define GPIO_PORT5_W16_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,16)
  #define GPIO_PORT5_W17                           GPIO_W_REG(GPIO_BASE_PTR,5,17)
  #define GPIO_PORT5_W17_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,17)
  #define GPIO_PORT5_W18                           GPIO_W_REG(GPIO_BASE_PTR,5,18)
  #define GPIO_PORT5_W18_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,18)
  #define GPIO_PORT5_W19                           GPIO_W_REG(GPIO_BASE_PTR,5,19)
  #define GPIO_PORT5_W19_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,19)
  #define GPIO_PORT5_W20                           GPIO_W_REG(GPIO_BASE_PTR,5,20)
  #define GPIO_PORT5_W20_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,20)
  #define GPIO_PORT5_W21                           GPIO_W_REG(GPIO_BASE_PTR,5,21)
  #define GPIO_PORT5_W21_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,21)
  #define GPIO_PORT5_W22                           GPIO_W_REG(GPIO_BASE_PTR,5,22)
  #define GPIO_PORT5_W22_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,22)
  #define GPIO_PORT5_W23                           GPIO_W_REG(GPIO_BASE_PTR,5,23)
  #define GPIO_PORT5_W23_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,23)
  #define GPIO_PORT5_W24                           GPIO_W_REG(GPIO_BASE_PTR,5,24)
  #define GPIO_PORT5_W24_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,24)
  #define GPIO_PORT5_W25                           GPIO_W_REG(GPIO_BASE_PTR,5,25)
  #define GPIO_PORT5_W25_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,25)
  #define GPIO_PORT5_W26                           GPIO_W_REG(GPIO_BASE_PTR,5,26)
  #define GPIO_PORT5_W26_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,26)
  #define GPIO_PORT5_W27                           GPIO_W_REG(GPIO_BASE_PTR,5,27)
  #define GPIO_PORT5_W27_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,27)
  #define GPIO_PORT5_W28                           GPIO_W_REG(GPIO_BASE_PTR,5,28)
  #define GPIO_PORT5_W28_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,28)
  #define GPIO_PORT5_W29                           GPIO_W_REG(GPIO_BASE_PTR,5,29)
  #define GPIO_PORT5_W29_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,29)
  #define GPIO_PORT5_W30                           GPIO_W_REG(GPIO_BASE_PTR,5,30)
  #define GPIO_PORT5_W30_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,30)
  #define GPIO_PORT5_W31                           GPIO_W_REG(GPIO_BASE_PTR,5,31)
  #define GPIO_PORT5_W31_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,5,31)
  #define GPIO_PORT6_W0                            GPIO_W_REG(GPIO_BASE_PTR,6,0)
  #define GPIO_PORT6_W0_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,6,0)
  #define GPIO_PORT6_W1                            GPIO_W_REG(GPIO_BASE_PTR,6,1)
  #define GPIO_PORT6_W1_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,6,1)
  #define GPIO_PORT6_W2                            GPIO_W_REG(GPIO_BASE_PTR,6,2)
  #define GPIO_PORT6_W2_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,6,2)
  #define GPIO_PORT6_W3                            GPIO_W_REG(GPIO_BASE_PTR,6,3)
  #define GPIO_PORT6_W3_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,6,3)
  #define GPIO_PORT6_W4                            GPIO_W_REG(GPIO_BASE_PTR,6,4)
  #define GPIO_PORT6_W4_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,6,4)
  #define GPIO_PORT6_W5                            GPIO_W_REG(GPIO_BASE_PTR,6,5)
  #define GPIO_PORT6_W5_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,6,5)
  #define GPIO_PORT6_W6                            GPIO_W_REG(GPIO_BASE_PTR,6,6)
  #define GPIO_PORT6_W6_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,6,6)
  #define GPIO_PORT6_W7                            GPIO_W_REG(GPIO_BASE_PTR,6,7)
  #define GPIO_PORT6_W7_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,6,7)
  #define GPIO_PORT6_W8                            GPIO_W_REG(GPIO_BASE_PTR,6,8)
  #define GPIO_PORT6_W8_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,6,8)
  #define GPIO_PORT6_W9                            GPIO_W_REG(GPIO_BASE_PTR,6,9)
  #define GPIO_PORT6_W9_NS                         GPIO_W_REG(GPIO_BASE_PTR_NS,6,9)
  #define GPIO_PORT6_W10                           GPIO_W_REG(GPIO_BASE_PTR,6,10)
  #define GPIO_PORT6_W10_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,10)
  #define GPIO_PORT6_W11                           GPIO_W_REG(GPIO_BASE_PTR,6,11)
  #define GPIO_PORT6_W11_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,11)
  #define GPIO_PORT6_W12                           GPIO_W_REG(GPIO_BASE_PTR,6,12)
  #define GPIO_PORT6_W12_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,12)
  #define GPIO_PORT6_W13                           GPIO_W_REG(GPIO_BASE_PTR,6,13)
  #define GPIO_PORT6_W13_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,13)
  #define GPIO_PORT6_W14                           GPIO_W_REG(GPIO_BASE_PTR,6,14)
  #define GPIO_PORT6_W14_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,14)
  #define GPIO_PORT6_W15                           GPIO_W_REG(GPIO_BASE_PTR,6,15)
  #define GPIO_PORT6_W15_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,15)
  #define GPIO_PORT6_W16                           GPIO_W_REG(GPIO_BASE_PTR,6,16)
  #define GPIO_PORT6_W16_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,16)
  #define GPIO_PORT6_W17                           GPIO_W_REG(GPIO_BASE_PTR,6,17)
  #define GPIO_PORT6_W17_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,17)
  #define GPIO_PORT6_W18                           GPIO_W_REG(GPIO_BASE_PTR,6,18)
  #define GPIO_PORT6_W18_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,18)
  #define GPIO_PORT6_W19                           GPIO_W_REG(GPIO_BASE_PTR,6,19)
  #define GPIO_PORT6_W19_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,19)
  #define GPIO_PORT6_W20                           GPIO_W_REG(GPIO_BASE_PTR,6,20)
  #define GPIO_PORT6_W20_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,20)
  #define GPIO_PORT6_W21                           GPIO_W_REG(GPIO_BASE_PTR,6,21)
  #define GPIO_PORT6_W21_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,21)
  #define GPIO_PORT6_W22                           GPIO_W_REG(GPIO_BASE_PTR,6,22)
  #define GPIO_PORT6_W22_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,22)
  #define GPIO_PORT6_W23                           GPIO_W_REG(GPIO_BASE_PTR,6,23)
  #define GPIO_PORT6_W23_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,23)
  #define GPIO_PORT6_W24                           GPIO_W_REG(GPIO_BASE_PTR,6,24)
  #define GPIO_PORT6_W24_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,24)
  #define GPIO_PORT6_W25                           GPIO_W_REG(GPIO_BASE_PTR,6,25)
  #define GPIO_PORT6_W25_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,25)
  #define GPIO_PORT6_W26                           GPIO_W_REG(GPIO_BASE_PTR,6,26)
  #define GPIO_PORT6_W26_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,26)
  #define GPIO_PORT6_W27                           GPIO_W_REG(GPIO_BASE_PTR,6,27)
  #define GPIO_PORT6_W27_NS                        GPIO_W_REG(GPIO_BASE_PTR_NS,6,27)
  #define GPIO_DIR0                                GPIO_DIR_REG(GPIO_BASE_PTR,0)
  #define GPIO_DIR0_NS                             GPIO_DIR_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_DIR1                                GPIO_DIR_REG(GPIO_BASE_PTR,1)
  #define GPIO_DIR1_NS                             GPIO_DIR_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_DIR2                                GPIO_DIR_REG(GPIO_BASE_PTR,2)
  #define GPIO_DIR2_NS                             GPIO_DIR_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_DIR3                                GPIO_DIR_REG(GPIO_BASE_PTR,3)
  #define GPIO_DIR3_NS                             GPIO_DIR_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_DIR4                                GPIO_DIR_REG(GPIO_BASE_PTR,4)
  #define GPIO_DIR4_NS                             GPIO_DIR_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_DIR5                                GPIO_DIR_REG(GPIO_BASE_PTR,5)
  #define GPIO_DIR5_NS                             GPIO_DIR_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_DIR6                                GPIO_DIR_REG(GPIO_BASE_PTR,6)
  #define GPIO_DIR6_NS                             GPIO_DIR_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_DIR7                                GPIO_DIR_REG(GPIO_BASE_PTR,7)
  #define GPIO_DIR7_NS                             GPIO_DIR_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_MASK0                               GPIO_MASK_REG(GPIO_BASE_PTR,0)
  #define GPIO_MASK0_NS                            GPIO_MASK_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_MASK1                               GPIO_MASK_REG(GPIO_BASE_PTR,1)
  #define GPIO_MASK1_NS                            GPIO_MASK_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_MASK2                               GPIO_MASK_REG(GPIO_BASE_PTR,2)
  #define GPIO_MASK2_NS                            GPIO_MASK_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_MASK3                               GPIO_MASK_REG(GPIO_BASE_PTR,3)
  #define GPIO_MASK3_NS                            GPIO_MASK_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_MASK4                               GPIO_MASK_REG(GPIO_BASE_PTR,4)
  #define GPIO_MASK4_NS                            GPIO_MASK_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_MASK5                               GPIO_MASK_REG(GPIO_BASE_PTR,5)
  #define GPIO_MASK5_NS                            GPIO_MASK_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_MASK6                               GPIO_MASK_REG(GPIO_BASE_PTR,6)
  #define GPIO_MASK6_NS                            GPIO_MASK_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_MASK7                               GPIO_MASK_REG(GPIO_BASE_PTR,7)
  #define GPIO_MASK7_NS                            GPIO_MASK_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_PIN0                                GPIO_PIN_REG(GPIO_BASE_PTR,0)
  #define GPIO_PIN0_NS                             GPIO_PIN_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_PIN1                                GPIO_PIN_REG(GPIO_BASE_PTR,1)
  #define GPIO_PIN1_NS                             GPIO_PIN_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_PIN2                                GPIO_PIN_REG(GPIO_BASE_PTR,2)
  #define GPIO_PIN2_NS                             GPIO_PIN_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_PIN3                                GPIO_PIN_REG(GPIO_BASE_PTR,3)
  #define GPIO_PIN3_NS                             GPIO_PIN_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_PIN4                                GPIO_PIN_REG(GPIO_BASE_PTR,4)
  #define GPIO_PIN4_NS                             GPIO_PIN_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_PIN5                                GPIO_PIN_REG(GPIO_BASE_PTR,5)
  #define GPIO_PIN5_NS                             GPIO_PIN_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_PIN6                                GPIO_PIN_REG(GPIO_BASE_PTR,6)
  #define GPIO_PIN6_NS                             GPIO_PIN_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_PIN7                                GPIO_PIN_REG(GPIO_BASE_PTR,7)
  #define GPIO_PIN7_NS                             GPIO_PIN_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_MPIN0                               GPIO_MPIN_REG(GPIO_BASE_PTR,0)
  #define GPIO_MPIN0_NS                            GPIO_MPIN_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_MPIN1                               GPIO_MPIN_REG(GPIO_BASE_PTR,1)
  #define GPIO_MPIN1_NS                            GPIO_MPIN_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_MPIN2                               GPIO_MPIN_REG(GPIO_BASE_PTR,2)
  #define GPIO_MPIN2_NS                            GPIO_MPIN_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_MPIN3                               GPIO_MPIN_REG(GPIO_BASE_PTR,3)
  #define GPIO_MPIN3_NS                            GPIO_MPIN_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_MPIN4                               GPIO_MPIN_REG(GPIO_BASE_PTR,4)
  #define GPIO_MPIN4_NS                            GPIO_MPIN_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_MPIN5                               GPIO_MPIN_REG(GPIO_BASE_PTR,5)
  #define GPIO_MPIN5_NS                            GPIO_MPIN_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_MPIN6                               GPIO_MPIN_REG(GPIO_BASE_PTR,6)
  #define GPIO_MPIN6_NS                            GPIO_MPIN_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_MPIN7                               GPIO_MPIN_REG(GPIO_BASE_PTR,7)
  #define GPIO_MPIN7_NS                            GPIO_MPIN_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_SET0                                GPIO_SET_REG(GPIO_BASE_PTR,0)
  #define GPIO_SET0_NS                             GPIO_SET_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_SET1                                GPIO_SET_REG(GPIO_BASE_PTR,1)
  #define GPIO_SET1_NS                             GPIO_SET_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_SET2                                GPIO_SET_REG(GPIO_BASE_PTR,2)
  #define GPIO_SET2_NS                             GPIO_SET_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_SET3                                GPIO_SET_REG(GPIO_BASE_PTR,3)
  #define GPIO_SET3_NS                             GPIO_SET_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_SET4                                GPIO_SET_REG(GPIO_BASE_PTR,4)
  #define GPIO_SET4_NS                             GPIO_SET_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_SET5                                GPIO_SET_REG(GPIO_BASE_PTR,5)
  #define GPIO_SET5_NS                             GPIO_SET_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_SET6                                GPIO_SET_REG(GPIO_BASE_PTR,6)
  #define GPIO_SET6_NS                             GPIO_SET_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_SET7                                GPIO_SET_REG(GPIO_BASE_PTR,7)
  #define GPIO_SET7_NS                             GPIO_SET_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_CLR0                                GPIO_CLR_REG(GPIO_BASE_PTR,0)
  #define GPIO_CLR0_NS                             GPIO_CLR_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_CLR1                                GPIO_CLR_REG(GPIO_BASE_PTR,1)
  #define GPIO_CLR1_NS                             GPIO_CLR_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_CLR2                                GPIO_CLR_REG(GPIO_BASE_PTR,2)
  #define GPIO_CLR2_NS                             GPIO_CLR_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_CLR3                                GPIO_CLR_REG(GPIO_BASE_PTR,3)
  #define GPIO_CLR3_NS                             GPIO_CLR_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_CLR4                                GPIO_CLR_REG(GPIO_BASE_PTR,4)
  #define GPIO_CLR4_NS                             GPIO_CLR_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_CLR5                                GPIO_CLR_REG(GPIO_BASE_PTR,5)
  #define GPIO_CLR5_NS                             GPIO_CLR_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_CLR6                                GPIO_CLR_REG(GPIO_BASE_PTR,6)
  #define GPIO_CLR6_NS                             GPIO_CLR_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_CLR7                                GPIO_CLR_REG(GPIO_BASE_PTR,7)
  #define GPIO_CLR7_NS                             GPIO_CLR_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_NOT0                                GPIO_NOT_REG(GPIO_BASE_PTR,0)
  #define GPIO_NOT0_NS                             GPIO_NOT_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_NOT1                                GPIO_NOT_REG(GPIO_BASE_PTR,1)
  #define GPIO_NOT1_NS                             GPIO_NOT_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_NOT2                                GPIO_NOT_REG(GPIO_BASE_PTR,2)
  #define GPIO_NOT2_NS                             GPIO_NOT_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_NOT3                                GPIO_NOT_REG(GPIO_BASE_PTR,3)
  #define GPIO_NOT3_NS                             GPIO_NOT_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_NOT4                                GPIO_NOT_REG(GPIO_BASE_PTR,4)
  #define GPIO_NOT4_NS                             GPIO_NOT_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_NOT5                                GPIO_NOT_REG(GPIO_BASE_PTR,5)
  #define GPIO_NOT5_NS                             GPIO_NOT_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_NOT6                                GPIO_NOT_REG(GPIO_BASE_PTR,6)
  #define GPIO_NOT6_NS                             GPIO_NOT_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_NOT7                                GPIO_NOT_REG(GPIO_BASE_PTR,7)
  #define GPIO_NOT7_NS                             GPIO_NOT_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_DIRSET0                             GPIO_DIRSET_REG(GPIO_BASE_PTR,0)
  #define GPIO_DIRSET0_NS                          GPIO_DIRSET_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_DIRSET1                             GPIO_DIRSET_REG(GPIO_BASE_PTR,1)
  #define GPIO_DIRSET1_NS                          GPIO_DIRSET_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_DIRSET2                             GPIO_DIRSET_REG(GPIO_BASE_PTR,2)
  #define GPIO_DIRSET2_NS                          GPIO_DIRSET_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_DIRSET3                             GPIO_DIRSET_REG(GPIO_BASE_PTR,3)
  #define GPIO_DIRSET3_NS                          GPIO_DIRSET_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_DIRSET4                             GPIO_DIRSET_REG(GPIO_BASE_PTR,4)
  #define GPIO_DIRSET4_NS                          GPIO_DIRSET_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_DIRSET5                             GPIO_DIRSET_REG(GPIO_BASE_PTR,5)
  #define GPIO_DIRSET5_NS                          GPIO_DIRSET_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_DIRSET6                             GPIO_DIRSET_REG(GPIO_BASE_PTR,6)
  #define GPIO_DIRSET6_NS                          GPIO_DIRSET_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_DIRSET7                             GPIO_DIRSET_REG(GPIO_BASE_PTR,7)
  #define GPIO_DIRSET7_NS                          GPIO_DIRSET_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_DIRCLR0                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,0)
  #define GPIO_DIRCLR0_NS                          GPIO_DIRCLR_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_DIRCLR1                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,1)
  #define GPIO_DIRCLR1_NS                          GPIO_DIRCLR_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_DIRCLR2                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,2)
  #define GPIO_DIRCLR2_NS                          GPIO_DIRCLR_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_DIRCLR3                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,3)
  #define GPIO_DIRCLR3_NS                          GPIO_DIRCLR_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_DIRCLR4                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,4)
  #define GPIO_DIRCLR4_NS                          GPIO_DIRCLR_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_DIRCLR5                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,5)
  #define GPIO_DIRCLR5_NS                          GPIO_DIRCLR_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_DIRCLR6                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,6)
  #define GPIO_DIRCLR6_NS                          GPIO_DIRCLR_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_DIRCLR7                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,7)
  #define GPIO_DIRCLR7_NS                          GPIO_DIRCLR_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_DIRNOT0                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,0)
  #define GPIO_DIRNOT0_NS                          GPIO_DIRNOT_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_DIRNOT1                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,1)
  #define GPIO_DIRNOT1_NS                          GPIO_DIRNOT_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_DIRNOT2                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,2)
  #define GPIO_DIRNOT2_NS                          GPIO_DIRNOT_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_DIRNOT3                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,3)
  #define GPIO_DIRNOT3_NS                          GPIO_DIRNOT_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_DIRNOT4                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,4)
  #define GPIO_DIRNOT4_NS                          GPIO_DIRNOT_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_DIRNOT5                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,5)
  #define GPIO_DIRNOT5_NS                          GPIO_DIRNOT_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_DIRNOT6                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,6)
  #define GPIO_DIRNOT6_NS                          GPIO_DIRNOT_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_DIRNOT7                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,7)
  #define GPIO_DIRNOT7_NS                          GPIO_DIRNOT_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_INTENA0                             GPIO_INTENA_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTENA0_NS                          GPIO_INTENA_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_INTENA1                             GPIO_INTENA_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTENA1_NS                          GPIO_INTENA_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_INTENA2                             GPIO_INTENA_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTENA2_NS                          GPIO_INTENA_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_INTENA3                             GPIO_INTENA_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTENA3_NS                          GPIO_INTENA_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_INTENA4                             GPIO_INTENA_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTENA4_NS                          GPIO_INTENA_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_INTENA5                             GPIO_INTENA_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTENA5_NS                          GPIO_INTENA_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_INTENA6                             GPIO_INTENA_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTENA6_NS                          GPIO_INTENA_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_INTENA7                             GPIO_INTENA_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTENA7_NS                          GPIO_INTENA_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_INTENB0                             GPIO_INTENB_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTENB0_NS                          GPIO_INTENB_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_INTENB1                             GPIO_INTENB_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTENB1_NS                          GPIO_INTENB_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_INTENB2                             GPIO_INTENB_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTENB2_NS                          GPIO_INTENB_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_INTENB3                             GPIO_INTENB_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTENB3_NS                          GPIO_INTENB_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_INTENB4                             GPIO_INTENB_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTENB4_NS                          GPIO_INTENB_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_INTENB5                             GPIO_INTENB_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTENB5_NS                          GPIO_INTENB_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_INTENB6                             GPIO_INTENB_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTENB6_NS                          GPIO_INTENB_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_INTENB7                             GPIO_INTENB_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTENB7_NS                          GPIO_INTENB_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_INTPOL0                             GPIO_INTPOL_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTPOL0_NS                          GPIO_INTPOL_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_INTPOL1                             GPIO_INTPOL_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTPOL1_NS                          GPIO_INTPOL_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_INTPOL2                             GPIO_INTPOL_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTPOL2_NS                          GPIO_INTPOL_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_INTPOL3                             GPIO_INTPOL_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTPOL3_NS                          GPIO_INTPOL_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_INTPOL4                             GPIO_INTPOL_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTPOL4_NS                          GPIO_INTPOL_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_INTPOL5                             GPIO_INTPOL_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTPOL5_NS                          GPIO_INTPOL_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_INTPOL6                             GPIO_INTPOL_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTPOL6_NS                          GPIO_INTPOL_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_INTPOL7                             GPIO_INTPOL_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTPOL7_NS                          GPIO_INTPOL_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_INTEDG0                             GPIO_INTEDG_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTEDG0_NS                          GPIO_INTEDG_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_INTEDG1                             GPIO_INTEDG_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTEDG1_NS                          GPIO_INTEDG_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_INTEDG2                             GPIO_INTEDG_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTEDG2_NS                          GPIO_INTEDG_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_INTEDG3                             GPIO_INTEDG_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTEDG3_NS                          GPIO_INTEDG_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_INTEDG4                             GPIO_INTEDG_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTEDG4_NS                          GPIO_INTEDG_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_INTEDG5                             GPIO_INTEDG_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTEDG5_NS                          GPIO_INTEDG_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_INTEDG6                             GPIO_INTEDG_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTEDG6_NS                          GPIO_INTEDG_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_INTEDG7                             GPIO_INTEDG_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTEDG7_NS                          GPIO_INTEDG_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_INTSTATA0                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTSTATA0_NS                        GPIO_INTSTATA_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_INTSTATA1                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTSTATA1_NS                        GPIO_INTSTATA_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_INTSTATA2                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTSTATA2_NS                        GPIO_INTSTATA_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_INTSTATA3                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTSTATA3_NS                        GPIO_INTSTATA_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_INTSTATA4                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTSTATA4_NS                        GPIO_INTSTATA_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_INTSTATA5                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTSTATA5_NS                        GPIO_INTSTATA_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_INTSTATA6                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTSTATA6_NS                        GPIO_INTSTATA_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_INTSTATA7                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTSTATA7_NS                        GPIO_INTSTATA_REG(GPIO_BASE_PTR_NS,7)
  #define GPIO_INTSTATB0                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTSTATB0_NS                        GPIO_INTSTATB_REG(GPIO_BASE_PTR_NS,0)
  #define GPIO_INTSTATB1                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTSTATB1_NS                        GPIO_INTSTATB_REG(GPIO_BASE_PTR_NS,1)
  #define GPIO_INTSTATB2                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTSTATB2_NS                        GPIO_INTSTATB_REG(GPIO_BASE_PTR_NS,2)
  #define GPIO_INTSTATB3                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTSTATB3_NS                        GPIO_INTSTATB_REG(GPIO_BASE_PTR_NS,3)
  #define GPIO_INTSTATB4                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTSTATB4_NS                        GPIO_INTSTATB_REG(GPIO_BASE_PTR_NS,4)
  #define GPIO_INTSTATB5                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTSTATB5_NS                        GPIO_INTSTATB_REG(GPIO_BASE_PTR_NS,5)
  #define GPIO_INTSTATB6                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTSTATB6_NS                        GPIO_INTSTATB_REG(GPIO_BASE_PTR_NS,6)
  #define GPIO_INTSTATB7                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTSTATB7_NS                        GPIO_INTSTATB_REG(GPIO_BASE_PTR_NS,7)
  /* SECGPIO */
  #define SECGPIO_PORT0_B0                         GPIO_B_REG(SECGPIO_BASE_PTR,0,0)
  #define SECGPIO_PORT0_B0_NS                      GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,0)
  #define SECGPIO_PORT0_B1                         GPIO_B_REG(SECGPIO_BASE_PTR,0,1)
  #define SECGPIO_PORT0_B1_NS                      GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,1)
  #define SECGPIO_PORT0_B2                         GPIO_B_REG(SECGPIO_BASE_PTR,0,2)
  #define SECGPIO_PORT0_B2_NS                      GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,2)
  #define SECGPIO_PORT0_B3                         GPIO_B_REG(SECGPIO_BASE_PTR,0,3)
  #define SECGPIO_PORT0_B3_NS                      GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,3)
  #define SECGPIO_PORT0_B4                         GPIO_B_REG(SECGPIO_BASE_PTR,0,4)
  #define SECGPIO_PORT0_B4_NS                      GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,4)
  #define SECGPIO_PORT0_B5                         GPIO_B_REG(SECGPIO_BASE_PTR,0,5)
  #define SECGPIO_PORT0_B5_NS                      GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,5)
  #define SECGPIO_PORT0_B6                         GPIO_B_REG(SECGPIO_BASE_PTR,0,6)
  #define SECGPIO_PORT0_B6_NS                      GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,6)
  #define SECGPIO_PORT0_B7                         GPIO_B_REG(SECGPIO_BASE_PTR,0,7)
  #define SECGPIO_PORT0_B7_NS                      GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,7)
  #define SECGPIO_PORT0_B8                         GPIO_B_REG(SECGPIO_BASE_PTR,0,8)
  #define SECGPIO_PORT0_B8_NS                      GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,8)
  #define SECGPIO_PORT0_B9                         GPIO_B_REG(SECGPIO_BASE_PTR,0,9)
  #define SECGPIO_PORT0_B9_NS                      GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,9)
  #define SECGPIO_PORT0_B10                        GPIO_B_REG(SECGPIO_BASE_PTR,0,10)
  #define SECGPIO_PORT0_B10_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,10)
  #define SECGPIO_PORT0_B11                        GPIO_B_REG(SECGPIO_BASE_PTR,0,11)
  #define SECGPIO_PORT0_B11_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,11)
  #define SECGPIO_PORT0_B12                        GPIO_B_REG(SECGPIO_BASE_PTR,0,12)
  #define SECGPIO_PORT0_B12_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,12)
  #define SECGPIO_PORT0_B13                        GPIO_B_REG(SECGPIO_BASE_PTR,0,13)
  #define SECGPIO_PORT0_B13_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,13)
  #define SECGPIO_PORT0_B14                        GPIO_B_REG(SECGPIO_BASE_PTR,0,14)
  #define SECGPIO_PORT0_B14_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,14)
  #define SECGPIO_PORT0_B15                        GPIO_B_REG(SECGPIO_BASE_PTR,0,15)
  #define SECGPIO_PORT0_B15_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,15)
  #define SECGPIO_PORT0_B16                        GPIO_B_REG(SECGPIO_BASE_PTR,0,16)
  #define SECGPIO_PORT0_B16_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,16)
  #define SECGPIO_PORT0_B17                        GPIO_B_REG(SECGPIO_BASE_PTR,0,17)
  #define SECGPIO_PORT0_B17_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,17)
  #define SECGPIO_PORT0_B18                        GPIO_B_REG(SECGPIO_BASE_PTR,0,18)
  #define SECGPIO_PORT0_B18_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,18)
  #define SECGPIO_PORT0_B19                        GPIO_B_REG(SECGPIO_BASE_PTR,0,19)
  #define SECGPIO_PORT0_B19_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,19)
  #define SECGPIO_PORT0_B20                        GPIO_B_REG(SECGPIO_BASE_PTR,0,20)
  #define SECGPIO_PORT0_B20_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,20)
  #define SECGPIO_PORT0_B21                        GPIO_B_REG(SECGPIO_BASE_PTR,0,21)
  #define SECGPIO_PORT0_B21_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,21)
  #define SECGPIO_PORT0_B22                        GPIO_B_REG(SECGPIO_BASE_PTR,0,22)
  #define SECGPIO_PORT0_B22_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,22)
  #define SECGPIO_PORT0_B23                        GPIO_B_REG(SECGPIO_BASE_PTR,0,23)
  #define SECGPIO_PORT0_B23_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,23)
  #define SECGPIO_PORT0_B24                        GPIO_B_REG(SECGPIO_BASE_PTR,0,24)
  #define SECGPIO_PORT0_B24_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,24)
  #define SECGPIO_PORT0_B25                        GPIO_B_REG(SECGPIO_BASE_PTR,0,25)
  #define SECGPIO_PORT0_B25_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,25)
  #define SECGPIO_PORT0_B26                        GPIO_B_REG(SECGPIO_BASE_PTR,0,26)
  #define SECGPIO_PORT0_B26_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,26)
  #define SECGPIO_PORT0_B27                        GPIO_B_REG(SECGPIO_BASE_PTR,0,27)
  #define SECGPIO_PORT0_B27_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,27)
  #define SECGPIO_PORT0_B28                        GPIO_B_REG(SECGPIO_BASE_PTR,0,28)
  #define SECGPIO_PORT0_B28_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,28)
  #define SECGPIO_PORT0_B29                        GPIO_B_REG(SECGPIO_BASE_PTR,0,29)
  #define SECGPIO_PORT0_B29_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,29)
  #define SECGPIO_PORT0_B30                        GPIO_B_REG(SECGPIO_BASE_PTR,0,30)
  #define SECGPIO_PORT0_B30_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,30)
  #define SECGPIO_PORT0_B31                        GPIO_B_REG(SECGPIO_BASE_PTR,0,31)
  #define SECGPIO_PORT0_B31_NS                     GPIO_B_REG(SECGPIO_BASE_PTR_NS,0,31)
  #define SECGPIO_PORT0_W0                         GPIO_W_REG(SECGPIO_BASE_PTR,0,0)
  #define SECGPIO_PORT0_W0_NS                      GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,0)
  #define SECGPIO_PORT0_W1                         GPIO_W_REG(SECGPIO_BASE_PTR,0,1)
  #define SECGPIO_PORT0_W1_NS                      GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,1)
  #define SECGPIO_PORT0_W2                         GPIO_W_REG(SECGPIO_BASE_PTR,0,2)
  #define SECGPIO_PORT0_W2_NS                      GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,2)
  #define SECGPIO_PORT0_W3                         GPIO_W_REG(SECGPIO_BASE_PTR,0,3)
  #define SECGPIO_PORT0_W3_NS                      GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,3)
  #define SECGPIO_PORT0_W4                         GPIO_W_REG(SECGPIO_BASE_PTR,0,4)
  #define SECGPIO_PORT0_W4_NS                      GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,4)
  #define SECGPIO_PORT0_W5                         GPIO_W_REG(SECGPIO_BASE_PTR,0,5)
  #define SECGPIO_PORT0_W5_NS                      GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,5)
  #define SECGPIO_PORT0_W6                         GPIO_W_REG(SECGPIO_BASE_PTR,0,6)
  #define SECGPIO_PORT0_W6_NS                      GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,6)
  #define SECGPIO_PORT0_W7                         GPIO_W_REG(SECGPIO_BASE_PTR,0,7)
  #define SECGPIO_PORT0_W7_NS                      GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,7)
  #define SECGPIO_PORT0_W8                         GPIO_W_REG(SECGPIO_BASE_PTR,0,8)
  #define SECGPIO_PORT0_W8_NS                      GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,8)
  #define SECGPIO_PORT0_W9                         GPIO_W_REG(SECGPIO_BASE_PTR,0,9)
  #define SECGPIO_PORT0_W9_NS                      GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,9)
  #define SECGPIO_PORT0_W10                        GPIO_W_REG(SECGPIO_BASE_PTR,0,10)
  #define SECGPIO_PORT0_W10_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,10)
  #define SECGPIO_PORT0_W11                        GPIO_W_REG(SECGPIO_BASE_PTR,0,11)
  #define SECGPIO_PORT0_W11_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,11)
  #define SECGPIO_PORT0_W12                        GPIO_W_REG(SECGPIO_BASE_PTR,0,12)
  #define SECGPIO_PORT0_W12_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,12)
  #define SECGPIO_PORT0_W13                        GPIO_W_REG(SECGPIO_BASE_PTR,0,13)
  #define SECGPIO_PORT0_W13_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,13)
  #define SECGPIO_PORT0_W14                        GPIO_W_REG(SECGPIO_BASE_PTR,0,14)
  #define SECGPIO_PORT0_W14_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,14)
  #define SECGPIO_PORT0_W15                        GPIO_W_REG(SECGPIO_BASE_PTR,0,15)
  #define SECGPIO_PORT0_W15_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,15)
  #define SECGPIO_PORT0_W16                        GPIO_W_REG(SECGPIO_BASE_PTR,0,16)
  #define SECGPIO_PORT0_W16_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,16)
  #define SECGPIO_PORT0_W17                        GPIO_W_REG(SECGPIO_BASE_PTR,0,17)
  #define SECGPIO_PORT0_W17_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,17)
  #define SECGPIO_PORT0_W18                        GPIO_W_REG(SECGPIO_BASE_PTR,0,18)
  #define SECGPIO_PORT0_W18_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,18)
  #define SECGPIO_PORT0_W19                        GPIO_W_REG(SECGPIO_BASE_PTR,0,19)
  #define SECGPIO_PORT0_W19_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,19)
  #define SECGPIO_PORT0_W20                        GPIO_W_REG(SECGPIO_BASE_PTR,0,20)
  #define SECGPIO_PORT0_W20_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,20)
  #define SECGPIO_PORT0_W21                        GPIO_W_REG(SECGPIO_BASE_PTR,0,21)
  #define SECGPIO_PORT0_W21_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,21)
  #define SECGPIO_PORT0_W22                        GPIO_W_REG(SECGPIO_BASE_PTR,0,22)
  #define SECGPIO_PORT0_W22_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,22)
  #define SECGPIO_PORT0_W23                        GPIO_W_REG(SECGPIO_BASE_PTR,0,23)
  #define SECGPIO_PORT0_W23_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,23)
  #define SECGPIO_PORT0_W24                        GPIO_W_REG(SECGPIO_BASE_PTR,0,24)
  #define SECGPIO_PORT0_W24_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,24)
  #define SECGPIO_PORT0_W25                        GPIO_W_REG(SECGPIO_BASE_PTR,0,25)
  #define SECGPIO_PORT0_W25_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,25)
  #define SECGPIO_PORT0_W26                        GPIO_W_REG(SECGPIO_BASE_PTR,0,26)
  #define SECGPIO_PORT0_W26_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,26)
  #define SECGPIO_PORT0_W27                        GPIO_W_REG(SECGPIO_BASE_PTR,0,27)
  #define SECGPIO_PORT0_W27_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,27)
  #define SECGPIO_PORT0_W28                        GPIO_W_REG(SECGPIO_BASE_PTR,0,28)
  #define SECGPIO_PORT0_W28_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,28)
  #define SECGPIO_PORT0_W29                        GPIO_W_REG(SECGPIO_BASE_PTR,0,29)
  #define SECGPIO_PORT0_W29_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,29)
  #define SECGPIO_PORT0_W30                        GPIO_W_REG(SECGPIO_BASE_PTR,0,30)
  #define SECGPIO_PORT0_W30_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,30)
  #define SECGPIO_PORT0_W31                        GPIO_W_REG(SECGPIO_BASE_PTR,0,31)
  #define SECGPIO_PORT0_W31_NS                     GPIO_W_REG(SECGPIO_BASE_PTR_NS,0,31)
  #define SECGPIO_DIR0                             GPIO_DIR_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_DIR0_NS                          GPIO_DIR_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_MASK0                            GPIO_MASK_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_MASK0_NS                         GPIO_MASK_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_PIN0                             GPIO_PIN_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_PIN0_NS                          GPIO_PIN_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_MPIN0                            GPIO_MPIN_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_MPIN0_NS                         GPIO_MPIN_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_SET0                             GPIO_SET_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_SET0_NS                          GPIO_SET_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_CLR0                             GPIO_CLR_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_CLR0_NS                          GPIO_CLR_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_NOT0                             GPIO_NOT_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_NOT0_NS                          GPIO_NOT_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_DIRSET0                          GPIO_DIRSET_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_DIRSET0_NS                       GPIO_DIRSET_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_DIRCLR0                          GPIO_DIRCLR_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_DIRCLR0_NS                       GPIO_DIRCLR_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_DIRNOT0                          GPIO_DIRNOT_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_DIRNOT0_NS                       GPIO_DIRNOT_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_INTENA0                          GPIO_INTENA_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTENA0_NS                       GPIO_INTENA_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_INTENB0                          GPIO_INTENB_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTENB0_NS                       GPIO_INTENB_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_INTPOL0                          GPIO_INTPOL_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTPOL0_NS                       GPIO_INTPOL_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_INTEDG0                          GPIO_INTEDG_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTEDG0_NS                       GPIO_INTEDG_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_INTSTATA0                        GPIO_INTSTATA_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTSTATA0_NS                     GPIO_INTSTATA_REG(SECGPIO_BASE_PTR_NS,0)
  #define SECGPIO_INTSTATB0                        GPIO_INTSTATB_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTSTATB0_NS                     GPIO_INTSTATB_REG(SECGPIO_BASE_PTR_NS,0)
#else
  /* GPIO */
  #define GPIO_PORT0_B0                            GPIO_B_REG(GPIO_BASE_PTR,0,0)
  #define GPIO_PORT0_B1                            GPIO_B_REG(GPIO_BASE_PTR,0,1)
  #define GPIO_PORT0_B2                            GPIO_B_REG(GPIO_BASE_PTR,0,2)
  #define GPIO_PORT0_B3                            GPIO_B_REG(GPIO_BASE_PTR,0,3)
  #define GPIO_PORT0_B4                            GPIO_B_REG(GPIO_BASE_PTR,0,4)
  #define GPIO_PORT0_B5                            GPIO_B_REG(GPIO_BASE_PTR,0,5)
  #define GPIO_PORT0_B6                            GPIO_B_REG(GPIO_BASE_PTR,0,6)
  #define GPIO_PORT0_B7                            GPIO_B_REG(GPIO_BASE_PTR,0,7)
  #define GPIO_PORT0_B8                            GPIO_B_REG(GPIO_BASE_PTR,0,8)
  #define GPIO_PORT0_B9                            GPIO_B_REG(GPIO_BASE_PTR,0,9)
  #define GPIO_PORT0_B10                           GPIO_B_REG(GPIO_BASE_PTR,0,10)
  #define GPIO_PORT0_B11                           GPIO_B_REG(GPIO_BASE_PTR,0,11)
  #define GPIO_PORT0_B12                           GPIO_B_REG(GPIO_BASE_PTR,0,12)
  #define GPIO_PORT0_B13                           GPIO_B_REG(GPIO_BASE_PTR,0,13)
  #define GPIO_PORT0_B14                           GPIO_B_REG(GPIO_BASE_PTR,0,14)
  #define GPIO_PORT0_B15                           GPIO_B_REG(GPIO_BASE_PTR,0,15)
  #define GPIO_PORT0_B16                           GPIO_B_REG(GPIO_BASE_PTR,0,16)
  #define GPIO_PORT0_B17                           GPIO_B_REG(GPIO_BASE_PTR,0,17)
  #define GPIO_PORT0_B18                           GPIO_B_REG(GPIO_BASE_PTR,0,18)
  #define GPIO_PORT0_B19                           GPIO_B_REG(GPIO_BASE_PTR,0,19)
  #define GPIO_PORT0_B20                           GPIO_B_REG(GPIO_BASE_PTR,0,20)
  #define GPIO_PORT0_B21                           GPIO_B_REG(GPIO_BASE_PTR,0,21)
  #define GPIO_PORT0_B22                           GPIO_B_REG(GPIO_BASE_PTR,0,22)
  #define GPIO_PORT0_B23                           GPIO_B_REG(GPIO_BASE_PTR,0,23)
  #define GPIO_PORT0_B24                           GPIO_B_REG(GPIO_BASE_PTR,0,24)
  #define GPIO_PORT0_B25                           GPIO_B_REG(GPIO_BASE_PTR,0,25)
  #define GPIO_PORT0_B26                           GPIO_B_REG(GPIO_BASE_PTR,0,26)
  #define GPIO_PORT0_B27                           GPIO_B_REG(GPIO_BASE_PTR,0,27)
  #define GPIO_PORT0_B28                           GPIO_B_REG(GPIO_BASE_PTR,0,28)
  #define GPIO_PORT0_B29                           GPIO_B_REG(GPIO_BASE_PTR,0,29)
  #define GPIO_PORT0_B30                           GPIO_B_REG(GPIO_BASE_PTR,0,30)
  #define GPIO_PORT0_B31                           GPIO_B_REG(GPIO_BASE_PTR,0,31)
  #define GPIO_PORT1_B0                            GPIO_B_REG(GPIO_BASE_PTR,1,0)
  #define GPIO_PORT1_B1                            GPIO_B_REG(GPIO_BASE_PTR,1,1)
  #define GPIO_PORT1_B2                            GPIO_B_REG(GPIO_BASE_PTR,1,2)
  #define GPIO_PORT1_B3                            GPIO_B_REG(GPIO_BASE_PTR,1,3)
  #define GPIO_PORT1_B4                            GPIO_B_REG(GPIO_BASE_PTR,1,4)
  #define GPIO_PORT1_B5                            GPIO_B_REG(GPIO_BASE_PTR,1,5)
  #define GPIO_PORT1_B6                            GPIO_B_REG(GPIO_BASE_PTR,1,6)
  #define GPIO_PORT1_B7                            GPIO_B_REG(GPIO_BASE_PTR,1,7)
  #define GPIO_PORT1_B8                            GPIO_B_REG(GPIO_BASE_PTR,1,8)
  #define GPIO_PORT1_B9                            GPIO_B_REG(GPIO_BASE_PTR,1,9)
  #define GPIO_PORT1_B10                           GPIO_B_REG(GPIO_BASE_PTR,1,10)
  #define GPIO_PORT1_B11                           GPIO_B_REG(GPIO_BASE_PTR,1,11)
  #define GPIO_PORT1_B12                           GPIO_B_REG(GPIO_BASE_PTR,1,12)
  #define GPIO_PORT1_B13                           GPIO_B_REG(GPIO_BASE_PTR,1,13)
  #define GPIO_PORT1_B14                           GPIO_B_REG(GPIO_BASE_PTR,1,14)
  #define GPIO_PORT1_B15                           GPIO_B_REG(GPIO_BASE_PTR,1,15)
  #define GPIO_PORT1_B16                           GPIO_B_REG(GPIO_BASE_PTR,1,16)
  #define GPIO_PORT1_B17                           GPIO_B_REG(GPIO_BASE_PTR,1,17)
  #define GPIO_PORT1_B18                           GPIO_B_REG(GPIO_BASE_PTR,1,18)
  #define GPIO_PORT1_B19                           GPIO_B_REG(GPIO_BASE_PTR,1,19)
  #define GPIO_PORT1_B20                           GPIO_B_REG(GPIO_BASE_PTR,1,20)
  #define GPIO_PORT1_B21                           GPIO_B_REG(GPIO_BASE_PTR,1,21)
  #define GPIO_PORT1_B22                           GPIO_B_REG(GPIO_BASE_PTR,1,22)
  #define GPIO_PORT1_B23                           GPIO_B_REG(GPIO_BASE_PTR,1,23)
  #define GPIO_PORT1_B24                           GPIO_B_REG(GPIO_BASE_PTR,1,24)
  #define GPIO_PORT1_B25                           GPIO_B_REG(GPIO_BASE_PTR,1,25)
  #define GPIO_PORT1_B26                           GPIO_B_REG(GPIO_BASE_PTR,1,26)
  #define GPIO_PORT1_B27                           GPIO_B_REG(GPIO_BASE_PTR,1,27)
  #define GPIO_PORT1_B28                           GPIO_B_REG(GPIO_BASE_PTR,1,28)
  #define GPIO_PORT1_B29                           GPIO_B_REG(GPIO_BASE_PTR,1,29)
  #define GPIO_PORT1_B30                           GPIO_B_REG(GPIO_BASE_PTR,1,30)
  #define GPIO_PORT1_B31                           GPIO_B_REG(GPIO_BASE_PTR,1,31)
  #define GPIO_PORT2_B0                            GPIO_B_REG(GPIO_BASE_PTR,2,0)
  #define GPIO_PORT2_B1                            GPIO_B_REG(GPIO_BASE_PTR,2,1)
  #define GPIO_PORT2_B2                            GPIO_B_REG(GPIO_BASE_PTR,2,2)
  #define GPIO_PORT2_B3                            GPIO_B_REG(GPIO_BASE_PTR,2,3)
  #define GPIO_PORT2_B4                            GPIO_B_REG(GPIO_BASE_PTR,2,4)
  #define GPIO_PORT2_B5                            GPIO_B_REG(GPIO_BASE_PTR,2,5)
  #define GPIO_PORT2_B6                            GPIO_B_REG(GPIO_BASE_PTR,2,6)
  #define GPIO_PORT2_B7                            GPIO_B_REG(GPIO_BASE_PTR,2,7)
  #define GPIO_PORT2_B8                            GPIO_B_REG(GPIO_BASE_PTR,2,8)
  #define GPIO_PORT2_B9                            GPIO_B_REG(GPIO_BASE_PTR,2,9)
  #define GPIO_PORT2_B10                           GPIO_B_REG(GPIO_BASE_PTR,2,10)
  #define GPIO_PORT2_B11                           GPIO_B_REG(GPIO_BASE_PTR,2,11)
  #define GPIO_PORT2_B12                           GPIO_B_REG(GPIO_BASE_PTR,2,12)
  #define GPIO_PORT2_B13                           GPIO_B_REG(GPIO_BASE_PTR,2,13)
  #define GPIO_PORT2_B14                           GPIO_B_REG(GPIO_BASE_PTR,2,14)
  #define GPIO_PORT2_B15                           GPIO_B_REG(GPIO_BASE_PTR,2,15)
  #define GPIO_PORT2_B16                           GPIO_B_REG(GPIO_BASE_PTR,2,16)
  #define GPIO_PORT2_B17                           GPIO_B_REG(GPIO_BASE_PTR,2,17)
  #define GPIO_PORT2_B18                           GPIO_B_REG(GPIO_BASE_PTR,2,18)
  #define GPIO_PORT2_B19                           GPIO_B_REG(GPIO_BASE_PTR,2,19)
  #define GPIO_PORT2_B20                           GPIO_B_REG(GPIO_BASE_PTR,2,20)
  #define GPIO_PORT2_B21                           GPIO_B_REG(GPIO_BASE_PTR,2,21)
  #define GPIO_PORT2_B22                           GPIO_B_REG(GPIO_BASE_PTR,2,22)
  #define GPIO_PORT2_B23                           GPIO_B_REG(GPIO_BASE_PTR,2,23)
  #define GPIO_PORT2_B24                           GPIO_B_REG(GPIO_BASE_PTR,2,24)
  #define GPIO_PORT2_B25                           GPIO_B_REG(GPIO_BASE_PTR,2,25)
  #define GPIO_PORT2_B26                           GPIO_B_REG(GPIO_BASE_PTR,2,26)
  #define GPIO_PORT2_B27                           GPIO_B_REG(GPIO_BASE_PTR,2,27)
  #define GPIO_PORT2_B28                           GPIO_B_REG(GPIO_BASE_PTR,2,28)
  #define GPIO_PORT2_B29                           GPIO_B_REG(GPIO_BASE_PTR,2,29)
  #define GPIO_PORT2_B30                           GPIO_B_REG(GPIO_BASE_PTR,2,30)
  #define GPIO_PORT2_B31                           GPIO_B_REG(GPIO_BASE_PTR,2,31)
  #define GPIO_PORT3_B0                            GPIO_B_REG(GPIO_BASE_PTR,3,0)
  #define GPIO_PORT3_B1                            GPIO_B_REG(GPIO_BASE_PTR,3,1)
  #define GPIO_PORT3_B2                            GPIO_B_REG(GPIO_BASE_PTR,3,2)
  #define GPIO_PORT3_B3                            GPIO_B_REG(GPIO_BASE_PTR,3,3)
  #define GPIO_PORT3_B4                            GPIO_B_REG(GPIO_BASE_PTR,3,4)
  #define GPIO_PORT3_B5                            GPIO_B_REG(GPIO_BASE_PTR,3,5)
  #define GPIO_PORT3_B6                            GPIO_B_REG(GPIO_BASE_PTR,3,6)
  #define GPIO_PORT3_B7                            GPIO_B_REG(GPIO_BASE_PTR,3,7)
  #define GPIO_PORT3_B8                            GPIO_B_REG(GPIO_BASE_PTR,3,8)
  #define GPIO_PORT3_B9                            GPIO_B_REG(GPIO_BASE_PTR,3,9)
  #define GPIO_PORT3_B10                           GPIO_B_REG(GPIO_BASE_PTR,3,10)
  #define GPIO_PORT3_B11                           GPIO_B_REG(GPIO_BASE_PTR,3,11)
  #define GPIO_PORT3_B12                           GPIO_B_REG(GPIO_BASE_PTR,3,12)
  #define GPIO_PORT3_B13                           GPIO_B_REG(GPIO_BASE_PTR,3,13)
  #define GPIO_PORT3_B14                           GPIO_B_REG(GPIO_BASE_PTR,3,14)
  #define GPIO_PORT3_B15                           GPIO_B_REG(GPIO_BASE_PTR,3,15)
  #define GPIO_PORT3_B16                           GPIO_B_REG(GPIO_BASE_PTR,3,16)
  #define GPIO_PORT3_B17                           GPIO_B_REG(GPIO_BASE_PTR,3,17)
  #define GPIO_PORT3_B18                           GPIO_B_REG(GPIO_BASE_PTR,3,18)
  #define GPIO_PORT3_B19                           GPIO_B_REG(GPIO_BASE_PTR,3,19)
  #define GPIO_PORT3_B20                           GPIO_B_REG(GPIO_BASE_PTR,3,20)
  #define GPIO_PORT3_B21                           GPIO_B_REG(GPIO_BASE_PTR,3,21)
  #define GPIO_PORT3_B22                           GPIO_B_REG(GPIO_BASE_PTR,3,22)
  #define GPIO_PORT3_B23                           GPIO_B_REG(GPIO_BASE_PTR,3,23)
  #define GPIO_PORT3_B24                           GPIO_B_REG(GPIO_BASE_PTR,3,24)
  #define GPIO_PORT3_B25                           GPIO_B_REG(GPIO_BASE_PTR,3,25)
  #define GPIO_PORT3_B26                           GPIO_B_REG(GPIO_BASE_PTR,3,26)
  #define GPIO_PORT3_B27                           GPIO_B_REG(GPIO_BASE_PTR,3,27)
  #define GPIO_PORT3_B28                           GPIO_B_REG(GPIO_BASE_PTR,3,28)
  #define GPIO_PORT3_B29                           GPIO_B_REG(GPIO_BASE_PTR,3,29)
  #define GPIO_PORT3_B30                           GPIO_B_REG(GPIO_BASE_PTR,3,30)
  #define GPIO_PORT3_B31                           GPIO_B_REG(GPIO_BASE_PTR,3,31)
  #define GPIO_PORT4_B0                            GPIO_B_REG(GPIO_BASE_PTR,4,0)
  #define GPIO_PORT4_B1                            GPIO_B_REG(GPIO_BASE_PTR,4,1)
  #define GPIO_PORT4_B2                            GPIO_B_REG(GPIO_BASE_PTR,4,2)
  #define GPIO_PORT4_B3                            GPIO_B_REG(GPIO_BASE_PTR,4,3)
  #define GPIO_PORT4_B4                            GPIO_B_REG(GPIO_BASE_PTR,4,4)
  #define GPIO_PORT4_B5                            GPIO_B_REG(GPIO_BASE_PTR,4,5)
  #define GPIO_PORT4_B6                            GPIO_B_REG(GPIO_BASE_PTR,4,6)
  #define GPIO_PORT4_B7                            GPIO_B_REG(GPIO_BASE_PTR,4,7)
  #define GPIO_PORT4_B8                            GPIO_B_REG(GPIO_BASE_PTR,4,8)
  #define GPIO_PORT4_B9                            GPIO_B_REG(GPIO_BASE_PTR,4,9)
  #define GPIO_PORT4_B10                           GPIO_B_REG(GPIO_BASE_PTR,4,10)
  #define GPIO_PORT4_B11                           GPIO_B_REG(GPIO_BASE_PTR,4,11)
  #define GPIO_PORT4_B12                           GPIO_B_REG(GPIO_BASE_PTR,4,12)
  #define GPIO_PORT4_B13                           GPIO_B_REG(GPIO_BASE_PTR,4,13)
  #define GPIO_PORT4_B14                           GPIO_B_REG(GPIO_BASE_PTR,4,14)
  #define GPIO_PORT4_B15                           GPIO_B_REG(GPIO_BASE_PTR,4,15)
  #define GPIO_PORT4_B16                           GPIO_B_REG(GPIO_BASE_PTR,4,16)
  #define GPIO_PORT4_B17                           GPIO_B_REG(GPIO_BASE_PTR,4,17)
  #define GPIO_PORT4_B18                           GPIO_B_REG(GPIO_BASE_PTR,4,18)
  #define GPIO_PORT4_B19                           GPIO_B_REG(GPIO_BASE_PTR,4,19)
  #define GPIO_PORT4_B20                           GPIO_B_REG(GPIO_BASE_PTR,4,20)
  #define GPIO_PORT4_B21                           GPIO_B_REG(GPIO_BASE_PTR,4,21)
  #define GPIO_PORT4_B22                           GPIO_B_REG(GPIO_BASE_PTR,4,22)
  #define GPIO_PORT4_B23                           GPIO_B_REG(GPIO_BASE_PTR,4,23)
  #define GPIO_PORT4_B24                           GPIO_B_REG(GPIO_BASE_PTR,4,24)
  #define GPIO_PORT4_B25                           GPIO_B_REG(GPIO_BASE_PTR,4,25)
  #define GPIO_PORT4_B26                           GPIO_B_REG(GPIO_BASE_PTR,4,26)
  #define GPIO_PORT4_B27                           GPIO_B_REG(GPIO_BASE_PTR,4,27)
  #define GPIO_PORT4_B28                           GPIO_B_REG(GPIO_BASE_PTR,4,28)
  #define GPIO_PORT4_B29                           GPIO_B_REG(GPIO_BASE_PTR,4,29)
  #define GPIO_PORT4_B30                           GPIO_B_REG(GPIO_BASE_PTR,4,30)
  #define GPIO_PORT4_B31                           GPIO_B_REG(GPIO_BASE_PTR,4,31)
  #define GPIO_PORT5_B0                            GPIO_B_REG(GPIO_BASE_PTR,5,0)
  #define GPIO_PORT5_B1                            GPIO_B_REG(GPIO_BASE_PTR,5,1)
  #define GPIO_PORT5_B2                            GPIO_B_REG(GPIO_BASE_PTR,5,2)
  #define GPIO_PORT5_B3                            GPIO_B_REG(GPIO_BASE_PTR,5,3)
  #define GPIO_PORT5_B4                            GPIO_B_REG(GPIO_BASE_PTR,5,4)
  #define GPIO_PORT5_B5                            GPIO_B_REG(GPIO_BASE_PTR,5,5)
  #define GPIO_PORT5_B6                            GPIO_B_REG(GPIO_BASE_PTR,5,6)
  #define GPIO_PORT5_B7                            GPIO_B_REG(GPIO_BASE_PTR,5,7)
  #define GPIO_PORT5_B8                            GPIO_B_REG(GPIO_BASE_PTR,5,8)
  #define GPIO_PORT5_B9                            GPIO_B_REG(GPIO_BASE_PTR,5,9)
  #define GPIO_PORT5_B10                           GPIO_B_REG(GPIO_BASE_PTR,5,10)
  #define GPIO_PORT5_B11                           GPIO_B_REG(GPIO_BASE_PTR,5,11)
  #define GPIO_PORT5_B12                           GPIO_B_REG(GPIO_BASE_PTR,5,12)
  #define GPIO_PORT5_B13                           GPIO_B_REG(GPIO_BASE_PTR,5,13)
  #define GPIO_PORT5_B14                           GPIO_B_REG(GPIO_BASE_PTR,5,14)
  #define GPIO_PORT5_B15                           GPIO_B_REG(GPIO_BASE_PTR,5,15)
  #define GPIO_PORT5_B16                           GPIO_B_REG(GPIO_BASE_PTR,5,16)
  #define GPIO_PORT5_B17                           GPIO_B_REG(GPIO_BASE_PTR,5,17)
  #define GPIO_PORT5_B18                           GPIO_B_REG(GPIO_BASE_PTR,5,18)
  #define GPIO_PORT5_B19                           GPIO_B_REG(GPIO_BASE_PTR,5,19)
  #define GPIO_PORT5_B20                           GPIO_B_REG(GPIO_BASE_PTR,5,20)
  #define GPIO_PORT5_B21                           GPIO_B_REG(GPIO_BASE_PTR,5,21)
  #define GPIO_PORT5_B22                           GPIO_B_REG(GPIO_BASE_PTR,5,22)
  #define GPIO_PORT5_B23                           GPIO_B_REG(GPIO_BASE_PTR,5,23)
  #define GPIO_PORT5_B24                           GPIO_B_REG(GPIO_BASE_PTR,5,24)
  #define GPIO_PORT5_B25                           GPIO_B_REG(GPIO_BASE_PTR,5,25)
  #define GPIO_PORT5_B26                           GPIO_B_REG(GPIO_BASE_PTR,5,26)
  #define GPIO_PORT5_B27                           GPIO_B_REG(GPIO_BASE_PTR,5,27)
  #define GPIO_PORT5_B28                           GPIO_B_REG(GPIO_BASE_PTR,5,28)
  #define GPIO_PORT5_B29                           GPIO_B_REG(GPIO_BASE_PTR,5,29)
  #define GPIO_PORT5_B30                           GPIO_B_REG(GPIO_BASE_PTR,5,30)
  #define GPIO_PORT5_B31                           GPIO_B_REG(GPIO_BASE_PTR,5,31)
  #define GPIO_PORT6_B0                            GPIO_B_REG(GPIO_BASE_PTR,6,0)
  #define GPIO_PORT6_B1                            GPIO_B_REG(GPIO_BASE_PTR,6,1)
  #define GPIO_PORT6_B2                            GPIO_B_REG(GPIO_BASE_PTR,6,2)
  #define GPIO_PORT6_B3                            GPIO_B_REG(GPIO_BASE_PTR,6,3)
  #define GPIO_PORT6_B4                            GPIO_B_REG(GPIO_BASE_PTR,6,4)
  #define GPIO_PORT6_B5                            GPIO_B_REG(GPIO_BASE_PTR,6,5)
  #define GPIO_PORT6_B6                            GPIO_B_REG(GPIO_BASE_PTR,6,6)
  #define GPIO_PORT6_B7                            GPIO_B_REG(GPIO_BASE_PTR,6,7)
  #define GPIO_PORT6_B8                            GPIO_B_REG(GPIO_BASE_PTR,6,8)
  #define GPIO_PORT6_B9                            GPIO_B_REG(GPIO_BASE_PTR,6,9)
  #define GPIO_PORT6_B10                           GPIO_B_REG(GPIO_BASE_PTR,6,10)
  #define GPIO_PORT6_B11                           GPIO_B_REG(GPIO_BASE_PTR,6,11)
  #define GPIO_PORT6_B12                           GPIO_B_REG(GPIO_BASE_PTR,6,12)
  #define GPIO_PORT6_B13                           GPIO_B_REG(GPIO_BASE_PTR,6,13)
  #define GPIO_PORT6_B14                           GPIO_B_REG(GPIO_BASE_PTR,6,14)
  #define GPIO_PORT6_B15                           GPIO_B_REG(GPIO_BASE_PTR,6,15)
  #define GPIO_PORT6_B16                           GPIO_B_REG(GPIO_BASE_PTR,6,16)
  #define GPIO_PORT6_B17                           GPIO_B_REG(GPIO_BASE_PTR,6,17)
  #define GPIO_PORT6_B18                           GPIO_B_REG(GPIO_BASE_PTR,6,18)
  #define GPIO_PORT6_B19                           GPIO_B_REG(GPIO_BASE_PTR,6,19)
  #define GPIO_PORT6_B20                           GPIO_B_REG(GPIO_BASE_PTR,6,20)
  #define GPIO_PORT6_B21                           GPIO_B_REG(GPIO_BASE_PTR,6,21)
  #define GPIO_PORT6_B22                           GPIO_B_REG(GPIO_BASE_PTR,6,22)
  #define GPIO_PORT6_B23                           GPIO_B_REG(GPIO_BASE_PTR,6,23)
  #define GPIO_PORT6_B24                           GPIO_B_REG(GPIO_BASE_PTR,6,24)
  #define GPIO_PORT6_B25                           GPIO_B_REG(GPIO_BASE_PTR,6,25)
  #define GPIO_PORT6_B26                           GPIO_B_REG(GPIO_BASE_PTR,6,26)
  #define GPIO_PORT6_B27                           GPIO_B_REG(GPIO_BASE_PTR,6,27)
  #define GPIO_PORT0_W0                            GPIO_W_REG(GPIO_BASE_PTR,0,0)
  #define GPIO_PORT0_W1                            GPIO_W_REG(GPIO_BASE_PTR,0,1)
  #define GPIO_PORT0_W2                            GPIO_W_REG(GPIO_BASE_PTR,0,2)
  #define GPIO_PORT0_W3                            GPIO_W_REG(GPIO_BASE_PTR,0,3)
  #define GPIO_PORT0_W4                            GPIO_W_REG(GPIO_BASE_PTR,0,4)
  #define GPIO_PORT0_W5                            GPIO_W_REG(GPIO_BASE_PTR,0,5)
  #define GPIO_PORT0_W6                            GPIO_W_REG(GPIO_BASE_PTR,0,6)
  #define GPIO_PORT0_W7                            GPIO_W_REG(GPIO_BASE_PTR,0,7)
  #define GPIO_PORT0_W8                            GPIO_W_REG(GPIO_BASE_PTR,0,8)
  #define GPIO_PORT0_W9                            GPIO_W_REG(GPIO_BASE_PTR,0,9)
  #define GPIO_PORT0_W10                           GPIO_W_REG(GPIO_BASE_PTR,0,10)
  #define GPIO_PORT0_W11                           GPIO_W_REG(GPIO_BASE_PTR,0,11)
  #define GPIO_PORT0_W12                           GPIO_W_REG(GPIO_BASE_PTR,0,12)
  #define GPIO_PORT0_W13                           GPIO_W_REG(GPIO_BASE_PTR,0,13)
  #define GPIO_PORT0_W14                           GPIO_W_REG(GPIO_BASE_PTR,0,14)
  #define GPIO_PORT0_W15                           GPIO_W_REG(GPIO_BASE_PTR,0,15)
  #define GPIO_PORT0_W16                           GPIO_W_REG(GPIO_BASE_PTR,0,16)
  #define GPIO_PORT0_W17                           GPIO_W_REG(GPIO_BASE_PTR,0,17)
  #define GPIO_PORT0_W18                           GPIO_W_REG(GPIO_BASE_PTR,0,18)
  #define GPIO_PORT0_W19                           GPIO_W_REG(GPIO_BASE_PTR,0,19)
  #define GPIO_PORT0_W20                           GPIO_W_REG(GPIO_BASE_PTR,0,20)
  #define GPIO_PORT0_W21                           GPIO_W_REG(GPIO_BASE_PTR,0,21)
  #define GPIO_PORT0_W22                           GPIO_W_REG(GPIO_BASE_PTR,0,22)
  #define GPIO_PORT0_W23                           GPIO_W_REG(GPIO_BASE_PTR,0,23)
  #define GPIO_PORT0_W24                           GPIO_W_REG(GPIO_BASE_PTR,0,24)
  #define GPIO_PORT0_W25                           GPIO_W_REG(GPIO_BASE_PTR,0,25)
  #define GPIO_PORT0_W26                           GPIO_W_REG(GPIO_BASE_PTR,0,26)
  #define GPIO_PORT0_W27                           GPIO_W_REG(GPIO_BASE_PTR,0,27)
  #define GPIO_PORT0_W28                           GPIO_W_REG(GPIO_BASE_PTR,0,28)
  #define GPIO_PORT0_W29                           GPIO_W_REG(GPIO_BASE_PTR,0,29)
  #define GPIO_PORT0_W30                           GPIO_W_REG(GPIO_BASE_PTR,0,30)
  #define GPIO_PORT0_W31                           GPIO_W_REG(GPIO_BASE_PTR,0,31)
  #define GPIO_PORT1_W0                            GPIO_W_REG(GPIO_BASE_PTR,1,0)
  #define GPIO_PORT1_W1                            GPIO_W_REG(GPIO_BASE_PTR,1,1)
  #define GPIO_PORT1_W2                            GPIO_W_REG(GPIO_BASE_PTR,1,2)
  #define GPIO_PORT1_W3                            GPIO_W_REG(GPIO_BASE_PTR,1,3)
  #define GPIO_PORT1_W4                            GPIO_W_REG(GPIO_BASE_PTR,1,4)
  #define GPIO_PORT1_W5                            GPIO_W_REG(GPIO_BASE_PTR,1,5)
  #define GPIO_PORT1_W6                            GPIO_W_REG(GPIO_BASE_PTR,1,6)
  #define GPIO_PORT1_W7                            GPIO_W_REG(GPIO_BASE_PTR,1,7)
  #define GPIO_PORT1_W8                            GPIO_W_REG(GPIO_BASE_PTR,1,8)
  #define GPIO_PORT1_W9                            GPIO_W_REG(GPIO_BASE_PTR,1,9)
  #define GPIO_PORT1_W10                           GPIO_W_REG(GPIO_BASE_PTR,1,10)
  #define GPIO_PORT1_W11                           GPIO_W_REG(GPIO_BASE_PTR,1,11)
  #define GPIO_PORT1_W12                           GPIO_W_REG(GPIO_BASE_PTR,1,12)
  #define GPIO_PORT1_W13                           GPIO_W_REG(GPIO_BASE_PTR,1,13)
  #define GPIO_PORT1_W14                           GPIO_W_REG(GPIO_BASE_PTR,1,14)
  #define GPIO_PORT1_W15                           GPIO_W_REG(GPIO_BASE_PTR,1,15)
  #define GPIO_PORT1_W16                           GPIO_W_REG(GPIO_BASE_PTR,1,16)
  #define GPIO_PORT1_W17                           GPIO_W_REG(GPIO_BASE_PTR,1,17)
  #define GPIO_PORT1_W18                           GPIO_W_REG(GPIO_BASE_PTR,1,18)
  #define GPIO_PORT1_W19                           GPIO_W_REG(GPIO_BASE_PTR,1,19)
  #define GPIO_PORT1_W20                           GPIO_W_REG(GPIO_BASE_PTR,1,20)
  #define GPIO_PORT1_W21                           GPIO_W_REG(GPIO_BASE_PTR,1,21)
  #define GPIO_PORT1_W22                           GPIO_W_REG(GPIO_BASE_PTR,1,22)
  #define GPIO_PORT1_W23                           GPIO_W_REG(GPIO_BASE_PTR,1,23)
  #define GPIO_PORT1_W24                           GPIO_W_REG(GPIO_BASE_PTR,1,24)
  #define GPIO_PORT1_W25                           GPIO_W_REG(GPIO_BASE_PTR,1,25)
  #define GPIO_PORT1_W26                           GPIO_W_REG(GPIO_BASE_PTR,1,26)
  #define GPIO_PORT1_W27                           GPIO_W_REG(GPIO_BASE_PTR,1,27)
  #define GPIO_PORT1_W28                           GPIO_W_REG(GPIO_BASE_PTR,1,28)
  #define GPIO_PORT1_W29                           GPIO_W_REG(GPIO_BASE_PTR,1,29)
  #define GPIO_PORT1_W30                           GPIO_W_REG(GPIO_BASE_PTR,1,30)
  #define GPIO_PORT1_W31                           GPIO_W_REG(GPIO_BASE_PTR,1,31)
  #define GPIO_PORT2_W0                            GPIO_W_REG(GPIO_BASE_PTR,2,0)
  #define GPIO_PORT2_W1                            GPIO_W_REG(GPIO_BASE_PTR,2,1)
  #define GPIO_PORT2_W2                            GPIO_W_REG(GPIO_BASE_PTR,2,2)
  #define GPIO_PORT2_W3                            GPIO_W_REG(GPIO_BASE_PTR,2,3)
  #define GPIO_PORT2_W4                            GPIO_W_REG(GPIO_BASE_PTR,2,4)
  #define GPIO_PORT2_W5                            GPIO_W_REG(GPIO_BASE_PTR,2,5)
  #define GPIO_PORT2_W6                            GPIO_W_REG(GPIO_BASE_PTR,2,6)
  #define GPIO_PORT2_W7                            GPIO_W_REG(GPIO_BASE_PTR,2,7)
  #define GPIO_PORT2_W8                            GPIO_W_REG(GPIO_BASE_PTR,2,8)
  #define GPIO_PORT2_W9                            GPIO_W_REG(GPIO_BASE_PTR,2,9)
  #define GPIO_PORT2_W10                           GPIO_W_REG(GPIO_BASE_PTR,2,10)
  #define GPIO_PORT2_W11                           GPIO_W_REG(GPIO_BASE_PTR,2,11)
  #define GPIO_PORT2_W12                           GPIO_W_REG(GPIO_BASE_PTR,2,12)
  #define GPIO_PORT2_W13                           GPIO_W_REG(GPIO_BASE_PTR,2,13)
  #define GPIO_PORT2_W14                           GPIO_W_REG(GPIO_BASE_PTR,2,14)
  #define GPIO_PORT2_W15                           GPIO_W_REG(GPIO_BASE_PTR,2,15)
  #define GPIO_PORT2_W16                           GPIO_W_REG(GPIO_BASE_PTR,2,16)
  #define GPIO_PORT2_W17                           GPIO_W_REG(GPIO_BASE_PTR,2,17)
  #define GPIO_PORT2_W18                           GPIO_W_REG(GPIO_BASE_PTR,2,18)
  #define GPIO_PORT2_W19                           GPIO_W_REG(GPIO_BASE_PTR,2,19)
  #define GPIO_PORT2_W20                           GPIO_W_REG(GPIO_BASE_PTR,2,20)
  #define GPIO_PORT2_W21                           GPIO_W_REG(GPIO_BASE_PTR,2,21)
  #define GPIO_PORT2_W22                           GPIO_W_REG(GPIO_BASE_PTR,2,22)
  #define GPIO_PORT2_W23                           GPIO_W_REG(GPIO_BASE_PTR,2,23)
  #define GPIO_PORT2_W24                           GPIO_W_REG(GPIO_BASE_PTR,2,24)
  #define GPIO_PORT2_W25                           GPIO_W_REG(GPIO_BASE_PTR,2,25)
  #define GPIO_PORT2_W26                           GPIO_W_REG(GPIO_BASE_PTR,2,26)
  #define GPIO_PORT2_W27                           GPIO_W_REG(GPIO_BASE_PTR,2,27)
  #define GPIO_PORT2_W28                           GPIO_W_REG(GPIO_BASE_PTR,2,28)
  #define GPIO_PORT2_W29                           GPIO_W_REG(GPIO_BASE_PTR,2,29)
  #define GPIO_PORT2_W30                           GPIO_W_REG(GPIO_BASE_PTR,2,30)
  #define GPIO_PORT2_W31                           GPIO_W_REG(GPIO_BASE_PTR,2,31)
  #define GPIO_PORT3_W0                            GPIO_W_REG(GPIO_BASE_PTR,3,0)
  #define GPIO_PORT3_W1                            GPIO_W_REG(GPIO_BASE_PTR,3,1)
  #define GPIO_PORT3_W2                            GPIO_W_REG(GPIO_BASE_PTR,3,2)
  #define GPIO_PORT3_W3                            GPIO_W_REG(GPIO_BASE_PTR,3,3)
  #define GPIO_PORT3_W4                            GPIO_W_REG(GPIO_BASE_PTR,3,4)
  #define GPIO_PORT3_W5                            GPIO_W_REG(GPIO_BASE_PTR,3,5)
  #define GPIO_PORT3_W6                            GPIO_W_REG(GPIO_BASE_PTR,3,6)
  #define GPIO_PORT3_W7                            GPIO_W_REG(GPIO_BASE_PTR,3,7)
  #define GPIO_PORT3_W8                            GPIO_W_REG(GPIO_BASE_PTR,3,8)
  #define GPIO_PORT3_W9                            GPIO_W_REG(GPIO_BASE_PTR,3,9)
  #define GPIO_PORT3_W10                           GPIO_W_REG(GPIO_BASE_PTR,3,10)
  #define GPIO_PORT3_W11                           GPIO_W_REG(GPIO_BASE_PTR,3,11)
  #define GPIO_PORT3_W12                           GPIO_W_REG(GPIO_BASE_PTR,3,12)
  #define GPIO_PORT3_W13                           GPIO_W_REG(GPIO_BASE_PTR,3,13)
  #define GPIO_PORT3_W14                           GPIO_W_REG(GPIO_BASE_PTR,3,14)
  #define GPIO_PORT3_W15                           GPIO_W_REG(GPIO_BASE_PTR,3,15)
  #define GPIO_PORT3_W16                           GPIO_W_REG(GPIO_BASE_PTR,3,16)
  #define GPIO_PORT3_W17                           GPIO_W_REG(GPIO_BASE_PTR,3,17)
  #define GPIO_PORT3_W18                           GPIO_W_REG(GPIO_BASE_PTR,3,18)
  #define GPIO_PORT3_W19                           GPIO_W_REG(GPIO_BASE_PTR,3,19)
  #define GPIO_PORT3_W20                           GPIO_W_REG(GPIO_BASE_PTR,3,20)
  #define GPIO_PORT3_W21                           GPIO_W_REG(GPIO_BASE_PTR,3,21)
  #define GPIO_PORT3_W22                           GPIO_W_REG(GPIO_BASE_PTR,3,22)
  #define GPIO_PORT3_W23                           GPIO_W_REG(GPIO_BASE_PTR,3,23)
  #define GPIO_PORT3_W24                           GPIO_W_REG(GPIO_BASE_PTR,3,24)
  #define GPIO_PORT3_W25                           GPIO_W_REG(GPIO_BASE_PTR,3,25)
  #define GPIO_PORT3_W26                           GPIO_W_REG(GPIO_BASE_PTR,3,26)
  #define GPIO_PORT3_W27                           GPIO_W_REG(GPIO_BASE_PTR,3,27)
  #define GPIO_PORT3_W28                           GPIO_W_REG(GPIO_BASE_PTR,3,28)
  #define GPIO_PORT3_W29                           GPIO_W_REG(GPIO_BASE_PTR,3,29)
  #define GPIO_PORT3_W30                           GPIO_W_REG(GPIO_BASE_PTR,3,30)
  #define GPIO_PORT3_W31                           GPIO_W_REG(GPIO_BASE_PTR,3,31)
  #define GPIO_PORT4_W0                            GPIO_W_REG(GPIO_BASE_PTR,4,0)
  #define GPIO_PORT4_W1                            GPIO_W_REG(GPIO_BASE_PTR,4,1)
  #define GPIO_PORT4_W2                            GPIO_W_REG(GPIO_BASE_PTR,4,2)
  #define GPIO_PORT4_W3                            GPIO_W_REG(GPIO_BASE_PTR,4,3)
  #define GPIO_PORT4_W4                            GPIO_W_REG(GPIO_BASE_PTR,4,4)
  #define GPIO_PORT4_W5                            GPIO_W_REG(GPIO_BASE_PTR,4,5)
  #define GPIO_PORT4_W6                            GPIO_W_REG(GPIO_BASE_PTR,4,6)
  #define GPIO_PORT4_W7                            GPIO_W_REG(GPIO_BASE_PTR,4,7)
  #define GPIO_PORT4_W8                            GPIO_W_REG(GPIO_BASE_PTR,4,8)
  #define GPIO_PORT4_W9                            GPIO_W_REG(GPIO_BASE_PTR,4,9)
  #define GPIO_PORT4_W10                           GPIO_W_REG(GPIO_BASE_PTR,4,10)
  #define GPIO_PORT4_W11                           GPIO_W_REG(GPIO_BASE_PTR,4,11)
  #define GPIO_PORT4_W12                           GPIO_W_REG(GPIO_BASE_PTR,4,12)
  #define GPIO_PORT4_W13                           GPIO_W_REG(GPIO_BASE_PTR,4,13)
  #define GPIO_PORT4_W14                           GPIO_W_REG(GPIO_BASE_PTR,4,14)
  #define GPIO_PORT4_W15                           GPIO_W_REG(GPIO_BASE_PTR,4,15)
  #define GPIO_PORT4_W16                           GPIO_W_REG(GPIO_BASE_PTR,4,16)
  #define GPIO_PORT4_W17                           GPIO_W_REG(GPIO_BASE_PTR,4,17)
  #define GPIO_PORT4_W18                           GPIO_W_REG(GPIO_BASE_PTR,4,18)
  #define GPIO_PORT4_W19                           GPIO_W_REG(GPIO_BASE_PTR,4,19)
  #define GPIO_PORT4_W20                           GPIO_W_REG(GPIO_BASE_PTR,4,20)
  #define GPIO_PORT4_W21                           GPIO_W_REG(GPIO_BASE_PTR,4,21)
  #define GPIO_PORT4_W22                           GPIO_W_REG(GPIO_BASE_PTR,4,22)
  #define GPIO_PORT4_W23                           GPIO_W_REG(GPIO_BASE_PTR,4,23)
  #define GPIO_PORT4_W24                           GPIO_W_REG(GPIO_BASE_PTR,4,24)
  #define GPIO_PORT4_W25                           GPIO_W_REG(GPIO_BASE_PTR,4,25)
  #define GPIO_PORT4_W26                           GPIO_W_REG(GPIO_BASE_PTR,4,26)
  #define GPIO_PORT4_W27                           GPIO_W_REG(GPIO_BASE_PTR,4,27)
  #define GPIO_PORT4_W28                           GPIO_W_REG(GPIO_BASE_PTR,4,28)
  #define GPIO_PORT4_W29                           GPIO_W_REG(GPIO_BASE_PTR,4,29)
  #define GPIO_PORT4_W30                           GPIO_W_REG(GPIO_BASE_PTR,4,30)
  #define GPIO_PORT4_W31                           GPIO_W_REG(GPIO_BASE_PTR,4,31)
  #define GPIO_PORT5_W0                            GPIO_W_REG(GPIO_BASE_PTR,5,0)
  #define GPIO_PORT5_W1                            GPIO_W_REG(GPIO_BASE_PTR,5,1)
  #define GPIO_PORT5_W2                            GPIO_W_REG(GPIO_BASE_PTR,5,2)
  #define GPIO_PORT5_W3                            GPIO_W_REG(GPIO_BASE_PTR,5,3)
  #define GPIO_PORT5_W4                            GPIO_W_REG(GPIO_BASE_PTR,5,4)
  #define GPIO_PORT5_W5                            GPIO_W_REG(GPIO_BASE_PTR,5,5)
  #define GPIO_PORT5_W6                            GPIO_W_REG(GPIO_BASE_PTR,5,6)
  #define GPIO_PORT5_W7                            GPIO_W_REG(GPIO_BASE_PTR,5,7)
  #define GPIO_PORT5_W8                            GPIO_W_REG(GPIO_BASE_PTR,5,8)
  #define GPIO_PORT5_W9                            GPIO_W_REG(GPIO_BASE_PTR,5,9)
  #define GPIO_PORT5_W10                           GPIO_W_REG(GPIO_BASE_PTR,5,10)
  #define GPIO_PORT5_W11                           GPIO_W_REG(GPIO_BASE_PTR,5,11)
  #define GPIO_PORT5_W12                           GPIO_W_REG(GPIO_BASE_PTR,5,12)
  #define GPIO_PORT5_W13                           GPIO_W_REG(GPIO_BASE_PTR,5,13)
  #define GPIO_PORT5_W14                           GPIO_W_REG(GPIO_BASE_PTR,5,14)
  #define GPIO_PORT5_W15                           GPIO_W_REG(GPIO_BASE_PTR,5,15)
  #define GPIO_PORT5_W16                           GPIO_W_REG(GPIO_BASE_PTR,5,16)
  #define GPIO_PORT5_W17                           GPIO_W_REG(GPIO_BASE_PTR,5,17)
  #define GPIO_PORT5_W18                           GPIO_W_REG(GPIO_BASE_PTR,5,18)
  #define GPIO_PORT5_W19                           GPIO_W_REG(GPIO_BASE_PTR,5,19)
  #define GPIO_PORT5_W20                           GPIO_W_REG(GPIO_BASE_PTR,5,20)
  #define GPIO_PORT5_W21                           GPIO_W_REG(GPIO_BASE_PTR,5,21)
  #define GPIO_PORT5_W22                           GPIO_W_REG(GPIO_BASE_PTR,5,22)
  #define GPIO_PORT5_W23                           GPIO_W_REG(GPIO_BASE_PTR,5,23)
  #define GPIO_PORT5_W24                           GPIO_W_REG(GPIO_BASE_PTR,5,24)
  #define GPIO_PORT5_W25                           GPIO_W_REG(GPIO_BASE_PTR,5,25)
  #define GPIO_PORT5_W26                           GPIO_W_REG(GPIO_BASE_PTR,5,26)
  #define GPIO_PORT5_W27                           GPIO_W_REG(GPIO_BASE_PTR,5,27)
  #define GPIO_PORT5_W28                           GPIO_W_REG(GPIO_BASE_PTR,5,28)
  #define GPIO_PORT5_W29                           GPIO_W_REG(GPIO_BASE_PTR,5,29)
  #define GPIO_PORT5_W30                           GPIO_W_REG(GPIO_BASE_PTR,5,30)
  #define GPIO_PORT5_W31                           GPIO_W_REG(GPIO_BASE_PTR,5,31)
  #define GPIO_PORT6_W0                            GPIO_W_REG(GPIO_BASE_PTR,6,0)
  #define GPIO_PORT6_W1                            GPIO_W_REG(GPIO_BASE_PTR,6,1)
  #define GPIO_PORT6_W2                            GPIO_W_REG(GPIO_BASE_PTR,6,2)
  #define GPIO_PORT6_W3                            GPIO_W_REG(GPIO_BASE_PTR,6,3)
  #define GPIO_PORT6_W4                            GPIO_W_REG(GPIO_BASE_PTR,6,4)
  #define GPIO_PORT6_W5                            GPIO_W_REG(GPIO_BASE_PTR,6,5)
  #define GPIO_PORT6_W6                            GPIO_W_REG(GPIO_BASE_PTR,6,6)
  #define GPIO_PORT6_W7                            GPIO_W_REG(GPIO_BASE_PTR,6,7)
  #define GPIO_PORT6_W8                            GPIO_W_REG(GPIO_BASE_PTR,6,8)
  #define GPIO_PORT6_W9                            GPIO_W_REG(GPIO_BASE_PTR,6,9)
  #define GPIO_PORT6_W10                           GPIO_W_REG(GPIO_BASE_PTR,6,10)
  #define GPIO_PORT6_W11                           GPIO_W_REG(GPIO_BASE_PTR,6,11)
  #define GPIO_PORT6_W12                           GPIO_W_REG(GPIO_BASE_PTR,6,12)
  #define GPIO_PORT6_W13                           GPIO_W_REG(GPIO_BASE_PTR,6,13)
  #define GPIO_PORT6_W14                           GPIO_W_REG(GPIO_BASE_PTR,6,14)
  #define GPIO_PORT6_W15                           GPIO_W_REG(GPIO_BASE_PTR,6,15)
  #define GPIO_PORT6_W16                           GPIO_W_REG(GPIO_BASE_PTR,6,16)
  #define GPIO_PORT6_W17                           GPIO_W_REG(GPIO_BASE_PTR,6,17)
  #define GPIO_PORT6_W18                           GPIO_W_REG(GPIO_BASE_PTR,6,18)
  #define GPIO_PORT6_W19                           GPIO_W_REG(GPIO_BASE_PTR,6,19)
  #define GPIO_PORT6_W20                           GPIO_W_REG(GPIO_BASE_PTR,6,20)
  #define GPIO_PORT6_W21                           GPIO_W_REG(GPIO_BASE_PTR,6,21)
  #define GPIO_PORT6_W22                           GPIO_W_REG(GPIO_BASE_PTR,6,22)
  #define GPIO_PORT6_W23                           GPIO_W_REG(GPIO_BASE_PTR,6,23)
  #define GPIO_PORT6_W24                           GPIO_W_REG(GPIO_BASE_PTR,6,24)
  #define GPIO_PORT6_W25                           GPIO_W_REG(GPIO_BASE_PTR,6,25)
  #define GPIO_PORT6_W26                           GPIO_W_REG(GPIO_BASE_PTR,6,26)
  #define GPIO_PORT6_W27                           GPIO_W_REG(GPIO_BASE_PTR,6,27)
  #define GPIO_DIR0                                GPIO_DIR_REG(GPIO_BASE_PTR,0)
  #define GPIO_DIR1                                GPIO_DIR_REG(GPIO_BASE_PTR,1)
  #define GPIO_DIR2                                GPIO_DIR_REG(GPIO_BASE_PTR,2)
  #define GPIO_DIR3                                GPIO_DIR_REG(GPIO_BASE_PTR,3)
  #define GPIO_DIR4                                GPIO_DIR_REG(GPIO_BASE_PTR,4)
  #define GPIO_DIR5                                GPIO_DIR_REG(GPIO_BASE_PTR,5)
  #define GPIO_DIR6                                GPIO_DIR_REG(GPIO_BASE_PTR,6)
  #define GPIO_DIR7                                GPIO_DIR_REG(GPIO_BASE_PTR,7)
  #define GPIO_MASK0                               GPIO_MASK_REG(GPIO_BASE_PTR,0)
  #define GPIO_MASK1                               GPIO_MASK_REG(GPIO_BASE_PTR,1)
  #define GPIO_MASK2                               GPIO_MASK_REG(GPIO_BASE_PTR,2)
  #define GPIO_MASK3                               GPIO_MASK_REG(GPIO_BASE_PTR,3)
  #define GPIO_MASK4                               GPIO_MASK_REG(GPIO_BASE_PTR,4)
  #define GPIO_MASK5                               GPIO_MASK_REG(GPIO_BASE_PTR,5)
  #define GPIO_MASK6                               GPIO_MASK_REG(GPIO_BASE_PTR,6)
  #define GPIO_MASK7                               GPIO_MASK_REG(GPIO_BASE_PTR,7)
  #define GPIO_PIN0                                GPIO_PIN_REG(GPIO_BASE_PTR,0)
  #define GPIO_PIN1                                GPIO_PIN_REG(GPIO_BASE_PTR,1)
  #define GPIO_PIN2                                GPIO_PIN_REG(GPIO_BASE_PTR,2)
  #define GPIO_PIN3                                GPIO_PIN_REG(GPIO_BASE_PTR,3)
  #define GPIO_PIN4                                GPIO_PIN_REG(GPIO_BASE_PTR,4)
  #define GPIO_PIN5                                GPIO_PIN_REG(GPIO_BASE_PTR,5)
  #define GPIO_PIN6                                GPIO_PIN_REG(GPIO_BASE_PTR,6)
  #define GPIO_PIN7                                GPIO_PIN_REG(GPIO_BASE_PTR,7)
  #define GPIO_MPIN0                               GPIO_MPIN_REG(GPIO_BASE_PTR,0)
  #define GPIO_MPIN1                               GPIO_MPIN_REG(GPIO_BASE_PTR,1)
  #define GPIO_MPIN2                               GPIO_MPIN_REG(GPIO_BASE_PTR,2)
  #define GPIO_MPIN3                               GPIO_MPIN_REG(GPIO_BASE_PTR,3)
  #define GPIO_MPIN4                               GPIO_MPIN_REG(GPIO_BASE_PTR,4)
  #define GPIO_MPIN5                               GPIO_MPIN_REG(GPIO_BASE_PTR,5)
  #define GPIO_MPIN6                               GPIO_MPIN_REG(GPIO_BASE_PTR,6)
  #define GPIO_MPIN7                               GPIO_MPIN_REG(GPIO_BASE_PTR,7)
  #define GPIO_SET0                                GPIO_SET_REG(GPIO_BASE_PTR,0)
  #define GPIO_SET1                                GPIO_SET_REG(GPIO_BASE_PTR,1)
  #define GPIO_SET2                                GPIO_SET_REG(GPIO_BASE_PTR,2)
  #define GPIO_SET3                                GPIO_SET_REG(GPIO_BASE_PTR,3)
  #define GPIO_SET4                                GPIO_SET_REG(GPIO_BASE_PTR,4)
  #define GPIO_SET5                                GPIO_SET_REG(GPIO_BASE_PTR,5)
  #define GPIO_SET6                                GPIO_SET_REG(GPIO_BASE_PTR,6)
  #define GPIO_SET7                                GPIO_SET_REG(GPIO_BASE_PTR,7)
  #define GPIO_CLR0                                GPIO_CLR_REG(GPIO_BASE_PTR,0)
  #define GPIO_CLR1                                GPIO_CLR_REG(GPIO_BASE_PTR,1)
  #define GPIO_CLR2                                GPIO_CLR_REG(GPIO_BASE_PTR,2)
  #define GPIO_CLR3                                GPIO_CLR_REG(GPIO_BASE_PTR,3)
  #define GPIO_CLR4                                GPIO_CLR_REG(GPIO_BASE_PTR,4)
  #define GPIO_CLR5                                GPIO_CLR_REG(GPIO_BASE_PTR,5)
  #define GPIO_CLR6                                GPIO_CLR_REG(GPIO_BASE_PTR,6)
  #define GPIO_CLR7                                GPIO_CLR_REG(GPIO_BASE_PTR,7)
  #define GPIO_NOT0                                GPIO_NOT_REG(GPIO_BASE_PTR,0)
  #define GPIO_NOT1                                GPIO_NOT_REG(GPIO_BASE_PTR,1)
  #define GPIO_NOT2                                GPIO_NOT_REG(GPIO_BASE_PTR,2)
  #define GPIO_NOT3                                GPIO_NOT_REG(GPIO_BASE_PTR,3)
  #define GPIO_NOT4                                GPIO_NOT_REG(GPIO_BASE_PTR,4)
  #define GPIO_NOT5                                GPIO_NOT_REG(GPIO_BASE_PTR,5)
  #define GPIO_NOT6                                GPIO_NOT_REG(GPIO_BASE_PTR,6)
  #define GPIO_NOT7                                GPIO_NOT_REG(GPIO_BASE_PTR,7)
  #define GPIO_DIRSET0                             GPIO_DIRSET_REG(GPIO_BASE_PTR,0)
  #define GPIO_DIRSET1                             GPIO_DIRSET_REG(GPIO_BASE_PTR,1)
  #define GPIO_DIRSET2                             GPIO_DIRSET_REG(GPIO_BASE_PTR,2)
  #define GPIO_DIRSET3                             GPIO_DIRSET_REG(GPIO_BASE_PTR,3)
  #define GPIO_DIRSET4                             GPIO_DIRSET_REG(GPIO_BASE_PTR,4)
  #define GPIO_DIRSET5                             GPIO_DIRSET_REG(GPIO_BASE_PTR,5)
  #define GPIO_DIRSET6                             GPIO_DIRSET_REG(GPIO_BASE_PTR,6)
  #define GPIO_DIRSET7                             GPIO_DIRSET_REG(GPIO_BASE_PTR,7)
  #define GPIO_DIRCLR0                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,0)
  #define GPIO_DIRCLR1                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,1)
  #define GPIO_DIRCLR2                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,2)
  #define GPIO_DIRCLR3                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,3)
  #define GPIO_DIRCLR4                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,4)
  #define GPIO_DIRCLR5                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,5)
  #define GPIO_DIRCLR6                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,6)
  #define GPIO_DIRCLR7                             GPIO_DIRCLR_REG(GPIO_BASE_PTR,7)
  #define GPIO_DIRNOT0                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,0)
  #define GPIO_DIRNOT1                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,1)
  #define GPIO_DIRNOT2                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,2)
  #define GPIO_DIRNOT3                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,3)
  #define GPIO_DIRNOT4                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,4)
  #define GPIO_DIRNOT5                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,5)
  #define GPIO_DIRNOT6                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,6)
  #define GPIO_DIRNOT7                             GPIO_DIRNOT_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTENA0                             GPIO_INTENA_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTENA1                             GPIO_INTENA_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTENA2                             GPIO_INTENA_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTENA3                             GPIO_INTENA_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTENA4                             GPIO_INTENA_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTENA5                             GPIO_INTENA_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTENA6                             GPIO_INTENA_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTENA7                             GPIO_INTENA_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTENB0                             GPIO_INTENB_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTENB1                             GPIO_INTENB_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTENB2                             GPIO_INTENB_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTENB3                             GPIO_INTENB_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTENB4                             GPIO_INTENB_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTENB5                             GPIO_INTENB_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTENB6                             GPIO_INTENB_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTENB7                             GPIO_INTENB_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTPOL0                             GPIO_INTPOL_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTPOL1                             GPIO_INTPOL_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTPOL2                             GPIO_INTPOL_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTPOL3                             GPIO_INTPOL_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTPOL4                             GPIO_INTPOL_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTPOL5                             GPIO_INTPOL_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTPOL6                             GPIO_INTPOL_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTPOL7                             GPIO_INTPOL_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTEDG0                             GPIO_INTEDG_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTEDG1                             GPIO_INTEDG_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTEDG2                             GPIO_INTEDG_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTEDG3                             GPIO_INTEDG_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTEDG4                             GPIO_INTEDG_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTEDG5                             GPIO_INTEDG_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTEDG6                             GPIO_INTEDG_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTEDG7                             GPIO_INTEDG_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTSTATA0                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTSTATA1                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTSTATA2                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTSTATA3                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTSTATA4                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTSTATA5                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTSTATA6                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTSTATA7                           GPIO_INTSTATA_REG(GPIO_BASE_PTR,7)
  #define GPIO_INTSTATB0                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,0)
  #define GPIO_INTSTATB1                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,1)
  #define GPIO_INTSTATB2                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,2)
  #define GPIO_INTSTATB3                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,3)
  #define GPIO_INTSTATB4                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,4)
  #define GPIO_INTSTATB5                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,5)
  #define GPIO_INTSTATB6                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,6)
  #define GPIO_INTSTATB7                           GPIO_INTSTATB_REG(GPIO_BASE_PTR,7)
  /* SECGPIO */
  #define SECGPIO_PORT0_B0                         GPIO_B_REG(SECGPIO_BASE_PTR,0,0)
  #define SECGPIO_PORT0_B1                         GPIO_B_REG(SECGPIO_BASE_PTR,0,1)
  #define SECGPIO_PORT0_B2                         GPIO_B_REG(SECGPIO_BASE_PTR,0,2)
  #define SECGPIO_PORT0_B3                         GPIO_B_REG(SECGPIO_BASE_PTR,0,3)
  #define SECGPIO_PORT0_B4                         GPIO_B_REG(SECGPIO_BASE_PTR,0,4)
  #define SECGPIO_PORT0_B5                         GPIO_B_REG(SECGPIO_BASE_PTR,0,5)
  #define SECGPIO_PORT0_B6                         GPIO_B_REG(SECGPIO_BASE_PTR,0,6)
  #define SECGPIO_PORT0_B7                         GPIO_B_REG(SECGPIO_BASE_PTR,0,7)
  #define SECGPIO_PORT0_B8                         GPIO_B_REG(SECGPIO_BASE_PTR,0,8)
  #define SECGPIO_PORT0_B9                         GPIO_B_REG(SECGPIO_BASE_PTR,0,9)
  #define SECGPIO_PORT0_B10                        GPIO_B_REG(SECGPIO_BASE_PTR,0,10)
  #define SECGPIO_PORT0_B11                        GPIO_B_REG(SECGPIO_BASE_PTR,0,11)
  #define SECGPIO_PORT0_B12                        GPIO_B_REG(SECGPIO_BASE_PTR,0,12)
  #define SECGPIO_PORT0_B13                        GPIO_B_REG(SECGPIO_BASE_PTR,0,13)
  #define SECGPIO_PORT0_B14                        GPIO_B_REG(SECGPIO_BASE_PTR,0,14)
  #define SECGPIO_PORT0_B15                        GPIO_B_REG(SECGPIO_BASE_PTR,0,15)
  #define SECGPIO_PORT0_B16                        GPIO_B_REG(SECGPIO_BASE_PTR,0,16)
  #define SECGPIO_PORT0_B17                        GPIO_B_REG(SECGPIO_BASE_PTR,0,17)
  #define SECGPIO_PORT0_B18                        GPIO_B_REG(SECGPIO_BASE_PTR,0,18)
  #define SECGPIO_PORT0_B19                        GPIO_B_REG(SECGPIO_BASE_PTR,0,19)
  #define SECGPIO_PORT0_B20                        GPIO_B_REG(SECGPIO_BASE_PTR,0,20)
  #define SECGPIO_PORT0_B21                        GPIO_B_REG(SECGPIO_BASE_PTR,0,21)
  #define SECGPIO_PORT0_B22                        GPIO_B_REG(SECGPIO_BASE_PTR,0,22)
  #define SECGPIO_PORT0_B23                        GPIO_B_REG(SECGPIO_BASE_PTR,0,23)
  #define SECGPIO_PORT0_B24                        GPIO_B_REG(SECGPIO_BASE_PTR,0,24)
  #define SECGPIO_PORT0_B25                        GPIO_B_REG(SECGPIO_BASE_PTR,0,25)
  #define SECGPIO_PORT0_B26                        GPIO_B_REG(SECGPIO_BASE_PTR,0,26)
  #define SECGPIO_PORT0_B27                        GPIO_B_REG(SECGPIO_BASE_PTR,0,27)
  #define SECGPIO_PORT0_B28                        GPIO_B_REG(SECGPIO_BASE_PTR,0,28)
  #define SECGPIO_PORT0_B29                        GPIO_B_REG(SECGPIO_BASE_PTR,0,29)
  #define SECGPIO_PORT0_B30                        GPIO_B_REG(SECGPIO_BASE_PTR,0,30)
  #define SECGPIO_PORT0_B31                        GPIO_B_REG(SECGPIO_BASE_PTR,0,31)
  #define SECGPIO_PORT0_W0                         GPIO_W_REG(SECGPIO_BASE_PTR,0,0)
  #define SECGPIO_PORT0_W1                         GPIO_W_REG(SECGPIO_BASE_PTR,0,1)
  #define SECGPIO_PORT0_W2                         GPIO_W_REG(SECGPIO_BASE_PTR,0,2)
  #define SECGPIO_PORT0_W3                         GPIO_W_REG(SECGPIO_BASE_PTR,0,3)
  #define SECGPIO_PORT0_W4                         GPIO_W_REG(SECGPIO_BASE_PTR,0,4)
  #define SECGPIO_PORT0_W5                         GPIO_W_REG(SECGPIO_BASE_PTR,0,5)
  #define SECGPIO_PORT0_W6                         GPIO_W_REG(SECGPIO_BASE_PTR,0,6)
  #define SECGPIO_PORT0_W7                         GPIO_W_REG(SECGPIO_BASE_PTR,0,7)
  #define SECGPIO_PORT0_W8                         GPIO_W_REG(SECGPIO_BASE_PTR,0,8)
  #define SECGPIO_PORT0_W9                         GPIO_W_REG(SECGPIO_BASE_PTR,0,9)
  #define SECGPIO_PORT0_W10                        GPIO_W_REG(SECGPIO_BASE_PTR,0,10)
  #define SECGPIO_PORT0_W11                        GPIO_W_REG(SECGPIO_BASE_PTR,0,11)
  #define SECGPIO_PORT0_W12                        GPIO_W_REG(SECGPIO_BASE_PTR,0,12)
  #define SECGPIO_PORT0_W13                        GPIO_W_REG(SECGPIO_BASE_PTR,0,13)
  #define SECGPIO_PORT0_W14                        GPIO_W_REG(SECGPIO_BASE_PTR,0,14)
  #define SECGPIO_PORT0_W15                        GPIO_W_REG(SECGPIO_BASE_PTR,0,15)
  #define SECGPIO_PORT0_W16                        GPIO_W_REG(SECGPIO_BASE_PTR,0,16)
  #define SECGPIO_PORT0_W17                        GPIO_W_REG(SECGPIO_BASE_PTR,0,17)
  #define SECGPIO_PORT0_W18                        GPIO_W_REG(SECGPIO_BASE_PTR,0,18)
  #define SECGPIO_PORT0_W19                        GPIO_W_REG(SECGPIO_BASE_PTR,0,19)
  #define SECGPIO_PORT0_W20                        GPIO_W_REG(SECGPIO_BASE_PTR,0,20)
  #define SECGPIO_PORT0_W21                        GPIO_W_REG(SECGPIO_BASE_PTR,0,21)
  #define SECGPIO_PORT0_W22                        GPIO_W_REG(SECGPIO_BASE_PTR,0,22)
  #define SECGPIO_PORT0_W23                        GPIO_W_REG(SECGPIO_BASE_PTR,0,23)
  #define SECGPIO_PORT0_W24                        GPIO_W_REG(SECGPIO_BASE_PTR,0,24)
  #define SECGPIO_PORT0_W25                        GPIO_W_REG(SECGPIO_BASE_PTR,0,25)
  #define SECGPIO_PORT0_W26                        GPIO_W_REG(SECGPIO_BASE_PTR,0,26)
  #define SECGPIO_PORT0_W27                        GPIO_W_REG(SECGPIO_BASE_PTR,0,27)
  #define SECGPIO_PORT0_W28                        GPIO_W_REG(SECGPIO_BASE_PTR,0,28)
  #define SECGPIO_PORT0_W29                        GPIO_W_REG(SECGPIO_BASE_PTR,0,29)
  #define SECGPIO_PORT0_W30                        GPIO_W_REG(SECGPIO_BASE_PTR,0,30)
  #define SECGPIO_PORT0_W31                        GPIO_W_REG(SECGPIO_BASE_PTR,0,31)
  #define SECGPIO_DIR0                             GPIO_DIR_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_MASK0                            GPIO_MASK_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_PIN0                             GPIO_PIN_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_MPIN0                            GPIO_MPIN_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_SET0                             GPIO_SET_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_CLR0                             GPIO_CLR_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_NOT0                             GPIO_NOT_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_DIRSET0                          GPIO_DIRSET_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_DIRCLR0                          GPIO_DIRCLR_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_DIRNOT0                          GPIO_DIRNOT_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTENA0                          GPIO_INTENA_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTENB0                          GPIO_INTENB_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTPOL0                          GPIO_INTPOL_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTEDG0                          GPIO_INTEDG_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTSTATA0                        GPIO_INTSTATA_REG(SECGPIO_BASE_PTR,0)
  #define SECGPIO_INTSTATB0                        GPIO_INTSTATB_REG(SECGPIO_BASE_PTR,0)
#endif

/* GPIO - Register array accessors */
#define GPIO_B(index,index2)                     GPIO_B_REG(GPIO_BASE_PTR,index,index2)
#define GPIO_B_NS(index,index2)                  GPIO_B_REG(GPIO_BASE_PTR_NS,index,index2)
#define GPIO_B(index,index2)                     GPIO_B_REG(GPIO_BASE_PTR,index,index2)
#define SECGPIO_B(index,index2)                  GPIO_B_REG(SECGPIO_BASE_PTR,index,index2)
#define SECGPIO_B_NS(index,index2)               GPIO_B_REG(SECGPIO_BASE_PTR_NS,index,index2)
#define SECGPIO_B(index,index2)                  GPIO_B_REG(SECGPIO_BASE_PTR,index,index2)
#define GPIO_W(index,index2)                     GPIO_W_REG(GPIO_BASE_PTR,index,index2)
#define GPIO_W_NS(index,index2)                  GPIO_W_REG(GPIO_BASE_PTR_NS,index,index2)
#define GPIO_W(index,index2)                     GPIO_W_REG(GPIO_BASE_PTR,index,index2)
#define SECGPIO_W(index,index2)                  GPIO_W_REG(SECGPIO_BASE_PTR,index,index2)
#define SECGPIO_W_NS(index,index2)               GPIO_W_REG(SECGPIO_BASE_PTR_NS,index,index2)
#define SECGPIO_W(index,index2)                  GPIO_W_REG(SECGPIO_BASE_PTR,index,index2)
#define GPIO_DIR(index)                          GPIO_DIR_REG(GPIO_BASE_PTR,index)
#define GPIO_DIR_NS(index)                       GPIO_DIR_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_DIR(index)                          GPIO_DIR_REG(GPIO_BASE_PTR,index)
#define SECGPIO_DIR(index)                       GPIO_DIR_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_DIR_NS(index)                    GPIO_DIR_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_DIR(index)                       GPIO_DIR_REG(SECGPIO_BASE_PTR,index)
#define GPIO_MASK(index)                         GPIO_MASK_REG(GPIO_BASE_PTR,index)
#define GPIO_MASK_NS(index)                      GPIO_MASK_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_MASK(index)                         GPIO_MASK_REG(GPIO_BASE_PTR,index)
#define SECGPIO_MASK(index)                      GPIO_MASK_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_MASK_NS(index)                   GPIO_MASK_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_MASK(index)                      GPIO_MASK_REG(SECGPIO_BASE_PTR,index)
#define GPIO_PIN(index)                          GPIO_PIN_REG(GPIO_BASE_PTR,index)
#define GPIO_PIN_NS(index)                       GPIO_PIN_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_PIN(index)                          GPIO_PIN_REG(GPIO_BASE_PTR,index)
#define SECGPIO_PIN(index)                       GPIO_PIN_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_PIN_NS(index)                    GPIO_PIN_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_PIN(index)                       GPIO_PIN_REG(SECGPIO_BASE_PTR,index)
#define GPIO_MPIN(index)                         GPIO_MPIN_REG(GPIO_BASE_PTR,index)
#define GPIO_MPIN_NS(index)                      GPIO_MPIN_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_MPIN(index)                         GPIO_MPIN_REG(GPIO_BASE_PTR,index)
#define SECGPIO_MPIN(index)                      GPIO_MPIN_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_MPIN_NS(index)                   GPIO_MPIN_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_MPIN(index)                      GPIO_MPIN_REG(SECGPIO_BASE_PTR,index)
#define GPIO_SET(index)                          GPIO_SET_REG(GPIO_BASE_PTR,index)
#define GPIO_SET_NS(index)                       GPIO_SET_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_SET(index)                          GPIO_SET_REG(GPIO_BASE_PTR,index)
#define SECGPIO_SET(index)                       GPIO_SET_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_SET_NS(index)                    GPIO_SET_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_SET(index)                       GPIO_SET_REG(SECGPIO_BASE_PTR,index)
#define GPIO_CLR(index)                          GPIO_CLR_REG(GPIO_BASE_PTR,index)
#define GPIO_CLR_NS(index)                       GPIO_CLR_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_CLR(index)                          GPIO_CLR_REG(GPIO_BASE_PTR,index)
#define SECGPIO_CLR(index)                       GPIO_CLR_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_CLR_NS(index)                    GPIO_CLR_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_CLR(index)                       GPIO_CLR_REG(SECGPIO_BASE_PTR,index)
#define GPIO_NOT(index)                          GPIO_NOT_REG(GPIO_BASE_PTR,index)
#define GPIO_NOT_NS(index)                       GPIO_NOT_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_NOT(index)                          GPIO_NOT_REG(GPIO_BASE_PTR,index)
#define SECGPIO_NOT(index)                       GPIO_NOT_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_NOT_NS(index)                    GPIO_NOT_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_NOT(index)                       GPIO_NOT_REG(SECGPIO_BASE_PTR,index)
#define GPIO_DIRSET(index)                       GPIO_DIRSET_REG(GPIO_BASE_PTR,index)
#define GPIO_DIRSET_NS(index)                    GPIO_DIRSET_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_DIRSET(index)                       GPIO_DIRSET_REG(GPIO_BASE_PTR,index)
#define SECGPIO_DIRSET(index)                    GPIO_DIRSET_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_DIRSET_NS(index)                 GPIO_DIRSET_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_DIRSET(index)                    GPIO_DIRSET_REG(SECGPIO_BASE_PTR,index)
#define GPIO_DIRCLR(index)                       GPIO_DIRCLR_REG(GPIO_BASE_PTR,index)
#define GPIO_DIRCLR_NS(index)                    GPIO_DIRCLR_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_DIRCLR(index)                       GPIO_DIRCLR_REG(GPIO_BASE_PTR,index)
#define SECGPIO_DIRCLR(index)                    GPIO_DIRCLR_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_DIRCLR_NS(index)                 GPIO_DIRCLR_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_DIRCLR(index)                    GPIO_DIRCLR_REG(SECGPIO_BASE_PTR,index)
#define GPIO_DIRNOT(index)                       GPIO_DIRNOT_REG(GPIO_BASE_PTR,index)
#define GPIO_DIRNOT_NS(index)                    GPIO_DIRNOT_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_DIRNOT(index)                       GPIO_DIRNOT_REG(GPIO_BASE_PTR,index)
#define SECGPIO_DIRNOT(index)                    GPIO_DIRNOT_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_DIRNOT_NS(index)                 GPIO_DIRNOT_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_DIRNOT(index)                    GPIO_DIRNOT_REG(SECGPIO_BASE_PTR,index)
#define GPIO_INTENA(index)                       GPIO_INTENA_REG(GPIO_BASE_PTR,index)
#define GPIO_INTENA_NS(index)                    GPIO_INTENA_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_INTENA(index)                       GPIO_INTENA_REG(GPIO_BASE_PTR,index)
#define SECGPIO_INTENA(index)                    GPIO_INTENA_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_INTENA_NS(index)                 GPIO_INTENA_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_INTENA(index)                    GPIO_INTENA_REG(SECGPIO_BASE_PTR,index)
#define GPIO_INTENB(index)                       GPIO_INTENB_REG(GPIO_BASE_PTR,index)
#define GPIO_INTENB_NS(index)                    GPIO_INTENB_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_INTENB(index)                       GPIO_INTENB_REG(GPIO_BASE_PTR,index)
#define SECGPIO_INTENB(index)                    GPIO_INTENB_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_INTENB_NS(index)                 GPIO_INTENB_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_INTENB(index)                    GPIO_INTENB_REG(SECGPIO_BASE_PTR,index)
#define GPIO_INTPOL(index)                       GPIO_INTPOL_REG(GPIO_BASE_PTR,index)
#define GPIO_INTPOL_NS(index)                    GPIO_INTPOL_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_INTPOL(index)                       GPIO_INTPOL_REG(GPIO_BASE_PTR,index)
#define SECGPIO_INTPOL(index)                    GPIO_INTPOL_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_INTPOL_NS(index)                 GPIO_INTPOL_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_INTPOL(index)                    GPIO_INTPOL_REG(SECGPIO_BASE_PTR,index)
#define GPIO_INTEDG(index)                       GPIO_INTEDG_REG(GPIO_BASE_PTR,index)
#define GPIO_INTEDG_NS(index)                    GPIO_INTEDG_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_INTEDG(index)                       GPIO_INTEDG_REG(GPIO_BASE_PTR,index)
#define SECGPIO_INTEDG(index)                    GPIO_INTEDG_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_INTEDG_NS(index)                 GPIO_INTEDG_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_INTEDG(index)                    GPIO_INTEDG_REG(SECGPIO_BASE_PTR,index)
#define GPIO_INTSTATA(index)                     GPIO_INTSTATA_REG(GPIO_BASE_PTR,index)
#define GPIO_INTSTATA_NS(index)                  GPIO_INTSTATA_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_INTSTATA(index)                     GPIO_INTSTATA_REG(GPIO_BASE_PTR,index)
#define SECGPIO_INTSTATA(index)                  GPIO_INTSTATA_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_INTSTATA_NS(index)               GPIO_INTSTATA_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_INTSTATA(index)                  GPIO_INTSTATA_REG(SECGPIO_BASE_PTR,index)
#define GPIO_INTSTATB(index)                     GPIO_INTSTATB_REG(GPIO_BASE_PTR,index)
#define GPIO_INTSTATB_NS(index)                  GPIO_INTSTATB_REG(GPIO_BASE_PTR_NS,index)
#define GPIO_INTSTATB(index)                     GPIO_INTSTATB_REG(GPIO_BASE_PTR,index)
#define SECGPIO_INTSTATB(index)                  GPIO_INTSTATB_REG(SECGPIO_BASE_PTR,index)
#define SECGPIO_INTSTATB_NS(index)               GPIO_INTSTATB_REG(SECGPIO_BASE_PTR_NS,index)
#define SECGPIO_INTSTATB(index)                  GPIO_INTSTATB_REG(SECGPIO_BASE_PTR,index)

/*!
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPIO_Peripheral */


/* ----------------------------------------------------------------------------
   -- HASHCRYPT
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup HASHCRYPT_Peripheral HASHCRYPT
 * @{
 */

/** HASHCRYPT - Peripheral register structure */
typedef struct HASHCRYPT_MemMap {
  uint32_t CTRL;                                   /**< Control, offset: 0x0 */
  uint32_t STATUS;                                 /**< Status, offset: 0x4 */
  uint32_t INTENSET;                               /**< Interrupt Enable, offset: 0x8 */
  uint32_t INTENCLR;                               /**< Interrupt Clear, offset: 0xC */
  uint32_t MEMCTRL;                                /**< Memory Control, offset: 0x10 */
  uint32_t MEMADDR;                                /**< Memory Address, offset: 0x14 */
  uint8_t RESERVED_0[8];
  uint32_t INDATA;                                 /**< Input Data, offset: 0x20 */
  uint32_t ALIAS[7];                               /**< Alias, array offset: 0x24, array step: 0x4 */
  uint32_t DIGEST0[8];                             /**< Digest0 n/Output Data0 n, array offset: 0x40, array step: 0x4 */
  uint8_t RESERVED_1[32];
  uint32_t CRYPTCFG;                               /**< Cryptographic Configuration, offset: 0x80 */
  uint32_t CONFIG;                                 /**< Configuration, offset: 0x84 */
  uint8_t RESERVED_2[4];
  uint32_t LOCK;                                   /**< Lock, offset: 0x8C */
  uint32_t MASK[4];                                /**< Mask, array offset: 0x90, array step: 0x4 */
  uint32_t RELOAD[8];                              /**< DIGEST/OUTDATA Reload, array offset: 0xA0, array step: 0x4 */
  uint8_t RESERVED_3[16];
  uint32_t PRNG_SEED;                              /**< PRNG Seed, offset: 0xD0 */
  uint8_t RESERVED_4[4];
  uint32_t PRNG_OUT;                               /**< PRNG Output, offset: 0xD8 */
} volatile *HASHCRYPT_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- HASHCRYPT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup HASHCRYPT_Register_Accessor_Macros HASHCRYPT - Register accessor macros
 * @{
 */


/* HASHCRYPT - Register accessors */
#define HASHCRYPT_CTRL_REG(base)                 ((base)->CTRL)
#define HASHCRYPT_STATUS_REG(base)               ((base)->STATUS)
#define HASHCRYPT_INTENSET_REG(base)             ((base)->INTENSET)
#define HASHCRYPT_INTENCLR_REG(base)             ((base)->INTENCLR)
#define HASHCRYPT_MEMCTRL_REG(base)              ((base)->MEMCTRL)
#define HASHCRYPT_MEMADDR_REG(base)              ((base)->MEMADDR)
#define HASHCRYPT_INDATA_REG(base)               ((base)->INDATA)
#define HASHCRYPT_ALIAS_REG(base,index)          ((base)->ALIAS[index])
#define HASHCRYPT_DIGEST0_REG(base,index)        ((base)->DIGEST0[index])
#define HASHCRYPT_CRYPTCFG_REG(base)             ((base)->CRYPTCFG)
#define HASHCRYPT_CONFIG_REG(base)               ((base)->CONFIG)
#define HASHCRYPT_LOCK_REG(base)                 ((base)->LOCK)
#define HASHCRYPT_MASK_REG(base,index)           ((base)->MASK[index])
#define HASHCRYPT_RELOAD_REG(base,index)         ((base)->RELOAD[index])
#define HASHCRYPT_PRNG_SEED_REG(base)            ((base)->PRNG_SEED)
#define HASHCRYPT_PRNG_OUT_REG(base)             ((base)->PRNG_OUT)

/*!
 * @}
 */ /* end of group HASHCRYPT_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- HASHCRYPT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup HASHCRYPT_Register_Masks HASHCRYPT Register Masks
 * @{
 */

/*! @name CTRL - Control */
/*! @{ */
#define HASHCRYPT_CTRL_MODE_MASK                 (0x7U)
#define HASHCRYPT_CTRL_MODE_SHIFT                (0U)
/*! MODE - Operational Mode
 *  0b000..Disabled
 *  0b001..SHA1 is enabled
 *  0b010..SHA2-256 is enabled
 *  0b011..
 *  0b100..AES is enabled (see also CRYPTCFG register for more controls)
 *  0b101..ICB-AES is enabled (see also CRYPTCFG register for more controls)
 *  0b110..
 *  0b111..
 */
#define HASHCRYPT_CTRL_MODE(x)                   (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_CTRL_MODE_SHIFT)) & HASHCRYPT_CTRL_MODE_MASK)
#define HASHCRYPT_CTRL_NEW_HASH_MASK             (0x10U)
#define HASHCRYPT_CTRL_NEW_HASH_SHIFT            (4U)
#define HASHCRYPT_CTRL_RELOAD_MASK               (0x20U)
#define HASHCRYPT_CTRL_RELOAD_SHIFT              (5U)
#define HASHCRYPT_CTRL_DMA_I_MASK                (0x100U)
#define HASHCRYPT_CTRL_DMA_I_SHIFT               (8U)
#define HASHCRYPT_CTRL_DMA_O_MASK                (0x200U)
#define HASHCRYPT_CTRL_DMA_O_SHIFT               (9U)
#define HASHCRYPT_CTRL_HASHSWPB_MASK             (0x1000U)
#define HASHCRYPT_CTRL_HASHSWPB_SHIFT            (12U)
/*! @} */

/*! @name STATUS - Status */
/*! @{ */
#define HASHCRYPT_STATUS_WAITING_MASK            (0x1U)
#define HASHCRYPT_STATUS_WAITING_SHIFT           (0U)
#define HASHCRYPT_STATUS_DIGEST_MASK             (0x2U)
#define HASHCRYPT_STATUS_DIGEST_SHIFT            (1U)
#define HASHCRYPT_STATUS_ERROR_MASK              (0x4U)
#define HASHCRYPT_STATUS_ERROR_SHIFT             (2U)
#define HASHCRYPT_STATUS_NEEDKEY_MASK            (0x10U)
#define HASHCRYPT_STATUS_NEEDKEY_SHIFT           (4U)
#define HASHCRYPT_STATUS_NEEDIV_MASK             (0x20U)
#define HASHCRYPT_STATUS_NEEDIV_SHIFT            (5U)
#define HASHCRYPT_STATUS_ICBIDX_MASK             (0x3F0000U)
#define HASHCRYPT_STATUS_ICBIDX_SHIFT            (16U)
/*! ICBIDX - ICB Index Count
 */
#define HASHCRYPT_STATUS_ICBIDX(x)               (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_STATUS_ICBIDX_SHIFT)) & HASHCRYPT_STATUS_ICBIDX_MASK)
/*! @} */

/*! @name INTENSET - Interrupt Enable */
/*! @{ */
#define HASHCRYPT_INTENSET_WAITING_MASK          (0x1U)
#define HASHCRYPT_INTENSET_WAITING_SHIFT         (0U)
#define HASHCRYPT_INTENSET_DIGEST_MASK           (0x2U)
#define HASHCRYPT_INTENSET_DIGEST_SHIFT          (1U)
#define HASHCRYPT_INTENSET_ERROR_MASK            (0x4U)
#define HASHCRYPT_INTENSET_ERROR_SHIFT           (2U)
/*! @} */

/*! @name INTENCLR - Interrupt Clear */
/*! @{ */
#define HASHCRYPT_INTENCLR_WAITING_MASK          (0x1U)
#define HASHCRYPT_INTENCLR_WAITING_SHIFT         (0U)
#define HASHCRYPT_INTENCLR_DIGEST_MASK           (0x2U)
#define HASHCRYPT_INTENCLR_DIGEST_SHIFT          (1U)
#define HASHCRYPT_INTENCLR_ERROR_MASK            (0x4U)
#define HASHCRYPT_INTENCLR_ERROR_SHIFT           (2U)
/*! @} */

/*! @name MEMCTRL - Memory Control */
/*! @{ */
#define HASHCRYPT_MEMCTRL_MASTER_MASK            (0x1U)
#define HASHCRYPT_MEMCTRL_MASTER_SHIFT           (0U)
#define HASHCRYPT_MEMCTRL_COUNT_MASK             (0x7FF0000U)
#define HASHCRYPT_MEMCTRL_COUNT_SHIFT            (16U)
/*! COUNT - Count
 *  0b00000000000..Done. Nothing to process
 *  0b00000000001..One 512-bit block to hash
 *  0b00000000010..Two 512-bit block to hash
 *  0b00000000011..Three 512-bit block to hash
 */
#define HASHCRYPT_MEMCTRL_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_MEMCTRL_COUNT_SHIFT)) & HASHCRYPT_MEMCTRL_COUNT_MASK)
/*! @} */

/*! @name MEMADDR - Memory Address */
/*! @{ */
#define HASHCRYPT_MEMADDR_BASE_MASK              (0xFFFFFFFFU)
#define HASHCRYPT_MEMADDR_BASE_SHIFT             (0U)
/*! BASE - Base
 */
#define HASHCRYPT_MEMADDR_BASE(x)                (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_MEMADDR_BASE_SHIFT)) & HASHCRYPT_MEMADDR_BASE_MASK)
/*! @} */

/*! @name INDATA - Input Data */
/*! @{ */
#define HASHCRYPT_INDATA_DATA_MASK               (0xFFFFFFFFU)
#define HASHCRYPT_INDATA_DATA_SHIFT              (0U)
/*! DATA - Data
 */
#define HASHCRYPT_INDATA_DATA(x)                 (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_INDATA_DATA_SHIFT)) & HASHCRYPT_INDATA_DATA_MASK)
/*! @} */

/*! @name ALIAS - Alias */
/*! @{ */
#define HASHCRYPT_ALIAS_DATA_MASK                (0xFFFFFFFFU)
#define HASHCRYPT_ALIAS_DATA_SHIFT               (0U)
/*! DATA - Data
 */
#define HASHCRYPT_ALIAS_DATA(x)                  (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_ALIAS_DATA_SHIFT)) & HASHCRYPT_ALIAS_DATA_MASK)
/*! @} */

/* The count of HASHCRYPT_ALIAS */
#define HASHCRYPT_ALIAS_COUNT                    (7U)

/*! @name DIGEST0 - Digest0 n/Output Data0 n */
/*! @{ */
#define HASHCRYPT_DIGEST0_DIGEST_MASK            (0xFFFFFFFFU)
#define HASHCRYPT_DIGEST0_DIGEST_SHIFT           (0U)
/*! DIGEST - Digest
 */
#define HASHCRYPT_DIGEST0_DIGEST(x)              (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_DIGEST0_DIGEST_SHIFT)) & HASHCRYPT_DIGEST0_DIGEST_MASK)
/*! @} */

/* The count of HASHCRYPT_DIGEST0 */
#define HASHCRYPT_DIGEST0_COUNT                  (8U)

/*! @name CRYPTCFG - Cryptographic Configuration */
/*! @{ */
#define HASHCRYPT_CRYPTCFG_MSW1ST_OUT_MASK       (0x1U)
#define HASHCRYPT_CRYPTCFG_MSW1ST_OUT_SHIFT      (0U)
#define HASHCRYPT_CRYPTCFG_SWAPKEY_MASK          (0x2U)
#define HASHCRYPT_CRYPTCFG_SWAPKEY_SHIFT         (1U)
#define HASHCRYPT_CRYPTCFG_SWAPDAT_MASK          (0x4U)
#define HASHCRYPT_CRYPTCFG_SWAPDAT_SHIFT         (2U)
#define HASHCRYPT_CRYPTCFG_MSW1ST_MASK           (0x8U)
#define HASHCRYPT_CRYPTCFG_MSW1ST_SHIFT          (3U)
#define HASHCRYPT_CRYPTCFG_AESMODE_MASK          (0x30U)
#define HASHCRYPT_CRYPTCFG_AESMODE_SHIFT         (4U)
/*! AESMODE - AES Cipher Mode
 *  0b00..ECB - used as is
 *  0b01..CBC mode (see details on IV/nonce)
 *  0b10..CTR mode (see details on IV/nonce). See also AESCTRPOS.
 *  0b11..Reserved
 */
#define HASHCRYPT_CRYPTCFG_AESMODE(x)            (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_CRYPTCFG_AESMODE_SHIFT)) & HASHCRYPT_CRYPTCFG_AESMODE_MASK)
#define HASHCRYPT_CRYPTCFG_AESDECRYPT_MASK       (0x40U)
#define HASHCRYPT_CRYPTCFG_AESDECRYPT_SHIFT      (6U)
#define HASHCRYPT_CRYPTCFG_AESSECRET_MASK        (0x80U)
#define HASHCRYPT_CRYPTCFG_AESSECRET_SHIFT       (7U)
#define HASHCRYPT_CRYPTCFG_AESKEYSZ_MASK         (0x300U)
#define HASHCRYPT_CRYPTCFG_AESKEYSZ_SHIFT        (8U)
/*! AESKEYSZ - AES Key Size
 *  0b00..128 bit key
 *  0b01..192 bit key
 *  0b10..256 bit key
 *  0b11..Reserved
 */
#define HASHCRYPT_CRYPTCFG_AESKEYSZ(x)           (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_CRYPTCFG_AESKEYSZ_SHIFT)) & HASHCRYPT_CRYPTCFG_AESKEYSZ_MASK)
#define HASHCRYPT_CRYPTCFG_AESCTRPOS_MASK        (0x1C00U)
#define HASHCRYPT_CRYPTCFG_AESCTRPOS_SHIFT       (10U)
/*! AESCTRPOS - AES CTR Position
 */
#define HASHCRYPT_CRYPTCFG_AESCTRPOS(x)          (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_CRYPTCFG_AESCTRPOS_SHIFT)) & HASHCRYPT_CRYPTCFG_AESCTRPOS_MASK)
#define HASHCRYPT_CRYPTCFG_STREAMLAST_MASK       (0x10000U)
#define HASHCRYPT_CRYPTCFG_STREAMLAST_SHIFT      (16U)
#define HASHCRYPT_CRYPTCFG_ICBSZ_MASK            (0x300000U)
#define HASHCRYPT_CRYPTCFG_ICBSZ_SHIFT           (20U)
/*! ICBSZ - ICB Size
 *  0b00..32 bits of the IV/ctr are used (from 127:96)
 *  0b01..64 bits of the IV/ctr are used (from 127:64)
 *  0b10..96 bits of the IV/ctr are used (from 127:32)
 *  0b11..All 128 bits of the IV/ctr are used
 */
#define HASHCRYPT_CRYPTCFG_ICBSZ(x)              (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_CRYPTCFG_ICBSZ_SHIFT)) & HASHCRYPT_CRYPTCFG_ICBSZ_MASK)
#define HASHCRYPT_CRYPTCFG_ICBSTRM_MASK          (0xC00000U)
#define HASHCRYPT_CRYPTCFG_ICBSTRM_SHIFT         (22U)
/*! ICBSTRM - ICB Stream Size
 *  0b00..8 blocks
 *  0b01..16 blocks
 *  0b10..32 blocks
 *  0b11..64 blocks
 */
#define HASHCRYPT_CRYPTCFG_ICBSTRM(x)            (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_CRYPTCFG_ICBSTRM_SHIFT)) & HASHCRYPT_CRYPTCFG_ICBSTRM_MASK)
/*! @} */

/*! @name CONFIG - Configuration */
/*! @{ */
#define HASHCRYPT_CONFIG_DUAL_MASK               (0x1U)
#define HASHCRYPT_CONFIG_DUAL_SHIFT              (0U)
#define HASHCRYPT_CONFIG_DMA_MASK                (0x2U)
#define HASHCRYPT_CONFIG_DMA_SHIFT               (1U)
#define HASHCRYPT_CONFIG_AHB_MASK                (0x8U)
#define HASHCRYPT_CONFIG_AHB_SHIFT               (3U)
#define HASHCRYPT_CONFIG_AES_MASK                (0x40U)
#define HASHCRYPT_CONFIG_AES_SHIFT               (6U)
#define HASHCRYPT_CONFIG_AESKEY_MASK             (0x80U)
#define HASHCRYPT_CONFIG_AESKEY_SHIFT            (7U)
#define HASHCRYPT_CONFIG_SECRET_MASK             (0x100U)
#define HASHCRYPT_CONFIG_SECRET_SHIFT            (8U)
#define HASHCRYPT_CONFIG_ICB_MASK                (0x800U)
#define HASHCRYPT_CONFIG_ICB_SHIFT               (11U)
/*! @} */

/*! @name LOCK - Lock */
/*! @{ */
#define HASHCRYPT_LOCK_SECLOCK_MASK              (0x3U)
#define HASHCRYPT_LOCK_SECLOCK_SHIFT             (0U)
/*! SECLOCK - Secure Lock
 *  0b00..Unlocks, so block is open to all. But, AHB Master will only issue non-secure requests.
 *  0b01..Locks to the current security level. AHB Master will issue requests at this level.
 */
#define HASHCRYPT_LOCK_SECLOCK(x)                (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_LOCK_SECLOCK_SHIFT)) & HASHCRYPT_LOCK_SECLOCK_MASK)
#define HASHCRYPT_LOCK_PATTERN_MASK              (0xFFF0U)
#define HASHCRYPT_LOCK_PATTERN_SHIFT             (4U)
/*! PATTERN - Must write 0xA75 to change lock state. A75:Pattern needed to change bits 1:0
 */
#define HASHCRYPT_LOCK_PATTERN(x)                (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_LOCK_PATTERN_SHIFT)) & HASHCRYPT_LOCK_PATTERN_MASK)
/*! @} */

/*! @name MASK - Mask */
/*! @{ */
#define HASHCRYPT_MASK_MASK_MASK                 (0xFFFFFFFFU)
#define HASHCRYPT_MASK_MASK_SHIFT                (0U)
/*! MASK - A random word.
 */
#define HASHCRYPT_MASK_MASK(x)                   (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_MASK_MASK_SHIFT)) & HASHCRYPT_MASK_MASK_MASK)
/*! @} */

/* The count of HASHCRYPT_MASK */
#define HASHCRYPT_MASK_COUNT                     (4U)

/*! @name RELOAD - DIGEST/OUTDATA Reload */
/*! @{ */
#define HASHCRYPT_RELOAD_DIGEST_MASK             (0xFFFFFFFFU)
#define HASHCRYPT_RELOAD_DIGEST_SHIFT            (0U)
/*! DIGEST - SHA Digest word to reload.
 */
#define HASHCRYPT_RELOAD_DIGEST(x)               (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_RELOAD_DIGEST_SHIFT)) & HASHCRYPT_RELOAD_DIGEST_MASK)
/*! @} */

/* The count of HASHCRYPT_RELOAD */
#define HASHCRYPT_RELOAD_COUNT                   (8U)

/*! @name PRNG_SEED - PRNG Seed */
/*! @{ */
#define HASHCRYPT_PRNG_SEED_PRNG_SEED_MASK       (0xFFFFFFFFU)
#define HASHCRYPT_PRNG_SEED_PRNG_SEED_SHIFT      (0U)
/*! PRNG_SEED - SHA Digest word to reload.
 */
#define HASHCRYPT_PRNG_SEED_PRNG_SEED(x)         (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_PRNG_SEED_PRNG_SEED_SHIFT)) & HASHCRYPT_PRNG_SEED_PRNG_SEED_MASK)
/*! @} */

/*! @name PRNG_OUT - PRNG Output */
/*! @{ */
#define HASHCRYPT_PRNG_OUT_PRNG_OUT_R_MASK       (0xFFFFFFFFU)
#define HASHCRYPT_PRNG_OUT_PRNG_OUT_R_SHIFT      (0U)
/*! PRNG_OUT_R - SHA Digest word to reload.
 */
#define HASHCRYPT_PRNG_OUT_PRNG_OUT_R(x)         (((uint32_t)(((uint32_t)(x)) << HASHCRYPT_PRNG_OUT_PRNG_OUT_R_SHIFT)) & HASHCRYPT_PRNG_OUT_PRNG_OUT_R_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group HASHCRYPT_Register_Masks */


/* HASHCRYPT - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral HASHCRYPT base pointer */
  #define HASHCRYPT_BASE_PTR                       ((HASHCRYPT_MemMapPtr)0x50208000u)
  /** Peripheral HASHCRYPT base pointer */
  #define HASHCRYPT_BASE_PTR_NS                    ((HASHCRYPT_MemMapPtr)0x40208000u)
  /** Array initializer of HASHCRYPT peripheral base pointers */
  #define HASHCRYPT_BASE_PTRS                      { HASHCRYPT_BASE_PTR }
  /** Array initializer of HASHCRYPT peripheral base pointers */
  #define HASHCRYPT_BASE_PTRS_NS                   { HASHCRYPT_BASE_PTR_NS }
#else
  /** Peripheral HASHCRYPT base pointer */
  #define HASHCRYPT_BASE_PTR                       ((HASHCRYPT_MemMapPtr)0x40208000u)
  /** Array initializer of HASHCRYPT peripheral base pointers */
  #define HASHCRYPT_BASE_PTRS                      { HASHCRYPT_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- HASHCRYPT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup HASHCRYPT_Register_Accessor_Macros HASHCRYPT - Register accessor macros
 * @{
 */


/* HASHCRYPT - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* HASHCRYPT */
  #define HASHCRYPT_CTRL                           HASHCRYPT_CTRL_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_CTRL_NS                        HASHCRYPT_CTRL_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_STATUS                         HASHCRYPT_STATUS_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_STATUS_NS                      HASHCRYPT_STATUS_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_INTENSET                       HASHCRYPT_INTENSET_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_INTENSET_NS                    HASHCRYPT_INTENSET_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_INTENCLR                       HASHCRYPT_INTENCLR_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_INTENCLR_NS                    HASHCRYPT_INTENCLR_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_MEMCTRL                        HASHCRYPT_MEMCTRL_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_MEMCTRL_NS                     HASHCRYPT_MEMCTRL_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_MEMADDR                        HASHCRYPT_MEMADDR_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_MEMADDR_NS                     HASHCRYPT_MEMADDR_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_INDATA                         HASHCRYPT_INDATA_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_INDATA_NS                      HASHCRYPT_INDATA_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_ALIAS0                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,0)
  #define HASHCRYPT_ALIAS0_NS                      HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR_NS,0)
  #define HASHCRYPT_ALIAS1                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,1)
  #define HASHCRYPT_ALIAS1_NS                      HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR_NS,1)
  #define HASHCRYPT_ALIAS2                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,2)
  #define HASHCRYPT_ALIAS2_NS                      HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR_NS,2)
  #define HASHCRYPT_ALIAS3                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,3)
  #define HASHCRYPT_ALIAS3_NS                      HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR_NS,3)
  #define HASHCRYPT_ALIAS4                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,4)
  #define HASHCRYPT_ALIAS4_NS                      HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR_NS,4)
  #define HASHCRYPT_ALIAS5                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,5)
  #define HASHCRYPT_ALIAS5_NS                      HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR_NS,5)
  #define HASHCRYPT_ALIAS6                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,6)
  #define HASHCRYPT_ALIAS6_NS                      HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR_NS,6)
  #define HASHCRYPT_DIGEST00                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,0)
  #define HASHCRYPT_DIGEST00_NS                    HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR_NS,0)
  #define HASHCRYPT_DIGEST01                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,1)
  #define HASHCRYPT_DIGEST01_NS                    HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR_NS,1)
  #define HASHCRYPT_DIGEST02                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,2)
  #define HASHCRYPT_DIGEST02_NS                    HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR_NS,2)
  #define HASHCRYPT_DIGEST03                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,3)
  #define HASHCRYPT_DIGEST03_NS                    HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR_NS,3)
  #define HASHCRYPT_DIGEST04                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,4)
  #define HASHCRYPT_DIGEST04_NS                    HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR_NS,4)
  #define HASHCRYPT_DIGEST05                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,5)
  #define HASHCRYPT_DIGEST05_NS                    HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR_NS,5)
  #define HASHCRYPT_DIGEST06                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,6)
  #define HASHCRYPT_DIGEST06_NS                    HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR_NS,6)
  #define HASHCRYPT_DIGEST07                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,7)
  #define HASHCRYPT_DIGEST07_NS                    HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR_NS,7)
  #define HASHCRYPT_CRYPTCFG                       HASHCRYPT_CRYPTCFG_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_CRYPTCFG_NS                    HASHCRYPT_CRYPTCFG_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_CONFIG                         HASHCRYPT_CONFIG_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_CONFIG_NS                      HASHCRYPT_CONFIG_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_LOCK                           HASHCRYPT_LOCK_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_LOCK_NS                        HASHCRYPT_LOCK_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_MASK0                          HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR,0)
  #define HASHCRYPT_MASK0_NS                       HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR_NS,0)
  #define HASHCRYPT_MASK1                          HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR,1)
  #define HASHCRYPT_MASK1_NS                       HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR_NS,1)
  #define HASHCRYPT_MASK2                          HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR,2)
  #define HASHCRYPT_MASK2_NS                       HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR_NS,2)
  #define HASHCRYPT_MASK3                          HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR,3)
  #define HASHCRYPT_MASK3_NS                       HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR_NS,3)
  #define HASHCRYPT_RELOAD0                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,0)
  #define HASHCRYPT_RELOAD0_NS                     HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR_NS,0)
  #define HASHCRYPT_RELOAD1                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,1)
  #define HASHCRYPT_RELOAD1_NS                     HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR_NS,1)
  #define HASHCRYPT_RELOAD2                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,2)
  #define HASHCRYPT_RELOAD2_NS                     HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR_NS,2)
  #define HASHCRYPT_RELOAD3                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,3)
  #define HASHCRYPT_RELOAD3_NS                     HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR_NS,3)
  #define HASHCRYPT_RELOAD4                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,4)
  #define HASHCRYPT_RELOAD4_NS                     HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR_NS,4)
  #define HASHCRYPT_RELOAD5                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,5)
  #define HASHCRYPT_RELOAD5_NS                     HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR_NS,5)
  #define HASHCRYPT_RELOAD6                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,6)
  #define HASHCRYPT_RELOAD6_NS                     HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR_NS,6)
  #define HASHCRYPT_RELOAD7                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,7)
  #define HASHCRYPT_RELOAD7_NS                     HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR_NS,7)
  #define HASHCRYPT_PRNG_SEED                      HASHCRYPT_PRNG_SEED_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_PRNG_SEED_NS                   HASHCRYPT_PRNG_SEED_REG(HASHCRYPT_BASE_PTR_NS)
  #define HASHCRYPT_PRNG_OUT                       HASHCRYPT_PRNG_OUT_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_PRNG_OUT_NS                    HASHCRYPT_PRNG_OUT_REG(HASHCRYPT_BASE_PTR_NS)
#else
  /* HASHCRYPT */
  #define HASHCRYPT_CTRL                           HASHCRYPT_CTRL_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_STATUS                         HASHCRYPT_STATUS_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_INTENSET                       HASHCRYPT_INTENSET_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_INTENCLR                       HASHCRYPT_INTENCLR_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_MEMCTRL                        HASHCRYPT_MEMCTRL_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_MEMADDR                        HASHCRYPT_MEMADDR_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_INDATA                         HASHCRYPT_INDATA_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_ALIAS0                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,0)
  #define HASHCRYPT_ALIAS1                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,1)
  #define HASHCRYPT_ALIAS2                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,2)
  #define HASHCRYPT_ALIAS3                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,3)
  #define HASHCRYPT_ALIAS4                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,4)
  #define HASHCRYPT_ALIAS5                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,5)
  #define HASHCRYPT_ALIAS6                         HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,6)
  #define HASHCRYPT_DIGEST00                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,0)
  #define HASHCRYPT_DIGEST01                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,1)
  #define HASHCRYPT_DIGEST02                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,2)
  #define HASHCRYPT_DIGEST03                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,3)
  #define HASHCRYPT_DIGEST04                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,4)
  #define HASHCRYPT_DIGEST05                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,5)
  #define HASHCRYPT_DIGEST06                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,6)
  #define HASHCRYPT_DIGEST07                       HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,7)
  #define HASHCRYPT_CRYPTCFG                       HASHCRYPT_CRYPTCFG_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_CONFIG                         HASHCRYPT_CONFIG_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_LOCK                           HASHCRYPT_LOCK_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_MASK0                          HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR,0)
  #define HASHCRYPT_MASK1                          HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR,1)
  #define HASHCRYPT_MASK2                          HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR,2)
  #define HASHCRYPT_MASK3                          HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR,3)
  #define HASHCRYPT_RELOAD0                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,0)
  #define HASHCRYPT_RELOAD1                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,1)
  #define HASHCRYPT_RELOAD2                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,2)
  #define HASHCRYPT_RELOAD3                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,3)
  #define HASHCRYPT_RELOAD4                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,4)
  #define HASHCRYPT_RELOAD5                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,5)
  #define HASHCRYPT_RELOAD6                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,6)
  #define HASHCRYPT_RELOAD7                        HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,7)
  #define HASHCRYPT_PRNG_SEED                      HASHCRYPT_PRNG_SEED_REG(HASHCRYPT_BASE_PTR)
  #define HASHCRYPT_PRNG_OUT                       HASHCRYPT_PRNG_OUT_REG(HASHCRYPT_BASE_PTR)
#endif

/* HASHCRYPT - Register array accessors */
#define HASHCRYPT_ALIAS(index)                   HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,index)
#define HASHCRYPT_ALIAS_NS(index)                HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR_NS,index)
#define HASHCRYPT_ALIAS(index)                   HASHCRYPT_ALIAS_REG(HASHCRYPT_BASE_PTR,index)
#define HASHCRYPT_DIGEST0(index)                 HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,index)
#define HASHCRYPT_DIGEST0_NS(index)              HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR_NS,index)
#define HASHCRYPT_DIGEST0(index)                 HASHCRYPT_DIGEST0_REG(HASHCRYPT_BASE_PTR,index)
#define HASHCRYPT_MASK(index)                    HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR,index)
#define HASHCRYPT_MASK_NS(index)                 HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR_NS,index)
#define HASHCRYPT_MASK(index)                    HASHCRYPT_MASK_REG(HASHCRYPT_BASE_PTR,index)
#define HASHCRYPT_RELOAD(index)                  HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,index)
#define HASHCRYPT_RELOAD_NS(index)               HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR_NS,index)
#define HASHCRYPT_RELOAD(index)                  HASHCRYPT_RELOAD_REG(HASHCRYPT_BASE_PTR,index)

/*!
 * @}
 */ /* end of group HASHCRYPT_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group HASHCRYPT_Peripheral */


/* ----------------------------------------------------------------------------
   -- I2C
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Peripheral I2C
 * @{
 */

/** I2C - Peripheral register structure */
typedef struct I2C_MemMap {
  uint8_t RESERVED_0[2048];
  uint32_t CFG;                                    /**< Configuration Register, offset: 0x800 */
  uint32_t STAT;                                   /**< Status Register, offset: 0x804 */
  uint32_t INTENSET;                               /**< Interrupt Enable Set Register, offset: 0x808 */
  uint32_t INTENCLR;                               /**< Interrupt Enable Clear Register, offset: 0x80C */
  uint32_t TIMEOUT;                                /**< Time-out Register, offset: 0x810 */
  uint32_t CLKDIV;                                 /**< Clock Divider Register, offset: 0x814 */
  uint32_t INTSTAT;                                /**< Interrupt Status Register, offset: 0x818 */
  uint8_t RESERVED_1[4];
  uint32_t MSTCTL;                                 /**< Master Control Register, offset: 0x820 */
  uint32_t MSTTIME;                                /**< Master Timing Register, offset: 0x824 */
  uint32_t MSTDAT;                                 /**< Master Data Register, offset: 0x828 */
  uint8_t RESERVED_2[20];
  uint32_t SLVCTL;                                 /**< Slave Control Register, offset: 0x840 */
  uint32_t SLVDAT;                                 /**< Slave Data Register, offset: 0x844 */
  uint32_t SLVADR[4];                              /**< Slave Address Register, array offset: 0x848, array step: 0x4 */
  uint32_t SLVQUAL0;                               /**< Slave Qualification for Address 0 Register, offset: 0x858 */
  uint8_t RESERVED_3[36];
  uint32_t MONRXDAT;                               /**< Monitor Receiver Data Register, offset: 0x880 */
  uint8_t RESERVED_4[1912];
  uint32_t ID;                                     /**< Peripheral Identification Register, offset: 0xFFC */
} volatile *I2C_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- I2C - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Accessor_Macros I2C - Register accessor macros
 * @{
 */


/* I2C - Register accessors */
#define I2C_CFG_REG(base)                        ((base)->CFG)
#define I2C_STAT_REG(base)                       ((base)->STAT)
#define I2C_INTENSET_REG(base)                   ((base)->INTENSET)
#define I2C_INTENCLR_REG(base)                   ((base)->INTENCLR)
#define I2C_TIMEOUT_REG(base)                    ((base)->TIMEOUT)
#define I2C_CLKDIV_REG(base)                     ((base)->CLKDIV)
#define I2C_INTSTAT_REG(base)                    ((base)->INTSTAT)
#define I2C_MSTCTL_REG(base)                     ((base)->MSTCTL)
#define I2C_MSTTIME_REG(base)                    ((base)->MSTTIME)
#define I2C_MSTDAT_REG(base)                     ((base)->MSTDAT)
#define I2C_SLVCTL_REG(base)                     ((base)->SLVCTL)
#define I2C_SLVDAT_REG(base)                     ((base)->SLVDAT)
#define I2C_SLVADR_REG(base,index)               ((base)->SLVADR[index])
#define I2C_SLVQUAL0_REG(base)                   ((base)->SLVQUAL0)
#define I2C_MONRXDAT_REG(base)                   ((base)->MONRXDAT)
#define I2C_ID_REG(base)                         ((base)->ID)

/*!
 * @}
 */ /* end of group I2C_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- I2C Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Masks I2C Register Masks
 * @{
 */

/*! @name CFG - Configuration Register */
/*! @{ */
#define I2C_CFG_MSTEN_MASK                       (0x1U)
#define I2C_CFG_MSTEN_SHIFT                      (0U)
#define I2C_CFG_SLVEN_MASK                       (0x2U)
#define I2C_CFG_SLVEN_SHIFT                      (1U)
#define I2C_CFG_MONEN_MASK                       (0x4U)
#define I2C_CFG_MONEN_SHIFT                      (2U)
#define I2C_CFG_TIMEOUTEN_MASK                   (0x8U)
#define I2C_CFG_TIMEOUTEN_SHIFT                  (3U)
#define I2C_CFG_MONCLKSTR_MASK                   (0x10U)
#define I2C_CFG_MONCLKSTR_SHIFT                  (4U)
#define I2C_CFG_HSCAPABLE_MASK                   (0x20U)
#define I2C_CFG_HSCAPABLE_SHIFT                  (5U)
/*! @} */

/*! @name STAT - Status Register */
/*! @{ */
#define I2C_STAT_MSTPENDING_MASK                 (0x1U)
#define I2C_STAT_MSTPENDING_SHIFT                (0U)
#define I2C_STAT_MSTSTATE_MASK                   (0xEU)
#define I2C_STAT_MSTSTATE_SHIFT                  (1U)
/*! MSTSTATE - Master State code
 *  0b000..Idle. The Master function is available to be used for a new transaction.
 *  0b001..Receive ready. Received data is available (in Master Receiver mode). Address plus Read was previously sent and Acknowledged by a slave.
 *  0b010..Transmit ready. Data can be transmitted (in Master Transmitter mode). Address plus Write was previously sent and Acknowledged by a slave.
 *  0b011..NACK Address. Slave NACKed address.
 *  0b100..NACK Data. Slave NACKed transmitted data.
 */
#define I2C_STAT_MSTSTATE(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_STAT_MSTSTATE_SHIFT)) & I2C_STAT_MSTSTATE_MASK)
#define I2C_STAT_MSTARBLOSS_MASK                 (0x10U)
#define I2C_STAT_MSTARBLOSS_SHIFT                (4U)
#define I2C_STAT_MSTSTSTPERR_MASK                (0x40U)
#define I2C_STAT_MSTSTSTPERR_SHIFT               (6U)
#define I2C_STAT_SLVPENDING_MASK                 (0x100U)
#define I2C_STAT_SLVPENDING_SHIFT                (8U)
#define I2C_STAT_SLVSTATE_MASK                   (0x600U)
#define I2C_STAT_SLVSTATE_SHIFT                  (9U)
/*! SLVSTATE - Slave State
 *  0b00..Slave address. Address plus R/W received. At least one of the 4 slave addresses has been matched by hardware.
 *  0b01..Slave receive. Received data is available (in Slave Receiver mode).
 *  0b10..Slave transmit. Data can be transmitted (in Slave Transmitter mode).
 *  0b11..Reserved
 */
#define I2C_STAT_SLVSTATE(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_STAT_SLVSTATE_SHIFT)) & I2C_STAT_SLVSTATE_MASK)
#define I2C_STAT_SLVNOTSTR_MASK                  (0x800U)
#define I2C_STAT_SLVNOTSTR_SHIFT                 (11U)
#define I2C_STAT_SLVIDX_MASK                     (0x3000U)
#define I2C_STAT_SLVIDX_SHIFT                    (12U)
/*! SLVIDX - Slave address match Index T
 *  0b00..Address 0. Slave address 0 was matched.
 *  0b01..Address 1. Slave address 1 was matched.
 *  0b10..Address 2. Slave address 2 was matched.
 *  0b11..Address 3. Slave address 3 was matched.
 */
#define I2C_STAT_SLVIDX(x)                       (((uint32_t)(((uint32_t)(x)) << I2C_STAT_SLVIDX_SHIFT)) & I2C_STAT_SLVIDX_MASK)
#define I2C_STAT_SLVSEL_MASK                     (0x4000U)
#define I2C_STAT_SLVSEL_SHIFT                    (14U)
#define I2C_STAT_SLVDESEL_MASK                   (0x8000U)
#define I2C_STAT_SLVDESEL_SHIFT                  (15U)
#define I2C_STAT_MONRDY_MASK                     (0x10000U)
#define I2C_STAT_MONRDY_SHIFT                    (16U)
#define I2C_STAT_MONOV_MASK                      (0x20000U)
#define I2C_STAT_MONOV_SHIFT                     (17U)
#define I2C_STAT_MONACTIVE_MASK                  (0x40000U)
#define I2C_STAT_MONACTIVE_SHIFT                 (18U)
#define I2C_STAT_MONIDLE_MASK                    (0x80000U)
#define I2C_STAT_MONIDLE_SHIFT                   (19U)
#define I2C_STAT_EVENTTIMEOUT_MASK               (0x1000000U)
#define I2C_STAT_EVENTTIMEOUT_SHIFT              (24U)
#define I2C_STAT_SCLTIMEOUT_MASK                 (0x2000000U)
#define I2C_STAT_SCLTIMEOUT_SHIFT                (25U)
/*! @} */

/*! @name INTENSET - Interrupt Enable Set Register */
/*! @{ */
#define I2C_INTENSET_MSTPENDINGEN_MASK           (0x1U)
#define I2C_INTENSET_MSTPENDINGEN_SHIFT          (0U)
#define I2C_INTENSET_MSTARBLOSSEN_MASK           (0x10U)
#define I2C_INTENSET_MSTARBLOSSEN_SHIFT          (4U)
#define I2C_INTENSET_MSTSTSTPERREN_MASK          (0x40U)
#define I2C_INTENSET_MSTSTSTPERREN_SHIFT         (6U)
#define I2C_INTENSET_SLVPENDINGEN_MASK           (0x100U)
#define I2C_INTENSET_SLVPENDINGEN_SHIFT          (8U)
#define I2C_INTENSET_SLVNOTSTREN_MASK            (0x800U)
#define I2C_INTENSET_SLVNOTSTREN_SHIFT           (11U)
#define I2C_INTENSET_SLVDESELEN_MASK             (0x8000U)
#define I2C_INTENSET_SLVDESELEN_SHIFT            (15U)
#define I2C_INTENSET_MONRDYEN_MASK               (0x10000U)
#define I2C_INTENSET_MONRDYEN_SHIFT              (16U)
#define I2C_INTENSET_MONOVEN_MASK                (0x20000U)
#define I2C_INTENSET_MONOVEN_SHIFT               (17U)
#define I2C_INTENSET_MONIDLEEN_MASK              (0x80000U)
#define I2C_INTENSET_MONIDLEEN_SHIFT             (19U)
#define I2C_INTENSET_EVENTTIMEOUTEN_MASK         (0x1000000U)
#define I2C_INTENSET_EVENTTIMEOUTEN_SHIFT        (24U)
#define I2C_INTENSET_SCLTIMEOUTEN_MASK           (0x2000000U)
#define I2C_INTENSET_SCLTIMEOUTEN_SHIFT          (25U)
/*! @} */

/*! @name INTENCLR - Interrupt Enable Clear Register */
/*! @{ */
#define I2C_INTENCLR_MSTPENDINGCLR_MASK          (0x1U)
#define I2C_INTENCLR_MSTPENDINGCLR_SHIFT         (0U)
#define I2C_INTENCLR_MSTARBLOSSCLR_MASK          (0x10U)
#define I2C_INTENCLR_MSTARBLOSSCLR_SHIFT         (4U)
#define I2C_INTENCLR_MSTSTSTPERRCLR_MASK         (0x40U)
#define I2C_INTENCLR_MSTSTSTPERRCLR_SHIFT        (6U)
#define I2C_INTENCLR_SLVPENDINGCLR_MASK          (0x100U)
#define I2C_INTENCLR_SLVPENDINGCLR_SHIFT         (8U)
#define I2C_INTENCLR_SLVNOTSTRCLR_MASK           (0x800U)
#define I2C_INTENCLR_SLVNOTSTRCLR_SHIFT          (11U)
#define I2C_INTENCLR_SLVDESELCLR_MASK            (0x8000U)
#define I2C_INTENCLR_SLVDESELCLR_SHIFT           (15U)
#define I2C_INTENCLR_MONRDYCLR_MASK              (0x10000U)
#define I2C_INTENCLR_MONRDYCLR_SHIFT             (16U)
#define I2C_INTENCLR_MONOVCLR_MASK               (0x20000U)
#define I2C_INTENCLR_MONOVCLR_SHIFT              (17U)
#define I2C_INTENCLR_MONIDLECLR_MASK             (0x80000U)
#define I2C_INTENCLR_MONIDLECLR_SHIFT            (19U)
#define I2C_INTENCLR_EVENTTIMEOUTCLR_MASK        (0x1000000U)
#define I2C_INTENCLR_EVENTTIMEOUTCLR_SHIFT       (24U)
#define I2C_INTENCLR_SCLTIMEOUTCLR_MASK          (0x2000000U)
#define I2C_INTENCLR_SCLTIMEOUTCLR_SHIFT         (25U)
/*! @} */

/*! @name TIMEOUT - Time-out Register */
/*! @{ */
#define I2C_TIMEOUT_TOMIN_MASK                   (0xFU)
#define I2C_TIMEOUT_TOMIN_SHIFT                  (0U)
/*! TOMIN - Time-out time value, the bottom 4 bits
 */
#define I2C_TIMEOUT_TOMIN(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_TIMEOUT_TOMIN_SHIFT)) & I2C_TIMEOUT_TOMIN_MASK)
#define I2C_TIMEOUT_TO_MASK                      (0xFFF0U)
#define I2C_TIMEOUT_TO_SHIFT                     (4U)
/*! TO - Time-out time value
 *  0b000000000000..A time-out will occur after 16 counts of the I2C function clock.
 *  0b000000000001..A time-out will occur after 32 counts of the I2C function clock.
 *  0b111111111111..A time-out will occur after 65,536 counts of the I2C function clock.
 */
#define I2C_TIMEOUT_TO(x)                        (((uint32_t)(((uint32_t)(x)) << I2C_TIMEOUT_TO_SHIFT)) & I2C_TIMEOUT_TO_MASK)
/*! @} */

/*! @name CLKDIV - Clock Divider Register */
/*! @{ */
#define I2C_CLKDIV_DIVVAL_MASK                   (0xFFFFU)
#define I2C_CLKDIV_DIVVAL_SHIFT                  (0U)
/*! DIVVAL - Divider Value
 *  0b0000000000000000..FCLK is used directly by the I2C.
 *  0b0000000000000001..FCLK is divided by 2 before being used by the I2C.
 *  0b0000000000000010..FCLK is divided by 3 before being used by the I2C.
 *  0b1111111111111111..FCLK is divided by 65,536 before being used by the I2C.
 */
#define I2C_CLKDIV_DIVVAL(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_CLKDIV_DIVVAL_SHIFT)) & I2C_CLKDIV_DIVVAL_MASK)
/*! @} */

/*! @name INTSTAT - Interrupt Status Register */
/*! @{ */
#define I2C_INTSTAT_MSTPENDING_MASK              (0x1U)
#define I2C_INTSTAT_MSTPENDING_SHIFT             (0U)
#define I2C_INTSTAT_MSTARBLOSS_MASK              (0x10U)
#define I2C_INTSTAT_MSTARBLOSS_SHIFT             (4U)
#define I2C_INTSTAT_MSTSTSTPERR_MASK             (0x40U)
#define I2C_INTSTAT_MSTSTSTPERR_SHIFT            (6U)
#define I2C_INTSTAT_SLVPENDING_MASK              (0x100U)
#define I2C_INTSTAT_SLVPENDING_SHIFT             (8U)
#define I2C_INTSTAT_SLVNOTSTR_MASK               (0x800U)
#define I2C_INTSTAT_SLVNOTSTR_SHIFT              (11U)
#define I2C_INTSTAT_SLVDESEL_MASK                (0x8000U)
#define I2C_INTSTAT_SLVDESEL_SHIFT               (15U)
#define I2C_INTSTAT_MONRDY_MASK                  (0x10000U)
#define I2C_INTSTAT_MONRDY_SHIFT                 (16U)
#define I2C_INTSTAT_MONOV_MASK                   (0x20000U)
#define I2C_INTSTAT_MONOV_SHIFT                  (17U)
#define I2C_INTSTAT_MONIDLE_MASK                 (0x80000U)
#define I2C_INTSTAT_MONIDLE_SHIFT                (19U)
#define I2C_INTSTAT_EVENTTIMEOUT_MASK            (0x1000000U)
#define I2C_INTSTAT_EVENTTIMEOUT_SHIFT           (24U)
#define I2C_INTSTAT_SCLTIMEOUT_MASK              (0x2000000U)
#define I2C_INTSTAT_SCLTIMEOUT_SHIFT             (25U)
/*! @} */

/*! @name MSTCTL - Master Control Register */
/*! @{ */
#define I2C_MSTCTL_MSTCONTINUE_MASK              (0x1U)
#define I2C_MSTCTL_MSTCONTINUE_SHIFT             (0U)
#define I2C_MSTCTL_MSTSTART_MASK                 (0x2U)
#define I2C_MSTCTL_MSTSTART_SHIFT                (1U)
#define I2C_MSTCTL_MSTSTOP_MASK                  (0x4U)
#define I2C_MSTCTL_MSTSTOP_SHIFT                 (2U)
#define I2C_MSTCTL_MSTDMA_MASK                   (0x8U)
#define I2C_MSTCTL_MSTDMA_SHIFT                  (3U)
/*! @} */

/*! @name MSTTIME - Master Timing Register */
/*! @{ */
#define I2C_MSTTIME_MSTSCLLOW_MASK               (0x7U)
#define I2C_MSTTIME_MSTSCLLOW_SHIFT              (0U)
/*! MSTSCLLOW - Master SCL Low time
 *  0b000..2 clocks. Minimum SCL low time is 2 clocks of the I2C clock pre-divider.
 *  0b001..3 clocks. Minimum SCL low time is 3 clocks of the I2C clock pre-divider.
 *  0b010..4 clocks. Minimum SCL low time is 4 clocks of the I2C clock pre-divider.
 *  0b011..5 clocks. Minimum SCL low time is 5 clocks of the I2C clock pre-divider.
 *  0b100..6 clocks. Minimum SCL low time is 6 clocks of the I2C clock pre-divider.
 *  0b101..7 clocks. Minimum SCL low time is 7 clocks of the I2C clock pre-divider.
 *  0b110..8 clocks. Minimum SCL low time is 8 clocks of the I2C clock pre-divider.
 *  0b111..9 clocks. Minimum SCL low time is 9 clocks of the I2C clock pre-divider.
 */
#define I2C_MSTTIME_MSTSCLLOW(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_MSTTIME_MSTSCLLOW_SHIFT)) & I2C_MSTTIME_MSTSCLLOW_MASK)
#define I2C_MSTTIME_MSTSCLHIGH_MASK              (0x70U)
#define I2C_MSTTIME_MSTSCLHIGH_SHIFT             (4U)
/*! MSTSCLHIGH - Master SCL High time
 *  0b000..2 clocks. Minimum SCL high time is 2 clocks of the I2C clock pre-divider.
 *  0b001..3 clocks. Minimum SCL high time is 3 clocks of the I2C clock pre-divider .
 *  0b010..4 clocks. Minimum SCL high time is 4 clocks of the I2C clock pre-divider.
 *  0b011..5 clocks. Minimum SCL high time is 5 clocks of the I2C clock pre-divider.
 *  0b100..6 clocks. Minimum SCL high time is 6 clocks of the I2C clock pre-divider.
 *  0b101..7 clocks. Minimum SCL high time is 7 clocks of the I2C clock pre-divider.
 *  0b110..8 clocks. Minimum SCL high time is 8 clocks of the I2C clock pre-divider.
 *  0b111..9 clocks. Minimum SCL high time is 9 clocks of the I2C clock pre-divider.
 */
#define I2C_MSTTIME_MSTSCLHIGH(x)                (((uint32_t)(((uint32_t)(x)) << I2C_MSTTIME_MSTSCLHIGH_SHIFT)) & I2C_MSTTIME_MSTSCLHIGH_MASK)
/*! @} */

/*! @name MSTDAT - Master Data Register */
/*! @{ */
#define I2C_MSTDAT_DATA_MASK                     (0xFFU)
#define I2C_MSTDAT_DATA_SHIFT                    (0U)
/*! DATA - Master function data register
 */
#define I2C_MSTDAT_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << I2C_MSTDAT_DATA_SHIFT)) & I2C_MSTDAT_DATA_MASK)
/*! @} */

/*! @name SLVCTL - Slave Control Register */
/*! @{ */
#define I2C_SLVCTL_SLVCONTINUE_MASK              (0x1U)
#define I2C_SLVCTL_SLVCONTINUE_SHIFT             (0U)
#define I2C_SLVCTL_SLVNACK_MASK                  (0x2U)
#define I2C_SLVCTL_SLVNACK_SHIFT                 (1U)
#define I2C_SLVCTL_SLVDMA_MASK                   (0x8U)
#define I2C_SLVCTL_SLVDMA_SHIFT                  (3U)
#define I2C_SLVCTL_AUTOACK_MASK                  (0x100U)
#define I2C_SLVCTL_AUTOACK_SHIFT                 (8U)
#define I2C_SLVCTL_AUTOMATCHREAD_MASK            (0x200U)
#define I2C_SLVCTL_AUTOMATCHREAD_SHIFT           (9U)
/*! @} */

/*! @name SLVDAT - Slave Data Register */
/*! @{ */
#define I2C_SLVDAT_DATA_MASK                     (0xFFU)
#define I2C_SLVDAT_DATA_SHIFT                    (0U)
/*! DATA - Slave function data register
 */
#define I2C_SLVDAT_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << I2C_SLVDAT_DATA_SHIFT)) & I2C_SLVDAT_DATA_MASK)
/*! @} */

/*! @name SLVADR - Slave Address Register */
/*! @{ */
#define I2C_SLVADR_SADISABLE_MASK                (0x1U)
#define I2C_SLVADR_SADISABLE_SHIFT               (0U)
#define I2C_SLVADR_SLVADR_MASK                   (0xFEU)
#define I2C_SLVADR_SLVADR_SHIFT                  (1U)
/*! SLVADR - Slave Address.
 */
#define I2C_SLVADR_SLVADR(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_SLVADR_SLVADR_SHIFT)) & I2C_SLVADR_SLVADR_MASK)
#define I2C_SLVADR_AUTONACK_MASK                 (0x8000U)
#define I2C_SLVADR_AUTONACK_SHIFT                (15U)
/*! @} */

/* The count of I2C_SLVADR */
#define I2C_SLVADR_COUNT                         (4U)

/*! @name SLVQUAL0 - Slave Qualification for Address 0 Register */
/*! @{ */
#define I2C_SLVQUAL0_QUALMODE0_MASK              (0x1U)
#define I2C_SLVQUAL0_QUALMODE0_SHIFT             (0U)
#define I2C_SLVQUAL0_SLVQUAL0_MASK               (0xFEU)
#define I2C_SLVQUAL0_SLVQUAL0_SHIFT              (1U)
/*! SLVQUAL0 - Slave address Qualifier for address 0
 */
#define I2C_SLVQUAL0_SLVQUAL0(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_SLVQUAL0_SLVQUAL0_SHIFT)) & I2C_SLVQUAL0_SLVQUAL0_MASK)
/*! @} */

/*! @name MONRXDAT - Monitor Receiver Data Register */
/*! @{ */
#define I2C_MONRXDAT_MONRXDAT_MASK               (0xFFU)
#define I2C_MONRXDAT_MONRXDAT_SHIFT              (0U)
/*! MONRXDAT - Monitor function Receiver Data
 */
#define I2C_MONRXDAT_MONRXDAT(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_MONRXDAT_MONRXDAT_SHIFT)) & I2C_MONRXDAT_MONRXDAT_MASK)
#define I2C_MONRXDAT_MONSTART_MASK               (0x100U)
#define I2C_MONRXDAT_MONSTART_SHIFT              (8U)
#define I2C_MONRXDAT_MONRESTART_MASK             (0x200U)
#define I2C_MONRXDAT_MONRESTART_SHIFT            (9U)
#define I2C_MONRXDAT_MONNACK_MASK                (0x400U)
#define I2C_MONRXDAT_MONNACK_SHIFT               (10U)
/*! @} */

/*! @name ID - Peripheral Identification Register */
/*! @{ */
#define I2C_ID_APERTURE_MASK                     (0xFFU)
#define I2C_ID_APERTURE_SHIFT                    (0U)
/*! APERTURE - Aperture
 */
#define I2C_ID_APERTURE(x)                       (((uint32_t)(((uint32_t)(x)) << I2C_ID_APERTURE_SHIFT)) & I2C_ID_APERTURE_MASK)
#define I2C_ID_MINOR_REV_MASK                    (0xF00U)
#define I2C_ID_MINOR_REV_SHIFT                   (8U)
/*! MINOR_REV - Minor revision of module implementation
 */
#define I2C_ID_MINOR_REV(x)                      (((uint32_t)(((uint32_t)(x)) << I2C_ID_MINOR_REV_SHIFT)) & I2C_ID_MINOR_REV_MASK)
#define I2C_ID_MAJOR_REV_MASK                    (0xF000U)
#define I2C_ID_MAJOR_REV_SHIFT                   (12U)
/*! MAJOR_REV - Major revision of module implementation
 */
#define I2C_ID_MAJOR_REV(x)                      (((uint32_t)(((uint32_t)(x)) << I2C_ID_MAJOR_REV_SHIFT)) & I2C_ID_MAJOR_REV_MASK)
#define I2C_ID_ID_MASK                           (0xFFFF0000U)
#define I2C_ID_ID_SHIFT                          (16U)
/*! ID - Module identifier for the selected function
 */
#define I2C_ID_ID(x)                             (((uint32_t)(((uint32_t)(x)) << I2C_ID_ID_SHIFT)) & I2C_ID_ID_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group I2C_Register_Masks */


/* I2C - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral I2C0 base pointer */
  #define I2C0_BASE_PTR                            ((I2C_MemMapPtr)0x50106000u)
  /** Peripheral I2C0 base pointer */
  #define I2C0_BASE_PTR_NS                         ((I2C_MemMapPtr)0x40106000u)
  /** Peripheral I2C1 base pointer */
  #define I2C1_BASE_PTR                            ((I2C_MemMapPtr)0x50107000u)
  /** Peripheral I2C1 base pointer */
  #define I2C1_BASE_PTR_NS                         ((I2C_MemMapPtr)0x40107000u)
  /** Peripheral I2C2 base pointer */
  #define I2C2_BASE_PTR                            ((I2C_MemMapPtr)0x50108000u)
  /** Peripheral I2C2 base pointer */
  #define I2C2_BASE_PTR_NS                         ((I2C_MemMapPtr)0x40108000u)
  /** Peripheral I2C3 base pointer */
  #define I2C3_BASE_PTR                            ((I2C_MemMapPtr)0x50109000u)
  /** Peripheral I2C3 base pointer */
  #define I2C3_BASE_PTR_NS                         ((I2C_MemMapPtr)0x40109000u)
  /** Peripheral I2C4 base pointer */
  #define I2C4_BASE_PTR                            ((I2C_MemMapPtr)0x50122000u)
  /** Peripheral I2C4 base pointer */
  #define I2C4_BASE_PTR_NS                         ((I2C_MemMapPtr)0x40122000u)
  /** Peripheral I2C5 base pointer */
  #define I2C5_BASE_PTR                            ((I2C_MemMapPtr)0x50123000u)
  /** Peripheral I2C5 base pointer */
  #define I2C5_BASE_PTR_NS                         ((I2C_MemMapPtr)0x40123000u)
  /** Peripheral I2C6 base pointer */
  #define I2C6_BASE_PTR                            ((I2C_MemMapPtr)0x50124000u)
  /** Peripheral I2C6 base pointer */
  #define I2C6_BASE_PTR_NS                         ((I2C_MemMapPtr)0x40124000u)
  /** Peripheral I2C7 base pointer */
  #define I2C7_BASE_PTR                            ((I2C_MemMapPtr)0x50125000u)
  /** Peripheral I2C7 base pointer */
  #define I2C7_BASE_PTR_NS                         ((I2C_MemMapPtr)0x40125000u)
  /** Peripheral I2C8 base pointer */
  #define I2C8_BASE_PTR                            ((I2C_MemMapPtr)0x50209000u)
  /** Peripheral I2C8 base pointer */
  #define I2C8_BASE_PTR_NS                         ((I2C_MemMapPtr)0x40209000u)
  /** Peripheral I2C9 base pointer */
  #define I2C9_BASE_PTR                            ((I2C_MemMapPtr)0x5020A000u)
  /** Peripheral I2C9 base pointer */
  #define I2C9_BASE_PTR_NS                         ((I2C_MemMapPtr)0x4020A000u)
  /** Peripheral I2C10 base pointer */
  #define I2C10_BASE_PTR                           ((I2C_MemMapPtr)0x5020B000u)
  /** Peripheral I2C10 base pointer */
  #define I2C10_BASE_PTR_NS                        ((I2C_MemMapPtr)0x4020B000u)
  /** Peripheral I2C11 base pointer */
  #define I2C11_BASE_PTR                           ((I2C_MemMapPtr)0x5020C000u)
  /** Peripheral I2C11 base pointer */
  #define I2C11_BASE_PTR_NS                        ((I2C_MemMapPtr)0x4020C000u)
  /** Peripheral I2C12 base pointer */
  #define I2C12_BASE_PTR                           ((I2C_MemMapPtr)0x5020D000u)
  /** Peripheral I2C12 base pointer */
  #define I2C12_BASE_PTR_NS                        ((I2C_MemMapPtr)0x4020D000u)
  /** Peripheral I2C13 base pointer */
  #define I2C13_BASE_PTR                           ((I2C_MemMapPtr)0x5020E000u)
  /** Peripheral I2C13 base pointer */
  #define I2C13_BASE_PTR_NS                        ((I2C_MemMapPtr)0x4020E000u)
  /** Peripheral I2C15 base pointer */
  #define I2C15_BASE_PTR                           ((I2C_MemMapPtr)0x50127000u)
  /** Peripheral I2C15 base pointer */
  #define I2C15_BASE_PTR_NS                        ((I2C_MemMapPtr)0x40127000u)
  /** Array initializer of I2C peripheral base pointers */
  #define I2C_BASE_PTRS                            { I2C0_BASE_PTR, I2C1_BASE_PTR, I2C2_BASE_PTR, I2C3_BASE_PTR, I2C4_BASE_PTR, I2C5_BASE_PTR, I2C6_BASE_PTR, I2C7_BASE_PTR, I2C8_BASE_PTR, I2C9_BASE_PTR, I2C10_BASE_PTR, I2C11_BASE_PTR, I2C12_BASE_PTR, I2C13_BASE_PTR, I2C15_BASE_PTR }
  /** Array initializer of I2C peripheral base pointers */
  #define I2C_BASE_PTRS_NS                         { I2C0_BASE_PTR_NS, I2C1_BASE_PTR_NS, I2C2_BASE_PTR_NS, I2C3_BASE_PTR_NS, I2C4_BASE_PTR_NS, I2C5_BASE_PTR_NS, I2C6_BASE_PTR_NS, I2C7_BASE_PTR_NS, I2C8_BASE_PTR_NS, I2C9_BASE_PTR_NS, I2C10_BASE_PTR_NS, I2C11_BASE_PTR_NS, I2C12_BASE_PTR_NS, I2C13_BASE_PTR_NS, I2C15_BASE_PTR_NS }
#else
  /** Peripheral I2C0 base pointer */
  #define I2C0_BASE_PTR                            ((I2C_MemMapPtr)0x40106000u)
  /** Peripheral I2C1 base pointer */
  #define I2C1_BASE_PTR                            ((I2C_MemMapPtr)0x40107000u)
  /** Peripheral I2C2 base pointer */
  #define I2C2_BASE_PTR                            ((I2C_MemMapPtr)0x40108000u)
  /** Peripheral I2C3 base pointer */
  #define I2C3_BASE_PTR                            ((I2C_MemMapPtr)0x40109000u)
  /** Peripheral I2C4 base pointer */
  #define I2C4_BASE_PTR                            ((I2C_MemMapPtr)0x40122000u)
  /** Peripheral I2C5 base pointer */
  #define I2C5_BASE_PTR                            ((I2C_MemMapPtr)0x40123000u)
  /** Peripheral I2C6 base pointer */
  #define I2C6_BASE_PTR                            ((I2C_MemMapPtr)0x40124000u)
  /** Peripheral I2C7 base pointer */
  #define I2C7_BASE_PTR                            ((I2C_MemMapPtr)0x40125000u)
  /** Peripheral I2C8 base pointer */
  #define I2C8_BASE_PTR                            ((I2C_MemMapPtr)0x40209000u)
  /** Peripheral I2C9 base pointer */
  #define I2C9_BASE_PTR                            ((I2C_MemMapPtr)0x4020A000u)
  /** Peripheral I2C10 base pointer */
  #define I2C10_BASE_PTR                           ((I2C_MemMapPtr)0x4020B000u)
  /** Peripheral I2C11 base pointer */
  #define I2C11_BASE_PTR                           ((I2C_MemMapPtr)0x4020C000u)
  /** Peripheral I2C12 base pointer */
  #define I2C12_BASE_PTR                           ((I2C_MemMapPtr)0x4020D000u)
  /** Peripheral I2C13 base pointer */
  #define I2C13_BASE_PTR                           ((I2C_MemMapPtr)0x4020E000u)
  /** Peripheral I2C15 base pointer */
  #define I2C15_BASE_PTR                           ((I2C_MemMapPtr)0x40127000u)
  /** Array initializer of I2C peripheral base pointers */
  #define I2C_BASE_PTRS                            { I2C0_BASE_PTR, I2C1_BASE_PTR, I2C2_BASE_PTR, I2C3_BASE_PTR, I2C4_BASE_PTR, I2C5_BASE_PTR, I2C6_BASE_PTR, I2C7_BASE_PTR, I2C8_BASE_PTR, I2C9_BASE_PTR, I2C10_BASE_PTR, I2C11_BASE_PTR, I2C12_BASE_PTR, I2C13_BASE_PTR, I2C15_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- I2C - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Accessor_Macros I2C - Register accessor macros
 * @{
 */


/* I2C - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* I2C0 */
  #define FLEXCOMM0__I2C_CFG                       I2C_CFG_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_CFG_NS                    I2C_CFG_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_STAT                      I2C_STAT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_STAT_NS                   I2C_STAT_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_INTENSET                  I2C_INTENSET_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_INTENSET_NS               I2C_INTENSET_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_INTENCLR_NS               I2C_INTENCLR_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_TIMEOUT_NS                I2C_TIMEOUT_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_CLKDIV_NS                 I2C_CLKDIV_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_INTSTAT_NS                I2C_INTSTAT_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_MSTCTL_NS                 I2C_MSTCTL_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_MSTTIME_NS                I2C_MSTTIME_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_MSTDAT_NS                 I2C_MSTDAT_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_SLVCTL_NS                 I2C_SLVCTL_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_SLVDAT_NS                 I2C_SLVDAT_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_SLVADR0                   I2C_SLVADR_REG(I2C0_BASE_PTR,0)
  #define FLEXCOMM0__I2C_SLVADR0_NS                I2C_SLVADR_REG(I2C0_BASE_PTR_NS,0)
  #define FLEXCOMM0__I2C_SLVADR1                   I2C_SLVADR_REG(I2C0_BASE_PTR,1)
  #define FLEXCOMM0__I2C_SLVADR1_NS                I2C_SLVADR_REG(I2C0_BASE_PTR_NS,1)
  #define FLEXCOMM0__I2C_SLVADR2                   I2C_SLVADR_REG(I2C0_BASE_PTR,2)
  #define FLEXCOMM0__I2C_SLVADR2_NS                I2C_SLVADR_REG(I2C0_BASE_PTR_NS,2)
  #define FLEXCOMM0__I2C_SLVADR3                   I2C_SLVADR_REG(I2C0_BASE_PTR,3)
  #define FLEXCOMM0__I2C_SLVADR3_NS                I2C_SLVADR_REG(I2C0_BASE_PTR_NS,3)
  #define FLEXCOMM0__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_SLVQUAL0_NS               I2C_SLVQUAL0_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_MONRXDAT_NS               I2C_MONRXDAT_REG(I2C0_BASE_PTR_NS)
  #define FLEXCOMM0__I2C_ID                        I2C_ID_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_ID_NS                     I2C_ID_REG(I2C0_BASE_PTR_NS)
  /* I2C1 */
  #define FLEXCOMM1__I2C_CFG                       I2C_CFG_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_CFG_NS                    I2C_CFG_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_STAT                      I2C_STAT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_STAT_NS                   I2C_STAT_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_INTENSET                  I2C_INTENSET_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_INTENSET_NS               I2C_INTENSET_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_INTENCLR_NS               I2C_INTENCLR_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_TIMEOUT_NS                I2C_TIMEOUT_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_CLKDIV_NS                 I2C_CLKDIV_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_INTSTAT_NS                I2C_INTSTAT_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_MSTCTL_NS                 I2C_MSTCTL_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_MSTTIME_NS                I2C_MSTTIME_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_MSTDAT_NS                 I2C_MSTDAT_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_SLVCTL_NS                 I2C_SLVCTL_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_SLVDAT_NS                 I2C_SLVDAT_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_SLVADR0                   I2C_SLVADR_REG(I2C1_BASE_PTR,0)
  #define FLEXCOMM1__I2C_SLVADR0_NS                I2C_SLVADR_REG(I2C1_BASE_PTR_NS,0)
  #define FLEXCOMM1__I2C_SLVADR1                   I2C_SLVADR_REG(I2C1_BASE_PTR,1)
  #define FLEXCOMM1__I2C_SLVADR1_NS                I2C_SLVADR_REG(I2C1_BASE_PTR_NS,1)
  #define FLEXCOMM1__I2C_SLVADR2                   I2C_SLVADR_REG(I2C1_BASE_PTR,2)
  #define FLEXCOMM1__I2C_SLVADR2_NS                I2C_SLVADR_REG(I2C1_BASE_PTR_NS,2)
  #define FLEXCOMM1__I2C_SLVADR3                   I2C_SLVADR_REG(I2C1_BASE_PTR,3)
  #define FLEXCOMM1__I2C_SLVADR3_NS                I2C_SLVADR_REG(I2C1_BASE_PTR_NS,3)
  #define FLEXCOMM1__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_SLVQUAL0_NS               I2C_SLVQUAL0_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_MONRXDAT_NS               I2C_MONRXDAT_REG(I2C1_BASE_PTR_NS)
  #define FLEXCOMM1__I2C_ID                        I2C_ID_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_ID_NS                     I2C_ID_REG(I2C1_BASE_PTR_NS)
  /* I2C2 */
  #define FLEXCOMM2__I2C_CFG                       I2C_CFG_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_CFG_NS                    I2C_CFG_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_STAT                      I2C_STAT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_STAT_NS                   I2C_STAT_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_INTENSET                  I2C_INTENSET_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_INTENSET_NS               I2C_INTENSET_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_INTENCLR_NS               I2C_INTENCLR_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_TIMEOUT_NS                I2C_TIMEOUT_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_CLKDIV_NS                 I2C_CLKDIV_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_INTSTAT_NS                I2C_INTSTAT_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_MSTCTL_NS                 I2C_MSTCTL_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_MSTTIME_NS                I2C_MSTTIME_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_MSTDAT_NS                 I2C_MSTDAT_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_SLVCTL_NS                 I2C_SLVCTL_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_SLVDAT_NS                 I2C_SLVDAT_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_SLVADR0                   I2C_SLVADR_REG(I2C2_BASE_PTR,0)
  #define FLEXCOMM2__I2C_SLVADR0_NS                I2C_SLVADR_REG(I2C2_BASE_PTR_NS,0)
  #define FLEXCOMM2__I2C_SLVADR1                   I2C_SLVADR_REG(I2C2_BASE_PTR,1)
  #define FLEXCOMM2__I2C_SLVADR1_NS                I2C_SLVADR_REG(I2C2_BASE_PTR_NS,1)
  #define FLEXCOMM2__I2C_SLVADR2                   I2C_SLVADR_REG(I2C2_BASE_PTR,2)
  #define FLEXCOMM2__I2C_SLVADR2_NS                I2C_SLVADR_REG(I2C2_BASE_PTR_NS,2)
  #define FLEXCOMM2__I2C_SLVADR3                   I2C_SLVADR_REG(I2C2_BASE_PTR,3)
  #define FLEXCOMM2__I2C_SLVADR3_NS                I2C_SLVADR_REG(I2C2_BASE_PTR_NS,3)
  #define FLEXCOMM2__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_SLVQUAL0_NS               I2C_SLVQUAL0_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_MONRXDAT_NS               I2C_MONRXDAT_REG(I2C2_BASE_PTR_NS)
  #define FLEXCOMM2__I2C_ID                        I2C_ID_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_ID_NS                     I2C_ID_REG(I2C2_BASE_PTR_NS)
  /* I2C3 */
  #define FLEXCOMM3__I2C_CFG                       I2C_CFG_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_CFG_NS                    I2C_CFG_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_STAT                      I2C_STAT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_STAT_NS                   I2C_STAT_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_INTENSET                  I2C_INTENSET_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_INTENSET_NS               I2C_INTENSET_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_INTENCLR_NS               I2C_INTENCLR_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_TIMEOUT_NS                I2C_TIMEOUT_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_CLKDIV_NS                 I2C_CLKDIV_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_INTSTAT_NS                I2C_INTSTAT_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_MSTCTL_NS                 I2C_MSTCTL_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_MSTTIME_NS                I2C_MSTTIME_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_MSTDAT_NS                 I2C_MSTDAT_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_SLVCTL_NS                 I2C_SLVCTL_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_SLVDAT_NS                 I2C_SLVDAT_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_SLVADR0                   I2C_SLVADR_REG(I2C3_BASE_PTR,0)
  #define FLEXCOMM3__I2C_SLVADR0_NS                I2C_SLVADR_REG(I2C3_BASE_PTR_NS,0)
  #define FLEXCOMM3__I2C_SLVADR1                   I2C_SLVADR_REG(I2C3_BASE_PTR,1)
  #define FLEXCOMM3__I2C_SLVADR1_NS                I2C_SLVADR_REG(I2C3_BASE_PTR_NS,1)
  #define FLEXCOMM3__I2C_SLVADR2                   I2C_SLVADR_REG(I2C3_BASE_PTR,2)
  #define FLEXCOMM3__I2C_SLVADR2_NS                I2C_SLVADR_REG(I2C3_BASE_PTR_NS,2)
  #define FLEXCOMM3__I2C_SLVADR3                   I2C_SLVADR_REG(I2C3_BASE_PTR,3)
  #define FLEXCOMM3__I2C_SLVADR3_NS                I2C_SLVADR_REG(I2C3_BASE_PTR_NS,3)
  #define FLEXCOMM3__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_SLVQUAL0_NS               I2C_SLVQUAL0_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_MONRXDAT_NS               I2C_MONRXDAT_REG(I2C3_BASE_PTR_NS)
  #define FLEXCOMM3__I2C_ID                        I2C_ID_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_ID_NS                     I2C_ID_REG(I2C3_BASE_PTR_NS)
  /* I2C4 */
  #define FLEXCOMM4__I2C_CFG                       I2C_CFG_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_CFG_NS                    I2C_CFG_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_STAT                      I2C_STAT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_STAT_NS                   I2C_STAT_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_INTENSET                  I2C_INTENSET_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_INTENSET_NS               I2C_INTENSET_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_INTENCLR_NS               I2C_INTENCLR_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_TIMEOUT_NS                I2C_TIMEOUT_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_CLKDIV_NS                 I2C_CLKDIV_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_INTSTAT_NS                I2C_INTSTAT_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_MSTCTL_NS                 I2C_MSTCTL_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_MSTTIME_NS                I2C_MSTTIME_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_MSTDAT_NS                 I2C_MSTDAT_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_SLVCTL_NS                 I2C_SLVCTL_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_SLVDAT_NS                 I2C_SLVDAT_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_SLVADR0                   I2C_SLVADR_REG(I2C4_BASE_PTR,0)
  #define FLEXCOMM4__I2C_SLVADR0_NS                I2C_SLVADR_REG(I2C4_BASE_PTR_NS,0)
  #define FLEXCOMM4__I2C_SLVADR1                   I2C_SLVADR_REG(I2C4_BASE_PTR,1)
  #define FLEXCOMM4__I2C_SLVADR1_NS                I2C_SLVADR_REG(I2C4_BASE_PTR_NS,1)
  #define FLEXCOMM4__I2C_SLVADR2                   I2C_SLVADR_REG(I2C4_BASE_PTR,2)
  #define FLEXCOMM4__I2C_SLVADR2_NS                I2C_SLVADR_REG(I2C4_BASE_PTR_NS,2)
  #define FLEXCOMM4__I2C_SLVADR3                   I2C_SLVADR_REG(I2C4_BASE_PTR,3)
  #define FLEXCOMM4__I2C_SLVADR3_NS                I2C_SLVADR_REG(I2C4_BASE_PTR_NS,3)
  #define FLEXCOMM4__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_SLVQUAL0_NS               I2C_SLVQUAL0_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_MONRXDAT_NS               I2C_MONRXDAT_REG(I2C4_BASE_PTR_NS)
  #define FLEXCOMM4__I2C_ID                        I2C_ID_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_ID_NS                     I2C_ID_REG(I2C4_BASE_PTR_NS)
  /* I2C5 */
  #define FLEXCOMM5__I2C_CFG                       I2C_CFG_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_CFG_NS                    I2C_CFG_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_STAT                      I2C_STAT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_STAT_NS                   I2C_STAT_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_INTENSET                  I2C_INTENSET_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_INTENSET_NS               I2C_INTENSET_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_INTENCLR_NS               I2C_INTENCLR_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_TIMEOUT_NS                I2C_TIMEOUT_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_CLKDIV_NS                 I2C_CLKDIV_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_INTSTAT_NS                I2C_INTSTAT_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_MSTCTL_NS                 I2C_MSTCTL_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_MSTTIME_NS                I2C_MSTTIME_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_MSTDAT_NS                 I2C_MSTDAT_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_SLVCTL_NS                 I2C_SLVCTL_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_SLVDAT_NS                 I2C_SLVDAT_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_SLVADR0                   I2C_SLVADR_REG(I2C5_BASE_PTR,0)
  #define FLEXCOMM5__I2C_SLVADR0_NS                I2C_SLVADR_REG(I2C5_BASE_PTR_NS,0)
  #define FLEXCOMM5__I2C_SLVADR1                   I2C_SLVADR_REG(I2C5_BASE_PTR,1)
  #define FLEXCOMM5__I2C_SLVADR1_NS                I2C_SLVADR_REG(I2C5_BASE_PTR_NS,1)
  #define FLEXCOMM5__I2C_SLVADR2                   I2C_SLVADR_REG(I2C5_BASE_PTR,2)
  #define FLEXCOMM5__I2C_SLVADR2_NS                I2C_SLVADR_REG(I2C5_BASE_PTR_NS,2)
  #define FLEXCOMM5__I2C_SLVADR3                   I2C_SLVADR_REG(I2C5_BASE_PTR,3)
  #define FLEXCOMM5__I2C_SLVADR3_NS                I2C_SLVADR_REG(I2C5_BASE_PTR_NS,3)
  #define FLEXCOMM5__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_SLVQUAL0_NS               I2C_SLVQUAL0_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_MONRXDAT_NS               I2C_MONRXDAT_REG(I2C5_BASE_PTR_NS)
  #define FLEXCOMM5__I2C_ID                        I2C_ID_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_ID_NS                     I2C_ID_REG(I2C5_BASE_PTR_NS)
  /* I2C6 */
  #define FLEXCOMM6__I2C_CFG                       I2C_CFG_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_CFG_NS                    I2C_CFG_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_STAT                      I2C_STAT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_STAT_NS                   I2C_STAT_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_INTENSET                  I2C_INTENSET_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_INTENSET_NS               I2C_INTENSET_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_INTENCLR_NS               I2C_INTENCLR_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_TIMEOUT_NS                I2C_TIMEOUT_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_CLKDIV_NS                 I2C_CLKDIV_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_INTSTAT_NS                I2C_INTSTAT_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_MSTCTL_NS                 I2C_MSTCTL_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_MSTTIME_NS                I2C_MSTTIME_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_MSTDAT_NS                 I2C_MSTDAT_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_SLVCTL_NS                 I2C_SLVCTL_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_SLVDAT_NS                 I2C_SLVDAT_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_SLVADR0                   I2C_SLVADR_REG(I2C6_BASE_PTR,0)
  #define FLEXCOMM6__I2C_SLVADR0_NS                I2C_SLVADR_REG(I2C6_BASE_PTR_NS,0)
  #define FLEXCOMM6__I2C_SLVADR1                   I2C_SLVADR_REG(I2C6_BASE_PTR,1)
  #define FLEXCOMM6__I2C_SLVADR1_NS                I2C_SLVADR_REG(I2C6_BASE_PTR_NS,1)
  #define FLEXCOMM6__I2C_SLVADR2                   I2C_SLVADR_REG(I2C6_BASE_PTR,2)
  #define FLEXCOMM6__I2C_SLVADR2_NS                I2C_SLVADR_REG(I2C6_BASE_PTR_NS,2)
  #define FLEXCOMM6__I2C_SLVADR3                   I2C_SLVADR_REG(I2C6_BASE_PTR,3)
  #define FLEXCOMM6__I2C_SLVADR3_NS                I2C_SLVADR_REG(I2C6_BASE_PTR_NS,3)
  #define FLEXCOMM6__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_SLVQUAL0_NS               I2C_SLVQUAL0_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_MONRXDAT_NS               I2C_MONRXDAT_REG(I2C6_BASE_PTR_NS)
  #define FLEXCOMM6__I2C_ID                        I2C_ID_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_ID_NS                     I2C_ID_REG(I2C6_BASE_PTR_NS)
  /* I2C7 */
  #define FLEXCOMM7__I2C_CFG                       I2C_CFG_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_CFG_NS                    I2C_CFG_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_STAT                      I2C_STAT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_STAT_NS                   I2C_STAT_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_INTENSET                  I2C_INTENSET_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_INTENSET_NS               I2C_INTENSET_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_INTENCLR_NS               I2C_INTENCLR_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_TIMEOUT_NS                I2C_TIMEOUT_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_CLKDIV_NS                 I2C_CLKDIV_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_INTSTAT_NS                I2C_INTSTAT_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_MSTCTL_NS                 I2C_MSTCTL_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_MSTTIME_NS                I2C_MSTTIME_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_MSTDAT_NS                 I2C_MSTDAT_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_SLVCTL_NS                 I2C_SLVCTL_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_SLVDAT_NS                 I2C_SLVDAT_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_SLVADR0                   I2C_SLVADR_REG(I2C7_BASE_PTR,0)
  #define FLEXCOMM7__I2C_SLVADR0_NS                I2C_SLVADR_REG(I2C7_BASE_PTR_NS,0)
  #define FLEXCOMM7__I2C_SLVADR1                   I2C_SLVADR_REG(I2C7_BASE_PTR,1)
  #define FLEXCOMM7__I2C_SLVADR1_NS                I2C_SLVADR_REG(I2C7_BASE_PTR_NS,1)
  #define FLEXCOMM7__I2C_SLVADR2                   I2C_SLVADR_REG(I2C7_BASE_PTR,2)
  #define FLEXCOMM7__I2C_SLVADR2_NS                I2C_SLVADR_REG(I2C7_BASE_PTR_NS,2)
  #define FLEXCOMM7__I2C_SLVADR3                   I2C_SLVADR_REG(I2C7_BASE_PTR,3)
  #define FLEXCOMM7__I2C_SLVADR3_NS                I2C_SLVADR_REG(I2C7_BASE_PTR_NS,3)
  #define FLEXCOMM7__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_SLVQUAL0_NS               I2C_SLVQUAL0_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_MONRXDAT_NS               I2C_MONRXDAT_REG(I2C7_BASE_PTR_NS)
  #define FLEXCOMM7__I2C_ID                        I2C_ID_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_ID_NS                     I2C_ID_REG(I2C7_BASE_PTR_NS)
  /* I2C8 */
  #define FLEXCOMM8__I2C_CFG                       I2C_CFG_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_CFG_NS                    I2C_CFG_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_STAT                      I2C_STAT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_STAT_NS                   I2C_STAT_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_INTENSET                  I2C_INTENSET_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_INTENSET_NS               I2C_INTENSET_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_INTENCLR_NS               I2C_INTENCLR_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_TIMEOUT_NS                I2C_TIMEOUT_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_CLKDIV_NS                 I2C_CLKDIV_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_INTSTAT_NS                I2C_INTSTAT_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_MSTCTL_NS                 I2C_MSTCTL_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_MSTTIME_NS                I2C_MSTTIME_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_MSTDAT_NS                 I2C_MSTDAT_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_SLVCTL_NS                 I2C_SLVCTL_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_SLVDAT_NS                 I2C_SLVDAT_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_SLVADR0                   I2C_SLVADR_REG(I2C8_BASE_PTR,0)
  #define FLEXCOMM8__I2C_SLVADR0_NS                I2C_SLVADR_REG(I2C8_BASE_PTR_NS,0)
  #define FLEXCOMM8__I2C_SLVADR1                   I2C_SLVADR_REG(I2C8_BASE_PTR,1)
  #define FLEXCOMM8__I2C_SLVADR1_NS                I2C_SLVADR_REG(I2C8_BASE_PTR_NS,1)
  #define FLEXCOMM8__I2C_SLVADR2                   I2C_SLVADR_REG(I2C8_BASE_PTR,2)
  #define FLEXCOMM8__I2C_SLVADR2_NS                I2C_SLVADR_REG(I2C8_BASE_PTR_NS,2)
  #define FLEXCOMM8__I2C_SLVADR3                   I2C_SLVADR_REG(I2C8_BASE_PTR,3)
  #define FLEXCOMM8__I2C_SLVADR3_NS                I2C_SLVADR_REG(I2C8_BASE_PTR_NS,3)
  #define FLEXCOMM8__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_SLVQUAL0_NS               I2C_SLVQUAL0_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_MONRXDAT_NS               I2C_MONRXDAT_REG(I2C8_BASE_PTR_NS)
  #define FLEXCOMM8__I2C_ID                        I2C_ID_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_ID_NS                     I2C_ID_REG(I2C8_BASE_PTR_NS)
  /* I2C9 */
  #define FLEXCOMM9__I2C_CFG                       I2C_CFG_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_CFG_NS                    I2C_CFG_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_STAT                      I2C_STAT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_STAT_NS                   I2C_STAT_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_INTENSET                  I2C_INTENSET_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_INTENSET_NS               I2C_INTENSET_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_INTENCLR_NS               I2C_INTENCLR_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_TIMEOUT_NS                I2C_TIMEOUT_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_CLKDIV_NS                 I2C_CLKDIV_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_INTSTAT_NS                I2C_INTSTAT_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_MSTCTL_NS                 I2C_MSTCTL_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_MSTTIME_NS                I2C_MSTTIME_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_MSTDAT_NS                 I2C_MSTDAT_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_SLVCTL_NS                 I2C_SLVCTL_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_SLVDAT_NS                 I2C_SLVDAT_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_SLVADR0                   I2C_SLVADR_REG(I2C9_BASE_PTR,0)
  #define FLEXCOMM9__I2C_SLVADR0_NS                I2C_SLVADR_REG(I2C9_BASE_PTR_NS,0)
  #define FLEXCOMM9__I2C_SLVADR1                   I2C_SLVADR_REG(I2C9_BASE_PTR,1)
  #define FLEXCOMM9__I2C_SLVADR1_NS                I2C_SLVADR_REG(I2C9_BASE_PTR_NS,1)
  #define FLEXCOMM9__I2C_SLVADR2                   I2C_SLVADR_REG(I2C9_BASE_PTR,2)
  #define FLEXCOMM9__I2C_SLVADR2_NS                I2C_SLVADR_REG(I2C9_BASE_PTR_NS,2)
  #define FLEXCOMM9__I2C_SLVADR3                   I2C_SLVADR_REG(I2C9_BASE_PTR,3)
  #define FLEXCOMM9__I2C_SLVADR3_NS                I2C_SLVADR_REG(I2C9_BASE_PTR_NS,3)
  #define FLEXCOMM9__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_SLVQUAL0_NS               I2C_SLVQUAL0_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_MONRXDAT_NS               I2C_MONRXDAT_REG(I2C9_BASE_PTR_NS)
  #define FLEXCOMM9__I2C_ID                        I2C_ID_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_ID_NS                     I2C_ID_REG(I2C9_BASE_PTR_NS)
  /* I2C10 */
  #define FLEXCOMM10__I2C_CFG                      I2C_CFG_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_CFG_NS                   I2C_CFG_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_STAT                     I2C_STAT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_STAT_NS                  I2C_STAT_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_INTENSET                 I2C_INTENSET_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_INTENSET_NS              I2C_INTENSET_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_INTENCLR                 I2C_INTENCLR_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_INTENCLR_NS              I2C_INTENCLR_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_TIMEOUT                  I2C_TIMEOUT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_TIMEOUT_NS               I2C_TIMEOUT_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_CLKDIV                   I2C_CLKDIV_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_CLKDIV_NS                I2C_CLKDIV_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_INTSTAT                  I2C_INTSTAT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_INTSTAT_NS               I2C_INTSTAT_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_MSTCTL                   I2C_MSTCTL_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_MSTCTL_NS                I2C_MSTCTL_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_MSTTIME                  I2C_MSTTIME_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_MSTTIME_NS               I2C_MSTTIME_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_MSTDAT                   I2C_MSTDAT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_MSTDAT_NS                I2C_MSTDAT_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_SLVCTL                   I2C_SLVCTL_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_SLVCTL_NS                I2C_SLVCTL_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_SLVDAT                   I2C_SLVDAT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_SLVDAT_NS                I2C_SLVDAT_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_SLVADR0                  I2C_SLVADR_REG(I2C10_BASE_PTR,0)
  #define FLEXCOMM10__I2C_SLVADR0_NS               I2C_SLVADR_REG(I2C10_BASE_PTR_NS,0)
  #define FLEXCOMM10__I2C_SLVADR1                  I2C_SLVADR_REG(I2C10_BASE_PTR,1)
  #define FLEXCOMM10__I2C_SLVADR1_NS               I2C_SLVADR_REG(I2C10_BASE_PTR_NS,1)
  #define FLEXCOMM10__I2C_SLVADR2                  I2C_SLVADR_REG(I2C10_BASE_PTR,2)
  #define FLEXCOMM10__I2C_SLVADR2_NS               I2C_SLVADR_REG(I2C10_BASE_PTR_NS,2)
  #define FLEXCOMM10__I2C_SLVADR3                  I2C_SLVADR_REG(I2C10_BASE_PTR,3)
  #define FLEXCOMM10__I2C_SLVADR3_NS               I2C_SLVADR_REG(I2C10_BASE_PTR_NS,3)
  #define FLEXCOMM10__I2C_SLVQUAL0                 I2C_SLVQUAL0_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_SLVQUAL0_NS              I2C_SLVQUAL0_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_MONRXDAT                 I2C_MONRXDAT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_MONRXDAT_NS              I2C_MONRXDAT_REG(I2C10_BASE_PTR_NS)
  #define FLEXCOMM10__I2C_ID                       I2C_ID_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_ID_NS                    I2C_ID_REG(I2C10_BASE_PTR_NS)
  /* I2C11 */
  #define FLEXCOMM11__I2C_CFG                      I2C_CFG_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_CFG_NS                   I2C_CFG_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_STAT                     I2C_STAT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_STAT_NS                  I2C_STAT_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_INTENSET                 I2C_INTENSET_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_INTENSET_NS              I2C_INTENSET_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_INTENCLR                 I2C_INTENCLR_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_INTENCLR_NS              I2C_INTENCLR_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_TIMEOUT                  I2C_TIMEOUT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_TIMEOUT_NS               I2C_TIMEOUT_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_CLKDIV                   I2C_CLKDIV_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_CLKDIV_NS                I2C_CLKDIV_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_INTSTAT                  I2C_INTSTAT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_INTSTAT_NS               I2C_INTSTAT_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_MSTCTL                   I2C_MSTCTL_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_MSTCTL_NS                I2C_MSTCTL_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_MSTTIME                  I2C_MSTTIME_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_MSTTIME_NS               I2C_MSTTIME_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_MSTDAT                   I2C_MSTDAT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_MSTDAT_NS                I2C_MSTDAT_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_SLVCTL                   I2C_SLVCTL_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_SLVCTL_NS                I2C_SLVCTL_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_SLVDAT                   I2C_SLVDAT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_SLVDAT_NS                I2C_SLVDAT_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_SLVADR0                  I2C_SLVADR_REG(I2C11_BASE_PTR,0)
  #define FLEXCOMM11__I2C_SLVADR0_NS               I2C_SLVADR_REG(I2C11_BASE_PTR_NS,0)
  #define FLEXCOMM11__I2C_SLVADR1                  I2C_SLVADR_REG(I2C11_BASE_PTR,1)
  #define FLEXCOMM11__I2C_SLVADR1_NS               I2C_SLVADR_REG(I2C11_BASE_PTR_NS,1)
  #define FLEXCOMM11__I2C_SLVADR2                  I2C_SLVADR_REG(I2C11_BASE_PTR,2)
  #define FLEXCOMM11__I2C_SLVADR2_NS               I2C_SLVADR_REG(I2C11_BASE_PTR_NS,2)
  #define FLEXCOMM11__I2C_SLVADR3                  I2C_SLVADR_REG(I2C11_BASE_PTR,3)
  #define FLEXCOMM11__I2C_SLVADR3_NS               I2C_SLVADR_REG(I2C11_BASE_PTR_NS,3)
  #define FLEXCOMM11__I2C_SLVQUAL0                 I2C_SLVQUAL0_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_SLVQUAL0_NS              I2C_SLVQUAL0_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_MONRXDAT                 I2C_MONRXDAT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_MONRXDAT_NS              I2C_MONRXDAT_REG(I2C11_BASE_PTR_NS)
  #define FLEXCOMM11__I2C_ID                       I2C_ID_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_ID_NS                    I2C_ID_REG(I2C11_BASE_PTR_NS)
  /* I2C12 */
  #define FLEXCOMM12__I2C_CFG                      I2C_CFG_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_CFG_NS                   I2C_CFG_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_STAT                     I2C_STAT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_STAT_NS                  I2C_STAT_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_INTENSET                 I2C_INTENSET_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_INTENSET_NS              I2C_INTENSET_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_INTENCLR                 I2C_INTENCLR_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_INTENCLR_NS              I2C_INTENCLR_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_TIMEOUT                  I2C_TIMEOUT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_TIMEOUT_NS               I2C_TIMEOUT_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_CLKDIV                   I2C_CLKDIV_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_CLKDIV_NS                I2C_CLKDIV_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_INTSTAT                  I2C_INTSTAT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_INTSTAT_NS               I2C_INTSTAT_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_MSTCTL                   I2C_MSTCTL_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_MSTCTL_NS                I2C_MSTCTL_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_MSTTIME                  I2C_MSTTIME_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_MSTTIME_NS               I2C_MSTTIME_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_MSTDAT                   I2C_MSTDAT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_MSTDAT_NS                I2C_MSTDAT_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_SLVCTL                   I2C_SLVCTL_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_SLVCTL_NS                I2C_SLVCTL_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_SLVDAT                   I2C_SLVDAT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_SLVDAT_NS                I2C_SLVDAT_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_SLVADR0                  I2C_SLVADR_REG(I2C12_BASE_PTR,0)
  #define FLEXCOMM12__I2C_SLVADR0_NS               I2C_SLVADR_REG(I2C12_BASE_PTR_NS,0)
  #define FLEXCOMM12__I2C_SLVADR1                  I2C_SLVADR_REG(I2C12_BASE_PTR,1)
  #define FLEXCOMM12__I2C_SLVADR1_NS               I2C_SLVADR_REG(I2C12_BASE_PTR_NS,1)
  #define FLEXCOMM12__I2C_SLVADR2                  I2C_SLVADR_REG(I2C12_BASE_PTR,2)
  #define FLEXCOMM12__I2C_SLVADR2_NS               I2C_SLVADR_REG(I2C12_BASE_PTR_NS,2)
  #define FLEXCOMM12__I2C_SLVADR3                  I2C_SLVADR_REG(I2C12_BASE_PTR,3)
  #define FLEXCOMM12__I2C_SLVADR3_NS               I2C_SLVADR_REG(I2C12_BASE_PTR_NS,3)
  #define FLEXCOMM12__I2C_SLVQUAL0                 I2C_SLVQUAL0_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_SLVQUAL0_NS              I2C_SLVQUAL0_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_MONRXDAT                 I2C_MONRXDAT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_MONRXDAT_NS              I2C_MONRXDAT_REG(I2C12_BASE_PTR_NS)
  #define FLEXCOMM12__I2C_ID                       I2C_ID_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_ID_NS                    I2C_ID_REG(I2C12_BASE_PTR_NS)
  /* I2C13 */
  #define FLEXCOMM13__I2C_CFG                      I2C_CFG_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_CFG_NS                   I2C_CFG_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_STAT                     I2C_STAT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_STAT_NS                  I2C_STAT_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_INTENSET                 I2C_INTENSET_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_INTENSET_NS              I2C_INTENSET_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_INTENCLR                 I2C_INTENCLR_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_INTENCLR_NS              I2C_INTENCLR_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_TIMEOUT                  I2C_TIMEOUT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_TIMEOUT_NS               I2C_TIMEOUT_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_CLKDIV                   I2C_CLKDIV_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_CLKDIV_NS                I2C_CLKDIV_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_INTSTAT                  I2C_INTSTAT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_INTSTAT_NS               I2C_INTSTAT_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_MSTCTL                   I2C_MSTCTL_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_MSTCTL_NS                I2C_MSTCTL_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_MSTTIME                  I2C_MSTTIME_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_MSTTIME_NS               I2C_MSTTIME_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_MSTDAT                   I2C_MSTDAT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_MSTDAT_NS                I2C_MSTDAT_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_SLVCTL                   I2C_SLVCTL_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_SLVCTL_NS                I2C_SLVCTL_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_SLVDAT                   I2C_SLVDAT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_SLVDAT_NS                I2C_SLVDAT_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_SLVADR0                  I2C_SLVADR_REG(I2C13_BASE_PTR,0)
  #define FLEXCOMM13__I2C_SLVADR0_NS               I2C_SLVADR_REG(I2C13_BASE_PTR_NS,0)
  #define FLEXCOMM13__I2C_SLVADR1                  I2C_SLVADR_REG(I2C13_BASE_PTR,1)
  #define FLEXCOMM13__I2C_SLVADR1_NS               I2C_SLVADR_REG(I2C13_BASE_PTR_NS,1)
  #define FLEXCOMM13__I2C_SLVADR2                  I2C_SLVADR_REG(I2C13_BASE_PTR,2)
  #define FLEXCOMM13__I2C_SLVADR2_NS               I2C_SLVADR_REG(I2C13_BASE_PTR_NS,2)
  #define FLEXCOMM13__I2C_SLVADR3                  I2C_SLVADR_REG(I2C13_BASE_PTR,3)
  #define FLEXCOMM13__I2C_SLVADR3_NS               I2C_SLVADR_REG(I2C13_BASE_PTR_NS,3)
  #define FLEXCOMM13__I2C_SLVQUAL0                 I2C_SLVQUAL0_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_SLVQUAL0_NS              I2C_SLVQUAL0_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_MONRXDAT                 I2C_MONRXDAT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_MONRXDAT_NS              I2C_MONRXDAT_REG(I2C13_BASE_PTR_NS)
  #define FLEXCOMM13__I2C_ID                       I2C_ID_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_ID_NS                    I2C_ID_REG(I2C13_BASE_PTR_NS)
  /* I2C15 */
  #define FLEXCOMM15__I2C_CFG                      I2C_CFG_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_CFG_NS                   I2C_CFG_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_STAT                     I2C_STAT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_STAT_NS                  I2C_STAT_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_INTENSET                 I2C_INTENSET_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_INTENSET_NS              I2C_INTENSET_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_INTENCLR                 I2C_INTENCLR_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_INTENCLR_NS              I2C_INTENCLR_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_TIMEOUT                  I2C_TIMEOUT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_TIMEOUT_NS               I2C_TIMEOUT_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_CLKDIV                   I2C_CLKDIV_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_CLKDIV_NS                I2C_CLKDIV_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_INTSTAT                  I2C_INTSTAT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_INTSTAT_NS               I2C_INTSTAT_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_MSTCTL                   I2C_MSTCTL_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_MSTCTL_NS                I2C_MSTCTL_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_MSTTIME                  I2C_MSTTIME_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_MSTTIME_NS               I2C_MSTTIME_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_MSTDAT                   I2C_MSTDAT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_MSTDAT_NS                I2C_MSTDAT_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_SLVCTL                   I2C_SLVCTL_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_SLVCTL_NS                I2C_SLVCTL_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_SLVDAT                   I2C_SLVDAT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_SLVDAT_NS                I2C_SLVDAT_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_SLVADR0                  I2C_SLVADR_REG(I2C15_BASE_PTR,0)
  #define FLEXCOMM15__I2C_SLVADR0_NS               I2C_SLVADR_REG(I2C15_BASE_PTR_NS,0)
  #define FLEXCOMM15__I2C_SLVADR1                  I2C_SLVADR_REG(I2C15_BASE_PTR,1)
  #define FLEXCOMM15__I2C_SLVADR1_NS               I2C_SLVADR_REG(I2C15_BASE_PTR_NS,1)
  #define FLEXCOMM15__I2C_SLVADR2                  I2C_SLVADR_REG(I2C15_BASE_PTR,2)
  #define FLEXCOMM15__I2C_SLVADR2_NS               I2C_SLVADR_REG(I2C15_BASE_PTR_NS,2)
  #define FLEXCOMM15__I2C_SLVADR3                  I2C_SLVADR_REG(I2C15_BASE_PTR,3)
  #define FLEXCOMM15__I2C_SLVADR3_NS               I2C_SLVADR_REG(I2C15_BASE_PTR_NS,3)
  #define FLEXCOMM15__I2C_SLVQUAL0                 I2C_SLVQUAL0_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_SLVQUAL0_NS              I2C_SLVQUAL0_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_MONRXDAT                 I2C_MONRXDAT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_MONRXDAT_NS              I2C_MONRXDAT_REG(I2C15_BASE_PTR_NS)
  #define FLEXCOMM15__I2C_ID                       I2C_ID_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_ID_NS                    I2C_ID_REG(I2C15_BASE_PTR_NS)
#else
  /* I2C0 */
  #define FLEXCOMM0__I2C_CFG                       I2C_CFG_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_STAT                      I2C_STAT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_INTENSET                  I2C_INTENSET_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_SLVADR0                   I2C_SLVADR_REG(I2C0_BASE_PTR,0)
  #define FLEXCOMM0__I2C_SLVADR1                   I2C_SLVADR_REG(I2C0_BASE_PTR,1)
  #define FLEXCOMM0__I2C_SLVADR2                   I2C_SLVADR_REG(I2C0_BASE_PTR,2)
  #define FLEXCOMM0__I2C_SLVADR3                   I2C_SLVADR_REG(I2C0_BASE_PTR,3)
  #define FLEXCOMM0__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C0_BASE_PTR)
  #define FLEXCOMM0__I2C_ID                        I2C_ID_REG(I2C0_BASE_PTR)
  /* I2C1 */
  #define FLEXCOMM1__I2C_CFG                       I2C_CFG_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_STAT                      I2C_STAT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_INTENSET                  I2C_INTENSET_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_SLVADR0                   I2C_SLVADR_REG(I2C1_BASE_PTR,0)
  #define FLEXCOMM1__I2C_SLVADR1                   I2C_SLVADR_REG(I2C1_BASE_PTR,1)
  #define FLEXCOMM1__I2C_SLVADR2                   I2C_SLVADR_REG(I2C1_BASE_PTR,2)
  #define FLEXCOMM1__I2C_SLVADR3                   I2C_SLVADR_REG(I2C1_BASE_PTR,3)
  #define FLEXCOMM1__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C1_BASE_PTR)
  #define FLEXCOMM1__I2C_ID                        I2C_ID_REG(I2C1_BASE_PTR)
  /* I2C2 */
  #define FLEXCOMM2__I2C_CFG                       I2C_CFG_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_STAT                      I2C_STAT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_INTENSET                  I2C_INTENSET_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_SLVADR0                   I2C_SLVADR_REG(I2C2_BASE_PTR,0)
  #define FLEXCOMM2__I2C_SLVADR1                   I2C_SLVADR_REG(I2C2_BASE_PTR,1)
  #define FLEXCOMM2__I2C_SLVADR2                   I2C_SLVADR_REG(I2C2_BASE_PTR,2)
  #define FLEXCOMM2__I2C_SLVADR3                   I2C_SLVADR_REG(I2C2_BASE_PTR,3)
  #define FLEXCOMM2__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C2_BASE_PTR)
  #define FLEXCOMM2__I2C_ID                        I2C_ID_REG(I2C2_BASE_PTR)
  /* I2C3 */
  #define FLEXCOMM3__I2C_CFG                       I2C_CFG_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_STAT                      I2C_STAT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_INTENSET                  I2C_INTENSET_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_SLVADR0                   I2C_SLVADR_REG(I2C3_BASE_PTR,0)
  #define FLEXCOMM3__I2C_SLVADR1                   I2C_SLVADR_REG(I2C3_BASE_PTR,1)
  #define FLEXCOMM3__I2C_SLVADR2                   I2C_SLVADR_REG(I2C3_BASE_PTR,2)
  #define FLEXCOMM3__I2C_SLVADR3                   I2C_SLVADR_REG(I2C3_BASE_PTR,3)
  #define FLEXCOMM3__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C3_BASE_PTR)
  #define FLEXCOMM3__I2C_ID                        I2C_ID_REG(I2C3_BASE_PTR)
  /* I2C4 */
  #define FLEXCOMM4__I2C_CFG                       I2C_CFG_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_STAT                      I2C_STAT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_INTENSET                  I2C_INTENSET_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_SLVADR0                   I2C_SLVADR_REG(I2C4_BASE_PTR,0)
  #define FLEXCOMM4__I2C_SLVADR1                   I2C_SLVADR_REG(I2C4_BASE_PTR,1)
  #define FLEXCOMM4__I2C_SLVADR2                   I2C_SLVADR_REG(I2C4_BASE_PTR,2)
  #define FLEXCOMM4__I2C_SLVADR3                   I2C_SLVADR_REG(I2C4_BASE_PTR,3)
  #define FLEXCOMM4__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C4_BASE_PTR)
  #define FLEXCOMM4__I2C_ID                        I2C_ID_REG(I2C4_BASE_PTR)
  /* I2C5 */
  #define FLEXCOMM5__I2C_CFG                       I2C_CFG_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_STAT                      I2C_STAT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_INTENSET                  I2C_INTENSET_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_SLVADR0                   I2C_SLVADR_REG(I2C5_BASE_PTR,0)
  #define FLEXCOMM5__I2C_SLVADR1                   I2C_SLVADR_REG(I2C5_BASE_PTR,1)
  #define FLEXCOMM5__I2C_SLVADR2                   I2C_SLVADR_REG(I2C5_BASE_PTR,2)
  #define FLEXCOMM5__I2C_SLVADR3                   I2C_SLVADR_REG(I2C5_BASE_PTR,3)
  #define FLEXCOMM5__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C5_BASE_PTR)
  #define FLEXCOMM5__I2C_ID                        I2C_ID_REG(I2C5_BASE_PTR)
  /* I2C6 */
  #define FLEXCOMM6__I2C_CFG                       I2C_CFG_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_STAT                      I2C_STAT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_INTENSET                  I2C_INTENSET_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_SLVADR0                   I2C_SLVADR_REG(I2C6_BASE_PTR,0)
  #define FLEXCOMM6__I2C_SLVADR1                   I2C_SLVADR_REG(I2C6_BASE_PTR,1)
  #define FLEXCOMM6__I2C_SLVADR2                   I2C_SLVADR_REG(I2C6_BASE_PTR,2)
  #define FLEXCOMM6__I2C_SLVADR3                   I2C_SLVADR_REG(I2C6_BASE_PTR,3)
  #define FLEXCOMM6__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C6_BASE_PTR)
  #define FLEXCOMM6__I2C_ID                        I2C_ID_REG(I2C6_BASE_PTR)
  /* I2C7 */
  #define FLEXCOMM7__I2C_CFG                       I2C_CFG_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_STAT                      I2C_STAT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_INTENSET                  I2C_INTENSET_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_SLVADR0                   I2C_SLVADR_REG(I2C7_BASE_PTR,0)
  #define FLEXCOMM7__I2C_SLVADR1                   I2C_SLVADR_REG(I2C7_BASE_PTR,1)
  #define FLEXCOMM7__I2C_SLVADR2                   I2C_SLVADR_REG(I2C7_BASE_PTR,2)
  #define FLEXCOMM7__I2C_SLVADR3                   I2C_SLVADR_REG(I2C7_BASE_PTR,3)
  #define FLEXCOMM7__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C7_BASE_PTR)
  #define FLEXCOMM7__I2C_ID                        I2C_ID_REG(I2C7_BASE_PTR)
  /* I2C8 */
  #define FLEXCOMM8__I2C_CFG                       I2C_CFG_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_STAT                      I2C_STAT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_INTENSET                  I2C_INTENSET_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_SLVADR0                   I2C_SLVADR_REG(I2C8_BASE_PTR,0)
  #define FLEXCOMM8__I2C_SLVADR1                   I2C_SLVADR_REG(I2C8_BASE_PTR,1)
  #define FLEXCOMM8__I2C_SLVADR2                   I2C_SLVADR_REG(I2C8_BASE_PTR,2)
  #define FLEXCOMM8__I2C_SLVADR3                   I2C_SLVADR_REG(I2C8_BASE_PTR,3)
  #define FLEXCOMM8__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C8_BASE_PTR)
  #define FLEXCOMM8__I2C_ID                        I2C_ID_REG(I2C8_BASE_PTR)
  /* I2C9 */
  #define FLEXCOMM9__I2C_CFG                       I2C_CFG_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_STAT                      I2C_STAT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_INTENSET                  I2C_INTENSET_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_INTENCLR                  I2C_INTENCLR_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_TIMEOUT                   I2C_TIMEOUT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_CLKDIV                    I2C_CLKDIV_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_INTSTAT                   I2C_INTSTAT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_MSTCTL                    I2C_MSTCTL_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_MSTTIME                   I2C_MSTTIME_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_MSTDAT                    I2C_MSTDAT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_SLVCTL                    I2C_SLVCTL_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_SLVDAT                    I2C_SLVDAT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_SLVADR0                   I2C_SLVADR_REG(I2C9_BASE_PTR,0)
  #define FLEXCOMM9__I2C_SLVADR1                   I2C_SLVADR_REG(I2C9_BASE_PTR,1)
  #define FLEXCOMM9__I2C_SLVADR2                   I2C_SLVADR_REG(I2C9_BASE_PTR,2)
  #define FLEXCOMM9__I2C_SLVADR3                   I2C_SLVADR_REG(I2C9_BASE_PTR,3)
  #define FLEXCOMM9__I2C_SLVQUAL0                  I2C_SLVQUAL0_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_MONRXDAT                  I2C_MONRXDAT_REG(I2C9_BASE_PTR)
  #define FLEXCOMM9__I2C_ID                        I2C_ID_REG(I2C9_BASE_PTR)
  /* I2C10 */
  #define FLEXCOMM10__I2C_CFG                      I2C_CFG_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_STAT                     I2C_STAT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_INTENSET                 I2C_INTENSET_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_INTENCLR                 I2C_INTENCLR_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_TIMEOUT                  I2C_TIMEOUT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_CLKDIV                   I2C_CLKDIV_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_INTSTAT                  I2C_INTSTAT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_MSTCTL                   I2C_MSTCTL_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_MSTTIME                  I2C_MSTTIME_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_MSTDAT                   I2C_MSTDAT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_SLVCTL                   I2C_SLVCTL_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_SLVDAT                   I2C_SLVDAT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_SLVADR0                  I2C_SLVADR_REG(I2C10_BASE_PTR,0)
  #define FLEXCOMM10__I2C_SLVADR1                  I2C_SLVADR_REG(I2C10_BASE_PTR,1)
  #define FLEXCOMM10__I2C_SLVADR2                  I2C_SLVADR_REG(I2C10_BASE_PTR,2)
  #define FLEXCOMM10__I2C_SLVADR3                  I2C_SLVADR_REG(I2C10_BASE_PTR,3)
  #define FLEXCOMM10__I2C_SLVQUAL0                 I2C_SLVQUAL0_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_MONRXDAT                 I2C_MONRXDAT_REG(I2C10_BASE_PTR)
  #define FLEXCOMM10__I2C_ID                       I2C_ID_REG(I2C10_BASE_PTR)
  /* I2C11 */
  #define FLEXCOMM11__I2C_CFG                      I2C_CFG_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_STAT                     I2C_STAT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_INTENSET                 I2C_INTENSET_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_INTENCLR                 I2C_INTENCLR_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_TIMEOUT                  I2C_TIMEOUT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_CLKDIV                   I2C_CLKDIV_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_INTSTAT                  I2C_INTSTAT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_MSTCTL                   I2C_MSTCTL_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_MSTTIME                  I2C_MSTTIME_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_MSTDAT                   I2C_MSTDAT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_SLVCTL                   I2C_SLVCTL_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_SLVDAT                   I2C_SLVDAT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_SLVADR0                  I2C_SLVADR_REG(I2C11_BASE_PTR,0)
  #define FLEXCOMM11__I2C_SLVADR1                  I2C_SLVADR_REG(I2C11_BASE_PTR,1)
  #define FLEXCOMM11__I2C_SLVADR2                  I2C_SLVADR_REG(I2C11_BASE_PTR,2)
  #define FLEXCOMM11__I2C_SLVADR3                  I2C_SLVADR_REG(I2C11_BASE_PTR,3)
  #define FLEXCOMM11__I2C_SLVQUAL0                 I2C_SLVQUAL0_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_MONRXDAT                 I2C_MONRXDAT_REG(I2C11_BASE_PTR)
  #define FLEXCOMM11__I2C_ID                       I2C_ID_REG(I2C11_BASE_PTR)
  /* I2C12 */
  #define FLEXCOMM12__I2C_CFG                      I2C_CFG_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_STAT                     I2C_STAT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_INTENSET                 I2C_INTENSET_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_INTENCLR                 I2C_INTENCLR_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_TIMEOUT                  I2C_TIMEOUT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_CLKDIV                   I2C_CLKDIV_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_INTSTAT                  I2C_INTSTAT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_MSTCTL                   I2C_MSTCTL_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_MSTTIME                  I2C_MSTTIME_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_MSTDAT                   I2C_MSTDAT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_SLVCTL                   I2C_SLVCTL_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_SLVDAT                   I2C_SLVDAT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_SLVADR0                  I2C_SLVADR_REG(I2C12_BASE_PTR,0)
  #define FLEXCOMM12__I2C_SLVADR1                  I2C_SLVADR_REG(I2C12_BASE_PTR,1)
  #define FLEXCOMM12__I2C_SLVADR2                  I2C_SLVADR_REG(I2C12_BASE_PTR,2)
  #define FLEXCOMM12__I2C_SLVADR3                  I2C_SLVADR_REG(I2C12_BASE_PTR,3)
  #define FLEXCOMM12__I2C_SLVQUAL0                 I2C_SLVQUAL0_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_MONRXDAT                 I2C_MONRXDAT_REG(I2C12_BASE_PTR)
  #define FLEXCOMM12__I2C_ID                       I2C_ID_REG(I2C12_BASE_PTR)
  /* I2C13 */
  #define FLEXCOMM13__I2C_CFG                      I2C_CFG_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_STAT                     I2C_STAT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_INTENSET                 I2C_INTENSET_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_INTENCLR                 I2C_INTENCLR_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_TIMEOUT                  I2C_TIMEOUT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_CLKDIV                   I2C_CLKDIV_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_INTSTAT                  I2C_INTSTAT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_MSTCTL                   I2C_MSTCTL_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_MSTTIME                  I2C_MSTTIME_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_MSTDAT                   I2C_MSTDAT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_SLVCTL                   I2C_SLVCTL_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_SLVDAT                   I2C_SLVDAT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_SLVADR0                  I2C_SLVADR_REG(I2C13_BASE_PTR,0)
  #define FLEXCOMM13__I2C_SLVADR1                  I2C_SLVADR_REG(I2C13_BASE_PTR,1)
  #define FLEXCOMM13__I2C_SLVADR2                  I2C_SLVADR_REG(I2C13_BASE_PTR,2)
  #define FLEXCOMM13__I2C_SLVADR3                  I2C_SLVADR_REG(I2C13_BASE_PTR,3)
  #define FLEXCOMM13__I2C_SLVQUAL0                 I2C_SLVQUAL0_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_MONRXDAT                 I2C_MONRXDAT_REG(I2C13_BASE_PTR)
  #define FLEXCOMM13__I2C_ID                       I2C_ID_REG(I2C13_BASE_PTR)
  /* I2C15 */
  #define FLEXCOMM15__I2C_CFG                      I2C_CFG_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_STAT                     I2C_STAT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_INTENSET                 I2C_INTENSET_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_INTENCLR                 I2C_INTENCLR_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_TIMEOUT                  I2C_TIMEOUT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_CLKDIV                   I2C_CLKDIV_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_INTSTAT                  I2C_INTSTAT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_MSTCTL                   I2C_MSTCTL_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_MSTTIME                  I2C_MSTTIME_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_MSTDAT                   I2C_MSTDAT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_SLVCTL                   I2C_SLVCTL_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_SLVDAT                   I2C_SLVDAT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_SLVADR0                  I2C_SLVADR_REG(I2C15_BASE_PTR,0)
  #define FLEXCOMM15__I2C_SLVADR1                  I2C_SLVADR_REG(I2C15_BASE_PTR,1)
  #define FLEXCOMM15__I2C_SLVADR2                  I2C_SLVADR_REG(I2C15_BASE_PTR,2)
  #define FLEXCOMM15__I2C_SLVADR3                  I2C_SLVADR_REG(I2C15_BASE_PTR,3)
  #define FLEXCOMM15__I2C_SLVQUAL0                 I2C_SLVQUAL0_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_MONRXDAT                 I2C_MONRXDAT_REG(I2C15_BASE_PTR)
  #define FLEXCOMM15__I2C_ID                       I2C_ID_REG(I2C15_BASE_PTR)
#endif

/* I2C - Register array accessors */
#define I2C0_SLVADR(index)                       I2C_SLVADR_REG(I2C0_BASE_PTR,index)
#define I2C0_SLVADR_NS(index)                    I2C_SLVADR_REG(I2C0_BASE_PTR_NS,index)
#define I2C0_SLVADR(index)                       I2C_SLVADR_REG(I2C0_BASE_PTR,index)
#define I2C1_SLVADR(index)                       I2C_SLVADR_REG(I2C1_BASE_PTR,index)
#define I2C1_SLVADR_NS(index)                    I2C_SLVADR_REG(I2C1_BASE_PTR_NS,index)
#define I2C1_SLVADR(index)                       I2C_SLVADR_REG(I2C1_BASE_PTR,index)
#define I2C10_SLVADR(index)                      I2C_SLVADR_REG(I2C10_BASE_PTR,index)
#define I2C10_SLVADR_NS(index)                   I2C_SLVADR_REG(I2C10_BASE_PTR_NS,index)
#define I2C10_SLVADR(index)                      I2C_SLVADR_REG(I2C10_BASE_PTR,index)
#define I2C11_SLVADR(index)                      I2C_SLVADR_REG(I2C11_BASE_PTR,index)
#define I2C11_SLVADR_NS(index)                   I2C_SLVADR_REG(I2C11_BASE_PTR_NS,index)
#define I2C11_SLVADR(index)                      I2C_SLVADR_REG(I2C11_BASE_PTR,index)
#define I2C12_SLVADR(index)                      I2C_SLVADR_REG(I2C12_BASE_PTR,index)
#define I2C12_SLVADR_NS(index)                   I2C_SLVADR_REG(I2C12_BASE_PTR_NS,index)
#define I2C12_SLVADR(index)                      I2C_SLVADR_REG(I2C12_BASE_PTR,index)
#define I2C13_SLVADR(index)                      I2C_SLVADR_REG(I2C13_BASE_PTR,index)
#define I2C13_SLVADR_NS(index)                   I2C_SLVADR_REG(I2C13_BASE_PTR_NS,index)
#define I2C13_SLVADR(index)                      I2C_SLVADR_REG(I2C13_BASE_PTR,index)
#define I2C15_SLVADR(index)                      I2C_SLVADR_REG(I2C15_BASE_PTR,index)
#define I2C15_SLVADR_NS(index)                   I2C_SLVADR_REG(I2C15_BASE_PTR_NS,index)
#define I2C15_SLVADR(index)                      I2C_SLVADR_REG(I2C15_BASE_PTR,index)
#define I2C2_SLVADR(index)                       I2C_SLVADR_REG(I2C2_BASE_PTR,index)
#define I2C2_SLVADR_NS(index)                    I2C_SLVADR_REG(I2C2_BASE_PTR_NS,index)
#define I2C2_SLVADR(index)                       I2C_SLVADR_REG(I2C2_BASE_PTR,index)
#define I2C3_SLVADR(index)                       I2C_SLVADR_REG(I2C3_BASE_PTR,index)
#define I2C3_SLVADR_NS(index)                    I2C_SLVADR_REG(I2C3_BASE_PTR_NS,index)
#define I2C3_SLVADR(index)                       I2C_SLVADR_REG(I2C3_BASE_PTR,index)
#define I2C4_SLVADR(index)                       I2C_SLVADR_REG(I2C4_BASE_PTR,index)
#define I2C4_SLVADR_NS(index)                    I2C_SLVADR_REG(I2C4_BASE_PTR_NS,index)
#define I2C4_SLVADR(index)                       I2C_SLVADR_REG(I2C4_BASE_PTR,index)
#define I2C5_SLVADR(index)                       I2C_SLVADR_REG(I2C5_BASE_PTR,index)
#define I2C5_SLVADR_NS(index)                    I2C_SLVADR_REG(I2C5_BASE_PTR_NS,index)
#define I2C5_SLVADR(index)                       I2C_SLVADR_REG(I2C5_BASE_PTR,index)
#define I2C6_SLVADR(index)                       I2C_SLVADR_REG(I2C6_BASE_PTR,index)
#define I2C6_SLVADR_NS(index)                    I2C_SLVADR_REG(I2C6_BASE_PTR_NS,index)
#define I2C6_SLVADR(index)                       I2C_SLVADR_REG(I2C6_BASE_PTR,index)
#define I2C7_SLVADR(index)                       I2C_SLVADR_REG(I2C7_BASE_PTR,index)
#define I2C7_SLVADR_NS(index)                    I2C_SLVADR_REG(I2C7_BASE_PTR_NS,index)
#define I2C7_SLVADR(index)                       I2C_SLVADR_REG(I2C7_BASE_PTR,index)
#define I2C8_SLVADR(index)                       I2C_SLVADR_REG(I2C8_BASE_PTR,index)
#define I2C8_SLVADR_NS(index)                    I2C_SLVADR_REG(I2C8_BASE_PTR_NS,index)
#define I2C8_SLVADR(index)                       I2C_SLVADR_REG(I2C8_BASE_PTR,index)
#define I2C9_SLVADR(index)                       I2C_SLVADR_REG(I2C9_BASE_PTR,index)
#define I2C9_SLVADR_NS(index)                    I2C_SLVADR_REG(I2C9_BASE_PTR_NS,index)
#define I2C9_SLVADR(index)                       I2C_SLVADR_REG(I2C9_BASE_PTR,index)

/*!
 * @}
 */ /* end of group I2C_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group I2C_Peripheral */


/* ----------------------------------------------------------------------------
   -- I2S
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Peripheral I2S
 * @{
 */

/** I2S - Peripheral register structure */
typedef struct I2S_MemMap {
  uint8_t RESERVED_0[3072];
  uint32_t CFG1;                                   /**< Configuration Register 1 for the Primary Channel Pair, offset: 0xC00 */
  uint32_t CFG2;                                   /**< Configuration Register 2 for the Primary Channel Pair, offset: 0xC04 */
  uint32_t STAT;                                   /**< Status Register for the Primary Channel Pair, offset: 0xC08 */
  uint8_t RESERVED_1[16];
  uint32_t DIV;                                    /**< Clock Divider, offset: 0xC1C */
  struct {                                         /* offset: 0xC20, array step: 0x20 */
    uint32_t PCFG1;                                  /**< Configuration Register 1 for Channel Pair 1..Configuration Register 1 for Channel Pair 3, array offset: 0xC20, array step: 0x20 */
    uint32_t PCFG2;                                  /**< Configuration Register 2 for Channel Pair 1..Configuration Register 2 for Channel Pair 3, array offset: 0xC24, array step: 0x20 */
    uint32_t PSTAT;                                  /**< Status Register for Channel Pair 1..Status Register for Channel Pair 3, array offset: 0xC28, array step: 0x20 */
    uint8_t RESERVED_0[20];
  } SECCHANNEL[3];
  uint8_t RESERVED_2[384];
  uint32_t FIFOCFG;                                /**< FIFO Configuration and Enable, offset: 0xE00 */
  uint32_t FIFOSTAT;                               /**< FIFO Status, offset: 0xE04 */
  uint32_t FIFOTRIG;                               /**< FIFO Trigger Settings, offset: 0xE08 */
  uint8_t RESERVED_3[4];
  uint32_t FIFOINTENSET;                           /**< FIFO Interrupt Enable Set and Read, offset: 0xE10 */
  uint32_t FIFOINTENCLR;                           /**< FIFO Interrupt Enable Clear and Read, offset: 0xE14 */
  uint32_t FIFOINTSTAT;                            /**< FIFO Interrupt Status, offset: 0xE18 */
  uint8_t RESERVED_4[4];
  uint32_t FIFOWR;                                 /**< FIFO Write Data, offset: 0xE20 */
  uint32_t FIFOWR48H;                              /**< FIFO Write Data for Upper Data Bits, offset: 0xE24 */
  uint8_t RESERVED_5[8];
  uint32_t FIFORD;                                 /**< FIFO Read Data, offset: 0xE30 */
  uint32_t FIFORD48H;                              /**< FIFO Read Data for Upper Data Bits, offset: 0xE34 */
  uint8_t RESERVED_6[8];
  uint32_t FIFORDNOPOP;                            /**< FIFO Data Read with No FIFO Pop, offset: 0xE40 */
  uint32_t FIFORD48HNOPOP;                         /**< FIFO Data Read for Upper Data Bits with No FIFO Pop, offset: 0xE44 */
  uint32_t FIFOSIZE;                               /**< FIFO Size Register, offset: 0xE48 */
  uint8_t RESERVED_7[432];
  uint32_t ID;                                     /**< I2S Module Identification, offset: 0xFFC */
} volatile *I2S_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- I2S - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Accessor_Macros I2S - Register accessor macros
 * @{
 */


/* I2S - Register accessors */
#define I2S_CFG1_REG(base)                       ((base)->CFG1)
#define I2S_CFG2_REG(base)                       ((base)->CFG2)
#define I2S_STAT_REG(base)                       ((base)->STAT)
#define I2S_DIV_REG(base)                        ((base)->DIV)
#define I2S_SECCHANNEL_PCFG1_REG(base,index)     ((base)->SECCHANNEL[index].PCFG1)
#define I2S_SECCHANNEL_PCFG2_REG(base,index)     ((base)->SECCHANNEL[index].PCFG2)
#define I2S_SECCHANNEL_PSTAT_REG(base,index)     ((base)->SECCHANNEL[index].PSTAT)
#define I2S_FIFOCFG_REG(base)                    ((base)->FIFOCFG)
#define I2S_FIFOSTAT_REG(base)                   ((base)->FIFOSTAT)
#define I2S_FIFOTRIG_REG(base)                   ((base)->FIFOTRIG)
#define I2S_FIFOINTENSET_REG(base)               ((base)->FIFOINTENSET)
#define I2S_FIFOINTENCLR_REG(base)               ((base)->FIFOINTENCLR)
#define I2S_FIFOINTSTAT_REG(base)                ((base)->FIFOINTSTAT)
#define I2S_FIFOWR_REG(base)                     ((base)->FIFOWR)
#define I2S_FIFOWR48H_REG(base)                  ((base)->FIFOWR48H)
#define I2S_FIFORD_REG(base)                     ((base)->FIFORD)
#define I2S_FIFORD48H_REG(base)                  ((base)->FIFORD48H)
#define I2S_FIFORDNOPOP_REG(base)                ((base)->FIFORDNOPOP)
#define I2S_FIFORD48HNOPOP_REG(base)             ((base)->FIFORD48HNOPOP)
#define I2S_FIFOSIZE_REG(base)                   ((base)->FIFOSIZE)
#define I2S_ID_REG(base)                         ((base)->ID)

/*!
 * @}
 */ /* end of group I2S_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- I2S Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Masks I2S Register Masks
 * @{
 */

/*! @name CFG1 - Configuration Register 1 for the Primary Channel Pair */
/*! @{ */
#define I2S_CFG1_MAINENABLE_MASK                 (0x1U)
#define I2S_CFG1_MAINENABLE_SHIFT                (0U)
#define I2S_CFG1_DATAPAUSE_MASK                  (0x2U)
#define I2S_CFG1_DATAPAUSE_SHIFT                 (1U)
#define I2S_CFG1_PAIRCOUNT_MASK                  (0xCU)
#define I2S_CFG1_PAIRCOUNT_SHIFT                 (2U)
/*! PAIRCOUNT - Pair Count
 *  0b00..One Pair
 *  0b01..Two Pairs
 *  0b10..Three Pairs
 *  0b11..Four Pairs
 */
#define I2S_CFG1_PAIRCOUNT(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_PAIRCOUNT_SHIFT)) & I2S_CFG1_PAIRCOUNT_MASK)
#define I2S_CFG1_MSTSLVCFG_MASK                  (0x30U)
#define I2S_CFG1_MSTSLVCFG_SHIFT                 (4U)
/*! MSTSLVCFG - Master/Slave Configuration Selection
 *  0b00..Normal Slave Mode
 *  0b01..WS Synchronized Master Mode
 *  0b10..Master Using an Existing SCK Mode
 *  0b11..Normal Master Mode
 */
#define I2S_CFG1_MSTSLVCFG(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_MSTSLVCFG_SHIFT)) & I2S_CFG1_MSTSLVCFG_MASK)
#define I2S_CFG1_MODE_MASK                       (0xC0U)
#define I2S_CFG1_MODE_SHIFT                      (6U)
/*! MODE - Mode
 *  0b00..Classic Mode
 *  0b01..DSP mode WS 50% duty cycle
 *  0b10..DSP mode WS 1 clock
 *  0b11..DSP mode WS 1 data
 */
#define I2S_CFG1_MODE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_MODE_SHIFT)) & I2S_CFG1_MODE_MASK)
#define I2S_CFG1_RIGHTLOW_MASK                   (0x100U)
#define I2S_CFG1_RIGHTLOW_SHIFT                  (8U)
#define I2S_CFG1_LEFTJUST_MASK                   (0x200U)
#define I2S_CFG1_LEFTJUST_SHIFT                  (9U)
#define I2S_CFG1_ONECHANNEL_MASK                 (0x400U)
#define I2S_CFG1_ONECHANNEL_SHIFT                (10U)
#define I2S_CFG1_PDMDATA_MASK                    (0x800U)
#define I2S_CFG1_PDMDATA_SHIFT                   (11U)
#define I2S_CFG1_SCK_POL_MASK                    (0x1000U)
#define I2S_CFG1_SCK_POL_SHIFT                   (12U)
#define I2S_CFG1_WS_POL_MASK                     (0x2000U)
#define I2S_CFG1_WS_POL_SHIFT                    (13U)
#define I2S_CFG1_DATALEN_MASK                    (0x1F0000U)
#define I2S_CFG1_DATALEN_SHIFT                   (16U)
/*! DATALEN - Data Length
 *  0b00011..Data is 4 bits in length.
 *  0b00100..Data is 5 bits in length.
 *  0b00111..Data is 8 bits in length.
 *  0b11110..Data is 31 bits in length.
 *  0b11111..Data is 32 bits in length.
 */
#define I2S_CFG1_DATALEN(x)                      (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_DATALEN_SHIFT)) & I2S_CFG1_DATALEN_MASK)
/*! @} */

/*! @name CFG2 - Configuration Register 2 for the Primary Channel Pair */
/*! @{ */
#define I2S_CFG2_FRAMELEN_MASK                   (0x7FFU)
#define I2S_CFG2_FRAMELEN_SHIFT                  (0U)
/*! FRAMELEN - Frame Length
 *  0b00000000011..Frame is 4 bits in total length
 *  0b00000000100..Frame is 5 bits in total length
 *  0b00111111111..Frame is 512 bits in total length
 *  0b11111111111..Frame is 2048 bits in total length
 */
#define I2S_CFG2_FRAMELEN(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_CFG2_FRAMELEN_SHIFT)) & I2S_CFG2_FRAMELEN_MASK)
#define I2S_CFG2_POSITION_MASK                   (0x7FF0000U)
#define I2S_CFG2_POSITION_SHIFT                  (16U)
/*! POSITION - Data Position
 *  0b00000000000..Data begins at bit position 0 (the first bit position) within the frame or WS phase
 *  0b00000000001..Data begins at bit position 1 within the frame or WS phase
 *  0b00000000010..Data begins at bit position 2 within the frame or WS phase
 */
#define I2S_CFG2_POSITION(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_CFG2_POSITION_SHIFT)) & I2S_CFG2_POSITION_MASK)
/*! @} */

/*! @name STAT - Status Register for the Primary Channel Pair */
/*! @{ */
#define I2S_STAT_BUSY_MASK                       (0x1U)
#define I2S_STAT_BUSY_SHIFT                      (0U)
#define I2S_STAT_SLVFRMERR_MASK                  (0x2U)
#define I2S_STAT_SLVFRMERR_SHIFT                 (1U)
#define I2S_STAT_LR_MASK                         (0x4U)
#define I2S_STAT_LR_SHIFT                        (2U)
#define I2S_STAT_DATAPAUSED_MASK                 (0x8U)
#define I2S_STAT_DATAPAUSED_SHIFT                (3U)
/*! @} */

/*! @name DIV - Clock Divider */
/*! @{ */
#define I2S_DIV_DIV_MASK                         (0xFFFU)
#define I2S_DIV_DIV_SHIFT                        (0U)
/*! DIV - Divider
 *  0b000000000000..FCLK is used directly.
 *  0b000000000001..FCLK is divided by 2.
 *  0b000000000010..FCLK is divided by 3.
 *  0b111111111111..FCLK is divided by 4,096.
 */
#define I2S_DIV_DIV(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_DIV_DIV_SHIFT)) & I2S_DIV_DIV_MASK)
/*! @} */

/*! @name SECCHANNEL_PCFG1 - Configuration Register 1 for Channel Pair 1..Configuration Register 1 for Channel Pair 3 */
/*! @{ */
#define I2S_SECCHANNEL_PCFG1_PAIRENABLE_MASK     (0x1U)
#define I2S_SECCHANNEL_PCFG1_PAIRENABLE_SHIFT    (0U)
#define I2S_SECCHANNEL_PCFG1_ONECHANNEL_MASK     (0x400U)
#define I2S_SECCHANNEL_PCFG1_ONECHANNEL_SHIFT    (10U)
/*! @} */

/* The count of I2S_SECCHANNEL_PCFG1 */
#define I2S_SECCHANNEL_PCFG1_COUNT               (3U)

/*! @name SECCHANNEL_PCFG2 - Configuration Register 2 for Channel Pair 1..Configuration Register 2 for Channel Pair 3 */
/*! @{ */
#define I2S_SECCHANNEL_PCFG2_POSITION_MASK       (0x1FF0000U)
#define I2S_SECCHANNEL_PCFG2_POSITION_SHIFT      (16U)
/*! POSITION - Data Position
 */
#define I2S_SECCHANNEL_PCFG2_POSITION(x)         (((uint32_t)(((uint32_t)(x)) << I2S_SECCHANNEL_PCFG2_POSITION_SHIFT)) & I2S_SECCHANNEL_PCFG2_POSITION_MASK)
/*! @} */

/* The count of I2S_SECCHANNEL_PCFG2 */
#define I2S_SECCHANNEL_PCFG2_COUNT               (3U)

/*! @name SECCHANNEL_PSTAT - Status Register for Channel Pair 1..Status Register for Channel Pair 3 */
/*! @{ */
#define I2S_SECCHANNEL_PSTAT_BUSY_MASK           (0x1U)
#define I2S_SECCHANNEL_PSTAT_BUSY_SHIFT          (0U)
#define I2S_SECCHANNEL_PSTAT_SLVFRMERR_MASK      (0x2U)
#define I2S_SECCHANNEL_PSTAT_SLVFRMERR_SHIFT     (1U)
#define I2S_SECCHANNEL_PSTAT_LR_MASK             (0x4U)
#define I2S_SECCHANNEL_PSTAT_LR_SHIFT            (2U)
#define I2S_SECCHANNEL_PSTAT_DATAPAUSED_MASK     (0x8U)
#define I2S_SECCHANNEL_PSTAT_DATAPAUSED_SHIFT    (3U)
/*! @} */

/* The count of I2S_SECCHANNEL_PSTAT */
#define I2S_SECCHANNEL_PSTAT_COUNT               (3U)

/*! @name FIFOCFG - FIFO Configuration and Enable */
/*! @{ */
#define I2S_FIFOCFG_ENABLETX_MASK                (0x1U)
#define I2S_FIFOCFG_ENABLETX_SHIFT               (0U)
#define I2S_FIFOCFG_ENABLERX_MASK                (0x2U)
#define I2S_FIFOCFG_ENABLERX_SHIFT               (1U)
#define I2S_FIFOCFG_TXI2SE0_MASK                 (0x4U)
#define I2S_FIFOCFG_TXI2SE0_SHIFT                (2U)
#define I2S_FIFOCFG_PACK48_MASK                  (0x8U)
#define I2S_FIFOCFG_PACK48_SHIFT                 (3U)
#define I2S_FIFOCFG_SIZE_MASK                    (0x30U)
#define I2S_FIFOCFG_SIZE_SHIFT                   (4U)
/*! SIZE - FIFO Size Configuration
 *  0b10..Size 32 Bits
 *  0b11..Size 48 Bits
 */
#define I2S_FIFOCFG_SIZE(x)                      (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_SIZE_SHIFT)) & I2S_FIFOCFG_SIZE_MASK)
#define I2S_FIFOCFG_DMATX_MASK                   (0x1000U)
#define I2S_FIFOCFG_DMATX_SHIFT                  (12U)
#define I2S_FIFOCFG_DMARX_MASK                   (0x2000U)
#define I2S_FIFOCFG_DMARX_SHIFT                  (13U)
#define I2S_FIFOCFG_WAKETX_MASK                  (0x4000U)
#define I2S_FIFOCFG_WAKETX_SHIFT                 (14U)
#define I2S_FIFOCFG_WAKERX_MASK                  (0x8000U)
#define I2S_FIFOCFG_WAKERX_SHIFT                 (15U)
#define I2S_FIFOCFG_EMPTYTX_MASK                 (0x10000U)
#define I2S_FIFOCFG_EMPTYTX_SHIFT                (16U)
#define I2S_FIFOCFG_EMPTYRX_MASK                 (0x20000U)
#define I2S_FIFOCFG_EMPTYRX_SHIFT                (17U)
#define I2S_FIFOCFG_POPDBG_MASK                  (0x40000U)
#define I2S_FIFOCFG_POPDBG_SHIFT                 (18U)
/*! @} */

/*! @name FIFOSTAT - FIFO Status */
/*! @{ */
#define I2S_FIFOSTAT_TXERR_MASK                  (0x1U)
#define I2S_FIFOSTAT_TXERR_SHIFT                 (0U)
#define I2S_FIFOSTAT_RXERR_MASK                  (0x2U)
#define I2S_FIFOSTAT_RXERR_SHIFT                 (1U)
#define I2S_FIFOSTAT_PERINT_MASK                 (0x8U)
#define I2S_FIFOSTAT_PERINT_SHIFT                (3U)
#define I2S_FIFOSTAT_TXEMPTY_MASK                (0x10U)
#define I2S_FIFOSTAT_TXEMPTY_SHIFT               (4U)
#define I2S_FIFOSTAT_TXNOTFULL_MASK              (0x20U)
#define I2S_FIFOSTAT_TXNOTFULL_SHIFT             (5U)
#define I2S_FIFOSTAT_RXNOTEMPTY_MASK             (0x40U)
#define I2S_FIFOSTAT_RXNOTEMPTY_SHIFT            (6U)
#define I2S_FIFOSTAT_RXFULL_MASK                 (0x80U)
#define I2S_FIFOSTAT_RXFULL_SHIFT                (7U)
#define I2S_FIFOSTAT_TXLVL_MASK                  (0x1F00U)
#define I2S_FIFOSTAT_TXLVL_SHIFT                 (8U)
/*! TXLVL - Transmit FIFO Current Level
 *  0b00000..TX FIFO is empty
 */
#define I2S_FIFOSTAT_TXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_TXLVL_SHIFT)) & I2S_FIFOSTAT_TXLVL_MASK)
#define I2S_FIFOSTAT_RXLVL_MASK                  (0x1F0000U)
#define I2S_FIFOSTAT_RXLVL_SHIFT                 (16U)
/*! RXLVL - Receive FIFO Current Level
 *  0b00000..RX FIFO is empty
 */
#define I2S_FIFOSTAT_RXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_RXLVL_SHIFT)) & I2S_FIFOSTAT_RXLVL_MASK)
/*! @} */

/*! @name FIFOTRIG - FIFO Trigger Settings */
/*! @{ */
#define I2S_FIFOTRIG_TXLVLENA_MASK               (0x1U)
#define I2S_FIFOTRIG_TXLVLENA_SHIFT              (0U)
#define I2S_FIFOTRIG_RXLVLENA_MASK               (0x2U)
#define I2S_FIFOTRIG_RXLVLENA_SHIFT              (1U)
#define I2S_FIFOTRIG_TXLVL_MASK                  (0xF00U)
#define I2S_FIFOTRIG_TXLVL_SHIFT                 (8U)
/*! TXLVL - Transmit FIFO Level Trigger Point
 *  0b0000..Trigger when the TX FIFO becomes empty.
 *  0b0001..Trigger when the TX FIFO level decreases to one entry.
 *  0b1111..Trigger when the TX FIFO level decreases to 15 entries (is no longer full).
 */
#define I2S_FIFOTRIG_TXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOTRIG_TXLVL_SHIFT)) & I2S_FIFOTRIG_TXLVL_MASK)
#define I2S_FIFOTRIG_RXLVL_MASK                  (0xF0000U)
#define I2S_FIFOTRIG_RXLVL_SHIFT                 (16U)
/*! RXLVL - Receive FIFO Level Trigger Point
 *  0b0000..Trigger when the RX FIFO has received 1 entry (the FIFO is no longer empty).
 *  0b0001..Trigger when the RX FIFO has received 2 entries.
 *  0b1111..Trigger when the RX FIFO has received 16 entries (the FIFO has become full).
 */
#define I2S_FIFOTRIG_RXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOTRIG_RXLVL_SHIFT)) & I2S_FIFOTRIG_RXLVL_MASK)
/*! @} */

/*! @name FIFOINTENSET - FIFO Interrupt Enable Set and Read */
/*! @{ */
#define I2S_FIFOINTENSET_TXERR_MASK              (0x1U)
#define I2S_FIFOINTENSET_TXERR_SHIFT             (0U)
#define I2S_FIFOINTENSET_RXERR_MASK              (0x2U)
#define I2S_FIFOINTENSET_RXERR_SHIFT             (1U)
#define I2S_FIFOINTENSET_TXLVL_MASK              (0x4U)
#define I2S_FIFOINTENSET_TXLVL_SHIFT             (2U)
#define I2S_FIFOINTENSET_RXLVL_MASK              (0x8U)
#define I2S_FIFOINTENSET_RXLVL_SHIFT             (3U)
/*! @} */

/*! @name FIFOINTENCLR - FIFO Interrupt Enable Clear and Read */
/*! @{ */
#define I2S_FIFOINTENCLR_TXERR_MASK              (0x1U)
#define I2S_FIFOINTENCLR_TXERR_SHIFT             (0U)
#define I2S_FIFOINTENCLR_RXERR_MASK              (0x2U)
#define I2S_FIFOINTENCLR_RXERR_SHIFT             (1U)
#define I2S_FIFOINTENCLR_TXLVL_MASK              (0x4U)
#define I2S_FIFOINTENCLR_TXLVL_SHIFT             (2U)
#define I2S_FIFOINTENCLR_RXLVL_MASK              (0x8U)
#define I2S_FIFOINTENCLR_RXLVL_SHIFT             (3U)
/*! @} */

/*! @name FIFOINTSTAT - FIFO Interrupt Status */
/*! @{ */
#define I2S_FIFOINTSTAT_TXERR_MASK               (0x1U)
#define I2S_FIFOINTSTAT_TXERR_SHIFT              (0U)
#define I2S_FIFOINTSTAT_RXERR_MASK               (0x2U)
#define I2S_FIFOINTSTAT_RXERR_SHIFT              (1U)
#define I2S_FIFOINTSTAT_TXLVL_MASK               (0x4U)
#define I2S_FIFOINTSTAT_TXLVL_SHIFT              (2U)
#define I2S_FIFOINTSTAT_RXLVL_MASK               (0x8U)
#define I2S_FIFOINTSTAT_RXLVL_SHIFT              (3U)
#define I2S_FIFOINTSTAT_PERINT_MASK              (0x10U)
#define I2S_FIFOINTSTAT_PERINT_SHIFT             (4U)
/*! @} */

/*! @name FIFOWR - FIFO Write Data */
/*! @{ */
#define I2S_FIFOWR_TXDATA_MASK                   (0xFFFFFFFFU)
#define I2S_FIFOWR_TXDATA_SHIFT                  (0U)
/*! TXDATA - Transmit Data to the FIFO
 */
#define I2S_FIFOWR_TXDATA(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_FIFOWR_TXDATA_SHIFT)) & I2S_FIFOWR_TXDATA_MASK)
/*! @} */

/*! @name FIFOWR48H - FIFO Write Data for Upper Data Bits */
/*! @{ */
#define I2S_FIFOWR48H_TXDATA_MASK                (0xFFFFFFU)
#define I2S_FIFOWR48H_TXDATA_SHIFT               (0U)
/*! TXDATA - Transmit Data to the FIFO
 */
#define I2S_FIFOWR48H_TXDATA(x)                  (((uint32_t)(((uint32_t)(x)) << I2S_FIFOWR48H_TXDATA_SHIFT)) & I2S_FIFOWR48H_TXDATA_MASK)
/*! @} */

/*! @name FIFORD - FIFO Read Data */
/*! @{ */
#define I2S_FIFORD_RXDATA_MASK                   (0xFFFFFFFFU)
#define I2S_FIFORD_RXDATA_SHIFT                  (0U)
/*! RXDATA - Received Data from the FIFO
 */
#define I2S_FIFORD_RXDATA(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_FIFORD_RXDATA_SHIFT)) & I2S_FIFORD_RXDATA_MASK)
/*! @} */

/*! @name FIFORD48H - FIFO Read Data for Upper Data Bits */
/*! @{ */
#define I2S_FIFORD48H_RXDATA_MASK                (0xFFFFFFU)
#define I2S_FIFORD48H_RXDATA_SHIFT               (0U)
/*! RXDATA - Received Data from the FIFO
 */
#define I2S_FIFORD48H_RXDATA(x)                  (((uint32_t)(((uint32_t)(x)) << I2S_FIFORD48H_RXDATA_SHIFT)) & I2S_FIFORD48H_RXDATA_MASK)
/*! @} */

/*! @name FIFORDNOPOP - FIFO Data Read with No FIFO Pop */
/*! @{ */
#define I2S_FIFORDNOPOP_RXDATA_MASK              (0xFFFFFFFFU)
#define I2S_FIFORDNOPOP_RXDATA_SHIFT             (0U)
/*! RXDATA - Received Data from the FIFO
 */
#define I2S_FIFORDNOPOP_RXDATA(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFORDNOPOP_RXDATA_SHIFT)) & I2S_FIFORDNOPOP_RXDATA_MASK)
/*! @} */

/*! @name FIFORD48HNOPOP - FIFO Data Read for Upper Data Bits with No FIFO Pop */
/*! @{ */
#define I2S_FIFORD48HNOPOP_RXDATA_MASK           (0xFFFFFFU)
#define I2S_FIFORD48HNOPOP_RXDATA_SHIFT          (0U)
/*! RXDATA - Received Data from the FIFO
 */
#define I2S_FIFORD48HNOPOP_RXDATA(x)             (((uint32_t)(((uint32_t)(x)) << I2S_FIFORD48HNOPOP_RXDATA_SHIFT)) & I2S_FIFORD48HNOPOP_RXDATA_MASK)
/*! @} */

/*! @name FIFOSIZE - FIFO Size Register */
/*! @{ */
#define I2S_FIFOSIZE_FIFOSIZE_MASK               (0x1FU)
#define I2S_FIFOSIZE_FIFOSIZE_SHIFT              (0U)
#define I2S_FIFOSIZE_FIFOSIZE(x)                 (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSIZE_FIFOSIZE_SHIFT)) & I2S_FIFOSIZE_FIFOSIZE_MASK)
/*! @} */

/*! @name ID - I2S Module Identification */
/*! @{ */
#define I2S_ID_APERTURE_MASK                     (0xFFU)
#define I2S_ID_APERTURE_SHIFT                    (0U)
/*! APERTURE - Aperture
 */
#define I2S_ID_APERTURE(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_ID_APERTURE_SHIFT)) & I2S_ID_APERTURE_MASK)
#define I2S_ID_MINOR_REV_MASK                    (0xF00U)
#define I2S_ID_MINOR_REV_SHIFT                   (8U)
/*! MINOR_REV - Minor Revision
 */
#define I2S_ID_MINOR_REV(x)                      (((uint32_t)(((uint32_t)(x)) << I2S_ID_MINOR_REV_SHIFT)) & I2S_ID_MINOR_REV_MASK)
#define I2S_ID_MAJOR_REV_MASK                    (0xF000U)
#define I2S_ID_MAJOR_REV_SHIFT                   (12U)
/*! MAJOR_REV - Major Revision
 */
#define I2S_ID_MAJOR_REV(x)                      (((uint32_t)(((uint32_t)(x)) << I2S_ID_MAJOR_REV_SHIFT)) & I2S_ID_MAJOR_REV_MASK)
#define I2S_ID_ID_MASK                           (0xFFFF0000U)
#define I2S_ID_ID_SHIFT                          (16U)
/*! ID - Module Identifier
 */
#define I2S_ID_ID(x)                             (((uint32_t)(((uint32_t)(x)) << I2S_ID_ID_SHIFT)) & I2S_ID_ID_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group I2S_Register_Masks */


/* I2S - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral I2S0 base pointer */
  #define I2S0_BASE_PTR                            ((I2S_MemMapPtr)0x50106000u)
  /** Peripheral I2S0 base pointer */
  #define I2S0_BASE_PTR_NS                         ((I2S_MemMapPtr)0x40106000u)
  /** Peripheral I2S1 base pointer */
  #define I2S1_BASE_PTR                            ((I2S_MemMapPtr)0x50107000u)
  /** Peripheral I2S1 base pointer */
  #define I2S1_BASE_PTR_NS                         ((I2S_MemMapPtr)0x40107000u)
  /** Peripheral I2S2 base pointer */
  #define I2S2_BASE_PTR                            ((I2S_MemMapPtr)0x50108000u)
  /** Peripheral I2S2 base pointer */
  #define I2S2_BASE_PTR_NS                         ((I2S_MemMapPtr)0x40108000u)
  /** Peripheral I2S3 base pointer */
  #define I2S3_BASE_PTR                            ((I2S_MemMapPtr)0x50109000u)
  /** Peripheral I2S3 base pointer */
  #define I2S3_BASE_PTR_NS                         ((I2S_MemMapPtr)0x40109000u)
  /** Peripheral I2S4 base pointer */
  #define I2S4_BASE_PTR                            ((I2S_MemMapPtr)0x50122000u)
  /** Peripheral I2S4 base pointer */
  #define I2S4_BASE_PTR_NS                         ((I2S_MemMapPtr)0x40122000u)
  /** Peripheral I2S5 base pointer */
  #define I2S5_BASE_PTR                            ((I2S_MemMapPtr)0x50123000u)
  /** Peripheral I2S5 base pointer */
  #define I2S5_BASE_PTR_NS                         ((I2S_MemMapPtr)0x40123000u)
  /** Peripheral I2S6 base pointer */
  #define I2S6_BASE_PTR                            ((I2S_MemMapPtr)0x50124000u)
  /** Peripheral I2S6 base pointer */
  #define I2S6_BASE_PTR_NS                         ((I2S_MemMapPtr)0x40124000u)
  /** Peripheral I2S7 base pointer */
  #define I2S7_BASE_PTR                            ((I2S_MemMapPtr)0x50125000u)
  /** Peripheral I2S7 base pointer */
  #define I2S7_BASE_PTR_NS                         ((I2S_MemMapPtr)0x40125000u)
  /** Peripheral I2S8 base pointer */
  #define I2S8_BASE_PTR                            ((I2S_MemMapPtr)0x50209000u)
  /** Peripheral I2S8 base pointer */
  #define I2S8_BASE_PTR_NS                         ((I2S_MemMapPtr)0x40209000u)
  /** Peripheral I2S9 base pointer */
  #define I2S9_BASE_PTR                            ((I2S_MemMapPtr)0x5020A000u)
  /** Peripheral I2S9 base pointer */
  #define I2S9_BASE_PTR_NS                         ((I2S_MemMapPtr)0x4020A000u)
  /** Peripheral I2S10 base pointer */
  #define I2S10_BASE_PTR                           ((I2S_MemMapPtr)0x5020B000u)
  /** Peripheral I2S10 base pointer */
  #define I2S10_BASE_PTR_NS                        ((I2S_MemMapPtr)0x4020B000u)
  /** Peripheral I2S11 base pointer */
  #define I2S11_BASE_PTR                           ((I2S_MemMapPtr)0x5020C000u)
  /** Peripheral I2S11 base pointer */
  #define I2S11_BASE_PTR_NS                        ((I2S_MemMapPtr)0x4020C000u)
  /** Peripheral I2S12 base pointer */
  #define I2S12_BASE_PTR                           ((I2S_MemMapPtr)0x5020D000u)
  /** Peripheral I2S12 base pointer */
  #define I2S12_BASE_PTR_NS                        ((I2S_MemMapPtr)0x4020D000u)
  /** Peripheral I2S13 base pointer */
  #define I2S13_BASE_PTR                           ((I2S_MemMapPtr)0x5020E000u)
  /** Peripheral I2S13 base pointer */
  #define I2S13_BASE_PTR_NS                        ((I2S_MemMapPtr)0x4020E000u)
  /** Array initializer of I2S peripheral base pointers */
  #define I2S_BASE_PTRS                            { I2S0_BASE_PTR, I2S1_BASE_PTR, I2S2_BASE_PTR, I2S3_BASE_PTR, I2S4_BASE_PTR, I2S5_BASE_PTR, I2S6_BASE_PTR, I2S7_BASE_PTR, I2S8_BASE_PTR, I2S9_BASE_PTR, I2S10_BASE_PTR, I2S11_BASE_PTR, I2S12_BASE_PTR, I2S13_BASE_PTR }
  /** Array initializer of I2S peripheral base pointers */
  #define I2S_BASE_PTRS_NS                         { I2S0_BASE_PTR_NS, I2S1_BASE_PTR_NS, I2S2_BASE_PTR_NS, I2S3_BASE_PTR_NS, I2S4_BASE_PTR_NS, I2S5_BASE_PTR_NS, I2S6_BASE_PTR_NS, I2S7_BASE_PTR_NS, I2S8_BASE_PTR_NS, I2S9_BASE_PTR_NS, I2S10_BASE_PTR_NS, I2S11_BASE_PTR_NS, I2S12_BASE_PTR_NS, I2S13_BASE_PTR_NS }
#else
  /** Peripheral I2S0 base pointer */
  #define I2S0_BASE_PTR                            ((I2S_MemMapPtr)0x40106000u)
  /** Peripheral I2S1 base pointer */
  #define I2S1_BASE_PTR                            ((I2S_MemMapPtr)0x40107000u)
  /** Peripheral I2S2 base pointer */
  #define I2S2_BASE_PTR                            ((I2S_MemMapPtr)0x40108000u)
  /** Peripheral I2S3 base pointer */
  #define I2S3_BASE_PTR                            ((I2S_MemMapPtr)0x40109000u)
  /** Peripheral I2S4 base pointer */
  #define I2S4_BASE_PTR                            ((I2S_MemMapPtr)0x40122000u)
  /** Peripheral I2S5 base pointer */
  #define I2S5_BASE_PTR                            ((I2S_MemMapPtr)0x40123000u)
  /** Peripheral I2S6 base pointer */
  #define I2S6_BASE_PTR                            ((I2S_MemMapPtr)0x40124000u)
  /** Peripheral I2S7 base pointer */
  #define I2S7_BASE_PTR                            ((I2S_MemMapPtr)0x40125000u)
  /** Peripheral I2S8 base pointer */
  #define I2S8_BASE_PTR                            ((I2S_MemMapPtr)0x40209000u)
  /** Peripheral I2S9 base pointer */
  #define I2S9_BASE_PTR                            ((I2S_MemMapPtr)0x4020A000u)
  /** Peripheral I2S10 base pointer */
  #define I2S10_BASE_PTR                           ((I2S_MemMapPtr)0x4020B000u)
  /** Peripheral I2S11 base pointer */
  #define I2S11_BASE_PTR                           ((I2S_MemMapPtr)0x4020C000u)
  /** Peripheral I2S12 base pointer */
  #define I2S12_BASE_PTR                           ((I2S_MemMapPtr)0x4020D000u)
  /** Peripheral I2S13 base pointer */
  #define I2S13_BASE_PTR                           ((I2S_MemMapPtr)0x4020E000u)
  /** Array initializer of I2S peripheral base pointers */
  #define I2S_BASE_PTRS                            { I2S0_BASE_PTR, I2S1_BASE_PTR, I2S2_BASE_PTR, I2S3_BASE_PTR, I2S4_BASE_PTR, I2S5_BASE_PTR, I2S6_BASE_PTR, I2S7_BASE_PTR, I2S8_BASE_PTR, I2S9_BASE_PTR, I2S10_BASE_PTR, I2S11_BASE_PTR, I2S12_BASE_PTR, I2S13_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- I2S - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Accessor_Macros I2S - Register accessor macros
 * @{
 */


/* I2S - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* I2S0 */
  #define FLEXCOMM0__I2S_CFG1                      I2S_CFG1_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_CFG1_NS                   I2S_CFG1_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_CFG2                      I2S_CFG2_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_CFG2_NS                   I2S_CFG2_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_STAT                      I2S_STAT_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_STAT_NS                   I2S_STAT_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_DIV                       I2S_DIV_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_DIV_NS                    I2S_DIV_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR,0)
  #define FLEXCOMM0__I2S_PCFG11_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR_NS,0)
  #define FLEXCOMM0__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR,0)
  #define FLEXCOMM0__I2S_PCFG21_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR_NS,0)
  #define FLEXCOMM0__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR,0)
  #define FLEXCOMM0__I2S_PSTAT1_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR_NS,0)
  #define FLEXCOMM0__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR,1)
  #define FLEXCOMM0__I2S_PCFG12_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR_NS,1)
  #define FLEXCOMM0__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR,1)
  #define FLEXCOMM0__I2S_PCFG22_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR_NS,1)
  #define FLEXCOMM0__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR,1)
  #define FLEXCOMM0__I2S_PSTAT2_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR_NS,1)
  #define FLEXCOMM0__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR,2)
  #define FLEXCOMM0__I2S_PCFG13_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR_NS,2)
  #define FLEXCOMM0__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR,2)
  #define FLEXCOMM0__I2S_PCFG23_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR_NS,2)
  #define FLEXCOMM0__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR,2)
  #define FLEXCOMM0__I2S_PSTAT3_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR_NS,2)
  #define FLEXCOMM0__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOCFG_NS                I2S_FIFOCFG_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOSTAT_NS               I2S_FIFOSTAT_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOTRIG_NS               I2S_FIFOTRIG_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOINTENSET_NS           I2S_FIFOINTENSET_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOINTENCLR_NS           I2S_FIFOINTENCLR_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOINTSTAT_NS            I2S_FIFOINTSTAT_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOWR_NS                 I2S_FIFOWR_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOWR48H_NS              I2S_FIFOWR48H_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFORD                    I2S_FIFORD_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFORD_NS                 I2S_FIFORD_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFORD48H_NS              I2S_FIFORD48H_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFORDNOPOP_NS            I2S_FIFORDNOPOP_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFORD48HNOPOP_NS         I2S_FIFORD48HNOPOP_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOSIZE_NS               I2S_FIFOSIZE_REG(I2S0_BASE_PTR_NS)
  #define FLEXCOMM0__I2S_ID                        I2S_ID_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_ID_NS                     I2S_ID_REG(I2S0_BASE_PTR_NS)
  /* I2S1 */
  #define FLEXCOMM1__I2S_CFG1                      I2S_CFG1_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_CFG1_NS                   I2S_CFG1_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_CFG2                      I2S_CFG2_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_CFG2_NS                   I2S_CFG2_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_STAT                      I2S_STAT_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_STAT_NS                   I2S_STAT_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_DIV                       I2S_DIV_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_DIV_NS                    I2S_DIV_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR,0)
  #define FLEXCOMM1__I2S_PCFG11_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR_NS,0)
  #define FLEXCOMM1__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR,0)
  #define FLEXCOMM1__I2S_PCFG21_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR_NS,0)
  #define FLEXCOMM1__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR,0)
  #define FLEXCOMM1__I2S_PSTAT1_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR_NS,0)
  #define FLEXCOMM1__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR,1)
  #define FLEXCOMM1__I2S_PCFG12_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR_NS,1)
  #define FLEXCOMM1__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR,1)
  #define FLEXCOMM1__I2S_PCFG22_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR_NS,1)
  #define FLEXCOMM1__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR,1)
  #define FLEXCOMM1__I2S_PSTAT2_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR_NS,1)
  #define FLEXCOMM1__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR,2)
  #define FLEXCOMM1__I2S_PCFG13_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR_NS,2)
  #define FLEXCOMM1__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR,2)
  #define FLEXCOMM1__I2S_PCFG23_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR_NS,2)
  #define FLEXCOMM1__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR,2)
  #define FLEXCOMM1__I2S_PSTAT3_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR_NS,2)
  #define FLEXCOMM1__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOCFG_NS                I2S_FIFOCFG_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOSTAT_NS               I2S_FIFOSTAT_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOTRIG_NS               I2S_FIFOTRIG_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOINTENSET_NS           I2S_FIFOINTENSET_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOINTENCLR_NS           I2S_FIFOINTENCLR_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOINTSTAT_NS            I2S_FIFOINTSTAT_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOWR_NS                 I2S_FIFOWR_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOWR48H_NS              I2S_FIFOWR48H_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFORD                    I2S_FIFORD_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFORD_NS                 I2S_FIFORD_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFORD48H_NS              I2S_FIFORD48H_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFORDNOPOP_NS            I2S_FIFORDNOPOP_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFORD48HNOPOP_NS         I2S_FIFORD48HNOPOP_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOSIZE_NS               I2S_FIFOSIZE_REG(I2S1_BASE_PTR_NS)
  #define FLEXCOMM1__I2S_ID                        I2S_ID_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_ID_NS                     I2S_ID_REG(I2S1_BASE_PTR_NS)
  /* I2S2 */
  #define FLEXCOMM2__I2S_CFG1                      I2S_CFG1_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_CFG1_NS                   I2S_CFG1_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_CFG2                      I2S_CFG2_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_CFG2_NS                   I2S_CFG2_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_STAT                      I2S_STAT_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_STAT_NS                   I2S_STAT_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_DIV                       I2S_DIV_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_DIV_NS                    I2S_DIV_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR,0)
  #define FLEXCOMM2__I2S_PCFG11_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR_NS,0)
  #define FLEXCOMM2__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR,0)
  #define FLEXCOMM2__I2S_PCFG21_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR_NS,0)
  #define FLEXCOMM2__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR,0)
  #define FLEXCOMM2__I2S_PSTAT1_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR_NS,0)
  #define FLEXCOMM2__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR,1)
  #define FLEXCOMM2__I2S_PCFG12_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR_NS,1)
  #define FLEXCOMM2__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR,1)
  #define FLEXCOMM2__I2S_PCFG22_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR_NS,1)
  #define FLEXCOMM2__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR,1)
  #define FLEXCOMM2__I2S_PSTAT2_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR_NS,1)
  #define FLEXCOMM2__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR,2)
  #define FLEXCOMM2__I2S_PCFG13_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR_NS,2)
  #define FLEXCOMM2__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR,2)
  #define FLEXCOMM2__I2S_PCFG23_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR_NS,2)
  #define FLEXCOMM2__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR,2)
  #define FLEXCOMM2__I2S_PSTAT3_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR_NS,2)
  #define FLEXCOMM2__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOCFG_NS                I2S_FIFOCFG_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOSTAT_NS               I2S_FIFOSTAT_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOTRIG_NS               I2S_FIFOTRIG_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOINTENSET_NS           I2S_FIFOINTENSET_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOINTENCLR_NS           I2S_FIFOINTENCLR_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOINTSTAT_NS            I2S_FIFOINTSTAT_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOWR_NS                 I2S_FIFOWR_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOWR48H_NS              I2S_FIFOWR48H_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFORD                    I2S_FIFORD_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFORD_NS                 I2S_FIFORD_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFORD48H_NS              I2S_FIFORD48H_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFORDNOPOP_NS            I2S_FIFORDNOPOP_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFORD48HNOPOP_NS         I2S_FIFORD48HNOPOP_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOSIZE_NS               I2S_FIFOSIZE_REG(I2S2_BASE_PTR_NS)
  #define FLEXCOMM2__I2S_ID                        I2S_ID_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_ID_NS                     I2S_ID_REG(I2S2_BASE_PTR_NS)
  /* I2S3 */
  #define FLEXCOMM3__I2S_CFG1                      I2S_CFG1_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_CFG1_NS                   I2S_CFG1_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_CFG2                      I2S_CFG2_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_CFG2_NS                   I2S_CFG2_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_STAT                      I2S_STAT_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_STAT_NS                   I2S_STAT_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_DIV                       I2S_DIV_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_DIV_NS                    I2S_DIV_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR,0)
  #define FLEXCOMM3__I2S_PCFG11_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR_NS,0)
  #define FLEXCOMM3__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR,0)
  #define FLEXCOMM3__I2S_PCFG21_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR_NS,0)
  #define FLEXCOMM3__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR,0)
  #define FLEXCOMM3__I2S_PSTAT1_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR_NS,0)
  #define FLEXCOMM3__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR,1)
  #define FLEXCOMM3__I2S_PCFG12_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR_NS,1)
  #define FLEXCOMM3__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR,1)
  #define FLEXCOMM3__I2S_PCFG22_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR_NS,1)
  #define FLEXCOMM3__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR,1)
  #define FLEXCOMM3__I2S_PSTAT2_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR_NS,1)
  #define FLEXCOMM3__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR,2)
  #define FLEXCOMM3__I2S_PCFG13_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR_NS,2)
  #define FLEXCOMM3__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR,2)
  #define FLEXCOMM3__I2S_PCFG23_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR_NS,2)
  #define FLEXCOMM3__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR,2)
  #define FLEXCOMM3__I2S_PSTAT3_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR_NS,2)
  #define FLEXCOMM3__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOCFG_NS                I2S_FIFOCFG_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOSTAT_NS               I2S_FIFOSTAT_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOTRIG_NS               I2S_FIFOTRIG_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOINTENSET_NS           I2S_FIFOINTENSET_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOINTENCLR_NS           I2S_FIFOINTENCLR_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOINTSTAT_NS            I2S_FIFOINTSTAT_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOWR_NS                 I2S_FIFOWR_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOWR48H_NS              I2S_FIFOWR48H_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFORD                    I2S_FIFORD_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFORD_NS                 I2S_FIFORD_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFORD48H_NS              I2S_FIFORD48H_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFORDNOPOP_NS            I2S_FIFORDNOPOP_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFORD48HNOPOP_NS         I2S_FIFORD48HNOPOP_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOSIZE_NS               I2S_FIFOSIZE_REG(I2S3_BASE_PTR_NS)
  #define FLEXCOMM3__I2S_ID                        I2S_ID_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_ID_NS                     I2S_ID_REG(I2S3_BASE_PTR_NS)
  /* I2S4 */
  #define FLEXCOMM4__I2S_CFG1                      I2S_CFG1_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_CFG1_NS                   I2S_CFG1_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_CFG2                      I2S_CFG2_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_CFG2_NS                   I2S_CFG2_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_STAT                      I2S_STAT_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_STAT_NS                   I2S_STAT_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_DIV                       I2S_DIV_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_DIV_NS                    I2S_DIV_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR,0)
  #define FLEXCOMM4__I2S_PCFG11_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR_NS,0)
  #define FLEXCOMM4__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR,0)
  #define FLEXCOMM4__I2S_PCFG21_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR_NS,0)
  #define FLEXCOMM4__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR,0)
  #define FLEXCOMM4__I2S_PSTAT1_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR_NS,0)
  #define FLEXCOMM4__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR,1)
  #define FLEXCOMM4__I2S_PCFG12_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR_NS,1)
  #define FLEXCOMM4__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR,1)
  #define FLEXCOMM4__I2S_PCFG22_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR_NS,1)
  #define FLEXCOMM4__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR,1)
  #define FLEXCOMM4__I2S_PSTAT2_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR_NS,1)
  #define FLEXCOMM4__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR,2)
  #define FLEXCOMM4__I2S_PCFG13_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR_NS,2)
  #define FLEXCOMM4__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR,2)
  #define FLEXCOMM4__I2S_PCFG23_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR_NS,2)
  #define FLEXCOMM4__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR,2)
  #define FLEXCOMM4__I2S_PSTAT3_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR_NS,2)
  #define FLEXCOMM4__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOCFG_NS                I2S_FIFOCFG_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOSTAT_NS               I2S_FIFOSTAT_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOTRIG_NS               I2S_FIFOTRIG_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOINTENSET_NS           I2S_FIFOINTENSET_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOINTENCLR_NS           I2S_FIFOINTENCLR_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOINTSTAT_NS            I2S_FIFOINTSTAT_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOWR_NS                 I2S_FIFOWR_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOWR48H_NS              I2S_FIFOWR48H_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFORD                    I2S_FIFORD_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFORD_NS                 I2S_FIFORD_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFORD48H_NS              I2S_FIFORD48H_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFORDNOPOP_NS            I2S_FIFORDNOPOP_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFORD48HNOPOP_NS         I2S_FIFORD48HNOPOP_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOSIZE_NS               I2S_FIFOSIZE_REG(I2S4_BASE_PTR_NS)
  #define FLEXCOMM4__I2S_ID                        I2S_ID_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_ID_NS                     I2S_ID_REG(I2S4_BASE_PTR_NS)
  /* I2S5 */
  #define FLEXCOMM5__I2S_CFG1                      I2S_CFG1_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_CFG1_NS                   I2S_CFG1_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_CFG2                      I2S_CFG2_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_CFG2_NS                   I2S_CFG2_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_STAT                      I2S_STAT_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_STAT_NS                   I2S_STAT_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_DIV                       I2S_DIV_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_DIV_NS                    I2S_DIV_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR,0)
  #define FLEXCOMM5__I2S_PCFG11_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR_NS,0)
  #define FLEXCOMM5__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR,0)
  #define FLEXCOMM5__I2S_PCFG21_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR_NS,0)
  #define FLEXCOMM5__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR,0)
  #define FLEXCOMM5__I2S_PSTAT1_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR_NS,0)
  #define FLEXCOMM5__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR,1)
  #define FLEXCOMM5__I2S_PCFG12_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR_NS,1)
  #define FLEXCOMM5__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR,1)
  #define FLEXCOMM5__I2S_PCFG22_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR_NS,1)
  #define FLEXCOMM5__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR,1)
  #define FLEXCOMM5__I2S_PSTAT2_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR_NS,1)
  #define FLEXCOMM5__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR,2)
  #define FLEXCOMM5__I2S_PCFG13_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR_NS,2)
  #define FLEXCOMM5__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR,2)
  #define FLEXCOMM5__I2S_PCFG23_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR_NS,2)
  #define FLEXCOMM5__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR,2)
  #define FLEXCOMM5__I2S_PSTAT3_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR_NS,2)
  #define FLEXCOMM5__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOCFG_NS                I2S_FIFOCFG_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOSTAT_NS               I2S_FIFOSTAT_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOTRIG_NS               I2S_FIFOTRIG_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOINTENSET_NS           I2S_FIFOINTENSET_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOINTENCLR_NS           I2S_FIFOINTENCLR_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOINTSTAT_NS            I2S_FIFOINTSTAT_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOWR_NS                 I2S_FIFOWR_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOWR48H_NS              I2S_FIFOWR48H_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFORD                    I2S_FIFORD_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFORD_NS                 I2S_FIFORD_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFORD48H_NS              I2S_FIFORD48H_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFORDNOPOP_NS            I2S_FIFORDNOPOP_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFORD48HNOPOP_NS         I2S_FIFORD48HNOPOP_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOSIZE_NS               I2S_FIFOSIZE_REG(I2S5_BASE_PTR_NS)
  #define FLEXCOMM5__I2S_ID                        I2S_ID_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_ID_NS                     I2S_ID_REG(I2S5_BASE_PTR_NS)
  /* I2S6 */
  #define FLEXCOMM6__I2S_CFG1                      I2S_CFG1_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_CFG1_NS                   I2S_CFG1_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_CFG2                      I2S_CFG2_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_CFG2_NS                   I2S_CFG2_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_STAT                      I2S_STAT_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_STAT_NS                   I2S_STAT_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_DIV                       I2S_DIV_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_DIV_NS                    I2S_DIV_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR,0)
  #define FLEXCOMM6__I2S_PCFG11_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR_NS,0)
  #define FLEXCOMM6__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR,0)
  #define FLEXCOMM6__I2S_PCFG21_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR_NS,0)
  #define FLEXCOMM6__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR,0)
  #define FLEXCOMM6__I2S_PSTAT1_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR_NS,0)
  #define FLEXCOMM6__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR,1)
  #define FLEXCOMM6__I2S_PCFG12_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR_NS,1)
  #define FLEXCOMM6__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR,1)
  #define FLEXCOMM6__I2S_PCFG22_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR_NS,1)
  #define FLEXCOMM6__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR,1)
  #define FLEXCOMM6__I2S_PSTAT2_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR_NS,1)
  #define FLEXCOMM6__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR,2)
  #define FLEXCOMM6__I2S_PCFG13_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR_NS,2)
  #define FLEXCOMM6__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR,2)
  #define FLEXCOMM6__I2S_PCFG23_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR_NS,2)
  #define FLEXCOMM6__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR,2)
  #define FLEXCOMM6__I2S_PSTAT3_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR_NS,2)
  #define FLEXCOMM6__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOCFG_NS                I2S_FIFOCFG_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOSTAT_NS               I2S_FIFOSTAT_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOTRIG_NS               I2S_FIFOTRIG_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOINTENSET_NS           I2S_FIFOINTENSET_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOINTENCLR_NS           I2S_FIFOINTENCLR_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOINTSTAT_NS            I2S_FIFOINTSTAT_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOWR_NS                 I2S_FIFOWR_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOWR48H_NS              I2S_FIFOWR48H_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFORD                    I2S_FIFORD_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFORD_NS                 I2S_FIFORD_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFORD48H_NS              I2S_FIFORD48H_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFORDNOPOP_NS            I2S_FIFORDNOPOP_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFORD48HNOPOP_NS         I2S_FIFORD48HNOPOP_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOSIZE_NS               I2S_FIFOSIZE_REG(I2S6_BASE_PTR_NS)
  #define FLEXCOMM6__I2S_ID                        I2S_ID_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_ID_NS                     I2S_ID_REG(I2S6_BASE_PTR_NS)
  /* I2S7 */
  #define FLEXCOMM7__I2S_CFG1                      I2S_CFG1_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_CFG1_NS                   I2S_CFG1_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_CFG2                      I2S_CFG2_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_CFG2_NS                   I2S_CFG2_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_STAT                      I2S_STAT_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_STAT_NS                   I2S_STAT_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_DIV                       I2S_DIV_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_DIV_NS                    I2S_DIV_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR,0)
  #define FLEXCOMM7__I2S_PCFG11_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR_NS,0)
  #define FLEXCOMM7__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR,0)
  #define FLEXCOMM7__I2S_PCFG21_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR_NS,0)
  #define FLEXCOMM7__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR,0)
  #define FLEXCOMM7__I2S_PSTAT1_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR_NS,0)
  #define FLEXCOMM7__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR,1)
  #define FLEXCOMM7__I2S_PCFG12_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR_NS,1)
  #define FLEXCOMM7__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR,1)
  #define FLEXCOMM7__I2S_PCFG22_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR_NS,1)
  #define FLEXCOMM7__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR,1)
  #define FLEXCOMM7__I2S_PSTAT2_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR_NS,1)
  #define FLEXCOMM7__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR,2)
  #define FLEXCOMM7__I2S_PCFG13_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR_NS,2)
  #define FLEXCOMM7__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR,2)
  #define FLEXCOMM7__I2S_PCFG23_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR_NS,2)
  #define FLEXCOMM7__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR,2)
  #define FLEXCOMM7__I2S_PSTAT3_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR_NS,2)
  #define FLEXCOMM7__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOCFG_NS                I2S_FIFOCFG_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOSTAT_NS               I2S_FIFOSTAT_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOTRIG_NS               I2S_FIFOTRIG_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOINTENSET_NS           I2S_FIFOINTENSET_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOINTENCLR_NS           I2S_FIFOINTENCLR_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOINTSTAT_NS            I2S_FIFOINTSTAT_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOWR_NS                 I2S_FIFOWR_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOWR48H_NS              I2S_FIFOWR48H_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFORD                    I2S_FIFORD_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFORD_NS                 I2S_FIFORD_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFORD48H_NS              I2S_FIFORD48H_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFORDNOPOP_NS            I2S_FIFORDNOPOP_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFORD48HNOPOP_NS         I2S_FIFORD48HNOPOP_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOSIZE_NS               I2S_FIFOSIZE_REG(I2S7_BASE_PTR_NS)
  #define FLEXCOMM7__I2S_ID                        I2S_ID_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_ID_NS                     I2S_ID_REG(I2S7_BASE_PTR_NS)
  /* I2S8 */
  #define FLEXCOMM8__I2S_CFG1                      I2S_CFG1_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_CFG1_NS                   I2S_CFG1_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_CFG2                      I2S_CFG2_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_CFG2_NS                   I2S_CFG2_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_STAT                      I2S_STAT_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_STAT_NS                   I2S_STAT_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_DIV                       I2S_DIV_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_DIV_NS                    I2S_DIV_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR,0)
  #define FLEXCOMM8__I2S_PCFG11_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR_NS,0)
  #define FLEXCOMM8__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR,0)
  #define FLEXCOMM8__I2S_PCFG21_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR_NS,0)
  #define FLEXCOMM8__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR,0)
  #define FLEXCOMM8__I2S_PSTAT1_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR_NS,0)
  #define FLEXCOMM8__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR,1)
  #define FLEXCOMM8__I2S_PCFG12_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR_NS,1)
  #define FLEXCOMM8__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR,1)
  #define FLEXCOMM8__I2S_PCFG22_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR_NS,1)
  #define FLEXCOMM8__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR,1)
  #define FLEXCOMM8__I2S_PSTAT2_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR_NS,1)
  #define FLEXCOMM8__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR,2)
  #define FLEXCOMM8__I2S_PCFG13_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR_NS,2)
  #define FLEXCOMM8__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR,2)
  #define FLEXCOMM8__I2S_PCFG23_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR_NS,2)
  #define FLEXCOMM8__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR,2)
  #define FLEXCOMM8__I2S_PSTAT3_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR_NS,2)
  #define FLEXCOMM8__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOCFG_NS                I2S_FIFOCFG_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOSTAT_NS               I2S_FIFOSTAT_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOTRIG_NS               I2S_FIFOTRIG_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOINTENSET_NS           I2S_FIFOINTENSET_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOINTENCLR_NS           I2S_FIFOINTENCLR_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOINTSTAT_NS            I2S_FIFOINTSTAT_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOWR_NS                 I2S_FIFOWR_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOWR48H_NS              I2S_FIFOWR48H_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFORD                    I2S_FIFORD_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFORD_NS                 I2S_FIFORD_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFORD48H_NS              I2S_FIFORD48H_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFORDNOPOP_NS            I2S_FIFORDNOPOP_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFORD48HNOPOP_NS         I2S_FIFORD48HNOPOP_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOSIZE_NS               I2S_FIFOSIZE_REG(I2S8_BASE_PTR_NS)
  #define FLEXCOMM8__I2S_ID                        I2S_ID_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_ID_NS                     I2S_ID_REG(I2S8_BASE_PTR_NS)
  /* I2S9 */
  #define FLEXCOMM9__I2S_CFG1                      I2S_CFG1_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_CFG1_NS                   I2S_CFG1_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_CFG2                      I2S_CFG2_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_CFG2_NS                   I2S_CFG2_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_STAT                      I2S_STAT_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_STAT_NS                   I2S_STAT_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_DIV                       I2S_DIV_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_DIV_NS                    I2S_DIV_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR,0)
  #define FLEXCOMM9__I2S_PCFG11_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR_NS,0)
  #define FLEXCOMM9__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR,0)
  #define FLEXCOMM9__I2S_PCFG21_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR_NS,0)
  #define FLEXCOMM9__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR,0)
  #define FLEXCOMM9__I2S_PSTAT1_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR_NS,0)
  #define FLEXCOMM9__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR,1)
  #define FLEXCOMM9__I2S_PCFG12_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR_NS,1)
  #define FLEXCOMM9__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR,1)
  #define FLEXCOMM9__I2S_PCFG22_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR_NS,1)
  #define FLEXCOMM9__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR,1)
  #define FLEXCOMM9__I2S_PSTAT2_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR_NS,1)
  #define FLEXCOMM9__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR,2)
  #define FLEXCOMM9__I2S_PCFG13_NS                 I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR_NS,2)
  #define FLEXCOMM9__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR,2)
  #define FLEXCOMM9__I2S_PCFG23_NS                 I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR_NS,2)
  #define FLEXCOMM9__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR,2)
  #define FLEXCOMM9__I2S_PSTAT3_NS                 I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR_NS,2)
  #define FLEXCOMM9__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOCFG_NS                I2S_FIFOCFG_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOSTAT_NS               I2S_FIFOSTAT_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOTRIG_NS               I2S_FIFOTRIG_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOINTENSET_NS           I2S_FIFOINTENSET_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOINTENCLR_NS           I2S_FIFOINTENCLR_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOINTSTAT_NS            I2S_FIFOINTSTAT_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOWR_NS                 I2S_FIFOWR_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOWR48H_NS              I2S_FIFOWR48H_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFORD                    I2S_FIFORD_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFORD_NS                 I2S_FIFORD_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFORD48H_NS              I2S_FIFORD48H_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFORDNOPOP_NS            I2S_FIFORDNOPOP_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFORD48HNOPOP_NS         I2S_FIFORD48HNOPOP_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOSIZE_NS               I2S_FIFOSIZE_REG(I2S9_BASE_PTR_NS)
  #define FLEXCOMM9__I2S_ID                        I2S_ID_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_ID_NS                     I2S_ID_REG(I2S9_BASE_PTR_NS)
  /* I2S10 */
  #define FLEXCOMM10__I2S_CFG1                     I2S_CFG1_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_CFG1_NS                  I2S_CFG1_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_CFG2                     I2S_CFG2_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_CFG2_NS                  I2S_CFG2_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_STAT                     I2S_STAT_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_STAT_NS                  I2S_STAT_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_DIV                      I2S_DIV_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_DIV_NS                   I2S_DIV_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_PCFG11                   I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR,0)
  #define FLEXCOMM10__I2S_PCFG11_NS                I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR_NS,0)
  #define FLEXCOMM10__I2S_PCFG21                   I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR,0)
  #define FLEXCOMM10__I2S_PCFG21_NS                I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR_NS,0)
  #define FLEXCOMM10__I2S_PSTAT1                   I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR,0)
  #define FLEXCOMM10__I2S_PSTAT1_NS                I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR_NS,0)
  #define FLEXCOMM10__I2S_PCFG12                   I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR,1)
  #define FLEXCOMM10__I2S_PCFG12_NS                I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR_NS,1)
  #define FLEXCOMM10__I2S_PCFG22                   I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR,1)
  #define FLEXCOMM10__I2S_PCFG22_NS                I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR_NS,1)
  #define FLEXCOMM10__I2S_PSTAT2                   I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR,1)
  #define FLEXCOMM10__I2S_PSTAT2_NS                I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR_NS,1)
  #define FLEXCOMM10__I2S_PCFG13                   I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR,2)
  #define FLEXCOMM10__I2S_PCFG13_NS                I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR_NS,2)
  #define FLEXCOMM10__I2S_PCFG23                   I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR,2)
  #define FLEXCOMM10__I2S_PCFG23_NS                I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR_NS,2)
  #define FLEXCOMM10__I2S_PSTAT3                   I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR,2)
  #define FLEXCOMM10__I2S_PSTAT3_NS                I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR_NS,2)
  #define FLEXCOMM10__I2S_FIFOCFG                  I2S_FIFOCFG_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOCFG_NS               I2S_FIFOCFG_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFOSTAT                 I2S_FIFOSTAT_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOSTAT_NS              I2S_FIFOSTAT_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFOTRIG                 I2S_FIFOTRIG_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOTRIG_NS              I2S_FIFOTRIG_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFOINTENSET             I2S_FIFOINTENSET_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOINTENSET_NS          I2S_FIFOINTENSET_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFOINTENCLR             I2S_FIFOINTENCLR_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOINTENCLR_NS          I2S_FIFOINTENCLR_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFOINTSTAT              I2S_FIFOINTSTAT_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOINTSTAT_NS           I2S_FIFOINTSTAT_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFOWR                   I2S_FIFOWR_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOWR_NS                I2S_FIFOWR_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFOWR48H                I2S_FIFOWR48H_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOWR48H_NS             I2S_FIFOWR48H_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFORD                   I2S_FIFORD_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFORD_NS                I2S_FIFORD_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFORD48H                I2S_FIFORD48H_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFORD48H_NS             I2S_FIFORD48H_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFORDNOPOP              I2S_FIFORDNOPOP_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFORDNOPOP_NS           I2S_FIFORDNOPOP_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFORD48HNOPOP           I2S_FIFORD48HNOPOP_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFORD48HNOPOP_NS        I2S_FIFORD48HNOPOP_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_FIFOSIZE                 I2S_FIFOSIZE_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOSIZE_NS              I2S_FIFOSIZE_REG(I2S10_BASE_PTR_NS)
  #define FLEXCOMM10__I2S_ID                       I2S_ID_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_ID_NS                    I2S_ID_REG(I2S10_BASE_PTR_NS)
  /* I2S11 */
  #define FLEXCOMM11__I2S_CFG1                     I2S_CFG1_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_CFG1_NS                  I2S_CFG1_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_CFG2                     I2S_CFG2_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_CFG2_NS                  I2S_CFG2_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_STAT                     I2S_STAT_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_STAT_NS                  I2S_STAT_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_DIV                      I2S_DIV_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_DIV_NS                   I2S_DIV_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_PCFG11                   I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR,0)
  #define FLEXCOMM11__I2S_PCFG11_NS                I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR_NS,0)
  #define FLEXCOMM11__I2S_PCFG21                   I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR,0)
  #define FLEXCOMM11__I2S_PCFG21_NS                I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR_NS,0)
  #define FLEXCOMM11__I2S_PSTAT1                   I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR,0)
  #define FLEXCOMM11__I2S_PSTAT1_NS                I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR_NS,0)
  #define FLEXCOMM11__I2S_PCFG12                   I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR,1)
  #define FLEXCOMM11__I2S_PCFG12_NS                I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR_NS,1)
  #define FLEXCOMM11__I2S_PCFG22                   I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR,1)
  #define FLEXCOMM11__I2S_PCFG22_NS                I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR_NS,1)
  #define FLEXCOMM11__I2S_PSTAT2                   I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR,1)
  #define FLEXCOMM11__I2S_PSTAT2_NS                I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR_NS,1)
  #define FLEXCOMM11__I2S_PCFG13                   I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR,2)
  #define FLEXCOMM11__I2S_PCFG13_NS                I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR_NS,2)
  #define FLEXCOMM11__I2S_PCFG23                   I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR,2)
  #define FLEXCOMM11__I2S_PCFG23_NS                I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR_NS,2)
  #define FLEXCOMM11__I2S_PSTAT3                   I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR,2)
  #define FLEXCOMM11__I2S_PSTAT3_NS                I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR_NS,2)
  #define FLEXCOMM11__I2S_FIFOCFG                  I2S_FIFOCFG_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOCFG_NS               I2S_FIFOCFG_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFOSTAT                 I2S_FIFOSTAT_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOSTAT_NS              I2S_FIFOSTAT_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFOTRIG                 I2S_FIFOTRIG_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOTRIG_NS              I2S_FIFOTRIG_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFOINTENSET             I2S_FIFOINTENSET_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOINTENSET_NS          I2S_FIFOINTENSET_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFOINTENCLR             I2S_FIFOINTENCLR_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOINTENCLR_NS          I2S_FIFOINTENCLR_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFOINTSTAT              I2S_FIFOINTSTAT_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOINTSTAT_NS           I2S_FIFOINTSTAT_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFOWR                   I2S_FIFOWR_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOWR_NS                I2S_FIFOWR_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFOWR48H                I2S_FIFOWR48H_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOWR48H_NS             I2S_FIFOWR48H_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFORD                   I2S_FIFORD_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFORD_NS                I2S_FIFORD_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFORD48H                I2S_FIFORD48H_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFORD48H_NS             I2S_FIFORD48H_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFORDNOPOP              I2S_FIFORDNOPOP_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFORDNOPOP_NS           I2S_FIFORDNOPOP_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFORD48HNOPOP           I2S_FIFORD48HNOPOP_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFORD48HNOPOP_NS        I2S_FIFORD48HNOPOP_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_FIFOSIZE                 I2S_FIFOSIZE_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOSIZE_NS              I2S_FIFOSIZE_REG(I2S11_BASE_PTR_NS)
  #define FLEXCOMM11__I2S_ID                       I2S_ID_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_ID_NS                    I2S_ID_REG(I2S11_BASE_PTR_NS)
  /* I2S12 */
  #define FLEXCOMM12__I2S_CFG1                     I2S_CFG1_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_CFG1_NS                  I2S_CFG1_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_CFG2                     I2S_CFG2_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_CFG2_NS                  I2S_CFG2_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_STAT                     I2S_STAT_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_STAT_NS                  I2S_STAT_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_DIV                      I2S_DIV_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_DIV_NS                   I2S_DIV_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_PCFG11                   I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR,0)
  #define FLEXCOMM12__I2S_PCFG11_NS                I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR_NS,0)
  #define FLEXCOMM12__I2S_PCFG21                   I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR,0)
  #define FLEXCOMM12__I2S_PCFG21_NS                I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR_NS,0)
  #define FLEXCOMM12__I2S_PSTAT1                   I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR,0)
  #define FLEXCOMM12__I2S_PSTAT1_NS                I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR_NS,0)
  #define FLEXCOMM12__I2S_PCFG12                   I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR,1)
  #define FLEXCOMM12__I2S_PCFG12_NS                I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR_NS,1)
  #define FLEXCOMM12__I2S_PCFG22                   I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR,1)
  #define FLEXCOMM12__I2S_PCFG22_NS                I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR_NS,1)
  #define FLEXCOMM12__I2S_PSTAT2                   I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR,1)
  #define FLEXCOMM12__I2S_PSTAT2_NS                I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR_NS,1)
  #define FLEXCOMM12__I2S_PCFG13                   I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR,2)
  #define FLEXCOMM12__I2S_PCFG13_NS                I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR_NS,2)
  #define FLEXCOMM12__I2S_PCFG23                   I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR,2)
  #define FLEXCOMM12__I2S_PCFG23_NS                I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR_NS,2)
  #define FLEXCOMM12__I2S_PSTAT3                   I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR,2)
  #define FLEXCOMM12__I2S_PSTAT3_NS                I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR_NS,2)
  #define FLEXCOMM12__I2S_FIFOCFG                  I2S_FIFOCFG_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOCFG_NS               I2S_FIFOCFG_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFOSTAT                 I2S_FIFOSTAT_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOSTAT_NS              I2S_FIFOSTAT_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFOTRIG                 I2S_FIFOTRIG_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOTRIG_NS              I2S_FIFOTRIG_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFOINTENSET             I2S_FIFOINTENSET_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOINTENSET_NS          I2S_FIFOINTENSET_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFOINTENCLR             I2S_FIFOINTENCLR_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOINTENCLR_NS          I2S_FIFOINTENCLR_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFOINTSTAT              I2S_FIFOINTSTAT_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOINTSTAT_NS           I2S_FIFOINTSTAT_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFOWR                   I2S_FIFOWR_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOWR_NS                I2S_FIFOWR_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFOWR48H                I2S_FIFOWR48H_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOWR48H_NS             I2S_FIFOWR48H_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFORD                   I2S_FIFORD_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFORD_NS                I2S_FIFORD_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFORD48H                I2S_FIFORD48H_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFORD48H_NS             I2S_FIFORD48H_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFORDNOPOP              I2S_FIFORDNOPOP_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFORDNOPOP_NS           I2S_FIFORDNOPOP_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFORD48HNOPOP           I2S_FIFORD48HNOPOP_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFORD48HNOPOP_NS        I2S_FIFORD48HNOPOP_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_FIFOSIZE                 I2S_FIFOSIZE_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOSIZE_NS              I2S_FIFOSIZE_REG(I2S12_BASE_PTR_NS)
  #define FLEXCOMM12__I2S_ID                       I2S_ID_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_ID_NS                    I2S_ID_REG(I2S12_BASE_PTR_NS)
  /* I2S13 */
  #define FLEXCOMM13__I2S_CFG1                     I2S_CFG1_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_CFG1_NS                  I2S_CFG1_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_CFG2                     I2S_CFG2_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_CFG2_NS                  I2S_CFG2_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_STAT                     I2S_STAT_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_STAT_NS                  I2S_STAT_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_DIV                      I2S_DIV_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_DIV_NS                   I2S_DIV_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_PCFG11                   I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR,0)
  #define FLEXCOMM13__I2S_PCFG11_NS                I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR_NS,0)
  #define FLEXCOMM13__I2S_PCFG21                   I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR,0)
  #define FLEXCOMM13__I2S_PCFG21_NS                I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR_NS,0)
  #define FLEXCOMM13__I2S_PSTAT1                   I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR,0)
  #define FLEXCOMM13__I2S_PSTAT1_NS                I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR_NS,0)
  #define FLEXCOMM13__I2S_PCFG12                   I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR,1)
  #define FLEXCOMM13__I2S_PCFG12_NS                I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR_NS,1)
  #define FLEXCOMM13__I2S_PCFG22                   I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR,1)
  #define FLEXCOMM13__I2S_PCFG22_NS                I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR_NS,1)
  #define FLEXCOMM13__I2S_PSTAT2                   I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR,1)
  #define FLEXCOMM13__I2S_PSTAT2_NS                I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR_NS,1)
  #define FLEXCOMM13__I2S_PCFG13                   I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR,2)
  #define FLEXCOMM13__I2S_PCFG13_NS                I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR_NS,2)
  #define FLEXCOMM13__I2S_PCFG23                   I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR,2)
  #define FLEXCOMM13__I2S_PCFG23_NS                I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR_NS,2)
  #define FLEXCOMM13__I2S_PSTAT3                   I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR,2)
  #define FLEXCOMM13__I2S_PSTAT3_NS                I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR_NS,2)
  #define FLEXCOMM13__I2S_FIFOCFG                  I2S_FIFOCFG_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOCFG_NS               I2S_FIFOCFG_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFOSTAT                 I2S_FIFOSTAT_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOSTAT_NS              I2S_FIFOSTAT_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFOTRIG                 I2S_FIFOTRIG_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOTRIG_NS              I2S_FIFOTRIG_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFOINTENSET             I2S_FIFOINTENSET_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOINTENSET_NS          I2S_FIFOINTENSET_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFOINTENCLR             I2S_FIFOINTENCLR_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOINTENCLR_NS          I2S_FIFOINTENCLR_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFOINTSTAT              I2S_FIFOINTSTAT_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOINTSTAT_NS           I2S_FIFOINTSTAT_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFOWR                   I2S_FIFOWR_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOWR_NS                I2S_FIFOWR_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFOWR48H                I2S_FIFOWR48H_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOWR48H_NS             I2S_FIFOWR48H_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFORD                   I2S_FIFORD_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFORD_NS                I2S_FIFORD_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFORD48H                I2S_FIFORD48H_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFORD48H_NS             I2S_FIFORD48H_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFORDNOPOP              I2S_FIFORDNOPOP_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFORDNOPOP_NS           I2S_FIFORDNOPOP_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFORD48HNOPOP           I2S_FIFORD48HNOPOP_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFORD48HNOPOP_NS        I2S_FIFORD48HNOPOP_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_FIFOSIZE                 I2S_FIFOSIZE_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOSIZE_NS              I2S_FIFOSIZE_REG(I2S13_BASE_PTR_NS)
  #define FLEXCOMM13__I2S_ID                       I2S_ID_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_ID_NS                    I2S_ID_REG(I2S13_BASE_PTR_NS)
#else
  /* I2S0 */
  #define FLEXCOMM0__I2S_CFG1                      I2S_CFG1_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_CFG2                      I2S_CFG2_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_STAT                      I2S_STAT_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_DIV                       I2S_DIV_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR,0)
  #define FLEXCOMM0__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR,0)
  #define FLEXCOMM0__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR,0)
  #define FLEXCOMM0__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR,1)
  #define FLEXCOMM0__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR,1)
  #define FLEXCOMM0__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR,1)
  #define FLEXCOMM0__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR,2)
  #define FLEXCOMM0__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR,2)
  #define FLEXCOMM0__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR,2)
  #define FLEXCOMM0__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFORD                    I2S_FIFORD_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S0_BASE_PTR)
  #define FLEXCOMM0__I2S_ID                        I2S_ID_REG(I2S0_BASE_PTR)
  /* I2S1 */
  #define FLEXCOMM1__I2S_CFG1                      I2S_CFG1_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_CFG2                      I2S_CFG2_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_STAT                      I2S_STAT_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_DIV                       I2S_DIV_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR,0)
  #define FLEXCOMM1__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR,0)
  #define FLEXCOMM1__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR,0)
  #define FLEXCOMM1__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR,1)
  #define FLEXCOMM1__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR,1)
  #define FLEXCOMM1__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR,1)
  #define FLEXCOMM1__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR,2)
  #define FLEXCOMM1__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR,2)
  #define FLEXCOMM1__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR,2)
  #define FLEXCOMM1__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFORD                    I2S_FIFORD_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S1_BASE_PTR)
  #define FLEXCOMM1__I2S_ID                        I2S_ID_REG(I2S1_BASE_PTR)
  /* I2S2 */
  #define FLEXCOMM2__I2S_CFG1                      I2S_CFG1_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_CFG2                      I2S_CFG2_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_STAT                      I2S_STAT_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_DIV                       I2S_DIV_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR,0)
  #define FLEXCOMM2__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR,0)
  #define FLEXCOMM2__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR,0)
  #define FLEXCOMM2__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR,1)
  #define FLEXCOMM2__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR,1)
  #define FLEXCOMM2__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR,1)
  #define FLEXCOMM2__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR,2)
  #define FLEXCOMM2__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR,2)
  #define FLEXCOMM2__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR,2)
  #define FLEXCOMM2__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFORD                    I2S_FIFORD_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S2_BASE_PTR)
  #define FLEXCOMM2__I2S_ID                        I2S_ID_REG(I2S2_BASE_PTR)
  /* I2S3 */
  #define FLEXCOMM3__I2S_CFG1                      I2S_CFG1_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_CFG2                      I2S_CFG2_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_STAT                      I2S_STAT_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_DIV                       I2S_DIV_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR,0)
  #define FLEXCOMM3__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR,0)
  #define FLEXCOMM3__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR,0)
  #define FLEXCOMM3__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR,1)
  #define FLEXCOMM3__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR,1)
  #define FLEXCOMM3__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR,1)
  #define FLEXCOMM3__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR,2)
  #define FLEXCOMM3__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR,2)
  #define FLEXCOMM3__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR,2)
  #define FLEXCOMM3__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFORD                    I2S_FIFORD_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S3_BASE_PTR)
  #define FLEXCOMM3__I2S_ID                        I2S_ID_REG(I2S3_BASE_PTR)
  /* I2S4 */
  #define FLEXCOMM4__I2S_CFG1                      I2S_CFG1_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_CFG2                      I2S_CFG2_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_STAT                      I2S_STAT_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_DIV                       I2S_DIV_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR,0)
  #define FLEXCOMM4__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR,0)
  #define FLEXCOMM4__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR,0)
  #define FLEXCOMM4__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR,1)
  #define FLEXCOMM4__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR,1)
  #define FLEXCOMM4__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR,1)
  #define FLEXCOMM4__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR,2)
  #define FLEXCOMM4__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR,2)
  #define FLEXCOMM4__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR,2)
  #define FLEXCOMM4__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFORD                    I2S_FIFORD_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S4_BASE_PTR)
  #define FLEXCOMM4__I2S_ID                        I2S_ID_REG(I2S4_BASE_PTR)
  /* I2S5 */
  #define FLEXCOMM5__I2S_CFG1                      I2S_CFG1_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_CFG2                      I2S_CFG2_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_STAT                      I2S_STAT_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_DIV                       I2S_DIV_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR,0)
  #define FLEXCOMM5__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR,0)
  #define FLEXCOMM5__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR,0)
  #define FLEXCOMM5__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR,1)
  #define FLEXCOMM5__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR,1)
  #define FLEXCOMM5__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR,1)
  #define FLEXCOMM5__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR,2)
  #define FLEXCOMM5__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR,2)
  #define FLEXCOMM5__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR,2)
  #define FLEXCOMM5__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFORD                    I2S_FIFORD_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S5_BASE_PTR)
  #define FLEXCOMM5__I2S_ID                        I2S_ID_REG(I2S5_BASE_PTR)
  /* I2S6 */
  #define FLEXCOMM6__I2S_CFG1                      I2S_CFG1_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_CFG2                      I2S_CFG2_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_STAT                      I2S_STAT_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_DIV                       I2S_DIV_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR,0)
  #define FLEXCOMM6__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR,0)
  #define FLEXCOMM6__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR,0)
  #define FLEXCOMM6__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR,1)
  #define FLEXCOMM6__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR,1)
  #define FLEXCOMM6__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR,1)
  #define FLEXCOMM6__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR,2)
  #define FLEXCOMM6__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR,2)
  #define FLEXCOMM6__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR,2)
  #define FLEXCOMM6__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFORD                    I2S_FIFORD_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S6_BASE_PTR)
  #define FLEXCOMM6__I2S_ID                        I2S_ID_REG(I2S6_BASE_PTR)
  /* I2S7 */
  #define FLEXCOMM7__I2S_CFG1                      I2S_CFG1_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_CFG2                      I2S_CFG2_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_STAT                      I2S_STAT_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_DIV                       I2S_DIV_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR,0)
  #define FLEXCOMM7__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR,0)
  #define FLEXCOMM7__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR,0)
  #define FLEXCOMM7__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR,1)
  #define FLEXCOMM7__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR,1)
  #define FLEXCOMM7__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR,1)
  #define FLEXCOMM7__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR,2)
  #define FLEXCOMM7__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR,2)
  #define FLEXCOMM7__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR,2)
  #define FLEXCOMM7__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFORD                    I2S_FIFORD_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S7_BASE_PTR)
  #define FLEXCOMM7__I2S_ID                        I2S_ID_REG(I2S7_BASE_PTR)
  /* I2S8 */
  #define FLEXCOMM8__I2S_CFG1                      I2S_CFG1_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_CFG2                      I2S_CFG2_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_STAT                      I2S_STAT_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_DIV                       I2S_DIV_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR,0)
  #define FLEXCOMM8__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR,0)
  #define FLEXCOMM8__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR,0)
  #define FLEXCOMM8__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR,1)
  #define FLEXCOMM8__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR,1)
  #define FLEXCOMM8__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR,1)
  #define FLEXCOMM8__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR,2)
  #define FLEXCOMM8__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR,2)
  #define FLEXCOMM8__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR,2)
  #define FLEXCOMM8__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFORD                    I2S_FIFORD_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S8_BASE_PTR)
  #define FLEXCOMM8__I2S_ID                        I2S_ID_REG(I2S8_BASE_PTR)
  /* I2S9 */
  #define FLEXCOMM9__I2S_CFG1                      I2S_CFG1_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_CFG2                      I2S_CFG2_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_STAT                      I2S_STAT_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_DIV                       I2S_DIV_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_PCFG11                    I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR,0)
  #define FLEXCOMM9__I2S_PCFG21                    I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR,0)
  #define FLEXCOMM9__I2S_PSTAT1                    I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR,0)
  #define FLEXCOMM9__I2S_PCFG12                    I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR,1)
  #define FLEXCOMM9__I2S_PCFG22                    I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR,1)
  #define FLEXCOMM9__I2S_PSTAT2                    I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR,1)
  #define FLEXCOMM9__I2S_PCFG13                    I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR,2)
  #define FLEXCOMM9__I2S_PCFG23                    I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR,2)
  #define FLEXCOMM9__I2S_PSTAT3                    I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR,2)
  #define FLEXCOMM9__I2S_FIFOCFG                   I2S_FIFOCFG_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOSTAT                  I2S_FIFOSTAT_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOTRIG                  I2S_FIFOTRIG_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOINTENSET              I2S_FIFOINTENSET_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOINTENCLR              I2S_FIFOINTENCLR_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOINTSTAT               I2S_FIFOINTSTAT_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOWR                    I2S_FIFOWR_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOWR48H                 I2S_FIFOWR48H_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFORD                    I2S_FIFORD_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFORD48H                 I2S_FIFORD48H_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFORDNOPOP               I2S_FIFORDNOPOP_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFORD48HNOPOP            I2S_FIFORD48HNOPOP_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_FIFOSIZE                  I2S_FIFOSIZE_REG(I2S9_BASE_PTR)
  #define FLEXCOMM9__I2S_ID                        I2S_ID_REG(I2S9_BASE_PTR)
  /* I2S10 */
  #define FLEXCOMM10__I2S_CFG1                     I2S_CFG1_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_CFG2                     I2S_CFG2_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_STAT                     I2S_STAT_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_DIV                      I2S_DIV_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_PCFG11                   I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR,0)
  #define FLEXCOMM10__I2S_PCFG21                   I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR,0)
  #define FLEXCOMM10__I2S_PSTAT1                   I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR,0)
  #define FLEXCOMM10__I2S_PCFG12                   I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR,1)
  #define FLEXCOMM10__I2S_PCFG22                   I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR,1)
  #define FLEXCOMM10__I2S_PSTAT2                   I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR,1)
  #define FLEXCOMM10__I2S_PCFG13                   I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR,2)
  #define FLEXCOMM10__I2S_PCFG23                   I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR,2)
  #define FLEXCOMM10__I2S_PSTAT3                   I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR,2)
  #define FLEXCOMM10__I2S_FIFOCFG                  I2S_FIFOCFG_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOSTAT                 I2S_FIFOSTAT_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOTRIG                 I2S_FIFOTRIG_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOINTENSET             I2S_FIFOINTENSET_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOINTENCLR             I2S_FIFOINTENCLR_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOINTSTAT              I2S_FIFOINTSTAT_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOWR                   I2S_FIFOWR_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOWR48H                I2S_FIFOWR48H_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFORD                   I2S_FIFORD_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFORD48H                I2S_FIFORD48H_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFORDNOPOP              I2S_FIFORDNOPOP_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFORD48HNOPOP           I2S_FIFORD48HNOPOP_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_FIFOSIZE                 I2S_FIFOSIZE_REG(I2S10_BASE_PTR)
  #define FLEXCOMM10__I2S_ID                       I2S_ID_REG(I2S10_BASE_PTR)
  /* I2S11 */
  #define FLEXCOMM11__I2S_CFG1                     I2S_CFG1_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_CFG2                     I2S_CFG2_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_STAT                     I2S_STAT_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_DIV                      I2S_DIV_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_PCFG11                   I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR,0)
  #define FLEXCOMM11__I2S_PCFG21                   I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR,0)
  #define FLEXCOMM11__I2S_PSTAT1                   I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR,0)
  #define FLEXCOMM11__I2S_PCFG12                   I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR,1)
  #define FLEXCOMM11__I2S_PCFG22                   I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR,1)
  #define FLEXCOMM11__I2S_PSTAT2                   I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR,1)
  #define FLEXCOMM11__I2S_PCFG13                   I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR,2)
  #define FLEXCOMM11__I2S_PCFG23                   I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR,2)
  #define FLEXCOMM11__I2S_PSTAT3                   I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR,2)
  #define FLEXCOMM11__I2S_FIFOCFG                  I2S_FIFOCFG_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOSTAT                 I2S_FIFOSTAT_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOTRIG                 I2S_FIFOTRIG_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOINTENSET             I2S_FIFOINTENSET_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOINTENCLR             I2S_FIFOINTENCLR_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOINTSTAT              I2S_FIFOINTSTAT_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOWR                   I2S_FIFOWR_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOWR48H                I2S_FIFOWR48H_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFORD                   I2S_FIFORD_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFORD48H                I2S_FIFORD48H_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFORDNOPOP              I2S_FIFORDNOPOP_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFORD48HNOPOP           I2S_FIFORD48HNOPOP_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_FIFOSIZE                 I2S_FIFOSIZE_REG(I2S11_BASE_PTR)
  #define FLEXCOMM11__I2S_ID                       I2S_ID_REG(I2S11_BASE_PTR)
  /* I2S12 */
  #define FLEXCOMM12__I2S_CFG1                     I2S_CFG1_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_CFG2                     I2S_CFG2_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_STAT                     I2S_STAT_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_DIV                      I2S_DIV_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_PCFG11                   I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR,0)
  #define FLEXCOMM12__I2S_PCFG21                   I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR,0)
  #define FLEXCOMM12__I2S_PSTAT1                   I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR,0)
  #define FLEXCOMM12__I2S_PCFG12                   I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR,1)
  #define FLEXCOMM12__I2S_PCFG22                   I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR,1)
  #define FLEXCOMM12__I2S_PSTAT2                   I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR,1)
  #define FLEXCOMM12__I2S_PCFG13                   I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR,2)
  #define FLEXCOMM12__I2S_PCFG23                   I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR,2)
  #define FLEXCOMM12__I2S_PSTAT3                   I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR,2)
  #define FLEXCOMM12__I2S_FIFOCFG                  I2S_FIFOCFG_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOSTAT                 I2S_FIFOSTAT_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOTRIG                 I2S_FIFOTRIG_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOINTENSET             I2S_FIFOINTENSET_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOINTENCLR             I2S_FIFOINTENCLR_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOINTSTAT              I2S_FIFOINTSTAT_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOWR                   I2S_FIFOWR_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOWR48H                I2S_FIFOWR48H_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFORD                   I2S_FIFORD_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFORD48H                I2S_FIFORD48H_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFORDNOPOP              I2S_FIFORDNOPOP_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFORD48HNOPOP           I2S_FIFORD48HNOPOP_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_FIFOSIZE                 I2S_FIFOSIZE_REG(I2S12_BASE_PTR)
  #define FLEXCOMM12__I2S_ID                       I2S_ID_REG(I2S12_BASE_PTR)
  /* I2S13 */
  #define FLEXCOMM13__I2S_CFG1                     I2S_CFG1_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_CFG2                     I2S_CFG2_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_STAT                     I2S_STAT_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_DIV                      I2S_DIV_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_PCFG11                   I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR,0)
  #define FLEXCOMM13__I2S_PCFG21                   I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR,0)
  #define FLEXCOMM13__I2S_PSTAT1                   I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR,0)
  #define FLEXCOMM13__I2S_PCFG12                   I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR,1)
  #define FLEXCOMM13__I2S_PCFG22                   I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR,1)
  #define FLEXCOMM13__I2S_PSTAT2                   I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR,1)
  #define FLEXCOMM13__I2S_PCFG13                   I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR,2)
  #define FLEXCOMM13__I2S_PCFG23                   I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR,2)
  #define FLEXCOMM13__I2S_PSTAT3                   I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR,2)
  #define FLEXCOMM13__I2S_FIFOCFG                  I2S_FIFOCFG_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOSTAT                 I2S_FIFOSTAT_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOTRIG                 I2S_FIFOTRIG_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOINTENSET             I2S_FIFOINTENSET_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOINTENCLR             I2S_FIFOINTENCLR_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOINTSTAT              I2S_FIFOINTSTAT_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOWR                   I2S_FIFOWR_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOWR48H                I2S_FIFOWR48H_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFORD                   I2S_FIFORD_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFORD48H                I2S_FIFORD48H_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFORDNOPOP              I2S_FIFORDNOPOP_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFORD48HNOPOP           I2S_FIFORD48HNOPOP_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_FIFOSIZE                 I2S_FIFOSIZE_REG(I2S13_BASE_PTR)
  #define FLEXCOMM13__I2S_ID                       I2S_ID_REG(I2S13_BASE_PTR)
#endif

/* I2S - Register array accessors */
#define I2S0_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR,index)
#define I2S0_SECCHANNEL_PCFG1_NS(index)          I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR_NS,index)
#define I2S0_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S0_BASE_PTR,index)
#define I2S1_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR,index)
#define I2S1_SECCHANNEL_PCFG1_NS(index)          I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR_NS,index)
#define I2S1_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S1_BASE_PTR,index)
#define I2S10_SECCHANNEL_PCFG1(index)            I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR,index)
#define I2S10_SECCHANNEL_PCFG1_NS(index)         I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR_NS,index)
#define I2S10_SECCHANNEL_PCFG1(index)            I2S_SECCHANNEL_PCFG1_REG(I2S10_BASE_PTR,index)
#define I2S11_SECCHANNEL_PCFG1(index)            I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR,index)
#define I2S11_SECCHANNEL_PCFG1_NS(index)         I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR_NS,index)
#define I2S11_SECCHANNEL_PCFG1(index)            I2S_SECCHANNEL_PCFG1_REG(I2S11_BASE_PTR,index)
#define I2S12_SECCHANNEL_PCFG1(index)            I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR,index)
#define I2S12_SECCHANNEL_PCFG1_NS(index)         I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR_NS,index)
#define I2S12_SECCHANNEL_PCFG1(index)            I2S_SECCHANNEL_PCFG1_REG(I2S12_BASE_PTR,index)
#define I2S13_SECCHANNEL_PCFG1(index)            I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR,index)
#define I2S13_SECCHANNEL_PCFG1_NS(index)         I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR_NS,index)
#define I2S13_SECCHANNEL_PCFG1(index)            I2S_SECCHANNEL_PCFG1_REG(I2S13_BASE_PTR,index)
#define I2S2_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR,index)
#define I2S2_SECCHANNEL_PCFG1_NS(index)          I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR_NS,index)
#define I2S2_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S2_BASE_PTR,index)
#define I2S3_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR,index)
#define I2S3_SECCHANNEL_PCFG1_NS(index)          I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR_NS,index)
#define I2S3_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S3_BASE_PTR,index)
#define I2S4_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR,index)
#define I2S4_SECCHANNEL_PCFG1_NS(index)          I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR_NS,index)
#define I2S4_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S4_BASE_PTR,index)
#define I2S5_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR,index)
#define I2S5_SECCHANNEL_PCFG1_NS(index)          I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR_NS,index)
#define I2S5_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S5_BASE_PTR,index)
#define I2S6_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR,index)
#define I2S6_SECCHANNEL_PCFG1_NS(index)          I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR_NS,index)
#define I2S6_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S6_BASE_PTR,index)
#define I2S7_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR,index)
#define I2S7_SECCHANNEL_PCFG1_NS(index)          I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR_NS,index)
#define I2S7_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S7_BASE_PTR,index)
#define I2S8_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR,index)
#define I2S8_SECCHANNEL_PCFG1_NS(index)          I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR_NS,index)
#define I2S8_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S8_BASE_PTR,index)
#define I2S9_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR,index)
#define I2S9_SECCHANNEL_PCFG1_NS(index)          I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR_NS,index)
#define I2S9_SECCHANNEL_PCFG1(index)             I2S_SECCHANNEL_PCFG1_REG(I2S9_BASE_PTR,index)
#define I2S0_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR,index)
#define I2S0_SECCHANNEL_PCFG2_NS(index)          I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR_NS,index)
#define I2S0_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S0_BASE_PTR,index)
#define I2S1_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR,index)
#define I2S1_SECCHANNEL_PCFG2_NS(index)          I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR_NS,index)
#define I2S1_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S1_BASE_PTR,index)
#define I2S10_SECCHANNEL_PCFG2(index)            I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR,index)
#define I2S10_SECCHANNEL_PCFG2_NS(index)         I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR_NS,index)
#define I2S10_SECCHANNEL_PCFG2(index)            I2S_SECCHANNEL_PCFG2_REG(I2S10_BASE_PTR,index)
#define I2S11_SECCHANNEL_PCFG2(index)            I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR,index)
#define I2S11_SECCHANNEL_PCFG2_NS(index)         I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR_NS,index)
#define I2S11_SECCHANNEL_PCFG2(index)            I2S_SECCHANNEL_PCFG2_REG(I2S11_BASE_PTR,index)
#define I2S12_SECCHANNEL_PCFG2(index)            I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR,index)
#define I2S12_SECCHANNEL_PCFG2_NS(index)         I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR_NS,index)
#define I2S12_SECCHANNEL_PCFG2(index)            I2S_SECCHANNEL_PCFG2_REG(I2S12_BASE_PTR,index)
#define I2S13_SECCHANNEL_PCFG2(index)            I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR,index)
#define I2S13_SECCHANNEL_PCFG2_NS(index)         I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR_NS,index)
#define I2S13_SECCHANNEL_PCFG2(index)            I2S_SECCHANNEL_PCFG2_REG(I2S13_BASE_PTR,index)
#define I2S2_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR,index)
#define I2S2_SECCHANNEL_PCFG2_NS(index)          I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR_NS,index)
#define I2S2_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S2_BASE_PTR,index)
#define I2S3_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR,index)
#define I2S3_SECCHANNEL_PCFG2_NS(index)          I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR_NS,index)
#define I2S3_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S3_BASE_PTR,index)
#define I2S4_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR,index)
#define I2S4_SECCHANNEL_PCFG2_NS(index)          I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR_NS,index)
#define I2S4_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S4_BASE_PTR,index)
#define I2S5_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR,index)
#define I2S5_SECCHANNEL_PCFG2_NS(index)          I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR_NS,index)
#define I2S5_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S5_BASE_PTR,index)
#define I2S6_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR,index)
#define I2S6_SECCHANNEL_PCFG2_NS(index)          I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR_NS,index)
#define I2S6_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S6_BASE_PTR,index)
#define I2S7_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR,index)
#define I2S7_SECCHANNEL_PCFG2_NS(index)          I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR_NS,index)
#define I2S7_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S7_BASE_PTR,index)
#define I2S8_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR,index)
#define I2S8_SECCHANNEL_PCFG2_NS(index)          I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR_NS,index)
#define I2S8_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S8_BASE_PTR,index)
#define I2S9_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR,index)
#define I2S9_SECCHANNEL_PCFG2_NS(index)          I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR_NS,index)
#define I2S9_SECCHANNEL_PCFG2(index)             I2S_SECCHANNEL_PCFG2_REG(I2S9_BASE_PTR,index)
#define I2S0_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR,index)
#define I2S0_SECCHANNEL_PSTAT_NS(index)          I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR_NS,index)
#define I2S0_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S0_BASE_PTR,index)
#define I2S1_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR,index)
#define I2S1_SECCHANNEL_PSTAT_NS(index)          I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR_NS,index)
#define I2S1_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S1_BASE_PTR,index)
#define I2S10_SECCHANNEL_PSTAT(index)            I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR,index)
#define I2S10_SECCHANNEL_PSTAT_NS(index)         I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR_NS,index)
#define I2S10_SECCHANNEL_PSTAT(index)            I2S_SECCHANNEL_PSTAT_REG(I2S10_BASE_PTR,index)
#define I2S11_SECCHANNEL_PSTAT(index)            I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR,index)
#define I2S11_SECCHANNEL_PSTAT_NS(index)         I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR_NS,index)
#define I2S11_SECCHANNEL_PSTAT(index)            I2S_SECCHANNEL_PSTAT_REG(I2S11_BASE_PTR,index)
#define I2S12_SECCHANNEL_PSTAT(index)            I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR,index)
#define I2S12_SECCHANNEL_PSTAT_NS(index)         I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR_NS,index)
#define I2S12_SECCHANNEL_PSTAT(index)            I2S_SECCHANNEL_PSTAT_REG(I2S12_BASE_PTR,index)
#define I2S13_SECCHANNEL_PSTAT(index)            I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR,index)
#define I2S13_SECCHANNEL_PSTAT_NS(index)         I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR_NS,index)
#define I2S13_SECCHANNEL_PSTAT(index)            I2S_SECCHANNEL_PSTAT_REG(I2S13_BASE_PTR,index)
#define I2S2_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR,index)
#define I2S2_SECCHANNEL_PSTAT_NS(index)          I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR_NS,index)
#define I2S2_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S2_BASE_PTR,index)
#define I2S3_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR,index)
#define I2S3_SECCHANNEL_PSTAT_NS(index)          I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR_NS,index)
#define I2S3_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S3_BASE_PTR,index)
#define I2S4_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR,index)
#define I2S4_SECCHANNEL_PSTAT_NS(index)          I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR_NS,index)
#define I2S4_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S4_BASE_PTR,index)
#define I2S5_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR,index)
#define I2S5_SECCHANNEL_PSTAT_NS(index)          I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR_NS,index)
#define I2S5_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S5_BASE_PTR,index)
#define I2S6_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR,index)
#define I2S6_SECCHANNEL_PSTAT_NS(index)          I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR_NS,index)
#define I2S6_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S6_BASE_PTR,index)
#define I2S7_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR,index)
#define I2S7_SECCHANNEL_PSTAT_NS(index)          I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR_NS,index)
#define I2S7_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S7_BASE_PTR,index)
#define I2S8_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR,index)
#define I2S8_SECCHANNEL_PSTAT_NS(index)          I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR_NS,index)
#define I2S8_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S8_BASE_PTR,index)
#define I2S9_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR,index)
#define I2S9_SECCHANNEL_PSTAT_NS(index)          I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR_NS,index)
#define I2S9_SECCHANNEL_PSTAT(index)             I2S_SECCHANNEL_PSTAT_REG(I2S9_BASE_PTR,index)

/*!
 * @}
 */ /* end of group I2S_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group I2S_Peripheral */


/* ----------------------------------------------------------------------------
   -- I3C
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I3C_Peripheral I3C
 * @{
 */

/** I3C - Peripheral register structure */
typedef struct I3C_MemMap {
  uint32_t MCONFIG;                                /**< Master Configuration Register, offset: 0x0 */
  uint32_t SCONFIG;                                /**< Slave Configuration Register, offset: 0x4 */
  uint32_t SSTATUS;                                /**< Slave Status Register, offset: 0x8 */
  uint32_t SCTRL;                                  /**< Slave Control Register, offset: 0xC */
  uint32_t SINTSET;                                /**< Slave Interrupt Set Register, offset: 0x10 */
  uint32_t SINTCLR;                                /**< Slave Interrupt Clear Register, offset: 0x14 */
  uint32_t SINTMASKED;                             /**< Slave Interrupt Mask Register, offset: 0x18 */
  uint32_t SERRWARN;                               /**< Slave Errors and Warnings Register, offset: 0x1C */
  uint32_t SDMACTRL;                               /**< Slave DMA Control Register, offset: 0x20 */
  uint8_t RESERVED_0[8];
  uint32_t SDATACTRL;                              /**< Slave Data Control Register, offset: 0x2C */
  uint32_t SWDATAB;                                /**< Slave Write Data Byte Register, offset: 0x30 */
  uint32_t SWDATABE;                               /**< Slave Write Data Byte End, offset: 0x34 */
  uint32_t SWDATAH;                                /**< Slave Write Data Half-word Register, offset: 0x38 */
  uint32_t SWDATAHE;                               /**< Slave Write Data Half-word End Register, offset: 0x3C */
  uint32_t SRDATAB;                                /**< Slave Read Data Byte Register, offset: 0x40 */
  uint8_t RESERVED_1[4];
  uint32_t SRDATAH;                                /**< Slave Read Data Half-word Register, offset: 0x48 */
  uint8_t RESERVED_2[20];
  uint32_t SCAPABILITIES;                          /**< Slave Capabilities Register, offset: 0x60 */
  uint32_t SDYNADDR;                               /**< Slave Dynamic Address Register, offset: 0x64 */
  uint32_t SMAXLIMITS;                             /**< Slave Maximum Limits Register, offset: 0x68 */
  uint32_t SIDPARTNO;                              /**< Slave ID Part Number Register, offset: 0x6C */
  uint32_t SIDEXT;                                 /**< Slave ID Extension Register, offset: 0x70 */
  uint32_t SVENDORID;                              /**< Slave Vendor ID Register, offset: 0x74 */
  uint32_t STCCLOCK;                               /**< Slave Time Control Clock Register, offset: 0x78 */
  uint32_t SMSGMAPADDR;                            /**< Slave Message-Mapped Address Register, offset: 0x7C */
  uint8_t RESERVED_3[4];
  uint32_t MCTRL;                                  /**< Master Main Control Register, offset: 0x84 */
  uint32_t MSTATUS;                                /**< Master Status Register, offset: 0x88 */
  uint32_t MIBIRULES;                              /**< Master In-band Interrupt Registry and Rules Register, offset: 0x8C */
  uint32_t MINTSET;                                /**< Master Interrupt Set Register, offset: 0x90 */
  uint32_t MINTCLR;                                /**< Master Interrupt Clear Register, offset: 0x94 */
  uint32_t MINTMASKED;                             /**< Master Interrupt Mask Register, offset: 0x98 */
  uint32_t MERRWARN;                               /**< Master Errors and Warnings Register, offset: 0x9C */
  uint32_t MDMACTRL;                               /**< Master DMA Control Register, offset: 0xA0 */
  uint8_t RESERVED_4[8];
  uint32_t MDATACTRL;                              /**< Master Data Control Register, offset: 0xAC */
  uint32_t MWDATAB;                                /**< Master Write Data Byte Register, offset: 0xB0 */
  uint32_t MWDATABE;                               /**< Master Write Data Byte End Register, offset: 0xB4 */
  uint32_t MWDATAH;                                /**< Master Write Data Half-word Register, offset: 0xB8 */
  uint32_t MWDATAHE;                               /**< Master Write Data Byte End Register, offset: 0xBC */
  uint32_t MRDATAB;                                /**< Master Read Data Byte Register, offset: 0xC0 */
  uint8_t RESERVED_5[4];
  uint32_t MRDATAH;                                /**< Master Read Data Half-word Register, offset: 0xC8 */
  uint8_t RESERVED_6[4];
  union {                                          /* offset: 0xD0 */
    uint32_t MWMSG_SDR_CONTROL;                      /**< Master Write Message in SDR mode, offset: 0xD0 */
    uint32_t MWMSG_SDR_DATA;                         /**< Master Write Message Data in SDR mode, offset: 0xD0 */
  };
  uint32_t MRMSG_SDR;                              /**< Master Read Message in SDR mode, offset: 0xD4 */
  union {                                          /* offset: 0xD8 */
    uint32_t MWMSG_DDR_CONTROL;                      /**< Master Write Message in DDR mode, offset: 0xD8 */
    uint32_t MWMSG_DDR_DATA;                         /**< Master Write Message Data in DDR mode, offset: 0xD8 */
  };
  uint32_t MRMSG_DDR;                              /**< Master Read Message in DDR mode, offset: 0xDC */
  uint8_t RESERVED_7[4];
  uint32_t MDYNADDR;                               /**< Master Dynamic Address Register, offset: 0xE4 */
  uint8_t RESERVED_8[3860];
  uint32_t SID;                                    /**< Slave Module ID Register, offset: 0xFFC */
} volatile *I3C_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- I3C - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I3C_Register_Accessor_Macros I3C - Register accessor macros
 * @{
 */


/* I3C - Register accessors */
#define I3C_MCONFIG_REG(base)                    ((base)->MCONFIG)
#define I3C_SCONFIG_REG(base)                    ((base)->SCONFIG)
#define I3C_SSTATUS_REG(base)                    ((base)->SSTATUS)
#define I3C_SCTRL_REG(base)                      ((base)->SCTRL)
#define I3C_SINTSET_REG(base)                    ((base)->SINTSET)
#define I3C_SINTCLR_REG(base)                    ((base)->SINTCLR)
#define I3C_SINTMASKED_REG(base)                 ((base)->SINTMASKED)
#define I3C_SERRWARN_REG(base)                   ((base)->SERRWARN)
#define I3C_SDMACTRL_REG(base)                   ((base)->SDMACTRL)
#define I3C_SDATACTRL_REG(base)                  ((base)->SDATACTRL)
#define I3C_SWDATAB_REG(base)                    ((base)->SWDATAB)
#define I3C_SWDATABE_REG(base)                   ((base)->SWDATABE)
#define I3C_SWDATAH_REG(base)                    ((base)->SWDATAH)
#define I3C_SWDATAHE_REG(base)                   ((base)->SWDATAHE)
#define I3C_SRDATAB_REG(base)                    ((base)->SRDATAB)
#define I3C_SRDATAH_REG(base)                    ((base)->SRDATAH)
#define I3C_SCAPABILITIES_REG(base)              ((base)->SCAPABILITIES)
#define I3C_SDYNADDR_REG(base)                   ((base)->SDYNADDR)
#define I3C_SMAXLIMITS_REG(base)                 ((base)->SMAXLIMITS)
#define I3C_SIDPARTNO_REG(base)                  ((base)->SIDPARTNO)
#define I3C_SIDEXT_REG(base)                     ((base)->SIDEXT)
#define I3C_SVENDORID_REG(base)                  ((base)->SVENDORID)
#define I3C_STCCLOCK_REG(base)                   ((base)->STCCLOCK)
#define I3C_SMSGMAPADDR_REG(base)                ((base)->SMSGMAPADDR)
#define I3C_MCTRL_REG(base)                      ((base)->MCTRL)
#define I3C_MSTATUS_REG(base)                    ((base)->MSTATUS)
#define I3C_MIBIRULES_REG(base)                  ((base)->MIBIRULES)
#define I3C_MINTSET_REG(base)                    ((base)->MINTSET)
#define I3C_MINTCLR_REG(base)                    ((base)->MINTCLR)
#define I3C_MINTMASKED_REG(base)                 ((base)->MINTMASKED)
#define I3C_MERRWARN_REG(base)                   ((base)->MERRWARN)
#define I3C_MDMACTRL_REG(base)                   ((base)->MDMACTRL)
#define I3C_MDATACTRL_REG(base)                  ((base)->MDATACTRL)
#define I3C_MWDATAB_REG(base)                    ((base)->MWDATAB)
#define I3C_MWDATABE_REG(base)                   ((base)->MWDATABE)
#define I3C_MWDATAH_REG(base)                    ((base)->MWDATAH)
#define I3C_MWDATAHE_REG(base)                   ((base)->MWDATAHE)
#define I3C_MRDATAB_REG(base)                    ((base)->MRDATAB)
#define I3C_MRDATAH_REG(base)                    ((base)->MRDATAH)
#define I3C_MWMSG_SDR_CONTROL_REG(base)          ((base)->MWMSG_SDR_CONTROL)
#define I3C_MWMSG_SDR_DATA_REG(base)             ((base)->MWMSG_SDR_DATA)
#define I3C_MRMSG_SDR_REG(base)                  ((base)->MRMSG_SDR)
#define I3C_MWMSG_DDR_CONTROL_REG(base)          ((base)->MWMSG_DDR_CONTROL)
#define I3C_MWMSG_DDR_DATA_REG(base)             ((base)->MWMSG_DDR_DATA)
#define I3C_MRMSG_DDR_REG(base)                  ((base)->MRMSG_DDR)
#define I3C_MDYNADDR_REG(base)                   ((base)->MDYNADDR)
#define I3C_SID_REG(base)                        ((base)->SID)

/*!
 * @}
 */ /* end of group I3C_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- I3C Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I3C_Register_Masks I3C Register Masks
 * @{
 */

/*! @name MCONFIG - Master Configuration Register */
/*! @{ */
#define I3C_MCONFIG_MSTENA_MASK                  (0x3U)
#define I3C_MCONFIG_MSTENA_SHIFT                 (0U)
/*! MSTENA - Master enable
 *  0b00..MASTER_OFF: Master is off (is not enabled). If MASTER_OFF is enabled, then the I3C module can only use slave mode.
 *  0b01..MASTER_ON: Master is on (is enabled). When used from start-up, this I3C module is master by default (the
 *        main master). The module will control the bus unless the master is handed off. If the master is handed
 *        off, then MSTENA must move to 2 after that happens. The handoff means emitting GETACCMST and if accepted,
 *        the module will emit a STOP and set the MSTENA bit to 2 (or 0).
 *  0b10..MASTER_CAPABLE: The I3C module is master-capable; however the module is operating as a slave now. When
 *        used from the start, the I3C module will start as a slave, but will be prepared to switch to master mode.
 *        To switch to master mode, the slave emits an Master Request (MR), or gets a GETACCMST CCC command and
 *        accepts it (to switch on the STOP).
 *  0b11..RESERVED
 */
#define I3C_MCONFIG_MSTENA(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MCONFIG_MSTENA_SHIFT)) & I3C_MCONFIG_MSTENA_MASK)
#define I3C_MCONFIG_DISTO_MASK                   (0x8U)
#define I3C_MCONFIG_DISTO_SHIFT                  (3U)
#define I3C_MCONFIG_HKEEP_MASK                   (0x30U)
#define I3C_MCONFIG_HKEEP_SHIFT                  (4U)
/*! HKEEP - High-Keeper
 *  0b00..NONE: Use PUR (Pull-Up Resistor). Hold SCL High.
 *  0b01..WIRED_IN: Wired-in High Keeper controls; use pin_HK (High Keeper) controls.
 *  0b10..PASSIVE_SDA: Passive on SDA; can Hi-Z (high impedance) for Bus Free (IDLE) and hold.
 *  0b11..PASSIVE_ON_SDA_SCL: Passive on SDA and SCL; can Hi-Z (high impedance) both for Bus Free (IDLE), and can Hi-Z SDA for hold.
 */
#define I3C_MCONFIG_HKEEP(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_MCONFIG_HKEEP_SHIFT)) & I3C_MCONFIG_HKEEP_MASK)
#define I3C_MCONFIG_ODSTOP_MASK                  (0x40U)
#define I3C_MCONFIG_ODSTOP_SHIFT                 (6U)
#define I3C_MCONFIG_PPBAUD_MASK                  (0xF00U)
#define I3C_MCONFIG_PPBAUD_SHIFT                 (8U)
/*! PPBAUD - Push-pull baud rate
 */
#define I3C_MCONFIG_PPBAUD(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MCONFIG_PPBAUD_SHIFT)) & I3C_MCONFIG_PPBAUD_MASK)
#define I3C_MCONFIG_PPLOW_MASK                   (0xF000U)
#define I3C_MCONFIG_PPLOW_SHIFT                  (12U)
/*! PPLOW - Push-Pull low
 */
#define I3C_MCONFIG_PPLOW(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_MCONFIG_PPLOW_SHIFT)) & I3C_MCONFIG_PPLOW_MASK)
#define I3C_MCONFIG_ODBAUD_MASK                  (0xFF0000U)
#define I3C_MCONFIG_ODBAUD_SHIFT                 (16U)
/*! ODBAUD - Open drain baud rate
 */
#define I3C_MCONFIG_ODBAUD(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MCONFIG_ODBAUD_SHIFT)) & I3C_MCONFIG_ODBAUD_MASK)
#define I3C_MCONFIG_ODHPP_MASK                   (0x1000000U)
#define I3C_MCONFIG_ODHPP_SHIFT                  (24U)
#define I3C_MCONFIG_SKEW_MASK                    (0xE000000U)
#define I3C_MCONFIG_SKEW_SHIFT                   (25U)
/*! SKEW - Skew
 */
#define I3C_MCONFIG_SKEW(x)                      (((uint32_t)(((uint32_t)(x)) << I3C_MCONFIG_SKEW_SHIFT)) & I3C_MCONFIG_SKEW_MASK)
#define I3C_MCONFIG_I2CBAUD_MASK                 (0xF0000000U)
#define I3C_MCONFIG_I2CBAUD_SHIFT                (28U)
/*! I2CBAUD - I2C baud rate
 */
#define I3C_MCONFIG_I2CBAUD(x)                   (((uint32_t)(((uint32_t)(x)) << I3C_MCONFIG_I2CBAUD_SHIFT)) & I3C_MCONFIG_I2CBAUD_MASK)
/*! @} */

/*! @name SCONFIG - Slave Configuration Register */
/*! @{ */
#define I3C_SCONFIG_SLVENA_MASK                  (0x1U)
#define I3C_SCONFIG_SLVENA_SHIFT                 (0U)
#define I3C_SCONFIG_NACK_MASK                    (0x2U)
#define I3C_SCONFIG_NACK_SHIFT                   (1U)
#define I3C_SCONFIG_MATCHSS_MASK                 (0x4U)
#define I3C_SCONFIG_MATCHSS_SHIFT                (2U)
#define I3C_SCONFIG_S0IGNORE_MASK                (0x8U)
#define I3C_SCONFIG_S0IGNORE_SHIFT               (3U)
#define I3C_SCONFIG_DDROK_MASK                   (0x10U)
#define I3C_SCONFIG_DDROK_SHIFT                  (4U)
#define I3C_SCONFIG_IDRAND_MASK                  (0x100U)
#define I3C_SCONFIG_IDRAND_SHIFT                 (8U)
#define I3C_SCONFIG_OFFLINE_MASK                 (0x200U)
#define I3C_SCONFIG_OFFLINE_SHIFT                (9U)
#define I3C_SCONFIG_BAMATCH_MASK                 (0xFF0000U)
#define I3C_SCONFIG_BAMATCH_SHIFT                (16U)
/*! BAMATCH - Bus available match
 */
#define I3C_SCONFIG_BAMATCH(x)                   (((uint32_t)(((uint32_t)(x)) << I3C_SCONFIG_BAMATCH_SHIFT)) & I3C_SCONFIG_BAMATCH_MASK)
#define I3C_SCONFIG_SADDR_MASK                   (0xFE000000U)
#define I3C_SCONFIG_SADDR_SHIFT                  (25U)
/*! SADDR - Static address
 */
#define I3C_SCONFIG_SADDR(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_SCONFIG_SADDR_SHIFT)) & I3C_SCONFIG_SADDR_MASK)
/*! @} */

/*! @name SSTATUS - Slave Status Register */
/*! @{ */
#define I3C_SSTATUS_STNOTSTOP_MASK               (0x1U)
#define I3C_SSTATUS_STNOTSTOP_SHIFT              (0U)
#define I3C_SSTATUS_STMSG_MASK                   (0x2U)
#define I3C_SSTATUS_STMSG_SHIFT                  (1U)
#define I3C_SSTATUS_STCCCH_MASK                  (0x4U)
#define I3C_SSTATUS_STCCCH_SHIFT                 (2U)
#define I3C_SSTATUS_STREQRD_MASK                 (0x8U)
#define I3C_SSTATUS_STREQRD_SHIFT                (3U)
#define I3C_SSTATUS_STREQWR_MASK                 (0x10U)
#define I3C_SSTATUS_STREQWR_SHIFT                (4U)
#define I3C_SSTATUS_STDAA_MASK                   (0x20U)
#define I3C_SSTATUS_STDAA_SHIFT                  (5U)
#define I3C_SSTATUS_STHDR_MASK                   (0x40U)
#define I3C_SSTATUS_STHDR_SHIFT                  (6U)
#define I3C_SSTATUS_START_MASK                   (0x100U)
#define I3C_SSTATUS_START_SHIFT                  (8U)
#define I3C_SSTATUS_MATCHED_MASK                 (0x200U)
#define I3C_SSTATUS_MATCHED_SHIFT                (9U)
#define I3C_SSTATUS_STOP_MASK                    (0x400U)
#define I3C_SSTATUS_STOP_SHIFT                   (10U)
#define I3C_SSTATUS_RX_PEND_MASK                 (0x800U)
#define I3C_SSTATUS_RX_PEND_SHIFT                (11U)
#define I3C_SSTATUS_TXNOTFULL_MASK               (0x1000U)
#define I3C_SSTATUS_TXNOTFULL_SHIFT              (12U)
#define I3C_SSTATUS_DACHG_MASK                   (0x2000U)
#define I3C_SSTATUS_DACHG_SHIFT                  (13U)
#define I3C_SSTATUS_CCC_MASK                     (0x4000U)
#define I3C_SSTATUS_CCC_SHIFT                    (14U)
#define I3C_SSTATUS_ERRWARN_MASK                 (0x8000U)
#define I3C_SSTATUS_ERRWARN_SHIFT                (15U)
#define I3C_SSTATUS_HDRMATCH_MASK                (0x10000U)
#define I3C_SSTATUS_HDRMATCH_SHIFT               (16U)
#define I3C_SSTATUS_CHANDLED_MASK                (0x20000U)
#define I3C_SSTATUS_CHANDLED_SHIFT               (17U)
#define I3C_SSTATUS_EVENT_MASK                   (0x40000U)
#define I3C_SSTATUS_EVENT_SHIFT                  (18U)
#define I3C_SSTATUS_EVDET_MASK                   (0x300000U)
#define I3C_SSTATUS_EVDET_SHIFT                  (20U)
/*! EVDET - Event details
 *  0b00..NONE: no event or no pending event
 *  0b01..NO_REQUEST: Request not sent yet. Either there was no START yet, or is waiting for Bus-Available or Bus-Idle (HJ).
 *  0b10..NACKED: Not acknowledged(Request sent and NACKed); the module will try again.
 *  0b11..ACKED: Acknowledged (Request sent and ACKed), so Done (unless the time control data is still being sent).
 */
#define I3C_SSTATUS_EVDET(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_SSTATUS_EVDET_SHIFT)) & I3C_SSTATUS_EVDET_MASK)
#define I3C_SSTATUS_IBIDIS_MASK                  (0x1000000U)
#define I3C_SSTATUS_IBIDIS_SHIFT                 (24U)
#define I3C_SSTATUS_MRDIS_MASK                   (0x2000000U)
#define I3C_SSTATUS_MRDIS_SHIFT                  (25U)
#define I3C_SSTATUS_HJDIS_MASK                   (0x8000000U)
#define I3C_SSTATUS_HJDIS_SHIFT                  (27U)
#define I3C_SSTATUS_ACTSTATE_MASK                (0x30000000U)
#define I3C_SSTATUS_ACTSTATE_SHIFT               (28U)
/*! ACTSTATE - Activity state from Common Command Codes (CCC)
 *  0b00..NO_LATENCY: normal bus operations
 *  0b01..LATENCY_1MS: 1 ms of latency
 *  0b10..LATENCY_100MS: 100 ms of latency
 *  0b11..LATENCY_10S: 10 seconds of latency
 */
#define I3C_SSTATUS_ACTSTATE(x)                  (((uint32_t)(((uint32_t)(x)) << I3C_SSTATUS_ACTSTATE_SHIFT)) & I3C_SSTATUS_ACTSTATE_MASK)
#define I3C_SSTATUS_TIMECTRL_MASK                (0xC0000000U)
#define I3C_SSTATUS_TIMECTRL_SHIFT               (30U)
/*! TIMECTRL - Time control
 *  0b00..NO_TIME_CONTROL: No time control is enabled
 *  0b01..Reserved
 *  0b10..ASYNC_MODE: Asynchronous standard mode (0) is enabled
 *  0b11..RESERVED
 */
#define I3C_SSTATUS_TIMECTRL(x)                  (((uint32_t)(((uint32_t)(x)) << I3C_SSTATUS_TIMECTRL_SHIFT)) & I3C_SSTATUS_TIMECTRL_MASK)
/*! @} */

/*! @name SCTRL - Slave Control Register */
/*! @{ */
#define I3C_SCTRL_EVENT_MASK                     (0x3U)
#define I3C_SCTRL_EVENT_SHIFT                    (0U)
/*! EVENT - EVENT
 *  0b00..NORMAL_MODE: If EVENT is set to 0 after was a non-0 value, event processing will cancel if the event
 *        processing has not yet started; if event processing has already been started, then event processing will not
 *        be be cancelled.
 *  0b01..IBI: Start an In-Band Interrupt. This will try to push an IBI interrupt onto the I3C bus. If data is
 *        associated with the IBI, then the data will be read from the SCTRL.IBIDATA field. If time control is
 *        enabled, then this data will also include any time control-related bytes; additionally, the IBIDATA byte will
 *        have bit 7 set to 1 automatically (as is required for time control). The IBI interrupt will occur after the
 *        1st (mandatory) IBIDATA, if any.
 *  0b10..MASTER_REQUEST: Start a Master-Request.
 *  0b11..HOT_JOIN_REQUEST: Start a Hot-Join request. A Hot-Join Request should only be used when the device is
 *        powered on after the I3C bus is already powered up, or when the device is connected using hot insertion
 *        methods (the device is powered up when it is physically inserted onto the powered-up I3C bus). The hot join
 *        will wait for Bus Idle, and SCTRL.EVENT=HOT_JOIN_REQUEST must be set before the slave enable
 *        (SCONFIG.SLVENA).
 */
#define I3C_SCTRL_EVENT(x)                       (((uint32_t)(((uint32_t)(x)) << I3C_SCTRL_EVENT_SHIFT)) & I3C_SCTRL_EVENT_MASK)
#define I3C_SCTRL_IBIDATA_MASK                   (0xFF00U)
#define I3C_SCTRL_IBIDATA_SHIFT                  (8U)
/*! IBIDATA - In-Band Interrupt data
 */
#define I3C_SCTRL_IBIDATA(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_SCTRL_IBIDATA_SHIFT)) & I3C_SCTRL_IBIDATA_MASK)
#define I3C_SCTRL_PENDINT_MASK                   (0xF0000U)
#define I3C_SCTRL_PENDINT_SHIFT                  (16U)
/*! PENDINT - Pending interrupt
 */
#define I3C_SCTRL_PENDINT(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_SCTRL_PENDINT_SHIFT)) & I3C_SCTRL_PENDINT_MASK)
#define I3C_SCTRL_ACTSTATE_MASK                  (0x300000U)
#define I3C_SCTRL_ACTSTATE_SHIFT                 (20U)
/*! ACTSTATE - Activity state (of slave)
 */
#define I3C_SCTRL_ACTSTATE(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_SCTRL_ACTSTATE_SHIFT)) & I3C_SCTRL_ACTSTATE_MASK)
#define I3C_SCTRL_VENDINFO_MASK                  (0xFF000000U)
#define I3C_SCTRL_VENDINFO_SHIFT                 (24U)
/*! VENDINFO - Vendor information
 */
#define I3C_SCTRL_VENDINFO(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_SCTRL_VENDINFO_SHIFT)) & I3C_SCTRL_VENDINFO_MASK)
/*! @} */

/*! @name SINTSET - Slave Interrupt Set Register */
/*! @{ */
#define I3C_SINTSET_START_MASK                   (0x100U)
#define I3C_SINTSET_START_SHIFT                  (8U)
#define I3C_SINTSET_MATCHED_MASK                 (0x200U)
#define I3C_SINTSET_MATCHED_SHIFT                (9U)
#define I3C_SINTSET_STOP_MASK                    (0x400U)
#define I3C_SINTSET_STOP_SHIFT                   (10U)
#define I3C_SINTSET_RXPEND_MASK                  (0x800U)
#define I3C_SINTSET_RXPEND_SHIFT                 (11U)
#define I3C_SINTSET_TXSEND_MASK                  (0x1000U)
#define I3C_SINTSET_TXSEND_SHIFT                 (12U)
#define I3C_SINTSET_DACHG_MASK                   (0x2000U)
#define I3C_SINTSET_DACHG_SHIFT                  (13U)
#define I3C_SINTSET_CCC_MASK                     (0x4000U)
#define I3C_SINTSET_CCC_SHIFT                    (14U)
#define I3C_SINTSET_ERRWARN_MASK                 (0x8000U)
#define I3C_SINTSET_ERRWARN_SHIFT                (15U)
#define I3C_SINTSET_DDRMATCHED_MASK              (0x10000U)
#define I3C_SINTSET_DDRMATCHED_SHIFT             (16U)
#define I3C_SINTSET_CHANDLED_MASK                (0x20000U)
#define I3C_SINTSET_CHANDLED_SHIFT               (17U)
#define I3C_SINTSET_EVENT_MASK                   (0x40000U)
#define I3C_SINTSET_EVENT_SHIFT                  (18U)
/*! @} */

/*! @name SINTCLR - Slave Interrupt Clear Register */
/*! @{ */
#define I3C_SINTCLR_START_MASK                   (0x100U)
#define I3C_SINTCLR_START_SHIFT                  (8U)
#define I3C_SINTCLR_MATCHED_MASK                 (0x200U)
#define I3C_SINTCLR_MATCHED_SHIFT                (9U)
#define I3C_SINTCLR_STOP_MASK                    (0x400U)
#define I3C_SINTCLR_STOP_SHIFT                   (10U)
#define I3C_SINTCLR_RXPEND_MASK                  (0x800U)
#define I3C_SINTCLR_RXPEND_SHIFT                 (11U)
#define I3C_SINTCLR_TXSEND_MASK                  (0x1000U)
#define I3C_SINTCLR_TXSEND_SHIFT                 (12U)
#define I3C_SINTCLR_DACHG_MASK                   (0x2000U)
#define I3C_SINTCLR_DACHG_SHIFT                  (13U)
#define I3C_SINTCLR_CCC_MASK                     (0x4000U)
#define I3C_SINTCLR_CCC_SHIFT                    (14U)
#define I3C_SINTCLR_ERRWARN_MASK                 (0x8000U)
#define I3C_SINTCLR_ERRWARN_SHIFT                (15U)
#define I3C_SINTCLR_DDRMATCHED_MASK              (0x10000U)
#define I3C_SINTCLR_DDRMATCHED_SHIFT             (16U)
#define I3C_SINTCLR_CHANDLED_MASK                (0x20000U)
#define I3C_SINTCLR_CHANDLED_SHIFT               (17U)
#define I3C_SINTCLR_EVENT_MASK                   (0x40000U)
#define I3C_SINTCLR_EVENT_SHIFT                  (18U)
/*! @} */

/*! @name SINTMASKED - Slave Interrupt Mask Register */
/*! @{ */
#define I3C_SINTMASKED_START_MASK                (0x100U)
#define I3C_SINTMASKED_START_SHIFT               (8U)
#define I3C_SINTMASKED_MATCHED_MASK              (0x200U)
#define I3C_SINTMASKED_MATCHED_SHIFT             (9U)
#define I3C_SINTMASKED_STOP_MASK                 (0x400U)
#define I3C_SINTMASKED_STOP_SHIFT                (10U)
#define I3C_SINTMASKED_RXPEND_MASK               (0x800U)
#define I3C_SINTMASKED_RXPEND_SHIFT              (11U)
#define I3C_SINTMASKED_TXSEND_MASK               (0x1000U)
#define I3C_SINTMASKED_TXSEND_SHIFT              (12U)
#define I3C_SINTMASKED_DACHG_MASK                (0x2000U)
#define I3C_SINTMASKED_DACHG_SHIFT               (13U)
#define I3C_SINTMASKED_CCC_MASK                  (0x4000U)
#define I3C_SINTMASKED_CCC_SHIFT                 (14U)
#define I3C_SINTMASKED_ERRWARN_MASK              (0x8000U)
#define I3C_SINTMASKED_ERRWARN_SHIFT             (15U)
#define I3C_SINTMASKED_DDRMATCHED_MASK           (0x10000U)
#define I3C_SINTMASKED_DDRMATCHED_SHIFT          (16U)
#define I3C_SINTMASKED_CHANDLED_MASK             (0x20000U)
#define I3C_SINTMASKED_CHANDLED_SHIFT            (17U)
#define I3C_SINTMASKED_EVENT_MASK                (0x40000U)
#define I3C_SINTMASKED_EVENT_SHIFT               (18U)
/*! @} */

/*! @name SERRWARN - Slave Errors and Warnings Register */
/*! @{ */
#define I3C_SERRWARN_ORUN_MASK                   (0x1U)
#define I3C_SERRWARN_ORUN_SHIFT                  (0U)
#define I3C_SERRWARN_URUN_MASK                   (0x2U)
#define I3C_SERRWARN_URUN_SHIFT                  (1U)
#define I3C_SERRWARN_URUNNACK_MASK               (0x4U)
#define I3C_SERRWARN_URUNNACK_SHIFT              (2U)
#define I3C_SERRWARN_TERM_MASK                   (0x8U)
#define I3C_SERRWARN_TERM_SHIFT                  (3U)
#define I3C_SERRWARN_INVSTART_MASK               (0x10U)
#define I3C_SERRWARN_INVSTART_SHIFT              (4U)
#define I3C_SERRWARN_SPAR_MASK                   (0x100U)
#define I3C_SERRWARN_SPAR_SHIFT                  (8U)
#define I3C_SERRWARN_HPAR_MASK                   (0x200U)
#define I3C_SERRWARN_HPAR_SHIFT                  (9U)
#define I3C_SERRWARN_HCRC_MASK                   (0x400U)
#define I3C_SERRWARN_HCRC_SHIFT                  (10U)
#define I3C_SERRWARN_S0S1_MASK                   (0x800U)
#define I3C_SERRWARN_S0S1_SHIFT                  (11U)
#define I3C_SERRWARN_OREAD_MASK                  (0x10000U)
#define I3C_SERRWARN_OREAD_SHIFT                 (16U)
#define I3C_SERRWARN_OWRITE_MASK                 (0x20000U)
#define I3C_SERRWARN_OWRITE_SHIFT                (17U)
/*! @} */

/*! @name SDMACTRL - Slave DMA Control Register */
/*! @{ */
#define I3C_SDMACTRL_DMAFB_MASK                  (0x3U)
#define I3C_SDMACTRL_DMAFB_SHIFT                 (0U)
/*! DMAFB - DMA Read (From-bus) trigger
 *  0b00..DMA not used
 *  0b01..DMA is enabled for 1 frame
 *  0b10..DMA enable
 */
#define I3C_SDMACTRL_DMAFB(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_SDMACTRL_DMAFB_SHIFT)) & I3C_SDMACTRL_DMAFB_MASK)
#define I3C_SDMACTRL_DMATB_MASK                  (0xCU)
#define I3C_SDMACTRL_DMATB_SHIFT                 (2U)
/*! DMATB - DMA Write (To-bus) trigger
 *  0b00..NOT_USED: DMA is not used
 *  0b01..ENABLE_ONE_FRAME: DMA is enabled for 1 Frame (ended by DMA or terminated). DMATB auto-clears on a STOP
 *        or START (see the Match START or STOP bit (SCONFIG.MATCHSS).
 *  0b10..ENABLE: DMA is enabled until turned off. Normally, ENABLE should only be used with Master Message mode.
 */
#define I3C_SDMACTRL_DMATB(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_SDMACTRL_DMATB_SHIFT)) & I3C_SDMACTRL_DMATB_MASK)
#define I3C_SDMACTRL_DMAWIDTH_MASK               (0x30U)
#define I3C_SDMACTRL_DMAWIDTH_SHIFT              (4U)
/*! DMAWIDTH - Width of DMA operations
 *  0b00..BYTE
 *  0b01..BYTE_AGAIN
 *  0b10..HALF_WORD: Half word (16 bits). This will make sure that 2 bytes are free/available in the FIFO.
 *  0b11..RESERVED
 */
#define I3C_SDMACTRL_DMAWIDTH(x)                 (((uint32_t)(((uint32_t)(x)) << I3C_SDMACTRL_DMAWIDTH_SHIFT)) & I3C_SDMACTRL_DMAWIDTH_MASK)
/*! @} */

/*! @name SDATACTRL - Slave Data Control Register */
/*! @{ */
#define I3C_SDATACTRL_FLUSHTB_MASK               (0x1U)
#define I3C_SDATACTRL_FLUSHTB_SHIFT              (0U)
#define I3C_SDATACTRL_FLUSHFB_MASK               (0x2U)
#define I3C_SDATACTRL_FLUSHFB_SHIFT              (1U)
#define I3C_SDATACTRL_UNLOCK_MASK                (0x8U)
#define I3C_SDATACTRL_UNLOCK_SHIFT               (3U)
#define I3C_SDATACTRL_TXTRIG_MASK                (0x30U)
#define I3C_SDATACTRL_TXTRIG_SHIFT               (4U)
/*! TXTRIG - Trigger level for TX FIFO emptiness
 *  0b00..Trigger on empty
 *  0b01..Trigger on ¼ full or less
 *  0b10..Trigger on .5 full or less
 *  0b11..Trigger on 1 less than full or less (Default)
 */
#define I3C_SDATACTRL_TXTRIG(x)                  (((uint32_t)(((uint32_t)(x)) << I3C_SDATACTRL_TXTRIG_SHIFT)) & I3C_SDATACTRL_TXTRIG_MASK)
#define I3C_SDATACTRL_RXTRIG_MASK                (0xC0U)
#define I3C_SDATACTRL_RXTRIG_SHIFT               (6U)
/*! RXTRIG - Trigger level for RX FIFO fullness
 *  0b00..Trigger on not empty
 *  0b01..Trigger on ¼ or more full
 *  0b10..Trigger on .5 or more full
 *  0b11..Trigger on 3/4 or more full
 */
#define I3C_SDATACTRL_RXTRIG(x)                  (((uint32_t)(((uint32_t)(x)) << I3C_SDATACTRL_RXTRIG_SHIFT)) & I3C_SDATACTRL_RXTRIG_MASK)
#define I3C_SDATACTRL_TXCOUNT_MASK               (0x1F0000U)
#define I3C_SDATACTRL_TXCOUNT_SHIFT              (16U)
/*! TXCOUNT - Count of bytes in TX
 */
#define I3C_SDATACTRL_TXCOUNT(x)                 (((uint32_t)(((uint32_t)(x)) << I3C_SDATACTRL_TXCOUNT_SHIFT)) & I3C_SDATACTRL_TXCOUNT_MASK)
#define I3C_SDATACTRL_RXCOUNT_MASK               (0x1F000000U)
#define I3C_SDATACTRL_RXCOUNT_SHIFT              (24U)
/*! RXCOUNT - Count of bytes in RX
 */
#define I3C_SDATACTRL_RXCOUNT(x)                 (((uint32_t)(((uint32_t)(x)) << I3C_SDATACTRL_RXCOUNT_SHIFT)) & I3C_SDATACTRL_RXCOUNT_MASK)
#define I3C_SDATACTRL_TXFULL_MASK                (0x40000000U)
#define I3C_SDATACTRL_TXFULL_SHIFT               (30U)
#define I3C_SDATACTRL_RXEMPTY_MASK               (0x80000000U)
#define I3C_SDATACTRL_RXEMPTY_SHIFT              (31U)
/*! @} */

/*! @name SWDATAB - Slave Write Data Byte Register */
/*! @{ */
#define I3C_SWDATAB_DATA_MASK                    (0xFFU)
#define I3C_SWDATAB_DATA_SHIFT                   (0U)
/*! DATA - The data byte to send to the master
 */
#define I3C_SWDATAB_DATA(x)                      (((uint32_t)(((uint32_t)(x)) << I3C_SWDATAB_DATA_SHIFT)) & I3C_SWDATAB_DATA_MASK)
#define I3C_SWDATAB_END_MASK                     (0x100U)
#define I3C_SWDATAB_END_SHIFT                    (8U)
#define I3C_SWDATAB_END_ALSO_MASK                (0x10000U)
#define I3C_SWDATAB_END_ALSO_SHIFT               (16U)
/*! @} */

/*! @name SWDATABE - Slave Write Data Byte End */
/*! @{ */
#define I3C_SWDATABE_DATA_MASK                   (0xFFU)
#define I3C_SWDATABE_DATA_SHIFT                  (0U)
/*! DATA - The data byte to send to the master
 */
#define I3C_SWDATABE_DATA(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_SWDATABE_DATA_SHIFT)) & I3C_SWDATABE_DATA_MASK)
/*! @} */

/*! @name SWDATAH - Slave Write Data Half-word Register */
/*! @{ */
#define I3C_SWDATAH_DATA0_MASK                   (0xFFU)
#define I3C_SWDATAH_DATA0_SHIFT                  (0U)
/*! DATA0 - The 1st byte to send to the master
 */
#define I3C_SWDATAH_DATA0(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_SWDATAH_DATA0_SHIFT)) & I3C_SWDATAH_DATA0_MASK)
#define I3C_SWDATAH_DATA1_MASK                   (0xFF00U)
#define I3C_SWDATAH_DATA1_SHIFT                  (8U)
/*! DATA1 - The 2nd byte to send to the master
 */
#define I3C_SWDATAH_DATA1(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_SWDATAH_DATA1_SHIFT)) & I3C_SWDATAH_DATA1_MASK)
#define I3C_SWDATAH_END_MASK                     (0x10000U)
#define I3C_SWDATAH_END_SHIFT                    (16U)
/*! @} */

/*! @name SWDATAHE - Slave Write Data Half-word End Register */
/*! @{ */
#define I3C_SWDATAHE_DATA0_MASK                  (0xFFU)
#define I3C_SWDATAHE_DATA0_SHIFT                 (0U)
/*! DATA0 - The 1st byte to send to the master
 */
#define I3C_SWDATAHE_DATA0(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_SWDATAHE_DATA0_SHIFT)) & I3C_SWDATAHE_DATA0_MASK)
#define I3C_SWDATAHE_DATA1_MASK                  (0xFF00U)
#define I3C_SWDATAHE_DATA1_SHIFT                 (8U)
/*! DATA1 - The 2nd byte to send to the master
 */
#define I3C_SWDATAHE_DATA1(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_SWDATAHE_DATA1_SHIFT)) & I3C_SWDATAHE_DATA1_MASK)
/*! @} */

/*! @name SRDATAB - Slave Read Data Byte Register */
/*! @{ */
#define I3C_SRDATAB_DATA0_MASK                   (0xFFU)
#define I3C_SRDATAB_DATA0_SHIFT                  (0U)
/*! DATA0 - Byte read from the master
 */
#define I3C_SRDATAB_DATA0(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_SRDATAB_DATA0_SHIFT)) & I3C_SRDATAB_DATA0_MASK)
/*! @} */

/*! @name SRDATAH - Slave Read Data Half-word Register */
/*! @{ */
#define I3C_SRDATAH_LSB_MASK                     (0xFFU)
#define I3C_SRDATAH_LSB_SHIFT                    (0U)
/*! LSB - The 1st byte read from the slave
 */
#define I3C_SRDATAH_LSB(x)                       (((uint32_t)(((uint32_t)(x)) << I3C_SRDATAH_LSB_SHIFT)) & I3C_SRDATAH_LSB_MASK)
#define I3C_SRDATAH_MSB_MASK                     (0xFF00U)
#define I3C_SRDATAH_MSB_SHIFT                    (8U)
/*! MSB - The 2nd byte read from the slave
 */
#define I3C_SRDATAH_MSB(x)                       (((uint32_t)(((uint32_t)(x)) << I3C_SRDATAH_MSB_SHIFT)) & I3C_SRDATAH_MSB_MASK)
/*! @} */

/*! @name SCAPABILITIES - Slave Capabilities Register */
/*! @{ */
#define I3C_SCAPABILITIES_IDENA_MASK             (0x3U)
#define I3C_SCAPABILITIES_IDENA_SHIFT            (0U)
/*! IDENA - ID 48b handler
 *  0b00..APPLICATION: Application handles ID 48b
 *  0b01..HW: Hardware handles ID 48b
 *  0b10..HW_BUT: in hardware but the I3C module instance handles ID 48b.
 *  0b11..PARTNO: a part number register (PARTNO) handles ID 48b
 */
#define I3C_SCAPABILITIES_IDENA(x)               (((uint32_t)(((uint32_t)(x)) << I3C_SCAPABILITIES_IDENA_SHIFT)) & I3C_SCAPABILITIES_IDENA_MASK)
#define I3C_SCAPABILITIES_IDREG_MASK             (0x3CU)
#define I3C_SCAPABILITIES_IDREG_SHIFT            (2U)
/*! IDREG - ID register
 */
#define I3C_SCAPABILITIES_IDREG(x)               (((uint32_t)(((uint32_t)(x)) << I3C_SCAPABILITIES_IDREG_SHIFT)) & I3C_SCAPABILITIES_IDREG_MASK)
#define I3C_SCAPABILITIES_HDRSUPP_MASK           (0x1C0U)
#define I3C_SCAPABILITIES_HDRSUPP_SHIFT          (6U)
/*! HDRSUPP - HDR support
 */
#define I3C_SCAPABILITIES_HDRSUPP(x)             (((uint32_t)(((uint32_t)(x)) << I3C_SCAPABILITIES_HDRSUPP_SHIFT)) & I3C_SCAPABILITIES_HDRSUPP_MASK)
#define I3C_SCAPABILITIES_MASTER_MASK            (0x200U)
#define I3C_SCAPABILITIES_MASTER_SHIFT           (9U)
#define I3C_SCAPABILITIES_SADDR_MASK             (0xC00U)
#define I3C_SCAPABILITIES_SADDR_SHIFT            (10U)
/*! SADDR - Static address
 *  0b00..NO_STATIC: No static address
 *  0b01..STATIC: Static address is fixed in hardware
 *  0b10..HW_CONTROL: Hardware controls the static address dynamically (for example, from the pin strap)
 *  0b11..CONFIG: SCONFIG register supplies the static address
 */
#define I3C_SCAPABILITIES_SADDR(x)               (((uint32_t)(((uint32_t)(x)) << I3C_SCAPABILITIES_SADDR_SHIFT)) & I3C_SCAPABILITIES_SADDR_MASK)
#define I3C_SCAPABILITIES_CCCHANDLE_MASK         (0xF000U)
#define I3C_SCAPABILITIES_CCCHANDLE_SHIFT        (12U)
/*! CCCHANDLE - Common Command Codes (CCC) handling
 */
#define I3C_SCAPABILITIES_CCCHANDLE(x)           (((uint32_t)(((uint32_t)(x)) << I3C_SCAPABILITIES_CCCHANDLE_SHIFT)) & I3C_SCAPABILITIES_CCCHANDLE_MASK)
#define I3C_SCAPABILITIES_IBI_MR_HJ_MASK         (0x1F0000U)
#define I3C_SCAPABILITIES_IBI_MR_HJ_SHIFT        (16U)
/*! IBI_MR_HJ - In-Band Interrupts, Master Requests, Hot Join events
 */
#define I3C_SCAPABILITIES_IBI_MR_HJ(x)           (((uint32_t)(((uint32_t)(x)) << I3C_SCAPABILITIES_IBI_MR_HJ_SHIFT)) & I3C_SCAPABILITIES_IBI_MR_HJ_MASK)
#define I3C_SCAPABILITIES_TIMECTRL_MASK          (0x200000U)
#define I3C_SCAPABILITIES_TIMECTRL_SHIFT         (21U)
#define I3C_SCAPABILITIES_EXTFIFO_MASK           (0x3800000U)
#define I3C_SCAPABILITIES_EXTFIFO_SHIFT          (23U)
/*! EXTFIFO - External FIFO
 *  0b001..STD_EXT_FIFO: standard available/free external FIFO
 *  0b011..RESERVED
 */
#define I3C_SCAPABILITIES_EXTFIFO(x)             (((uint32_t)(((uint32_t)(x)) << I3C_SCAPABILITIES_EXTFIFO_SHIFT)) & I3C_SCAPABILITIES_EXTFIFO_MASK)
#define I3C_SCAPABILITIES_FIFOTX_MASK            (0xC000000U)
#define I3C_SCAPABILITIES_FIFOTX_SHIFT           (26U)
/*! FIFOTX - FIFO transmit
 *  0b00..FIFO_2BYTE: 2-byte TX FIFO, the default FIFO transmit value (FIFOTX)
 *  0b01..FIFO_4BYTE: 4-byte TX FIFO
 *  0b10..FIFO_8BYTE: 8-byte TX FIFO
 *  0b11..FIFO_16BYTE: 16-byte TX FIFO
 */
#define I3C_SCAPABILITIES_FIFOTX(x)              (((uint32_t)(((uint32_t)(x)) << I3C_SCAPABILITIES_FIFOTX_SHIFT)) & I3C_SCAPABILITIES_FIFOTX_MASK)
#define I3C_SCAPABILITIES_FIFORX_MASK            (0x30000000U)
#define I3C_SCAPABILITIES_FIFORX_SHIFT           (28U)
/*! FIFORX - FIFO receive
 *  0b00..FIFO_2BYTE: 2 (or 3)-byte RX FIFO, the default FIFO receive value (FIFORX)
 *  0b01..FIFO_4BYTE: 4-byte RX FIFO
 *  0b10..FIFO_8BYTE: 8-byte RX FIFO
 *  0b11..FIFO_16BYTE: 16-byte RX FIFO
 */
#define I3C_SCAPABILITIES_FIFORX(x)              (((uint32_t)(((uint32_t)(x)) << I3C_SCAPABILITIES_FIFORX_SHIFT)) & I3C_SCAPABILITIES_FIFORX_MASK)
#define I3C_SCAPABILITIES_INT_MASK               (0x40000000U)
#define I3C_SCAPABILITIES_INT_SHIFT              (30U)
#define I3C_SCAPABILITIES_DMA_MASK               (0x80000000U)
#define I3C_SCAPABILITIES_DMA_SHIFT              (31U)
/*! @} */

/*! @name SDYNADDR - Slave Dynamic Address Register */
/*! @{ */
#define I3C_SDYNADDR_DAVALID_MASK                (0x1U)
#define I3C_SDYNADDR_DAVALID_SHIFT               (0U)
#define I3C_SDYNADDR_DADDR_MASK                  (0xFEU)
#define I3C_SDYNADDR_DADDR_SHIFT                 (1U)
/*! DADDR - Dynamic address
 */
#define I3C_SDYNADDR_DADDR(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_SDYNADDR_DADDR_SHIFT)) & I3C_SDYNADDR_DADDR_MASK)
#define I3C_SDYNADDR_MAPIDX_MASK                 (0xF00U)
#define I3C_SDYNADDR_MAPIDX_SHIFT                (8U)
/*! MAPIDX - Mapped Dynamic Address
 */
#define I3C_SDYNADDR_MAPIDX(x)                   (((uint32_t)(((uint32_t)(x)) << I3C_SDYNADDR_MAPIDX_SHIFT)) & I3C_SDYNADDR_MAPIDX_MASK)
#define I3C_SDYNADDR_MAPSA_MASK                  (0x1000U)
#define I3C_SDYNADDR_MAPSA_SHIFT                 (12U)
#define I3C_SDYNADDR_KEY_MASK                    (0xFFFF0000U)
#define I3C_SDYNADDR_KEY_SHIFT                   (16U)
/*! KEY - Key
 */
#define I3C_SDYNADDR_KEY(x)                      (((uint32_t)(((uint32_t)(x)) << I3C_SDYNADDR_KEY_SHIFT)) & I3C_SDYNADDR_KEY_MASK)
/*! @} */

/*! @name SMAXLIMITS - Slave Maximum Limits Register */
/*! @{ */
#define I3C_SMAXLIMITS_MAXRD_MASK                (0xFFFU)
#define I3C_SMAXLIMITS_MAXRD_SHIFT               (0U)
/*! MAXRD - Maximum read length
 */
#define I3C_SMAXLIMITS_MAXRD(x)                  (((uint32_t)(((uint32_t)(x)) << I3C_SMAXLIMITS_MAXRD_SHIFT)) & I3C_SMAXLIMITS_MAXRD_MASK)
#define I3C_SMAXLIMITS_MAXWR_MASK                (0xFFF0000U)
#define I3C_SMAXLIMITS_MAXWR_SHIFT               (16U)
/*! MAXWR - Maximum write length
 */
#define I3C_SMAXLIMITS_MAXWR(x)                  (((uint32_t)(((uint32_t)(x)) << I3C_SMAXLIMITS_MAXWR_SHIFT)) & I3C_SMAXLIMITS_MAXWR_MASK)
/*! @} */

/*! @name SIDPARTNO - Slave ID Part Number Register */
/*! @{ */
#define I3C_SIDPARTNO_PARTNO_MASK                (0xFFFFFFFFU)
#define I3C_SIDPARTNO_PARTNO_SHIFT               (0U)
/*! PARTNO - Part number
 */
#define I3C_SIDPARTNO_PARTNO(x)                  (((uint32_t)(((uint32_t)(x)) << I3C_SIDPARTNO_PARTNO_SHIFT)) & I3C_SIDPARTNO_PARTNO_MASK)
/*! @} */

/*! @name SIDEXT - Slave ID Extension Register */
/*! @{ */
#define I3C_SIDEXT_DCR_MASK                      (0xFF00U)
#define I3C_SIDEXT_DCR_SHIFT                     (8U)
/*! DCR - Device Characteristic Register
 */
#define I3C_SIDEXT_DCR(x)                        (((uint32_t)(((uint32_t)(x)) << I3C_SIDEXT_DCR_SHIFT)) & I3C_SIDEXT_DCR_MASK)
#define I3C_SIDEXT_BCR_MASK                      (0xFF0000U)
#define I3C_SIDEXT_BCR_SHIFT                     (16U)
/*! BCR - Bus Characteristics Register
 */
#define I3C_SIDEXT_BCR(x)                        (((uint32_t)(((uint32_t)(x)) << I3C_SIDEXT_BCR_SHIFT)) & I3C_SIDEXT_BCR_MASK)
/*! @} */

/*! @name SVENDORID - Slave Vendor ID Register */
/*! @{ */
#define I3C_SVENDORID_VID_MASK                   (0x7FFFU)
#define I3C_SVENDORID_VID_SHIFT                  (0U)
/*! VID - Vendor ID
 */
#define I3C_SVENDORID_VID(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_SVENDORID_VID_SHIFT)) & I3C_SVENDORID_VID_MASK)
/*! @} */

/*! @name STCCLOCK - Slave Time Control Clock Register */
/*! @{ */
#define I3C_STCCLOCK_ACCURACY_MASK               (0xFFU)
#define I3C_STCCLOCK_ACCURACY_SHIFT              (0U)
/*! ACCURACY - Clock accuracy
 */
#define I3C_STCCLOCK_ACCURACY(x)                 (((uint32_t)(((uint32_t)(x)) << I3C_STCCLOCK_ACCURACY_SHIFT)) & I3C_STCCLOCK_ACCURACY_MASK)
#define I3C_STCCLOCK_FREQ_MASK                   (0xFF00U)
#define I3C_STCCLOCK_FREQ_SHIFT                  (8U)
/*! FREQ - Clock frequency
 */
#define I3C_STCCLOCK_FREQ(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_STCCLOCK_FREQ_SHIFT)) & I3C_STCCLOCK_FREQ_MASK)
/*! @} */

/*! @name SMSGMAPADDR - Slave Message-Mapped Address Register */
/*! @{ */
#define I3C_SMSGMAPADDR_MAPLAST_MASK             (0xFU)
#define I3C_SMSGMAPADDR_MAPLAST_SHIFT            (0U)
/*! MAPLAST - Matched address index
 */
#define I3C_SMSGMAPADDR_MAPLAST(x)               (((uint32_t)(((uint32_t)(x)) << I3C_SMSGMAPADDR_MAPLAST_SHIFT)) & I3C_SMSGMAPADDR_MAPLAST_MASK)
#define I3C_SMSGMAPADDR_MAPLASTM1_MASK           (0xF00U)
#define I3C_SMSGMAPADDR_MAPLASTM1_SHIFT          (8U)
/*! MAPLASTM1 - Previous match index 1
 */
#define I3C_SMSGMAPADDR_MAPLASTM1(x)             (((uint32_t)(((uint32_t)(x)) << I3C_SMSGMAPADDR_MAPLASTM1_SHIFT)) & I3C_SMSGMAPADDR_MAPLASTM1_MASK)
#define I3C_SMSGMAPADDR_MAPLASTM2_MASK           (0xF0000U)
#define I3C_SMSGMAPADDR_MAPLASTM2_SHIFT          (16U)
/*! MAPLASTM2 - Previous match index 2
 */
#define I3C_SMSGMAPADDR_MAPLASTM2(x)             (((uint32_t)(((uint32_t)(x)) << I3C_SMSGMAPADDR_MAPLASTM2_SHIFT)) & I3C_SMSGMAPADDR_MAPLASTM2_MASK)
/*! @} */

/*! @name MCTRL - Master Main Control Register */
/*! @{ */
#define I3C_MCTRL_REQUEST_MASK                   (0x7U)
#define I3C_MCTRL_REQUEST_SHIFT                  (0U)
/*! REQUEST - Request
 *  0b000..NONE: Returns to this when finished with any request. The MSTATUS register indicates the master's
 *         state. See also AutoIBI mode. NONE is only written as 0: when setting RDTERM to 1 (to stop a read in
 *         progress) or when setting IBI reponse field (IBIRESP) for MSG use
 *  0b001..EMITSTARTADDR: Emit START with address and direction from a stopped state or in the middle of a Single
 *         Data Rate (SDR) message. If from a stopped state (IDLE), then emit start may be prevented by an event
 *         (like IBI, MR, HJ), in which case the appropriate interrupt is signaled; note that Emit START can be
 *         resubmitted.
 *  0b010..EMITSTOP: Emit a STOP on bus. Must be in Single Data Rate (SDR) mode. If in Dynamic Address Assignment
 *         (DAA) mode, Emit stop will exit DAA mode.
 *  0b011..IBIACKNACK: Manual In-Band Interrupt (IBI) Acknowledge (ACK) or Not Acknowledge (NACK). When IBIRESP
 *         has indicated a hold on an In-Band Interrupt to allow a manual decision, this request completes it. Uses
 *         IBIRESP to provide the information.
 *  0b100..PROCESSDAA: If not in Dynamic Address Assignment (DAA) mode now, will issue START, 7E, ENTDAA, and then
 *         will emit 7E/R to process first Slave. Will stop just before the new Dynamic Address (DA) is to be
 *         emitted. The DA is written using MWDATAB bits 6:0 and then ProcessDAA is requested again to write the new
 *         address, and then starts the next; an MSTATUS indicating NACK means DA was not accepted (e.g. parity
 *         error). If Process DAA is NACKed on the 7E/R, the interrupt will indicate so and this will emit a STOP.
 *  0b101..RESERVED
 *  0b110..FORCEEXIT and IBHR: Emit an Exit Pattern from any state, but end Double Data Rate (DDR) (including
 *         MSGDDR), if in DDR mode now. Includes a STOP afterward. If TYPE != 0, then it will perform an IBHR (In-Band
 *         Hardware Reset). If TYPE=2, then it does a normal reset (DEFRST can prevent the reset). If TYPE=3, it
 *         does a forced reset (will always reset).
 *  0b111..AUTOIBI: Hold in a stopped state, but auto-emit START,7E when the slave is holding down SDA to get an
 *         In-Band Interrupt (IBI). Actual In-Band Interrupt handling is defined by IBIRESP.
 */
#define I3C_MCTRL_REQUEST(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_MCTRL_REQUEST_SHIFT)) & I3C_MCTRL_REQUEST_MASK)
#define I3C_MCTRL_TYPE_MASK                      (0x30U)
#define I3C_MCTRL_TYPE_SHIFT                     (4U)
/*! TYPE - Bus type with START
 *  0b00..I3C: Normally the SDR mode of I3C. For ForceExit, the Exit pattern.
 *  0b01..I2C: Normally the Standard I2C protocol.
 *  0b10..DDR: (Double Data Rate): Normally the HDR-DDR mode of I3C. Enter DDR mode (7E and then ENTHDR0), if the
 *        module is not already in DDR mode. The 1st byte written to the TX FIFO should be a command, and should
 *        already be in the FIFO. To end DDR mode, use ForceExit. For ForceExit, the normal IBHR (In-Band Hardware
 *        Reset).
 *  0b11..For ForcedExit, this is forced IBHR.
 */
#define I3C_MCTRL_TYPE(x)                        (((uint32_t)(((uint32_t)(x)) << I3C_MCTRL_TYPE_SHIFT)) & I3C_MCTRL_TYPE_MASK)
#define I3C_MCTRL_IBIRESP_MASK                   (0xC0U)
#define I3C_MCTRL_IBIRESP_SHIFT                  (6U)
/*! IBIRESP - In-Band Interrupt (IBI) response
 *  0b00..ACK: Acknowledge. A mandatory byte (or not) is decided by the Master In-band Interrupt Registry and
 *        Rules Register (MIBIRULES). To limit the maximum number of IBI bytes, configure the Read Termination field
 *        (MCTRL.RDTERM).
 *  0b01..NACK: Not acknowledge
 *  0b10..ACK_WITH_MANDATORY: Acknowledge with mandatory byte (ignores the MIBIRULES register). Acknowledge with
 *        mandatory byte should not be used, unless only slaves with a mandatory byte can cause an In-Band Interrupt.
 *  0b11..MANUAL: stop and wait for a decision using the IBIAckNack request
 */
#define I3C_MCTRL_IBIRESP(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_MCTRL_IBIRESP_SHIFT)) & I3C_MCTRL_IBIRESP_MASK)
#define I3C_MCTRL_DIR_MASK                       (0x100U)
#define I3C_MCTRL_DIR_SHIFT                      (8U)
#define I3C_MCTRL_ADDR_MASK                      (0xFE00U)
#define I3C_MCTRL_ADDR_SHIFT                     (9U)
/*! ADDR - ADDR
 */
#define I3C_MCTRL_ADDR(x)                        (((uint32_t)(((uint32_t)(x)) << I3C_MCTRL_ADDR_SHIFT)) & I3C_MCTRL_ADDR_MASK)
#define I3C_MCTRL_RDTERM_MASK                    (0xFF0000U)
#define I3C_MCTRL_RDTERM_SHIFT                   (16U)
/*! RDTERM - Read terminate
 */
#define I3C_MCTRL_RDTERM(x)                      (((uint32_t)(((uint32_t)(x)) << I3C_MCTRL_RDTERM_SHIFT)) & I3C_MCTRL_RDTERM_MASK)
/*! @} */

/*! @name MSTATUS - Master Status Register */
/*! @{ */
#define I3C_MSTATUS_STATE_MASK                   (0x7U)
#define I3C_MSTATUS_STATE_SHIFT                  (0U)
/*! STATE - State of the master
 *  0b000..IDLE: the bus has STOPped.
 *  0b001..SLVREQ: (Slave Request state) the bus has STOPped but a slave is holding SDA low. If using auto-emit
 *         IBI (MCTRL.AutoIBI), then the master will not stay in the Slave Request state.
 *  0b010..MSGSDR: in Single Data Rate (SDR) Message state (from using MWMSG_SDR)
 *  0b011..NORMACT: normal active Single Data Rate (SDR) state (from using MCTRL and MWDATAn and MRDATAn
 *         registers). The master will stay in the NORMACT state until a STOP is issued.
 *  0b100..MSGDDR: in Double Data Rate (DDR) Message mode (from using MWMSG_DDR or using the normal method with
 *         DDR). The master will stay in the DDR state, until the master exits using EXIT (emits the Exit pattern).
 *  0b101..DAA: in Enter Dynamic Address Assignment (ENTDAA) mode
 *  0b110..IBIACK: waiting for an In-Band Interrupt (IBI) ACK/NACK decision
 *  0b111..IBIRCV: Receiving an In-Band Interrupt (IBI); this IBIRCV state is used after IBI/MR/HJ has won the
 *         arbitration, and IBIRCV state is also used for IBI mandatory byte (if any) and any bytes that follow.
 */
#define I3C_MSTATUS_STATE(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_MSTATUS_STATE_SHIFT)) & I3C_MSTATUS_STATE_MASK)
#define I3C_MSTATUS_BETWEEN_MASK                 (0x10U)
#define I3C_MSTATUS_BETWEEN_SHIFT                (4U)
#define I3C_MSTATUS_NACKED_MASK                  (0x20U)
#define I3C_MSTATUS_NACKED_SHIFT                 (5U)
#define I3C_MSTATUS_IBITYPE_MASK                 (0xC0U)
#define I3C_MSTATUS_IBITYPE_SHIFT                (6U)
/*! IBITYPE - In-Band Interrupt (IBI) type
 *  0b00..NONE: cleared when IBI Won bit (MSTATUS.IBIWON) is cleared
 *  0b01..IBI: In-Band Interrupt
 *  0b10..MR: Master Request
 *  0b11..HJ: Hot-Join
 */
#define I3C_MSTATUS_IBITYPE(x)                   (((uint32_t)(((uint32_t)(x)) << I3C_MSTATUS_IBITYPE_SHIFT)) & I3C_MSTATUS_IBITYPE_MASK)
#define I3C_MSTATUS_SLVSTART_MASK                (0x100U)
#define I3C_MSTATUS_SLVSTART_SHIFT               (8U)
#define I3C_MSTATUS_MCTRLDONE_MASK               (0x200U)
#define I3C_MSTATUS_MCTRLDONE_SHIFT              (9U)
#define I3C_MSTATUS_COMPLETE_MASK                (0x400U)
#define I3C_MSTATUS_COMPLETE_SHIFT               (10U)
#define I3C_MSTATUS_RXPEND_MASK                  (0x800U)
#define I3C_MSTATUS_RXPEND_SHIFT                 (11U)
#define I3C_MSTATUS_TXNOTFULL_MASK               (0x1000U)
#define I3C_MSTATUS_TXNOTFULL_SHIFT              (12U)
#define I3C_MSTATUS_IBIWON_MASK                  (0x2000U)
#define I3C_MSTATUS_IBIWON_SHIFT                 (13U)
#define I3C_MSTATUS_ERRWARN_MASK                 (0x8000U)
#define I3C_MSTATUS_ERRWARN_SHIFT                (15U)
#define I3C_MSTATUS_NOWMASTER_MASK               (0x80000U)
#define I3C_MSTATUS_NOWMASTER_SHIFT              (19U)
#define I3C_MSTATUS_IBIADDR_MASK                 (0x7F000000U)
#define I3C_MSTATUS_IBIADDR_SHIFT                (24U)
/*! IBIADDR - IBI address
 */
#define I3C_MSTATUS_IBIADDR(x)                   (((uint32_t)(((uint32_t)(x)) << I3C_MSTATUS_IBIADDR_SHIFT)) & I3C_MSTATUS_IBIADDR_MASK)
/*! @} */

/*! @name MIBIRULES - Master In-band Interrupt Registry and Rules Register */
/*! @{ */
#define I3C_MIBIRULES_ADDR0_MASK                 (0x3FU)
#define I3C_MIBIRULES_ADDR0_SHIFT                (0U)
/*! ADDR0 - ADDR0
 */
#define I3C_MIBIRULES_ADDR0(x)                   (((uint32_t)(((uint32_t)(x)) << I3C_MIBIRULES_ADDR0_SHIFT)) & I3C_MIBIRULES_ADDR0_MASK)
#define I3C_MIBIRULES_ADDR1_MASK                 (0xFC0U)
#define I3C_MIBIRULES_ADDR1_SHIFT                (6U)
/*! ADDR1 - ADDR1
 */
#define I3C_MIBIRULES_ADDR1(x)                   (((uint32_t)(((uint32_t)(x)) << I3C_MIBIRULES_ADDR1_SHIFT)) & I3C_MIBIRULES_ADDR1_MASK)
#define I3C_MIBIRULES_ADDR2_MASK                 (0x3F000U)
#define I3C_MIBIRULES_ADDR2_SHIFT                (12U)
/*! ADDR2 - ADDR2
 */
#define I3C_MIBIRULES_ADDR2(x)                   (((uint32_t)(((uint32_t)(x)) << I3C_MIBIRULES_ADDR2_SHIFT)) & I3C_MIBIRULES_ADDR2_MASK)
#define I3C_MIBIRULES_ADDR3_MASK                 (0xFC0000U)
#define I3C_MIBIRULES_ADDR3_SHIFT                (18U)
/*! ADDR3 - ADDR3
 */
#define I3C_MIBIRULES_ADDR3(x)                   (((uint32_t)(((uint32_t)(x)) << I3C_MIBIRULES_ADDR3_SHIFT)) & I3C_MIBIRULES_ADDR3_MASK)
#define I3C_MIBIRULES_ADDR4_MASK                 (0x3F000000U)
#define I3C_MIBIRULES_ADDR4_SHIFT                (24U)
/*! ADDR4 - ADDR4
 */
#define I3C_MIBIRULES_ADDR4(x)                   (((uint32_t)(((uint32_t)(x)) << I3C_MIBIRULES_ADDR4_SHIFT)) & I3C_MIBIRULES_ADDR4_MASK)
#define I3C_MIBIRULES_MSB0_MASK                  (0x40000000U)
#define I3C_MIBIRULES_MSB0_SHIFT                 (30U)
#define I3C_MIBIRULES_NOBYTE_MASK                (0x80000000U)
#define I3C_MIBIRULES_NOBYTE_SHIFT               (31U)
/*! @} */

/*! @name MINTSET - Master Interrupt Set Register */
/*! @{ */
#define I3C_MINTSET_SLVSTART_MASK                (0x100U)
#define I3C_MINTSET_SLVSTART_SHIFT               (8U)
#define I3C_MINTSET_MCTRLDONE_MASK               (0x200U)
#define I3C_MINTSET_MCTRLDONE_SHIFT              (9U)
#define I3C_MINTSET_COMPLETE_MASK                (0x400U)
#define I3C_MINTSET_COMPLETE_SHIFT               (10U)
#define I3C_MINTSET_RXPEND_MASK                  (0x800U)
#define I3C_MINTSET_RXPEND_SHIFT                 (11U)
#define I3C_MINTSET_TXNOTFULL_MASK               (0x1000U)
#define I3C_MINTSET_TXNOTFULL_SHIFT              (12U)
#define I3C_MINTSET_IBIWON_MASK                  (0x2000U)
#define I3C_MINTSET_IBIWON_SHIFT                 (13U)
#define I3C_MINTSET_ERRWARN_MASK                 (0x8000U)
#define I3C_MINTSET_ERRWARN_SHIFT                (15U)
#define I3C_MINTSET_NOWMASTER_MASK               (0x80000U)
#define I3C_MINTSET_NOWMASTER_SHIFT              (19U)
/*! @} */

/*! @name MINTCLR - Master Interrupt Clear Register */
/*! @{ */
#define I3C_MINTCLR_SLVSTART_MASK                (0x100U)
#define I3C_MINTCLR_SLVSTART_SHIFT               (8U)
#define I3C_MINTCLR_MCTRLDONE_MASK               (0x200U)
#define I3C_MINTCLR_MCTRLDONE_SHIFT              (9U)
#define I3C_MINTCLR_COMPLETE_MASK                (0x400U)
#define I3C_MINTCLR_COMPLETE_SHIFT               (10U)
#define I3C_MINTCLR_RXPEND_MASK                  (0x800U)
#define I3C_MINTCLR_RXPEND_SHIFT                 (11U)
#define I3C_MINTCLR_TXNOTFULL_MASK               (0x1000U)
#define I3C_MINTCLR_TXNOTFULL_SHIFT              (12U)
#define I3C_MINTCLR_IBIWON_MASK                  (0x2000U)
#define I3C_MINTCLR_IBIWON_SHIFT                 (13U)
#define I3C_MINTCLR_ERRWARN_MASK                 (0x8000U)
#define I3C_MINTCLR_ERRWARN_SHIFT                (15U)
#define I3C_MINTCLR_NOWMASTER_MASK               (0x80000U)
#define I3C_MINTCLR_NOWMASTER_SHIFT              (19U)
/*! @} */

/*! @name MINTMASKED - Master Interrupt Mask Register */
/*! @{ */
#define I3C_MINTMASKED_SLVSTART_MASK             (0x100U)
#define I3C_MINTMASKED_SLVSTART_SHIFT            (8U)
#define I3C_MINTMASKED_MCTRLDONE_MASK            (0x200U)
#define I3C_MINTMASKED_MCTRLDONE_SHIFT           (9U)
#define I3C_MINTMASKED_COMPLETE_MASK             (0x400U)
#define I3C_MINTMASKED_COMPLETE_SHIFT            (10U)
#define I3C_MINTMASKED_RXPEND_MASK               (0x800U)
#define I3C_MINTMASKED_RXPEND_SHIFT              (11U)
#define I3C_MINTMASKED_TXNOTFULL_MASK            (0x1000U)
#define I3C_MINTMASKED_TXNOTFULL_SHIFT           (12U)
#define I3C_MINTMASKED_IBIWON_MASK               (0x2000U)
#define I3C_MINTMASKED_IBIWON_SHIFT              (13U)
#define I3C_MINTMASKED_ERRWARN_MASK              (0x8000U)
#define I3C_MINTMASKED_ERRWARN_SHIFT             (15U)
#define I3C_MINTMASKED_NOWMASTER_MASK            (0x80000U)
#define I3C_MINTMASKED_NOWMASTER_SHIFT           (19U)
/*! @} */

/*! @name MERRWARN - Master Errors and Warnings Register */
/*! @{ */
#define I3C_MERRWARN_NACK_MASK                   (0x4U)
#define I3C_MERRWARN_NACK_SHIFT                  (2U)
#define I3C_MERRWARN_WRABT_MASK                  (0x8U)
#define I3C_MERRWARN_WRABT_SHIFT                 (3U)
#define I3C_MERRWARN_TERM_MASK                   (0x10U)
#define I3C_MERRWARN_TERM_SHIFT                  (4U)
#define I3C_MERRWARN_HPAR_MASK                   (0x200U)
#define I3C_MERRWARN_HPAR_SHIFT                  (9U)
#define I3C_MERRWARN_HCRC_MASK                   (0x400U)
#define I3C_MERRWARN_HCRC_SHIFT                  (10U)
#define I3C_MERRWARN_OREAD_MASK                  (0x10000U)
#define I3C_MERRWARN_OREAD_SHIFT                 (16U)
#define I3C_MERRWARN_OWRITE_MASK                 (0x20000U)
#define I3C_MERRWARN_OWRITE_SHIFT                (17U)
#define I3C_MERRWARN_MSGERR_MASK                 (0x40000U)
#define I3C_MERRWARN_MSGERR_SHIFT                (18U)
#define I3C_MERRWARN_INVREQ_MASK                 (0x80000U)
#define I3C_MERRWARN_INVREQ_SHIFT                (19U)
#define I3C_MERRWARN_TIMEOUT_MASK                (0x100000U)
#define I3C_MERRWARN_TIMEOUT_SHIFT               (20U)
/*! @} */

/*! @name MDMACTRL - Master DMA Control Register */
/*! @{ */
#define I3C_MDMACTRL_DMAFB_MASK                  (0x3U)
#define I3C_MDMACTRL_DMAFB_SHIFT                 (0U)
/*! DMAFB - DMA from bus
 *  0b00..NOT_USED: DMA is not used
 *  0b01..ENABLE_ONE_FRAME: DMA is enabled for 1 frame. DMAFB auto-clears on STOP or repeated START. See MCONFIG.MATCHSS.
 *  0b10..ENABLE: DMA is enabled until the DMA is turned off.
 */
#define I3C_MDMACTRL_DMAFB(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MDMACTRL_DMAFB_SHIFT)) & I3C_MDMACTRL_DMAFB_MASK)
#define I3C_MDMACTRL_DMATB_MASK                  (0xCU)
#define I3C_MDMACTRL_DMATB_SHIFT                 (2U)
/*! DMATB - DMA to bus
 *  0b00..NOT_USED: DMA is not used
 *  0b01..ENABLE_ONE_FRAME: DMA is enabled for 1 frame (ended by DMA or Terminated). DMATB auto-clears on STOP or START. See MCONFIG.MATCHSS.
 *  0b10..ENABLE: DMA is enabled until DMA is turned off. Normally DMA ENABLE should only be used in Master Message mode.
 */
#define I3C_MDMACTRL_DMATB(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MDMACTRL_DMATB_SHIFT)) & I3C_MDMACTRL_DMATB_MASK)
#define I3C_MDMACTRL_DMAWIDTH_MASK               (0x30U)
#define I3C_MDMACTRL_DMAWIDTH_SHIFT              (4U)
/*! DMAWIDTH - DMA width
 *  0b00..BYTE
 *  0b01..BYTE_AGAIN
 *  0b10..HALF_WORD: Half-word (16 bits). This will make sure that 2 bytes are free/available in FIFO.
 *  0b11..RESERVED
 */
#define I3C_MDMACTRL_DMAWIDTH(x)                 (((uint32_t)(((uint32_t)(x)) << I3C_MDMACTRL_DMAWIDTH_SHIFT)) & I3C_MDMACTRL_DMAWIDTH_MASK)
/*! @} */

/*! @name MDATACTRL - Master Data Control Register */
/*! @{ */
#define I3C_MDATACTRL_FLUSHTB_MASK               (0x1U)
#define I3C_MDATACTRL_FLUSHTB_SHIFT              (0U)
#define I3C_MDATACTRL_FLUSHFB_MASK               (0x2U)
#define I3C_MDATACTRL_FLUSHFB_SHIFT              (1U)
#define I3C_MDATACTRL_UNLOCK_MASK                (0x4U)
#define I3C_MDATACTRL_UNLOCK_SHIFT               (2U)
#define I3C_MDATACTRL_TXTRIG_MASK                (0x30U)
#define I3C_MDATACTRL_TXTRIG_SHIFT               (4U)
/*! TXTRIG - TX trigger level
 */
#define I3C_MDATACTRL_TXTRIG(x)                  (((uint32_t)(((uint32_t)(x)) << I3C_MDATACTRL_TXTRIG_SHIFT)) & I3C_MDATACTRL_TXTRIG_MASK)
#define I3C_MDATACTRL_RXTRIG_MASK                (0xC0U)
#define I3C_MDATACTRL_RXTRIG_SHIFT               (6U)
/*! RXTRIG - RX trigger level
 */
#define I3C_MDATACTRL_RXTRIG(x)                  (((uint32_t)(((uint32_t)(x)) << I3C_MDATACTRL_RXTRIG_SHIFT)) & I3C_MDATACTRL_RXTRIG_MASK)
#define I3C_MDATACTRL_TXCOUNT_MASK               (0x1F0000U)
#define I3C_MDATACTRL_TXCOUNT_SHIFT              (16U)
/*! TXCOUNT - TX byte count
 */
#define I3C_MDATACTRL_TXCOUNT(x)                 (((uint32_t)(((uint32_t)(x)) << I3C_MDATACTRL_TXCOUNT_SHIFT)) & I3C_MDATACTRL_TXCOUNT_MASK)
#define I3C_MDATACTRL_RXCOUNT_MASK               (0x1F000000U)
#define I3C_MDATACTRL_RXCOUNT_SHIFT              (24U)
/*! RXCOUNT - RX byte count
 */
#define I3C_MDATACTRL_RXCOUNT(x)                 (((uint32_t)(((uint32_t)(x)) << I3C_MDATACTRL_RXCOUNT_SHIFT)) & I3C_MDATACTRL_RXCOUNT_MASK)
#define I3C_MDATACTRL_TXFULL_MASK                (0x40000000U)
#define I3C_MDATACTRL_TXFULL_SHIFT               (30U)
#define I3C_MDATACTRL_RXEMPTY_MASK               (0x80000000U)
#define I3C_MDATACTRL_RXEMPTY_SHIFT              (31U)
/*! @} */

/*! @name MWDATAB - Master Write Data Byte Register */
/*! @{ */
#define I3C_MWDATAB_VALUE_MASK                   (0xFFU)
#define I3C_MWDATAB_VALUE_SHIFT                  (0U)
/*! VALUE - Data byte
 */
#define I3C_MWDATAB_VALUE(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_MWDATAB_VALUE_SHIFT)) & I3C_MWDATAB_VALUE_MASK)
#define I3C_MWDATAB_END_MASK                     (0x100U)
#define I3C_MWDATAB_END_SHIFT                    (8U)
#define I3C_MWDATAB_END_ALSO_MASK                (0x10000U)
#define I3C_MWDATAB_END_ALSO_SHIFT               (16U)
/*! @} */

/*! @name MWDATABE - Master Write Data Byte End Register */
/*! @{ */
#define I3C_MWDATABE_VALUE_MASK                  (0xFFU)
#define I3C_MWDATABE_VALUE_SHIFT                 (0U)
/*! VALUE - Data
 */
#define I3C_MWDATABE_VALUE(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MWDATABE_VALUE_SHIFT)) & I3C_MWDATABE_VALUE_MASK)
/*! @} */

/*! @name MWDATAH - Master Write Data Half-word Register */
/*! @{ */
#define I3C_MWDATAH_DATA0_MASK                   (0xFFU)
#define I3C_MWDATAH_DATA0_SHIFT                  (0U)
/*! DATA0 - Data byte 0
 */
#define I3C_MWDATAH_DATA0(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_MWDATAH_DATA0_SHIFT)) & I3C_MWDATAH_DATA0_MASK)
#define I3C_MWDATAH_DATA1_MASK                   (0xFF00U)
#define I3C_MWDATAH_DATA1_SHIFT                  (8U)
/*! DATA1 - Data byte 1
 */
#define I3C_MWDATAH_DATA1(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_MWDATAH_DATA1_SHIFT)) & I3C_MWDATAH_DATA1_MASK)
#define I3C_MWDATAH_END_MASK                     (0x10000U)
#define I3C_MWDATAH_END_SHIFT                    (16U)
/*! @} */

/*! @name MWDATAHE - Master Write Data Byte End Register */
/*! @{ */
#define I3C_MWDATAHE_DATA0_MASK                  (0xFFU)
#define I3C_MWDATAHE_DATA0_SHIFT                 (0U)
/*! DATA0 - DATA 0
 */
#define I3C_MWDATAHE_DATA0(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MWDATAHE_DATA0_SHIFT)) & I3C_MWDATAHE_DATA0_MASK)
#define I3C_MWDATAHE_DATA1_MASK                  (0xFF00U)
#define I3C_MWDATAHE_DATA1_SHIFT                 (8U)
/*! DATA1 - DATA 1
 */
#define I3C_MWDATAHE_DATA1(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MWDATAHE_DATA1_SHIFT)) & I3C_MWDATAHE_DATA1_MASK)
/*! @} */

/*! @name MRDATAB - Master Read Data Byte Register */
/*! @{ */
#define I3C_MRDATAB_VALUE_MASK                   (0xFFU)
#define I3C_MRDATAB_VALUE_SHIFT                  (0U)
/*! VALUE - VALUE
 */
#define I3C_MRDATAB_VALUE(x)                     (((uint32_t)(((uint32_t)(x)) << I3C_MRDATAB_VALUE_SHIFT)) & I3C_MRDATAB_VALUE_MASK)
/*! @} */

/*! @name MRDATAH - Master Read Data Half-word Register */
/*! @{ */
#define I3C_MRDATAH_LSB_MASK                     (0xFFU)
#define I3C_MRDATAH_LSB_SHIFT                    (0U)
/*! LSB - LSB
 */
#define I3C_MRDATAH_LSB(x)                       (((uint32_t)(((uint32_t)(x)) << I3C_MRDATAH_LSB_SHIFT)) & I3C_MRDATAH_LSB_MASK)
#define I3C_MRDATAH_MSB_MASK                     (0xFF00U)
#define I3C_MRDATAH_MSB_SHIFT                    (8U)
/*! MSB - MSB
 */
#define I3C_MRDATAH_MSB(x)                       (((uint32_t)(((uint32_t)(x)) << I3C_MRDATAH_MSB_SHIFT)) & I3C_MRDATAH_MSB_MASK)
/*! @} */

/*! @name MWMSG_SDR_CONTROL - Master Write Message in SDR mode */
/*! @{ */
#define I3C_MWMSG_SDR_CONTROL_DIR_MASK           (0x1U)
#define I3C_MWMSG_SDR_CONTROL_DIR_SHIFT          (0U)
#define I3C_MWMSG_SDR_CONTROL_ADDR_MASK          (0xFEU)
#define I3C_MWMSG_SDR_CONTROL_ADDR_SHIFT         (1U)
/*! ADDR - Address to be written to
 */
#define I3C_MWMSG_SDR_CONTROL_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << I3C_MWMSG_SDR_CONTROL_ADDR_SHIFT)) & I3C_MWMSG_SDR_CONTROL_ADDR_MASK)
#define I3C_MWMSG_SDR_CONTROL_END_MASK           (0x100U)
#define I3C_MWMSG_SDR_CONTROL_END_SHIFT          (8U)
#define I3C_MWMSG_SDR_CONTROL_I2C_MASK           (0x400U)
#define I3C_MWMSG_SDR_CONTROL_I2C_SHIFT          (10U)
#define I3C_MWMSG_SDR_CONTROL_LEN_MASK           (0xF800U)
#define I3C_MWMSG_SDR_CONTROL_LEN_SHIFT          (11U)
/*! LEN - Length
 */
#define I3C_MWMSG_SDR_CONTROL_LEN(x)             (((uint32_t)(((uint32_t)(x)) << I3C_MWMSG_SDR_CONTROL_LEN_SHIFT)) & I3C_MWMSG_SDR_CONTROL_LEN_MASK)
/*! @} */

/*! @name MWMSG_SDR_DATA - Master Write Message Data in SDR mode */
/*! @{ */
#define I3C_MWMSG_SDR_DATA_DATA16B_MASK          (0xFFFFU)
#define I3C_MWMSG_SDR_DATA_DATA16B_SHIFT         (0U)
/*! DATA16B - Data
 */
#define I3C_MWMSG_SDR_DATA_DATA16B(x)            (((uint32_t)(((uint32_t)(x)) << I3C_MWMSG_SDR_DATA_DATA16B_SHIFT)) & I3C_MWMSG_SDR_DATA_DATA16B_MASK)
#define I3C_MWMSG_SDR_DATA_END_MASK              (0x10000U)
#define I3C_MWMSG_SDR_DATA_END_SHIFT             (16U)
/*! @} */

/*! @name MRMSG_SDR - Master Read Message in SDR mode */
/*! @{ */
#define I3C_MRMSG_SDR_DATA_MASK                  (0xFFFFU)
#define I3C_MRMSG_SDR_DATA_SHIFT                 (0U)
/*! DATA - Data
 */
#define I3C_MRMSG_SDR_DATA(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MRMSG_SDR_DATA_SHIFT)) & I3C_MRMSG_SDR_DATA_MASK)
/*! @} */

/*! @name MWMSG_DDR_CONTROL - Master Write Message in DDR mode */
/*! @{ */
#define I3C_MWMSG_DDR_CONTROL_LEN_MASK           (0x3FFU)
#define I3C_MWMSG_DDR_CONTROL_LEN_SHIFT          (0U)
/*! LEN - Length of message
 */
#define I3C_MWMSG_DDR_CONTROL_LEN(x)             (((uint32_t)(((uint32_t)(x)) << I3C_MWMSG_DDR_CONTROL_LEN_SHIFT)) & I3C_MWMSG_DDR_CONTROL_LEN_MASK)
#define I3C_MWMSG_DDR_CONTROL_END_MASK           (0x4000U)
#define I3C_MWMSG_DDR_CONTROL_END_SHIFT          (14U)
/*! @} */

/*! @name MWMSG_DDR_DATA - Master Write Message Data in DDR mode */
/*! @{ */
#define I3C_MWMSG_DDR_DATA_DATA16B_MASK          (0xFFFFU)
#define I3C_MWMSG_DDR_DATA_DATA16B_SHIFT         (0U)
/*! DATA16B - Data
 */
#define I3C_MWMSG_DDR_DATA_DATA16B(x)            (((uint32_t)(((uint32_t)(x)) << I3C_MWMSG_DDR_DATA_DATA16B_SHIFT)) & I3C_MWMSG_DDR_DATA_DATA16B_MASK)
#define I3C_MWMSG_DDR_DATA_END_MASK              (0x10000U)
#define I3C_MWMSG_DDR_DATA_END_SHIFT             (16U)
/*! @} */

/*! @name MRMSG_DDR - Master Read Message in DDR mode */
/*! @{ */
#define I3C_MRMSG_DDR_DATA_MASK                  (0xFFFFU)
#define I3C_MRMSG_DDR_DATA_SHIFT                 (0U)
/*! DATA - Data
 */
#define I3C_MRMSG_DDR_DATA(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MRMSG_DDR_DATA_SHIFT)) & I3C_MRMSG_DDR_DATA_MASK)
#define I3C_MRMSG_DDR_CLEN_MASK                  (0x3FF0000U)
#define I3C_MRMSG_DDR_CLEN_SHIFT                 (16U)
/*! CLEN - Current length
 */
#define I3C_MRMSG_DDR_CLEN(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MRMSG_DDR_CLEN_SHIFT)) & I3C_MRMSG_DDR_CLEN_MASK)
/*! @} */

/*! @name MDYNADDR - Master Dynamic Address Register */
/*! @{ */
#define I3C_MDYNADDR_DAVALID_MASK                (0x1U)
#define I3C_MDYNADDR_DAVALID_SHIFT               (0U)
#define I3C_MDYNADDR_DADDR_MASK                  (0xFEU)
#define I3C_MDYNADDR_DADDR_SHIFT                 (1U)
/*! DADDR - Dynamic address
 */
#define I3C_MDYNADDR_DADDR(x)                    (((uint32_t)(((uint32_t)(x)) << I3C_MDYNADDR_DADDR_SHIFT)) & I3C_MDYNADDR_DADDR_MASK)
/*! @} */

/*! @name SID - Slave Module ID Register */
/*! @{ */
#define I3C_SID_ID_MASK                          (0xFFFFFFFFU)
#define I3C_SID_ID_SHIFT                         (0U)
/*! ID - ID
 */
#define I3C_SID_ID(x)                            (((uint32_t)(((uint32_t)(x)) << I3C_SID_ID_SHIFT)) & I3C_SID_ID_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group I3C_Register_Masks */


/* I3C - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral I3C0 base pointer */
  #define I3C0_BASE_PTR                            ((I3C_MemMapPtr)0x50036000u)
  /** Peripheral I3C0 base pointer */
  #define I3C0_BASE_PTR_NS                         ((I3C_MemMapPtr)0x40036000u)
  /** Peripheral I3C1 base pointer */
  #define I3C1_BASE_PTR                            ((I3C_MemMapPtr)0x50037000u)
  /** Peripheral I3C1 base pointer */
  #define I3C1_BASE_PTR_NS                         ((I3C_MemMapPtr)0x40037000u)
  /** Array initializer of I3C peripheral base pointers */
  #define I3C_BASE_PTRS                            { I3C0_BASE_PTR, I3C1_BASE_PTR }
  /** Array initializer of I3C peripheral base pointers */
  #define I3C_BASE_PTRS_NS                         { I3C0_BASE_PTR_NS, I3C1_BASE_PTR_NS }
#else
  /** Peripheral I3C0 base pointer */
  #define I3C0_BASE_PTR                            ((I3C_MemMapPtr)0x40036000u)
  /** Peripheral I3C1 base pointer */
  #define I3C1_BASE_PTR                            ((I3C_MemMapPtr)0x40037000u)
  /** Array initializer of I3C peripheral base pointers */
  #define I3C_BASE_PTRS                            { I3C0_BASE_PTR, I3C1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- I3C - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I3C_Register_Accessor_Macros I3C - Register accessor macros
 * @{
 */


/* I3C - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* I3C0 */
  #define I3C0_MCONFIG                             I3C_MCONFIG_REG(I3C0_BASE_PTR)
  #define I3C0_MCONFIG_NS                          I3C_MCONFIG_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SCONFIG                             I3C_SCONFIG_REG(I3C0_BASE_PTR)
  #define I3C0_SCONFIG_NS                          I3C_SCONFIG_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SSTATUS                             I3C_SSTATUS_REG(I3C0_BASE_PTR)
  #define I3C0_SSTATUS_NS                          I3C_SSTATUS_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SCTRL                               I3C_SCTRL_REG(I3C0_BASE_PTR)
  #define I3C0_SCTRL_NS                            I3C_SCTRL_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SINTSET                             I3C_SINTSET_REG(I3C0_BASE_PTR)
  #define I3C0_SINTSET_NS                          I3C_SINTSET_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SINTCLR                             I3C_SINTCLR_REG(I3C0_BASE_PTR)
  #define I3C0_SINTCLR_NS                          I3C_SINTCLR_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SINTMASKED                          I3C_SINTMASKED_REG(I3C0_BASE_PTR)
  #define I3C0_SINTMASKED_NS                       I3C_SINTMASKED_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SERRWARN                            I3C_SERRWARN_REG(I3C0_BASE_PTR)
  #define I3C0_SERRWARN_NS                         I3C_SERRWARN_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SDMACTRL                            I3C_SDMACTRL_REG(I3C0_BASE_PTR)
  #define I3C0_SDMACTRL_NS                         I3C_SDMACTRL_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SDATACTRL                           I3C_SDATACTRL_REG(I3C0_BASE_PTR)
  #define I3C0_SDATACTRL_NS                        I3C_SDATACTRL_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SWDATAB                             I3C_SWDATAB_REG(I3C0_BASE_PTR)
  #define I3C0_SWDATAB_NS                          I3C_SWDATAB_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SWDATABE                            I3C_SWDATABE_REG(I3C0_BASE_PTR)
  #define I3C0_SWDATABE_NS                         I3C_SWDATABE_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SWDATAH                             I3C_SWDATAH_REG(I3C0_BASE_PTR)
  #define I3C0_SWDATAH_NS                          I3C_SWDATAH_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SWDATAHE                            I3C_SWDATAHE_REG(I3C0_BASE_PTR)
  #define I3C0_SWDATAHE_NS                         I3C_SWDATAHE_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SRDATAB                             I3C_SRDATAB_REG(I3C0_BASE_PTR)
  #define I3C0_SRDATAB_NS                          I3C_SRDATAB_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SRDATAH                             I3C_SRDATAH_REG(I3C0_BASE_PTR)
  #define I3C0_SRDATAH_NS                          I3C_SRDATAH_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SCAPABILITIES                       I3C_SCAPABILITIES_REG(I3C0_BASE_PTR)
  #define I3C0_SCAPABILITIES_NS                    I3C_SCAPABILITIES_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SDYNADDR                            I3C_SDYNADDR_REG(I3C0_BASE_PTR)
  #define I3C0_SDYNADDR_NS                         I3C_SDYNADDR_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SMAXLIMITS                          I3C_SMAXLIMITS_REG(I3C0_BASE_PTR)
  #define I3C0_SMAXLIMITS_NS                       I3C_SMAXLIMITS_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SIDPARTNO                           I3C_SIDPARTNO_REG(I3C0_BASE_PTR)
  #define I3C0_SIDPARTNO_NS                        I3C_SIDPARTNO_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SIDEXT                              I3C_SIDEXT_REG(I3C0_BASE_PTR)
  #define I3C0_SIDEXT_NS                           I3C_SIDEXT_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SVENDORID                           I3C_SVENDORID_REG(I3C0_BASE_PTR)
  #define I3C0_SVENDORID_NS                        I3C_SVENDORID_REG(I3C0_BASE_PTR_NS)
  #define I3C0_STCCLOCK                            I3C_STCCLOCK_REG(I3C0_BASE_PTR)
  #define I3C0_STCCLOCK_NS                         I3C_STCCLOCK_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SMSGMAPADDR                         I3C_SMSGMAPADDR_REG(I3C0_BASE_PTR)
  #define I3C0_SMSGMAPADDR_NS                      I3C_SMSGMAPADDR_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MCTRL                               I3C_MCTRL_REG(I3C0_BASE_PTR)
  #define I3C0_MCTRL_NS                            I3C_MCTRL_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MSTATUS                             I3C_MSTATUS_REG(I3C0_BASE_PTR)
  #define I3C0_MSTATUS_NS                          I3C_MSTATUS_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MIBIRULES                           I3C_MIBIRULES_REG(I3C0_BASE_PTR)
  #define I3C0_MIBIRULES_NS                        I3C_MIBIRULES_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MINTSET                             I3C_MINTSET_REG(I3C0_BASE_PTR)
  #define I3C0_MINTSET_NS                          I3C_MINTSET_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MINTCLR                             I3C_MINTCLR_REG(I3C0_BASE_PTR)
  #define I3C0_MINTCLR_NS                          I3C_MINTCLR_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MINTMASKED                          I3C_MINTMASKED_REG(I3C0_BASE_PTR)
  #define I3C0_MINTMASKED_NS                       I3C_MINTMASKED_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MERRWARN                            I3C_MERRWARN_REG(I3C0_BASE_PTR)
  #define I3C0_MERRWARN_NS                         I3C_MERRWARN_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MDMACTRL                            I3C_MDMACTRL_REG(I3C0_BASE_PTR)
  #define I3C0_MDMACTRL_NS                         I3C_MDMACTRL_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MDATACTRL                           I3C_MDATACTRL_REG(I3C0_BASE_PTR)
  #define I3C0_MDATACTRL_NS                        I3C_MDATACTRL_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MWDATAB                             I3C_MWDATAB_REG(I3C0_BASE_PTR)
  #define I3C0_MWDATAB_NS                          I3C_MWDATAB_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MWDATABE                            I3C_MWDATABE_REG(I3C0_BASE_PTR)
  #define I3C0_MWDATABE_NS                         I3C_MWDATABE_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MWDATAH                             I3C_MWDATAH_REG(I3C0_BASE_PTR)
  #define I3C0_MWDATAH_NS                          I3C_MWDATAH_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MWDATAHE                            I3C_MWDATAHE_REG(I3C0_BASE_PTR)
  #define I3C0_MWDATAHE_NS                         I3C_MWDATAHE_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MRDATAB                             I3C_MRDATAB_REG(I3C0_BASE_PTR)
  #define I3C0_MRDATAB_NS                          I3C_MRDATAB_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MRDATAH                             I3C_MRDATAH_REG(I3C0_BASE_PTR)
  #define I3C0_MRDATAH_NS                          I3C_MRDATAH_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MWMSG_SDR_CONTROL                   I3C_MWMSG_SDR_CONTROL_REG(I3C0_BASE_PTR)
  #define I3C0_MWMSG_SDR_CONTROL_NS                I3C_MWMSG_SDR_CONTROL_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MWMSG_SDR_DATA                      I3C_MWMSG_SDR_DATA_REG(I3C0_BASE_PTR)
  #define I3C0_MWMSG_SDR_DATA_NS                   I3C_MWMSG_SDR_DATA_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MRMSG_SDR                           I3C_MRMSG_SDR_REG(I3C0_BASE_PTR)
  #define I3C0_MRMSG_SDR_NS                        I3C_MRMSG_SDR_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MWMSG_DDR_CONTROL                   I3C_MWMSG_DDR_CONTROL_REG(I3C0_BASE_PTR)
  #define I3C0_MWMSG_DDR_CONTROL_NS                I3C_MWMSG_DDR_CONTROL_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MWMSG_DDR_DATA                      I3C_MWMSG_DDR_DATA_REG(I3C0_BASE_PTR)
  #define I3C0_MWMSG_DDR_DATA_NS                   I3C_MWMSG_DDR_DATA_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MRMSG_DDR                           I3C_MRMSG_DDR_REG(I3C0_BASE_PTR)
  #define I3C0_MRMSG_DDR_NS                        I3C_MRMSG_DDR_REG(I3C0_BASE_PTR_NS)
  #define I3C0_MDYNADDR                            I3C_MDYNADDR_REG(I3C0_BASE_PTR)
  #define I3C0_MDYNADDR_NS                         I3C_MDYNADDR_REG(I3C0_BASE_PTR_NS)
  #define I3C0_SID                                 I3C_SID_REG(I3C0_BASE_PTR)
  #define I3C0_SID_NS                              I3C_SID_REG(I3C0_BASE_PTR_NS)
  /* I3C1 */
  #define I3C1_MCONFIG                             I3C_MCONFIG_REG(I3C1_BASE_PTR)
  #define I3C1_MCONFIG_NS                          I3C_MCONFIG_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SCONFIG                             I3C_SCONFIG_REG(I3C1_BASE_PTR)
  #define I3C1_SCONFIG_NS                          I3C_SCONFIG_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SSTATUS                             I3C_SSTATUS_REG(I3C1_BASE_PTR)
  #define I3C1_SSTATUS_NS                          I3C_SSTATUS_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SCTRL                               I3C_SCTRL_REG(I3C1_BASE_PTR)
  #define I3C1_SCTRL_NS                            I3C_SCTRL_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SINTSET                             I3C_SINTSET_REG(I3C1_BASE_PTR)
  #define I3C1_SINTSET_NS                          I3C_SINTSET_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SINTCLR                             I3C_SINTCLR_REG(I3C1_BASE_PTR)
  #define I3C1_SINTCLR_NS                          I3C_SINTCLR_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SINTMASKED                          I3C_SINTMASKED_REG(I3C1_BASE_PTR)
  #define I3C1_SINTMASKED_NS                       I3C_SINTMASKED_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SERRWARN                            I3C_SERRWARN_REG(I3C1_BASE_PTR)
  #define I3C1_SERRWARN_NS                         I3C_SERRWARN_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SDMACTRL                            I3C_SDMACTRL_REG(I3C1_BASE_PTR)
  #define I3C1_SDMACTRL_NS                         I3C_SDMACTRL_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SDATACTRL                           I3C_SDATACTRL_REG(I3C1_BASE_PTR)
  #define I3C1_SDATACTRL_NS                        I3C_SDATACTRL_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SWDATAB                             I3C_SWDATAB_REG(I3C1_BASE_PTR)
  #define I3C1_SWDATAB_NS                          I3C_SWDATAB_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SWDATABE                            I3C_SWDATABE_REG(I3C1_BASE_PTR)
  #define I3C1_SWDATABE_NS                         I3C_SWDATABE_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SWDATAH                             I3C_SWDATAH_REG(I3C1_BASE_PTR)
  #define I3C1_SWDATAH_NS                          I3C_SWDATAH_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SWDATAHE                            I3C_SWDATAHE_REG(I3C1_BASE_PTR)
  #define I3C1_SWDATAHE_NS                         I3C_SWDATAHE_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SRDATAB                             I3C_SRDATAB_REG(I3C1_BASE_PTR)
  #define I3C1_SRDATAB_NS                          I3C_SRDATAB_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SRDATAH                             I3C_SRDATAH_REG(I3C1_BASE_PTR)
  #define I3C1_SRDATAH_NS                          I3C_SRDATAH_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SCAPABILITIES                       I3C_SCAPABILITIES_REG(I3C1_BASE_PTR)
  #define I3C1_SCAPABILITIES_NS                    I3C_SCAPABILITIES_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SDYNADDR                            I3C_SDYNADDR_REG(I3C1_BASE_PTR)
  #define I3C1_SDYNADDR_NS                         I3C_SDYNADDR_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SMAXLIMITS                          I3C_SMAXLIMITS_REG(I3C1_BASE_PTR)
  #define I3C1_SMAXLIMITS_NS                       I3C_SMAXLIMITS_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SIDPARTNO                           I3C_SIDPARTNO_REG(I3C1_BASE_PTR)
  #define I3C1_SIDPARTNO_NS                        I3C_SIDPARTNO_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SIDEXT                              I3C_SIDEXT_REG(I3C1_BASE_PTR)
  #define I3C1_SIDEXT_NS                           I3C_SIDEXT_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SVENDORID                           I3C_SVENDORID_REG(I3C1_BASE_PTR)
  #define I3C1_SVENDORID_NS                        I3C_SVENDORID_REG(I3C1_BASE_PTR_NS)
  #define I3C1_STCCLOCK                            I3C_STCCLOCK_REG(I3C1_BASE_PTR)
  #define I3C1_STCCLOCK_NS                         I3C_STCCLOCK_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SMSGMAPADDR                         I3C_SMSGMAPADDR_REG(I3C1_BASE_PTR)
  #define I3C1_SMSGMAPADDR_NS                      I3C_SMSGMAPADDR_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MCTRL                               I3C_MCTRL_REG(I3C1_BASE_PTR)
  #define I3C1_MCTRL_NS                            I3C_MCTRL_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MSTATUS                             I3C_MSTATUS_REG(I3C1_BASE_PTR)
  #define I3C1_MSTATUS_NS                          I3C_MSTATUS_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MIBIRULES                           I3C_MIBIRULES_REG(I3C1_BASE_PTR)
  #define I3C1_MIBIRULES_NS                        I3C_MIBIRULES_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MINTSET                             I3C_MINTSET_REG(I3C1_BASE_PTR)
  #define I3C1_MINTSET_NS                          I3C_MINTSET_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MINTCLR                             I3C_MINTCLR_REG(I3C1_BASE_PTR)
  #define I3C1_MINTCLR_NS                          I3C_MINTCLR_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MINTMASKED                          I3C_MINTMASKED_REG(I3C1_BASE_PTR)
  #define I3C1_MINTMASKED_NS                       I3C_MINTMASKED_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MERRWARN                            I3C_MERRWARN_REG(I3C1_BASE_PTR)
  #define I3C1_MERRWARN_NS                         I3C_MERRWARN_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MDMACTRL                            I3C_MDMACTRL_REG(I3C1_BASE_PTR)
  #define I3C1_MDMACTRL_NS                         I3C_MDMACTRL_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MDATACTRL                           I3C_MDATACTRL_REG(I3C1_BASE_PTR)
  #define I3C1_MDATACTRL_NS                        I3C_MDATACTRL_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MWDATAB                             I3C_MWDATAB_REG(I3C1_BASE_PTR)
  #define I3C1_MWDATAB_NS                          I3C_MWDATAB_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MWDATABE                            I3C_MWDATABE_REG(I3C1_BASE_PTR)
  #define I3C1_MWDATABE_NS                         I3C_MWDATABE_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MWDATAH                             I3C_MWDATAH_REG(I3C1_BASE_PTR)
  #define I3C1_MWDATAH_NS                          I3C_MWDATAH_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MWDATAHE                            I3C_MWDATAHE_REG(I3C1_BASE_PTR)
  #define I3C1_MWDATAHE_NS                         I3C_MWDATAHE_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MRDATAB                             I3C_MRDATAB_REG(I3C1_BASE_PTR)
  #define I3C1_MRDATAB_NS                          I3C_MRDATAB_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MRDATAH                             I3C_MRDATAH_REG(I3C1_BASE_PTR)
  #define I3C1_MRDATAH_NS                          I3C_MRDATAH_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MWMSG_SDR_CONTROL                   I3C_MWMSG_SDR_CONTROL_REG(I3C1_BASE_PTR)
  #define I3C1_MWMSG_SDR_CONTROL_NS                I3C_MWMSG_SDR_CONTROL_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MWMSG_SDR_DATA                      I3C_MWMSG_SDR_DATA_REG(I3C1_BASE_PTR)
  #define I3C1_MWMSG_SDR_DATA_NS                   I3C_MWMSG_SDR_DATA_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MRMSG_SDR                           I3C_MRMSG_SDR_REG(I3C1_BASE_PTR)
  #define I3C1_MRMSG_SDR_NS                        I3C_MRMSG_SDR_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MWMSG_DDR_CONTROL                   I3C_MWMSG_DDR_CONTROL_REG(I3C1_BASE_PTR)
  #define I3C1_MWMSG_DDR_CONTROL_NS                I3C_MWMSG_DDR_CONTROL_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MWMSG_DDR_DATA                      I3C_MWMSG_DDR_DATA_REG(I3C1_BASE_PTR)
  #define I3C1_MWMSG_DDR_DATA_NS                   I3C_MWMSG_DDR_DATA_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MRMSG_DDR                           I3C_MRMSG_DDR_REG(I3C1_BASE_PTR)
  #define I3C1_MRMSG_DDR_NS                        I3C_MRMSG_DDR_REG(I3C1_BASE_PTR_NS)
  #define I3C1_MDYNADDR                            I3C_MDYNADDR_REG(I3C1_BASE_PTR)
  #define I3C1_MDYNADDR_NS                         I3C_MDYNADDR_REG(I3C1_BASE_PTR_NS)
  #define I3C1_SID                                 I3C_SID_REG(I3C1_BASE_PTR)
  #define I3C1_SID_NS                              I3C_SID_REG(I3C1_BASE_PTR_NS)
#else
  /* I3C0 */
  #define I3C0_MCONFIG                             I3C_MCONFIG_REG(I3C0_BASE_PTR)
  #define I3C0_SCONFIG                             I3C_SCONFIG_REG(I3C0_BASE_PTR)
  #define I3C0_SSTATUS                             I3C_SSTATUS_REG(I3C0_BASE_PTR)
  #define I3C0_SCTRL                               I3C_SCTRL_REG(I3C0_BASE_PTR)
  #define I3C0_SINTSET                             I3C_SINTSET_REG(I3C0_BASE_PTR)
  #define I3C0_SINTCLR                             I3C_SINTCLR_REG(I3C0_BASE_PTR)
  #define I3C0_SINTMASKED                          I3C_SINTMASKED_REG(I3C0_BASE_PTR)
  #define I3C0_SERRWARN                            I3C_SERRWARN_REG(I3C0_BASE_PTR)
  #define I3C0_SDMACTRL                            I3C_SDMACTRL_REG(I3C0_BASE_PTR)
  #define I3C0_SDATACTRL                           I3C_SDATACTRL_REG(I3C0_BASE_PTR)
  #define I3C0_SWDATAB                             I3C_SWDATAB_REG(I3C0_BASE_PTR)
  #define I3C0_SWDATABE                            I3C_SWDATABE_REG(I3C0_BASE_PTR)
  #define I3C0_SWDATAH                             I3C_SWDATAH_REG(I3C0_BASE_PTR)
  #define I3C0_SWDATAHE                            I3C_SWDATAHE_REG(I3C0_BASE_PTR)
  #define I3C0_SRDATAB                             I3C_SRDATAB_REG(I3C0_BASE_PTR)
  #define I3C0_SRDATAH                             I3C_SRDATAH_REG(I3C0_BASE_PTR)
  #define I3C0_SCAPABILITIES                       I3C_SCAPABILITIES_REG(I3C0_BASE_PTR)
  #define I3C0_SDYNADDR                            I3C_SDYNADDR_REG(I3C0_BASE_PTR)
  #define I3C0_SMAXLIMITS                          I3C_SMAXLIMITS_REG(I3C0_BASE_PTR)
  #define I3C0_SIDPARTNO                           I3C_SIDPARTNO_REG(I3C0_BASE_PTR)
  #define I3C0_SIDEXT                              I3C_SIDEXT_REG(I3C0_BASE_PTR)
  #define I3C0_SVENDORID                           I3C_SVENDORID_REG(I3C0_BASE_PTR)
  #define I3C0_STCCLOCK                            I3C_STCCLOCK_REG(I3C0_BASE_PTR)
  #define I3C0_SMSGMAPADDR                         I3C_SMSGMAPADDR_REG(I3C0_BASE_PTR)
  #define I3C0_MCTRL                               I3C_MCTRL_REG(I3C0_BASE_PTR)
  #define I3C0_MSTATUS                             I3C_MSTATUS_REG(I3C0_BASE_PTR)
  #define I3C0_MIBIRULES                           I3C_MIBIRULES_REG(I3C0_BASE_PTR)
  #define I3C0_MINTSET                             I3C_MINTSET_REG(I3C0_BASE_PTR)
  #define I3C0_MINTCLR                             I3C_MINTCLR_REG(I3C0_BASE_PTR)
  #define I3C0_MINTMASKED                          I3C_MINTMASKED_REG(I3C0_BASE_PTR)
  #define I3C0_MERRWARN                            I3C_MERRWARN_REG(I3C0_BASE_PTR)
  #define I3C0_MDMACTRL                            I3C_MDMACTRL_REG(I3C0_BASE_PTR)
  #define I3C0_MDATACTRL                           I3C_MDATACTRL_REG(I3C0_BASE_PTR)
  #define I3C0_MWDATAB                             I3C_MWDATAB_REG(I3C0_BASE_PTR)
  #define I3C0_MWDATABE                            I3C_MWDATABE_REG(I3C0_BASE_PTR)
  #define I3C0_MWDATAH                             I3C_MWDATAH_REG(I3C0_BASE_PTR)
  #define I3C0_MWDATAHE                            I3C_MWDATAHE_REG(I3C0_BASE_PTR)
  #define I3C0_MRDATAB                             I3C_MRDATAB_REG(I3C0_BASE_PTR)
  #define I3C0_MRDATAH                             I3C_MRDATAH_REG(I3C0_BASE_PTR)
  #define I3C0_MWMSG_SDR_CONTROL                   I3C_MWMSG_SDR_CONTROL_REG(I3C0_BASE_PTR)
  #define I3C0_MWMSG_SDR_DATA                      I3C_MWMSG_SDR_DATA_REG(I3C0_BASE_PTR)
  #define I3C0_MRMSG_SDR                           I3C_MRMSG_SDR_REG(I3C0_BASE_PTR)
  #define I3C0_MWMSG_DDR_CONTROL                   I3C_MWMSG_DDR_CONTROL_REG(I3C0_BASE_PTR)
  #define I3C0_MWMSG_DDR_DATA                      I3C_MWMSG_DDR_DATA_REG(I3C0_BASE_PTR)
  #define I3C0_MRMSG_DDR                           I3C_MRMSG_DDR_REG(I3C0_BASE_PTR)
  #define I3C0_MDYNADDR                            I3C_MDYNADDR_REG(I3C0_BASE_PTR)
  #define I3C0_SID                                 I3C_SID_REG(I3C0_BASE_PTR)
  /* I3C1 */
  #define I3C1_MCONFIG                             I3C_MCONFIG_REG(I3C1_BASE_PTR)
  #define I3C1_SCONFIG                             I3C_SCONFIG_REG(I3C1_BASE_PTR)
  #define I3C1_SSTATUS                             I3C_SSTATUS_REG(I3C1_BASE_PTR)
  #define I3C1_SCTRL                               I3C_SCTRL_REG(I3C1_BASE_PTR)
  #define I3C1_SINTSET                             I3C_SINTSET_REG(I3C1_BASE_PTR)
  #define I3C1_SINTCLR                             I3C_SINTCLR_REG(I3C1_BASE_PTR)
  #define I3C1_SINTMASKED                          I3C_SINTMASKED_REG(I3C1_BASE_PTR)
  #define I3C1_SERRWARN                            I3C_SERRWARN_REG(I3C1_BASE_PTR)
  #define I3C1_SDMACTRL                            I3C_SDMACTRL_REG(I3C1_BASE_PTR)
  #define I3C1_SDATACTRL                           I3C_SDATACTRL_REG(I3C1_BASE_PTR)
  #define I3C1_SWDATAB                             I3C_SWDATAB_REG(I3C1_BASE_PTR)
  #define I3C1_SWDATABE                            I3C_SWDATABE_REG(I3C1_BASE_PTR)
  #define I3C1_SWDATAH                             I3C_SWDATAH_REG(I3C1_BASE_PTR)
  #define I3C1_SWDATAHE                            I3C_SWDATAHE_REG(I3C1_BASE_PTR)
  #define I3C1_SRDATAB                             I3C_SRDATAB_REG(I3C1_BASE_PTR)
  #define I3C1_SRDATAH                             I3C_SRDATAH_REG(I3C1_BASE_PTR)
  #define I3C1_SCAPABILITIES                       I3C_SCAPABILITIES_REG(I3C1_BASE_PTR)
  #define I3C1_SDYNADDR                            I3C_SDYNADDR_REG(I3C1_BASE_PTR)
  #define I3C1_SMAXLIMITS                          I3C_SMAXLIMITS_REG(I3C1_BASE_PTR)
  #define I3C1_SIDPARTNO                           I3C_SIDPARTNO_REG(I3C1_BASE_PTR)
  #define I3C1_SIDEXT                              I3C_SIDEXT_REG(I3C1_BASE_PTR)
  #define I3C1_SVENDORID                           I3C_SVENDORID_REG(I3C1_BASE_PTR)
  #define I3C1_STCCLOCK                            I3C_STCCLOCK_REG(I3C1_BASE_PTR)
  #define I3C1_SMSGMAPADDR                         I3C_SMSGMAPADDR_REG(I3C1_BASE_PTR)
  #define I3C1_MCTRL                               I3C_MCTRL_REG(I3C1_BASE_PTR)
  #define I3C1_MSTATUS                             I3C_MSTATUS_REG(I3C1_BASE_PTR)
  #define I3C1_MIBIRULES                           I3C_MIBIRULES_REG(I3C1_BASE_PTR)
  #define I3C1_MINTSET                             I3C_MINTSET_REG(I3C1_BASE_PTR)
  #define I3C1_MINTCLR                             I3C_MINTCLR_REG(I3C1_BASE_PTR)
  #define I3C1_MINTMASKED                          I3C_MINTMASKED_REG(I3C1_BASE_PTR)
  #define I3C1_MERRWARN                            I3C_MERRWARN_REG(I3C1_BASE_PTR)
  #define I3C1_MDMACTRL                            I3C_MDMACTRL_REG(I3C1_BASE_PTR)
  #define I3C1_MDATACTRL                           I3C_MDATACTRL_REG(I3C1_BASE_PTR)
  #define I3C1_MWDATAB                             I3C_MWDATAB_REG(I3C1_BASE_PTR)
  #define I3C1_MWDATABE                            I3C_MWDATABE_REG(I3C1_BASE_PTR)
  #define I3C1_MWDATAH                             I3C_MWDATAH_REG(I3C1_BASE_PTR)
  #define I3C1_MWDATAHE                            I3C_MWDATAHE_REG(I3C1_BASE_PTR)
  #define I3C1_MRDATAB                             I3C_MRDATAB_REG(I3C1_BASE_PTR)
  #define I3C1_MRDATAH                             I3C_MRDATAH_REG(I3C1_BASE_PTR)
  #define I3C1_MWMSG_SDR_CONTROL                   I3C_MWMSG_SDR_CONTROL_REG(I3C1_BASE_PTR)
  #define I3C1_MWMSG_SDR_DATA                      I3C_MWMSG_SDR_DATA_REG(I3C1_BASE_PTR)
  #define I3C1_MRMSG_SDR                           I3C_MRMSG_SDR_REG(I3C1_BASE_PTR)
  #define I3C1_MWMSG_DDR_CONTROL                   I3C_MWMSG_DDR_CONTROL_REG(I3C1_BASE_PTR)
  #define I3C1_MWMSG_DDR_DATA                      I3C_MWMSG_DDR_DATA_REG(I3C1_BASE_PTR)
  #define I3C1_MRMSG_DDR                           I3C_MRMSG_DDR_REG(I3C1_BASE_PTR)
  #define I3C1_MDYNADDR                            I3C_MDYNADDR_REG(I3C1_BASE_PTR)
  #define I3C1_SID                                 I3C_SID_REG(I3C1_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group I3C_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group I3C_Peripheral */


/* ----------------------------------------------------------------------------
   -- INPUTMUX
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup INPUTMUX_Peripheral INPUTMUX
 * @{
 */

/** INPUTMUX - Peripheral register structure */
typedef struct INPUTMUX_MemMap {
  uint32_t SCT0_IN_SEL[7];                         /**< SCT Peripheral Input multiplexer 0..SCT Peripheral Input multiplexer 6, array offset: 0x0, array step: 0x4 */
  uint8_t RESERVED_0[228];
  uint32_t PINT_SEL[8];                            /**< GPIO Pin Input Multiplexer 0..GPIO Pin Input Multiplexer 7, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_1[32];
  uint32_t DSP_INT_SEL[27];                        /**< Fusion DSP Interrupt Input Multiplexer, array offset: 0x140, array step: 0x4 */
  uint8_t RESERVED_2[84];
  uint32_t DMAC0_ITRIG_SEL[37];                    /**< DMAC0 Input Trigger Select, array offset: 0x200, array step: 0x4 */
  uint8_t RESERVED_3[108];
  uint32_t DMAC0_OTRIG_SEL[4];                     /**< DMAC0 Output Trigger Select, array offset: 0x300, array step: 0x4 */
  uint8_t RESERVED_4[16];
  uint32_t DMAC0_CHMUX_SEL[16];                    /**< DMAC0 Channel mux select 0..DMAC0 Channel mux select 15, array offset: 0x320, array step: 0x4 */
  uint8_t RESERVED_5[160];
  uint32_t DMAC1_ITRIG_SEL[37];                    /**< DMAC1 Input Trigger Select, array offset: 0x400, array step: 0x4 */
  uint8_t RESERVED_6[108];
  uint32_t DMAC1_OTRIG_SEL[4];                     /**< DMAC0 Output Trigger Select, array offset: 0x500, array step: 0x4 */
  uint8_t RESERVED_7[16];
  uint32_t DMAC1_CHMUX_SEL[16];                    /**< DMAC1 Channel mux select 0..DMAC1 Channel mux select 15, array offset: 0x520, array step: 0x4 */
  uint8_t RESERVED_8[160];
  uint32_t CT32BIT_CAP_SEL[5][4];                  /**< CT32BIT Timer Capture Multiplexers, array offset: 0x600, array step: index*0x10, index2*0x4 */
  uint8_t RESERVED_9[176];
  uint32_t FMEASURE_CH_SEL[2];                     /**< Frequency Measurement Input Channel Multiplexers, array offset: 0x700, array step: 0x4 */
  uint8_t RESERVED_10[24];
  uint32_t SMART_DMA_TRIG_CH_SEL[8];               /**< SMART_DMA trigger channel select, array offset: 0x720, array step: 0x4 */
  uint32_t DMAC0_REQ_ENA0;                         /**< DMAC0 request enable 0, offset: 0x740 */
  uint32_t DMAC0_REQ_ENA1;                         /**< DMAC0 request enable 1, offset: 0x744 */
  uint32_t DMAC0_REQ_ENA0_SET;                     /**< DMAC0 request enable set 0, offset: 0x748 */
  uint32_t DMAC0_REQ_ENA1_SET;                     /**< DMAC0 request enable set 1, offset: 0x74C */
  uint32_t DMAC0_REQ_ENA0_CLR;                     /**< DMAC0 request enable clear 0, offset: 0x750 */
  uint32_t DMAC0_REQ_ENA1_CLR;                     /**< DMAC0 request enable 1 clear, offset: 0x754 */
  uint8_t RESERVED_11[8];
  uint32_t DMAC1_REQ_ENA0;                         /**< DMAC1 request enable 0, offset: 0x760 */
  uint32_t DMAC1_REQ_ENA1;                         /**< DMAC1 request enable 1, offset: 0x764 */
  uint32_t DMAC1_REQ_ENA0_SET;                     /**< DMAC1 request enable set 0, offset: 0x768 */
  uint32_t DMAC1_REQ_ENA1_SET;                     /**< DMAC1 request enable set 1, offset: 0x76C */
  uint32_t DMAC1_REQ_ENA0_CLR;                     /**< DMAC1 request enable clear 0, offset: 0x770 */
  uint32_t DMAC1_REQ_ENA1_CLR;                     /**< DMAC1 request enable 1 clear, offset: 0x774 */
  uint8_t RESERVED_12[8];
  uint32_t DMAC0_ITRIG_ENA0;                       /**< DMAC0 Input Trigger Enable 0, offset: 0x780 */
  uint8_t RESERVED_13[4];
  uint32_t DMAC0_ITRIG_ENA0_SET;                   /**< DMAC0 Input Trigger Enable 0 Set, offset: 0x788 */
  uint8_t RESERVED_14[4];
  uint32_t DMAC0_ITRIG_ENA0_CLR;                   /**< DMAC0 Input Trigger Enable 0 Clear, offset: 0x790 */
  uint8_t RESERVED_15[12];
  uint32_t DMAC1_ITRIG_ENA0;                       /**< DMAC1 Input Trigger Enable 0, offset: 0x7A0 */
  uint8_t RESERVED_16[4];
  uint32_t DMAC1_ITRIG_ENA0_SET;                   /**< DMAC1 Input Trigger Enable 0 set, offset: 0x7A8 */
  uint8_t RESERVED_17[4];
  uint32_t DMAC1_ITRIG_ENA0_CLR;                   /**< DMAC1 Input Trigger Enable 0 clear, offset: 0x7B0 */
} volatile *INPUTMUX_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- INPUTMUX - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup INPUTMUX_Register_Accessor_Macros INPUTMUX - Register accessor macros
 * @{
 */


/* INPUTMUX - Register accessors */
#define INPUTMUX_SCT0_IN_SEL_REG(base,index)     ((base)->SCT0_IN_SEL[index])
#define INPUTMUX_PINT_SEL_REG(base,index)        ((base)->PINT_SEL[index])
#define INPUTMUX_DSP_INT_SEL_REG(base,index)     ((base)->DSP_INT_SEL[index])
#define INPUTMUX_DMAC0_ITRIG_SEL_REG(base,index) ((base)->DMAC0_ITRIG_SEL[index])
#define INPUTMUX_DMAC0_OTRIG_SEL_REG(base,index) ((base)->DMAC0_OTRIG_SEL[index])
#define INPUTMUX_DMAC0_CHMUX_SEL_REG(base,index) ((base)->DMAC0_CHMUX_SEL[index])
#define INPUTMUX_DMAC1_ITRIG_SEL_REG(base,index) ((base)->DMAC1_ITRIG_SEL[index])
#define INPUTMUX_DMAC1_OTRIG_SEL_REG(base,index) ((base)->DMAC1_OTRIG_SEL[index])
#define INPUTMUX_DMAC1_CHMUX_SEL_REG(base,index) ((base)->DMAC1_CHMUX_SEL[index])
#define INPUTMUX_CT32BIT_CAP_SEL_REG(base,index,index2) ((base)->CT32BIT_CAP_SEL[index][index2])
#define INPUTMUX_FMEASURE_CH_SEL_REG(base,index) ((base)->FMEASURE_CH_SEL[index])
#define INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(base,index) ((base)->SMART_DMA_TRIG_CH_SEL[index])
#define INPUTMUX_DMAC0_REQ_ENA0_REG(base)        ((base)->DMAC0_REQ_ENA0)
#define INPUTMUX_DMAC0_REQ_ENA1_REG(base)        ((base)->DMAC0_REQ_ENA1)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_REG(base)    ((base)->DMAC0_REQ_ENA0_SET)
#define INPUTMUX_DMAC0_REQ_ENA1_SET_REG(base)    ((base)->DMAC0_REQ_ENA1_SET)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_REG(base)    ((base)->DMAC0_REQ_ENA0_CLR)
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_REG(base)    ((base)->DMAC0_REQ_ENA1_CLR)
#define INPUTMUX_DMAC1_REQ_ENA0_REG(base)        ((base)->DMAC1_REQ_ENA0)
#define INPUTMUX_DMAC1_REQ_ENA1_REG(base)        ((base)->DMAC1_REQ_ENA1)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_REG(base)    ((base)->DMAC1_REQ_ENA0_SET)
#define INPUTMUX_DMAC1_REQ_ENA1_SET_REG(base)    ((base)->DMAC1_REQ_ENA1_SET)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_REG(base)    ((base)->DMAC1_REQ_ENA0_CLR)
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_REG(base)    ((base)->DMAC1_REQ_ENA1_CLR)
#define INPUTMUX_DMAC0_ITRIG_ENA0_REG(base)      ((base)->DMAC0_ITRIG_ENA0)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_REG(base)  ((base)->DMAC0_ITRIG_ENA0_SET)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_REG(base)  ((base)->DMAC0_ITRIG_ENA0_CLR)
#define INPUTMUX_DMAC1_ITRIG_ENA0_REG(base)      ((base)->DMAC1_ITRIG_ENA0)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_REG(base)  ((base)->DMAC1_ITRIG_ENA0_SET)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_REG(base)  ((base)->DMAC1_ITRIG_ENA0_CLR)

/*!
 * @}
 */ /* end of group INPUTMUX_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- INPUTMUX Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup INPUTMUX_Register_Masks INPUTMUX Register Masks
 * @{
 */

/*! @name SCT0_IN_SEL - SCT Peripheral Input multiplexer 0..SCT Peripheral Input multiplexer 6 */
/*! @{ */
#define INPUTMUX_SCT0_IN_SEL_SCT_IN_SEL_MASK     (0x1FU)
#define INPUTMUX_SCT0_IN_SEL_SCT_IN_SEL_SHIFT    (0U)
/*! SCT_IN_SEL - SCT0 Input Selection.
 *  0b00000..SCT0_PIN_INP0
 *  0b00001..SCT0_PIN_INP1
 *  0b00010..SCT0_PIN_INP2
 *  0b00011..SCT0_PIN_INP3
 *  0b00100..SCT0_PIN_INP4
 *  0b00101..SCT0_PIN_INP5
 *  0b00110..SCT0_PIN_INP6
 *  0b00111..SCT0_PIN_INP7
 *  0b01000..CT32BIT0_MAT0
 *  0b01001..CT32BIT1_MAT0
 *  0b01010..CT32BIT2_MAT0
 *  0b01011..CT32BIT3_MAT0
 *  0b01100..CT32BIT4_MAT0
 *  0b01101..ADCIRQ
 *  0b01110..GPIOINT_BMATCH
 *  0b01111..USB0_FRAME_TOGGLE
 *  0b10000..CMP0_OUT
 *  0b10001..SHARED I2S0_SCLK
 *  0b10010..SHARED I2S1_SCLK
 *  0b10011..SHARED I2S0_WS
 *  0b10100..SHARED I2S1_WS
 *  0b10101..MCLK
 *  0b10110..ARM_TXEV
 *  0b10111..DEBUG_HALTED
 *  0b11000..Reserved
 *  0b11001..Reserved
 *  0b11010..Reserved
 *  0b11011..Reserved
 *  0b11100..Reserved
 *  0b11101..Reserved
 *  0b11110..Reserved
 *  0b11111..Reserved
 */
#define INPUTMUX_SCT0_IN_SEL_SCT_IN_SEL(x)       (((uint32_t)(((uint32_t)(x)) << INPUTMUX_SCT0_IN_SEL_SCT_IN_SEL_SHIFT)) & INPUTMUX_SCT0_IN_SEL_SCT_IN_SEL_MASK)
/*! @} */

/* The count of INPUTMUX_SCT0_IN_SEL */
#define INPUTMUX_SCT0_IN_SEL_COUNT               (7U)

/*! @name PINT_SEL - GPIO Pin Input Multiplexer 0..GPIO Pin Input Multiplexer 7 */
/*! @{ */
#define INPUTMUX_PINT_SEL_PINT_SEL_MASK          (0xFFU)
#define INPUTMUX_PINT_SEL_PINT_SEL_SHIFT         (0U)
/*! PINT_SEL - Interrupt select
 */
#define INPUTMUX_PINT_SEL_PINT_SEL(x)            (((uint32_t)(((uint32_t)(x)) << INPUTMUX_PINT_SEL_PINT_SEL_SHIFT)) & INPUTMUX_PINT_SEL_PINT_SEL_MASK)
/*! @} */

/* The count of INPUTMUX_PINT_SEL */
#define INPUTMUX_PINT_SEL_COUNT                  (8U)

/*! @name DSP_INT_SEL - Fusion DSP Interrupt Input Multiplexer */
/*! @{ */
#define INPUTMUX_DSP_INT_SEL_DSP_INT_SEL_MASK    (0x3FU)
#define INPUTMUX_DSP_INT_SEL_DSP_INT_SEL_SHIFT   (0U)
/*! DSP_INT_SEL
 *  0b000000..FLEXCOMM0_IRQ
 *  0b000001..FLEXCOMM1_IRQ
 *  0b000010..FLEXCOMM2_IRQ
 *  0b000011..FLEXCOMM3_IRQ
 *  0b000100..FLEXCOMM4_IRQ
 *  0b000101..FLEXCOMM5_IRQ
 *  0b000110..FLEXCOMM6_IRQ
 *  0b000111..FLEXCOMM7_IRQ
 *  0b001000..FLEXCOMM14_IRQ
 *  0b001001..FLEXCOMM16_IRQ
 *  0b001010..GPIO_INT0_IRQ0
 *  0b001011..GPIO_INT0_IRQ1
 *  0b001100..GPIO_INT0_IRQ2
 *  0b001101..GPIO_INT0_IRQ3
 *  0b001110..GPIO_INT0_IRQ4
 *  0b001111..GPIO_INT0_IRQ5
 *  0b010000..GPIO_INT0_IRQ6
 *  0b010001..GPIO_INT0_IRQ7
 *  0b010010..NSHSGPIO_INT0_IRQ0
 *  0b010011..NSHSGPIO_INT1_IRQ1
 *  0b010100..WDT1
 *  0b010101..DMAC0_IRQ
 *  0b010110..DMAC1_IRQ
 *  0b010111..MU_B_IRQ
 *  0b011000..UTICK0_IRQ
 *  0b011001..MRT0_IRQ
 *  0b011010..OS_EVENT_TIMER or OS_EVENT_WAKEUP
 *  0b011011..CTIMER0
 *  0b011100..CTIMER1
 *  0b011101..CTIMER2
 *  0b011110..CTIMER3
 *  0b011111..CTIMER4
 *  0b100000..RTC_LITE0_ALARM or RTC_LITE0_WAKEUP
 *  0b100001..I3C0
 *  0b100010..I3C1
 *  0b100011..DMIC0
 *  0b100100..HWVAD
 *  0b100101..LCDIF_IRQ
 *  0b100110..GPU_IRQ
 *  0b100111..SMARTDMA_IRQ
 *  0b101000..FLEXIO_IRQ
 */
#define INPUTMUX_DSP_INT_SEL_DSP_INT_SEL(x)      (((uint32_t)(((uint32_t)(x)) << INPUTMUX_DSP_INT_SEL_DSP_INT_SEL_SHIFT)) & INPUTMUX_DSP_INT_SEL_DSP_INT_SEL_MASK)
/*! @} */

/* The count of INPUTMUX_DSP_INT_SEL */
#define INPUTMUX_DSP_INT_SEL_COUNT               (27U)

/*! @name DMAC0_ITRIG_SEL - DMAC0 Input Trigger Select */
/*! @{ */
#define INPUTMUX_DMAC0_ITRIG_SEL_DMAC0_ITRIG_SEL_MASK (0x1FU)
#define INPUTMUX_DMAC0_ITRIG_SEL_DMAC0_ITRIG_SEL_SHIFT (0U)
/*! DMAC0_ITRIG_SEL - DMA Input Trigger Selection.
 *  0b00000..GPIO_INT0
 *  0b00001..GPIO_INT1
 *  0b00010..GPIO_INT2
 *  0b00011..GPIO_INT3
 *  0b00100..T0_DMAREQ_M0
 *  0b00101..T0_DMAREQ_M1
 *  0b00110..T1_DMAREQ_M0
 *  0b00111..T1_DMAREQ_M1
 *  0b01000..T2_DMAREQ_M0
 *  0b01001..T2_DMAREQ_M1
 *  0b01010..T3_DMAREQ_M0
 *  0b01011..T3_DMAREQ_M1
 *  0b01100..T4_DMAREQ_M0
 *  0b01101..T4_DMAREQ_M1
 *  0b01110..DMA0_TRIGOUT_A
 *  0b01111..DMA0_TRIGOUT_B
 *  0b10000..DMA0_TRIGOUT_C
 *  0b10001..DMA0_TRIGOUT_D
 *  0b10010..SCT_DMAC0_REQ0
 *  0b10011..SCT_DMAC1_REQ1
 *  0b10100..HASHCRYPT_OUT_DMA
 *  0b10101..ACMP_DMA
 *  0b10110..FlexSPI0_RX_DMA
 *  0b10111..FlexSPI0_TX_DMA
 *  0b11000..ADC_DMA
 *  0b11001..FlexSPI1_RX_DMA
 *  0b11010..FlexSPI1_TX_DMA
 */
#define INPUTMUX_DMAC0_ITRIG_SEL_DMAC0_ITRIG_SEL(x) (((uint32_t)(((uint32_t)(x)) << INPUTMUX_DMAC0_ITRIG_SEL_DMAC0_ITRIG_SEL_SHIFT)) & INPUTMUX_DMAC0_ITRIG_SEL_DMAC0_ITRIG_SEL_MASK)
/*! @} */

/* The count of INPUTMUX_DMAC0_ITRIG_SEL */
#define INPUTMUX_DMAC0_ITRIG_SEL_COUNT           (37U)

/*! @name DMAC0_OTRIG_SEL - DMAC0 Output Trigger Select */
/*! @{ */
#define INPUTMUX_DMAC0_OTRIG_SEL_DMAC0_OTRIG_SEL_MASK (0x3FU)
#define INPUTMUX_DMAC0_OTRIG_SEL_DMAC0_OTRIG_SEL_SHIFT (0U)
/*! DMAC0_OTRIG_SEL
 *  0b000000..DMAC0_OTRIG_CH0
 *  0b000001..DMAC0_OTRIG_CH1
 *  0b000010..DMAC0_OTRIG_CH2
 *  0b000011..DMAC0_OTRIG_CH3
 *  0b000100..DMAC0_OTRIG_CH4
 *  0b000101..DMAC0_OTRIG_CH5
 *  0b000110..DMAC0_OTRIG_CH6
 *  0b000111..DMAC0_OTRIG_CH7
 *  0b001000..DMAC0_OTRIG_CH8
 *  0b001001..DMAC0_OTRIG_CH9
 *  0b001010..DMAC0_OTRIG_CH10
 *  0b001011..DMAC0_OTRIG_CH11
 *  0b001100..DMAC0_OTRIG_CH12
 *  0b001101..DMAC0_OTRIG_CH13
 *  0b001110..DMAC0_OTRIG_CH14
 *  0b001111..DMAC0_OTRIG_CH15
 *  0b010000..DMAC0_OTRIG_CH16
 *  0b010001..DMAC0_OTRIG_CH17
 *  0b010010..DMAC0_OTRIG_CH18
 *  0b010011..DMAC0_OTRIG_CH19
 *  0b010100..DMAC0_OTRIG_CH20
 *  0b010101..DMAC0_OTRIG_CH21
 *  0b010110..DMAC0_OTRIG_CH22
 *  0b010111..DMAC0_OTRIG_CH23
 *  0b011000..DMAC0_OTRIG_CH24
 *  0b011001..DMAC0_OTRIG_CH25
 *  0b011010..DMAC0_OTRIG_CH26
 *  0b011011..DMAC0_OTRIG_CH27
 *  0b011100..DMAC0_OTRIG_CH28
 *  0b011101..DMAC0_OTRIG_CH29
 *  0b011110..DMAC0_OTRIG_CH30
 *  0b011111..DMAC0_OTRIG_CH31
 *  0b100000..DMAC0_OTRIG_CH32
 *  0b100001..DMAC0_OTRIG_CH33
 *  0b100010..DMAC0_OTRIG_CH34
 *  0b100011..DMAC0_OTRIG_CH35
 *  0b100100..DMAC0_OTRIG_CH36
 */
#define INPUTMUX_DMAC0_OTRIG_SEL_DMAC0_OTRIG_SEL(x) (((uint32_t)(((uint32_t)(x)) << INPUTMUX_DMAC0_OTRIG_SEL_DMAC0_OTRIG_SEL_SHIFT)) & INPUTMUX_DMAC0_OTRIG_SEL_DMAC0_OTRIG_SEL_MASK)
/*! @} */

/* The count of INPUTMUX_DMAC0_OTRIG_SEL */
#define INPUTMUX_DMAC0_OTRIG_SEL_COUNT           (4U)

/*! @name DMAC0_CHMUX_SEL - DMAC0 Channel mux select 0..DMAC0 Channel mux select 15 */
/*! @{ */
#define INPUTMUX_DMAC0_CHMUX_SEL_DMAC0_CHMUX_SEL_MASK (0x1U)
#define INPUTMUX_DMAC0_CHMUX_SEL_DMAC0_CHMUX_SEL_SHIFT (0U)
/*! @} */

/* The count of INPUTMUX_DMAC0_CHMUX_SEL */
#define INPUTMUX_DMAC0_CHMUX_SEL_COUNT           (16U)

/*! @name DMAC1_ITRIG_SEL - DMAC1 Input Trigger Select */
/*! @{ */
#define INPUTMUX_DMAC1_ITRIG_SEL_DMAC1_ITRIG_SEL_MASK (0x1FU)
#define INPUTMUX_DMAC1_ITRIG_SEL_DMAC1_ITRIG_SEL_SHIFT (0U)
/*! DMAC1_ITRIG_SEL - DMA Input Trigger Selection.
 *  0b00000..GPIO_INT0
 *  0b00001..GPIO_INT1
 *  0b00010..GPIO_INT2
 *  0b00011..GPIO_INT3
 *  0b00100..T0_DMAREQ_M0
 *  0b00101..T0_DMAREQ_M1
 *  0b00110..T1_DMAREQ_M0
 *  0b00111..T1_DMAREQ_M1
 *  0b01000..T2_DMAREQ_M0
 *  0b01001..T2_DMAREQ_M1
 *  0b01010..T3_DMAREQ_M0
 *  0b01011..T3_DMAREQ_M1
 *  0b01100..T4_DMAREQ_M0
 *  0b01101..T4_DMAREQ_M1
 *  0b01110..DMA0_TRIGOUT_A
 *  0b01111..DMA0_TRIGOUT_B
 *  0b10000..DMA0_TRIGOUT_C
 *  0b10001..DMA0_TRIGOUT_D
 *  0b10010..SCT_DMAC0_REQ0
 *  0b10011..SCT_DMAC1_REQ1
 *  0b10100..HASHCRYPT_OUT_DMA
 *  0b10101..ACMP_DMA
 *  0b10110..FlexSPI0_RX_DMA
 *  0b10111..FlexSPI0_TX_DMA
 *  0b11000..ADC_DMA
 *  0b11001..FlexSPI1_RX_DMA
 *  0b11010..FlexSPI1_TX_DMA
 */
#define INPUTMUX_DMAC1_ITRIG_SEL_DMAC1_ITRIG_SEL(x) (((uint32_t)(((uint32_t)(x)) << INPUTMUX_DMAC1_ITRIG_SEL_DMAC1_ITRIG_SEL_SHIFT)) & INPUTMUX_DMAC1_ITRIG_SEL_DMAC1_ITRIG_SEL_MASK)
/*! @} */

/* The count of INPUTMUX_DMAC1_ITRIG_SEL */
#define INPUTMUX_DMAC1_ITRIG_SEL_COUNT           (37U)

/*! @name DMAC1_OTRIG_SEL - DMAC0 Output Trigger Select */
/*! @{ */
#define INPUTMUX_DMAC1_OTRIG_SEL_DMAC1_OTRIG_SEL_MASK (0x3FU)
#define INPUTMUX_DMAC1_OTRIG_SEL_DMAC1_OTRIG_SEL_SHIFT (0U)
/*! DMAC1_OTRIG_SEL - DMA Output Trigger Selection.
 *  0b000000..DMAC1_OTRIG_CH0
 *  0b000001..DMAC1_OTRIG_CH1
 *  0b000010..DMAC1_OTRIG_CH2
 *  0b000011..DMAC1_OTRIG_CH3
 *  0b000100..DMAC1_OTRIG_CH4
 *  0b000101..DMAC1_OTRIG_CH5
 *  0b000110..DMAC1_OTRIG_CH6
 *  0b000111..DMAC1_OTRIG_CH7
 *  0b001000..DMAC1_OTRIG_CH8
 *  0b001001..DMAC1_OTRIG_CH9
 *  0b001010..DMAC1_OTRIG_CH10
 *  0b001011..DMAC1_OTRIG_CH11
 *  0b001100..DMAC1_OTRIG_CH12
 *  0b001101..DMAC1_OTRIG_CH13
 *  0b001110..DMAC1_OTRIG_CH14
 *  0b001111..DMAC1_OTRIG_CH15
 *  0b010000..DMAC1_OTRIG_CH16
 *  0b010001..DMAC1_OTRIG_CH17
 *  0b010010..DMAC1_OTRIG_CH18
 *  0b010011..DMAC1_OTRIG_CH19
 *  0b010100..DMAC1_OTRIG_CH20
 *  0b010101..DMAC1_OTRIG_CH21
 *  0b010110..DMAC1_OTRIG_CH22
 *  0b010111..DMAC1_OTRIG_CH23
 *  0b011000..DMAC1_OTRIG_CH24
 *  0b011001..DMAC1_OTRIG_CH25
 *  0b011010..DMAC1_OTRIG_CH26
 *  0b011011..DMAC1_OTRIG_CH27
 *  0b011100..DMAC1_OTRIG_CH28
 *  0b011101..DMAC1_OTRIG_CH29
 *  0b011110..DMAC1_OTRIG_CH30
 *  0b011111..DMAC1_OTRIG_CH31
 *  0b100000..DMAC1_OTRIG_CH32
 *  0b100001..DMAC1_OTRIG_CH33
 *  0b100010..DMAC1_OTRIG_CH34
 *  0b100011..DMAC1_OTRIG_CH35
 *  0b100100..DMAC1_OTRIG_CH36
 */
#define INPUTMUX_DMAC1_OTRIG_SEL_DMAC1_OTRIG_SEL(x) (((uint32_t)(((uint32_t)(x)) << INPUTMUX_DMAC1_OTRIG_SEL_DMAC1_OTRIG_SEL_SHIFT)) & INPUTMUX_DMAC1_OTRIG_SEL_DMAC1_OTRIG_SEL_MASK)
/*! @} */

/* The count of INPUTMUX_DMAC1_OTRIG_SEL */
#define INPUTMUX_DMAC1_OTRIG_SEL_COUNT           (4U)

/*! @name DMAC1_CHMUX_SEL - DMAC1 Channel mux select 0..DMAC1 Channel mux select 15 */
/*! @{ */
#define INPUTMUX_DMAC1_CHMUX_SEL_DMAC1_CHMUX_SEL_MASK (0x1U)
#define INPUTMUX_DMAC1_CHMUX_SEL_DMAC1_CHMUX_SEL_SHIFT (0U)
/*! @} */

/* The count of INPUTMUX_DMAC1_CHMUX_SEL */
#define INPUTMUX_DMAC1_CHMUX_SEL_COUNT           (16U)

/*! @name CT32BITY_CAPX_SEL_CT32BIT_CAP_SEL - CT32BIT Timer Capture Multiplexers */
/*! @{ */
#define INPUTMUX_CT32BITY_CAPX_SEL_CT32BIT_CAP_SEL_CAPn_SEL_MASK (0x1FU)
#define INPUTMUX_CT32BITY_CAPX_SEL_CT32BIT_CAP_SEL_CAPn_SEL_SHIFT (0U)
/*! CAPn_SEL - Counter Timer n, Capture Input m
 *  0b00000..CT_INP0 (function must be selected in IOPCTL)
 *  0b00001..CT_INP1 (function must be selected in IOPCTL)
 *  0b00010..CT_INP2 (function must be selected in IOPCTL)
 *  0b00011..CT_INP3 (function must be selected in IOPCTL)
 *  0b00100..CT_INP4 (function must be selected in IOPCTL)
 *  0b00101..CT_INP5 (function must be selected in IOPCTL)
 *  0b00110..CT_INP6 (function must be selected in IOPCTL)
 *  0b00111..CT_INP7 (function must be selected in IOPCTL)
 *  0b01000..CT_INP8 (function must be selected in IOPCTL)
 *  0b01001..CT_INP9 (function must be selected in IOPCTL)
 *  0b01010..CT_INP10 (function must be selected in IOPCTL)
 *  0b01011..CT_INP11 (function must be selected in IOPCTL)
 *  0b01100..CT_INP12 (function must be selected in IOPCTL)
 *  0b01101..CT_INP13 (function must be selected in IOPCTL)
 *  0b01110..CT_INP14 (function must be selected in IOPCTL)
 *  0b01111..CT_INP15 (function must be selected in IOPCTL)
 *  0b10000..SHARED I2S0_WS
 *  0b10001..SHARED I2S1_WS
 *  0b10010..USB1_FRAME_TOGGLE (see USB Controller Chapter)
 */
#define INPUTMUX_CT32BITY_CAPX_SEL_CT32BIT_CAP_SEL_CAPn_SEL(x) (((uint32_t)(((uint32_t)(x)) << INPUTMUX_CT32BITY_CAPX_SEL_CT32BIT_CAP_SEL_CAPn_SEL_SHIFT)) & INPUTMUX_CT32BITY_CAPX_SEL_CT32BIT_CAP_SEL_CAPn_SEL_MASK)
/*! @} */

/* The count of INPUTMUX_CT32BITY_CAPX_SEL_CT32BIT_CAP_SEL */
#define INPUTMUX_CT32BITY_CAPX_SEL_CT32BIT_CAP_SEL_COUNT (5U)

/* The count of INPUTMUX_CT32BITY_CAPX_SEL_CT32BIT_CAP_SEL */
#define INPUTMUX_CT32BITY_CAPX_SEL_CT32BIT_CAP_SEL_COUNT2 (4U)

/*! @name FMEASURE_CH_SEL - Frequency Measurement Input Channel Multiplexers */
/*! @{ */
#define INPUTMUX_FMEASURE_CH_SEL_FMEASURE_SEL_MASK (0x1FU)
#define INPUTMUX_FMEASURE_CH_SEL_FMEASURE_SEL_SHIFT (0U)
/*! FMEASURE_SEL - Frequency Measure Channel Selection
 *  0b00000..OSC_CLK
 *  0b00001..FRO_12M
 *  0b00010..FRO_OSC_192M
 *  0b00011..Low Power Oscillator Clock (LPOSC)
 *  0b00100..RTC 32 kHz OSC
 *  0b00101..Main SYSCLK
 *  0b00110..FREQME_GPIO_CLK
 *  0b00111..Reserved
 *  0b01000..Reserved
 *  0b01001..Reserved
 *  0b01010..Reserved
 *  0b01011..Clock Out
 *  0b01100..Reserved
 *  0b01101..Reserved
 *  0b01110..Reserved
 *  0b01111..Reserved
 *  0b10000..Reserved
 *  0b10001..Reserved
 */
#define INPUTMUX_FMEASURE_CH_SEL_FMEASURE_SEL(x) (((uint32_t)(((uint32_t)(x)) << INPUTMUX_FMEASURE_CH_SEL_FMEASURE_SEL_SHIFT)) & INPUTMUX_FMEASURE_CH_SEL_FMEASURE_SEL_MASK)
/*! @} */

/* The count of INPUTMUX_FMEASURE_CH_SEL */
#define INPUTMUX_FMEASURE_CH_SEL_COUNT           (2U)

/*! @name SMART_DMA_TRIG_CHN_SEL_SMART_DMA_TRIG_CH_SEL - SMART_DMA trigger channel select */
/*! @{ */
#define INPUTMUX_SMART_DMA_TRIG_CHN_SEL_SMART_DMA_TRIG_CH_SEL_SMART_DMA_IN_SEL_MASK (0x7FU)
#define INPUTMUX_SMART_DMA_TRIG_CHN_SEL_SMART_DMA_TRIG_CH_SEL_SMART_DMA_IN_SEL_SHIFT (0U)
/*! SMART_DMA_IN_SEL - SMART_DMA Input(n) Selection
 */
#define INPUTMUX_SMART_DMA_TRIG_CHN_SEL_SMART_DMA_TRIG_CH_SEL_SMART_DMA_IN_SEL(x) (((uint32_t)(((uint32_t)(x)) << INPUTMUX_SMART_DMA_TRIG_CHN_SEL_SMART_DMA_TRIG_CH_SEL_SMART_DMA_IN_SEL_SHIFT)) & INPUTMUX_SMART_DMA_TRIG_CHN_SEL_SMART_DMA_TRIG_CH_SEL_SMART_DMA_IN_SEL_MASK)
/*! @} */

/* The count of INPUTMUX_SMART_DMA_TRIG_CHN_SEL_SMART_DMA_TRIG_CH_SEL */
#define INPUTMUX_SMART_DMA_TRIG_CHN_SEL_SMART_DMA_TRIG_CH_SEL_COUNT (8U)

/*! @name DMAC0_REQ_ENA0 - DMAC0 request enable 0 */
/*! @{ */
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM0_RX_MASK (0x1U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM0_RX_SHIFT (0U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM0_TX_MASK (0x2U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM0_TX_SHIFT (1U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM1_RX_MASK (0x4U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM1_RX_SHIFT (2U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM1_TX_MASK (0x8U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM1_TX_SHIFT (3U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM2_RX_MASK (0x10U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM2_RX_SHIFT (4U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM2_TX_MASK (0x20U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM2_TX_SHIFT (5U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM3_RX_MASK (0x40U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM3_RX_SHIFT (6U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM3_TX_MASK (0x80U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM3_TX_SHIFT (7U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM4_RX_MASK (0x100U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM4_RX_SHIFT (8U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM4_TX_MASK (0x200U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM4_TX_SHIFT (9U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM5_RX_MASK (0x400U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM5_RX_SHIFT (10U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM5_TX_MASK (0x800U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM5_TX_SHIFT (11U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM6_RX_MASK (0x1000U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM6_RX_SHIFT (12U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM6_TX_MASK (0x2000U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM6_TX_SHIFT (13U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM7_RX_MASK (0x4000U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM7_RX_SHIFT (14U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM7_TX_MASK (0x8000U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM7_TX_SHIFT (15U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH0_FLEXCOMM8_RX_DMA_MASK (0x10000U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH0_FLEXCOMM8_RX_DMA_SHIFT (16U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH1_FLEXCOMM8_TX_DMA_MASK (0x20000U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH1_FLEXCOMM8_TX_DMA_SHIFT (17U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH2_FLEXCOMM9_RX_DMA_MASK (0x40000U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH2_FLEXCOMM9_RX_DMA_SHIFT (18U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH3_FLEXCOMM9_TX_DMA_MASK (0x80000U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH3_FLEXCOMM9_TX_DMA_SHIFT (19U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH4_FLEXCOMM10_RX_DMA_MASK (0x100000U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH4_FLEXCOMM10_RX_DMA_SHIFT (20U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH5_FLEXCOMM10_TX_DMA_MASK (0x200000U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH5_FLEXCOMM10_TX_DMA_SHIFT (21U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH6_FLEXCOMM13_RX_DMA_MASK (0x400000U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH6_FLEXCOMM13_RX_DMA_SHIFT (22U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH7_FLEXCOMM13_TX_DMA_MASK (0x800000U)
#define INPUTMUX_DMAC0_REQ_ENA0_DMIC0_CH7_FLEXCOMM13_TX_DMA_SHIFT (23U)
#define INPUTMUX_DMAC0_REQ_ENA0_I3C0_RX_MASK     (0x1000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_I3C0_RX_SHIFT    (24U)
#define INPUTMUX_DMAC0_REQ_ENA0_I3C0_TX_MASK     (0x2000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_I3C0_TX_SHIFT    (25U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM14_RX_MASK (0x4000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM14_RX_SHIFT (26U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM14_TX_MASK (0x8000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM14_TX_SHIFT (27U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM16_RX_FLEXIO_SHFT4_MASK (0x10000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM16_RX_FLEXIO_SHFT4_SHIFT (28U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM16_TX_FLEXIO_SHFT5_MASK (0x20000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_FLEXCOMM16_TX_FLEXIO_SHFT5_SHIFT (29U)
#define INPUTMUX_DMAC0_REQ_ENA0_I3C1_RX_FLEXIO_SHFT6_MASK (0x40000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_I3C1_RX_FLEXIO_SHFT6_SHIFT (30U)
#define INPUTMUX_DMAC0_REQ_ENA0_I3C1_TX_FLEXIO_SHFT7_MASK (0x80000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_I3C1_TX_FLEXIO_SHFT7_SHIFT (31U)
/*! @} */

/*! @name DMAC0_REQ_ENA1 - DMAC0 request enable 1 */
/*! @{ */
#define INPUTMUX_DMAC0_REQ_ENA1_FLEXIO_SHFT0_FLEXCOMM11_RX_MASK (0x1U)
#define INPUTMUX_DMAC0_REQ_ENA1_FLEXIO_SHFT0_FLEXCOMM11_RX_SHIFT (0U)
#define INPUTMUX_DMAC0_REQ_ENA1_FLEXIO_SHFT1_FLEXCOMM11_TX_MASK (0x2U)
#define INPUTMUX_DMAC0_REQ_ENA1_FLEXIO_SHFT1_FLEXCOMM11_TX_SHIFT (1U)
#define INPUTMUX_DMAC0_REQ_ENA1_FLEXIO_SHFT2_FLEXCOMM12_RX_MASK (0x4U)
#define INPUTMUX_DMAC0_REQ_ENA1_FLEXIO_SHFT2_FLEXCOMM12_RX_SHIFT (2U)
#define INPUTMUX_DMAC0_REQ_ENA1_FLEXIO_SHFT3_FLEXCOMM12_TX_MASK (0x8U)
#define INPUTMUX_DMAC0_REQ_ENA1_FLEXIO_SHFT3_FLEXCOMM12_TX_SHIFT (3U)
#define INPUTMUX_DMAC0_REQ_ENA1_HASHCRYPT_IN_MASK (0x10U)
#define INPUTMUX_DMAC0_REQ_ENA1_HASHCRYPT_IN_SHIFT (4U)
/*! @} */

/*! @name DMAC0_REQ_ENA0_SET - DMAC0 request enable set 0 */
/*! @{ */
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM0_RX_MASK (0x1U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM0_RX_SHIFT (0U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM0_TX_MASK (0x2U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM0_TX_SHIFT (1U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM1_RX_MASK (0x4U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM1_RX_SHIFT (2U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM1_TX_MASK (0x8U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM1_TX_SHIFT (3U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM2_RX_MASK (0x10U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM2_RX_SHIFT (4U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM2_TX_MASK (0x20U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM2_TX_SHIFT (5U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM3_RX_MASK (0x40U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM3_RX_SHIFT (6U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM3_TX_MASK (0x80U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM3_TX_SHIFT (7U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM4_RX_MASK (0x100U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM4_RX_SHIFT (8U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM4_TX_MASK (0x200U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM4_TX_SHIFT (9U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM5_RX_MASK (0x400U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM5_RX_SHIFT (10U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM5_TX_MASK (0x800U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM5_TX_SHIFT (11U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM6_RX_MASK (0x1000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM6_RX_SHIFT (12U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM6_TX_MASK (0x2000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM6_TX_SHIFT (13U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM7_RX_MASK (0x4000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM7_RX_SHIFT (14U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM7_TX_MASK (0x8000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM7_TX_SHIFT (15U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH0_FLEXCOMM8_RX_DMA_MASK (0x10000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH0_FLEXCOMM8_RX_DMA_SHIFT (16U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH1_FLEXCOMM8_TX_DMA_MASK (0x20000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH1_FLEXCOMM8_TX_DMA_SHIFT (17U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH2_FLEXCOMM9_RX_DMA_MASK (0x40000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH2_FLEXCOMM9_RX_DMA_SHIFT (18U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH3_FLEXCOMM9_TX_DMA_MASK (0x80000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH3_FLEXCOMM9_TX_DMA_SHIFT (19U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH4_FLEXCOMM10_RX_DMA_MASK (0x100000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH4_FLEXCOMM10_RX_DMA_SHIFT (20U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH5_FLEXCOMM10_TX_DMA_MASK (0x200000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH5_FLEXCOMM10_TX_DMA_SHIFT (21U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH6_FLEXCOMM13_RX_DMA_MASK (0x400000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH6_FLEXCOMM13_RX_DMA_SHIFT (22U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH7_FLEXCOMM13_TX_DMA_MASK (0x800000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_DMIC0_CH7_FLEXCOMM13_TX_DMA_SHIFT (23U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_I3C0_RX_MASK (0x1000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_I3C0_RX_SHIFT (24U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_I3C0_TX_MASK (0x2000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_I3C0_TX_SHIFT (25U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM14_RX_MASK (0x4000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM14_RX_SHIFT (26U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM14_TX_MASK (0x8000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM14_TX_SHIFT (27U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM16_RX_FLEXIO_SHFT4_MASK (0x10000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM16_RX_FLEXIO_SHFT4_SHIFT (28U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM16_TX_FLEXIO_SHFT5_MASK (0x20000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_FLEXCOMM16_TX_FLEXIO_SHFT5_SHIFT (29U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_I3C1_RX_FLEXIO_SHFT6_MASK (0x40000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_I3C1_RX_FLEXIO_SHFT6_SHIFT (30U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_I3C1_TX_FLEXIO_SHFT7_MASK (0x80000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_SET_I3C1_TX_FLEXIO_SHFT7_SHIFT (31U)
/*! @} */

/*! @name DMAC0_REQ_ENA1_SET - DMAC0 request enable set 1 */
/*! @{ */
#define INPUTMUX_DMAC0_REQ_ENA1_SET_FLEXIO_SHFT0_FLEXCOMM11_RX_MASK (0x1U)
#define INPUTMUX_DMAC0_REQ_ENA1_SET_FLEXIO_SHFT0_FLEXCOMM11_RX_SHIFT (0U)
#define INPUTMUX_DMAC0_REQ_ENA1_SET_FLEXIO_SHFT1_FLEXCOMM11_TX_MASK (0x2U)
#define INPUTMUX_DMAC0_REQ_ENA1_SET_FLEXIO_SHFT1_FLEXCOMM11_TX_SHIFT (1U)
#define INPUTMUX_DMAC0_REQ_ENA1_SET_FLEXIO_SHFT2_FLEXCOMM12_RX_MASK (0x4U)
#define INPUTMUX_DMAC0_REQ_ENA1_SET_FLEXIO_SHFT2_FLEXCOMM12_RX_SHIFT (2U)
#define INPUTMUX_DMAC0_REQ_ENA1_SET_FLEXIO_SHFT3_FLEXCOMM12_TX_MASK (0x8U)
#define INPUTMUX_DMAC0_REQ_ENA1_SET_FLEXIO_SHFT3_FLEXCOMM12_TX_SHIFT (3U)
#define INPUTMUX_DMAC0_REQ_ENA1_SET_HASHCRYPT_IN_MASK (0x10U)
#define INPUTMUX_DMAC0_REQ_ENA1_SET_HASHCRYPT_IN_SHIFT (4U)
/*! @} */

/*! @name DMAC0_REQ_ENA0_CLR - DMAC0 request enable clear 0 */
/*! @{ */
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM0_RX_MASK (0x1U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM0_RX_SHIFT (0U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM0_TX_MASK (0x2U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM0_TX_SHIFT (1U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM1_RX_MASK (0x4U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM1_RX_SHIFT (2U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM1_TX_MASK (0x8U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM1_TX_SHIFT (3U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM2_RX_MASK (0x10U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM2_RX_SHIFT (4U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM2_TX_MASK (0x20U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM2_TX_SHIFT (5U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM3_RX_MASK (0x40U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM3_RX_SHIFT (6U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM3_TX_MASK (0x80U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM3_TX_SHIFT (7U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM4_RX_MASK (0x100U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM4_RX_SHIFT (8U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM4_TX_MASK (0x200U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM4_TX_SHIFT (9U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM5_RX_MASK (0x400U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM5_RX_SHIFT (10U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM5_TX_MASK (0x800U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM5_TX_SHIFT (11U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM6_RX_MASK (0x1000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM6_RX_SHIFT (12U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM6_TX_MASK (0x2000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM6_TX_SHIFT (13U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM7_RX_MASK (0x4000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM7_RX_SHIFT (14U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM7_TX_MASK (0x8000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM7_TX_SHIFT (15U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH0_FLEXCOMM8_RX_DMA_MASK (0x10000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH0_FLEXCOMM8_RX_DMA_SHIFT (16U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH1_FLEXCOMM8_TX_DMA_MASK (0x20000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH1_FLEXCOMM8_TX_DMA_SHIFT (17U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH2_FLEXCOMM9_RX_DMA_MASK (0x40000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH2_FLEXCOMM9_RX_DMA_SHIFT (18U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH3_FLEXCOMM9_TX_DMA_MASK (0x80000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH3_FLEXCOMM9_TX_DMA_SHIFT (19U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH4_FLEXCOMM10_RX_DMA_MASK (0x100000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH4_FLEXCOMM10_RX_DMA_SHIFT (20U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH5_FLEXCOMM10_TX_DMA_MASK (0x200000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH5_FLEXCOMM10_TX_DMA_SHIFT (21U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH6_FLEXCOMM13_RX_DMA_MASK (0x400000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH6_FLEXCOMM13_RX_DMA_SHIFT (22U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH7_FLEXCOMM13_TX_DMA_MASK (0x800000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_DMIC0_CH7_FLEXCOMM13_TX_DMA_SHIFT (23U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_I3C0_RX_MASK (0x1000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_I3C0_RX_SHIFT (24U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_I3C0_TX_MASK (0x2000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_I3C0_TX_SHIFT (25U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM14_RX_MASK (0x4000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM14_RX_SHIFT (26U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM14_TX_MASK (0x8000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM14_TX_SHIFT (27U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM16_RX_FLEXIO_SHFT4_MASK (0x10000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM16_RX_FLEXIO_SHFT4_SHIFT (28U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM16_TX_FLEXIO_SHFT5_MASK (0x20000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_FLEXCOMM16_TX_FLEXIO_SHFT5_SHIFT (29U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_I3C1_RX_FLEXIO_SHFT6_MASK (0x40000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_I3C1_RX_FLEXIO_SHFT6_SHIFT (30U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_I3C1_TX_FLEXIO_SHFT7_MASK (0x80000000U)
#define INPUTMUX_DMAC0_REQ_ENA0_CLR_I3C1_TX_FLEXIO_SHFT7_SHIFT (31U)
/*! @} */

/*! @name DMAC0_REQ_ENA1_CLR - DMAC0 request enable 1 clear */
/*! @{ */
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_FLEXIO_SHFT0_FLEXCOMM11_RX_MASK (0x1U)
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_FLEXIO_SHFT0_FLEXCOMM11_RX_SHIFT (0U)
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_FLEXIO_SHFT1_FLEXCOMM11_TX_MASK (0x2U)
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_FLEXIO_SHFT1_FLEXCOMM11_TX_SHIFT (1U)
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_FLEXIO_SHFT2_FLEXCOMM12_RX_MASK (0x4U)
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_FLEXIO_SHFT2_FLEXCOMM12_RX_SHIFT (2U)
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_FLEXIO_SHFT3_FLEXCOMM12_TX_MASK (0x8U)
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_FLEXIO_SHFT3_FLEXCOMM12_TX_SHIFT (3U)
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_HASHCRYPT_IN_MASK (0x10U)
#define INPUTMUX_DMAC0_REQ_ENA1_CLR_HASHCRYPT_IN_SHIFT (4U)
/*! @} */

/*! @name DMAC1_REQ_ENA0 - DMAC1 request enable 0 */
/*! @{ */
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM0_RX_MASK (0x1U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM0_RX_SHIFT (0U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM0_TX_MASK (0x2U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM0_TX_SHIFT (1U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM1_RX_MASK (0x4U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM1_RX_SHIFT (2U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM1_TX_MASK (0x8U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM1_TX_SHIFT (3U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM2_RX_MASK (0x10U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM2_RX_SHIFT (4U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM2_TX_MASK (0x20U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM2_TX_SHIFT (5U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM3_RX_MASK (0x40U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM3_RX_SHIFT (6U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM3_TX_MASK (0x80U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM3_TX_SHIFT (7U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM4_RX_MASK (0x100U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM4_RX_SHIFT (8U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM4_TX_MASK (0x200U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM4_TX_SHIFT (9U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM5_RX_MASK (0x400U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM5_RX_SHIFT (10U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM5_TX_MASK (0x800U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM5_TX_SHIFT (11U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM6_RX_MASK (0x1000U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM6_RX_SHIFT (12U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM6_TX_MASK (0x2000U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM6_TX_SHIFT (13U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM7_RX_MASK (0x4000U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM7_RX_SHIFT (14U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM7_TX_MASK (0x8000U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM7_TX_SHIFT (15U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH0_FLEXCOMM8_RX_DMA_MASK (0x10000U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH0_FLEXCOMM8_RX_DMA_SHIFT (16U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH1_FLEXCOMM8_TX_DMA_MASK (0x20000U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH1_FLEXCOMM8_TX_DMA_SHIFT (17U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH2_FLEXCOMM9_RX_DMA_MASK (0x40000U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH2_FLEXCOMM9_RX_DMA_SHIFT (18U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH3_FLEXCOMM9_TX_DMA_MASK (0x80000U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH3_FLEXCOMM9_TX_DMA_SHIFT (19U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH4_FLEXCOMM10_RX_DMA_MASK (0x100000U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH4_FLEXCOMM10_RX_DMA_SHIFT (20U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH5_FLEXCOMM10_TX_DMA_MASK (0x200000U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH5_FLEXCOMM10_TX_DMA_SHIFT (21U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH6_FLEXCOMM13_RX_DMA_MASK (0x400000U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH6_FLEXCOMM13_RX_DMA_SHIFT (22U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH7_FLEXCOMM13_TX_DMA_MASK (0x800000U)
#define INPUTMUX_DMAC1_REQ_ENA0_DMIC0_CH7_FLEXCOMM13_TX_DMA_SHIFT (23U)
#define INPUTMUX_DMAC1_REQ_ENA0_I3C0_RX_MASK     (0x1000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_I3C0_RX_SHIFT    (24U)
#define INPUTMUX_DMAC1_REQ_ENA0_I3C0_TX_MASK     (0x2000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_I3C0_TX_SHIFT    (25U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM14_RX_MASK (0x4000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM14_RX_SHIFT (26U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM14_TX_MASK (0x8000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM14_TX_SHIFT (27U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM16_RX_FLEXIO_SHFT4_MASK (0x10000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM16_RX_FLEXIO_SHFT4_SHIFT (28U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM16_TX_FLEXIO_SHFT5_MASK (0x20000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_FLEXCOMM16_TX_FLEXIO_SHFT5_SHIFT (29U)
#define INPUTMUX_DMAC1_REQ_ENA0_I3C1_RX_FLEXIO_SHFT6_MASK (0x40000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_I3C1_RX_FLEXIO_SHFT6_SHIFT (30U)
#define INPUTMUX_DMAC1_REQ_ENA0_I3C1_TX_FLEXIO_SHFT7_MASK (0x80000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_I3C1_TX_FLEXIO_SHFT7_SHIFT (31U)
/*! @} */

/*! @name DMAC1_REQ_ENA1 - DMAC1 request enable 1 */
/*! @{ */
#define INPUTMUX_DMAC1_REQ_ENA1_FLEXIO_SHFT0_FLEXCOMM11_RX_MASK (0x1U)
#define INPUTMUX_DMAC1_REQ_ENA1_FLEXIO_SHFT0_FLEXCOMM11_RX_SHIFT (0U)
#define INPUTMUX_DMAC1_REQ_ENA1_FLEXIO_SHFT1_FLEXCOMM11_TX_MASK (0x2U)
#define INPUTMUX_DMAC1_REQ_ENA1_FLEXIO_SHFT1_FLEXCOMM11_TX_SHIFT (1U)
#define INPUTMUX_DMAC1_REQ_ENA1_FLEXIO_SHFT2_FLEXCOMM12_RX_MASK (0x4U)
#define INPUTMUX_DMAC1_REQ_ENA1_FLEXIO_SHFT2_FLEXCOMM12_RX_SHIFT (2U)
#define INPUTMUX_DMAC1_REQ_ENA1_FLEXIO_SHFT3_FLEXCOMM12_TX_MASK (0x8U)
#define INPUTMUX_DMAC1_REQ_ENA1_FLEXIO_SHFT3_FLEXCOMM12_TX_SHIFT (3U)
#define INPUTMUX_DMAC1_REQ_ENA1_HASHCRYPT_IN_MASK (0x10U)
#define INPUTMUX_DMAC1_REQ_ENA1_HASHCRYPT_IN_SHIFT (4U)
/*! @} */

/*! @name DMAC1_REQ_ENA0_SET - DMAC1 request enable set 0 */
/*! @{ */
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM0_RX_MASK (0x1U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM0_RX_SHIFT (0U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM0_TX_MASK (0x2U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM0_TX_SHIFT (1U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM1_RX_MASK (0x4U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM1_RX_SHIFT (2U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM1_TX_MASK (0x8U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM1_TX_SHIFT (3U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM2_RX_MASK (0x10U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM2_RX_SHIFT (4U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM2_TX_MASK (0x20U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM2_TX_SHIFT (5U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM3_RX_MASK (0x40U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM3_RX_SHIFT (6U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM3_TX_MASK (0x80U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM3_TX_SHIFT (7U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM4_RX_MASK (0x100U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM4_RX_SHIFT (8U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM4_TX_MASK (0x200U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM4_TX_SHIFT (9U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM5_RX_MASK (0x400U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM5_RX_SHIFT (10U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM5_TX_MASK (0x800U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM5_TX_SHIFT (11U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM6_RX_MASK (0x1000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM6_RX_SHIFT (12U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM6_TX_MASK (0x2000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM6_TX_SHIFT (13U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM7_RX_MASK (0x4000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM7_RX_SHIFT (14U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM7_TX_MASK (0x8000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM7_TX_SHIFT (15U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH0_FLEXCOMM8_RX_DMA_MASK (0x10000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH0_FLEXCOMM8_RX_DMA_SHIFT (16U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH1_FLEXCOMM8_TX_DMA_MASK (0x20000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH1_FLEXCOMM8_TX_DMA_SHIFT (17U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH2_FLEXCOMM9_RX_DMA_MASK (0x40000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH2_FLEXCOMM9_RX_DMA_SHIFT (18U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH3_FLEXCOMM9_TX_DMA_MASK (0x80000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH3_FLEXCOMM9_TX_DMA_SHIFT (19U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH4_FLEXCOMM10_RX_DMA_MASK (0x100000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH4_FLEXCOMM10_RX_DMA_SHIFT (20U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH5_FLEXCOMM10_TX_DMA_MASK (0x200000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH5_FLEXCOMM10_TX_DMA_SHIFT (21U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH6_FLEXCOMM13_RX_DMA_MASK (0x400000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH6_FLEXCOMM13_RX_DMA_SHIFT (22U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH7_FLEXCOMM13_TX_DMA_MASK (0x800000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_DMIC0_CH7_FLEXCOMM13_TX_DMA_SHIFT (23U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_I3C0_RX_MASK (0x1000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_I3C0_RX_SHIFT (24U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_I3C0_TX_MASK (0x2000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_I3C0_TX_SHIFT (25U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM14_RX_MASK (0x4000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM14_RX_SHIFT (26U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM14_TX_MASK (0x8000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM14_TX_SHIFT (27U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM16_RX_FLEXIO_SHFT4_MASK (0x10000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM16_RX_FLEXIO_SHFT4_SHIFT (28U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM16_TX_FLEXIO_SHFT5_MASK (0x20000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_FLEXCOMM16_TX_FLEXIO_SHFT5_SHIFT (29U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_I3C1_RX_FLEXIO_SHFT6_MASK (0x40000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_I3C1_RX_FLEXIO_SHFT6_SHIFT (30U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_I3C1_TX_FLEXIO_SHFT7_MASK (0x80000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_SET_I3C1_TX_FLEXIO_SHFT7_SHIFT (31U)
/*! @} */

/*! @name DMAC1_REQ_ENA1_SET - DMAC1 request enable set 1 */
/*! @{ */
#define INPUTMUX_DMAC1_REQ_ENA1_SET_FLEXIO_SHFT0_FLEXCOMM11_RX_MASK (0x1U)
#define INPUTMUX_DMAC1_REQ_ENA1_SET_FLEXIO_SHFT0_FLEXCOMM11_RX_SHIFT (0U)
#define INPUTMUX_DMAC1_REQ_ENA1_SET_FLEXIO_SHFT1_FLEXCOMM11_TX_MASK (0x2U)
#define INPUTMUX_DMAC1_REQ_ENA1_SET_FLEXIO_SHFT1_FLEXCOMM11_TX_SHIFT (1U)
#define INPUTMUX_DMAC1_REQ_ENA1_SET_FLEXIO_SHFT2_FLEXCOMM12_RX_MASK (0x4U)
#define INPUTMUX_DMAC1_REQ_ENA1_SET_FLEXIO_SHFT2_FLEXCOMM12_RX_SHIFT (2U)
#define INPUTMUX_DMAC1_REQ_ENA1_SET_FLEXIO_SHFT3_FLEXCOMM12_TX_MASK (0x8U)
#define INPUTMUX_DMAC1_REQ_ENA1_SET_FLEXIO_SHFT3_FLEXCOMM12_TX_SHIFT (3U)
#define INPUTMUX_DMAC1_REQ_ENA1_SET_HASHCRYPT_IN_MASK (0x10U)
#define INPUTMUX_DMAC1_REQ_ENA1_SET_HASHCRYPT_IN_SHIFT (4U)
/*! @} */

/*! @name DMAC1_REQ_ENA0_CLR - DMAC1 request enable clear 0 */
/*! @{ */
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM0_RX_MASK (0x1U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM0_RX_SHIFT (0U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM0_TX_MASK (0x2U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM0_TX_SHIFT (1U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM1_RX_MASK (0x4U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM1_RX_SHIFT (2U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM1_TX_MASK (0x8U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM1_TX_SHIFT (3U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM2_RX_MASK (0x10U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM2_RX_SHIFT (4U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM2_TX_MASK (0x20U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM2_TX_SHIFT (5U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM3_RX_MASK (0x40U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM3_RX_SHIFT (6U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM3_TX_MASK (0x80U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM3_TX_SHIFT (7U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM4_RX_MASK (0x100U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM4_RX_SHIFT (8U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM4_TX_MASK (0x200U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM4_TX_SHIFT (9U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM5_RX_MASK (0x400U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM5_RX_SHIFT (10U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM5_TX_MASK (0x800U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM5_TX_SHIFT (11U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM6_RX_MASK (0x1000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM6_RX_SHIFT (12U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM6_TX_MASK (0x2000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM6_TX_SHIFT (13U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM7_RX_MASK (0x4000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM7_RX_SHIFT (14U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM7_TX_MASK (0x8000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM7_TX_SHIFT (15U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH0_FLEXCOMM8_RX_DMA_MASK (0x10000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH0_FLEXCOMM8_RX_DMA_SHIFT (16U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH1_FLEXCOMM8_TX_DMA_MASK (0x20000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH1_FLEXCOMM8_TX_DMA_SHIFT (17U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH2_FLEXCOMM9_RX_DMA_MASK (0x40000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH2_FLEXCOMM9_RX_DMA_SHIFT (18U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH3_FLEXCOMM9_TX_DMA_MASK (0x80000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH3_FLEXCOMM9_TX_DMA_SHIFT (19U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH4_FLEXCOMM10_RX_DMA_MASK (0x100000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH4_FLEXCOMM10_RX_DMA_SHIFT (20U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH5_FLEXCOMM10_TX_DMA_MASK (0x200000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH5_FLEXCOMM10_TX_DMA_SHIFT (21U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH6_FLEXCOMM13_RX_DMA_MASK (0x400000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH6_FLEXCOMM13_RX_DMA_SHIFT (22U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH7_FLEXCOMM13_TX_DMA_MASK (0x800000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_DMIC0_CH7_FLEXCOMM13_TX_DMA_SHIFT (23U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_I3C0_RX_MASK (0x1000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_I3C0_RX_SHIFT (24U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_I3C0_TX_MASK (0x2000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_I3C0_TX_SHIFT (25U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM14_RX_MASK (0x4000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM14_RX_SHIFT (26U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM14_TX_MASK (0x8000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM14_TX_SHIFT (27U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM16_RX_FLEXIO_SHFT4_MASK (0x10000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM16_RX_FLEXIO_SHFT4_SHIFT (28U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM16_TX_FLEXIO_SHFT5_MASK (0x20000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_FLEXCOMM16_TX_FLEXIO_SHFT5_SHIFT (29U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_I3C1_RX_FLEXIO_SHFT6_MASK (0x40000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_I3C1_RX_FLEXIO_SHFT6_SHIFT (30U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_I3C1_TX_FLEXIO_SHFT7_MASK (0x80000000U)
#define INPUTMUX_DMAC1_REQ_ENA0_CLR_I3C1_TX_FLEXIO_SHFT7_SHIFT (31U)
/*! @} */

/*! @name DMAC1_REQ_ENA1_CLR - DMAC1 request enable 1 clear */
/*! @{ */
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_FLEXIO_SHFT0_FLEXCOMM11_RX_MASK (0x1U)
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_FLEXIO_SHFT0_FLEXCOMM11_RX_SHIFT (0U)
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_FLEXIO_SHFT1_FLEXCOMM11_TX_MASK (0x2U)
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_FLEXIO_SHFT1_FLEXCOMM11_TX_SHIFT (1U)
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_FLEXIO_SHFT2_FLEXCOMM12_RX_MASK (0x4U)
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_FLEXIO_SHFT2_FLEXCOMM12_RX_SHIFT (2U)
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_FLEXIO_SHFT3_FLEXCOMM12_TX_MASK (0x8U)
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_FLEXIO_SHFT3_FLEXCOMM12_TX_SHIFT (3U)
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_HASHCRYPT_IN_MASK (0x10U)
#define INPUTMUX_DMAC1_REQ_ENA1_CLR_HASHCRYPT_IN_SHIFT (4U)
/*! @} */

/*! @name DMAC0_ITRIG_ENA0 - DMAC0 Input Trigger Enable 0 */
/*! @{ */
#define INPUTMUX_DMAC0_ITRIG_ENA0_GPIO_INT0_MASK (0x1U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_GPIO_INT0_SHIFT (0U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_GPIO_INT1_MASK (0x2U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_GPIO_INT1_SHIFT (1U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_GPIO_INT2_MASK (0x4U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_GPIO_INT2_SHIFT (2U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_GPIO_INT3_MASK (0x8U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_GPIO_INT3_SHIFT (3U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T0_DMAREQ_M0_MASK (0x10U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T0_DMAREQ_M0_SHIFT (4U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T0_DMAREQ_M1_MASK (0x20U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T0_DMAREQ_M1_SHIFT (5U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T1_DMAREQ_M0_MASK (0x40U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T1_DMAREQ_M0_SHIFT (6U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T1_DMAREQ_M1_MASK (0x80U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T1_DMAREQ_M1_SHIFT (7U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T2_DMAREQ_M0_MASK (0x100U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T2_DMAREQ_M0_SHIFT (8U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T2_DMAREQ_M1_MASK (0x200U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T2_DMAREQ_M1_SHIFT (9U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T3_DMAREQ_M0_MASK (0x400U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T3_DMAREQ_M0_SHIFT (10U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T3_DMAREQ_M1_MASK (0x800U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T3_DMAREQ_M1_SHIFT (11U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T4_DMAREQ_M0_MASK (0x1000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T4_DMAREQ_M0_SHIFT (12U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T4_DMAREQ_M1_MASK (0x2000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_T4_DMAREQ_M1_SHIFT (13U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_DMA_TRIGOUT_A_MASK (0x4000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_DMA_TRIGOUT_A_SHIFT (14U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_DMA_TRIGOUT_B_MASK (0x8000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_DMA_TRIGOUT_B_SHIFT (15U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_DMA_TRIGOUT_C_MASK (0x10000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_DMA_TRIGOUT_C_SHIFT (16U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_DMA_TRIGOUT_D_MASK (0x20000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_DMA_TRIGOUT_D_SHIFT (17U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SCT_DMA_REQ0_MASK (0x40000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SCT_DMA_REQ0_SHIFT (18U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SCT_DMA_REQ1_MASK (0x80000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SCT_DMA_REQ1_SHIFT (19U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_HASHCRYPT_OUT_MASK (0x100000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_HASHCRYPT_OUT_SHIFT (20U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_ACMP_MASK      (0x200000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_ACMP_SHIFT     (21U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_FLEXSPI0_RX_MASK (0x400000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_FLEXSPI0_RX_SHIFT (22U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_FLEXSPI0_TX_MASK (0x800000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_FLEXSPI0_TX_SHIFT (23U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_ADC_MASK       (0x1000000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_ADC_SHIFT      (24U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_FLEXSPI1_RX_MASK (0x2000000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_FLEXSPI1_RX_SHIFT (25U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_FLEXSPI1_TX_MASK (0x4000000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_FLEXSPI1_TX_SHIFT (26U)
/*! @} */

/*! @name DMAC0_ITRIG_ENA0_SET - DMAC0 Input Trigger Enable 0 Set */
/*! @{ */
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_GPIO_INT0_MASK (0x1U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_GPIO_INT0_SHIFT (0U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_GPIO_INT1_MASK (0x2U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_GPIO_INT1_SHIFT (1U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_GPIO_INT2_MASK (0x4U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_GPIO_INT2_SHIFT (2U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_GPIO_INT3_MASK (0x8U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_GPIO_INT3_SHIFT (3U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T0_DMAREQ_M0_MASK (0x10U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T0_DMAREQ_M0_SHIFT (4U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T0_DMAREQ_M1_MASK (0x20U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T0_DMAREQ_M1_SHIFT (5U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T1_DMAREQ_M0_MASK (0x40U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T1_DMAREQ_M0_SHIFT (6U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T1_DMAREQ_M1_MASK (0x80U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T1_DMAREQ_M1_SHIFT (7U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T2_DMAREQ_M0_MASK (0x100U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T2_DMAREQ_M0_SHIFT (8U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T2_DMAREQ_M1_MASK (0x200U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T2_DMAREQ_M1_SHIFT (9U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T3_DMAREQ_M0_MASK (0x400U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T3_DMAREQ_M0_SHIFT (10U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T3_DMAREQ_M1_MASK (0x800U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T3_DMAREQ_M1_SHIFT (11U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T4_DMAREQ_M0_MASK (0x1000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T4_DMAREQ_M0_SHIFT (12U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T4_DMAREQ_M1_MASK (0x2000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_T4_DMAREQ_M1_SHIFT (13U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SDMA0_TRIGOUT_A_MASK (0x4000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SDMA0_TRIGOUT_A_SHIFT (14U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SDMA0_TRIGOUT_B_MASK (0x8000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SDMA0_TRIGOUT_B_SHIFT (15U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SDMA0_TRIGOUT_C_MASK (0x10000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SDMA0_TRIGOUT_C_SHIFT (16U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SDMA0_TRIGOUT_D_MASK (0x20000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SDMA0_TRIGOUT_D_SHIFT (17U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SCT_DMA_REQ0_MASK (0x40000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SCT_DMA_REQ0_SHIFT (18U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SCT_DMA_REQ1_MASK (0x80000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_SCT_DMA_REQ1_SHIFT (19U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_HASHCRYPT_OUT_MASK (0x100000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_HASHCRYPT_OUT_SHIFT (20U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_ACMP_MASK  (0x200000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_ACMP_SHIFT (21U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_FLEXSPI0_RX_MASK (0x400000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_FLEXSPI0_RX_SHIFT (22U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_FLEXSPI0_TX_MASK (0x800000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_FLEXSPI0_TX_SHIFT (23U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_ADC_MASK   (0x1000000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_ADC_SHIFT  (24U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_FLEXSPI1_RX_MASK (0x2000000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_FLEXSPI1_RX_SHIFT (25U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_FLEXSPI1_TX_MASK (0x4000000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_SET_FLEXSPI1_TX_SHIFT (26U)
/*! @} */

/*! @name DMAC0_ITRIG_ENA0_CLR - DMAC0 Input Trigger Enable 0 Clear */
/*! @{ */
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_GPIO_INT0_MASK (0x1U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_GPIO_INT0_SHIFT (0U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_GPIO_INT1_MASK (0x2U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_GPIO_INT1_SHIFT (1U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_GPIO_INT2_MASK (0x4U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_GPIO_INT2_SHIFT (2U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_GPIO_INT3_MASK (0x8U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_GPIO_INT3_SHIFT (3U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T0_DMAREQ_M0_MASK (0x10U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T0_DMAREQ_M0_SHIFT (4U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T0_DMAREQ_M1_MASK (0x20U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T0_DMAREQ_M1_SHIFT (5U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T1_DMAREQ_M0_MASK (0x40U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T1_DMAREQ_M0_SHIFT (6U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T1_DMAREQ_M1_MASK (0x80U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T1_DMAREQ_M1_SHIFT (7U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T2_DMAREQ_M0_MASK (0x100U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T2_DMAREQ_M0_SHIFT (8U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T2_DMAREQ_M1_MASK (0x200U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T2_DMAREQ_M1_SHIFT (9U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T3_DMAREQ_M0_MASK (0x400U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T3_DMAREQ_M0_SHIFT (10U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T3_DMAREQ_M1_MASK (0x800U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T3_DMAREQ_M1_SHIFT (11U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T4_DMAREQ_M0_MASK (0x1000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T4_DMAREQ_M0_SHIFT (12U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T4_DMAREQ_M1_MASK (0x2000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_T4_DMAREQ_M1_SHIFT (13U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_A_MASK (0x4000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_A_SHIFT (14U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_B_MASK (0x8000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_B_SHIFT (15U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_C_MASK (0x10000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_C_SHIFT (16U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_D_MASK (0x20000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_D_SHIFT (17U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SCT_DMA_REQ0_MASK (0x40000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SCT_DMA_REQ0_SHIFT (18U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SCT_DMA_REQ1_MASK (0x80000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_SCT_DMA_REQ1_SHIFT (19U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_HASHCRYPT_OUT_MASK (0x100000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_HASHCRYPT_OUT_SHIFT (20U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_ACMP_MASK  (0x200000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_ACMP_SHIFT (21U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_FLEXSPI0_RX_MASK (0x400000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_FLEXSPI0_RX_SHIFT (22U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_FLEXSPI0_TX_MASK (0x800000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_FLEXSPI0_TX_SHIFT (23U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_ADC_MASK   (0x1000000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_ADC_SHIFT  (24U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_FLEXSPI1_RX_MASK (0x2000000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_FLEXSPI1_RX_SHIFT (25U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_FLEXSPI1_TX_MASK (0x4000000U)
#define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_FLEXSPI1_TX_SHIFT (26U)
/*! @} */

/*! @name DMAC1_ITRIG_ENA0 - DMAC1 Input Trigger Enable 0 */
/*! @{ */
#define INPUTMUX_DMAC1_ITRIG_ENA0_GPIO_INT0_MASK (0x1U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_GPIO_INT0_SHIFT (0U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_GPIO_INT1_MASK (0x2U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_GPIO_INT1_SHIFT (1U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_GPIO_INT2_MASK (0x4U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_GPIO_INT2_SHIFT (2U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_GPIO_INT3_MASK (0x8U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_GPIO_INT3_SHIFT (3U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T0_DMAREQ_M0_MASK (0x10U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T0_DMAREQ_M0_SHIFT (4U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T0_DMAREQ_M1_MASK (0x20U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T0_DMAREQ_M1_SHIFT (5U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T1_DMAREQ_M0_MASK (0x40U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T1_DMAREQ_M0_SHIFT (6U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T1_DMAREQ_M1_MASK (0x80U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T1_DMAREQ_M1_SHIFT (7U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T2_DMAREQ_M0_MASK (0x100U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T2_DMAREQ_M0_SHIFT (8U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T2_DMAREQ_M1_MASK (0x200U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T2_DMAREQ_M1_SHIFT (9U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T3_DMAREQ_M0_MASK (0x400U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T3_DMAREQ_M0_SHIFT (10U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T3_DMAREQ_M1_MASK (0x800U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T3_DMAREQ_M1_SHIFT (11U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T4_DMAREQ_M0_MASK (0x1000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T4_DMAREQ_M0_SHIFT (12U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T4_DMAREQ_M1_MASK (0x2000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_T4_DMAREQ_M1_SHIFT (13U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_DMA_TRIGOUT_A_MASK (0x4000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_DMA_TRIGOUT_A_SHIFT (14U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_DMA_TRIGOUT_B_MASK (0x8000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_DMA_TRIGOUT_B_SHIFT (15U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_DMA_TRIGOUT_C_MASK (0x10000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_DMA_TRIGOUT_C_SHIFT (16U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_DMA_TRIGOUT_D_MASK (0x20000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_DMA_TRIGOUT_D_SHIFT (17U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SCT_DMA_REQ0_MASK (0x40000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SCT_DMA_REQ0_SHIFT (18U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SCT_DMA_REQ1_MASK (0x80000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SCT_DMA_REQ1_SHIFT (19U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_HASHCRYPT_OUT_MASK (0x100000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_HASHCRYPT_OUT_SHIFT (20U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_ACMP_MASK      (0x200000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_ACMP_SHIFT     (21U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_FLEXSPI0_RX_MASK (0x400000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_FLEXSPI0_RX_SHIFT (22U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_FLEXSPI0_TX_MASK (0x800000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_FLEXSPI0_TX_SHIFT (23U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_ADC_MASK       (0x1000000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_ADC_SHIFT      (24U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_FLEXSPI1_RX_MASK (0x2000000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_FLEXSPI1_RX_SHIFT (25U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_FLEXSPI1_TX_MASK (0x4000000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_FLEXSPI1_TX_SHIFT (26U)
/*! @} */

/*! @name DMAC1_ITRIG_ENA0_SET - DMAC1 Input Trigger Enable 0 set */
/*! @{ */
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_GPIO_INT0_MASK (0x1U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_GPIO_INT0_SHIFT (0U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_GPIO_INT1_MASK (0x2U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_GPIO_INT1_SHIFT (1U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_GPIO_INT2_MASK (0x4U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_GPIO_INT2_SHIFT (2U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_GPIO_INT3_MASK (0x8U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_GPIO_INT3_SHIFT (3U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T0_DMAREQ_M0_MASK (0x10U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T0_DMAREQ_M0_SHIFT (4U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T0_DMAREQ_M1_MASK (0x20U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T0_DMAREQ_M1_SHIFT (5U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T1_DMAREQ_M0_MASK (0x40U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T1_DMAREQ_M0_SHIFT (6U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T1_DMAREQ_M1_MASK (0x80U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T1_DMAREQ_M1_SHIFT (7U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T2_DMAREQ_M0_MASK (0x100U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T2_DMAREQ_M0_SHIFT (8U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T2_DMAREQ_M1_MASK (0x200U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T2_DMAREQ_M1_SHIFT (9U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T3_DMAREQ_M0_MASK (0x400U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T3_DMAREQ_M0_SHIFT (10U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T3_DMAREQ_M1_MASK (0x800U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T3_DMAREQ_M1_SHIFT (11U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T4_DMAREQ_M0_MASK (0x1000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T4_DMAREQ_M0_SHIFT (12U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T4_DMAREQ_M1_MASK (0x2000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_T4_DMAREQ_M1_SHIFT (13U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SDMA0_TRIGOUT_A_MASK (0x4000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SDMA0_TRIGOUT_A_SHIFT (14U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SDMA0_TRIGOUT_B_MASK (0x8000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SDMA0_TRIGOUT_B_SHIFT (15U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SDMA0_TRIGOUT_C_MASK (0x10000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SDMA0_TRIGOUT_C_SHIFT (16U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SDMA0_TRIGOUT_D_MASK (0x20000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SDMA0_TRIGOUT_D_SHIFT (17U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SCT_DMA_REQ0_MASK (0x40000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SCT_DMA_REQ0_SHIFT (18U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SCT_DMA_REQ1_MASK (0x80000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_SCT_DMA_REQ1_SHIFT (19U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_HASHCRYPT_OUT_MASK (0x100000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_HASHCRYPT_OUT_SHIFT (20U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_ACMP_MASK  (0x200000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_ACMP_SHIFT (21U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_FLEXSPI0_RX_MASK (0x400000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_FLEXSPI0_RX_SHIFT (22U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_FLEXSPI0_TX_MASK (0x800000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_FLEXSPI0_TX_SHIFT (23U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_ADC_MASK   (0x1000000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_ADC_SHIFT  (24U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_FLEXSPI1_RX_MASK (0x2000000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_FLEXSPI1_RX_SHIFT (25U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_FLEXSPI1_TX_MASK (0x4000000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_SET_FLEXSPI1_TX_SHIFT (26U)
/*! @} */

/*! @name DMAC1_ITRIG_ENA0_CLR - DMAC1 Input Trigger Enable 0 clear */
/*! @{ */
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_GPIO_INT0_MASK (0x1U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_GPIO_INT0_SHIFT (0U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_GPIO_INT1_MASK (0x2U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_GPIO_INT1_SHIFT (1U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_GPIO_INT2_MASK (0x4U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_GPIO_INT2_SHIFT (2U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_GPIO_INT3_MASK (0x8U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_GPIO_INT3_SHIFT (3U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T0_DMAREQ_M0_MASK (0x10U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T0_DMAREQ_M0_SHIFT (4U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T0_DMAREQ_M1_MASK (0x20U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T0_DMAREQ_M1_SHIFT (5U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T1_DMAREQ_M0_MASK (0x40U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T1_DMAREQ_M0_SHIFT (6U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T1_DMAREQ_M1_MASK (0x80U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T1_DMAREQ_M1_SHIFT (7U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T2_DMAREQ_M0_MASK (0x100U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T2_DMAREQ_M0_SHIFT (8U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T2_DMAREQ_M1_MASK (0x200U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T2_DMAREQ_M1_SHIFT (9U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T3_DMAREQ_M0_MASK (0x400U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T3_DMAREQ_M0_SHIFT (10U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T3_DMAREQ_M1_MASK (0x800U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T3_DMAREQ_M1_SHIFT (11U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T4_DMAREQ_M0_MASK (0x1000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T4_DMAREQ_M0_SHIFT (12U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T4_DMAREQ_M1_MASK (0x2000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_T4_DMAREQ_M1_SHIFT (13U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_A_MASK (0x4000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_A_SHIFT (14U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_B_MASK (0x8000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_B_SHIFT (15U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_C_MASK (0x10000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_C_SHIFT (16U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_D_MASK (0x20000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SDMA0_TRIGOUT_D_SHIFT (17U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SCT_DMA_REQ0_MASK (0x40000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SCT_DMA_REQ0_SHIFT (18U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SCT_DMA_REQ1_MASK (0x80000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_SCT_DMA_REQ1_SHIFT (19U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_HASHCRYPT_OUT_MASK (0x100000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_HASHCRYPT_OUT_SHIFT (20U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_ACMP_MASK  (0x200000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_ACMP_SHIFT (21U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_FLEXSPI0_RX_MASK (0x400000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_FLEXSPI0_RX_SHIFT (22U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_FLEXSPI0_TX_MASK (0x800000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_FLEXSPI0_TX_SHIFT (23U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_ADC_MASK   (0x1000000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_ADC_SHIFT  (24U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_FLEXSPI1_RX_MASK (0x2000000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_FLEXSPI1_RX_SHIFT (25U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_FLEXSPI1_TX_MASK (0x4000000U)
#define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_FLEXSPI1_TX_SHIFT (26U)
/*! @} */


/*!
 * @}
 */ /* end of group INPUTMUX_Register_Masks */


/* INPUTMUX - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral INPUTMUX base pointer */
  #define INPUTMUX_BASE_PTR                        ((INPUTMUX_MemMapPtr)0x50026000u)
  /** Peripheral INPUTMUX base pointer */
  #define INPUTMUX_BASE_PTR_NS                     ((INPUTMUX_MemMapPtr)0x40026000u)
  /** Array initializer of INPUTMUX peripheral base pointers */
  #define INPUTMUX_BASE_PTRS                       { INPUTMUX_BASE_PTR }
  /** Array initializer of INPUTMUX peripheral base pointers */
  #define INPUTMUX_BASE_PTRS_NS                    { INPUTMUX_BASE_PTR_NS }
#else
  /** Peripheral INPUTMUX base pointer */
  #define INPUTMUX_BASE_PTR                        ((INPUTMUX_MemMapPtr)0x40026000u)
  /** Array initializer of INPUTMUX peripheral base pointers */
  #define INPUTMUX_BASE_PTRS                       { INPUTMUX_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- INPUTMUX - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup INPUTMUX_Register_Accessor_Macros INPUTMUX - Register accessor macros
 * @{
 */


/* INPUTMUX - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* INPUTMUX */
  #define INPUTMUX_SCT0_IN0_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_SCT0_IN0_SEL_NS                 INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_SCT0_IN1_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_SCT0_IN1_SEL_NS                 INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_SCT0_IN2_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_SCT0_IN2_SEL_NS                 INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR_NS,2)
  #define INPUTMUX_SCT0_IN3_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_SCT0_IN3_SEL_NS                 INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR_NS,3)
  #define INPUTMUX_SCT0_IN4_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_SCT0_IN4_SEL_NS                 INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR_NS,4)
  #define INPUTMUX_SCT0_IN5_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_SCT0_IN5_SEL_NS                 INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR_NS,5)
  #define INPUTMUX_SCT0_IN6_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_SCT0_IN6_SEL_NS                 INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR_NS,6)
  #define INPUTMUX_PINT_SEL0                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_PINT_SEL0_NS                    INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_PINT_SEL1                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_PINT_SEL1_NS                    INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_PINT_SEL2                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_PINT_SEL2_NS                    INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR_NS,2)
  #define INPUTMUX_PINT_SEL3                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_PINT_SEL3_NS                    INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR_NS,3)
  #define INPUTMUX_PINT_SEL4                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_PINT_SEL4_NS                    INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR_NS,4)
  #define INPUTMUX_PINT_SEL5                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_PINT_SEL5_NS                    INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR_NS,5)
  #define INPUTMUX_PINT_SEL6                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_PINT_SEL6_NS                    INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR_NS,6)
  #define INPUTMUX_PINT_SEL7                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_PINT_SEL7_NS                    INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR_NS,7)
  #define INPUTMUX_DSP_INT0_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DSP_INT0_SEL_NS                 INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_DSP_INT1_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DSP_INT1_SEL_NS                 INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_DSP_INT2_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DSP_INT2_SEL_NS                 INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,2)
  #define INPUTMUX_DSP_INT3_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DSP_INT3_SEL_NS                 INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,3)
  #define INPUTMUX_DSP_INT4_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_DSP_INT4_SEL_NS                 INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,4)
  #define INPUTMUX_DSP_INT5_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_DSP_INT5_SEL_NS                 INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,5)
  #define INPUTMUX_DSP_INT6_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_DSP_INT6_SEL_NS                 INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,6)
  #define INPUTMUX_DSP_INT7_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DSP_INT7_SEL_NS                 INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,7)
  #define INPUTMUX_DSP_INT8_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,8)
  #define INPUTMUX_DSP_INT8_SEL_NS                 INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,8)
  #define INPUTMUX_DSP_INT9_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,9)
  #define INPUTMUX_DSP_INT9_SEL_NS                 INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,9)
  #define INPUTMUX_DSP_INT10_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,10)
  #define INPUTMUX_DSP_INT10_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,10)
  #define INPUTMUX_DSP_INT11_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,11)
  #define INPUTMUX_DSP_INT11_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,11)
  #define INPUTMUX_DSP_INT12_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,12)
  #define INPUTMUX_DSP_INT12_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,12)
  #define INPUTMUX_DSP_INT13_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,13)
  #define INPUTMUX_DSP_INT13_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,13)
  #define INPUTMUX_DSP_INT14_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,14)
  #define INPUTMUX_DSP_INT14_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,14)
  #define INPUTMUX_DSP_INT15_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,15)
  #define INPUTMUX_DSP_INT15_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,15)
  #define INPUTMUX_DSP_INT16_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,16)
  #define INPUTMUX_DSP_INT16_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,16)
  #define INPUTMUX_DSP_INT17_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,17)
  #define INPUTMUX_DSP_INT17_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,17)
  #define INPUTMUX_DSP_INT18_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,18)
  #define INPUTMUX_DSP_INT18_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,18)
  #define INPUTMUX_DSP_INT19_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,19)
  #define INPUTMUX_DSP_INT19_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,19)
  #define INPUTMUX_DSP_INT20_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,20)
  #define INPUTMUX_DSP_INT20_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,20)
  #define INPUTMUX_DSP_INT21_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,21)
  #define INPUTMUX_DSP_INT21_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,21)
  #define INPUTMUX_DSP_INT22_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,22)
  #define INPUTMUX_DSP_INT22_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,22)
  #define INPUTMUX_DSP_INT23_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,23)
  #define INPUTMUX_DSP_INT23_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,23)
  #define INPUTMUX_DSP_INT24_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,24)
  #define INPUTMUX_DSP_INT24_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,24)
  #define INPUTMUX_DSP_INT25_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,25)
  #define INPUTMUX_DSP_INT25_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,25)
  #define INPUTMUX_DSP_INT26_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,26)
  #define INPUTMUX_DSP_INT26_SEL_NS                INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,26)
  #define INPUTMUX_DMAC0_ITRIG_SEL0                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC0_ITRIG_SEL0_NS             INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_DMAC0_ITRIG_SEL1                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC0_ITRIG_SEL1_NS             INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_DMAC0_ITRIG_SEL2                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC0_ITRIG_SEL2_NS             INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,2)
  #define INPUTMUX_DMAC0_ITRIG_SEL3                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC0_ITRIG_SEL3_NS             INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,3)
  #define INPUTMUX_DMAC0_ITRIG_SEL4                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_DMAC0_ITRIG_SEL4_NS             INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,4)
  #define INPUTMUX_DMAC0_ITRIG_SEL5                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_DMAC0_ITRIG_SEL5_NS             INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,5)
  #define INPUTMUX_DMAC0_ITRIG_SEL6                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_DMAC0_ITRIG_SEL6_NS             INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,6)
  #define INPUTMUX_DMAC0_ITRIG_SEL7                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DMAC0_ITRIG_SEL7_NS             INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,7)
  #define INPUTMUX_DMAC0_ITRIG_SEL8                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,8)
  #define INPUTMUX_DMAC0_ITRIG_SEL8_NS             INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,8)
  #define INPUTMUX_DMAC0_ITRIG_SEL9                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,9)
  #define INPUTMUX_DMAC0_ITRIG_SEL9_NS             INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,9)
  #define INPUTMUX_DMAC0_ITRIG_SEL10               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,10)
  #define INPUTMUX_DMAC0_ITRIG_SEL10_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,10)
  #define INPUTMUX_DMAC0_ITRIG_SEL11               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,11)
  #define INPUTMUX_DMAC0_ITRIG_SEL11_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,11)
  #define INPUTMUX_DMAC0_ITRIG_SEL12               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,12)
  #define INPUTMUX_DMAC0_ITRIG_SEL12_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,12)
  #define INPUTMUX_DMAC0_ITRIG_SEL13               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,13)
  #define INPUTMUX_DMAC0_ITRIG_SEL13_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,13)
  #define INPUTMUX_DMAC0_ITRIG_SEL14               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,14)
  #define INPUTMUX_DMAC0_ITRIG_SEL14_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,14)
  #define INPUTMUX_DMAC0_ITRIG_SEL15               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,15)
  #define INPUTMUX_DMAC0_ITRIG_SEL15_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,15)
  #define INPUTMUX_DMAC0_ITRIG_SEL16               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,16)
  #define INPUTMUX_DMAC0_ITRIG_SEL16_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,16)
  #define INPUTMUX_DMAC0_ITRIG_SEL17               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,17)
  #define INPUTMUX_DMAC0_ITRIG_SEL17_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,17)
  #define INPUTMUX_DMAC0_ITRIG_SEL18               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,18)
  #define INPUTMUX_DMAC0_ITRIG_SEL18_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,18)
  #define INPUTMUX_DMAC0_ITRIG_SEL19               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,19)
  #define INPUTMUX_DMAC0_ITRIG_SEL19_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,19)
  #define INPUTMUX_DMAC0_ITRIG_SEL20               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,20)
  #define INPUTMUX_DMAC0_ITRIG_SEL20_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,20)
  #define INPUTMUX_DMAC0_ITRIG_SEL21               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,21)
  #define INPUTMUX_DMAC0_ITRIG_SEL21_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,21)
  #define INPUTMUX_DMAC0_ITRIG_SEL22               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,22)
  #define INPUTMUX_DMAC0_ITRIG_SEL22_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,22)
  #define INPUTMUX_DMAC0_ITRIG_SEL23               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,23)
  #define INPUTMUX_DMAC0_ITRIG_SEL23_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,23)
  #define INPUTMUX_DMAC0_ITRIG_SEL24               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,24)
  #define INPUTMUX_DMAC0_ITRIG_SEL24_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,24)
  #define INPUTMUX_DMAC0_ITRIG_SEL25               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,25)
  #define INPUTMUX_DMAC0_ITRIG_SEL25_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,25)
  #define INPUTMUX_DMAC0_ITRIG_SEL26               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,26)
  #define INPUTMUX_DMAC0_ITRIG_SEL26_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,26)
  #define INPUTMUX_DMAC0_ITRIG_SEL27               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,27)
  #define INPUTMUX_DMAC0_ITRIG_SEL27_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,27)
  #define INPUTMUX_DMAC0_ITRIG_SEL28               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,28)
  #define INPUTMUX_DMAC0_ITRIG_SEL28_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,28)
  #define INPUTMUX_DMAC0_ITRIG_SEL29               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,29)
  #define INPUTMUX_DMAC0_ITRIG_SEL29_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,29)
  #define INPUTMUX_DMAC0_ITRIG_SEL30               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,30)
  #define INPUTMUX_DMAC0_ITRIG_SEL30_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,30)
  #define INPUTMUX_DMAC0_ITRIG_SEL31               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,31)
  #define INPUTMUX_DMAC0_ITRIG_SEL31_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,31)
  #define INPUTMUX_DMAC0_ITRIG_SEL32               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,32)
  #define INPUTMUX_DMAC0_ITRIG_SEL32_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,32)
  #define INPUTMUX_DMAC0_ITRIG_SEL33               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,33)
  #define INPUTMUX_DMAC0_ITRIG_SEL33_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,33)
  #define INPUTMUX_DMAC0_ITRIG_SEL34               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,34)
  #define INPUTMUX_DMAC0_ITRIG_SEL34_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,34)
  #define INPUTMUX_DMAC0_ITRIG_SEL35               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,35)
  #define INPUTMUX_DMAC0_ITRIG_SEL35_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,35)
  #define INPUTMUX_DMAC0_ITRIG_SEL36               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,36)
  #define INPUTMUX_DMAC0_ITRIG_SEL36_NS            INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,36)
  #define INPUTMUX_DMAC0_OTRIG_SEL0                INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC0_OTRIG_SEL0_NS             INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_DMAC0_OTRIG_SEL1                INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC0_OTRIG_SEL1_NS             INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_DMAC0_OTRIG_SEL2                INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC0_OTRIG_SEL2_NS             INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,2)
  #define INPUTMUX_DMAC0_OTRIG_SEL3                INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC0_OTRIG_SEL3_NS             INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,3)
  #define INPUTMUX_DMAC0_CHMUX_SEL0                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC0_CHMUX_SEL0_NS             INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_DMAC0_CHMUX_SEL1                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC0_CHMUX_SEL1_NS             INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_DMAC0_CHMUX_SEL2                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC0_CHMUX_SEL2_NS             INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,2)
  #define INPUTMUX_DMAC0_CHMUX_SEL3                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC0_CHMUX_SEL3_NS             INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,3)
  #define INPUTMUX_DMAC0_CHMUX_SEL4                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_DMAC0_CHMUX_SEL4_NS             INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,4)
  #define INPUTMUX_DMAC0_CHMUX_SEL5                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_DMAC0_CHMUX_SEL5_NS             INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,5)
  #define INPUTMUX_DMAC0_CHMUX_SEL6                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_DMAC0_CHMUX_SEL6_NS             INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,6)
  #define INPUTMUX_DMAC0_CHMUX_SEL7                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DMAC0_CHMUX_SEL7_NS             INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,7)
  #define INPUTMUX_DMAC0_CHMUX_SEL8                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,8)
  #define INPUTMUX_DMAC0_CHMUX_SEL8_NS             INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,8)
  #define INPUTMUX_DMAC0_CHMUX_SEL9                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,9)
  #define INPUTMUX_DMAC0_CHMUX_SEL9_NS             INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,9)
  #define INPUTMUX_DMAC0_CHMUX_SEL10               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,10)
  #define INPUTMUX_DMAC0_CHMUX_SEL10_NS            INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,10)
  #define INPUTMUX_DMAC0_CHMUX_SEL11               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,11)
  #define INPUTMUX_DMAC0_CHMUX_SEL11_NS            INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,11)
  #define INPUTMUX_DMAC0_CHMUX_SEL12               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,12)
  #define INPUTMUX_DMAC0_CHMUX_SEL12_NS            INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,12)
  #define INPUTMUX_DMAC0_CHMUX_SEL13               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,13)
  #define INPUTMUX_DMAC0_CHMUX_SEL13_NS            INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,13)
  #define INPUTMUX_DMAC0_CHMUX_SEL14               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,14)
  #define INPUTMUX_DMAC0_CHMUX_SEL14_NS            INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,14)
  #define INPUTMUX_DMAC0_CHMUX_SEL15               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,15)
  #define INPUTMUX_DMAC0_CHMUX_SEL15_NS            INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,15)
  #define INPUTMUX_DMAC1_ITRIG_SEL0                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC1_ITRIG_SEL0_NS             INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_DMAC1_ITRIG_SEL1                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC1_ITRIG_SEL1_NS             INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_DMAC1_ITRIG_SEL2                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC1_ITRIG_SEL2_NS             INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,2)
  #define INPUTMUX_DMAC1_ITRIG_SEL3                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC1_ITRIG_SEL3_NS             INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,3)
  #define INPUTMUX_DMAC1_ITRIG_SEL4                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_DMAC1_ITRIG_SEL4_NS             INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,4)
  #define INPUTMUX_DMAC1_ITRIG_SEL5                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_DMAC1_ITRIG_SEL5_NS             INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,5)
  #define INPUTMUX_DMAC1_ITRIG_SEL6                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_DMAC1_ITRIG_SEL6_NS             INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,6)
  #define INPUTMUX_DMAC1_ITRIG_SEL7                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DMAC1_ITRIG_SEL7_NS             INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,7)
  #define INPUTMUX_DMAC1_ITRIG_SEL8                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,8)
  #define INPUTMUX_DMAC1_ITRIG_SEL8_NS             INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,8)
  #define INPUTMUX_DMAC1_ITRIG_SEL9                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,9)
  #define INPUTMUX_DMAC1_ITRIG_SEL9_NS             INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,9)
  #define INPUTMUX_DMAC1_ITRIG_SEL10               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,10)
  #define INPUTMUX_DMAC1_ITRIG_SEL10_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,10)
  #define INPUTMUX_DMAC1_ITRIG_SEL11               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,11)
  #define INPUTMUX_DMAC1_ITRIG_SEL11_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,11)
  #define INPUTMUX_DMAC1_ITRIG_SEL12               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,12)
  #define INPUTMUX_DMAC1_ITRIG_SEL12_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,12)
  #define INPUTMUX_DMAC1_ITRIG_SEL13               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,13)
  #define INPUTMUX_DMAC1_ITRIG_SEL13_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,13)
  #define INPUTMUX_DMAC1_ITRIG_SEL14               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,14)
  #define INPUTMUX_DMAC1_ITRIG_SEL14_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,14)
  #define INPUTMUX_DMAC1_ITRIG_SEL15               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,15)
  #define INPUTMUX_DMAC1_ITRIG_SEL15_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,15)
  #define INPUTMUX_DMAC1_ITRIG_SEL16               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,16)
  #define INPUTMUX_DMAC1_ITRIG_SEL16_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,16)
  #define INPUTMUX_DMAC1_ITRIG_SEL17               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,17)
  #define INPUTMUX_DMAC1_ITRIG_SEL17_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,17)
  #define INPUTMUX_DMAC1_ITRIG_SEL18               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,18)
  #define INPUTMUX_DMAC1_ITRIG_SEL18_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,18)
  #define INPUTMUX_DMAC1_ITRIG_SEL19               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,19)
  #define INPUTMUX_DMAC1_ITRIG_SEL19_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,19)
  #define INPUTMUX_DMAC1_ITRIG_SEL20               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,20)
  #define INPUTMUX_DMAC1_ITRIG_SEL20_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,20)
  #define INPUTMUX_DMAC1_ITRIG_SEL21               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,21)
  #define INPUTMUX_DMAC1_ITRIG_SEL21_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,21)
  #define INPUTMUX_DMAC1_ITRIG_SEL22               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,22)
  #define INPUTMUX_DMAC1_ITRIG_SEL22_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,22)
  #define INPUTMUX_DMAC1_ITRIG_SEL23               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,23)
  #define INPUTMUX_DMAC1_ITRIG_SEL23_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,23)
  #define INPUTMUX_DMAC1_ITRIG_SEL24               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,24)
  #define INPUTMUX_DMAC1_ITRIG_SEL24_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,24)
  #define INPUTMUX_DMAC1_ITRIG_SEL25               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,25)
  #define INPUTMUX_DMAC1_ITRIG_SEL25_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,25)
  #define INPUTMUX_DMAC1_ITRIG_SEL26               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,26)
  #define INPUTMUX_DMAC1_ITRIG_SEL26_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,26)
  #define INPUTMUX_DMAC1_ITRIG_SEL27               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,27)
  #define INPUTMUX_DMAC1_ITRIG_SEL27_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,27)
  #define INPUTMUX_DMAC1_ITRIG_SEL28               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,28)
  #define INPUTMUX_DMAC1_ITRIG_SEL28_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,28)
  #define INPUTMUX_DMAC1_ITRIG_SEL29               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,29)
  #define INPUTMUX_DMAC1_ITRIG_SEL29_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,29)
  #define INPUTMUX_DMAC1_ITRIG_SEL30               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,30)
  #define INPUTMUX_DMAC1_ITRIG_SEL30_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,30)
  #define INPUTMUX_DMAC1_ITRIG_SEL31               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,31)
  #define INPUTMUX_DMAC1_ITRIG_SEL31_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,31)
  #define INPUTMUX_DMAC1_ITRIG_SEL32               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,32)
  #define INPUTMUX_DMAC1_ITRIG_SEL32_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,32)
  #define INPUTMUX_DMAC1_ITRIG_SEL33               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,33)
  #define INPUTMUX_DMAC1_ITRIG_SEL33_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,33)
  #define INPUTMUX_DMAC1_ITRIG_SEL34               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,34)
  #define INPUTMUX_DMAC1_ITRIG_SEL34_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,34)
  #define INPUTMUX_DMAC1_ITRIG_SEL35               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,35)
  #define INPUTMUX_DMAC1_ITRIG_SEL35_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,35)
  #define INPUTMUX_DMAC1_ITRIG_SEL36               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,36)
  #define INPUTMUX_DMAC1_ITRIG_SEL36_NS            INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,36)
  #define INPUTMUX_DMAC1_OTRIG_SEL0                INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC1_OTRIG_SEL0_NS             INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_DMAC1_OTRIG_SEL1                INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC1_OTRIG_SEL1_NS             INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_DMAC1_OTRIG_SEL2                INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC1_OTRIG_SEL2_NS             INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,2)
  #define INPUTMUX_DMAC1_OTRIG_SEL3                INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC1_OTRIG_SEL3_NS             INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,3)
  #define INPUTMUX_DMAC1_CHMUX_SEL0                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC1_CHMUX_SEL0_NS             INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_DMAC1_CHMUX_SEL1                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC1_CHMUX_SEL1_NS             INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_DMAC1_CHMUX_SEL2                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC1_CHMUX_SEL2_NS             INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,2)
  #define INPUTMUX_DMAC1_CHMUX_SEL3                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC1_CHMUX_SEL3_NS             INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,3)
  #define INPUTMUX_DMAC1_CHMUX_SEL4                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_DMAC1_CHMUX_SEL4_NS             INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,4)
  #define INPUTMUX_DMAC1_CHMUX_SEL5                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_DMAC1_CHMUX_SEL5_NS             INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,5)
  #define INPUTMUX_DMAC1_CHMUX_SEL6                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_DMAC1_CHMUX_SEL6_NS             INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,6)
  #define INPUTMUX_DMAC1_CHMUX_SEL7                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DMAC1_CHMUX_SEL7_NS             INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,7)
  #define INPUTMUX_DMAC1_CHMUX_SEL8                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,8)
  #define INPUTMUX_DMAC1_CHMUX_SEL8_NS             INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,8)
  #define INPUTMUX_DMAC1_CHMUX_SEL9                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,9)
  #define INPUTMUX_DMAC1_CHMUX_SEL9_NS             INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,9)
  #define INPUTMUX_DMAC1_CHMUX_SEL10               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,10)
  #define INPUTMUX_DMAC1_CHMUX_SEL10_NS            INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,10)
  #define INPUTMUX_DMAC1_CHMUX_SEL11               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,11)
  #define INPUTMUX_DMAC1_CHMUX_SEL11_NS            INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,11)
  #define INPUTMUX_DMAC1_CHMUX_SEL12               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,12)
  #define INPUTMUX_DMAC1_CHMUX_SEL12_NS            INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,12)
  #define INPUTMUX_DMAC1_CHMUX_SEL13               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,13)
  #define INPUTMUX_DMAC1_CHMUX_SEL13_NS            INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,13)
  #define INPUTMUX_DMAC1_CHMUX_SEL14               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,14)
  #define INPUTMUX_DMAC1_CHMUX_SEL14_NS            INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,14)
  #define INPUTMUX_DMAC1_CHMUX_SEL15               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,15)
  #define INPUTMUX_DMAC1_CHMUX_SEL15_NS            INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,15)
  #define INPUTMUX_CT32BIT0_CAP0_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,0,0)
  #define INPUTMUX_CT32BIT0_CAP0_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,0,0)
  #define INPUTMUX_CT32BIT0_CAP1_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,0,1)
  #define INPUTMUX_CT32BIT0_CAP1_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,0,1)
  #define INPUTMUX_CT32BIT0_CAP2_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,0,2)
  #define INPUTMUX_CT32BIT0_CAP2_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,0,2)
  #define INPUTMUX_CT32BIT0_CAP3_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,0,3)
  #define INPUTMUX_CT32BIT0_CAP3_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,0,3)
  #define INPUTMUX_CT32BIT1_CAP0_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,1,0)
  #define INPUTMUX_CT32BIT1_CAP0_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,1,0)
  #define INPUTMUX_CT32BIT1_CAP1_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,1,1)
  #define INPUTMUX_CT32BIT1_CAP1_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,1,1)
  #define INPUTMUX_CT32BIT1_CAP2_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,1,2)
  #define INPUTMUX_CT32BIT1_CAP2_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,1,2)
  #define INPUTMUX_CT32BIT1_CAP3_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,1,3)
  #define INPUTMUX_CT32BIT1_CAP3_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,1,3)
  #define INPUTMUX_CT32BIT2_CAP0_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,2,0)
  #define INPUTMUX_CT32BIT2_CAP0_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,2,0)
  #define INPUTMUX_CT32BIT2_CAP1_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,2,1)
  #define INPUTMUX_CT32BIT2_CAP1_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,2,1)
  #define INPUTMUX_CT32BIT2_CAP2_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,2,2)
  #define INPUTMUX_CT32BIT2_CAP2_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,2,2)
  #define INPUTMUX_CT32BIT2_CAP3_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,2,3)
  #define INPUTMUX_CT32BIT2_CAP3_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,2,3)
  #define INPUTMUX_CT32BIT3_CAP0_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,3,0)
  #define INPUTMUX_CT32BIT3_CAP0_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,3,0)
  #define INPUTMUX_CT32BIT3_CAP1_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,3,1)
  #define INPUTMUX_CT32BIT3_CAP1_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,3,1)
  #define INPUTMUX_CT32BIT3_CAP2_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,3,2)
  #define INPUTMUX_CT32BIT3_CAP2_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,3,2)
  #define INPUTMUX_CT32BIT3_CAP3_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,3,3)
  #define INPUTMUX_CT32BIT3_CAP3_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,3,3)
  #define INPUTMUX_CT32BIT4_CAP0_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,4,0)
  #define INPUTMUX_CT32BIT4_CAP0_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,4,0)
  #define INPUTMUX_CT32BIT4_CAP1_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,4,1)
  #define INPUTMUX_CT32BIT4_CAP1_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,4,1)
  #define INPUTMUX_CT32BIT4_CAP2_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,4,2)
  #define INPUTMUX_CT32BIT4_CAP2_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,4,2)
  #define INPUTMUX_CT32BIT4_CAP3_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,4,3)
  #define INPUTMUX_CT32BIT4_CAP3_SEL_NS            INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,4,3)
  #define INPUTMUX_FMEASURE_CH0_SEL                INPUTMUX_FMEASURE_CH_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_FMEASURE_CH0_SEL_NS             INPUTMUX_FMEASURE_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_FMEASURE_CH1_SEL                INPUTMUX_FMEASURE_CH_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_FMEASURE_CH1_SEL_NS             INPUTMUX_FMEASURE_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_SMART_DMA_TRIG_CH0_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_SMART_DMA_TRIG_CH0_SEL_NS       INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,0)
  #define INPUTMUX_SMART_DMA_TRIG_CH1_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_SMART_DMA_TRIG_CH1_SEL_NS       INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,1)
  #define INPUTMUX_SMART_DMA_TRIG_CH2_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_SMART_DMA_TRIG_CH2_SEL_NS       INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,2)
  #define INPUTMUX_SMART_DMA_TRIG_CH3_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_SMART_DMA_TRIG_CH3_SEL_NS       INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,3)
  #define INPUTMUX_SMART_DMA_TRIG_CH4_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_SMART_DMA_TRIG_CH4_SEL_NS       INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,4)
  #define INPUTMUX_SMART_DMA_TRIG_CH5_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_SMART_DMA_TRIG_CH5_SEL_NS       INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,5)
  #define INPUTMUX_SMART_DMA_TRIG_CH6_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_SMART_DMA_TRIG_CH6_SEL_NS       INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,6)
  #define INPUTMUX_SMART_DMA_TRIG_CH7_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_SMART_DMA_TRIG_CH7_SEL_NS       INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,7)
  #define INPUTMUX_DMAC0_REQ_ENA0                  INPUTMUX_DMAC0_REQ_ENA0_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA0_NS               INPUTMUX_DMAC0_REQ_ENA0_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC0_REQ_ENA1                  INPUTMUX_DMAC0_REQ_ENA1_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA1_NS               INPUTMUX_DMAC0_REQ_ENA1_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC0_REQ_ENA0_SET              INPUTMUX_DMAC0_REQ_ENA0_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA0_SET_NS           INPUTMUX_DMAC0_REQ_ENA0_SET_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC0_REQ_ENA1_SET              INPUTMUX_DMAC0_REQ_ENA1_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA1_SET_NS           INPUTMUX_DMAC0_REQ_ENA1_SET_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC0_REQ_ENA0_CLR              INPUTMUX_DMAC0_REQ_ENA0_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA0_CLR_NS           INPUTMUX_DMAC0_REQ_ENA0_CLR_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC0_REQ_ENA1_CLR              INPUTMUX_DMAC0_REQ_ENA1_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA1_CLR_NS           INPUTMUX_DMAC0_REQ_ENA1_CLR_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC1_REQ_ENA0                  INPUTMUX_DMAC1_REQ_ENA0_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA0_NS               INPUTMUX_DMAC1_REQ_ENA0_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC1_REQ_ENA1                  INPUTMUX_DMAC1_REQ_ENA1_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA1_NS               INPUTMUX_DMAC1_REQ_ENA1_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC1_REQ_ENA0_SET              INPUTMUX_DMAC1_REQ_ENA0_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA0_SET_NS           INPUTMUX_DMAC1_REQ_ENA0_SET_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC1_REQ_ENA1_SET              INPUTMUX_DMAC1_REQ_ENA1_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA1_SET_NS           INPUTMUX_DMAC1_REQ_ENA1_SET_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC1_REQ_ENA0_CLR              INPUTMUX_DMAC1_REQ_ENA0_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA0_CLR_NS           INPUTMUX_DMAC1_REQ_ENA0_CLR_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC1_REQ_ENA1_CLR              INPUTMUX_DMAC1_REQ_ENA1_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA1_CLR_NS           INPUTMUX_DMAC1_REQ_ENA1_CLR_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC0_ITRIG_ENA0                INPUTMUX_DMAC0_ITRIG_ENA0_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_ITRIG_ENA0_NS             INPUTMUX_DMAC0_ITRIG_ENA0_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC0_ITRIG_ENA0_SET            INPUTMUX_DMAC0_ITRIG_ENA0_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_ITRIG_ENA0_SET_NS         INPUTMUX_DMAC0_ITRIG_ENA0_SET_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC0_ITRIG_ENA0_CLR            INPUTMUX_DMAC0_ITRIG_ENA0_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_ITRIG_ENA0_CLR_NS         INPUTMUX_DMAC0_ITRIG_ENA0_CLR_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC1_ITRIG_ENA0                INPUTMUX_DMAC1_ITRIG_ENA0_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_ITRIG_ENA0_NS             INPUTMUX_DMAC1_ITRIG_ENA0_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC1_ITRIG_ENA0_SET            INPUTMUX_DMAC1_ITRIG_ENA0_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_ITRIG_ENA0_SET_NS         INPUTMUX_DMAC1_ITRIG_ENA0_SET_REG(INPUTMUX_BASE_PTR_NS)
  #define INPUTMUX_DMAC1_ITRIG_ENA0_CLR            INPUTMUX_DMAC1_ITRIG_ENA0_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_ITRIG_ENA0_CLR_NS         INPUTMUX_DMAC1_ITRIG_ENA0_CLR_REG(INPUTMUX_BASE_PTR_NS)
#else
  /* INPUTMUX */
  #define INPUTMUX_SCT0_IN0_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_SCT0_IN1_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_SCT0_IN2_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_SCT0_IN3_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_SCT0_IN4_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_SCT0_IN5_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_SCT0_IN6_SEL                    INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_PINT_SEL0                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_PINT_SEL1                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_PINT_SEL2                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_PINT_SEL3                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_PINT_SEL4                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_PINT_SEL5                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_PINT_SEL6                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_PINT_SEL7                       INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DSP_INT0_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DSP_INT1_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DSP_INT2_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DSP_INT3_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DSP_INT4_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_DSP_INT5_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_DSP_INT6_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_DSP_INT7_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DSP_INT8_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,8)
  #define INPUTMUX_DSP_INT9_SEL                    INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,9)
  #define INPUTMUX_DSP_INT10_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,10)
  #define INPUTMUX_DSP_INT11_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,11)
  #define INPUTMUX_DSP_INT12_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,12)
  #define INPUTMUX_DSP_INT13_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,13)
  #define INPUTMUX_DSP_INT14_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,14)
  #define INPUTMUX_DSP_INT15_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,15)
  #define INPUTMUX_DSP_INT16_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,16)
  #define INPUTMUX_DSP_INT17_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,17)
  #define INPUTMUX_DSP_INT18_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,18)
  #define INPUTMUX_DSP_INT19_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,19)
  #define INPUTMUX_DSP_INT20_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,20)
  #define INPUTMUX_DSP_INT21_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,21)
  #define INPUTMUX_DSP_INT22_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,22)
  #define INPUTMUX_DSP_INT23_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,23)
  #define INPUTMUX_DSP_INT24_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,24)
  #define INPUTMUX_DSP_INT25_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,25)
  #define INPUTMUX_DSP_INT26_SEL                   INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,26)
  #define INPUTMUX_DMAC0_ITRIG_SEL0                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC0_ITRIG_SEL1                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC0_ITRIG_SEL2                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC0_ITRIG_SEL3                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC0_ITRIG_SEL4                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_DMAC0_ITRIG_SEL5                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_DMAC0_ITRIG_SEL6                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_DMAC0_ITRIG_SEL7                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DMAC0_ITRIG_SEL8                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,8)
  #define INPUTMUX_DMAC0_ITRIG_SEL9                INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,9)
  #define INPUTMUX_DMAC0_ITRIG_SEL10               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,10)
  #define INPUTMUX_DMAC0_ITRIG_SEL11               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,11)
  #define INPUTMUX_DMAC0_ITRIG_SEL12               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,12)
  #define INPUTMUX_DMAC0_ITRIG_SEL13               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,13)
  #define INPUTMUX_DMAC0_ITRIG_SEL14               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,14)
  #define INPUTMUX_DMAC0_ITRIG_SEL15               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,15)
  #define INPUTMUX_DMAC0_ITRIG_SEL16               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,16)
  #define INPUTMUX_DMAC0_ITRIG_SEL17               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,17)
  #define INPUTMUX_DMAC0_ITRIG_SEL18               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,18)
  #define INPUTMUX_DMAC0_ITRIG_SEL19               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,19)
  #define INPUTMUX_DMAC0_ITRIG_SEL20               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,20)
  #define INPUTMUX_DMAC0_ITRIG_SEL21               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,21)
  #define INPUTMUX_DMAC0_ITRIG_SEL22               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,22)
  #define INPUTMUX_DMAC0_ITRIG_SEL23               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,23)
  #define INPUTMUX_DMAC0_ITRIG_SEL24               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,24)
  #define INPUTMUX_DMAC0_ITRIG_SEL25               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,25)
  #define INPUTMUX_DMAC0_ITRIG_SEL26               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,26)
  #define INPUTMUX_DMAC0_ITRIG_SEL27               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,27)
  #define INPUTMUX_DMAC0_ITRIG_SEL28               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,28)
  #define INPUTMUX_DMAC0_ITRIG_SEL29               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,29)
  #define INPUTMUX_DMAC0_ITRIG_SEL30               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,30)
  #define INPUTMUX_DMAC0_ITRIG_SEL31               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,31)
  #define INPUTMUX_DMAC0_ITRIG_SEL32               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,32)
  #define INPUTMUX_DMAC0_ITRIG_SEL33               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,33)
  #define INPUTMUX_DMAC0_ITRIG_SEL34               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,34)
  #define INPUTMUX_DMAC0_ITRIG_SEL35               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,35)
  #define INPUTMUX_DMAC0_ITRIG_SEL36               INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,36)
  #define INPUTMUX_DMAC0_OTRIG_SEL0                INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC0_OTRIG_SEL1                INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC0_OTRIG_SEL2                INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC0_OTRIG_SEL3                INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC0_CHMUX_SEL0                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC0_CHMUX_SEL1                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC0_CHMUX_SEL2                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC0_CHMUX_SEL3                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC0_CHMUX_SEL4                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_DMAC0_CHMUX_SEL5                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_DMAC0_CHMUX_SEL6                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_DMAC0_CHMUX_SEL7                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DMAC0_CHMUX_SEL8                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,8)
  #define INPUTMUX_DMAC0_CHMUX_SEL9                INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,9)
  #define INPUTMUX_DMAC0_CHMUX_SEL10               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,10)
  #define INPUTMUX_DMAC0_CHMUX_SEL11               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,11)
  #define INPUTMUX_DMAC0_CHMUX_SEL12               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,12)
  #define INPUTMUX_DMAC0_CHMUX_SEL13               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,13)
  #define INPUTMUX_DMAC0_CHMUX_SEL14               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,14)
  #define INPUTMUX_DMAC0_CHMUX_SEL15               INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,15)
  #define INPUTMUX_DMAC1_ITRIG_SEL0                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC1_ITRIG_SEL1                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC1_ITRIG_SEL2                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC1_ITRIG_SEL3                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC1_ITRIG_SEL4                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_DMAC1_ITRIG_SEL5                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_DMAC1_ITRIG_SEL6                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_DMAC1_ITRIG_SEL7                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DMAC1_ITRIG_SEL8                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,8)
  #define INPUTMUX_DMAC1_ITRIG_SEL9                INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,9)
  #define INPUTMUX_DMAC1_ITRIG_SEL10               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,10)
  #define INPUTMUX_DMAC1_ITRIG_SEL11               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,11)
  #define INPUTMUX_DMAC1_ITRIG_SEL12               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,12)
  #define INPUTMUX_DMAC1_ITRIG_SEL13               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,13)
  #define INPUTMUX_DMAC1_ITRIG_SEL14               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,14)
  #define INPUTMUX_DMAC1_ITRIG_SEL15               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,15)
  #define INPUTMUX_DMAC1_ITRIG_SEL16               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,16)
  #define INPUTMUX_DMAC1_ITRIG_SEL17               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,17)
  #define INPUTMUX_DMAC1_ITRIG_SEL18               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,18)
  #define INPUTMUX_DMAC1_ITRIG_SEL19               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,19)
  #define INPUTMUX_DMAC1_ITRIG_SEL20               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,20)
  #define INPUTMUX_DMAC1_ITRIG_SEL21               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,21)
  #define INPUTMUX_DMAC1_ITRIG_SEL22               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,22)
  #define INPUTMUX_DMAC1_ITRIG_SEL23               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,23)
  #define INPUTMUX_DMAC1_ITRIG_SEL24               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,24)
  #define INPUTMUX_DMAC1_ITRIG_SEL25               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,25)
  #define INPUTMUX_DMAC1_ITRIG_SEL26               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,26)
  #define INPUTMUX_DMAC1_ITRIG_SEL27               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,27)
  #define INPUTMUX_DMAC1_ITRIG_SEL28               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,28)
  #define INPUTMUX_DMAC1_ITRIG_SEL29               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,29)
  #define INPUTMUX_DMAC1_ITRIG_SEL30               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,30)
  #define INPUTMUX_DMAC1_ITRIG_SEL31               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,31)
  #define INPUTMUX_DMAC1_ITRIG_SEL32               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,32)
  #define INPUTMUX_DMAC1_ITRIG_SEL33               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,33)
  #define INPUTMUX_DMAC1_ITRIG_SEL34               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,34)
  #define INPUTMUX_DMAC1_ITRIG_SEL35               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,35)
  #define INPUTMUX_DMAC1_ITRIG_SEL36               INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,36)
  #define INPUTMUX_DMAC1_OTRIG_SEL0                INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC1_OTRIG_SEL1                INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC1_OTRIG_SEL2                INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC1_OTRIG_SEL3                INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC1_CHMUX_SEL0                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_DMAC1_CHMUX_SEL1                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_DMAC1_CHMUX_SEL2                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_DMAC1_CHMUX_SEL3                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_DMAC1_CHMUX_SEL4                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_DMAC1_CHMUX_SEL5                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_DMAC1_CHMUX_SEL6                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_DMAC1_CHMUX_SEL7                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DMAC1_CHMUX_SEL8                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,8)
  #define INPUTMUX_DMAC1_CHMUX_SEL9                INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,9)
  #define INPUTMUX_DMAC1_CHMUX_SEL10               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,10)
  #define INPUTMUX_DMAC1_CHMUX_SEL11               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,11)
  #define INPUTMUX_DMAC1_CHMUX_SEL12               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,12)
  #define INPUTMUX_DMAC1_CHMUX_SEL13               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,13)
  #define INPUTMUX_DMAC1_CHMUX_SEL14               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,14)
  #define INPUTMUX_DMAC1_CHMUX_SEL15               INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,15)
  #define INPUTMUX_CT32BIT0_CAP0_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,0,0)
  #define INPUTMUX_CT32BIT0_CAP1_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,0,1)
  #define INPUTMUX_CT32BIT0_CAP2_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,0,2)
  #define INPUTMUX_CT32BIT0_CAP3_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,0,3)
  #define INPUTMUX_CT32BIT1_CAP0_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,1,0)
  #define INPUTMUX_CT32BIT1_CAP1_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,1,1)
  #define INPUTMUX_CT32BIT1_CAP2_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,1,2)
  #define INPUTMUX_CT32BIT1_CAP3_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,1,3)
  #define INPUTMUX_CT32BIT2_CAP0_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,2,0)
  #define INPUTMUX_CT32BIT2_CAP1_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,2,1)
  #define INPUTMUX_CT32BIT2_CAP2_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,2,2)
  #define INPUTMUX_CT32BIT2_CAP3_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,2,3)
  #define INPUTMUX_CT32BIT3_CAP0_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,3,0)
  #define INPUTMUX_CT32BIT3_CAP1_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,3,1)
  #define INPUTMUX_CT32BIT3_CAP2_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,3,2)
  #define INPUTMUX_CT32BIT3_CAP3_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,3,3)
  #define INPUTMUX_CT32BIT4_CAP0_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,4,0)
  #define INPUTMUX_CT32BIT4_CAP1_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,4,1)
  #define INPUTMUX_CT32BIT4_CAP2_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,4,2)
  #define INPUTMUX_CT32BIT4_CAP3_SEL               INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,4,3)
  #define INPUTMUX_FMEASURE_CH0_SEL                INPUTMUX_FMEASURE_CH_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_FMEASURE_CH1_SEL                INPUTMUX_FMEASURE_CH_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_SMART_DMA_TRIG_CH0_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,0)
  #define INPUTMUX_SMART_DMA_TRIG_CH1_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,1)
  #define INPUTMUX_SMART_DMA_TRIG_CH2_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,2)
  #define INPUTMUX_SMART_DMA_TRIG_CH3_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,3)
  #define INPUTMUX_SMART_DMA_TRIG_CH4_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,4)
  #define INPUTMUX_SMART_DMA_TRIG_CH5_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,5)
  #define INPUTMUX_SMART_DMA_TRIG_CH6_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,6)
  #define INPUTMUX_SMART_DMA_TRIG_CH7_SEL          INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,7)
  #define INPUTMUX_DMAC0_REQ_ENA0                  INPUTMUX_DMAC0_REQ_ENA0_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA1                  INPUTMUX_DMAC0_REQ_ENA1_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA0_SET              INPUTMUX_DMAC0_REQ_ENA0_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA1_SET              INPUTMUX_DMAC0_REQ_ENA1_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA0_CLR              INPUTMUX_DMAC0_REQ_ENA0_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_REQ_ENA1_CLR              INPUTMUX_DMAC0_REQ_ENA1_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA0                  INPUTMUX_DMAC1_REQ_ENA0_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA1                  INPUTMUX_DMAC1_REQ_ENA1_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA0_SET              INPUTMUX_DMAC1_REQ_ENA0_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA1_SET              INPUTMUX_DMAC1_REQ_ENA1_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA0_CLR              INPUTMUX_DMAC1_REQ_ENA0_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_REQ_ENA1_CLR              INPUTMUX_DMAC1_REQ_ENA1_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_ITRIG_ENA0                INPUTMUX_DMAC0_ITRIG_ENA0_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_ITRIG_ENA0_SET            INPUTMUX_DMAC0_ITRIG_ENA0_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC0_ITRIG_ENA0_CLR            INPUTMUX_DMAC0_ITRIG_ENA0_CLR_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_ITRIG_ENA0                INPUTMUX_DMAC1_ITRIG_ENA0_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_ITRIG_ENA0_SET            INPUTMUX_DMAC1_ITRIG_ENA0_SET_REG(INPUTMUX_BASE_PTR)
  #define INPUTMUX_DMAC1_ITRIG_ENA0_CLR            INPUTMUX_DMAC1_ITRIG_ENA0_CLR_REG(INPUTMUX_BASE_PTR)
#endif

/* INPUTMUX - Register array accessors */
#define INPUTMUX_SCT0_IN_SEL(index)              INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_SCT0_IN_SEL_NS(index)           INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_SCT0_IN_SEL(index)              INPUTMUX_SCT0_IN_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_PINT_SEL(index)                 INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_PINT_SEL_NS(index)              INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_PINT_SEL(index)                 INPUTMUX_PINT_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DSP_INT_SEL(index)              INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DSP_INT_SEL_NS(index)           INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_DSP_INT_SEL(index)              INPUTMUX_DSP_INT_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC0_ITRIG_SEL(index)          INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC0_ITRIG_SEL_NS(index)       INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_DMAC0_ITRIG_SEL(index)          INPUTMUX_DMAC0_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC0_OTRIG_SEL(index)          INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC0_OTRIG_SEL_NS(index)       INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_DMAC0_OTRIG_SEL(index)          INPUTMUX_DMAC0_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC0_CHMUX_SEL(index)          INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC0_CHMUX_SEL_NS(index)       INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_DMAC0_CHMUX_SEL(index)          INPUTMUX_DMAC0_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC1_ITRIG_SEL(index)          INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC1_ITRIG_SEL_NS(index)       INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_DMAC1_ITRIG_SEL(index)          INPUTMUX_DMAC1_ITRIG_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC1_OTRIG_SEL(index)          INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC1_OTRIG_SEL_NS(index)       INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_DMAC1_OTRIG_SEL(index)          INPUTMUX_DMAC1_OTRIG_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC1_CHMUX_SEL(index)          INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_DMAC1_CHMUX_SEL_NS(index)       INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_DMAC1_CHMUX_SEL(index)          INPUTMUX_DMAC1_CHMUX_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_CT32BIT_CAP_SEL(index,index2)   INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,index,index2)
#define INPUTMUX_CT32BIT_CAP_SEL_NS(index,index2) INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR_NS,index,index2)
#define INPUTMUX_CT32BIT_CAP_SEL(index,index2)   INPUTMUX_CT32BIT_CAP_SEL_REG(INPUTMUX_BASE_PTR,index,index2)
#define INPUTMUX_FMEASURE_CH_SEL(index)          INPUTMUX_FMEASURE_CH_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_FMEASURE_CH_SEL_NS(index)       INPUTMUX_FMEASURE_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_FMEASURE_CH_SEL(index)          INPUTMUX_FMEASURE_CH_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_SMART_DMA_TRIG_CH_SEL(index)    INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,index)
#define INPUTMUX_SMART_DMA_TRIG_CH_SEL_NS(index) INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR_NS,index)
#define INPUTMUX_SMART_DMA_TRIG_CH_SEL(index)    INPUTMUX_SMART_DMA_TRIG_CH_SEL_REG(INPUTMUX_BASE_PTR,index)

/*!
 * @}
 */ /* end of group INPUTMUX_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group INPUTMUX_Peripheral */


/* ----------------------------------------------------------------------------
   -- IOPCTL
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOPCTL_Peripheral IOPCTL
 * @{
 */

/** IOPCTL - Peripheral register structure */
typedef struct IOPCTL_MemMap {
  uint32_t PIO[7][32];                             /**< IOPCTL configuration, array offset: 0x0, array step: index*0x80, index2*0x4 */
  uint8_t RESERVED_0[128];
  uint32_t FC15_I2C_SCL;                           /**< Flexcomm 15 SCL, offset: 0x400 */
  uint32_t FC15_I2C_SDA;                           /**< Flexcomm 15 SDA, offset: 0x404 */
} volatile *IOPCTL_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- IOPCTL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOPCTL_Register_Accessor_Macros IOPCTL - Register accessor macros
 * @{
 */


/* IOPCTL - Register accessors */
#define IOPCTL_PIO_REG(base,index,index2)        ((base)->PIO[index][index2])
#define IOPCTL_FC15_I2C_SCL_REG(base)            ((base)->FC15_I2C_SCL)
#define IOPCTL_FC15_I2C_SDA_REG(base)            ((base)->FC15_I2C_SDA)

/*!
 * @}
 */ /* end of group IOPCTL_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- IOPCTL Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOPCTL_Register_Masks IOPCTL Register Masks
 * @{
 */

/*! @name PIO - IOPCTL configuration */
/*! @{ */
#define IOPCTL_PIO_FSEL_MASK                     (0xFU)
#define IOPCTL_PIO_FSEL_SHIFT                    (0U)
/*! FSEL - Function Selector (Digital Function)
 *  0b0000..Function 0
 *  0b0001..Function 1
 *  0b0010..Function 2
 *  0b0011..Function 3
 *  0b0100..Function 4
 *  0b0101..Function 5
 *  0b0110..Function 6
 *  0b0111..Function 7
 *  0b1000..Function 8
 *  0b1001..Function 9
 *  0b1010..Function 10
 *  0b1011..Function 11
 *  0b1100..Function 12
 *  0b1101..Function 13
 *  0b1110..Function 14
 *  0b1111..Function 15
 */
#define IOPCTL_PIO_FSEL(x)                       (((uint32_t)(((uint32_t)(x)) << IOPCTL_PIO_FSEL_SHIFT)) & IOPCTL_PIO_FSEL_MASK)
#define IOPCTL_PIO_PUPDENA_MASK                  (0x10U)
#define IOPCTL_PIO_PUPDENA_SHIFT                 (4U)
#define IOPCTL_PIO_PUPDSEL_MASK                  (0x20U)
#define IOPCTL_PIO_PUPDSEL_SHIFT                 (5U)
#define IOPCTL_PIO_IBENA_MASK                    (0x40U)
#define IOPCTL_PIO_IBENA_SHIFT                   (6U)
#define IOPCTL_PIO_SLEWRATE_MASK                 (0x80U)
#define IOPCTL_PIO_SLEWRATE_SHIFT                (7U)
#define IOPCTL_PIO_FULLDRIVE_MASK                (0x100U)
#define IOPCTL_PIO_FULLDRIVE_SHIFT               (8U)
#define IOPCTL_PIO_AMENA_MASK                    (0x200U)
#define IOPCTL_PIO_AMENA_SHIFT                   (9U)
#define IOPCTL_PIO_ODENA_MASK                    (0x400U)
#define IOPCTL_PIO_ODENA_SHIFT                   (10U)
#define IOPCTL_PIO_IIENA_MASK                    (0x800U)
#define IOPCTL_PIO_IIENA_SHIFT                   (11U)
/*! @} */

/* The count of IOPCTL_PIO */
#define IOPCTL_PIO_COUNT                         (7U)

/* The count of IOPCTL_PIO */
#define IOPCTL_PIO_COUNT2                        (32U)

/*! @name FC15_I2C_SCL - Flexcomm 15 SCL */
/*! @{ */
#define IOPCTL_FC15_I2C_SCL_FSEL_MASK            (0xFU)
#define IOPCTL_FC15_I2C_SCL_FSEL_SHIFT           (0U)
/*! FSEL - Function Selector (Digital Function)
 *  0b0000..Function 0
 *  0b0001..Function 1
 *  0b0010..Function 2
 *  0b0011..Function 3
 *  0b0100..Function 4
 *  0b0101..Function 5
 *  0b0110..Function 6
 *  0b0111..Function 7
 *  0b1000..Function 8
 *  0b1001..Function 9
 *  0b1010..Function 10
 *  0b1011..Function 11
 *  0b1100..Function 12
 *  0b1101..Function 13
 *  0b1110..Function 14
 *  0b1111..Function 15
 */
#define IOPCTL_FC15_I2C_SCL_FSEL(x)              (((uint32_t)(((uint32_t)(x)) << IOPCTL_FC15_I2C_SCL_FSEL_SHIFT)) & IOPCTL_FC15_I2C_SCL_FSEL_MASK)
#define IOPCTL_FC15_I2C_SCL_PUPDENA_MASK         (0x10U)
#define IOPCTL_FC15_I2C_SCL_PUPDENA_SHIFT        (4U)
#define IOPCTL_FC15_I2C_SCL_PUPDSEL_MASK         (0x20U)
#define IOPCTL_FC15_I2C_SCL_PUPDSEL_SHIFT        (5U)
#define IOPCTL_FC15_I2C_SCL_IBENA_MASK           (0x40U)
#define IOPCTL_FC15_I2C_SCL_IBENA_SHIFT          (6U)
#define IOPCTL_FC15_I2C_SCL_SLEWRATE_MASK        (0x80U)
#define IOPCTL_FC15_I2C_SCL_SLEWRATE_SHIFT       (7U)
#define IOPCTL_FC15_I2C_SCL_FULLDRIVE_MASK       (0x100U)
#define IOPCTL_FC15_I2C_SCL_FULLDRIVE_SHIFT      (8U)
#define IOPCTL_FC15_I2C_SCL_AMENA_MASK           (0x200U)
#define IOPCTL_FC15_I2C_SCL_AMENA_SHIFT          (9U)
#define IOPCTL_FC15_I2C_SCL_ODENA_MASK           (0x400U)
#define IOPCTL_FC15_I2C_SCL_ODENA_SHIFT          (10U)
#define IOPCTL_FC15_I2C_SCL_IIENA_MASK           (0x800U)
#define IOPCTL_FC15_I2C_SCL_IIENA_SHIFT          (11U)
/*! @} */

/*! @name FC15_I2C_SDA - Flexcomm 15 SDA */
/*! @{ */
#define IOPCTL_FC15_I2C_SDA_FSEL_MASK            (0xFU)
#define IOPCTL_FC15_I2C_SDA_FSEL_SHIFT           (0U)
/*! FSEL - Function Selector (Digital Function)
 *  0b0000..Function 0
 *  0b0001..Function 1
 *  0b0010..Function 2
 *  0b0011..Function 3
 *  0b0100..Function 4
 *  0b0101..Function 5
 *  0b0110..Function 6
 *  0b0111..Function 7
 *  0b1000..Function 8
 *  0b1001..Function 9
 *  0b1010..Function 10
 *  0b1011..Function 11
 *  0b1100..Function 12
 *  0b1101..Function 13
 *  0b1110..Function 14
 *  0b1111..Function 15
 */
#define IOPCTL_FC15_I2C_SDA_FSEL(x)              (((uint32_t)(((uint32_t)(x)) << IOPCTL_FC15_I2C_SDA_FSEL_SHIFT)) & IOPCTL_FC15_I2C_SDA_FSEL_MASK)
#define IOPCTL_FC15_I2C_SDA_PUPDENA_MASK         (0x10U)
#define IOPCTL_FC15_I2C_SDA_PUPDENA_SHIFT        (4U)
#define IOPCTL_FC15_I2C_SDA_PUPDSEL_MASK         (0x20U)
#define IOPCTL_FC15_I2C_SDA_PUPDSEL_SHIFT        (5U)
#define IOPCTL_FC15_I2C_SDA_IBENA_MASK           (0x40U)
#define IOPCTL_FC15_I2C_SDA_IBENA_SHIFT          (6U)
#define IOPCTL_FC15_I2C_SDA_SLEWRATE_MASK        (0x80U)
#define IOPCTL_FC15_I2C_SDA_SLEWRATE_SHIFT       (7U)
#define IOPCTL_FC15_I2C_SDA_FULLDRIVE_MASK       (0x100U)
#define IOPCTL_FC15_I2C_SDA_FULLDRIVE_SHIFT      (8U)
#define IOPCTL_FC15_I2C_SDA_AMENA_MASK           (0x200U)
#define IOPCTL_FC15_I2C_SDA_AMENA_SHIFT          (9U)
#define IOPCTL_FC15_I2C_SDA_ODENA_MASK           (0x400U)
#define IOPCTL_FC15_I2C_SDA_ODENA_SHIFT          (10U)
#define IOPCTL_FC15_I2C_SDA_IIENA_MASK           (0x800U)
#define IOPCTL_FC15_I2C_SDA_IIENA_SHIFT          (11U)
/*! @} */


/*!
 * @}
 */ /* end of group IOPCTL_Register_Masks */


/* IOPCTL - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral IOPCTL base pointer */
  #define IOPCTL_BASE_PTR                          ((IOPCTL_MemMapPtr)0x50004000u)
  /** Peripheral IOPCTL base pointer */
  #define IOPCTL_BASE_PTR_NS                       ((IOPCTL_MemMapPtr)0x40004000u)
  /** Array initializer of IOPCTL peripheral base pointers */
  #define IOPCTL_BASE_PTRS                         { IOPCTL_BASE_PTR }
  /** Array initializer of IOPCTL peripheral base pointers */
  #define IOPCTL_BASE_PTRS_NS                      { IOPCTL_BASE_PTR_NS }
#else
  /** Peripheral IOPCTL base pointer */
  #define IOPCTL_BASE_PTR                          ((IOPCTL_MemMapPtr)0x40004000u)
  /** Array initializer of IOPCTL peripheral base pointers */
  #define IOPCTL_BASE_PTRS                         { IOPCTL_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- IOPCTL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOPCTL_Register_Accessor_Macros IOPCTL - Register accessor macros
 * @{
 */


/* IOPCTL - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* IOPCTL */
  #define IOPCTL_PIO0_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,0)
  #define IOPCTL_PIO0_0_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,0)
  #define IOPCTL_PIO0_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,1)
  #define IOPCTL_PIO0_1_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,1)
  #define IOPCTL_PIO0_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,2)
  #define IOPCTL_PIO0_2_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,2)
  #define IOPCTL_PIO0_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,3)
  #define IOPCTL_PIO0_3_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,3)
  #define IOPCTL_PIO0_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,4)
  #define IOPCTL_PIO0_4_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,4)
  #define IOPCTL_PIO0_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,5)
  #define IOPCTL_PIO0_5_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,5)
  #define IOPCTL_PIO0_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,6)
  #define IOPCTL_PIO0_6_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,6)
  #define IOPCTL_PIO0_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,7)
  #define IOPCTL_PIO0_7_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,7)
  #define IOPCTL_PIO0_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,8)
  #define IOPCTL_PIO0_8_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,8)
  #define IOPCTL_PIO0_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,9)
  #define IOPCTL_PIO0_9_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,9)
  #define IOPCTL_PIO0_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,10)
  #define IOPCTL_PIO0_10_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,10)
  #define IOPCTL_PIO0_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,11)
  #define IOPCTL_PIO0_11_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,11)
  #define IOPCTL_PIO0_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,12)
  #define IOPCTL_PIO0_12_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,12)
  #define IOPCTL_PIO0_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,13)
  #define IOPCTL_PIO0_13_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,13)
  #define IOPCTL_PIO0_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,14)
  #define IOPCTL_PIO0_14_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,14)
  #define IOPCTL_PIO0_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,15)
  #define IOPCTL_PIO0_15_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,15)
  #define IOPCTL_PIO0_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,16)
  #define IOPCTL_PIO0_16_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,16)
  #define IOPCTL_PIO0_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,17)
  #define IOPCTL_PIO0_17_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,17)
  #define IOPCTL_PIO0_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,18)
  #define IOPCTL_PIO0_18_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,18)
  #define IOPCTL_PIO0_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,19)
  #define IOPCTL_PIO0_19_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,19)
  #define IOPCTL_PIO0_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,20)
  #define IOPCTL_PIO0_20_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,20)
  #define IOPCTL_PIO0_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,21)
  #define IOPCTL_PIO0_21_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,21)
  #define IOPCTL_PIO0_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,22)
  #define IOPCTL_PIO0_22_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,22)
  #define IOPCTL_PIO0_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,23)
  #define IOPCTL_PIO0_23_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,23)
  #define IOPCTL_PIO0_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,24)
  #define IOPCTL_PIO0_24_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,24)
  #define IOPCTL_PIO0_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,25)
  #define IOPCTL_PIO0_25_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,25)
  #define IOPCTL_PIO0_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,26)
  #define IOPCTL_PIO0_26_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,26)
  #define IOPCTL_PIO0_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,27)
  #define IOPCTL_PIO0_27_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,27)
  #define IOPCTL_PIO0_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,28)
  #define IOPCTL_PIO0_28_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,28)
  #define IOPCTL_PIO0_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,29)
  #define IOPCTL_PIO0_29_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,29)
  #define IOPCTL_PIO0_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,30)
  #define IOPCTL_PIO0_30_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,30)
  #define IOPCTL_PIO0_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,31)
  #define IOPCTL_PIO0_31_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,0,31)
  #define IOPCTL_PIO1_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,0)
  #define IOPCTL_PIO1_0_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,0)
  #define IOPCTL_PIO1_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,1)
  #define IOPCTL_PIO1_1_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,1)
  #define IOPCTL_PIO1_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,2)
  #define IOPCTL_PIO1_2_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,2)
  #define IOPCTL_PIO1_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,3)
  #define IOPCTL_PIO1_3_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,3)
  #define IOPCTL_PIO1_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,4)
  #define IOPCTL_PIO1_4_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,4)
  #define IOPCTL_PIO1_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,5)
  #define IOPCTL_PIO1_5_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,5)
  #define IOPCTL_PIO1_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,6)
  #define IOPCTL_PIO1_6_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,6)
  #define IOPCTL_PIO1_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,7)
  #define IOPCTL_PIO1_7_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,7)
  #define IOPCTL_PIO1_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,8)
  #define IOPCTL_PIO1_8_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,8)
  #define IOPCTL_PIO1_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,9)
  #define IOPCTL_PIO1_9_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,9)
  #define IOPCTL_PIO1_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,10)
  #define IOPCTL_PIO1_10_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,10)
  #define IOPCTL_PIO1_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,11)
  #define IOPCTL_PIO1_11_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,11)
  #define IOPCTL_PIO1_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,12)
  #define IOPCTL_PIO1_12_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,12)
  #define IOPCTL_PIO1_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,13)
  #define IOPCTL_PIO1_13_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,13)
  #define IOPCTL_PIO1_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,14)
  #define IOPCTL_PIO1_14_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,14)
  #define IOPCTL_PIO1_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,15)
  #define IOPCTL_PIO1_15_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,15)
  #define IOPCTL_PIO1_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,16)
  #define IOPCTL_PIO1_16_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,16)
  #define IOPCTL_PIO1_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,17)
  #define IOPCTL_PIO1_17_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,17)
  #define IOPCTL_PIO1_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,18)
  #define IOPCTL_PIO1_18_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,18)
  #define IOPCTL_PIO1_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,19)
  #define IOPCTL_PIO1_19_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,19)
  #define IOPCTL_PIO1_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,20)
  #define IOPCTL_PIO1_20_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,20)
  #define IOPCTL_PIO1_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,21)
  #define IOPCTL_PIO1_21_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,21)
  #define IOPCTL_PIO1_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,22)
  #define IOPCTL_PIO1_22_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,22)
  #define IOPCTL_PIO1_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,23)
  #define IOPCTL_PIO1_23_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,23)
  #define IOPCTL_PIO1_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,24)
  #define IOPCTL_PIO1_24_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,24)
  #define IOPCTL_PIO1_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,25)
  #define IOPCTL_PIO1_25_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,25)
  #define IOPCTL_PIO1_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,26)
  #define IOPCTL_PIO1_26_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,26)
  #define IOPCTL_PIO1_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,27)
  #define IOPCTL_PIO1_27_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,27)
  #define IOPCTL_PIO1_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,28)
  #define IOPCTL_PIO1_28_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,28)
  #define IOPCTL_PIO1_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,29)
  #define IOPCTL_PIO1_29_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,29)
  #define IOPCTL_PIO1_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,30)
  #define IOPCTL_PIO1_30_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,30)
  #define IOPCTL_PIO1_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,31)
  #define IOPCTL_PIO1_31_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,1,31)
  #define IOPCTL_PIO2_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,0)
  #define IOPCTL_PIO2_0_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,0)
  #define IOPCTL_PIO2_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,1)
  #define IOPCTL_PIO2_1_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,1)
  #define IOPCTL_PIO2_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,2)
  #define IOPCTL_PIO2_2_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,2)
  #define IOPCTL_PIO2_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,3)
  #define IOPCTL_PIO2_3_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,3)
  #define IOPCTL_PIO2_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,4)
  #define IOPCTL_PIO2_4_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,4)
  #define IOPCTL_PIO2_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,5)
  #define IOPCTL_PIO2_5_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,5)
  #define IOPCTL_PIO2_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,6)
  #define IOPCTL_PIO2_6_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,6)
  #define IOPCTL_PIO2_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,7)
  #define IOPCTL_PIO2_7_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,7)
  #define IOPCTL_PIO2_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,8)
  #define IOPCTL_PIO2_8_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,8)
  #define IOPCTL_PIO2_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,9)
  #define IOPCTL_PIO2_9_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,9)
  #define IOPCTL_PIO2_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,10)
  #define IOPCTL_PIO2_10_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,10)
  #define IOPCTL_PIO2_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,11)
  #define IOPCTL_PIO2_11_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,11)
  #define IOPCTL_PIO2_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,12)
  #define IOPCTL_PIO2_12_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,12)
  #define IOPCTL_PIO2_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,13)
  #define IOPCTL_PIO2_13_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,13)
  #define IOPCTL_PIO2_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,14)
  #define IOPCTL_PIO2_14_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,14)
  #define IOPCTL_PIO2_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,15)
  #define IOPCTL_PIO2_15_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,15)
  #define IOPCTL_PIO2_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,16)
  #define IOPCTL_PIO2_16_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,16)
  #define IOPCTL_PIO2_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,17)
  #define IOPCTL_PIO2_17_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,17)
  #define IOPCTL_PIO2_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,18)
  #define IOPCTL_PIO2_18_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,18)
  #define IOPCTL_PIO2_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,19)
  #define IOPCTL_PIO2_19_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,19)
  #define IOPCTL_PIO2_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,20)
  #define IOPCTL_PIO2_20_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,20)
  #define IOPCTL_PIO2_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,21)
  #define IOPCTL_PIO2_21_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,21)
  #define IOPCTL_PIO2_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,22)
  #define IOPCTL_PIO2_22_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,22)
  #define IOPCTL_PIO2_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,23)
  #define IOPCTL_PIO2_23_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,23)
  #define IOPCTL_PIO2_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,24)
  #define IOPCTL_PIO2_24_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,24)
  #define IOPCTL_PIO2_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,25)
  #define IOPCTL_PIO2_25_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,25)
  #define IOPCTL_PIO2_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,26)
  #define IOPCTL_PIO2_26_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,26)
  #define IOPCTL_PIO2_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,27)
  #define IOPCTL_PIO2_27_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,27)
  #define IOPCTL_PIO2_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,28)
  #define IOPCTL_PIO2_28_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,28)
  #define IOPCTL_PIO2_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,29)
  #define IOPCTL_PIO2_29_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,29)
  #define IOPCTL_PIO2_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,30)
  #define IOPCTL_PIO2_30_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,30)
  #define IOPCTL_PIO2_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,31)
  #define IOPCTL_PIO2_31_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,2,31)
  #define IOPCTL_PIO3_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,0)
  #define IOPCTL_PIO3_0_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,0)
  #define IOPCTL_PIO3_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,1)
  #define IOPCTL_PIO3_1_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,1)
  #define IOPCTL_PIO3_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,2)
  #define IOPCTL_PIO3_2_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,2)
  #define IOPCTL_PIO3_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,3)
  #define IOPCTL_PIO3_3_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,3)
  #define IOPCTL_PIO3_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,4)
  #define IOPCTL_PIO3_4_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,4)
  #define IOPCTL_PIO3_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,5)
  #define IOPCTL_PIO3_5_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,5)
  #define IOPCTL_PIO3_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,6)
  #define IOPCTL_PIO3_6_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,6)
  #define IOPCTL_PIO3_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,7)
  #define IOPCTL_PIO3_7_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,7)
  #define IOPCTL_PIO3_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,8)
  #define IOPCTL_PIO3_8_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,8)
  #define IOPCTL_PIO3_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,9)
  #define IOPCTL_PIO3_9_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,9)
  #define IOPCTL_PIO3_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,10)
  #define IOPCTL_PIO3_10_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,10)
  #define IOPCTL_PIO3_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,11)
  #define IOPCTL_PIO3_11_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,11)
  #define IOPCTL_PIO3_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,12)
  #define IOPCTL_PIO3_12_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,12)
  #define IOPCTL_PIO3_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,13)
  #define IOPCTL_PIO3_13_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,13)
  #define IOPCTL_PIO3_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,14)
  #define IOPCTL_PIO3_14_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,14)
  #define IOPCTL_PIO3_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,15)
  #define IOPCTL_PIO3_15_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,15)
  #define IOPCTL_PIO3_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,16)
  #define IOPCTL_PIO3_16_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,16)
  #define IOPCTL_PIO3_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,17)
  #define IOPCTL_PIO3_17_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,17)
  #define IOPCTL_PIO3_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,18)
  #define IOPCTL_PIO3_18_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,18)
  #define IOPCTL_PIO3_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,19)
  #define IOPCTL_PIO3_19_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,19)
  #define IOPCTL_PIO3_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,20)
  #define IOPCTL_PIO3_20_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,20)
  #define IOPCTL_PIO3_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,21)
  #define IOPCTL_PIO3_21_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,21)
  #define IOPCTL_PIO3_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,22)
  #define IOPCTL_PIO3_22_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,22)
  #define IOPCTL_PIO3_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,23)
  #define IOPCTL_PIO3_23_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,23)
  #define IOPCTL_PIO3_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,24)
  #define IOPCTL_PIO3_24_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,24)
  #define IOPCTL_PIO3_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,25)
  #define IOPCTL_PIO3_25_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,25)
  #define IOPCTL_PIO3_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,26)
  #define IOPCTL_PIO3_26_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,26)
  #define IOPCTL_PIO3_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,27)
  #define IOPCTL_PIO3_27_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,27)
  #define IOPCTL_PIO3_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,28)
  #define IOPCTL_PIO3_28_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,28)
  #define IOPCTL_PIO3_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,29)
  #define IOPCTL_PIO3_29_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,29)
  #define IOPCTL_PIO3_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,30)
  #define IOPCTL_PIO3_30_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,30)
  #define IOPCTL_PIO3_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,31)
  #define IOPCTL_PIO3_31_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,3,31)
  #define IOPCTL_PIO4_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,0)
  #define IOPCTL_PIO4_0_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,0)
  #define IOPCTL_PIO4_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,1)
  #define IOPCTL_PIO4_1_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,1)
  #define IOPCTL_PIO4_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,2)
  #define IOPCTL_PIO4_2_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,2)
  #define IOPCTL_PIO4_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,3)
  #define IOPCTL_PIO4_3_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,3)
  #define IOPCTL_PIO4_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,4)
  #define IOPCTL_PIO4_4_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,4)
  #define IOPCTL_PIO4_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,5)
  #define IOPCTL_PIO4_5_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,5)
  #define IOPCTL_PIO4_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,6)
  #define IOPCTL_PIO4_6_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,6)
  #define IOPCTL_PIO4_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,7)
  #define IOPCTL_PIO4_7_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,7)
  #define IOPCTL_PIO4_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,8)
  #define IOPCTL_PIO4_8_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,8)
  #define IOPCTL_PIO4_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,9)
  #define IOPCTL_PIO4_9_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,9)
  #define IOPCTL_PIO4_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,10)
  #define IOPCTL_PIO4_10_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,10)
  #define IOPCTL_PIO4_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,11)
  #define IOPCTL_PIO4_11_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,11)
  #define IOPCTL_PIO4_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,12)
  #define IOPCTL_PIO4_12_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,12)
  #define IOPCTL_PIO4_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,13)
  #define IOPCTL_PIO4_13_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,13)
  #define IOPCTL_PIO4_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,14)
  #define IOPCTL_PIO4_14_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,14)
  #define IOPCTL_PIO4_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,15)
  #define IOPCTL_PIO4_15_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,15)
  #define IOPCTL_PIO4_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,16)
  #define IOPCTL_PIO4_16_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,16)
  #define IOPCTL_PIO4_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,17)
  #define IOPCTL_PIO4_17_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,17)
  #define IOPCTL_PIO4_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,18)
  #define IOPCTL_PIO4_18_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,18)
  #define IOPCTL_PIO4_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,19)
  #define IOPCTL_PIO4_19_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,19)
  #define IOPCTL_PIO4_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,20)
  #define IOPCTL_PIO4_20_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,20)
  #define IOPCTL_PIO4_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,21)
  #define IOPCTL_PIO4_21_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,21)
  #define IOPCTL_PIO4_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,22)
  #define IOPCTL_PIO4_22_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,22)
  #define IOPCTL_PIO4_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,23)
  #define IOPCTL_PIO4_23_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,23)
  #define IOPCTL_PIO4_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,24)
  #define IOPCTL_PIO4_24_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,24)
  #define IOPCTL_PIO4_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,25)
  #define IOPCTL_PIO4_25_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,25)
  #define IOPCTL_PIO4_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,26)
  #define IOPCTL_PIO4_26_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,26)
  #define IOPCTL_PIO4_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,27)
  #define IOPCTL_PIO4_27_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,27)
  #define IOPCTL_PIO4_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,28)
  #define IOPCTL_PIO4_28_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,28)
  #define IOPCTL_PIO4_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,29)
  #define IOPCTL_PIO4_29_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,29)
  #define IOPCTL_PIO4_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,30)
  #define IOPCTL_PIO4_30_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,30)
  #define IOPCTL_PIO4_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,31)
  #define IOPCTL_PIO4_31_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,4,31)
  #define IOPCTL_PIO5_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,0)
  #define IOPCTL_PIO5_0_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,0)
  #define IOPCTL_PIO5_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,1)
  #define IOPCTL_PIO5_1_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,1)
  #define IOPCTL_PIO5_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,2)
  #define IOPCTL_PIO5_2_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,2)
  #define IOPCTL_PIO5_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,3)
  #define IOPCTL_PIO5_3_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,3)
  #define IOPCTL_PIO5_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,4)
  #define IOPCTL_PIO5_4_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,4)
  #define IOPCTL_PIO5_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,5)
  #define IOPCTL_PIO5_5_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,5)
  #define IOPCTL_PIO5_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,6)
  #define IOPCTL_PIO5_6_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,6)
  #define IOPCTL_PIO5_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,7)
  #define IOPCTL_PIO5_7_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,7)
  #define IOPCTL_PIO5_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,8)
  #define IOPCTL_PIO5_8_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,8)
  #define IOPCTL_PIO5_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,9)
  #define IOPCTL_PIO5_9_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,9)
  #define IOPCTL_PIO5_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,10)
  #define IOPCTL_PIO5_10_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,10)
  #define IOPCTL_PIO5_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,11)
  #define IOPCTL_PIO5_11_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,11)
  #define IOPCTL_PIO5_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,12)
  #define IOPCTL_PIO5_12_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,12)
  #define IOPCTL_PIO5_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,13)
  #define IOPCTL_PIO5_13_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,13)
  #define IOPCTL_PIO5_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,14)
  #define IOPCTL_PIO5_14_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,14)
  #define IOPCTL_PIO5_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,15)
  #define IOPCTL_PIO5_15_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,15)
  #define IOPCTL_PIO5_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,16)
  #define IOPCTL_PIO5_16_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,16)
  #define IOPCTL_PIO5_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,17)
  #define IOPCTL_PIO5_17_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,17)
  #define IOPCTL_PIO5_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,18)
  #define IOPCTL_PIO5_18_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,18)
  #define IOPCTL_PIO5_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,19)
  #define IOPCTL_PIO5_19_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,19)
  #define IOPCTL_PIO5_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,20)
  #define IOPCTL_PIO5_20_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,20)
  #define IOPCTL_PIO5_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,21)
  #define IOPCTL_PIO5_21_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,21)
  #define IOPCTL_PIO5_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,22)
  #define IOPCTL_PIO5_22_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,22)
  #define IOPCTL_PIO5_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,23)
  #define IOPCTL_PIO5_23_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,23)
  #define IOPCTL_PIO5_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,24)
  #define IOPCTL_PIO5_24_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,24)
  #define IOPCTL_PIO5_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,25)
  #define IOPCTL_PIO5_25_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,25)
  #define IOPCTL_PIO5_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,26)
  #define IOPCTL_PIO5_26_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,26)
  #define IOPCTL_PIO5_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,27)
  #define IOPCTL_PIO5_27_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,27)
  #define IOPCTL_PIO5_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,28)
  #define IOPCTL_PIO5_28_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,28)
  #define IOPCTL_PIO5_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,29)
  #define IOPCTL_PIO5_29_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,29)
  #define IOPCTL_PIO5_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,30)
  #define IOPCTL_PIO5_30_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,30)
  #define IOPCTL_PIO5_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,31)
  #define IOPCTL_PIO5_31_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,5,31)
  #define IOPCTL_PIO6_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,0)
  #define IOPCTL_PIO6_0_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,0)
  #define IOPCTL_PIO6_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,1)
  #define IOPCTL_PIO6_1_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,1)
  #define IOPCTL_PIO6_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,2)
  #define IOPCTL_PIO6_2_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,2)
  #define IOPCTL_PIO6_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,3)
  #define IOPCTL_PIO6_3_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,3)
  #define IOPCTL_PIO6_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,4)
  #define IOPCTL_PIO6_4_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,4)
  #define IOPCTL_PIO6_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,5)
  #define IOPCTL_PIO6_5_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,5)
  #define IOPCTL_PIO6_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,6)
  #define IOPCTL_PIO6_6_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,6)
  #define IOPCTL_PIO6_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,7)
  #define IOPCTL_PIO6_7_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,7)
  #define IOPCTL_PIO6_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,8)
  #define IOPCTL_PIO6_8_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,8)
  #define IOPCTL_PIO6_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,9)
  #define IOPCTL_PIO6_9_NS                         IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,9)
  #define IOPCTL_PIO6_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,10)
  #define IOPCTL_PIO6_10_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,10)
  #define IOPCTL_PIO6_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,11)
  #define IOPCTL_PIO6_11_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,11)
  #define IOPCTL_PIO6_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,12)
  #define IOPCTL_PIO6_12_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,12)
  #define IOPCTL_PIO6_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,13)
  #define IOPCTL_PIO6_13_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,13)
  #define IOPCTL_PIO6_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,14)
  #define IOPCTL_PIO6_14_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,14)
  #define IOPCTL_PIO6_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,15)
  #define IOPCTL_PIO6_15_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,15)
  #define IOPCTL_PIO6_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,16)
  #define IOPCTL_PIO6_16_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,16)
  #define IOPCTL_PIO6_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,17)
  #define IOPCTL_PIO6_17_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,17)
  #define IOPCTL_PIO6_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,18)
  #define IOPCTL_PIO6_18_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,18)
  #define IOPCTL_PIO6_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,19)
  #define IOPCTL_PIO6_19_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,19)
  #define IOPCTL_PIO6_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,20)
  #define IOPCTL_PIO6_20_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,20)
  #define IOPCTL_PIO6_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,21)
  #define IOPCTL_PIO6_21_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,21)
  #define IOPCTL_PIO6_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,22)
  #define IOPCTL_PIO6_22_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,22)
  #define IOPCTL_PIO6_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,23)
  #define IOPCTL_PIO6_23_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,23)
  #define IOPCTL_PIO6_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,24)
  #define IOPCTL_PIO6_24_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,24)
  #define IOPCTL_PIO6_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,25)
  #define IOPCTL_PIO6_25_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,25)
  #define IOPCTL_PIO6_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,26)
  #define IOPCTL_PIO6_26_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,26)
  #define IOPCTL_PIO6_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,27)
  #define IOPCTL_PIO6_27_NS                        IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,6,27)
  #define IOPCTL_FC15_I2C_SCL                      IOPCTL_FC15_I2C_SCL_REG(IOPCTL_BASE_PTR)
  #define IOPCTL_FC15_I2C_SCL_NS                   IOPCTL_FC15_I2C_SCL_REG(IOPCTL_BASE_PTR_NS)
  #define IOPCTL_FC15_I2C_SDA                      IOPCTL_FC15_I2C_SDA_REG(IOPCTL_BASE_PTR)
  #define IOPCTL_FC15_I2C_SDA_NS                   IOPCTL_FC15_I2C_SDA_REG(IOPCTL_BASE_PTR_NS)
#else
  /* IOPCTL */
  #define IOPCTL_PIO0_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,0)
  #define IOPCTL_PIO0_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,1)
  #define IOPCTL_PIO0_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,2)
  #define IOPCTL_PIO0_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,3)
  #define IOPCTL_PIO0_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,4)
  #define IOPCTL_PIO0_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,5)
  #define IOPCTL_PIO0_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,6)
  #define IOPCTL_PIO0_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,7)
  #define IOPCTL_PIO0_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,8)
  #define IOPCTL_PIO0_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,9)
  #define IOPCTL_PIO0_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,10)
  #define IOPCTL_PIO0_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,11)
  #define IOPCTL_PIO0_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,12)
  #define IOPCTL_PIO0_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,13)
  #define IOPCTL_PIO0_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,14)
  #define IOPCTL_PIO0_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,15)
  #define IOPCTL_PIO0_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,16)
  #define IOPCTL_PIO0_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,17)
  #define IOPCTL_PIO0_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,18)
  #define IOPCTL_PIO0_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,19)
  #define IOPCTL_PIO0_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,20)
  #define IOPCTL_PIO0_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,21)
  #define IOPCTL_PIO0_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,22)
  #define IOPCTL_PIO0_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,23)
  #define IOPCTL_PIO0_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,24)
  #define IOPCTL_PIO0_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,25)
  #define IOPCTL_PIO0_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,26)
  #define IOPCTL_PIO0_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,27)
  #define IOPCTL_PIO0_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,28)
  #define IOPCTL_PIO0_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,29)
  #define IOPCTL_PIO0_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,30)
  #define IOPCTL_PIO0_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,0,31)
  #define IOPCTL_PIO1_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,0)
  #define IOPCTL_PIO1_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,1)
  #define IOPCTL_PIO1_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,2)
  #define IOPCTL_PIO1_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,3)
  #define IOPCTL_PIO1_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,4)
  #define IOPCTL_PIO1_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,5)
  #define IOPCTL_PIO1_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,6)
  #define IOPCTL_PIO1_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,7)
  #define IOPCTL_PIO1_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,8)
  #define IOPCTL_PIO1_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,9)
  #define IOPCTL_PIO1_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,10)
  #define IOPCTL_PIO1_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,11)
  #define IOPCTL_PIO1_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,12)
  #define IOPCTL_PIO1_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,13)
  #define IOPCTL_PIO1_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,14)
  #define IOPCTL_PIO1_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,15)
  #define IOPCTL_PIO1_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,16)
  #define IOPCTL_PIO1_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,17)
  #define IOPCTL_PIO1_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,18)
  #define IOPCTL_PIO1_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,19)
  #define IOPCTL_PIO1_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,20)
  #define IOPCTL_PIO1_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,21)
  #define IOPCTL_PIO1_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,22)
  #define IOPCTL_PIO1_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,23)
  #define IOPCTL_PIO1_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,24)
  #define IOPCTL_PIO1_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,25)
  #define IOPCTL_PIO1_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,26)
  #define IOPCTL_PIO1_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,27)
  #define IOPCTL_PIO1_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,28)
  #define IOPCTL_PIO1_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,29)
  #define IOPCTL_PIO1_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,30)
  #define IOPCTL_PIO1_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,1,31)
  #define IOPCTL_PIO2_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,0)
  #define IOPCTL_PIO2_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,1)
  #define IOPCTL_PIO2_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,2)
  #define IOPCTL_PIO2_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,3)
  #define IOPCTL_PIO2_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,4)
  #define IOPCTL_PIO2_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,5)
  #define IOPCTL_PIO2_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,6)
  #define IOPCTL_PIO2_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,7)
  #define IOPCTL_PIO2_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,8)
  #define IOPCTL_PIO2_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,9)
  #define IOPCTL_PIO2_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,10)
  #define IOPCTL_PIO2_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,11)
  #define IOPCTL_PIO2_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,12)
  #define IOPCTL_PIO2_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,13)
  #define IOPCTL_PIO2_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,14)
  #define IOPCTL_PIO2_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,15)
  #define IOPCTL_PIO2_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,16)
  #define IOPCTL_PIO2_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,17)
  #define IOPCTL_PIO2_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,18)
  #define IOPCTL_PIO2_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,19)
  #define IOPCTL_PIO2_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,20)
  #define IOPCTL_PIO2_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,21)
  #define IOPCTL_PIO2_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,22)
  #define IOPCTL_PIO2_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,23)
  #define IOPCTL_PIO2_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,24)
  #define IOPCTL_PIO2_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,25)
  #define IOPCTL_PIO2_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,26)
  #define IOPCTL_PIO2_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,27)
  #define IOPCTL_PIO2_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,28)
  #define IOPCTL_PIO2_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,29)
  #define IOPCTL_PIO2_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,30)
  #define IOPCTL_PIO2_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,2,31)
  #define IOPCTL_PIO3_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,0)
  #define IOPCTL_PIO3_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,1)
  #define IOPCTL_PIO3_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,2)
  #define IOPCTL_PIO3_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,3)
  #define IOPCTL_PIO3_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,4)
  #define IOPCTL_PIO3_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,5)
  #define IOPCTL_PIO3_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,6)
  #define IOPCTL_PIO3_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,7)
  #define IOPCTL_PIO3_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,8)
  #define IOPCTL_PIO3_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,9)
  #define IOPCTL_PIO3_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,10)
  #define IOPCTL_PIO3_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,11)
  #define IOPCTL_PIO3_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,12)
  #define IOPCTL_PIO3_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,13)
  #define IOPCTL_PIO3_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,14)
  #define IOPCTL_PIO3_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,15)
  #define IOPCTL_PIO3_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,16)
  #define IOPCTL_PIO3_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,17)
  #define IOPCTL_PIO3_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,18)
  #define IOPCTL_PIO3_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,19)
  #define IOPCTL_PIO3_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,20)
  #define IOPCTL_PIO3_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,21)
  #define IOPCTL_PIO3_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,22)
  #define IOPCTL_PIO3_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,23)
  #define IOPCTL_PIO3_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,24)
  #define IOPCTL_PIO3_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,25)
  #define IOPCTL_PIO3_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,26)
  #define IOPCTL_PIO3_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,27)
  #define IOPCTL_PIO3_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,28)
  #define IOPCTL_PIO3_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,29)
  #define IOPCTL_PIO3_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,30)
  #define IOPCTL_PIO3_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,3,31)
  #define IOPCTL_PIO4_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,0)
  #define IOPCTL_PIO4_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,1)
  #define IOPCTL_PIO4_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,2)
  #define IOPCTL_PIO4_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,3)
  #define IOPCTL_PIO4_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,4)
  #define IOPCTL_PIO4_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,5)
  #define IOPCTL_PIO4_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,6)
  #define IOPCTL_PIO4_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,7)
  #define IOPCTL_PIO4_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,8)
  #define IOPCTL_PIO4_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,9)
  #define IOPCTL_PIO4_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,10)
  #define IOPCTL_PIO4_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,11)
  #define IOPCTL_PIO4_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,12)
  #define IOPCTL_PIO4_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,13)
  #define IOPCTL_PIO4_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,14)
  #define IOPCTL_PIO4_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,15)
  #define IOPCTL_PIO4_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,16)
  #define IOPCTL_PIO4_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,17)
  #define IOPCTL_PIO4_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,18)
  #define IOPCTL_PIO4_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,19)
  #define IOPCTL_PIO4_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,20)
  #define IOPCTL_PIO4_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,21)
  #define IOPCTL_PIO4_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,22)
  #define IOPCTL_PIO4_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,23)
  #define IOPCTL_PIO4_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,24)
  #define IOPCTL_PIO4_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,25)
  #define IOPCTL_PIO4_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,26)
  #define IOPCTL_PIO4_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,27)
  #define IOPCTL_PIO4_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,28)
  #define IOPCTL_PIO4_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,29)
  #define IOPCTL_PIO4_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,30)
  #define IOPCTL_PIO4_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,4,31)
  #define IOPCTL_PIO5_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,0)
  #define IOPCTL_PIO5_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,1)
  #define IOPCTL_PIO5_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,2)
  #define IOPCTL_PIO5_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,3)
  #define IOPCTL_PIO5_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,4)
  #define IOPCTL_PIO5_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,5)
  #define IOPCTL_PIO5_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,6)
  #define IOPCTL_PIO5_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,7)
  #define IOPCTL_PIO5_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,8)
  #define IOPCTL_PIO5_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,9)
  #define IOPCTL_PIO5_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,10)
  #define IOPCTL_PIO5_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,11)
  #define IOPCTL_PIO5_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,12)
  #define IOPCTL_PIO5_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,13)
  #define IOPCTL_PIO5_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,14)
  #define IOPCTL_PIO5_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,15)
  #define IOPCTL_PIO5_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,16)
  #define IOPCTL_PIO5_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,17)
  #define IOPCTL_PIO5_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,18)
  #define IOPCTL_PIO5_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,19)
  #define IOPCTL_PIO5_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,20)
  #define IOPCTL_PIO5_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,21)
  #define IOPCTL_PIO5_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,22)
  #define IOPCTL_PIO5_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,23)
  #define IOPCTL_PIO5_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,24)
  #define IOPCTL_PIO5_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,25)
  #define IOPCTL_PIO5_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,26)
  #define IOPCTL_PIO5_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,27)
  #define IOPCTL_PIO5_28                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,28)
  #define IOPCTL_PIO5_29                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,29)
  #define IOPCTL_PIO5_30                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,30)
  #define IOPCTL_PIO5_31                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,5,31)
  #define IOPCTL_PIO6_0                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,0)
  #define IOPCTL_PIO6_1                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,1)
  #define IOPCTL_PIO6_2                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,2)
  #define IOPCTL_PIO6_3                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,3)
  #define IOPCTL_PIO6_4                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,4)
  #define IOPCTL_PIO6_5                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,5)
  #define IOPCTL_PIO6_6                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,6)
  #define IOPCTL_PIO6_7                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,7)
  #define IOPCTL_PIO6_8                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,8)
  #define IOPCTL_PIO6_9                            IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,9)
  #define IOPCTL_PIO6_10                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,10)
  #define IOPCTL_PIO6_11                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,11)
  #define IOPCTL_PIO6_12                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,12)
  #define IOPCTL_PIO6_13                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,13)
  #define IOPCTL_PIO6_14                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,14)
  #define IOPCTL_PIO6_15                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,15)
  #define IOPCTL_PIO6_16                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,16)
  #define IOPCTL_PIO6_17                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,17)
  #define IOPCTL_PIO6_18                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,18)
  #define IOPCTL_PIO6_19                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,19)
  #define IOPCTL_PIO6_20                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,20)
  #define IOPCTL_PIO6_21                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,21)
  #define IOPCTL_PIO6_22                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,22)
  #define IOPCTL_PIO6_23                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,23)
  #define IOPCTL_PIO6_24                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,24)
  #define IOPCTL_PIO6_25                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,25)
  #define IOPCTL_PIO6_26                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,26)
  #define IOPCTL_PIO6_27                           IOPCTL_PIO_REG(IOPCTL_BASE_PTR,6,27)
  #define IOPCTL_FC15_I2C_SCL                      IOPCTL_FC15_I2C_SCL_REG(IOPCTL_BASE_PTR)
  #define IOPCTL_FC15_I2C_SDA                      IOPCTL_FC15_I2C_SDA_REG(IOPCTL_BASE_PTR)
#endif

/* IOPCTL - Register array accessors */
#define IOPCTL_PIO(index,index2)                 IOPCTL_PIO_REG(IOPCTL_BASE_PTR,index,index2)
#define IOPCTL_PIO_NS(index,index2)              IOPCTL_PIO_REG(IOPCTL_BASE_PTR_NS,index,index2)
#define IOPCTL_PIO(index,index2)                 IOPCTL_PIO_REG(IOPCTL_BASE_PTR,index,index2)

/*!
 * @}
 */ /* end of group IOPCTL_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group IOPCTL_Peripheral */


/* ----------------------------------------------------------------------------
   -- LCDIF
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Peripheral LCDIF
 * @{
 */

/** LCDIF - Peripheral register structure */
typedef struct LCDIF_MemMap {
  uint8_t RESERVED_0[4672];
  uint32_t FRAMEBUFFERCONFIG0;                     /**< Frame Buffer and Timing control, offset: 0x1240 */
  uint8_t RESERVED_1[28];
  uint32_t FRAMEBUFFERADDRESS0;                    /**< Starting address of the frame buffer, offset: 0x1260 */
  uint8_t RESERVED_2[28];
  uint32_t FRAMEBUFFERSTRIDE0;                     /**< Stride of the frame buffer in bytes, offset: 0x1280 */
  uint8_t RESERVED_3[220];
  uint32_t DISPLAYDITHERCONFIG0;                   /**< Configuration register for dithering, offset: 0x1360 */
  uint8_t RESERVED_4[28];
  uint32_t DISPLAYDITHERTABLELOW0;                 /**< Dither table low, offset: 0x1380 */
  uint8_t RESERVED_5[28];
  uint32_t DISPLAYDITHERTABLEHIGH0;                /**< Dither table high, offset: 0x13A0 */
  uint8_t RESERVED_6[28];
  uint32_t PANELCONFIG0;                           /**< Panel configuration, offset: 0x13C0 */
  uint8_t RESERVED_7[28];
  uint32_t PANELTIMING0;                           /**< Timing for hardware panel sequencing, offset: 0x13E0 */
  uint8_t RESERVED_8[28];
  uint32_t HDISPLAY0;                              /**< Horizontal Total and Display End counters, offset: 0x1400 */
  uint8_t RESERVED_9[28];
  uint32_t HSYNC0;                                 /**< Horizontal Sync counters, offset: 0x1420 */
  uint8_t RESERVED_10[92];
  uint32_t VDISPLAY0;                              /**< Vertical Total and Display End counters, offset: 0x1480 */
  uint8_t RESERVED_11[28];
  uint32_t VSYNC0;                                 /**< Vertical Sync counters, offset: 0x14A0 */
  uint8_t RESERVED_12[28];
  uint32_t DISPLAYCURRENTLOCATION0;                /**< Current x,y location of display controller, offset: 0x14C0 */
  uint8_t RESERVED_13[28];
  uint32_t GAMMAINDEX0;                            /**< Index into gamma table, offset: 0x14E0 */
  uint8_t RESERVED_14[28];
  uint32_t GAMMADATA0;                             /**< Translation values for the gamma table, offset: 0x1500 */
  uint8_t RESERVED_15[28];
  uint32_t CURSORCONFIG;                           /**< Configuration register for the cursor, offset: 0x1520 */
  uint8_t RESERVED_16[12];
  uint32_t CURSORADDRESS;                          /**< Address of the cursor shape, offset: 0x1530 */
  uint8_t RESERVED_17[12];
  uint32_t CURSORLOCATION;                         /**< Location of the cursor on the owning display, offset: 0x1540 */
  uint8_t RESERVED_18[12];
  uint32_t CURSORBACKGROUND;                       /**< The background color for Masked cursors, offset: 0x1550 */
  uint8_t RESERVED_19[12];
  uint32_t CURSORFOREGROUND;                       /**< The foreground color for Masked cursors, offset: 0x1560 */
  uint8_t RESERVED_20[156];
  uint32_t DISPLAYINTR;                            /**< Display interrupt register, offset: 0x1600 */
  uint8_t RESERVED_21[12];
  uint32_t DISPLAYINTRENABLE;                      /**< The interrupt enable register for display_0 (and display_1 if present), offset: 0x1610 */
  uint8_t RESERVED_22[12];
  uint32_t DBICONFIG0;                             /**< Configuration register for DBI output, offset: 0x1620 */
  uint8_t RESERVED_23[28];
  uint32_t DBIIFRESET0;                            /**< Reset DBI interface to idle state, offset: 0x1640 */
  uint8_t RESERVED_24[28];
  uint32_t DBIWRCHAR10;                            /**< DBI write AC characteristics definition register 1, offset: 0x1660 */
  uint8_t RESERVED_25[28];
  uint32_t DBIWRCHAR20;                            /**< DBI write AC characteristics definition register 2, offset: 0x1680 */
  uint8_t RESERVED_26[28];
  uint32_t DBICMD0;                                /**< DBI Command in/out port, offset: 0x16A0 */
  uint8_t RESERVED_27[28];
  uint32_t DPICONFIG0;                             /**< The configuration register for DPI output, offset: 0x16C0 */
  uint8_t RESERVED_28[44];
  uint32_t DCCHIPREV;                              /**< Revision for the chip in BCD, offset: 0x16F0 */
  uint8_t RESERVED_29[12];
  uint32_t DCCHIPDATE;                             /**< Shows the release date for the IP in YYYYMMDD (year, month), offset: 0x1700 */
  uint8_t RESERVED_30[28];
  uint32_t DCCHIPPATCHREV;                         /**< Patch revision, offset: 0x1720 */
  uint8_t RESERVED_31[28];
  uint32_t DCTILEINCFG0;                           /**< Tile input configuration, offset: 0x1740 */
  uint8_t RESERVED_32[28];
  uint32_t DCTILEUVFRAMEBUFFERADR0;                /**< UV frame buffer address when tile input, offset: 0x1760 */
  uint8_t RESERVED_33[28];
  uint32_t DCTILEUVFRAMEBUFFERSTR0;                /**< UV frame buffer stride when tile input, offset: 0x1780 */
  uint8_t RESERVED_34[44];
  uint32_t DCPRODUCTID;                            /**< Product ID, offset: 0x17B0 */
  uint8_t RESERVED_35[108];
  uint32_t DEBUGCOUNTERSELECT0;                    /**< , offset: 0x1820 */
  uint8_t RESERVED_36[28];
  uint32_t DEBUGCOUNTERVALUE0;                     /**< Debug Counter Value as specified in DebugCounterSelect, offset: 0x1840 */
} volatile *LCDIF_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- LCDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Register_Accessor_Macros LCDIF - Register accessor macros
 * @{
 */


/* LCDIF - Register accessors */
#define LCDIF_FRAMEBUFFERCONFIG0_REG(base)       ((base)->FRAMEBUFFERCONFIG0)
#define LCDIF_FRAMEBUFFERADDRESS0_REG(base)      ((base)->FRAMEBUFFERADDRESS0)
#define LCDIF_FRAMEBUFFERSTRIDE0_REG(base)       ((base)->FRAMEBUFFERSTRIDE0)
#define LCDIF_DISPLAYDITHERCONFIG0_REG(base)     ((base)->DISPLAYDITHERCONFIG0)
#define LCDIF_DISPLAYDITHERTABLELOW0_REG(base)   ((base)->DISPLAYDITHERTABLELOW0)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_REG(base)  ((base)->DISPLAYDITHERTABLEHIGH0)
#define LCDIF_PANELCONFIG0_REG(base)             ((base)->PANELCONFIG0)
#define LCDIF_PANELTIMING0_REG(base)             ((base)->PANELTIMING0)
#define LCDIF_HDISPLAY0_REG(base)                ((base)->HDISPLAY0)
#define LCDIF_HSYNC0_REG(base)                   ((base)->HSYNC0)
#define LCDIF_VDISPLAY0_REG(base)                ((base)->VDISPLAY0)
#define LCDIF_VSYNC0_REG(base)                   ((base)->VSYNC0)
#define LCDIF_DISPLAYCURRENTLOCATION0_REG(base)  ((base)->DISPLAYCURRENTLOCATION0)
#define LCDIF_GAMMAINDEX0_REG(base)              ((base)->GAMMAINDEX0)
#define LCDIF_GAMMADATA0_REG(base)               ((base)->GAMMADATA0)
#define LCDIF_CURSORCONFIG_REG(base)             ((base)->CURSORCONFIG)
#define LCDIF_CURSORADDRESS_REG(base)            ((base)->CURSORADDRESS)
#define LCDIF_CURSORLOCATION_REG(base)           ((base)->CURSORLOCATION)
#define LCDIF_CURSORBACKGROUND_REG(base)         ((base)->CURSORBACKGROUND)
#define LCDIF_CURSORFOREGROUND_REG(base)         ((base)->CURSORFOREGROUND)
#define LCDIF_DISPLAYINTR_REG(base)              ((base)->DISPLAYINTR)
#define LCDIF_DISPLAYINTRENABLE_REG(base)        ((base)->DISPLAYINTRENABLE)
#define LCDIF_DBICONFIG0_REG(base)               ((base)->DBICONFIG0)
#define LCDIF_DBIIFRESET0_REG(base)              ((base)->DBIIFRESET0)
#define LCDIF_DBIWRCHAR10_REG(base)              ((base)->DBIWRCHAR10)
#define LCDIF_DBIWRCHAR20_REG(base)              ((base)->DBIWRCHAR20)
#define LCDIF_DBICMD0_REG(base)                  ((base)->DBICMD0)
#define LCDIF_DPICONFIG0_REG(base)               ((base)->DPICONFIG0)
#define LCDIF_DCCHIPREV_REG(base)                ((base)->DCCHIPREV)
#define LCDIF_DCCHIPDATE_REG(base)               ((base)->DCCHIPDATE)
#define LCDIF_DCCHIPPATCHREV_REG(base)           ((base)->DCCHIPPATCHREV)
#define LCDIF_DCTILEINCFG0_REG(base)             ((base)->DCTILEINCFG0)
#define LCDIF_DCTILEUVFRAMEBUFFERADR0_REG(base)  ((base)->DCTILEUVFRAMEBUFFERADR0)
#define LCDIF_DCTILEUVFRAMEBUFFERSTR0_REG(base)  ((base)->DCTILEUVFRAMEBUFFERSTR0)
#define LCDIF_DCPRODUCTID_REG(base)              ((base)->DCPRODUCTID)
#define LCDIF_DEBUGCOUNTERSELECT0_REG(base)      ((base)->DEBUGCOUNTERSELECT0)
#define LCDIF_DEBUGCOUNTERVALUE0_REG(base)       ((base)->DEBUGCOUNTERVALUE0)

/*!
 * @}
 */ /* end of group LCDIF_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- LCDIF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Register_Masks LCDIF Register Masks
 * @{
 */

/*! @name FRAMEBUFFERCONFIG0 - Frame Buffer and Timing control */
/*! @{ */
#define LCDIF_FRAMEBUFFERCONFIG0_FORMAT_MASK     (0x7U)
#define LCDIF_FRAMEBUFFERCONFIG0_FORMAT_SHIFT    (0U)
/*! FORMAT - The format of the frame buffer.
 */
#define LCDIF_FRAMEBUFFERCONFIG0_FORMAT(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_FRAMEBUFFERCONFIG0_FORMAT_SHIFT)) & LCDIF_FRAMEBUFFERCONFIG0_FORMAT_MASK)
#define LCDIF_FRAMEBUFFERCONFIG0_MODE_MASK       (0x10U)
#define LCDIF_FRAMEBUFFERCONFIG0_MODE_SHIFT      (4U)
#define LCDIF_FRAMEBUFFERCONFIG0_OUTPUT_MASK     (0x100U)
#define LCDIF_FRAMEBUFFERCONFIG0_OUTPUT_SHIFT    (8U)
#define LCDIF_FRAMEBUFFERCONFIG0_SWITCHPANEL_MASK (0x200U)
#define LCDIF_FRAMEBUFFERCONFIG0_SWITCHPANEL_SHIFT (9U)
#define LCDIF_FRAMEBUFFERCONFIG0_GAMMA_MASK      (0x1000U)
#define LCDIF_FRAMEBUFFERCONFIG0_GAMMA_SHIFT     (12U)
#define LCDIF_FRAMEBUFFERCONFIG0_VALID_MASK      (0x10000U)
#define LCDIF_FRAMEBUFFERCONFIG0_VALID_SHIFT     (16U)
#define LCDIF_FRAMEBUFFERCONFIG0_RESET_MASK      (0x100000U)
#define LCDIF_FRAMEBUFFERCONFIG0_RESET_SHIFT     (20U)
#define LCDIF_FRAMEBUFFERCONFIG0_UNDERFLOW_MASK  (0x1000000U)
#define LCDIF_FRAMEBUFFERCONFIG0_UNDERFLOW_SHIFT (24U)
#define LCDIF_FRAMEBUFFERCONFIG0_FLIP_IN_PROGRESS_MASK (0x10000000U)
#define LCDIF_FRAMEBUFFERCONFIG0_FLIP_IN_PROGRESS_SHIFT (28U)
#define LCDIF_FRAMEBUFFERCONFIG0_BACK_PRESSURE_DISABLE_MASK (0x20000000U)
#define LCDIF_FRAMEBUFFERCONFIG0_BACK_PRESSURE_DISABLE_SHIFT (29U)
/*! @} */

/*! @name FRAMEBUFFERADDRESS0 - Starting address of the frame buffer */
/*! @{ */
#define LCDIF_FRAMEBUFFERADDRESS0_ADDRESS_MASK   (0x7FFFFFFFU)
#define LCDIF_FRAMEBUFFERADDRESS0_ADDRESS_SHIFT  (0U)
/*! ADDRESS - ADDRESS
 */
#define LCDIF_FRAMEBUFFERADDRESS0_ADDRESS(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_FRAMEBUFFERADDRESS0_ADDRESS_SHIFT)) & LCDIF_FRAMEBUFFERADDRESS0_ADDRESS_MASK)
#define LCDIF_FRAMEBUFFERADDRESS0_TYPE_MASK      (0x80000000U)
#define LCDIF_FRAMEBUFFERADDRESS0_TYPE_SHIFT     (31U)
/*! @} */

/*! @name FRAMEBUFFERSTRIDE0 - Stride of the frame buffer in bytes */
/*! @{ */
#define LCDIF_FRAMEBUFFERSTRIDE0_STRIDE_MASK     (0x1FFFFU)
#define LCDIF_FRAMEBUFFERSTRIDE0_STRIDE_SHIFT    (0U)
/*! STRIDE - Number of bytes from start of one line to next line. This value needs to be 128 byte aligned.
 */
#define LCDIF_FRAMEBUFFERSTRIDE0_STRIDE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_FRAMEBUFFERSTRIDE0_STRIDE_SHIFT)) & LCDIF_FRAMEBUFFERSTRIDE0_STRIDE_MASK)
/*! @} */

/*! @name DISPLAYDITHERCONFIG0 - Configuration register for dithering */
/*! @{ */
#define LCDIF_DISPLAYDITHERCONFIG0_BLUE_SIZE_MASK (0xFU)
#define LCDIF_DISPLAYDITHERCONFIG0_BLUE_SIZE_SHIFT (0U)
/*! BLUE_SIZE - Number of important bits for the blue channel for the panel. Start counting from MSB.
 */
#define LCDIF_DISPLAYDITHERCONFIG0_BLUE_SIZE(x)  (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERCONFIG0_BLUE_SIZE_SHIFT)) & LCDIF_DISPLAYDITHERCONFIG0_BLUE_SIZE_MASK)
#define LCDIF_DISPLAYDITHERCONFIG0_GREEN_SIZE_MASK (0xF00U)
#define LCDIF_DISPLAYDITHERCONFIG0_GREEN_SIZE_SHIFT (8U)
/*! GREEN_SIZE - Number of important bits for the green channel for the panel. Start counting from MSB.
 */
#define LCDIF_DISPLAYDITHERCONFIG0_GREEN_SIZE(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERCONFIG0_GREEN_SIZE_SHIFT)) & LCDIF_DISPLAYDITHERCONFIG0_GREEN_SIZE_MASK)
#define LCDIF_DISPLAYDITHERCONFIG0_RED_SIZE_MASK (0xF0000U)
#define LCDIF_DISPLAYDITHERCONFIG0_RED_SIZE_SHIFT (16U)
/*! RED_SIZE - Number of important bits for the red channel for the panel. Start counting from MSB.
 */
#define LCDIF_DISPLAYDITHERCONFIG0_RED_SIZE(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERCONFIG0_RED_SIZE_SHIFT)) & LCDIF_DISPLAYDITHERCONFIG0_RED_SIZE_MASK)
#define LCDIF_DISPLAYDITHERCONFIG0_ENABLE_MASK   (0x80000000U)
#define LCDIF_DISPLAYDITHERCONFIG0_ENABLE_SHIFT  (31U)
/*! @} */

/*! @name DISPLAYDITHERTABLELOW0 - Dither table low */
/*! @{ */
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X0_MASK  (0xFU)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X0_SHIFT (0U)
/*! Y0_X0 - Dither threshold value for x,y=0,0.
 */
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X0(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLELOW0_Y0_X0_SHIFT)) & LCDIF_DISPLAYDITHERTABLELOW0_Y0_X0_MASK)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X1_MASK  (0xF0U)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X1_SHIFT (4U)
/*! Y0_X1 - Dither threshold value for x,y=1,0.
 */
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X1(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLELOW0_Y0_X1_SHIFT)) & LCDIF_DISPLAYDITHERTABLELOW0_Y0_X1_MASK)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X2_MASK  (0xF00U)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X2_SHIFT (8U)
/*! Y0_X2 - Dither threshold value for x,y=2,0.
 */
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X2(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLELOW0_Y0_X2_SHIFT)) & LCDIF_DISPLAYDITHERTABLELOW0_Y0_X2_MASK)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X3_MASK  (0xF000U)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X3_SHIFT (12U)
/*! Y0_X3 - Dither threshold value for x,y=3,0.
 */
#define LCDIF_DISPLAYDITHERTABLELOW0_Y0_X3(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLELOW0_Y0_X3_SHIFT)) & LCDIF_DISPLAYDITHERTABLELOW0_Y0_X3_MASK)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X0_MASK  (0xF0000U)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X0_SHIFT (16U)
/*! Y1_X0 - Dither threshold value for x,y=0,1.
 */
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X0(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLELOW0_Y1_X0_SHIFT)) & LCDIF_DISPLAYDITHERTABLELOW0_Y1_X0_MASK)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X1_MASK  (0xF00000U)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X1_SHIFT (20U)
/*! Y1_X1 - Dither threshold value for x,y=1,1.
 */
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X1(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLELOW0_Y1_X1_SHIFT)) & LCDIF_DISPLAYDITHERTABLELOW0_Y1_X1_MASK)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X2_MASK  (0xF000000U)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X2_SHIFT (24U)
/*! Y1_X2 - Dither threshold value for x,y=2,1.
 */
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X2(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLELOW0_Y1_X2_SHIFT)) & LCDIF_DISPLAYDITHERTABLELOW0_Y1_X2_MASK)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X3_MASK  (0xF0000000U)
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X3_SHIFT (28U)
/*! Y1_X3 - Dither threshold value for x,y=3,1.
 */
#define LCDIF_DISPLAYDITHERTABLELOW0_Y1_X3(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLELOW0_Y1_X3_SHIFT)) & LCDIF_DISPLAYDITHERTABLELOW0_Y1_X3_MASK)
/*! @} */

/*! @name DISPLAYDITHERTABLEHIGH0 - Dither table high */
/*! @{ */
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X0_MASK (0xFU)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X0_SHIFT (0U)
/*! Y2_X0 - Dither threshold value for x,y=0,2.
 */
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X0(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X0_SHIFT)) & LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X0_MASK)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X1_MASK (0xF0U)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X1_SHIFT (4U)
/*! Y2_X1 - Dither threshold value for x,y=1,2.
 */
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X1(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X1_SHIFT)) & LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X1_MASK)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X2_MASK (0xF00U)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X2_SHIFT (8U)
/*! Y2_X2 - Dither threshold value for x,y=2,2.
 */
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X2(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X2_SHIFT)) & LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X2_MASK)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X3_MASK (0xF000U)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X3_SHIFT (12U)
/*! Y2_X3 - Dither threshold value for x,y=3,2.
 */
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X3(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X3_SHIFT)) & LCDIF_DISPLAYDITHERTABLEHIGH0_Y2_X3_MASK)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X0_MASK (0xF0000U)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X0_SHIFT (16U)
/*! Y3_X0 - Dither threshold value for x,y=0,3.
 */
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X0(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X0_SHIFT)) & LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X0_MASK)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X1_MASK (0xF00000U)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X1_SHIFT (20U)
/*! Y3_X1 - Dither threshold value for x,y=1,3.
 */
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X1(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X1_SHIFT)) & LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X1_MASK)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X2_MASK (0xF000000U)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X2_SHIFT (24U)
/*! Y3_X2 - Dither threshold value for x,y=2,3.
 */
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X2(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X2_SHIFT)) & LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X2_MASK)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X3_MASK (0xF0000000U)
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X3_SHIFT (28U)
/*! Y3_X3 - Dither threshold value for x,y=3,3.
 */
#define LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X3(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X3_SHIFT)) & LCDIF_DISPLAYDITHERTABLEHIGH0_Y3_X3_MASK)
/*! @} */

/*! @name PANELCONFIG0 - Panel configuration */
/*! @{ */
#define LCDIF_PANELCONFIG0_DE_MASK               (0x1U)
#define LCDIF_PANELCONFIG0_DE_SHIFT              (0U)
#define LCDIF_PANELCONFIG0_DE_POLARITY_MASK      (0x2U)
#define LCDIF_PANELCONFIG0_DE_POLARITY_SHIFT     (1U)
#define LCDIF_PANELCONFIG0_DATA_POLARITY_MASK    (0x20U)
#define LCDIF_PANELCONFIG0_DATA_POLARITY_SHIFT   (5U)
#define LCDIF_PANELCONFIG0_CLOCK_MASK            (0x100U)
#define LCDIF_PANELCONFIG0_CLOCK_SHIFT           (8U)
#define LCDIF_PANELCONFIG0_CLOCK_POLARITY_MASK   (0x200U)
#define LCDIF_PANELCONFIG0_CLOCK_POLARITY_SHIFT  (9U)
#define LCDIF_PANELCONFIG0_SEQUENCING_MASK       (0x80000000U)
#define LCDIF_PANELCONFIG0_SEQUENCING_SHIFT      (31U)
/*! @} */

/*! @name PANELTIMING0 - Timing for hardware panel sequencing */
/*! @{ */
#define LCDIF_PANELTIMING0_POWER_ENABLE_MASK     (0xFU)
#define LCDIF_PANELTIMING0_POWER_ENABLE_SHIFT    (0U)
/*! POWER_ENABLE - Number of VSYNCsto wait after power has been enabled.
 */
#define LCDIF_PANELTIMING0_POWER_ENABLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_PANELTIMING0_POWER_ENABLE_SHIFT)) & LCDIF_PANELTIMING0_POWER_ENABLE_MASK)
#define LCDIF_PANELTIMING0_BACKLIGHT_ENABLE_MASK (0xF0U)
#define LCDIF_PANELTIMING0_BACKLIGHT_ENABLE_SHIFT (4U)
/*! BACKLIGHT_ENABLE - Number of VSYNCs to wait after backlight has been enabled.
 */
#define LCDIF_PANELTIMING0_BACKLIGHT_ENABLE(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_PANELTIMING0_BACKLIGHT_ENABLE_SHIFT)) & LCDIF_PANELTIMING0_BACKLIGHT_ENABLE_MASK)
#define LCDIF_PANELTIMING0_CLOCK_ENABLE_MASK     (0xF00U)
#define LCDIF_PANELTIMING0_CLOCK_ENABLE_SHIFT    (8U)
/*! CLOCK_ENABLE - Number of VSYNCs to wait after clock has been enabled.
 */
#define LCDIF_PANELTIMING0_CLOCK_ENABLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_PANELTIMING0_CLOCK_ENABLE_SHIFT)) & LCDIF_PANELTIMING0_CLOCK_ENABLE_MASK)
#define LCDIF_PANELTIMING0_DATA_ENABLE_MASK      (0xF000U)
#define LCDIF_PANELTIMING0_DATA_ENABLE_SHIFT     (12U)
/*! DATA_ENABLE - Number of VSYNCs to wait after data has been enabled.
 */
#define LCDIF_PANELTIMING0_DATA_ENABLE(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_PANELTIMING0_DATA_ENABLE_SHIFT)) & LCDIF_PANELTIMING0_DATA_ENABLE_MASK)
#define LCDIF_PANELTIMING0_DATA_DISABLE_MASK     (0xF0000U)
#define LCDIF_PANELTIMING0_DATA_DISABLE_SHIFT    (16U)
/*! DATA_DISABLE - Number of VSYNCs to wait after data has been disabled.
 */
#define LCDIF_PANELTIMING0_DATA_DISABLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_PANELTIMING0_DATA_DISABLE_SHIFT)) & LCDIF_PANELTIMING0_DATA_DISABLE_MASK)
#define LCDIF_PANELTIMING0_CLOCK_DISABLE_MASK    (0xF00000U)
#define LCDIF_PANELTIMING0_CLOCK_DISABLE_SHIFT   (20U)
/*! CLOCK_DISABLE - Number of VSYNCs to wait after clock has been disabled.
 */
#define LCDIF_PANELTIMING0_CLOCK_DISABLE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_PANELTIMING0_CLOCK_DISABLE_SHIFT)) & LCDIF_PANELTIMING0_CLOCK_DISABLE_MASK)
#define LCDIF_PANELTIMING0_BACKLIGHT_DISABLE_MASK (0xF000000U)
#define LCDIF_PANELTIMING0_BACKLIGHT_DISABLE_SHIFT (24U)
/*! BACKLIGHT_DISABLE - Number of VSYNCs to wait after backlight has been disabled.
 */
#define LCDIF_PANELTIMING0_BACKLIGHT_DISABLE(x)  (((uint32_t)(((uint32_t)(x)) << LCDIF_PANELTIMING0_BACKLIGHT_DISABLE_SHIFT)) & LCDIF_PANELTIMING0_BACKLIGHT_DISABLE_MASK)
#define LCDIF_PANELTIMING0_POWER_DISABLE_MASK    (0xF0000000U)
#define LCDIF_PANELTIMING0_POWER_DISABLE_SHIFT   (28U)
/*! POWER_DISABLE - Number of VSYNCs to wait after power has been disabled.
 */
#define LCDIF_PANELTIMING0_POWER_DISABLE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_PANELTIMING0_POWER_DISABLE_SHIFT)) & LCDIF_PANELTIMING0_POWER_DISABLE_MASK)
/*! @} */

/*! @name HDISPLAY0 - Horizontal Total and Display End counters */
/*! @{ */
#define LCDIF_HDISPLAY0_DISPLAY_END_MASK         (0x1FFFU)
#define LCDIF_HDISPLAY0_DISPLAY_END_SHIFT        (0U)
/*! DISPLAY_END - Number of visible horizontal pixels.
 */
#define LCDIF_HDISPLAY0_DISPLAY_END(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_HDISPLAY0_DISPLAY_END_SHIFT)) & LCDIF_HDISPLAY0_DISPLAY_END_MASK)
#define LCDIF_HDISPLAY0_TOTAL_MASK               (0x1FFF0000U)
#define LCDIF_HDISPLAY0_TOTAL_SHIFT              (16U)
/*! TOTAL - Total number of horizontal pixels.
 */
#define LCDIF_HDISPLAY0_TOTAL(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_HDISPLAY0_TOTAL_SHIFT)) & LCDIF_HDISPLAY0_TOTAL_MASK)
/*! @} */

/*! @name HSYNC0 - Horizontal Sync counters */
/*! @{ */
#define LCDIF_HSYNC0_START_MASK                  (0x1FFFU)
#define LCDIF_HSYNC0_START_SHIFT                 (0U)
/*! START - Start of horizontal sync pulse.
 */
#define LCDIF_HSYNC0_START(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_HSYNC0_START_SHIFT)) & LCDIF_HSYNC0_START_MASK)
#define LCDIF_HSYNC0_END_MASK                    (0x1FFF0000U)
#define LCDIF_HSYNC0_END_SHIFT                   (16U)
/*! END - End of horizontal sync pulse.
 */
#define LCDIF_HSYNC0_END(x)                      (((uint32_t)(((uint32_t)(x)) << LCDIF_HSYNC0_END_SHIFT)) & LCDIF_HSYNC0_END_MASK)
#define LCDIF_HSYNC0_PULSE_MASK                  (0x40000000U)
#define LCDIF_HSYNC0_PULSE_SHIFT                 (30U)
#define LCDIF_HSYNC0_POLARITY_MASK               (0x80000000U)
#define LCDIF_HSYNC0_POLARITY_SHIFT              (31U)
/*! @} */

/*! @name VDISPLAY0 - Vertical Total and Display End counters */
/*! @{ */
#define LCDIF_VDISPLAY0_DISPLAY_END_MASK         (0xFFFU)
#define LCDIF_VDISPLAY0_DISPLAY_END_SHIFT        (0U)
/*! DISPLAY_END - Number of visible vertical lines.
 */
#define LCDIF_VDISPLAY0_DISPLAY_END(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDISPLAY0_DISPLAY_END_SHIFT)) & LCDIF_VDISPLAY0_DISPLAY_END_MASK)
#define LCDIF_VDISPLAY0_TOTAL_MASK               (0xFFF0000U)
#define LCDIF_VDISPLAY0_TOTAL_SHIFT              (16U)
/*! TOTAL - Total number of vertical lines.
 */
#define LCDIF_VDISPLAY0_TOTAL(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_VDISPLAY0_TOTAL_SHIFT)) & LCDIF_VDISPLAY0_TOTAL_MASK)
/*! @} */

/*! @name VSYNC0 - Vertical Sync counters */
/*! @{ */
#define LCDIF_VSYNC0_START_MASK                  (0xFFFU)
#define LCDIF_VSYNC0_START_SHIFT                 (0U)
/*! START - Start of the vertical sync pulse.
 */
#define LCDIF_VSYNC0_START(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_VSYNC0_START_SHIFT)) & LCDIF_VSYNC0_START_MASK)
#define LCDIF_VSYNC0_END_MASK                    (0xFFF0000U)
#define LCDIF_VSYNC0_END_SHIFT                   (16U)
/*! END - End of the vertical sync pulse.
 */
#define LCDIF_VSYNC0_END(x)                      (((uint32_t)(((uint32_t)(x)) << LCDIF_VSYNC0_END_SHIFT)) & LCDIF_VSYNC0_END_MASK)
#define LCDIF_VSYNC0_PULSE_MASK                  (0x40000000U)
#define LCDIF_VSYNC0_PULSE_SHIFT                 (30U)
#define LCDIF_VSYNC0_POLARITY_MASK               (0x80000000U)
#define LCDIF_VSYNC0_POLARITY_SHIFT              (31U)
/*! @} */

/*! @name DISPLAYCURRENTLOCATION0 - Current x,y location of display controller */
/*! @{ */
#define LCDIF_DISPLAYCURRENTLOCATION0_X_MASK     (0xFFFFU)
#define LCDIF_DISPLAYCURRENTLOCATION0_X_SHIFT    (0U)
/*! X - Current X location.
 */
#define LCDIF_DISPLAYCURRENTLOCATION0_X(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYCURRENTLOCATION0_X_SHIFT)) & LCDIF_DISPLAYCURRENTLOCATION0_X_MASK)
#define LCDIF_DISPLAYCURRENTLOCATION0_Y_MASK     (0xFFFF0000U)
#define LCDIF_DISPLAYCURRENTLOCATION0_Y_SHIFT    (16U)
/*! Y - Current Y location.
 */
#define LCDIF_DISPLAYCURRENTLOCATION0_Y(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_DISPLAYCURRENTLOCATION0_Y_SHIFT)) & LCDIF_DISPLAYCURRENTLOCATION0_Y_MASK)
/*! @} */

/*! @name GAMMAINDEX0 - Index into gamma table */
/*! @{ */
#define LCDIF_GAMMAINDEX0_INDEX_MASK             (0xFFU)
#define LCDIF_GAMMAINDEX0_INDEX_SHIFT            (0U)
/*! INDEX - Index into gamma table.
 */
#define LCDIF_GAMMAINDEX0_INDEX(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_GAMMAINDEX0_INDEX_SHIFT)) & LCDIF_GAMMAINDEX0_INDEX_MASK)
/*! @} */

/*! @name GAMMADATA0 - Translation values for the gamma table */
/*! @{ */
#define LCDIF_GAMMADATA0_BLUE_MASK               (0xFFU)
#define LCDIF_GAMMADATA0_BLUE_SHIFT              (0U)
/*! BLUE - Blue translation value.
 */
#define LCDIF_GAMMADATA0_BLUE(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_GAMMADATA0_BLUE_SHIFT)) & LCDIF_GAMMADATA0_BLUE_MASK)
#define LCDIF_GAMMADATA0_GREEN_MASK              (0xFF00U)
#define LCDIF_GAMMADATA0_GREEN_SHIFT             (8U)
/*! GREEN - Green translation value.
 */
#define LCDIF_GAMMADATA0_GREEN(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_GAMMADATA0_GREEN_SHIFT)) & LCDIF_GAMMADATA0_GREEN_MASK)
#define LCDIF_GAMMADATA0_RED_MASK                (0xFF0000U)
#define LCDIF_GAMMADATA0_RED_SHIFT               (16U)
/*! RED - Red translation value.
 */
#define LCDIF_GAMMADATA0_RED(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_GAMMADATA0_RED_SHIFT)) & LCDIF_GAMMADATA0_RED_MASK)
/*! @} */

/*! @name CURSORCONFIG - Configuration register for the cursor */
/*! @{ */
#define LCDIF_CURSORCONFIG_FORMAT_MASK           (0x3U)
#define LCDIF_CURSORCONFIG_FORMAT_SHIFT          (0U)
/*! FORMAT - Format of the cursor.
 */
#define LCDIF_CURSORCONFIG_FORMAT(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORCONFIG_FORMAT_SHIFT)) & LCDIF_CURSORCONFIG_FORMAT_MASK)
#define LCDIF_CURSORCONFIG_DISPLAY_MASK          (0x10U)
#define LCDIF_CURSORCONFIG_DISPLAY_SHIFT         (4U)
#define LCDIF_CURSORCONFIG_HOT_SPOT_Y_MASK       (0x1F00U)
#define LCDIF_CURSORCONFIG_HOT_SPOT_Y_SHIFT      (8U)
/*! HOT_SPOT_Y - Vertical offset to cursor hotspot.
 */
#define LCDIF_CURSORCONFIG_HOT_SPOT_Y(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORCONFIG_HOT_SPOT_Y_SHIFT)) & LCDIF_CURSORCONFIG_HOT_SPOT_Y_MASK)
#define LCDIF_CURSORCONFIG_HOT_SPOT_X_MASK       (0x1F0000U)
#define LCDIF_CURSORCONFIG_HOT_SPOT_X_SHIFT      (16U)
/*! HOT_SPOT_X - Horizontal offset to cursor hotspot.
 */
#define LCDIF_CURSORCONFIG_HOT_SPOT_X(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORCONFIG_HOT_SPOT_X_SHIFT)) & LCDIF_CURSORCONFIG_HOT_SPOT_X_MASK)
#define LCDIF_CURSORCONFIG_FLIP_IN_PROGRESS_MASK (0x80000000U)
#define LCDIF_CURSORCONFIG_FLIP_IN_PROGRESS_SHIFT (31U)
/*! @} */

/*! @name CURSORADDRESS - Address of the cursor shape */
/*! @{ */
#define LCDIF_CURSORADDRESS_ADDRESS_MASK         (0x7FFFFFFFU)
#define LCDIF_CURSORADDRESS_ADDRESS_SHIFT        (0U)
/*! ADDRESS - ADDRESS
 */
#define LCDIF_CURSORADDRESS_ADDRESS(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORADDRESS_ADDRESS_SHIFT)) & LCDIF_CURSORADDRESS_ADDRESS_MASK)
#define LCDIF_CURSORADDRESS_TYPE_MASK            (0x80000000U)
#define LCDIF_CURSORADDRESS_TYPE_SHIFT           (31U)
/*! @} */

/*! @name CURSORLOCATION - Location of the cursor on the owning display */
/*! @{ */
#define LCDIF_CURSORLOCATION_X_MASK              (0x1FFFU)
#define LCDIF_CURSORLOCATION_X_SHIFT             (0U)
/*! X - X location of cursor's hotspot.
 */
#define LCDIF_CURSORLOCATION_X(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORLOCATION_X_SHIFT)) & LCDIF_CURSORLOCATION_X_MASK)
#define LCDIF_CURSORLOCATION_Y_MASK              (0xFFF0000U)
#define LCDIF_CURSORLOCATION_Y_SHIFT             (16U)
/*! Y - Y location of cursor's hotspot.
 */
#define LCDIF_CURSORLOCATION_Y(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORLOCATION_Y_SHIFT)) & LCDIF_CURSORLOCATION_Y_MASK)
/*! @} */

/*! @name CURSORBACKGROUND - The background color for Masked cursors */
/*! @{ */
#define LCDIF_CURSORBACKGROUND_BLUE_MASK         (0xFFU)
#define LCDIF_CURSORBACKGROUND_BLUE_SHIFT        (0U)
/*! BLUE - Blue value.
 */
#define LCDIF_CURSORBACKGROUND_BLUE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORBACKGROUND_BLUE_SHIFT)) & LCDIF_CURSORBACKGROUND_BLUE_MASK)
#define LCDIF_CURSORBACKGROUND_GREEN_MASK        (0xFF00U)
#define LCDIF_CURSORBACKGROUND_GREEN_SHIFT       (8U)
/*! GREEN - Green value.
 */
#define LCDIF_CURSORBACKGROUND_GREEN(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORBACKGROUND_GREEN_SHIFT)) & LCDIF_CURSORBACKGROUND_GREEN_MASK)
#define LCDIF_CURSORBACKGROUND_RED_MASK          (0xFF0000U)
#define LCDIF_CURSORBACKGROUND_RED_SHIFT         (16U)
/*! RED - Red value.
 */
#define LCDIF_CURSORBACKGROUND_RED(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORBACKGROUND_RED_SHIFT)) & LCDIF_CURSORBACKGROUND_RED_MASK)
/*! @} */

/*! @name CURSORFOREGROUND - The foreground color for Masked cursors */
/*! @{ */
#define LCDIF_CURSORFOREGROUND_BLUE_MASK         (0xFFU)
#define LCDIF_CURSORFOREGROUND_BLUE_SHIFT        (0U)
/*! BLUE - Blue value.
 */
#define LCDIF_CURSORFOREGROUND_BLUE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORFOREGROUND_BLUE_SHIFT)) & LCDIF_CURSORFOREGROUND_BLUE_MASK)
#define LCDIF_CURSORFOREGROUND_GREEN_MASK        (0xFF00U)
#define LCDIF_CURSORFOREGROUND_GREEN_SHIFT       (8U)
/*! GREEN - Green value.
 */
#define LCDIF_CURSORFOREGROUND_GREEN(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORFOREGROUND_GREEN_SHIFT)) & LCDIF_CURSORFOREGROUND_GREEN_MASK)
#define LCDIF_CURSORFOREGROUND_RED_MASK          (0xFF0000U)
#define LCDIF_CURSORFOREGROUND_RED_SHIFT         (16U)
/*! RED - Red value.
 */
#define LCDIF_CURSORFOREGROUND_RED(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CURSORFOREGROUND_RED_SHIFT)) & LCDIF_CURSORFOREGROUND_RED_MASK)
/*! @} */

/*! @name DISPLAYINTR - Display interrupt register */
/*! @{ */
#define LCDIF_DISPLAYINTR_DISP0_MASK             (0x1U)
#define LCDIF_DISPLAYINTR_DISP0_SHIFT            (0U)
/*! @} */

/*! @name DISPLAYINTRENABLE - The interrupt enable register for display_0 (and display_1 if present) */
/*! @{ */
#define LCDIF_DISPLAYINTRENABLE_DISP0_MASK       (0x1U)
#define LCDIF_DISPLAYINTRENABLE_DISP0_SHIFT      (0U)
/*! @} */

/*! @name DBICONFIG0 - Configuration register for DBI output */
/*! @{ */
#define LCDIF_DBICONFIG0_DBI_DATA_FORMAT_MASK    (0x3CU)
#define LCDIF_DBICONFIG0_DBI_DATA_FORMAT_SHIFT   (2U)
/*! DBI_DATA_FORMAT - DBI interface data format.
 */
#define LCDIF_DBICONFIG0_DBI_DATA_FORMAT(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_DBICONFIG0_DBI_DATA_FORMAT_SHIFT)) & LCDIF_DBICONFIG0_DBI_DATA_FORMAT_MASK)
#define LCDIF_DBICONFIG0_BUS_OUTPUT_SEL_MASK     (0x40U)
#define LCDIF_DBICONFIG0_BUS_OUTPUT_SEL_SHIFT    (6U)
#define LCDIF_DBICONFIG0_DBIX_POLARITY_MASK      (0x80U)
#define LCDIF_DBICONFIG0_DBIX_POLARITY_SHIFT     (7U)
#define LCDIF_DBICONFIG0_DBI_AC_TIME_UNIT_MASK   (0xF00U)
#define LCDIF_DBICONFIG0_DBI_AC_TIME_UNIT_SHIFT  (8U)
/*! DBI_AC_TIME_UNIT - Time unit for AC characteristics
 */
#define LCDIF_DBICONFIG0_DBI_AC_TIME_UNIT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_DBICONFIG0_DBI_AC_TIME_UNIT_SHIFT)) & LCDIF_DBICONFIG0_DBI_AC_TIME_UNIT_MASK)
/*! @} */

/*! @name DBIIFRESET0 - Reset DBI interface to idle state */
/*! @{ */
#define LCDIF_DBIIFRESET0_DBI_IF_LEVEL_RESET_MASK (0x1U)
#define LCDIF_DBIIFRESET0_DBI_IF_LEVEL_RESET_SHIFT (0U)
/*! @} */

/*! @name DBIWRCHAR10 - DBI write AC characteristics definition register 1 */
/*! @{ */
#define LCDIF_DBIWRCHAR10_DBI_WR_PERIOD_MASK     (0xFFU)
#define LCDIF_DBIWRCHAR10_DBI_WR_PERIOD_SHIFT    (0U)
/*! DBI_WR_PERIOD - Single write period duration.
 */
#define LCDIF_DBIWRCHAR10_DBI_WR_PERIOD(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_DBIWRCHAR10_DBI_WR_PERIOD_SHIFT)) & LCDIF_DBIWRCHAR10_DBI_WR_PERIOD_MASK)
#define LCDIF_DBIWRCHAR10_DBI_WR_EOR_WR_ASSERT_MASK (0xF00U)
#define LCDIF_DBIWRCHAR10_DBI_WR_EOR_WR_ASSERT_SHIFT (8U)
/*! DBI_WR_EOR_WR_ASSERT - Cycle number=Setting*(DbiAcTimeUnit+1).
 */
#define LCDIF_DBIWRCHAR10_DBI_WR_EOR_WR_ASSERT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_DBIWRCHAR10_DBI_WR_EOR_WR_ASSERT_SHIFT)) & LCDIF_DBIWRCHAR10_DBI_WR_EOR_WR_ASSERT_MASK)
#define LCDIF_DBIWRCHAR10_DBI_WR_CS_ASSERT_MASK  (0xF000U)
#define LCDIF_DBIWRCHAR10_DBI_WR_CS_ASSERT_SHIFT (12U)
/*! DBI_WR_CS_ASSERT - Cycle number=Setting*(DbiAcTimeUnit+1).
 */
#define LCDIF_DBIWRCHAR10_DBI_WR_CS_ASSERT(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DBIWRCHAR10_DBI_WR_CS_ASSERT_SHIFT)) & LCDIF_DBIWRCHAR10_DBI_WR_CS_ASSERT_MASK)
/*! @} */

/*! @name DBIWRCHAR20 - DBI write AC characteristics definition register 2 */
/*! @{ */
#define LCDIF_DBIWRCHAR20_DBI_WR_EOR_WR_DE_ASRT_MASK (0xFFU)
#define LCDIF_DBIWRCHAR20_DBI_WR_EOR_WR_DE_ASRT_SHIFT (0U)
/*! DBI_WR_EOR_WR_DE_ASRT - Cycle number=Setting*(DbiAcTimeUnit+1).
 */
#define LCDIF_DBIWRCHAR20_DBI_WR_EOR_WR_DE_ASRT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_DBIWRCHAR20_DBI_WR_EOR_WR_DE_ASRT_SHIFT)) & LCDIF_DBIWRCHAR20_DBI_WR_EOR_WR_DE_ASRT_MASK)
#define LCDIF_DBIWRCHAR20_DBI_WR_CS_DE_ASRT_MASK (0xFF00U)
#define LCDIF_DBIWRCHAR20_DBI_WR_CS_DE_ASRT_SHIFT (8U)
/*! DBI_WR_CS_DE_ASRT - Cycle number=Setting*(DbiAcTimeUnit+1).
 */
#define LCDIF_DBIWRCHAR20_DBI_WR_CS_DE_ASRT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_DBIWRCHAR20_DBI_WR_CS_DE_ASRT_SHIFT)) & LCDIF_DBIWRCHAR20_DBI_WR_CS_DE_ASRT_MASK)
/*! @} */

/*! @name DBICMD0 - DBI Command in/out port */
/*! @{ */
#define LCDIF_DBICMD0_DBI_COMMAND_WORD_MASK      (0xFFFFU)
#define LCDIF_DBICMD0_DBI_COMMAND_WORD_SHIFT     (0U)
/*! DBI_COMMAND_WORD - The type of data contained in this word is specified using DBI_COMMANDFLAG[bits 31:30].
 */
#define LCDIF_DBICMD0_DBI_COMMAND_WORD(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_DBICMD0_DBI_COMMAND_WORD_SHIFT)) & LCDIF_DBICMD0_DBI_COMMAND_WORD_MASK)
#define LCDIF_DBICMD0_DBI_COMMANDFLAG_MASK       (0xC0000000U)
#define LCDIF_DBICMD0_DBI_COMMANDFLAG_SHIFT      (30U)
/*! DBI_COMMANDFLAG - DBI command flag.
 */
#define LCDIF_DBICMD0_DBI_COMMANDFLAG(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_DBICMD0_DBI_COMMANDFLAG_SHIFT)) & LCDIF_DBICMD0_DBI_COMMANDFLAG_MASK)
/*! @} */

/*! @name DPICONFIG0 - The configuration register for DPI output */
/*! @{ */
#define LCDIF_DPICONFIG0_DPI_DATA_FORMAT_MASK    (0x7U)
#define LCDIF_DPICONFIG0_DPI_DATA_FORMAT_SHIFT   (0U)
/*! DPI_DATA_FORMAT - DPI interface data format.
 */
#define LCDIF_DPICONFIG0_DPI_DATA_FORMAT(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_DPICONFIG0_DPI_DATA_FORMAT_SHIFT)) & LCDIF_DPICONFIG0_DPI_DATA_FORMAT_MASK)
/*! @} */

/*! @name DCCHIPREV - Revision for the chip in BCD */
/*! @{ */
#define LCDIF_DCCHIPREV_REV_MASK                 (0xFFFFFFFFU)
#define LCDIF_DCCHIPREV_REV_SHIFT                (0U)
/*! REV - Revision.
 */
#define LCDIF_DCCHIPREV_REV(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_DCCHIPREV_REV_SHIFT)) & LCDIF_DCCHIPREV_REV_MASK)
/*! @} */

/*! @name DCCHIPDATE - Shows the release date for the IP in YYYYMMDD (year, month) */
/*! @{ */
#define LCDIF_DCCHIPDATE_DATE_MASK               (0xFFFFFFFFU)
#define LCDIF_DCCHIPDATE_DATE_SHIFT              (0U)
/*! DATE - Date.
 */
#define LCDIF_DCCHIPDATE_DATE(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DCCHIPDATE_DATE_SHIFT)) & LCDIF_DCCHIPDATE_DATE_MASK)
/*! @} */

/*! @name DCCHIPPATCHREV - Patch revision */
/*! @{ */
#define LCDIF_DCCHIPPATCHREV_PATCH_REV_MASK      (0xFFFFFFFFU)
#define LCDIF_DCCHIPPATCHREV_PATCH_REV_SHIFT     (0U)
/*! PATCH_REV - Patch revision.
 */
#define LCDIF_DCCHIPPATCHREV_PATCH_REV(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_DCCHIPPATCHREV_PATCH_REV_SHIFT)) & LCDIF_DCCHIPPATCHREV_PATCH_REV_MASK)
/*! @} */

/*! @name DCTILEINCFG0 - Tile input configuration */
/*! @{ */
#define LCDIF_DCTILEINCFG0_TILE_FORMAT_MASK      (0x3U)
#define LCDIF_DCTILEINCFG0_TILE_FORMAT_SHIFT     (0U)
/*! TILE_FORMAT - Tile input data format 0 means non-tile input
 */
#define LCDIF_DCTILEINCFG0_TILE_FORMAT(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_DCTILEINCFG0_TILE_FORMAT_SHIFT)) & LCDIF_DCTILEINCFG0_TILE_FORMAT_MASK)
#define LCDIF_DCTILEINCFG0_YUV_STANDARD_MASK     (0xCU)
#define LCDIF_DCTILEINCFG0_YUV_STANDARD_SHIFT    (2U)
/*! YUV_STANDARD - YUV standard select.
 */
#define LCDIF_DCTILEINCFG0_YUV_STANDARD(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_DCTILEINCFG0_YUV_STANDARD_SHIFT)) & LCDIF_DCTILEINCFG0_YUV_STANDARD_MASK)
#define LCDIF_DCTILEINCFG0_YUV2_RGB_EN_MASK      (0x10U)
#define LCDIF_DCTILEINCFG0_YUV2_RGB_EN_SHIFT     (4U)
#define LCDIF_DCTILEINCFG0_CFG_MODE_EN_MASK      (0x20U)
#define LCDIF_DCTILEINCFG0_CFG_MODE_EN_SHIFT     (5U)
/*! @} */

/*! @name DCTILEUVFRAMEBUFFERADR0 - UV frame buffer address when tile input */
/*! @{ */
#define LCDIF_DCTILEUVFRAMEBUFFERADR0_ADDRESS_MASK (0xFFFFFFFFU)
#define LCDIF_DCTILEUVFRAMEBUFFERADR0_ADDRESS_SHIFT (0U)
/*! ADDRESS - UV frame buffer address when tile input
 */
#define LCDIF_DCTILEUVFRAMEBUFFERADR0_ADDRESS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_DCTILEUVFRAMEBUFFERADR0_ADDRESS_SHIFT)) & LCDIF_DCTILEUVFRAMEBUFFERADR0_ADDRESS_MASK)
/*! @} */

/*! @name DCTILEUVFRAMEBUFFERSTR0 - UV frame buffer stride when tile input */
/*! @{ */
#define LCDIF_DCTILEUVFRAMEBUFFERSTR0_STRIDE_MASK (0xFFFFU)
#define LCDIF_DCTILEUVFRAMEBUFFERSTR0_STRIDE_SHIFT (0U)
/*! STRIDE - UV frame buffer stride when tile input
 */
#define LCDIF_DCTILEUVFRAMEBUFFERSTR0_STRIDE(x)  (((uint32_t)(((uint32_t)(x)) << LCDIF_DCTILEUVFRAMEBUFFERSTR0_STRIDE_SHIFT)) & LCDIF_DCTILEUVFRAMEBUFFERSTR0_STRIDE_MASK)
/*! @} */

/*! @name DCPRODUCTID - Product ID */
/*! @{ */
#define LCDIF_DCPRODUCTID_PRODUCT_ID_MASK        (0xFFFFFFFFU)
#define LCDIF_DCPRODUCTID_PRODUCT_ID_SHIFT       (0U)
/*! PRODUCT_ID - Product ID.
 */
#define LCDIF_DCPRODUCTID_PRODUCT_ID(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DCPRODUCTID_PRODUCT_ID_SHIFT)) & LCDIF_DCPRODUCTID_PRODUCT_ID_MASK)
/*! @} */

/*! @name DEBUGCOUNTERSELECT0 -  */
/*! @{ */
#define LCDIF_DEBUGCOUNTERSELECT0_SELECT_MASK    (0xFFU)
#define LCDIF_DEBUGCOUNTERSELECT0_SELECT_SHIFT   (0U)
/*! SELECT - Write a value to this field to pick up from 0~255 counters.
 */
#define LCDIF_DEBUGCOUNTERSELECT0_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_DEBUGCOUNTERSELECT0_SELECT_SHIFT)) & LCDIF_DEBUGCOUNTERSELECT0_SELECT_MASK)
/*! @} */

/*! @name DEBUGCOUNTERVALUE0 - Debug Counter Value as specified in DebugCounterSelect */
/*! @{ */
#define LCDIF_DEBUGCOUNTERVALUE0_VALUE_MASK      (0xFFFFFFFFU)
#define LCDIF_DEBUGCOUNTERVALUE0_VALUE_SHIFT     (0U)
/*! VALUE - Selected debug counter value
 */
#define LCDIF_DEBUGCOUNTERVALUE0_VALUE(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_DEBUGCOUNTERVALUE0_VALUE_SHIFT)) & LCDIF_DEBUGCOUNTERVALUE0_VALUE_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group LCDIF_Register_Masks */


/* LCDIF - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral LCDIF base pointer */
  #define LCDIF_BASE_PTR                           ((LCDIF_MemMapPtr)0x50210000u)
  /** Peripheral LCDIF base pointer */
  #define LCDIF_BASE_PTR_NS                        ((LCDIF_MemMapPtr)0x40210000u)
  /** Array initializer of LCDIF peripheral base pointers */
  #define LCDIF_BASE_PTRS                          { LCDIF_BASE_PTR }
  /** Array initializer of LCDIF peripheral base pointers */
  #define LCDIF_BASE_PTRS_NS                       { LCDIF_BASE_PTR_NS }
#else
  /** Peripheral LCDIF base pointer */
  #define LCDIF_BASE_PTR                           ((LCDIF_MemMapPtr)0x40210000u)
  /** Array initializer of LCDIF peripheral base pointers */
  #define LCDIF_BASE_PTRS                          { LCDIF_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- LCDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Register_Accessor_Macros LCDIF - Register accessor macros
 * @{
 */


/* LCDIF - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* LCDIF */
  #define LCDIF_FRAMEBUFFERCONFIG0                 LCDIF_FRAMEBUFFERCONFIG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_FRAMEBUFFERCONFIG0_NS              LCDIF_FRAMEBUFFERCONFIG0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_FRAMEBUFFERADDRESS0                LCDIF_FRAMEBUFFERADDRESS0_REG(LCDIF_BASE_PTR)
  #define LCDIF_FRAMEBUFFERADDRESS0_NS             LCDIF_FRAMEBUFFERADDRESS0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_FRAMEBUFFERSTRIDE0                 LCDIF_FRAMEBUFFERSTRIDE0_REG(LCDIF_BASE_PTR)
  #define LCDIF_FRAMEBUFFERSTRIDE0_NS              LCDIF_FRAMEBUFFERSTRIDE0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DISPLAYDITHERCONFIG0               LCDIF_DISPLAYDITHERCONFIG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYDITHERCONFIG0_NS            LCDIF_DISPLAYDITHERCONFIG0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DISPLAYDITHERTABLELOW0             LCDIF_DISPLAYDITHERTABLELOW0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYDITHERTABLELOW0_NS          LCDIF_DISPLAYDITHERTABLELOW0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DISPLAYDITHERTABLEHIGH0            LCDIF_DISPLAYDITHERTABLEHIGH0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYDITHERTABLEHIGH0_NS         LCDIF_DISPLAYDITHERTABLEHIGH0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_PANELCONFIG0                       LCDIF_PANELCONFIG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_PANELCONFIG0_NS                    LCDIF_PANELCONFIG0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_PANELTIMING0                       LCDIF_PANELTIMING0_REG(LCDIF_BASE_PTR)
  #define LCDIF_PANELTIMING0_NS                    LCDIF_PANELTIMING0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_HDISPLAY0                          LCDIF_HDISPLAY0_REG(LCDIF_BASE_PTR)
  #define LCDIF_HDISPLAY0_NS                       LCDIF_HDISPLAY0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_HSYNC0                             LCDIF_HSYNC0_REG(LCDIF_BASE_PTR)
  #define LCDIF_HSYNC0_NS                          LCDIF_HSYNC0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_VDISPLAY0                          LCDIF_VDISPLAY0_REG(LCDIF_BASE_PTR)
  #define LCDIF_VDISPLAY0_NS                       LCDIF_VDISPLAY0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_VSYNC0                             LCDIF_VSYNC0_REG(LCDIF_BASE_PTR)
  #define LCDIF_VSYNC0_NS                          LCDIF_VSYNC0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DISPLAYCURRENTLOCATION0            LCDIF_DISPLAYCURRENTLOCATION0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYCURRENTLOCATION0_NS         LCDIF_DISPLAYCURRENTLOCATION0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_GAMMAINDEX0                        LCDIF_GAMMAINDEX0_REG(LCDIF_BASE_PTR)
  #define LCDIF_GAMMAINDEX0_NS                     LCDIF_GAMMAINDEX0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_GAMMADATA0                         LCDIF_GAMMADATA0_REG(LCDIF_BASE_PTR)
  #define LCDIF_GAMMADATA0_NS                      LCDIF_GAMMADATA0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_CURSORCONFIG                       LCDIF_CURSORCONFIG_REG(LCDIF_BASE_PTR)
  #define LCDIF_CURSORCONFIG_NS                    LCDIF_CURSORCONFIG_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_CURSORADDRESS                      LCDIF_CURSORADDRESS_REG(LCDIF_BASE_PTR)
  #define LCDIF_CURSORADDRESS_NS                   LCDIF_CURSORADDRESS_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_CURSORLOCATION                     LCDIF_CURSORLOCATION_REG(LCDIF_BASE_PTR)
  #define LCDIF_CURSORLOCATION_NS                  LCDIF_CURSORLOCATION_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_CURSORBACKGROUND                   LCDIF_CURSORBACKGROUND_REG(LCDIF_BASE_PTR)
  #define LCDIF_CURSORBACKGROUND_NS                LCDIF_CURSORBACKGROUND_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_CURSORFOREGROUND                   LCDIF_CURSORFOREGROUND_REG(LCDIF_BASE_PTR)
  #define LCDIF_CURSORFOREGROUND_NS                LCDIF_CURSORFOREGROUND_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DISPLAYINTR                        LCDIF_DISPLAYINTR_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYINTR_NS                     LCDIF_DISPLAYINTR_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DISPLAYINTRENABLE                  LCDIF_DISPLAYINTRENABLE_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYINTRENABLE_NS               LCDIF_DISPLAYINTRENABLE_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DBICONFIG0                         LCDIF_DBICONFIG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DBICONFIG0_NS                      LCDIF_DBICONFIG0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DBIIFRESET0                        LCDIF_DBIIFRESET0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DBIIFRESET0_NS                     LCDIF_DBIIFRESET0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DBIWRCHAR10                        LCDIF_DBIWRCHAR10_REG(LCDIF_BASE_PTR)
  #define LCDIF_DBIWRCHAR10_NS                     LCDIF_DBIWRCHAR10_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DBIWRCHAR20                        LCDIF_DBIWRCHAR20_REG(LCDIF_BASE_PTR)
  #define LCDIF_DBIWRCHAR20_NS                     LCDIF_DBIWRCHAR20_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DBICMD0                            LCDIF_DBICMD0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DBICMD0_NS                         LCDIF_DBICMD0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DPICONFIG0                         LCDIF_DPICONFIG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DPICONFIG0_NS                      LCDIF_DPICONFIG0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DCCHIPREV                          LCDIF_DCCHIPREV_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCCHIPREV_NS                       LCDIF_DCCHIPREV_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DCCHIPDATE                         LCDIF_DCCHIPDATE_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCCHIPDATE_NS                      LCDIF_DCCHIPDATE_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DCCHIPPATCHREV                     LCDIF_DCCHIPPATCHREV_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCCHIPPATCHREV_NS                  LCDIF_DCCHIPPATCHREV_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DCTILEINCFG0                       LCDIF_DCTILEINCFG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCTILEINCFG0_NS                    LCDIF_DCTILEINCFG0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DCTILEUVFRAMEBUFFERADR0            LCDIF_DCTILEUVFRAMEBUFFERADR0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCTILEUVFRAMEBUFFERADR0_NS         LCDIF_DCTILEUVFRAMEBUFFERADR0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DCTILEUVFRAMEBUFFERSTR0            LCDIF_DCTILEUVFRAMEBUFFERSTR0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCTILEUVFRAMEBUFFERSTR0_NS         LCDIF_DCTILEUVFRAMEBUFFERSTR0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DCPRODUCTID                        LCDIF_DCPRODUCTID_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCPRODUCTID_NS                     LCDIF_DCPRODUCTID_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DEBUGCOUNTERSELECT0                LCDIF_DEBUGCOUNTERSELECT0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DEBUGCOUNTERSELECT0_NS             LCDIF_DEBUGCOUNTERSELECT0_REG(LCDIF_BASE_PTR_NS)
  #define LCDIF_DEBUGCOUNTERVALUE0                 LCDIF_DEBUGCOUNTERVALUE0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DEBUGCOUNTERVALUE0_NS              LCDIF_DEBUGCOUNTERVALUE0_REG(LCDIF_BASE_PTR_NS)
#else
  /* LCDIF */
  #define LCDIF_FRAMEBUFFERCONFIG0                 LCDIF_FRAMEBUFFERCONFIG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_FRAMEBUFFERADDRESS0                LCDIF_FRAMEBUFFERADDRESS0_REG(LCDIF_BASE_PTR)
  #define LCDIF_FRAMEBUFFERSTRIDE0                 LCDIF_FRAMEBUFFERSTRIDE0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYDITHERCONFIG0               LCDIF_DISPLAYDITHERCONFIG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYDITHERTABLELOW0             LCDIF_DISPLAYDITHERTABLELOW0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYDITHERTABLEHIGH0            LCDIF_DISPLAYDITHERTABLEHIGH0_REG(LCDIF_BASE_PTR)
  #define LCDIF_PANELCONFIG0                       LCDIF_PANELCONFIG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_PANELTIMING0                       LCDIF_PANELTIMING0_REG(LCDIF_BASE_PTR)
  #define LCDIF_HDISPLAY0                          LCDIF_HDISPLAY0_REG(LCDIF_BASE_PTR)
  #define LCDIF_HSYNC0                             LCDIF_HSYNC0_REG(LCDIF_BASE_PTR)
  #define LCDIF_VDISPLAY0                          LCDIF_VDISPLAY0_REG(LCDIF_BASE_PTR)
  #define LCDIF_VSYNC0                             LCDIF_VSYNC0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYCURRENTLOCATION0            LCDIF_DISPLAYCURRENTLOCATION0_REG(LCDIF_BASE_PTR)
  #define LCDIF_GAMMAINDEX0                        LCDIF_GAMMAINDEX0_REG(LCDIF_BASE_PTR)
  #define LCDIF_GAMMADATA0                         LCDIF_GAMMADATA0_REG(LCDIF_BASE_PTR)
  #define LCDIF_CURSORCONFIG                       LCDIF_CURSORCONFIG_REG(LCDIF_BASE_PTR)
  #define LCDIF_CURSORADDRESS                      LCDIF_CURSORADDRESS_REG(LCDIF_BASE_PTR)
  #define LCDIF_CURSORLOCATION                     LCDIF_CURSORLOCATION_REG(LCDIF_BASE_PTR)
  #define LCDIF_CURSORBACKGROUND                   LCDIF_CURSORBACKGROUND_REG(LCDIF_BASE_PTR)
  #define LCDIF_CURSORFOREGROUND                   LCDIF_CURSORFOREGROUND_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYINTR                        LCDIF_DISPLAYINTR_REG(LCDIF_BASE_PTR)
  #define LCDIF_DISPLAYINTRENABLE                  LCDIF_DISPLAYINTRENABLE_REG(LCDIF_BASE_PTR)
  #define LCDIF_DBICONFIG0                         LCDIF_DBICONFIG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DBIIFRESET0                        LCDIF_DBIIFRESET0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DBIWRCHAR10                        LCDIF_DBIWRCHAR10_REG(LCDIF_BASE_PTR)
  #define LCDIF_DBIWRCHAR20                        LCDIF_DBIWRCHAR20_REG(LCDIF_BASE_PTR)
  #define LCDIF_DBICMD0                            LCDIF_DBICMD0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DPICONFIG0                         LCDIF_DPICONFIG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCCHIPREV                          LCDIF_DCCHIPREV_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCCHIPDATE                         LCDIF_DCCHIPDATE_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCCHIPPATCHREV                     LCDIF_DCCHIPPATCHREV_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCTILEINCFG0                       LCDIF_DCTILEINCFG0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCTILEUVFRAMEBUFFERADR0            LCDIF_DCTILEUVFRAMEBUFFERADR0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCTILEUVFRAMEBUFFERSTR0            LCDIF_DCTILEUVFRAMEBUFFERSTR0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DCPRODUCTID                        LCDIF_DCPRODUCTID_REG(LCDIF_BASE_PTR)
  #define LCDIF_DEBUGCOUNTERSELECT0                LCDIF_DEBUGCOUNTERSELECT0_REG(LCDIF_BASE_PTR)
  #define LCDIF_DEBUGCOUNTERVALUE0                 LCDIF_DEBUGCOUNTERVALUE0_REG(LCDIF_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group LCDIF_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group LCDIF_Peripheral */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_Peripheral MIPI_DSI_HOST
 * @{
 */

/** MIPI_DSI_HOST - Peripheral register structure */
typedef struct MIPI_DSI_HOST_MemMap {
  uint32_t DSI_HOST_CFG_NUM_LANES;                 /**< , offset: 0x0 */
  uint32_t DSI_HOST_CFG_NONCONTINUOUS_CLK;         /**< , offset: 0x4 */
  uint32_t DSI_HOST_CFG_T_PRE;                     /**< , offset: 0x8 */
  uint32_t DSI_HOST_CFG_T_POST;                    /**< , offset: 0xC */
  uint32_t DSI_HOST_CFG_TX_GAP;                    /**< , offset: 0x10 */
  uint32_t DSI_HOST_CFG_AUTOINSERT_EOTP;           /**< , offset: 0x14 */
  uint32_t DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP;     /**< , offset: 0x18 */
  uint32_t DSI_HOST_CFG_HTX_TO_COUNT;              /**< , offset: 0x1C */
  uint32_t DSI_HOST_CFG_LRX_H_TO_COUNT;            /**< , offset: 0x20 */
  uint32_t DSI_HOST_CFG_BTA_H_TO_COUNT;            /**< , offset: 0x24 */
  uint32_t DSI_HOST_CFG_TWAKEUP;                   /**< , offset: 0x28 */
  uint32_t DSI_HOST_CFG_STATUS_OUT;                /**< , offset: 0x2C */
  uint32_t DSI_HOST_RX_ERROR_STATUS;               /**< , offset: 0x30 */
  uint8_t RESERVED_0[204];
  uint32_t DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE;    /**< , offset: 0x100 */
  uint32_t DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL; /**< , offset: 0x104 */
  uint8_t RESERVED_1[248];
  uint32_t DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE;    /**< , offset: 0x200 */
  uint32_t DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL; /**< , offset: 0x204 */
  uint32_t DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING; /**< , offset: 0x208 */
  uint32_t DSI_HOST_CFG_DPI_PIXEL_FORMAT;          /**< , offset: 0x20C */
  uint32_t DSI_HOST_CFG_DPI_VSYNC_POLARITY;        /**< , offset: 0x210 */
  uint32_t DSI_HOST_CFG_DPI_HSYNC_POLARITY;        /**< , offset: 0x214 */
  uint32_t DSI_HOST_CFG_DPI_VIDEO_MODE;            /**< , offset: 0x218 */
  uint32_t DSI_HOST_CFG_DPI_HFP;                   /**< , offset: 0x21C */
  uint32_t DSI_HOST_CFG_DPI_HBP;                   /**< , offset: 0x220 */
  uint32_t DSI_HOST_CFG_DPI_HSA;                   /**< , offset: 0x224 */
  uint32_t DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS;      /**< , offset: 0x228 */
  uint32_t DSI_HOST_CFG_DPI_VBP;                   /**< , offset: 0x22C */
  uint32_t DSI_HOST_CFG_DPI_VFP;                   /**< , offset: 0x230 */
  uint32_t DSI_HOST_CFG_DPI_BLLP_MODE;             /**< , offset: 0x234 */
  uint32_t DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP;     /**< , offset: 0x238 */
  uint32_t DSI_HOST_CFG_DPI_VACTIVE;               /**< , offset: 0x23C */
  uint32_t DSI_HOST_CFG_DPI_VC;                    /**< , offset: 0x240 */
  uint8_t RESERVED_2[60];
  uint32_t DSI_HOST_TX_PAYLOAD;                    /**< , offset: 0x280 */
  uint32_t DSI_HOST_PKT_CONTROL;                   /**< , offset: 0x284 */
  uint32_t DSI_HOST_SEND_PACKET;                   /**< , offset: 0x288 */
  uint32_t DSI_HOST_PKT_STATUS;                    /**< , offset: 0x28C */
  uint32_t DSI_HOST_PKT_FIFO_WR_LEVEL;             /**< , offset: 0x290 */
  uint32_t DSI_HOST_PKT_FIFO_RD_LEVEL;             /**< , offset: 0x294 */
  uint32_t DSI_HOST_PKT_RX_PAYLOAD;                /**< , offset: 0x298 */
  uint32_t DSI_HOST_PKT_RX_PKT_HEADER;             /**< , offset: 0x29C */
  uint32_t DSI_HOST_IRQ_STATUS;                    /**< , offset: 0x2A0 */
  uint32_t DSI_HOST_IRQ_STATUS2;                   /**< , offset: 0x2A4 */
  uint32_t DSI_HOST_IRQ_MASK;                      /**< , offset: 0x2A8 */
  uint32_t DSI_HOST_IRQ_MASK2;                     /**< , offset: 0x2AC */
  uint8_t RESERVED_3[80];
  uint32_t DPHY_PD_DPHY;                           /**< , offset: 0x300 */
  uint32_t DPHY_M_PRG_HS_PREPARE;                  /**< , offset: 0x304 */
  uint32_t DPHY_MC_PRG_HS_PREPARE;                 /**< , offset: 0x308 */
  uint32_t DPHY_M_PRG_HS_ZERO;                     /**< , offset: 0x30C */
  uint32_t DPHY_MC_PRG_HS_ZERO;                    /**< , offset: 0x310 */
  uint32_t DPHY_M_PRG_HS_TRAIL;                    /**< , offset: 0x314 */
  uint32_t DPHY_MC_PRG_HS_TRAIL;                   /**< , offset: 0x318 */
  uint32_t DPHY_TST;                               /**< , offset: 0x31C */
  uint32_t DPHY_RTERM_SEL;                         /**< , offset: 0x320 */
  uint32_t DPHY_AUTO_PD_EN;                        /**< , offset: 0x324 */
  uint32_t DPHY_RXLPRP;                            /**< , offset: 0x328 */
  uint32_t DPHY_RXCDRP;                            /**< , offset: 0x32C */
} volatile *MIPI_DSI_HOST_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_Register_Accessor_Macros MIPI_DSI_HOST - Register accessor macros
 * @{
 */


/* MIPI_DSI_HOST - Register accessors */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_REG(base) ((base)->DSI_HOST_CFG_NUM_LANES)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_REG(base) ((base)->DSI_HOST_CFG_NONCONTINUOUS_CLK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_REG(base) ((base)->DSI_HOST_CFG_T_PRE)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_REG(base) ((base)->DSI_HOST_CFG_T_POST)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_REG(base) ((base)->DSI_HOST_CFG_TX_GAP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_REG(base) ((base)->DSI_HOST_CFG_AUTOINSERT_EOTP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_REG(base) ((base)->DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_REG(base) ((base)->DSI_HOST_CFG_HTX_TO_COUNT)
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_REG(base) ((base)->DSI_HOST_CFG_LRX_H_TO_COUNT)
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_REG(base) ((base)->DSI_HOST_CFG_BTA_H_TO_COUNT)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_REG(base) ((base)->DSI_HOST_CFG_TWAKEUP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_REG(base) ((base)->DSI_HOST_CFG_STATUS_OUT)
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_REG(base) ((base)->DSI_HOST_RX_ERROR_STATUS)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_REG(base) ((base)->DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_REG(base) ((base)->DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_REG(base) ((base)->DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_REG(base) ((base)->DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_REG(base) ((base)->DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_REG(base) ((base)->DSI_HOST_CFG_DPI_PIXEL_FORMAT)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_REG(base) ((base)->DSI_HOST_CFG_DPI_VSYNC_POLARITY)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_REG(base) ((base)->DSI_HOST_CFG_DPI_HSYNC_POLARITY)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_REG(base) ((base)->DSI_HOST_CFG_DPI_VIDEO_MODE)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_REG(base) ((base)->DSI_HOST_CFG_DPI_HFP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_REG(base) ((base)->DSI_HOST_CFG_DPI_HBP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_REG(base) ((base)->DSI_HOST_CFG_DPI_HSA)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_REG(base) ((base)->DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_REG(base) ((base)->DSI_HOST_CFG_DPI_VBP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_REG(base) ((base)->DSI_HOST_CFG_DPI_VFP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_REG(base) ((base)->DSI_HOST_CFG_DPI_BLLP_MODE)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_REG(base) ((base)->DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_REG(base) ((base)->DSI_HOST_CFG_DPI_VACTIVE)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_REG(base) ((base)->DSI_HOST_CFG_DPI_VC)
#define MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD_REG(base) ((base)->DSI_HOST_TX_PAYLOAD)
#define MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_REG(base) ((base)->DSI_HOST_PKT_CONTROL)
#define MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_REG(base) ((base)->DSI_HOST_SEND_PACKET)
#define MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_REG(base) ((base)->DSI_HOST_PKT_STATUS)
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_REG(base) ((base)->DSI_HOST_PKT_FIFO_WR_LEVEL)
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_REG(base) ((base)->DSI_HOST_PKT_FIFO_RD_LEVEL)
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD_REG(base) ((base)->DSI_HOST_PKT_RX_PAYLOAD)
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_REG(base) ((base)->DSI_HOST_PKT_RX_PKT_HEADER)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS_REG(base) ((base)->DSI_HOST_IRQ_STATUS)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_REG(base) ((base)->DSI_HOST_IRQ_STATUS2)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK_REG(base) ((base)->DSI_HOST_IRQ_MASK)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_REG(base) ((base)->DSI_HOST_IRQ_MASK2)
#define MIPI_DSI_HOST_DPHY_PD_DPHY_REG(base)     ((base)->DPHY_PD_DPHY)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_REG(base) ((base)->DPHY_M_PRG_HS_PREPARE)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_REG(base) ((base)->DPHY_MC_PRG_HS_PREPARE)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_REG(base) ((base)->DPHY_M_PRG_HS_ZERO)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_REG(base) ((base)->DPHY_MC_PRG_HS_ZERO)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_REG(base) ((base)->DPHY_M_PRG_HS_TRAIL)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_REG(base) ((base)->DPHY_MC_PRG_HS_TRAIL)
#define MIPI_DSI_HOST_DPHY_TST_REG(base)         ((base)->DPHY_TST)
#define MIPI_DSI_HOST_DPHY_RTERM_SEL_REG(base)   ((base)->DPHY_RTERM_SEL)
#define MIPI_DSI_HOST_DPHY_AUTO_PD_EN_REG(base)  ((base)->DPHY_AUTO_PD_EN)
#define MIPI_DSI_HOST_DPHY_RXLPRP_REG(base)      ((base)->DPHY_RXLPRP)
#define MIPI_DSI_HOST_DPHY_RXCDRP_REG(base)      ((base)->DPHY_RXCDRP)

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_Register_Masks MIPI_DSI_HOST Register Masks
 * @{
 */

/*! @name DSI_HOST_CFG_NUM_LANES -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_MASK (0x3U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_SHIFT (0U)
/*! dsi_host_cfg_num_lanes - Sets the number of active lanes that are to be used for transmitting data.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_reserved_MASK (0xFFFFFFFCU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_reserved_SHIFT (2U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_NONCONTINUOUS_CLK -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_dsi_host_cfg_noncontinuous_clk_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_dsi_host_cfg_noncontinuous_clk_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_T_PRE -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_MASK (0x7FU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_SHIFT (0U)
/*! dsi_host_cfg_t_pre - Sets the number of byte clock periods ('clk_byte' input) that the
 *    controller will wait after enabling the clock lane for HS operation before enabling the data lanes for
 *    HS operation.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_reserved_MASK (0xFFFFFF80U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_reserved_SHIFT (7U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_T_POST -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_MASK (0x7FU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_SHIFT (0U)
/*! dsi_host_cfg_t_post - Sets the number of byte clock periods ('clk_byte' input) to wait before
 *    putting the clock lane into LP mode after the data lanes have been detected to be in Stop State.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_reserved_MASK (0xFFFFFF80U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_reserved_SHIFT (7U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_TX_GAP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_MASK (0x7FU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_SHIFT (0U)
/*! dsi_host_cfg_tx_gap - Sets the number of byte clock periods ('clk_byte' input) that the
 *    controller will wait after the clock lane has been put into LP mode before enabling the clock lane for
 *    HS mode again.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_reserved_MASK (0xFFFFFF80U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_reserved_SHIFT (7U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_AUTOINSERT_EOTP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_dsi_host_cfg_autoinsert_eotp_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_dsi_host_cfg_autoinsert_eotp_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_MASK (0xFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_SHIFT (0U)
/*! dsi_host_cfg_extra_cmds_after_eotp - Configures the DSI Host Controller to send extra End Of Transmission Packets after the end of a packet.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_reserved_MASK (0xFFFFFF00U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_reserved_SHIFT (8U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_HTX_TO_COUNT -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_SHIFT (0U)
/*! dsi_host_cfg_htx_to_count - Sets the value of the DSI Host High Speed TX timeout count in
 *    clk_byte clock periods that once reached will initiate a timeout error and follow the recovery
 *    procedure documented in the DSI specification.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_reserved_MASK (0xFF000000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_reserved_SHIFT (24U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_LRX_H_TO_COUNT -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_SHIFT (0U)
/*! dsi_host_cfg_lrx_h_to_count - Sets the value of the DSI Host low power RX timeout count in
 *    clk_byte clock periods that once reached will initiate a timeout error and follow the recovery
 *    procedure documented in the DSI specification.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_reserved_MASK (0xFF000000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_reserved_SHIFT (24U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_BTA_H_TO_COUNT -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_SHIFT (0U)
/*! dsi_host_cfg_bta_h_to_count - Sets the value of the DSI Host Bus Turn Around (BTA) timeout in
 *    clk_byte clock periods that once reached will initiate a timeout error.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_reserved_MASK (0xFF000000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_reserved_SHIFT (24U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_TWAKEUP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_MASK (0x7FFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_SHIFT (0U)
/*! dsi_host_cfg_twakeup - DPHY Twakeup timing parameter.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_reserved_MASK (0xFFF80000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_reserved_SHIFT (19U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_STATUS_OUT -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_dsi_host_cfg_status_out_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_dsi_host_cfg_status_out_SHIFT (0U)
/*! dsi_host_cfg_status_out - Status Register
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_dsi_host_cfg_status_out(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_dsi_host_cfg_status_out_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_dsi_host_cfg_status_out_MASK)
/*! @} */

/*! @name DSI_HOST_RX_ERROR_STATUS -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_MASK (0x7FFU)
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_SHIFT (0U)
/*! dsi_host_rx_error_status - Status Register for Host receive error detection, ECC errors, CRC
 *    errors and for timeout indicators [0] ECC single bit error detected [1] ECC multi bit error
 *    detected [6:2] Errored bit position for single bit ECC error [7] CRC error detected [8] High Speed
 *    forward TX timeout detected [9] Reverse Low power data receive timeout detected [10] BTA
 *    timeout detected
 */
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_MASK)
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_reserved_MASK (0xFFFFF800U)
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_reserved_SHIFT (11U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dbi_pixel_payload_size_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dbi_pixel_payload_size_SHIFT (0U)
/*! dsi_host_cfg_dbi_pixel_payload_size - Maximum number of pixels that should be sent as one DSI packet.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dbi_pixel_payload_size(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dbi_pixel_payload_size_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dbi_pixel_payload_size_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_reserved_MASK (0xFFFF0000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_reserved_SHIFT (16U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dbi_pixel_fifo_send_level_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dbi_pixel_fifo_send_level_SHIFT (0U)
/*! dsi_host_cfg_dbi_pixel_fifo_send_level - In order to optimize DSI utility, the DBI bridge buffers a cerntain number of DBI pixels before initiating a DSI packet.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dbi_pixel_fifo_send_level(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dbi_pixel_fifo_send_level_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dbi_pixel_fifo_send_level_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_reserved_MASK (0xFFFF0000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_reserved_SHIFT (16U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_SHIFT (0U)
/*! dsi_host_cfg_dpi_pixel_payload_size - Maximum number of pixels that should be sent as one DSI packet.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_reserved_MASK (0xFFFF0000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_reserved_SHIFT (16U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_SHIFT (0U)
/*! dsi_host_cfg_dpi_pixel_fifo_send_level - In order to optimize DSI utility, the DPI bridge buffers a cerntain number of DPI pixels before initiating a DSI packet.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_reserved_MASK (0xFFFF0000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_reserved_SHIFT (16U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_MASK (0x7U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_SHIFT (0U)
/*! dsi_host_cfg_dpi_interface_color_coding - Sets the distribution of RGB bits within the 24-bit d bus, as specified by the DPI specification.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_reserved_MASK (0xFFFFFFF8U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_reserved_SHIFT (3U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_PIXEL_FORMAT -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_MASK (0x3U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_SHIFT (0U)
/*! dsi_host_cfg_dpi_pixel_format - Sets the DSI packet type of the pixels.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_reserved_MASK (0xFFFFFFFCU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_reserved_SHIFT (2U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VSYNC_POLARITY -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_dsi_host_cfg_dpi_vsync_polarity_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_dsi_host_cfg_dpi_vsync_polarity_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_HSYNC_POLARITY -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_dsi_host_cfg_dpi_hsync_polarity_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_dsi_host_cfg_dpi_hsync_polarity_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VIDEO_MODE -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_MASK (0x3U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_SHIFT (0U)
/*! dsi_host_cfg_dpi_video_mode - Select DSI video mode that the host DPI module should generate packets for.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_reserved_MASK (0xFFFFFFFCU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_reserved_SHIFT (2U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_HFP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_SHIFT (0U)
/*! dsi_host_cfg_dpi_hfp - Sets the DSI packet payload size, in bytes, of the horizontal front porch blanking packet.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_reserved_MASK (0xFFFF0000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_reserved_SHIFT (16U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_HBP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_SHIFT (0U)
/*! dsi_host_cfg_dpi_hbp - Sets the DSI packet payload size, in bytes, of the horizontal back porch blanking packet.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_reserved_MASK (0xFFFF0000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_reserved_SHIFT (16U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_HSA -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_SHIFT (0U)
/*! dsi_host_cfg_dpi_hsa - Sets the DSI packet payload size, in bytes, of the horizontal sync width filler blanking packet.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_reserved_MASK (0xFFFF0000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_reserved_SHIFT (16U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_dsi_host_cfg_dpi_enable_mult_pkts_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_dsi_host_cfg_dpi_enable_mult_pkts_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VBP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_MASK (0xFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_SHIFT (0U)
/*! dsi_host_cfg_dpi_vbp - Sets the number of lines in the vertical back porch.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_reserved_MASK (0xFFFFFF00U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_reserved_SHIFT (8U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VFP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_MASK (0xFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_SHIFT (0U)
/*! dsi_host_cfg_dpi_vfp - Sets the number of lines in the vertical front porch.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_reserved_MASK (0xFFFFFF00U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_reserved_SHIFT (8U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_BLLP_MODE -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_dsi_host_cfg_dpi_bllp_mode_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_dsi_host_cfg_dpi_bllp_mode_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_dsi_host_cfg_dpi_use_null_pkt_bllp_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_dsi_host_cfg_dpi_use_null_pkt_bllp_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VACTIVE -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_MASK (0x3FFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_SHIFT (0U)
/*! dsi_host_cfg_dpi_vactive - Sets the number of lines in the vertical active aread.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_reserved_MASK (0xFFFFC000U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_reserved_SHIFT (14U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VC -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_MASK (0x3U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_SHIFT (0U)
/*! dsi_host_cfg_dpi_vc - Sets the Virtual Channel (VC) of packets that will be sent to the receive packet interface.
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_reserved_MASK (0xFFFFFFFCU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_reserved_SHIFT (2U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_TX_PAYLOAD -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_SHIFT (0U)
/*! dsi_host_tx_payload - Tx Payload data write register.
 */
#define MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_CONTROL -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_MASK (0x7FFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_SHIFT (0U)
/*! dsi_host_pkt_control - Tx packet control register.
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_MASK)
#define MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_reserved_MASK (0xF8000000U)
#define MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_reserved_SHIFT (27U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_SEND_PACKET -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_dsi_host_send_packet_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_dsi_host_send_packet_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_STATUS -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_MASK (0x1FFU)
#define MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_SHIFT (0U)
/*! dsi_host_pkt_status - Status of APB to packet interface [0] - state machine not idle [1] - Tx
 *    packet done [2] - dphy direction 0 - tx had control, 1 - rx has control [3] - tx fifo overflow
 *    [4] - tx fifo underflow [5] - rx fifo overflow [6] - rx fifo underflow [7] - rx packet header
 *    has been received [8] - all rx packet payload data has been received
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_dsi_host_pkt_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_MASK)
#define MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_reserved_MASK (0xFFFFFE00U)
#define MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_reserved_SHIFT (9U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_FIFO_WR_LEVEL -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_SHIFT (0U)
/*! dsi_host_pkt_fifo_wr_level - Write level of APB to pkt interface fifo
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_MASK)
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_reserved_MASK (0xFFFF0000U)
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_reserved_SHIFT (16U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_FIFO_RD_LEVEL -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_SHIFT (0U)
/*! dsi_host_pkt_fifo_rd_level - Read level of APB to pkt interface fifo
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_MASK)
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_reserved_MASK (0xFFFF0000U)
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_reserved_SHIFT (16U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_RX_PAYLOAD -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_SHIFT (0U)
/*! dsi_host_pkt_rx_payload - APB to pkt interface rx payload read
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_RX_PKT_HEADER -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_SHIFT (0U)
/*! dsi_host_pkt_rx_pkt_header - APB to pkt interface rx packet header [15:0] word count [21:16] data type [23:22] Virtual Channel
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_MASK)
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_reserved_MASK (0xFF000000U)
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_reserved_SHIFT (24U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_IRQ_STATUS -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_SHIFT (0U)
/*! dsi_host_irq_status - Status of APB to packet interface [0] - state machine not idle [1] - Tx
 *    packet done [2] - dphy direction 0 - tx had control, 1 - rx has control [3] - tx fifo overflow
 *    [4] - tx fifo underflow [5] - rx fifo overflow [6] - rx fifo underflow [7] - rx packet header
 *    has been received [8] - all rx packet payload data has been received [28:9] - map directory to
 *    dsi host controller status_out port bit descriptions [29] - high speed tx timeout, host
 *    controller hs_tx_timeout port [30] - low power rx timeout, host controller lp_rx_timeout port [31] -
 *    host bta timeout, host controller host_bta_timeout port
 */
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS_dsi_host_irq_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_MASK)
/*! @} */

/*! @name DSI_HOST_IRQ_STATUS2 -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_MASK (0x7U)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_SHIFT (0U)
/*! dsi_host_irq_status2 - Status of APB to packet interface part 2, read part 2 first then dsi_host_irq_status.
 */
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_MASK)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_reserved_MASK (0xFFFFFFF8U)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_reserved_SHIFT (3U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_reserved_MASK)
/*! @} */

/*! @name DSI_HOST_IRQ_MASK -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_SHIFT (0U)
/*! dsi_host_irq_mask - irq mask [0] - state machine not idle [1] - Tx packet done [2] - dphy
 *    direction 0 - tx had control, 1 - rx has control [3] - tx fifo overflow [4] - tx fifo underflow [5]
 *    - rx fifo overflow [6] - rx fifo underflow [7] - rx packet header has been received [8] - all
 *    rx packet payload data has been received [28:9] - map directory to dsi host controller
 *    status_out port bit descriptions [29] - high speed tx timeout, host controller hs_tx_timeout port
 *    [30] - low power rx timeout, host controller lp_rx_timeout port [31] - host bta timeout, host
 *    controller host_bta_timeout port
 */
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK_dsi_host_irq_mask(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_MASK)
/*! @} */

/*! @name DSI_HOST_IRQ_MASK2 -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_MASK (0x7U)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_SHIFT (0U)
/*! dsi_host_irq_mask2 - irq mask 2 [0] - single bit ecc error [1] - multi bit ecc error [2] - crc error
 */
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_MASK)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_reserved_MASK (0xFFFFFFF8U)
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_reserved_SHIFT (3U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_reserved_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_reserved_MASK)
/*! @} */

/*! @name DPHY_PD_DPHY -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_PD_DPHY_dphy_pd_dphy_MASK (0x1U)
#define MIPI_DSI_HOST_DPHY_PD_DPHY_dphy_pd_dphy_SHIFT (0U)
#define MIPI_DSI_HOST_DPHY_PD_DPHY_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DPHY_PD_DPHY_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_PD_DPHY_reserved(x)   (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_PD_DPHY_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_PD_DPHY_reserved_MASK)
/*! @} */

/*! @name DPHY_M_PRG_HS_PREPARE -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_MASK (0x3U)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_SHIFT (0U)
/*! dphy_m_prg_hs_prepare - DPHY m_PRG_HS_PREPARE input, see DPHY datasheet
 */
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_SHIFT)) & MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_MASK)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_reserved_MASK (0xFFFFFFFCU)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_reserved_SHIFT (2U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_reserved_MASK)
/*! @} */

/*! @name DPHY_MC_PRG_HS_PREPARE -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_dphy_mc_prg_hs_prepare_MASK (0x1U)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_dphy_mc_prg_hs_prepare_SHIFT (0U)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_reserved_MASK)
/*! @} */

/*! @name DPHY_M_PRG_HS_ZERO -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_MASK (0x1FU)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_SHIFT (0U)
/*! dphy_m_prg_hs_zero - DPHY m_PRG_HS_ZERO input, see DPHY datasheet
 */
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_SHIFT)) & MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_MASK)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_reserved_MASK (0xFFFFFFE0U)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_reserved_SHIFT (5U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_reserved_MASK)
/*! @} */

/*! @name DPHY_MC_PRG_HS_ZERO -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_MASK (0x3FU)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_SHIFT (0U)
/*! dphy_mc_prg_hs_zero - DPHY mc_PRG_HS_ZERO input, see DPHY datasheet
 */
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_SHIFT)) & MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_MASK)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_reserved_MASK (0xFFFFFFC0U)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_reserved_SHIFT (6U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_reserved_MASK)
/*! @} */

/*! @name DPHY_M_PRG_HS_TRAIL -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_MASK (0xFU)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_SHIFT (0U)
/*! dphy_m_prg_hs_trail - DPHY m_PRG_HS_TRAIL input, see DPHY datasheet
 */
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_SHIFT)) & MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_MASK)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_reserved_MASK (0xFFFFFFF0U)
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_reserved_SHIFT (4U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_reserved_MASK)
/*! @} */

/*! @name DPHY_MC_PRG_HS_TRAIL -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_MASK (0xFU)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_SHIFT (0U)
/*! dphy_mc_prg_hs_trail - DPHY mc_PRG_HS_TRAIL input, see DPHY datasheet
 */
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_SHIFT)) & MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_MASK)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_reserved_MASK (0xFFFFFFF0U)
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_reserved_SHIFT (4U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_reserved_MASK)
/*! @} */

/*! @name DPHY_TST -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_TST_dphy_tst_MASK     (0x3FU)
#define MIPI_DSI_HOST_DPHY_TST_dphy_tst_SHIFT    (0U)
/*! dphy_tst - DPHY TST input, see DPHY datasheet
 */
#define MIPI_DSI_HOST_DPHY_TST_dphy_tst(x)       (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_TST_dphy_tst_SHIFT)) & MIPI_DSI_HOST_DPHY_TST_dphy_tst_MASK)
#define MIPI_DSI_HOST_DPHY_TST_reserved_MASK     (0xFFFFFFC0U)
#define MIPI_DSI_HOST_DPHY_TST_reserved_SHIFT    (6U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_TST_reserved(x)       (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_TST_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_TST_reserved_MASK)
/*! @} */

/*! @name DPHY_RTERM_SEL -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_RTERM_SEL_dphy_rterm_sel_MASK (0x1U)
#define MIPI_DSI_HOST_DPHY_RTERM_SEL_dphy_rterm_sel_SHIFT (0U)
#define MIPI_DSI_HOST_DPHY_RTERM_SEL_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DPHY_RTERM_SEL_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_RTERM_SEL_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_RTERM_SEL_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_RTERM_SEL_reserved_MASK)
/*! @} */

/*! @name DPHY_AUTO_PD_EN -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_AUTO_PD_EN_dphy_auto_pd_en_MASK (0x1U)
#define MIPI_DSI_HOST_DPHY_AUTO_PD_EN_dphy_auto_pd_en_SHIFT (0U)
#define MIPI_DSI_HOST_DPHY_AUTO_PD_EN_reserved_MASK (0xFFFFFFFEU)
#define MIPI_DSI_HOST_DPHY_AUTO_PD_EN_reserved_SHIFT (1U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_AUTO_PD_EN_reserved(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_AUTO_PD_EN_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_AUTO_PD_EN_reserved_MASK)
/*! @} */

/*! @name DPHY_RXLPRP -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_RXLPRP_dphy_rxlprp_MASK (0x3U)
#define MIPI_DSI_HOST_DPHY_RXLPRP_dphy_rxlprp_SHIFT (0U)
/*! dphy_rxlprp - DPHY RXLPRP input, see DPHY datasheet
 */
#define MIPI_DSI_HOST_DPHY_RXLPRP_dphy_rxlprp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_RXLPRP_dphy_rxlprp_SHIFT)) & MIPI_DSI_HOST_DPHY_RXLPRP_dphy_rxlprp_MASK)
#define MIPI_DSI_HOST_DPHY_RXLPRP_reserved_MASK  (0xFFFFFFFCU)
#define MIPI_DSI_HOST_DPHY_RXLPRP_reserved_SHIFT (2U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_RXLPRP_reserved(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_RXLPRP_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_RXLPRP_reserved_MASK)
/*! @} */

/*! @name DPHY_RXCDRP -  */
/*! @{ */
#define MIPI_DSI_HOST_DPHY_RXCDRP_dphy_rxcdrp_MASK (0x3U)
#define MIPI_DSI_HOST_DPHY_RXCDRP_dphy_rxcdrp_SHIFT (0U)
/*! dphy_rxcdrp - DPHY RXCDRP input, see DPHY datasheet
 */
#define MIPI_DSI_HOST_DPHY_RXCDRP_dphy_rxcdrp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_RXCDRP_dphy_rxcdrp_SHIFT)) & MIPI_DSI_HOST_DPHY_RXCDRP_dphy_rxcdrp_MASK)
#define MIPI_DSI_HOST_DPHY_RXCDRP_reserved_MASK  (0xFFFFFFFCU)
#define MIPI_DSI_HOST_DPHY_RXCDRP_reserved_SHIFT (2U)
/*! reserved - reserved
 */
#define MIPI_DSI_HOST_DPHY_RXCDRP_reserved(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPHY_RXCDRP_reserved_SHIFT)) & MIPI_DSI_HOST_DPHY_RXCDRP_reserved_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_Register_Masks */


/* MIPI_DSI_HOST - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral MIPI_DSI_HOST base pointer */
  #define MIPI_DSI_HOST_BASE_PTR                   ((MIPI_DSI_HOST_MemMapPtr)0x50031000u)
  /** Peripheral MIPI_DSI_HOST base pointer */
  #define MIPI_DSI_HOST_BASE_PTR_NS                ((MIPI_DSI_HOST_MemMapPtr)0x40031000u)
  /** Array initializer of MIPI_DSI_HOST peripheral base pointers */
  #define MIPI_DSI_HOST_BASE_PTRS                  { MIPI_DSI_HOST_BASE_PTR }
  /** Array initializer of MIPI_DSI_HOST peripheral base pointers */
  #define MIPI_DSI_HOST_BASE_PTRS_NS               { MIPI_DSI_HOST_BASE_PTR_NS }
#else
  /** Peripheral MIPI_DSI_HOST base pointer */
  #define MIPI_DSI_HOST_BASE_PTR                   ((MIPI_DSI_HOST_MemMapPtr)0x40031000u)
  /** Array initializer of MIPI_DSI_HOST peripheral base pointers */
  #define MIPI_DSI_HOST_BASE_PTRS                  { MIPI_DSI_HOST_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_Register_Accessor_Macros MIPI_DSI_HOST - Register accessor macros
 * @{
 */


/* MIPI_DSI_HOST - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* MIPI_DSI_HOST */
  #define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES     MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_NS  MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_NS MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE         MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_NS      MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST        MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_NS     MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP        MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_NS     MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_NS MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_NS MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT  MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_NS MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_NS MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_NS MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP       MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_NS    MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT    MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_NS MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS   MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_NS MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_NS MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_NS MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP       MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_NS    MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP       MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_NS    MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA       MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_NS    MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP       MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_NS    MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP       MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_NS    MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE   MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_NS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC        MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_NS     MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD        MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD_NS     MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL       MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_NS    MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_SEND_PACKET       MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_NS    MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_STATUS        MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_NS     MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_NS MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_NS MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD    MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD_NS MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_NS MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS        MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS_NS     MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2       MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_NS    MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK          MIPI_DSI_HOST_DSI_HOST_IRQ_MASK_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK_NS       MIPI_DSI_HOST_DSI_HOST_IRQ_MASK_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2         MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_NS      MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_PD_DPHY               MIPI_DSI_HOST_DPHY_PD_DPHY_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_PD_DPHY_NS            MIPI_DSI_HOST_DPHY_PD_DPHY_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE      MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_NS   MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE     MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_NS  MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO         MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_NS      MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO        MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_NS     MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL        MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_NS     MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL       MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_NS    MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_TST                   MIPI_DSI_HOST_DPHY_TST_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_TST_NS                MIPI_DSI_HOST_DPHY_TST_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_RTERM_SEL             MIPI_DSI_HOST_DPHY_RTERM_SEL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_RTERM_SEL_NS          MIPI_DSI_HOST_DPHY_RTERM_SEL_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_AUTO_PD_EN            MIPI_DSI_HOST_DPHY_AUTO_PD_EN_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_AUTO_PD_EN_NS         MIPI_DSI_HOST_DPHY_AUTO_PD_EN_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_RXLPRP                MIPI_DSI_HOST_DPHY_RXLPRP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_RXLPRP_NS             MIPI_DSI_HOST_DPHY_RXLPRP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
  #define MIPI_DSI_HOST_DPHY_RXCDRP                MIPI_DSI_HOST_DPHY_RXCDRP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_RXCDRP_NS             MIPI_DSI_HOST_DPHY_RXCDRP_REG(MIPI_DSI_HOST_BASE_PTR_NS)
#else
  /* MIPI_DSI_HOST */
  #define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES     MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE         MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST        MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP        MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT  MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP       MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT    MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS   MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_PAYLOAD_SIZE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL MIPI_DSI_HOST_DSI_HOST_CFG_DBI_PIXEL_FIFO_SEND_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING MIPI_DSI_HOST_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT MIPI_DSI_HOST_DSI_HOST_CFG_DPI_PIXEL_FORMAT_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VSYNC_POLARITY_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSYNC_POLARITY_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VIDEO_MODE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP       MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HFP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP       MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HBP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA       MIPI_DSI_HOST_DSI_HOST_CFG_DPI_HSA_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS MIPI_DSI_HOST_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP       MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VBP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP       MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VFP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE MIPI_DSI_HOST_DSI_HOST_CFG_DPI_BLLP_MODE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP MIPI_DSI_HOST_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE   MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VACTIVE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC        MIPI_DSI_HOST_DSI_HOST_CFG_DPI_VC_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD        MIPI_DSI_HOST_DSI_HOST_TX_PAYLOAD_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL       MIPI_DSI_HOST_DSI_HOST_PKT_CONTROL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_SEND_PACKET       MIPI_DSI_HOST_DSI_HOST_SEND_PACKET_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_STATUS        MIPI_DSI_HOST_DSI_HOST_PKT_STATUS_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_WR_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL MIPI_DSI_HOST_DSI_HOST_PKT_FIFO_RD_LEVEL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD    MIPI_DSI_HOST_DSI_HOST_PKT_RX_PAYLOAD_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER MIPI_DSI_HOST_DSI_HOST_PKT_RX_PKT_HEADER_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS        MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2       MIPI_DSI_HOST_DSI_HOST_IRQ_STATUS2_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK          MIPI_DSI_HOST_DSI_HOST_IRQ_MASK_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2         MIPI_DSI_HOST_DSI_HOST_IRQ_MASK2_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_PD_DPHY               MIPI_DSI_HOST_DPHY_PD_DPHY_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE      MIPI_DSI_HOST_DPHY_M_PRG_HS_PREPARE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE     MIPI_DSI_HOST_DPHY_MC_PRG_HS_PREPARE_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO         MIPI_DSI_HOST_DPHY_M_PRG_HS_ZERO_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO        MIPI_DSI_HOST_DPHY_MC_PRG_HS_ZERO_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL        MIPI_DSI_HOST_DPHY_M_PRG_HS_TRAIL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL       MIPI_DSI_HOST_DPHY_MC_PRG_HS_TRAIL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_TST                   MIPI_DSI_HOST_DPHY_TST_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_RTERM_SEL             MIPI_DSI_HOST_DPHY_RTERM_SEL_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_AUTO_PD_EN            MIPI_DSI_HOST_DPHY_AUTO_PD_EN_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_RXLPRP                MIPI_DSI_HOST_DPHY_RXLPRP_REG(MIPI_DSI_HOST_BASE_PTR)
  #define MIPI_DSI_HOST_DPHY_RXCDRP                MIPI_DSI_HOST_DPHY_RXCDRP_REG(MIPI_DSI_HOST_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_Peripheral */


/* ----------------------------------------------------------------------------
   -- MRT
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MRT_Peripheral MRT
 * @{
 */

/** MRT - Peripheral register structure */
typedef struct MRT_MemMap {
  struct {                                         /* offset: 0x0, array step: 0x10 */
    uint32_t INTVAL;                                 /**< Time Interval Value, array offset: 0x0, array step: 0x10 */
    uint32_t TIMER;                                  /**< Timer, array offset: 0x4, array step: 0x10 */
    uint32_t CTRL;                                   /**< Control, array offset: 0x8, array step: 0x10 */
    uint32_t STAT;                                   /**< Status, array offset: 0xC, array step: 0x10 */
  } CHANNEL[4];
  uint8_t RESERVED_0[176];
  uint32_t MODCFG;                                 /**< Module Configuration, offset: 0xF0 */
  uint32_t IDLE_CH;                                /**< Idle Channel, offset: 0xF4 */
  uint32_t IRQ_FLAG;                               /**< Global Interrupt Flag, offset: 0xF8 */
  uint32_t ID_CODE;                                /**< Multi-Rate Timer ID code, offset: 0xFC */
} volatile *MRT_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MRT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MRT_Register_Accessor_Macros MRT - Register accessor macros
 * @{
 */


/* MRT - Register accessors */
#define MRT_CHANNEL_INTVAL_REG(base,index)       ((base)->CHANNEL[index].INTVAL)
#define MRT_CHANNEL_TIMER_REG(base,index)        ((base)->CHANNEL[index].TIMER)
#define MRT_CHANNEL_CTRL_REG(base,index)         ((base)->CHANNEL[index].CTRL)
#define MRT_CHANNEL_STAT_REG(base,index)         ((base)->CHANNEL[index].STAT)
#define MRT_MODCFG_REG(base)                     ((base)->MODCFG)
#define MRT_IDLE_CH_REG(base)                    ((base)->IDLE_CH)
#define MRT_IRQ_FLAG_REG(base)                   ((base)->IRQ_FLAG)
#define MRT_ID_CODE_REG(base)                    ((base)->ID_CODE)

/*!
 * @}
 */ /* end of group MRT_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MRT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MRT_Register_Masks MRT Register Masks
 * @{
 */

/*! @name CHANNEL_INTVAL - Time Interval Value */
/*! @{ */
#define MRT_CHANNEL_INTVAL_IVALUE_MASK           (0xFFFFFFU)
#define MRT_CHANNEL_INTVAL_IVALUE_SHIFT          (0U)
/*! IVALUE - Time interval load value.
 */
#define MRT_CHANNEL_INTVAL_IVALUE(x)             (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_INTVAL_IVALUE_SHIFT)) & MRT_CHANNEL_INTVAL_IVALUE_MASK)
#define MRT_CHANNEL_INTVAL_LOAD_MASK             (0x80000000U)
#define MRT_CHANNEL_INTVAL_LOAD_SHIFT            (31U)
/*! @} */

/* The count of MRT_CHANNEL_INTVAL */
#define MRT_CHANNEL_INTVAL_COUNT                 (4U)

/*! @name CHANNEL_TIMER - Timer */
/*! @{ */
#define MRT_CHANNEL_TIMER_VALUE_MASK             (0xFFFFFFU)
#define MRT_CHANNEL_TIMER_VALUE_SHIFT            (0U)
/*! VALUE - Holds the current timer value of the down-counter.
 */
#define MRT_CHANNEL_TIMER_VALUE(x)               (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_TIMER_VALUE_SHIFT)) & MRT_CHANNEL_TIMER_VALUE_MASK)
/*! @} */

/* The count of MRT_CHANNEL_TIMER */
#define MRT_CHANNEL_TIMER_COUNT                  (4U)

/*! @name CHANNEL_CTRL - Control */
/*! @{ */
#define MRT_CHANNEL_CTRL_INTEN_MASK              (0x1U)
#define MRT_CHANNEL_CTRL_INTEN_SHIFT             (0U)
#define MRT_CHANNEL_CTRL_MODE_MASK               (0x6U)
#define MRT_CHANNEL_CTRL_MODE_SHIFT              (1U)
/*! MODE - Selects the timer mode
 *  0b00..Repeat interrupt mode
 *  0b01..One-shot interrupt mode
 *  0b10..One-shot stall mode
 *  0b11..Reserved
 */
#define MRT_CHANNEL_CTRL_MODE(x)                 (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_CTRL_MODE_SHIFT)) & MRT_CHANNEL_CTRL_MODE_MASK)
/*! @} */

/* The count of MRT_CHANNEL_CTRL */
#define MRT_CHANNEL_CTRL_COUNT                   (4U)

/*! @name CHANNEL_STAT - Status */
/*! @{ */
#define MRT_CHANNEL_STAT_INTFLAG_MASK            (0x1U)
#define MRT_CHANNEL_STAT_INTFLAG_SHIFT           (0U)
#define MRT_CHANNEL_STAT_RUN_MASK                (0x2U)
#define MRT_CHANNEL_STAT_RUN_SHIFT               (1U)
#define MRT_CHANNEL_STAT_INUSE_MASK              (0x4U)
#define MRT_CHANNEL_STAT_INUSE_SHIFT             (2U)
/*! @} */

/* The count of MRT_CHANNEL_STAT */
#define MRT_CHANNEL_STAT_COUNT                   (4U)

/*! @name MODCFG - Module Configuration */
/*! @{ */
#define MRT_MODCFG_NOC_MASK                      (0xFU)
#define MRT_MODCFG_NOC_SHIFT                     (0U)
/*! NOC - Number Of Channels: identifies the number of channels in this MRT. (Minus 1 encoded)
 */
#define MRT_MODCFG_NOC(x)                        (((uint32_t)(((uint32_t)(x)) << MRT_MODCFG_NOC_SHIFT)) & MRT_MODCFG_NOC_MASK)
#define MRT_MODCFG_NOB_MASK                      (0x1F0U)
#define MRT_MODCFG_NOB_SHIFT                     (4U)
/*! NOB - Number Of Bits: identifies the number of timer bits in this MRT. (24 bits on this device)
 */
#define MRT_MODCFG_NOB(x)                        (((uint32_t)(((uint32_t)(x)) << MRT_MODCFG_NOB_SHIFT)) & MRT_MODCFG_NOB_MASK)
#define MRT_MODCFG_MULTITASK_MASK                (0x80000000U)
#define MRT_MODCFG_MULTITASK_SHIFT               (31U)
/*! @} */

/*! @name IDLE_CH - Idle Channel */
/*! @{ */
#define MRT_IDLE_CH_CHAN_MASK                    (0xF0U)
#define MRT_IDLE_CH_CHAN_SHIFT                   (4U)
/*! CHAN - Idle channel.
 */
#define MRT_IDLE_CH_CHAN(x)                      (((uint32_t)(((uint32_t)(x)) << MRT_IDLE_CH_CHAN_SHIFT)) & MRT_IDLE_CH_CHAN_MASK)
/*! @} */

/*! @name IRQ_FLAG - Global Interrupt Flag */
/*! @{ */
#define MRT_IRQ_FLAG_GFLAG0_MASK                 (0x1U)
#define MRT_IRQ_FLAG_GFLAG0_SHIFT                (0U)
#define MRT_IRQ_FLAG_GFLAG1_MASK                 (0x2U)
#define MRT_IRQ_FLAG_GFLAG1_SHIFT                (1U)
#define MRT_IRQ_FLAG_GFLAG2_MASK                 (0x4U)
#define MRT_IRQ_FLAG_GFLAG2_SHIFT                (2U)
#define MRT_IRQ_FLAG_GFLAG3_MASK                 (0x8U)
#define MRT_IRQ_FLAG_GFLAG3_SHIFT                (3U)
/*! @} */

/*! @name ID_CODE - Multi-Rate Timer ID code */
/*! @{ */
#define MRT_ID_CODE_ID_CODE_MASK                 (0xFFFFFFFFU)
#define MRT_ID_CODE_ID_CODE_SHIFT                (0U)
/*! ID_CODE - Multi-Rate Timer ID code
 */
#define MRT_ID_CODE_ID_CODE(x)                   (((uint32_t)(((uint32_t)(x)) << MRT_ID_CODE_ID_CODE_SHIFT)) & MRT_ID_CODE_ID_CODE_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MRT_Register_Masks */


/* MRT - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral MRT0 base pointer */
  #define MRT0_BASE_PTR                            ((MRT_MemMapPtr)0x5002D000u)
  /** Peripheral MRT0 base pointer */
  #define MRT0_BASE_PTR_NS                         ((MRT_MemMapPtr)0x4002D000u)
  /** Array initializer of MRT peripheral base pointers */
  #define MRT_BASE_PTRS                            { MRT0_BASE_PTR }
  /** Array initializer of MRT peripheral base pointers */
  #define MRT_BASE_PTRS_NS                         { MRT0_BASE_PTR_NS }
#else
  /** Peripheral MRT0 base pointer */
  #define MRT0_BASE_PTR                            ((MRT_MemMapPtr)0x4002D000u)
  /** Array initializer of MRT peripheral base pointers */
  #define MRT_BASE_PTRS                            { MRT0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- MRT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MRT_Register_Accessor_Macros MRT - Register accessor macros
 * @{
 */


/* MRT - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* MRT0 */
  #define MRT0_INTVAL0                             MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR,0)
  #define MRT0_INTVAL0_NS                          MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR_NS,0)
  #define MRT0_TIMER0                              MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR,0)
  #define MRT0_TIMER0_NS                           MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR_NS,0)
  #define MRT0_CTRL0                               MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR,0)
  #define MRT0_CTRL0_NS                            MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR_NS,0)
  #define MRT0_STAT0                               MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR,0)
  #define MRT0_STAT0_NS                            MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR_NS,0)
  #define MRT0_INTVAL1                             MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR,1)
  #define MRT0_INTVAL1_NS                          MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR_NS,1)
  #define MRT0_TIMER1                              MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR,1)
  #define MRT0_TIMER1_NS                           MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR_NS,1)
  #define MRT0_CTRL1                               MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR,1)
  #define MRT0_CTRL1_NS                            MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR_NS,1)
  #define MRT0_STAT1                               MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR,1)
  #define MRT0_STAT1_NS                            MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR_NS,1)
  #define MRT0_INTVAL2                             MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR,2)
  #define MRT0_INTVAL2_NS                          MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR_NS,2)
  #define MRT0_TIMER2                              MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR,2)
  #define MRT0_TIMER2_NS                           MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR_NS,2)
  #define MRT0_CTRL2                               MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR,2)
  #define MRT0_CTRL2_NS                            MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR_NS,2)
  #define MRT0_STAT2                               MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR,2)
  #define MRT0_STAT2_NS                            MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR_NS,2)
  #define MRT0_INTVAL3                             MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR,3)
  #define MRT0_INTVAL3_NS                          MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR_NS,3)
  #define MRT0_TIMER3                              MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR,3)
  #define MRT0_TIMER3_NS                           MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR_NS,3)
  #define MRT0_CTRL3                               MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR,3)
  #define MRT0_CTRL3_NS                            MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR_NS,3)
  #define MRT0_STAT3                               MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR,3)
  #define MRT0_STAT3_NS                            MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR_NS,3)
  #define MRT0_MODCFG                              MRT_MODCFG_REG(MRT0_BASE_PTR)
  #define MRT0_MODCFG_NS                           MRT_MODCFG_REG(MRT0_BASE_PTR_NS)
  #define MRT0_IDLE_CH                             MRT_IDLE_CH_REG(MRT0_BASE_PTR)
  #define MRT0_IDLE_CH_NS                          MRT_IDLE_CH_REG(MRT0_BASE_PTR_NS)
  #define MRT0_IRQ_FLAG                            MRT_IRQ_FLAG_REG(MRT0_BASE_PTR)
  #define MRT0_IRQ_FLAG_NS                         MRT_IRQ_FLAG_REG(MRT0_BASE_PTR_NS)
  #define MRT0_ID_CODE                             MRT_ID_CODE_REG(MRT0_BASE_PTR)
  #define MRT0_ID_CODE_NS                          MRT_ID_CODE_REG(MRT0_BASE_PTR_NS)
#else
  /* MRT0 */
  #define MRT0_INTVAL0                             MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR,0)
  #define MRT0_TIMER0                              MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR,0)
  #define MRT0_CTRL0                               MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR,0)
  #define MRT0_STAT0                               MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR,0)
  #define MRT0_INTVAL1                             MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR,1)
  #define MRT0_TIMER1                              MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR,1)
  #define MRT0_CTRL1                               MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR,1)
  #define MRT0_STAT1                               MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR,1)
  #define MRT0_INTVAL2                             MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR,2)
  #define MRT0_TIMER2                              MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR,2)
  #define MRT0_CTRL2                               MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR,2)
  #define MRT0_STAT2                               MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR,2)
  #define MRT0_INTVAL3                             MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR,3)
  #define MRT0_TIMER3                              MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR,3)
  #define MRT0_CTRL3                               MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR,3)
  #define MRT0_STAT3                               MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR,3)
  #define MRT0_MODCFG                              MRT_MODCFG_REG(MRT0_BASE_PTR)
  #define MRT0_IDLE_CH                             MRT_IDLE_CH_REG(MRT0_BASE_PTR)
  #define MRT0_IRQ_FLAG                            MRT_IRQ_FLAG_REG(MRT0_BASE_PTR)
  #define MRT0_ID_CODE                             MRT_ID_CODE_REG(MRT0_BASE_PTR)
#endif

/* MRT - Register array accessors */
#define MRT0_CHANNEL_INTVAL(index)               MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR,index)
#define MRT0_CHANNEL_INTVAL_NS(index)            MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR_NS,index)
#define MRT0_CHANNEL_INTVAL(index)               MRT_CHANNEL_INTVAL_REG(MRT0_BASE_PTR,index)
#define MRT0_CHANNEL_TIMER(index)                MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR,index)
#define MRT0_CHANNEL_TIMER_NS(index)             MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR_NS,index)
#define MRT0_CHANNEL_TIMER(index)                MRT_CHANNEL_TIMER_REG(MRT0_BASE_PTR,index)
#define MRT0_CHANNEL_CTRL(index)                 MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR,index)
#define MRT0_CHANNEL_CTRL_NS(index)              MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR_NS,index)
#define MRT0_CHANNEL_CTRL(index)                 MRT_CHANNEL_CTRL_REG(MRT0_BASE_PTR,index)
#define MRT0_CHANNEL_STAT(index)                 MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR,index)
#define MRT0_CHANNEL_STAT_NS(index)              MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR_NS,index)
#define MRT0_CHANNEL_STAT(index)                 MRT_CHANNEL_STAT_REG(MRT0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group MRT_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MRT_Peripheral */


/* ----------------------------------------------------------------------------
   -- MU
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Peripheral MU
 * @{
 */

/** MU - Peripheral register structure */
typedef struct MU_MemMap {
  uint32_t VER;                                    /**< Version ID Register, offset: 0x0 */
  uint32_t PAR;                                    /**< Parameter Register, offset: 0x4 */
  uint8_t RESERVED_0[24];
  uint32_t TR[4];                                  /**< Transmit Register, array offset: 0x20, array step: 0x4 */
  uint8_t RESERVED_1[16];
  uint32_t RR[4];                                  /**< Receive Register, array offset: 0x40, array step: 0x4 */
  uint8_t RESERVED_2[16];
  uint32_t SR;                                     /**< Status Register, offset: 0x60 */
  uint32_t CR;                                     /**< Control Register, offset: 0x64 */
} volatile *MU_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Register_Accessor_Macros MU - Register accessor macros
 * @{
 */


/* MU - Register accessors */
#define MU_VER_REG(base)                         ((base)->VER)
#define MU_PAR_REG(base)                         ((base)->PAR)
#define MU_TR_REG(base,index)                    ((base)->TR[index])
#define MU_RR_REG(base,index)                    ((base)->RR[index])
#define MU_SR_REG(base)                          ((base)->SR)
#define MU_CR_REG(base)                          ((base)->CR)

/*!
 * @}
 */ /* end of group MU_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MU Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Register_Masks MU Register Masks
 * @{
 */

/*! @name VER - Version ID Register */
/*! @{ */
#define MU_VER_FEATURE_MASK                      (0xFFFFU)
#define MU_VER_FEATURE_SHIFT                     (0U)
/*! FEATURE - Feature Specification Number
 *  0b000000000000x1xx..Core Control and Status Registers are implemented in both MUA and MUB.
 *  0b000000000000xx1x..RAIP/RAIE register bits are implemented.
 *  0b000000000000xxx0..Standard features implemented
 */
#define MU_VER_FEATURE(x)                        (((uint32_t)(((uint32_t)(x)) << MU_VER_FEATURE_SHIFT)) & MU_VER_FEATURE_MASK)
#define MU_VER_MINOR_MASK                        (0xFF0000U)
#define MU_VER_MINOR_SHIFT                       (16U)
/*! MINOR - Minor Version Number
 */
#define MU_VER_MINOR(x)                          (((uint32_t)(((uint32_t)(x)) << MU_VER_MINOR_SHIFT)) & MU_VER_MINOR_MASK)
#define MU_VER_MAJOR_MASK                        (0xFF000000U)
#define MU_VER_MAJOR_SHIFT                       (24U)
/*! MAJOR - Major Version Number
 */
#define MU_VER_MAJOR(x)                          (((uint32_t)(((uint32_t)(x)) << MU_VER_MAJOR_SHIFT)) & MU_VER_MAJOR_MASK)
/*! @} */

/*! @name PAR - Parameter Register */
/*! @{ */
#define MU_PAR_PARAMETER_MASK                    (0xFFFFFFFFU)
#define MU_PAR_PARAMETER_SHIFT                   (0U)
/*! PARAMETER - This bitfield contains the parameter settings of MUA.
 */
#define MU_PAR_PARAMETER(x)                      (((uint32_t)(((uint32_t)(x)) << MU_PAR_PARAMETER_SHIFT)) & MU_PAR_PARAMETER_MASK)
/*! @} */

/*! @name TR - Transmit Register */
/*! @{ */
#define MU_TR_DATA_MASK                          (0xFFFFFFFFU)
#define MU_TR_DATA_SHIFT                         (0U)
/*! DATA - DATA
 */
#define MU_TR_DATA(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_DATA_SHIFT)) & MU_TR_DATA_MASK)
/*! @} */

/* The count of MU_TR */
#define MU_TR_COUNT                              (4U)

/*! @name RR - Receive Register */
/*! @{ */
#define MU_RR_DATA_MASK                          (0xFFFFFFFFU)
#define MU_RR_DATA_SHIFT                         (0U)
/*! DATA - DATA
 */
#define MU_RR_DATA(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_DATA_SHIFT)) & MU_RR_DATA_MASK)
/*! @} */

/* The count of MU_RR */
#define MU_RR_COUNT                              (4U)

/*! @name SR - Status Register */
/*! @{ */
#define MU_SR_Fn_MASK                            (0x7U)
#define MU_SR_Fn_SHIFT                           (0U)
/*! Fn - Fn
 *  0b000..Fn bit in the MUB CR register is written 0 (default).
 *  0b001..Fn bit in the MUB CR register is written 1.
 */
#define MU_SR_Fn(x)                              (((uint32_t)(((uint32_t)(x)) << MU_SR_Fn_SHIFT)) & MU_SR_Fn_MASK)
#define MU_SR_EP_MASK                            (0x10U)
#define MU_SR_EP_SHIFT                           (4U)
#define MU_SR_PM_MASK                            (0x60U)
#define MU_SR_PM_SHIFT                           (5U)
/*! PM - PM
 *  0b00..The MUB processor is in Run Mode.
 *  0b01..The MUB processor is in WAIT Mode.
 *  0b10..The MUB processor is in STOP/VLPS Mode.
 *  0b11..The MUB processor is in LLS/VLLS Mode.
 */
#define MU_SR_PM(x)                              (((uint32_t)(((uint32_t)(x)) << MU_SR_PM_SHIFT)) & MU_SR_PM_MASK)
#define MU_SR_RS_MASK                            (0x80U)
#define MU_SR_RS_SHIFT                           (7U)
#define MU_SR_FUP_MASK                           (0x100U)
#define MU_SR_FUP_SHIFT                          (8U)
#define MU_SR_RDIP_MASK                          (0x200U)
#define MU_SR_RDIP_SHIFT                         (9U)
#define MU_SR_RAIP_MASK                          (0x400U)
#define MU_SR_RAIP_SHIFT                         (10U)
#define MU_SR_TEn_MASK                           (0xF00000U)
#define MU_SR_TEn_SHIFT                          (20U)
/*! TEn - TEn
 *  0b0000..MUA TRn register is not empty.
 *  0b0001..MUA TRn register is empty (default).
 */
#define MU_SR_TEn(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_TEn_SHIFT)) & MU_SR_TEn_MASK)
#define MU_SR_RFn_MASK                           (0xF000000U)
#define MU_SR_RFn_SHIFT                          (24U)
/*! RFn - RFn
 *  0b0000..MUA RRn register is not full (default).
 *  0b0001..MUA RRn register has received data from MUB TRn register and is ready to be read by the MUA.
 */
#define MU_SR_RFn(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_RFn_SHIFT)) & MU_SR_RFn_MASK)
#define MU_SR_GIPn_MASK                          (0xF0000000U)
#define MU_SR_GIPn_SHIFT                         (28U)
/*! GIPn - GIPn
 *  0b0000..MUA general purpose interrupt n is not pending. (default)
 *  0b0001..MUA general purpose interrupt n is pending.
 */
#define MU_SR_GIPn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_SR_GIPn_SHIFT)) & MU_SR_GIPn_MASK)
/*! @} */

/*! @name CR - Control Register */
/*! @{ */
#define MU_CR_Fn_MASK                            (0x7U)
#define MU_CR_Fn_SHIFT                           (0U)
/*! Fn - Fn
 *  0b000..Clears the Fn bit in the SR register.
 *  0b001..Sets the Fn bit in the SR register.
 */
#define MU_CR_Fn(x)                              (((uint32_t)(((uint32_t)(x)) << MU_CR_Fn_SHIFT)) & MU_CR_Fn_MASK)
#define MU_CR_MUR_MASK                           (0x20U)
#define MU_CR_MUR_SHIFT                          (5U)
#define MU_CR_RDIE_MASK                          (0x40U)
#define MU_CR_RDIE_SHIFT                         (6U)
#define MU_CR_RAIE_MASK                          (0x1000U)
#define MU_CR_RAIE_SHIFT                         (12U)
#define MU_CR_GIRn_MASK                          (0xF0000U)
#define MU_CR_GIRn_SHIFT                         (16U)
/*! GIRn - GIRn
 *  0b0000..MUA General Interrupt n is not requested to the MUB (default).
 *  0b0001..MUA General Interrupt n is requested to the MUB.
 */
#define MU_CR_GIRn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_GIRn_SHIFT)) & MU_CR_GIRn_MASK)
#define MU_CR_TIEn_MASK                          (0xF00000U)
#define MU_CR_TIEn_SHIFT                         (20U)
/*! TIEn - TIEn
 *  0b0000..Disables MUA Transmit Interrupt n. (default)
 *  0b0001..Enables MUA Transmit Interrupt n.
 */
#define MU_CR_TIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_TIEn_SHIFT)) & MU_CR_TIEn_MASK)
#define MU_CR_RIEn_MASK                          (0xF000000U)
#define MU_CR_RIEn_SHIFT                         (24U)
/*! RIEn - RIEn
 *  0b0000..Disables MUA Receive Interrupt n. (default)
 *  0b0001..Enables MUA Receive Interrupt n.
 */
#define MU_CR_RIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_RIEn_SHIFT)) & MU_CR_RIEn_MASK)
#define MU_CR_GIEn_MASK                          (0xF0000000U)
#define MU_CR_GIEn_SHIFT                         (28U)
/*! GIEn - GIEn
 *  0b0000..Disables MUA General Interrupt n. (default)
 *  0b0001..Enables MUA General Interrupt n.
 */
#define MU_CR_GIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_GIEn_SHIFT)) & MU_CR_GIEn_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MU_Register_Masks */


/* MU - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral MUA base pointer */
  #define MUA_BASE_PTR                             ((MU_MemMapPtr)0x50110000u)
  /** Peripheral MUA base pointer */
  #define MUA_BASE_PTR_NS                          ((MU_MemMapPtr)0x40110000u)
  /** Array initializer of MU peripheral base pointers */
  #define MU_BASE_PTRS                             { MUA_BASE_PTR }
  /** Array initializer of MU peripheral base pointers */
  #define MU_BASE_PTRS_NS                          { MUA_BASE_PTR_NS }
#else
  /** Peripheral MUA base pointer */
  #define MUA_BASE_PTR                             ((MU_MemMapPtr)0x40110000u)
  /** Array initializer of MU peripheral base pointers */
  #define MU_BASE_PTRS                             { MUA_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- MU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Register_Accessor_Macros MU - Register accessor macros
 * @{
 */


/* MU - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* MUA */
  #define MU0__MUA_VER                             MU_VER_REG(MUA_BASE_PTR)
  #define MU0__MUA_VER_NS                          MU_VER_REG(MUA_BASE_PTR_NS)
  #define MU0__MUA_PAR                             MU_PAR_REG(MUA_BASE_PTR)
  #define MU0__MUA_PAR_NS                          MU_PAR_REG(MUA_BASE_PTR_NS)
  #define MU0__MUA_TR0                             MU_TR_REG(MUA_BASE_PTR,0)
  #define MU0__MUA_TR0_NS                          MU_TR_REG(MUA_BASE_PTR_NS,0)
  #define MU0__MUA_TR1                             MU_TR_REG(MUA_BASE_PTR,1)
  #define MU0__MUA_TR1_NS                          MU_TR_REG(MUA_BASE_PTR_NS,1)
  #define MU0__MUA_TR2                             MU_TR_REG(MUA_BASE_PTR,2)
  #define MU0__MUA_TR2_NS                          MU_TR_REG(MUA_BASE_PTR_NS,2)
  #define MU0__MUA_TR3                             MU_TR_REG(MUA_BASE_PTR,3)
  #define MU0__MUA_TR3_NS                          MU_TR_REG(MUA_BASE_PTR_NS,3)
  #define MU0__MUA_RR0                             MU_RR_REG(MUA_BASE_PTR,0)
  #define MU0__MUA_RR0_NS                          MU_RR_REG(MUA_BASE_PTR_NS,0)
  #define MU0__MUA_RR1                             MU_RR_REG(MUA_BASE_PTR,1)
  #define MU0__MUA_RR1_NS                          MU_RR_REG(MUA_BASE_PTR_NS,1)
  #define MU0__MUA_RR2                             MU_RR_REG(MUA_BASE_PTR,2)
  #define MU0__MUA_RR2_NS                          MU_RR_REG(MUA_BASE_PTR_NS,2)
  #define MU0__MUA_RR3                             MU_RR_REG(MUA_BASE_PTR,3)
  #define MU0__MUA_RR3_NS                          MU_RR_REG(MUA_BASE_PTR_NS,3)
  #define MU0__MUA_SR                              MU_SR_REG(MUA_BASE_PTR)
  #define MU0__MUA_SR_NS                           MU_SR_REG(MUA_BASE_PTR_NS)
  #define MU0__MUA_CR                              MU_CR_REG(MUA_BASE_PTR)
  #define MU0__MUA_CR_NS                           MU_CR_REG(MUA_BASE_PTR_NS)
#else
  /* MUA */
  #define MU0__MUA_VER                             MU_VER_REG(MUA_BASE_PTR)
  #define MU0__MUA_PAR                             MU_PAR_REG(MUA_BASE_PTR)
  #define MU0__MUA_TR0                             MU_TR_REG(MUA_BASE_PTR,0)
  #define MU0__MUA_TR1                             MU_TR_REG(MUA_BASE_PTR,1)
  #define MU0__MUA_TR2                             MU_TR_REG(MUA_BASE_PTR,2)
  #define MU0__MUA_TR3                             MU_TR_REG(MUA_BASE_PTR,3)
  #define MU0__MUA_RR0                             MU_RR_REG(MUA_BASE_PTR,0)
  #define MU0__MUA_RR1                             MU_RR_REG(MUA_BASE_PTR,1)
  #define MU0__MUA_RR2                             MU_RR_REG(MUA_BASE_PTR,2)
  #define MU0__MUA_RR3                             MU_RR_REG(MUA_BASE_PTR,3)
  #define MU0__MUA_SR                              MU_SR_REG(MUA_BASE_PTR)
  #define MU0__MUA_CR                              MU_CR_REG(MUA_BASE_PTR)
#endif

/* MU - Register array accessors */
#define MUA_TR(index)                            MU_TR_REG(MUA_BASE_PTR,index)
#define MUA_TR_NS(index)                         MU_TR_REG(MUA_BASE_PTR_NS,index)
#define MUA_TR(index)                            MU_TR_REG(MUA_BASE_PTR,index)
#define MUA_RR(index)                            MU_RR_REG(MUA_BASE_PTR,index)
#define MUA_RR_NS(index)                         MU_RR_REG(MUA_BASE_PTR_NS,index)
#define MUA_RR(index)                            MU_RR_REG(MUA_BASE_PTR,index)

/*!
 * @}
 */ /* end of group MU_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MU_Peripheral */


/* ----------------------------------------------------------------------------
   -- OCOTP
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Peripheral OCOTP
 * @{
 */

/** OCOTP - Peripheral register structure */
typedef struct OCOTP_MemMap {
  uint32_t OTP_SHADOW[496];                        /**< OTP shadow register N, array offset: 0x0, array step: 0x4 */
  uint8_t RESERVED_0[64];
  uint32_t OTP_CTRL;                               /**< Control/address register, offset: 0x800 */
  uint32_t OTP_PDN;                                /**< Power-down register, offset: 0x804 */
  uint32_t OTP_WRITE_DATA;                         /**< OTP programming data register, offset: 0x808 */
  uint32_t OTP_READ_CTRL;                          /**< OTP read start register, offset: 0x80C */
  uint32_t OTP_READ_DATA;                          /**< OTP read data register, offset: 0x810 */
  uint32_t OTP_CLK_DIV;                            /**< OTP clock divider register, offset: 0x814 */
  uint8_t RESERVED_1[4];
  uint32_t OTP_CRC_ADDR;                           /**< CRC address range register, offset: 0x81C */
  uint32_t OTP_CRC_VALUE;                          /**< CRC result register, offset: 0x820 */
  uint32_t OTP_STATUS;                             /**< Status register, offset: 0x824 */
  uint8_t RESERVED_2[4];
  uint32_t OTP_VERSION;                            /**< VERSION ID register, offset: 0x82C */
} volatile *OCOTP_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- OCOTP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Accessor_Macros OCOTP - Register accessor macros
 * @{
 */


/* OCOTP - Register accessors */
#define OCOTP_OTP_SHADOW_REG(base,index)         ((base)->OTP_SHADOW[index])
#define OCOTP_OTP_CTRL_REG(base)                 ((base)->OTP_CTRL)
#define OCOTP_OTP_PDN_REG(base)                  ((base)->OTP_PDN)
#define OCOTP_OTP_WRITE_DATA_REG(base)           ((base)->OTP_WRITE_DATA)
#define OCOTP_OTP_READ_CTRL_REG(base)            ((base)->OTP_READ_CTRL)
#define OCOTP_OTP_READ_DATA_REG(base)            ((base)->OTP_READ_DATA)
#define OCOTP_OTP_CLK_DIV_REG(base)              ((base)->OTP_CLK_DIV)
#define OCOTP_OTP_CRC_ADDR_REG(base)             ((base)->OTP_CRC_ADDR)
#define OCOTP_OTP_CRC_VALUE_REG(base)            ((base)->OTP_CRC_VALUE)
#define OCOTP_OTP_STATUS_REG(base)               ((base)->OTP_STATUS)
#define OCOTP_OTP_VERSION_REG(base)              ((base)->OTP_VERSION)

/*!
 * @}
 */ /* end of group OCOTP_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- OCOTP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Masks OCOTP Register Masks
 * @{
 */

/*! @name OTP_SHADOW - OTP shadow register N */
/*! @{ */
#define OCOTP_OTP_SHADOW_shadow_MASK             (0xFFFFFFFFU)
#define OCOTP_OTP_SHADOW_shadow_SHIFT            (0U)
/*! shadow - OTP shadow register
 */
#define OCOTP_OTP_SHADOW_shadow(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_SHADOW_shadow_SHIFT)) & OCOTP_OTP_SHADOW_shadow_MASK)
/*! @} */

/* The count of OCOTP_OTP_SHADOW */
#define OCOTP_OTP_SHADOW_COUNT                   (496U)

/*! @name OTP_CTRL - Control/address register */
/*! @{ */
#define OCOTP_OTP_CTRL_ADDR_MASK                 (0x1FFU)
#define OCOTP_OTP_CTRL_ADDR_SHIFT                (0U)
/*! ADDR - OTP word address for read/programming
 */
#define OCOTP_OTP_CTRL_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_CTRL_ADDR_SHIFT)) & OCOTP_OTP_CTRL_ADDR_MASK)
#define OCOTP_OTP_CTRL_RELOAD_SHADOWS_MASK       (0x800U)
#define OCOTP_OTP_CTRL_RELOAD_SHADOWS_SHIFT      (11U)
#define OCOTP_OTP_CTRL_CRC_TEST_MASK             (0x1000U)
#define OCOTP_OTP_CTRL_CRC_TEST_SHIFT            (12U)
#define OCOTP_OTP_CTRL_WORDLOCK_MASK             (0x8000U)
#define OCOTP_OTP_CTRL_WORDLOCK_SHIFT            (15U)
#define OCOTP_OTP_CTRL_WR_UNLOCK_MASK            (0xFFFF0000U)
#define OCOTP_OTP_CTRL_WR_UNLOCK_SHIFT           (16U)
/*! WR_UNLOCK - Write 0x3E77 to enable OTP write accesses. NOTE: The write operation must be
 *    unlocked for each word by writing 0x3E77 to WR_UNLOCK field. Then writing to OTP_WRITE_DATA register
 *    will automatically start the programming procedure.
 */
#define OCOTP_OTP_CTRL_WR_UNLOCK(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_CTRL_WR_UNLOCK_SHIFT)) & OCOTP_OTP_CTRL_WR_UNLOCK_MASK)
/*! @} */

/*! @name OTP_PDN - Power-down register */
/*! @{ */
#define OCOTP_OTP_PDN_PDN_MASK                   (0x1U)
#define OCOTP_OTP_PDN_PDN_SHIFT                  (0U)
/*! @} */

/*! @name OTP_WRITE_DATA - OTP programming data register */
/*! @{ */
#define OCOTP_OTP_WRITE_DATA_WRITE_DATA_MASK     (0xFFFFFFFFU)
#define OCOTP_OTP_WRITE_DATA_WRITE_DATA_SHIFT    (0U)
/*! WRITE_DATA - Fuse word programming data. After the write operation is unlocked in OTP_CTRL
 *    register, writing data to this register automatically start the programming procedure.
 */
#define OCOTP_OTP_WRITE_DATA_WRITE_DATA(x)       (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_WRITE_DATA_WRITE_DATA_SHIFT)) & OCOTP_OTP_WRITE_DATA_WRITE_DATA_MASK)
/*! @} */

/*! @name OTP_READ_CTRL - OTP read start register */
/*! @{ */
#define OCOTP_OTP_READ_CTRL_READ_MASK            (0x1U)
#define OCOTP_OTP_READ_CTRL_READ_SHIFT           (0U)
/*! @} */

/*! @name OTP_READ_DATA - OTP read data register */
/*! @{ */
#define OCOTP_OTP_READ_DATA_READ_DATA_MASK       (0xFFFFFFFFU)
#define OCOTP_OTP_READ_DATA_READ_DATA_SHIFT      (0U)
/*! READ_DATA - Fuse word read data from read operation
 */
#define OCOTP_OTP_READ_DATA_READ_DATA(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_READ_DATA_READ_DATA_SHIFT)) & OCOTP_OTP_READ_DATA_READ_DATA_MASK)
/*! @} */

/*! @name OTP_CLK_DIV - OTP clock divider register */
/*! @{ */
#define OCOTP_OTP_CLK_DIV_DIV_MASK               (0xFU)
#define OCOTP_OTP_CLK_DIV_DIV_SHIFT              (0U)
/*! DIV - Clock divider value by -1 encoding. It's used to generate the clock to OTP memory
 *    (otp_clk) with apb_clk. The maximum otp_clk frequency is 120Mhz. 0: Divide by 1
 *  0b0000..Divide by 1
 *  0b0001..Divide by 2
 *  0b0010..Divide by 3
 *  0b0011..Divide by 4
 *  0b0100..Divide by 5
 *  0b0101..Divide by 6
 *  0b0110..Divide by 7
 *  0b0111..Divide by 8
 *  0b1000..Divide by 9
 *  0b1001..Divide by 10
 *  0b1010..Divide by 11
 *  0b1011..Divide by 12
 *  0b1100..Divide by 13
 *  0b1101..Divide by 14
 *  0b1110..Divide by 15
 *  0b1111..Divide by 16
 */
#define OCOTP_OTP_CLK_DIV_DIV(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_CLK_DIV_DIV_SHIFT)) & OCOTP_OTP_CLK_DIV_DIV_MASK)
#define OCOTP_OTP_CLK_DIV_RESET_MASK             (0x20000000U)
#define OCOTP_OTP_CLK_DIV_RESET_SHIFT            (29U)
#define OCOTP_OTP_CLK_DIV_HALT_MASK              (0x40000000U)
#define OCOTP_OTP_CLK_DIV_HALT_SHIFT             (30U)
#define OCOTP_OTP_CLK_DIV_REQFLAG_MASK           (0x80000000U)
#define OCOTP_OTP_CLK_DIV_REQFLAG_SHIFT          (31U)
/*! @} */

/*! @name OTP_CRC_ADDR - CRC address range register */
/*! @{ */
#define OCOTP_OTP_CRC_ADDR_CRC_START_ADDR_MASK   (0x1FFU)
#define OCOTP_OTP_CRC_ADDR_CRC_START_ADDR_SHIFT  (0U)
/*! CRC_START_ADDR - CRC starting fuse word address
 */
#define OCOTP_OTP_CRC_ADDR_CRC_START_ADDR(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_CRC_ADDR_CRC_START_ADDR_SHIFT)) & OCOTP_OTP_CRC_ADDR_CRC_START_ADDR_MASK)
#define OCOTP_OTP_CRC_ADDR_CRC_END_ADDR_MASK     (0x1FF000U)
#define OCOTP_OTP_CRC_ADDR_CRC_END_ADDR_SHIFT    (12U)
/*! CRC_END_ADDR - CRC ending fuse word address
 */
#define OCOTP_OTP_CRC_ADDR_CRC_END_ADDR(x)       (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_CRC_ADDR_CRC_END_ADDR_SHIFT)) & OCOTP_OTP_CRC_ADDR_CRC_END_ADDR_MASK)
#define OCOTP_OTP_CRC_ADDR_CRC_REF_ADDR_MASK     (0x7000000U)
#define OCOTP_OTP_CRC_ADDR_CRC_REF_ADDR_SHIFT    (24U)
/*! CRC_REF_ADDR - Specify which of the 8 CRC reference value to use for CRC calculation. When the
 *    CRC result for the fuse data from CRC_START_ADDR to CRC_END_ADDR and this CRC reference value
 *    is 0, the CRC check passes.
 */
#define OCOTP_OTP_CRC_ADDR_CRC_REF_ADDR(x)       (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_CRC_ADDR_CRC_REF_ADDR_SHIFT)) & OCOTP_OTP_CRC_ADDR_CRC_REF_ADDR_MASK)
/*! @} */

/*! @name OTP_CRC_VALUE - CRC result register */
/*! @{ */
#define OCOTP_OTP_CRC_VALUE_CRC_VALUE_MASK       (0xFFFFFFFFU)
#define OCOTP_OTP_CRC_VALUE_CRC_VALUE_SHIFT      (0U)
/*! CRC_VALUE - The CRC result value. When it is locked, reading from it returns value 0xBADA_BADA
 */
#define OCOTP_OTP_CRC_VALUE_CRC_VALUE(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_CRC_VALUE_CRC_VALUE_SHIFT)) & OCOTP_OTP_CRC_VALUE_CRC_VALUE_MASK)
/*! @} */

/*! @name OTP_STATUS - Status register */
/*! @{ */
#define OCOTP_OTP_STATUS_SEC_MASK                (0x200U)
#define OCOTP_OTP_STATUS_SEC_SHIFT               (9U)
#define OCOTP_OTP_STATUS_DED_MASK                (0x400U)
#define OCOTP_OTP_STATUS_DED_SHIFT               (10U)
#define OCOTP_OTP_STATUS_LOCKED_MASK             (0x800U)
#define OCOTP_OTP_STATUS_LOCKED_SHIFT            (11U)
#define OCOTP_OTP_STATUS_PROGFAIL_MASK           (0x1000U)
#define OCOTP_OTP_STATUS_PROGFAIL_SHIFT          (12U)
#define OCOTP_OTP_STATUS_ACK_MASK                (0x2000U)
#define OCOTP_OTP_STATUS_ACK_SHIFT               (13U)
#define OCOTP_OTP_STATUS_PWOK_MASK               (0x4000U)
#define OCOTP_OTP_STATUS_PWOK_SHIFT              (14U)
#define OCOTP_OTP_STATUS_SEC_RELOAD_MASK         (0x100000U)
#define OCOTP_OTP_STATUS_SEC_RELOAD_SHIFT        (20U)
#define OCOTP_OTP_STATUS_DED_RELOAD_MASK         (0x200000U)
#define OCOTP_OTP_STATUS_DED_RELOAD_SHIFT        (21U)
#define OCOTP_OTP_STATUS_BUSY_MASK               (0x400000U)
#define OCOTP_OTP_STATUS_BUSY_SHIFT              (22U)
#define OCOTP_OTP_STATUS_ERROR_MASK              (0x800000U)
#define OCOTP_OTP_STATUS_ERROR_SHIFT             (23U)
#define OCOTP_OTP_STATUS_CRC_FAIL_MASK           (0x1000000U)
#define OCOTP_OTP_STATUS_CRC_FAIL_SHIFT          (24U)
#define OCOTP_OTP_STATUS_FUSE_LATCHED_MASK       (0x2000000U)
#define OCOTP_OTP_STATUS_FUSE_LATCHED_SHIFT      (25U)
/*! @} */

/*! @name OTP_VERSION - VERSION ID register */
/*! @{ */
#define OCOTP_OTP_VERSION_STEP_VER_MASK          (0xFFFFU)
#define OCOTP_OTP_VERSION_STEP_VER_SHIFT         (0U)
/*! STEP_VER - OTP controller step version
 */
#define OCOTP_OTP_VERSION_STEP_VER(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_VERSION_STEP_VER_SHIFT)) & OCOTP_OTP_VERSION_STEP_VER_MASK)
#define OCOTP_OTP_VERSION_MINOR_VER_MASK         (0xFF0000U)
#define OCOTP_OTP_VERSION_MINOR_VER_SHIFT        (16U)
/*! MINOR_VER - OTP controller minor version
 */
#define OCOTP_OTP_VERSION_MINOR_VER(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_VERSION_MINOR_VER_SHIFT)) & OCOTP_OTP_VERSION_MINOR_VER_MASK)
#define OCOTP_OTP_VERSION_MAJOR_VER_MASK         (0xFF000000U)
#define OCOTP_OTP_VERSION_MAJOR_VER_SHIFT        (24U)
/*! MAJOR_VER - OTP controller major version
 */
#define OCOTP_OTP_VERSION_MAJOR_VER(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_OTP_VERSION_MAJOR_VER_SHIFT)) & OCOTP_OTP_VERSION_MAJOR_VER_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group OCOTP_Register_Masks */


/* OCOTP - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral OCOTP0 base pointer */
  #define OCOTP0_BASE_PTR                          ((OCOTP_MemMapPtr)0x50130000u)
  /** Peripheral OCOTP0 base pointer */
  #define OCOTP0_BASE_PTR_NS                       ((OCOTP_MemMapPtr)0x40130000u)
  /** Array initializer of OCOTP peripheral base pointers */
  #define OCOTP_BASE_PTRS                          { OCOTP0_BASE_PTR }
  /** Array initializer of OCOTP peripheral base pointers */
  #define OCOTP_BASE_PTRS_NS                       { OCOTP0_BASE_PTR_NS }
#else
  /** Peripheral OCOTP0 base pointer */
  #define OCOTP0_BASE_PTR                          ((OCOTP_MemMapPtr)0x40130000u)
  /** Array initializer of OCOTP peripheral base pointers */
  #define OCOTP_BASE_PTRS                          { OCOTP0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- OCOTP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Accessor_Macros OCOTP - Register accessor macros
 * @{
 */


/* OCOTP - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* OCOTP0 */
  #define OCOTP0_OTP_SHADOW0                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,0)
  #define OCOTP0_OTP_SHADOW0_NS                    OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,0)
  #define OCOTP0_OTP_SHADOW1                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,1)
  #define OCOTP0_OTP_SHADOW1_NS                    OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,1)
  #define OCOTP0_OTP_SHADOW2                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,2)
  #define OCOTP0_OTP_SHADOW2_NS                    OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,2)
  #define OCOTP0_OTP_SHADOW3                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,3)
  #define OCOTP0_OTP_SHADOW3_NS                    OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,3)
  #define OCOTP0_OTP_SHADOW4                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,4)
  #define OCOTP0_OTP_SHADOW4_NS                    OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,4)
  #define OCOTP0_OTP_SHADOW5                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,5)
  #define OCOTP0_OTP_SHADOW5_NS                    OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,5)
  #define OCOTP0_OTP_SHADOW6                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,6)
  #define OCOTP0_OTP_SHADOW6_NS                    OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,6)
  #define OCOTP0_OTP_SHADOW7                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,7)
  #define OCOTP0_OTP_SHADOW7_NS                    OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,7)
  #define OCOTP0_OTP_SHADOW8                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,8)
  #define OCOTP0_OTP_SHADOW8_NS                    OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,8)
  #define OCOTP0_OTP_SHADOW9                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,9)
  #define OCOTP0_OTP_SHADOW9_NS                    OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,9)
  #define OCOTP0_OTP_SHADOW10                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,10)
  #define OCOTP0_OTP_SHADOW10_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,10)
  #define OCOTP0_OTP_SHADOW11                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,11)
  #define OCOTP0_OTP_SHADOW11_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,11)
  #define OCOTP0_OTP_SHADOW12                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,12)
  #define OCOTP0_OTP_SHADOW12_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,12)
  #define OCOTP0_OTP_SHADOW13                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,13)
  #define OCOTP0_OTP_SHADOW13_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,13)
  #define OCOTP0_OTP_SHADOW14                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,14)
  #define OCOTP0_OTP_SHADOW14_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,14)
  #define OCOTP0_OTP_SHADOW15                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,15)
  #define OCOTP0_OTP_SHADOW15_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,15)
  #define OCOTP0_OTP_SHADOW16                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,16)
  #define OCOTP0_OTP_SHADOW16_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,16)
  #define OCOTP0_OTP_SHADOW17                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,17)
  #define OCOTP0_OTP_SHADOW17_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,17)
  #define OCOTP0_OTP_SHADOW18                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,18)
  #define OCOTP0_OTP_SHADOW18_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,18)
  #define OCOTP0_OTP_SHADOW19                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,19)
  #define OCOTP0_OTP_SHADOW19_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,19)
  #define OCOTP0_OTP_SHADOW20                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,20)
  #define OCOTP0_OTP_SHADOW20_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,20)
  #define OCOTP0_OTP_SHADOW21                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,21)
  #define OCOTP0_OTP_SHADOW21_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,21)
  #define OCOTP0_OTP_SHADOW22                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,22)
  #define OCOTP0_OTP_SHADOW22_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,22)
  #define OCOTP0_OTP_SHADOW23                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,23)
  #define OCOTP0_OTP_SHADOW23_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,23)
  #define OCOTP0_OTP_SHADOW24                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,24)
  #define OCOTP0_OTP_SHADOW24_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,24)
  #define OCOTP0_OTP_SHADOW25                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,25)
  #define OCOTP0_OTP_SHADOW25_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,25)
  #define OCOTP0_OTP_SHADOW26                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,26)
  #define OCOTP0_OTP_SHADOW26_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,26)
  #define OCOTP0_OTP_SHADOW27                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,27)
  #define OCOTP0_OTP_SHADOW27_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,27)
  #define OCOTP0_OTP_SHADOW28                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,28)
  #define OCOTP0_OTP_SHADOW28_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,28)
  #define OCOTP0_OTP_SHADOW29                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,29)
  #define OCOTP0_OTP_SHADOW29_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,29)
  #define OCOTP0_OTP_SHADOW30                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,30)
  #define OCOTP0_OTP_SHADOW30_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,30)
  #define OCOTP0_OTP_SHADOW31                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,31)
  #define OCOTP0_OTP_SHADOW31_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,31)
  #define OCOTP0_OTP_SHADOW32                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,32)
  #define OCOTP0_OTP_SHADOW32_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,32)
  #define OCOTP0_OTP_SHADOW33                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,33)
  #define OCOTP0_OTP_SHADOW33_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,33)
  #define OCOTP0_OTP_SHADOW34                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,34)
  #define OCOTP0_OTP_SHADOW34_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,34)
  #define OCOTP0_OTP_SHADOW35                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,35)
  #define OCOTP0_OTP_SHADOW35_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,35)
  #define OCOTP0_OTP_SHADOW36                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,36)
  #define OCOTP0_OTP_SHADOW36_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,36)
  #define OCOTP0_OTP_SHADOW37                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,37)
  #define OCOTP0_OTP_SHADOW37_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,37)
  #define OCOTP0_OTP_SHADOW38                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,38)
  #define OCOTP0_OTP_SHADOW38_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,38)
  #define OCOTP0_OTP_SHADOW39                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,39)
  #define OCOTP0_OTP_SHADOW39_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,39)
  #define OCOTP0_OTP_SHADOW40                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,40)
  #define OCOTP0_OTP_SHADOW40_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,40)
  #define OCOTP0_OTP_SHADOW41                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,41)
  #define OCOTP0_OTP_SHADOW41_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,41)
  #define OCOTP0_OTP_SHADOW42                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,42)
  #define OCOTP0_OTP_SHADOW42_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,42)
  #define OCOTP0_OTP_SHADOW43                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,43)
  #define OCOTP0_OTP_SHADOW43_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,43)
  #define OCOTP0_OTP_SHADOW44                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,44)
  #define OCOTP0_OTP_SHADOW44_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,44)
  #define OCOTP0_OTP_SHADOW45                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,45)
  #define OCOTP0_OTP_SHADOW45_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,45)
  #define OCOTP0_OTP_SHADOW46                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,46)
  #define OCOTP0_OTP_SHADOW46_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,46)
  #define OCOTP0_OTP_SHADOW47                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,47)
  #define OCOTP0_OTP_SHADOW47_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,47)
  #define OCOTP0_OTP_SHADOW48                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,48)
  #define OCOTP0_OTP_SHADOW48_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,48)
  #define OCOTP0_OTP_SHADOW49                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,49)
  #define OCOTP0_OTP_SHADOW49_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,49)
  #define OCOTP0_OTP_SHADOW50                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,50)
  #define OCOTP0_OTP_SHADOW50_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,50)
  #define OCOTP0_OTP_SHADOW51                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,51)
  #define OCOTP0_OTP_SHADOW51_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,51)
  #define OCOTP0_OTP_SHADOW52                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,52)
  #define OCOTP0_OTP_SHADOW52_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,52)
  #define OCOTP0_OTP_SHADOW53                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,53)
  #define OCOTP0_OTP_SHADOW53_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,53)
  #define OCOTP0_OTP_SHADOW54                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,54)
  #define OCOTP0_OTP_SHADOW54_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,54)
  #define OCOTP0_OTP_SHADOW55                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,55)
  #define OCOTP0_OTP_SHADOW55_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,55)
  #define OCOTP0_OTP_SHADOW56                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,56)
  #define OCOTP0_OTP_SHADOW56_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,56)
  #define OCOTP0_OTP_SHADOW57                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,57)
  #define OCOTP0_OTP_SHADOW57_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,57)
  #define OCOTP0_OTP_SHADOW58                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,58)
  #define OCOTP0_OTP_SHADOW58_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,58)
  #define OCOTP0_OTP_SHADOW59                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,59)
  #define OCOTP0_OTP_SHADOW59_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,59)
  #define OCOTP0_OTP_SHADOW60                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,60)
  #define OCOTP0_OTP_SHADOW60_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,60)
  #define OCOTP0_OTP_SHADOW61                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,61)
  #define OCOTP0_OTP_SHADOW61_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,61)
  #define OCOTP0_OTP_SHADOW62                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,62)
  #define OCOTP0_OTP_SHADOW62_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,62)
  #define OCOTP0_OTP_SHADOW63                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,63)
  #define OCOTP0_OTP_SHADOW63_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,63)
  #define OCOTP0_OTP_SHADOW64                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,64)
  #define OCOTP0_OTP_SHADOW64_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,64)
  #define OCOTP0_OTP_SHADOW65                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,65)
  #define OCOTP0_OTP_SHADOW65_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,65)
  #define OCOTP0_OTP_SHADOW66                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,66)
  #define OCOTP0_OTP_SHADOW66_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,66)
  #define OCOTP0_OTP_SHADOW67                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,67)
  #define OCOTP0_OTP_SHADOW67_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,67)
  #define OCOTP0_OTP_SHADOW68                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,68)
  #define OCOTP0_OTP_SHADOW68_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,68)
  #define OCOTP0_OTP_SHADOW69                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,69)
  #define OCOTP0_OTP_SHADOW69_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,69)
  #define OCOTP0_OTP_SHADOW70                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,70)
  #define OCOTP0_OTP_SHADOW70_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,70)
  #define OCOTP0_OTP_SHADOW71                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,71)
  #define OCOTP0_OTP_SHADOW71_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,71)
  #define OCOTP0_OTP_SHADOW72                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,72)
  #define OCOTP0_OTP_SHADOW72_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,72)
  #define OCOTP0_OTP_SHADOW73                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,73)
  #define OCOTP0_OTP_SHADOW73_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,73)
  #define OCOTP0_OTP_SHADOW74                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,74)
  #define OCOTP0_OTP_SHADOW74_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,74)
  #define OCOTP0_OTP_SHADOW75                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,75)
  #define OCOTP0_OTP_SHADOW75_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,75)
  #define OCOTP0_OTP_SHADOW76                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,76)
  #define OCOTP0_OTP_SHADOW76_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,76)
  #define OCOTP0_OTP_SHADOW77                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,77)
  #define OCOTP0_OTP_SHADOW77_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,77)
  #define OCOTP0_OTP_SHADOW78                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,78)
  #define OCOTP0_OTP_SHADOW78_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,78)
  #define OCOTP0_OTP_SHADOW79                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,79)
  #define OCOTP0_OTP_SHADOW79_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,79)
  #define OCOTP0_OTP_SHADOW80                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,80)
  #define OCOTP0_OTP_SHADOW80_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,80)
  #define OCOTP0_OTP_SHADOW81                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,81)
  #define OCOTP0_OTP_SHADOW81_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,81)
  #define OCOTP0_OTP_SHADOW82                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,82)
  #define OCOTP0_OTP_SHADOW82_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,82)
  #define OCOTP0_OTP_SHADOW83                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,83)
  #define OCOTP0_OTP_SHADOW83_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,83)
  #define OCOTP0_OTP_SHADOW84                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,84)
  #define OCOTP0_OTP_SHADOW84_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,84)
  #define OCOTP0_OTP_SHADOW85                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,85)
  #define OCOTP0_OTP_SHADOW85_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,85)
  #define OCOTP0_OTP_SHADOW86                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,86)
  #define OCOTP0_OTP_SHADOW86_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,86)
  #define OCOTP0_OTP_SHADOW87                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,87)
  #define OCOTP0_OTP_SHADOW87_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,87)
  #define OCOTP0_OTP_SHADOW88                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,88)
  #define OCOTP0_OTP_SHADOW88_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,88)
  #define OCOTP0_OTP_SHADOW89                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,89)
  #define OCOTP0_OTP_SHADOW89_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,89)
  #define OCOTP0_OTP_SHADOW90                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,90)
  #define OCOTP0_OTP_SHADOW90_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,90)
  #define OCOTP0_OTP_SHADOW91                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,91)
  #define OCOTP0_OTP_SHADOW91_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,91)
  #define OCOTP0_OTP_SHADOW92                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,92)
  #define OCOTP0_OTP_SHADOW92_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,92)
  #define OCOTP0_OTP_SHADOW93                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,93)
  #define OCOTP0_OTP_SHADOW93_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,93)
  #define OCOTP0_OTP_SHADOW94                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,94)
  #define OCOTP0_OTP_SHADOW94_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,94)
  #define OCOTP0_OTP_SHADOW95                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,95)
  #define OCOTP0_OTP_SHADOW95_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,95)
  #define OCOTP0_OTP_SHADOW96                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,96)
  #define OCOTP0_OTP_SHADOW96_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,96)
  #define OCOTP0_OTP_SHADOW97                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,97)
  #define OCOTP0_OTP_SHADOW97_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,97)
  #define OCOTP0_OTP_SHADOW98                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,98)
  #define OCOTP0_OTP_SHADOW98_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,98)
  #define OCOTP0_OTP_SHADOW99                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,99)
  #define OCOTP0_OTP_SHADOW99_NS                   OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,99)
  #define OCOTP0_OTP_SHADOW100                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,100)
  #define OCOTP0_OTP_SHADOW100_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,100)
  #define OCOTP0_OTP_SHADOW101                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,101)
  #define OCOTP0_OTP_SHADOW101_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,101)
  #define OCOTP0_OTP_SHADOW102                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,102)
  #define OCOTP0_OTP_SHADOW102_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,102)
  #define OCOTP0_OTP_SHADOW103                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,103)
  #define OCOTP0_OTP_SHADOW103_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,103)
  #define OCOTP0_OTP_SHADOW104                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,104)
  #define OCOTP0_OTP_SHADOW104_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,104)
  #define OCOTP0_OTP_SHADOW105                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,105)
  #define OCOTP0_OTP_SHADOW105_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,105)
  #define OCOTP0_OTP_SHADOW106                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,106)
  #define OCOTP0_OTP_SHADOW106_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,106)
  #define OCOTP0_OTP_SHADOW107                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,107)
  #define OCOTP0_OTP_SHADOW107_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,107)
  #define OCOTP0_OTP_SHADOW108                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,108)
  #define OCOTP0_OTP_SHADOW108_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,108)
  #define OCOTP0_OTP_SHADOW109                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,109)
  #define OCOTP0_OTP_SHADOW109_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,109)
  #define OCOTP0_OTP_SHADOW110                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,110)
  #define OCOTP0_OTP_SHADOW110_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,110)
  #define OCOTP0_OTP_SHADOW111                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,111)
  #define OCOTP0_OTP_SHADOW111_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,111)
  #define OCOTP0_OTP_SHADOW112                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,112)
  #define OCOTP0_OTP_SHADOW112_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,112)
  #define OCOTP0_OTP_SHADOW113                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,113)
  #define OCOTP0_OTP_SHADOW113_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,113)
  #define OCOTP0_OTP_SHADOW114                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,114)
  #define OCOTP0_OTP_SHADOW114_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,114)
  #define OCOTP0_OTP_SHADOW115                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,115)
  #define OCOTP0_OTP_SHADOW115_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,115)
  #define OCOTP0_OTP_SHADOW116                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,116)
  #define OCOTP0_OTP_SHADOW116_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,116)
  #define OCOTP0_OTP_SHADOW117                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,117)
  #define OCOTP0_OTP_SHADOW117_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,117)
  #define OCOTP0_OTP_SHADOW118                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,118)
  #define OCOTP0_OTP_SHADOW118_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,118)
  #define OCOTP0_OTP_SHADOW119                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,119)
  #define OCOTP0_OTP_SHADOW119_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,119)
  #define OCOTP0_OTP_SHADOW120                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,120)
  #define OCOTP0_OTP_SHADOW120_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,120)
  #define OCOTP0_OTP_SHADOW121                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,121)
  #define OCOTP0_OTP_SHADOW121_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,121)
  #define OCOTP0_OTP_SHADOW122                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,122)
  #define OCOTP0_OTP_SHADOW122_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,122)
  #define OCOTP0_OTP_SHADOW123                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,123)
  #define OCOTP0_OTP_SHADOW123_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,123)
  #define OCOTP0_OTP_SHADOW124                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,124)
  #define OCOTP0_OTP_SHADOW124_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,124)
  #define OCOTP0_OTP_SHADOW125                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,125)
  #define OCOTP0_OTP_SHADOW125_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,125)
  #define OCOTP0_OTP_SHADOW126                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,126)
  #define OCOTP0_OTP_SHADOW126_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,126)
  #define OCOTP0_OTP_SHADOW127                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,127)
  #define OCOTP0_OTP_SHADOW127_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,127)
  #define OCOTP0_OTP_SHADOW128                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,128)
  #define OCOTP0_OTP_SHADOW128_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,128)
  #define OCOTP0_OTP_SHADOW129                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,129)
  #define OCOTP0_OTP_SHADOW129_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,129)
  #define OCOTP0_OTP_SHADOW130                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,130)
  #define OCOTP0_OTP_SHADOW130_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,130)
  #define OCOTP0_OTP_SHADOW131                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,131)
  #define OCOTP0_OTP_SHADOW131_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,131)
  #define OCOTP0_OTP_SHADOW132                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,132)
  #define OCOTP0_OTP_SHADOW132_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,132)
  #define OCOTP0_OTP_SHADOW133                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,133)
  #define OCOTP0_OTP_SHADOW133_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,133)
  #define OCOTP0_OTP_SHADOW134                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,134)
  #define OCOTP0_OTP_SHADOW134_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,134)
  #define OCOTP0_OTP_SHADOW135                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,135)
  #define OCOTP0_OTP_SHADOW135_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,135)
  #define OCOTP0_OTP_SHADOW136                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,136)
  #define OCOTP0_OTP_SHADOW136_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,136)
  #define OCOTP0_OTP_SHADOW137                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,137)
  #define OCOTP0_OTP_SHADOW137_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,137)
  #define OCOTP0_OTP_SHADOW138                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,138)
  #define OCOTP0_OTP_SHADOW138_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,138)
  #define OCOTP0_OTP_SHADOW139                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,139)
  #define OCOTP0_OTP_SHADOW139_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,139)
  #define OCOTP0_OTP_SHADOW140                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,140)
  #define OCOTP0_OTP_SHADOW140_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,140)
  #define OCOTP0_OTP_SHADOW141                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,141)
  #define OCOTP0_OTP_SHADOW141_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,141)
  #define OCOTP0_OTP_SHADOW142                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,142)
  #define OCOTP0_OTP_SHADOW142_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,142)
  #define OCOTP0_OTP_SHADOW143                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,143)
  #define OCOTP0_OTP_SHADOW143_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,143)
  #define OCOTP0_OTP_SHADOW144                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,144)
  #define OCOTP0_OTP_SHADOW144_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,144)
  #define OCOTP0_OTP_SHADOW145                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,145)
  #define OCOTP0_OTP_SHADOW145_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,145)
  #define OCOTP0_OTP_SHADOW146                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,146)
  #define OCOTP0_OTP_SHADOW146_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,146)
  #define OCOTP0_OTP_SHADOW147                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,147)
  #define OCOTP0_OTP_SHADOW147_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,147)
  #define OCOTP0_OTP_SHADOW148                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,148)
  #define OCOTP0_OTP_SHADOW148_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,148)
  #define OCOTP0_OTP_SHADOW149                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,149)
  #define OCOTP0_OTP_SHADOW149_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,149)
  #define OCOTP0_OTP_SHADOW150                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,150)
  #define OCOTP0_OTP_SHADOW150_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,150)
  #define OCOTP0_OTP_SHADOW151                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,151)
  #define OCOTP0_OTP_SHADOW151_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,151)
  #define OCOTP0_OTP_SHADOW152                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,152)
  #define OCOTP0_OTP_SHADOW152_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,152)
  #define OCOTP0_OTP_SHADOW153                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,153)
  #define OCOTP0_OTP_SHADOW153_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,153)
  #define OCOTP0_OTP_SHADOW154                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,154)
  #define OCOTP0_OTP_SHADOW154_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,154)
  #define OCOTP0_OTP_SHADOW155                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,155)
  #define OCOTP0_OTP_SHADOW155_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,155)
  #define OCOTP0_OTP_SHADOW156                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,156)
  #define OCOTP0_OTP_SHADOW156_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,156)
  #define OCOTP0_OTP_SHADOW157                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,157)
  #define OCOTP0_OTP_SHADOW157_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,157)
  #define OCOTP0_OTP_SHADOW158                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,158)
  #define OCOTP0_OTP_SHADOW158_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,158)
  #define OCOTP0_OTP_SHADOW159                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,159)
  #define OCOTP0_OTP_SHADOW159_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,159)
  #define OCOTP0_OTP_SHADOW160                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,160)
  #define OCOTP0_OTP_SHADOW160_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,160)
  #define OCOTP0_OTP_SHADOW161                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,161)
  #define OCOTP0_OTP_SHADOW161_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,161)
  #define OCOTP0_OTP_SHADOW162                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,162)
  #define OCOTP0_OTP_SHADOW162_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,162)
  #define OCOTP0_OTP_SHADOW163                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,163)
  #define OCOTP0_OTP_SHADOW163_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,163)
  #define OCOTP0_OTP_SHADOW164                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,164)
  #define OCOTP0_OTP_SHADOW164_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,164)
  #define OCOTP0_OTP_SHADOW165                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,165)
  #define OCOTP0_OTP_SHADOW165_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,165)
  #define OCOTP0_OTP_SHADOW166                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,166)
  #define OCOTP0_OTP_SHADOW166_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,166)
  #define OCOTP0_OTP_SHADOW167                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,167)
  #define OCOTP0_OTP_SHADOW167_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,167)
  #define OCOTP0_OTP_SHADOW168                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,168)
  #define OCOTP0_OTP_SHADOW168_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,168)
  #define OCOTP0_OTP_SHADOW169                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,169)
  #define OCOTP0_OTP_SHADOW169_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,169)
  #define OCOTP0_OTP_SHADOW170                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,170)
  #define OCOTP0_OTP_SHADOW170_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,170)
  #define OCOTP0_OTP_SHADOW171                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,171)
  #define OCOTP0_OTP_SHADOW171_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,171)
  #define OCOTP0_OTP_SHADOW172                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,172)
  #define OCOTP0_OTP_SHADOW172_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,172)
  #define OCOTP0_OTP_SHADOW173                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,173)
  #define OCOTP0_OTP_SHADOW173_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,173)
  #define OCOTP0_OTP_SHADOW174                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,174)
  #define OCOTP0_OTP_SHADOW174_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,174)
  #define OCOTP0_OTP_SHADOW175                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,175)
  #define OCOTP0_OTP_SHADOW175_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,175)
  #define OCOTP0_OTP_SHADOW176                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,176)
  #define OCOTP0_OTP_SHADOW176_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,176)
  #define OCOTP0_OTP_SHADOW177                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,177)
  #define OCOTP0_OTP_SHADOW177_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,177)
  #define OCOTP0_OTP_SHADOW178                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,178)
  #define OCOTP0_OTP_SHADOW178_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,178)
  #define OCOTP0_OTP_SHADOW179                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,179)
  #define OCOTP0_OTP_SHADOW179_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,179)
  #define OCOTP0_OTP_SHADOW180                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,180)
  #define OCOTP0_OTP_SHADOW180_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,180)
  #define OCOTP0_OTP_SHADOW181                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,181)
  #define OCOTP0_OTP_SHADOW181_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,181)
  #define OCOTP0_OTP_SHADOW182                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,182)
  #define OCOTP0_OTP_SHADOW182_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,182)
  #define OCOTP0_OTP_SHADOW183                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,183)
  #define OCOTP0_OTP_SHADOW183_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,183)
  #define OCOTP0_OTP_SHADOW184                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,184)
  #define OCOTP0_OTP_SHADOW184_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,184)
  #define OCOTP0_OTP_SHADOW185                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,185)
  #define OCOTP0_OTP_SHADOW185_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,185)
  #define OCOTP0_OTP_SHADOW186                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,186)
  #define OCOTP0_OTP_SHADOW186_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,186)
  #define OCOTP0_OTP_SHADOW187                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,187)
  #define OCOTP0_OTP_SHADOW187_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,187)
  #define OCOTP0_OTP_SHADOW188                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,188)
  #define OCOTP0_OTP_SHADOW188_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,188)
  #define OCOTP0_OTP_SHADOW189                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,189)
  #define OCOTP0_OTP_SHADOW189_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,189)
  #define OCOTP0_OTP_SHADOW190                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,190)
  #define OCOTP0_OTP_SHADOW190_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,190)
  #define OCOTP0_OTP_SHADOW191                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,191)
  #define OCOTP0_OTP_SHADOW191_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,191)
  #define OCOTP0_OTP_SHADOW192                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,192)
  #define OCOTP0_OTP_SHADOW192_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,192)
  #define OCOTP0_OTP_SHADOW193                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,193)
  #define OCOTP0_OTP_SHADOW193_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,193)
  #define OCOTP0_OTP_SHADOW194                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,194)
  #define OCOTP0_OTP_SHADOW194_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,194)
  #define OCOTP0_OTP_SHADOW195                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,195)
  #define OCOTP0_OTP_SHADOW195_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,195)
  #define OCOTP0_OTP_SHADOW196                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,196)
  #define OCOTP0_OTP_SHADOW196_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,196)
  #define OCOTP0_OTP_SHADOW197                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,197)
  #define OCOTP0_OTP_SHADOW197_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,197)
  #define OCOTP0_OTP_SHADOW198                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,198)
  #define OCOTP0_OTP_SHADOW198_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,198)
  #define OCOTP0_OTP_SHADOW199                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,199)
  #define OCOTP0_OTP_SHADOW199_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,199)
  #define OCOTP0_OTP_SHADOW200                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,200)
  #define OCOTP0_OTP_SHADOW200_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,200)
  #define OCOTP0_OTP_SHADOW201                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,201)
  #define OCOTP0_OTP_SHADOW201_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,201)
  #define OCOTP0_OTP_SHADOW202                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,202)
  #define OCOTP0_OTP_SHADOW202_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,202)
  #define OCOTP0_OTP_SHADOW203                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,203)
  #define OCOTP0_OTP_SHADOW203_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,203)
  #define OCOTP0_OTP_SHADOW204                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,204)
  #define OCOTP0_OTP_SHADOW204_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,204)
  #define OCOTP0_OTP_SHADOW205                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,205)
  #define OCOTP0_OTP_SHADOW205_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,205)
  #define OCOTP0_OTP_SHADOW206                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,206)
  #define OCOTP0_OTP_SHADOW206_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,206)
  #define OCOTP0_OTP_SHADOW207                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,207)
  #define OCOTP0_OTP_SHADOW207_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,207)
  #define OCOTP0_OTP_SHADOW208                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,208)
  #define OCOTP0_OTP_SHADOW208_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,208)
  #define OCOTP0_OTP_SHADOW209                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,209)
  #define OCOTP0_OTP_SHADOW209_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,209)
  #define OCOTP0_OTP_SHADOW210                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,210)
  #define OCOTP0_OTP_SHADOW210_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,210)
  #define OCOTP0_OTP_SHADOW211                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,211)
  #define OCOTP0_OTP_SHADOW211_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,211)
  #define OCOTP0_OTP_SHADOW212                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,212)
  #define OCOTP0_OTP_SHADOW212_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,212)
  #define OCOTP0_OTP_SHADOW213                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,213)
  #define OCOTP0_OTP_SHADOW213_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,213)
  #define OCOTP0_OTP_SHADOW214                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,214)
  #define OCOTP0_OTP_SHADOW214_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,214)
  #define OCOTP0_OTP_SHADOW215                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,215)
  #define OCOTP0_OTP_SHADOW215_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,215)
  #define OCOTP0_OTP_SHADOW216                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,216)
  #define OCOTP0_OTP_SHADOW216_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,216)
  #define OCOTP0_OTP_SHADOW217                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,217)
  #define OCOTP0_OTP_SHADOW217_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,217)
  #define OCOTP0_OTP_SHADOW218                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,218)
  #define OCOTP0_OTP_SHADOW218_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,218)
  #define OCOTP0_OTP_SHADOW219                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,219)
  #define OCOTP0_OTP_SHADOW219_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,219)
  #define OCOTP0_OTP_SHADOW220                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,220)
  #define OCOTP0_OTP_SHADOW220_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,220)
  #define OCOTP0_OTP_SHADOW221                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,221)
  #define OCOTP0_OTP_SHADOW221_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,221)
  #define OCOTP0_OTP_SHADOW222                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,222)
  #define OCOTP0_OTP_SHADOW222_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,222)
  #define OCOTP0_OTP_SHADOW223                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,223)
  #define OCOTP0_OTP_SHADOW223_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,223)
  #define OCOTP0_OTP_SHADOW224                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,224)
  #define OCOTP0_OTP_SHADOW224_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,224)
  #define OCOTP0_OTP_SHADOW225                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,225)
  #define OCOTP0_OTP_SHADOW225_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,225)
  #define OCOTP0_OTP_SHADOW226                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,226)
  #define OCOTP0_OTP_SHADOW226_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,226)
  #define OCOTP0_OTP_SHADOW227                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,227)
  #define OCOTP0_OTP_SHADOW227_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,227)
  #define OCOTP0_OTP_SHADOW228                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,228)
  #define OCOTP0_OTP_SHADOW228_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,228)
  #define OCOTP0_OTP_SHADOW229                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,229)
  #define OCOTP0_OTP_SHADOW229_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,229)
  #define OCOTP0_OTP_SHADOW230                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,230)
  #define OCOTP0_OTP_SHADOW230_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,230)
  #define OCOTP0_OTP_SHADOW231                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,231)
  #define OCOTP0_OTP_SHADOW231_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,231)
  #define OCOTP0_OTP_SHADOW232                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,232)
  #define OCOTP0_OTP_SHADOW232_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,232)
  #define OCOTP0_OTP_SHADOW233                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,233)
  #define OCOTP0_OTP_SHADOW233_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,233)
  #define OCOTP0_OTP_SHADOW234                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,234)
  #define OCOTP0_OTP_SHADOW234_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,234)
  #define OCOTP0_OTP_SHADOW235                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,235)
  #define OCOTP0_OTP_SHADOW235_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,235)
  #define OCOTP0_OTP_SHADOW236                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,236)
  #define OCOTP0_OTP_SHADOW236_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,236)
  #define OCOTP0_OTP_SHADOW237                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,237)
  #define OCOTP0_OTP_SHADOW237_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,237)
  #define OCOTP0_OTP_SHADOW238                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,238)
  #define OCOTP0_OTP_SHADOW238_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,238)
  #define OCOTP0_OTP_SHADOW239                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,239)
  #define OCOTP0_OTP_SHADOW239_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,239)
  #define OCOTP0_OTP_SHADOW240                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,240)
  #define OCOTP0_OTP_SHADOW240_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,240)
  #define OCOTP0_OTP_SHADOW241                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,241)
  #define OCOTP0_OTP_SHADOW241_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,241)
  #define OCOTP0_OTP_SHADOW242                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,242)
  #define OCOTP0_OTP_SHADOW242_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,242)
  #define OCOTP0_OTP_SHADOW243                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,243)
  #define OCOTP0_OTP_SHADOW243_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,243)
  #define OCOTP0_OTP_SHADOW244                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,244)
  #define OCOTP0_OTP_SHADOW244_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,244)
  #define OCOTP0_OTP_SHADOW245                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,245)
  #define OCOTP0_OTP_SHADOW245_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,245)
  #define OCOTP0_OTP_SHADOW246                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,246)
  #define OCOTP0_OTP_SHADOW246_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,246)
  #define OCOTP0_OTP_SHADOW247                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,247)
  #define OCOTP0_OTP_SHADOW247_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,247)
  #define OCOTP0_OTP_SHADOW248                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,248)
  #define OCOTP0_OTP_SHADOW248_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,248)
  #define OCOTP0_OTP_SHADOW249                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,249)
  #define OCOTP0_OTP_SHADOW249_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,249)
  #define OCOTP0_OTP_SHADOW250                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,250)
  #define OCOTP0_OTP_SHADOW250_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,250)
  #define OCOTP0_OTP_SHADOW251                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,251)
  #define OCOTP0_OTP_SHADOW251_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,251)
  #define OCOTP0_OTP_SHADOW252                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,252)
  #define OCOTP0_OTP_SHADOW252_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,252)
  #define OCOTP0_OTP_SHADOW253                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,253)
  #define OCOTP0_OTP_SHADOW253_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,253)
  #define OCOTP0_OTP_SHADOW254                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,254)
  #define OCOTP0_OTP_SHADOW254_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,254)
  #define OCOTP0_OTP_SHADOW255                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,255)
  #define OCOTP0_OTP_SHADOW255_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,255)
  #define OCOTP0_OTP_SHADOW256                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,256)
  #define OCOTP0_OTP_SHADOW256_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,256)
  #define OCOTP0_OTP_SHADOW257                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,257)
  #define OCOTP0_OTP_SHADOW257_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,257)
  #define OCOTP0_OTP_SHADOW258                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,258)
  #define OCOTP0_OTP_SHADOW258_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,258)
  #define OCOTP0_OTP_SHADOW259                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,259)
  #define OCOTP0_OTP_SHADOW259_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,259)
  #define OCOTP0_OTP_SHADOW260                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,260)
  #define OCOTP0_OTP_SHADOW260_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,260)
  #define OCOTP0_OTP_SHADOW261                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,261)
  #define OCOTP0_OTP_SHADOW261_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,261)
  #define OCOTP0_OTP_SHADOW262                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,262)
  #define OCOTP0_OTP_SHADOW262_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,262)
  #define OCOTP0_OTP_SHADOW263                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,263)
  #define OCOTP0_OTP_SHADOW263_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,263)
  #define OCOTP0_OTP_SHADOW264                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,264)
  #define OCOTP0_OTP_SHADOW264_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,264)
  #define OCOTP0_OTP_SHADOW265                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,265)
  #define OCOTP0_OTP_SHADOW265_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,265)
  #define OCOTP0_OTP_SHADOW266                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,266)
  #define OCOTP0_OTP_SHADOW266_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,266)
  #define OCOTP0_OTP_SHADOW267                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,267)
  #define OCOTP0_OTP_SHADOW267_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,267)
  #define OCOTP0_OTP_SHADOW268                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,268)
  #define OCOTP0_OTP_SHADOW268_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,268)
  #define OCOTP0_OTP_SHADOW269                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,269)
  #define OCOTP0_OTP_SHADOW269_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,269)
  #define OCOTP0_OTP_SHADOW270                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,270)
  #define OCOTP0_OTP_SHADOW270_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,270)
  #define OCOTP0_OTP_SHADOW271                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,271)
  #define OCOTP0_OTP_SHADOW271_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,271)
  #define OCOTP0_OTP_SHADOW272                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,272)
  #define OCOTP0_OTP_SHADOW272_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,272)
  #define OCOTP0_OTP_SHADOW273                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,273)
  #define OCOTP0_OTP_SHADOW273_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,273)
  #define OCOTP0_OTP_SHADOW274                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,274)
  #define OCOTP0_OTP_SHADOW274_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,274)
  #define OCOTP0_OTP_SHADOW275                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,275)
  #define OCOTP0_OTP_SHADOW275_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,275)
  #define OCOTP0_OTP_SHADOW276                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,276)
  #define OCOTP0_OTP_SHADOW276_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,276)
  #define OCOTP0_OTP_SHADOW277                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,277)
  #define OCOTP0_OTP_SHADOW277_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,277)
  #define OCOTP0_OTP_SHADOW278                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,278)
  #define OCOTP0_OTP_SHADOW278_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,278)
  #define OCOTP0_OTP_SHADOW279                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,279)
  #define OCOTP0_OTP_SHADOW279_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,279)
  #define OCOTP0_OTP_SHADOW280                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,280)
  #define OCOTP0_OTP_SHADOW280_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,280)
  #define OCOTP0_OTP_SHADOW281                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,281)
  #define OCOTP0_OTP_SHADOW281_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,281)
  #define OCOTP0_OTP_SHADOW282                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,282)
  #define OCOTP0_OTP_SHADOW282_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,282)
  #define OCOTP0_OTP_SHADOW283                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,283)
  #define OCOTP0_OTP_SHADOW283_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,283)
  #define OCOTP0_OTP_SHADOW284                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,284)
  #define OCOTP0_OTP_SHADOW284_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,284)
  #define OCOTP0_OTP_SHADOW285                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,285)
  #define OCOTP0_OTP_SHADOW285_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,285)
  #define OCOTP0_OTP_SHADOW286                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,286)
  #define OCOTP0_OTP_SHADOW286_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,286)
  #define OCOTP0_OTP_SHADOW287                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,287)
  #define OCOTP0_OTP_SHADOW287_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,287)
  #define OCOTP0_OTP_SHADOW288                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,288)
  #define OCOTP0_OTP_SHADOW288_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,288)
  #define OCOTP0_OTP_SHADOW289                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,289)
  #define OCOTP0_OTP_SHADOW289_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,289)
  #define OCOTP0_OTP_SHADOW290                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,290)
  #define OCOTP0_OTP_SHADOW290_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,290)
  #define OCOTP0_OTP_SHADOW291                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,291)
  #define OCOTP0_OTP_SHADOW291_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,291)
  #define OCOTP0_OTP_SHADOW292                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,292)
  #define OCOTP0_OTP_SHADOW292_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,292)
  #define OCOTP0_OTP_SHADOW293                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,293)
  #define OCOTP0_OTP_SHADOW293_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,293)
  #define OCOTP0_OTP_SHADOW294                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,294)
  #define OCOTP0_OTP_SHADOW294_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,294)
  #define OCOTP0_OTP_SHADOW295                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,295)
  #define OCOTP0_OTP_SHADOW295_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,295)
  #define OCOTP0_OTP_SHADOW296                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,296)
  #define OCOTP0_OTP_SHADOW296_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,296)
  #define OCOTP0_OTP_SHADOW297                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,297)
  #define OCOTP0_OTP_SHADOW297_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,297)
  #define OCOTP0_OTP_SHADOW298                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,298)
  #define OCOTP0_OTP_SHADOW298_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,298)
  #define OCOTP0_OTP_SHADOW299                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,299)
  #define OCOTP0_OTP_SHADOW299_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,299)
  #define OCOTP0_OTP_SHADOW300                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,300)
  #define OCOTP0_OTP_SHADOW300_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,300)
  #define OCOTP0_OTP_SHADOW301                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,301)
  #define OCOTP0_OTP_SHADOW301_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,301)
  #define OCOTP0_OTP_SHADOW302                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,302)
  #define OCOTP0_OTP_SHADOW302_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,302)
  #define OCOTP0_OTP_SHADOW303                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,303)
  #define OCOTP0_OTP_SHADOW303_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,303)
  #define OCOTP0_OTP_SHADOW304                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,304)
  #define OCOTP0_OTP_SHADOW304_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,304)
  #define OCOTP0_OTP_SHADOW305                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,305)
  #define OCOTP0_OTP_SHADOW305_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,305)
  #define OCOTP0_OTP_SHADOW306                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,306)
  #define OCOTP0_OTP_SHADOW306_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,306)
  #define OCOTP0_OTP_SHADOW307                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,307)
  #define OCOTP0_OTP_SHADOW307_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,307)
  #define OCOTP0_OTP_SHADOW308                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,308)
  #define OCOTP0_OTP_SHADOW308_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,308)
  #define OCOTP0_OTP_SHADOW309                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,309)
  #define OCOTP0_OTP_SHADOW309_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,309)
  #define OCOTP0_OTP_SHADOW310                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,310)
  #define OCOTP0_OTP_SHADOW310_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,310)
  #define OCOTP0_OTP_SHADOW311                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,311)
  #define OCOTP0_OTP_SHADOW311_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,311)
  #define OCOTP0_OTP_SHADOW312                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,312)
  #define OCOTP0_OTP_SHADOW312_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,312)
  #define OCOTP0_OTP_SHADOW313                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,313)
  #define OCOTP0_OTP_SHADOW313_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,313)
  #define OCOTP0_OTP_SHADOW314                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,314)
  #define OCOTP0_OTP_SHADOW314_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,314)
  #define OCOTP0_OTP_SHADOW315                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,315)
  #define OCOTP0_OTP_SHADOW315_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,315)
  #define OCOTP0_OTP_SHADOW316                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,316)
  #define OCOTP0_OTP_SHADOW316_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,316)
  #define OCOTP0_OTP_SHADOW317                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,317)
  #define OCOTP0_OTP_SHADOW317_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,317)
  #define OCOTP0_OTP_SHADOW318                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,318)
  #define OCOTP0_OTP_SHADOW318_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,318)
  #define OCOTP0_OTP_SHADOW319                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,319)
  #define OCOTP0_OTP_SHADOW319_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,319)
  #define OCOTP0_OTP_SHADOW320                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,320)
  #define OCOTP0_OTP_SHADOW320_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,320)
  #define OCOTP0_OTP_SHADOW321                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,321)
  #define OCOTP0_OTP_SHADOW321_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,321)
  #define OCOTP0_OTP_SHADOW322                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,322)
  #define OCOTP0_OTP_SHADOW322_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,322)
  #define OCOTP0_OTP_SHADOW323                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,323)
  #define OCOTP0_OTP_SHADOW323_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,323)
  #define OCOTP0_OTP_SHADOW324                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,324)
  #define OCOTP0_OTP_SHADOW324_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,324)
  #define OCOTP0_OTP_SHADOW325                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,325)
  #define OCOTP0_OTP_SHADOW325_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,325)
  #define OCOTP0_OTP_SHADOW326                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,326)
  #define OCOTP0_OTP_SHADOW326_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,326)
  #define OCOTP0_OTP_SHADOW327                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,327)
  #define OCOTP0_OTP_SHADOW327_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,327)
  #define OCOTP0_OTP_SHADOW328                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,328)
  #define OCOTP0_OTP_SHADOW328_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,328)
  #define OCOTP0_OTP_SHADOW329                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,329)
  #define OCOTP0_OTP_SHADOW329_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,329)
  #define OCOTP0_OTP_SHADOW330                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,330)
  #define OCOTP0_OTP_SHADOW330_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,330)
  #define OCOTP0_OTP_SHADOW331                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,331)
  #define OCOTP0_OTP_SHADOW331_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,331)
  #define OCOTP0_OTP_SHADOW332                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,332)
  #define OCOTP0_OTP_SHADOW332_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,332)
  #define OCOTP0_OTP_SHADOW333                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,333)
  #define OCOTP0_OTP_SHADOW333_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,333)
  #define OCOTP0_OTP_SHADOW334                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,334)
  #define OCOTP0_OTP_SHADOW334_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,334)
  #define OCOTP0_OTP_SHADOW335                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,335)
  #define OCOTP0_OTP_SHADOW335_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,335)
  #define OCOTP0_OTP_SHADOW336                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,336)
  #define OCOTP0_OTP_SHADOW336_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,336)
  #define OCOTP0_OTP_SHADOW337                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,337)
  #define OCOTP0_OTP_SHADOW337_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,337)
  #define OCOTP0_OTP_SHADOW338                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,338)
  #define OCOTP0_OTP_SHADOW338_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,338)
  #define OCOTP0_OTP_SHADOW339                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,339)
  #define OCOTP0_OTP_SHADOW339_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,339)
  #define OCOTP0_OTP_SHADOW340                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,340)
  #define OCOTP0_OTP_SHADOW340_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,340)
  #define OCOTP0_OTP_SHADOW341                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,341)
  #define OCOTP0_OTP_SHADOW341_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,341)
  #define OCOTP0_OTP_SHADOW342                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,342)
  #define OCOTP0_OTP_SHADOW342_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,342)
  #define OCOTP0_OTP_SHADOW343                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,343)
  #define OCOTP0_OTP_SHADOW343_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,343)
  #define OCOTP0_OTP_SHADOW344                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,344)
  #define OCOTP0_OTP_SHADOW344_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,344)
  #define OCOTP0_OTP_SHADOW345                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,345)
  #define OCOTP0_OTP_SHADOW345_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,345)
  #define OCOTP0_OTP_SHADOW346                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,346)
  #define OCOTP0_OTP_SHADOW346_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,346)
  #define OCOTP0_OTP_SHADOW347                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,347)
  #define OCOTP0_OTP_SHADOW347_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,347)
  #define OCOTP0_OTP_SHADOW348                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,348)
  #define OCOTP0_OTP_SHADOW348_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,348)
  #define OCOTP0_OTP_SHADOW349                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,349)
  #define OCOTP0_OTP_SHADOW349_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,349)
  #define OCOTP0_OTP_SHADOW350                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,350)
  #define OCOTP0_OTP_SHADOW350_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,350)
  #define OCOTP0_OTP_SHADOW351                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,351)
  #define OCOTP0_OTP_SHADOW351_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,351)
  #define OCOTP0_OTP_SHADOW352                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,352)
  #define OCOTP0_OTP_SHADOW352_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,352)
  #define OCOTP0_OTP_SHADOW353                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,353)
  #define OCOTP0_OTP_SHADOW353_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,353)
  #define OCOTP0_OTP_SHADOW354                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,354)
  #define OCOTP0_OTP_SHADOW354_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,354)
  #define OCOTP0_OTP_SHADOW355                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,355)
  #define OCOTP0_OTP_SHADOW355_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,355)
  #define OCOTP0_OTP_SHADOW356                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,356)
  #define OCOTP0_OTP_SHADOW356_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,356)
  #define OCOTP0_OTP_SHADOW357                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,357)
  #define OCOTP0_OTP_SHADOW357_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,357)
  #define OCOTP0_OTP_SHADOW358                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,358)
  #define OCOTP0_OTP_SHADOW358_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,358)
  #define OCOTP0_OTP_SHADOW359                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,359)
  #define OCOTP0_OTP_SHADOW359_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,359)
  #define OCOTP0_OTP_SHADOW360                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,360)
  #define OCOTP0_OTP_SHADOW360_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,360)
  #define OCOTP0_OTP_SHADOW361                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,361)
  #define OCOTP0_OTP_SHADOW361_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,361)
  #define OCOTP0_OTP_SHADOW362                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,362)
  #define OCOTP0_OTP_SHADOW362_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,362)
  #define OCOTP0_OTP_SHADOW363                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,363)
  #define OCOTP0_OTP_SHADOW363_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,363)
  #define OCOTP0_OTP_SHADOW364                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,364)
  #define OCOTP0_OTP_SHADOW364_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,364)
  #define OCOTP0_OTP_SHADOW365                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,365)
  #define OCOTP0_OTP_SHADOW365_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,365)
  #define OCOTP0_OTP_SHADOW366                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,366)
  #define OCOTP0_OTP_SHADOW366_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,366)
  #define OCOTP0_OTP_SHADOW367                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,367)
  #define OCOTP0_OTP_SHADOW367_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,367)
  #define OCOTP0_OTP_SHADOW368                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,368)
  #define OCOTP0_OTP_SHADOW368_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,368)
  #define OCOTP0_OTP_SHADOW369                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,369)
  #define OCOTP0_OTP_SHADOW369_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,369)
  #define OCOTP0_OTP_SHADOW370                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,370)
  #define OCOTP0_OTP_SHADOW370_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,370)
  #define OCOTP0_OTP_SHADOW371                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,371)
  #define OCOTP0_OTP_SHADOW371_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,371)
  #define OCOTP0_OTP_SHADOW372                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,372)
  #define OCOTP0_OTP_SHADOW372_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,372)
  #define OCOTP0_OTP_SHADOW373                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,373)
  #define OCOTP0_OTP_SHADOW373_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,373)
  #define OCOTP0_OTP_SHADOW374                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,374)
  #define OCOTP0_OTP_SHADOW374_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,374)
  #define OCOTP0_OTP_SHADOW375                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,375)
  #define OCOTP0_OTP_SHADOW375_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,375)
  #define OCOTP0_OTP_SHADOW376                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,376)
  #define OCOTP0_OTP_SHADOW376_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,376)
  #define OCOTP0_OTP_SHADOW377                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,377)
  #define OCOTP0_OTP_SHADOW377_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,377)
  #define OCOTP0_OTP_SHADOW378                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,378)
  #define OCOTP0_OTP_SHADOW378_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,378)
  #define OCOTP0_OTP_SHADOW379                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,379)
  #define OCOTP0_OTP_SHADOW379_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,379)
  #define OCOTP0_OTP_SHADOW380                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,380)
  #define OCOTP0_OTP_SHADOW380_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,380)
  #define OCOTP0_OTP_SHADOW381                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,381)
  #define OCOTP0_OTP_SHADOW381_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,381)
  #define OCOTP0_OTP_SHADOW382                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,382)
  #define OCOTP0_OTP_SHADOW382_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,382)
  #define OCOTP0_OTP_SHADOW383                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,383)
  #define OCOTP0_OTP_SHADOW383_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,383)
  #define OCOTP0_OTP_SHADOW384                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,384)
  #define OCOTP0_OTP_SHADOW384_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,384)
  #define OCOTP0_OTP_SHADOW385                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,385)
  #define OCOTP0_OTP_SHADOW385_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,385)
  #define OCOTP0_OTP_SHADOW386                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,386)
  #define OCOTP0_OTP_SHADOW386_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,386)
  #define OCOTP0_OTP_SHADOW387                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,387)
  #define OCOTP0_OTP_SHADOW387_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,387)
  #define OCOTP0_OTP_SHADOW388                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,388)
  #define OCOTP0_OTP_SHADOW388_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,388)
  #define OCOTP0_OTP_SHADOW389                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,389)
  #define OCOTP0_OTP_SHADOW389_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,389)
  #define OCOTP0_OTP_SHADOW390                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,390)
  #define OCOTP0_OTP_SHADOW390_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,390)
  #define OCOTP0_OTP_SHADOW391                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,391)
  #define OCOTP0_OTP_SHADOW391_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,391)
  #define OCOTP0_OTP_SHADOW392                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,392)
  #define OCOTP0_OTP_SHADOW392_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,392)
  #define OCOTP0_OTP_SHADOW393                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,393)
  #define OCOTP0_OTP_SHADOW393_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,393)
  #define OCOTP0_OTP_SHADOW394                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,394)
  #define OCOTP0_OTP_SHADOW394_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,394)
  #define OCOTP0_OTP_SHADOW395                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,395)
  #define OCOTP0_OTP_SHADOW395_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,395)
  #define OCOTP0_OTP_SHADOW396                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,396)
  #define OCOTP0_OTP_SHADOW396_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,396)
  #define OCOTP0_OTP_SHADOW397                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,397)
  #define OCOTP0_OTP_SHADOW397_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,397)
  #define OCOTP0_OTP_SHADOW398                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,398)
  #define OCOTP0_OTP_SHADOW398_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,398)
  #define OCOTP0_OTP_SHADOW399                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,399)
  #define OCOTP0_OTP_SHADOW399_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,399)
  #define OCOTP0_OTP_SHADOW400                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,400)
  #define OCOTP0_OTP_SHADOW400_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,400)
  #define OCOTP0_OTP_SHADOW401                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,401)
  #define OCOTP0_OTP_SHADOW401_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,401)
  #define OCOTP0_OTP_SHADOW402                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,402)
  #define OCOTP0_OTP_SHADOW402_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,402)
  #define OCOTP0_OTP_SHADOW403                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,403)
  #define OCOTP0_OTP_SHADOW403_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,403)
  #define OCOTP0_OTP_SHADOW404                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,404)
  #define OCOTP0_OTP_SHADOW404_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,404)
  #define OCOTP0_OTP_SHADOW405                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,405)
  #define OCOTP0_OTP_SHADOW405_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,405)
  #define OCOTP0_OTP_SHADOW406                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,406)
  #define OCOTP0_OTP_SHADOW406_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,406)
  #define OCOTP0_OTP_SHADOW407                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,407)
  #define OCOTP0_OTP_SHADOW407_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,407)
  #define OCOTP0_OTP_SHADOW408                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,408)
  #define OCOTP0_OTP_SHADOW408_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,408)
  #define OCOTP0_OTP_SHADOW409                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,409)
  #define OCOTP0_OTP_SHADOW409_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,409)
  #define OCOTP0_OTP_SHADOW410                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,410)
  #define OCOTP0_OTP_SHADOW410_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,410)
  #define OCOTP0_OTP_SHADOW411                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,411)
  #define OCOTP0_OTP_SHADOW411_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,411)
  #define OCOTP0_OTP_SHADOW412                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,412)
  #define OCOTP0_OTP_SHADOW412_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,412)
  #define OCOTP0_OTP_SHADOW413                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,413)
  #define OCOTP0_OTP_SHADOW413_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,413)
  #define OCOTP0_OTP_SHADOW414                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,414)
  #define OCOTP0_OTP_SHADOW414_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,414)
  #define OCOTP0_OTP_SHADOW415                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,415)
  #define OCOTP0_OTP_SHADOW415_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,415)
  #define OCOTP0_OTP_SHADOW416                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,416)
  #define OCOTP0_OTP_SHADOW416_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,416)
  #define OCOTP0_OTP_SHADOW417                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,417)
  #define OCOTP0_OTP_SHADOW417_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,417)
  #define OCOTP0_OTP_SHADOW418                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,418)
  #define OCOTP0_OTP_SHADOW418_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,418)
  #define OCOTP0_OTP_SHADOW419                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,419)
  #define OCOTP0_OTP_SHADOW419_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,419)
  #define OCOTP0_OTP_SHADOW420                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,420)
  #define OCOTP0_OTP_SHADOW420_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,420)
  #define OCOTP0_OTP_SHADOW421                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,421)
  #define OCOTP0_OTP_SHADOW421_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,421)
  #define OCOTP0_OTP_SHADOW422                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,422)
  #define OCOTP0_OTP_SHADOW422_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,422)
  #define OCOTP0_OTP_SHADOW423                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,423)
  #define OCOTP0_OTP_SHADOW423_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,423)
  #define OCOTP0_OTP_SHADOW424                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,424)
  #define OCOTP0_OTP_SHADOW424_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,424)
  #define OCOTP0_OTP_SHADOW425                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,425)
  #define OCOTP0_OTP_SHADOW425_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,425)
  #define OCOTP0_OTP_SHADOW426                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,426)
  #define OCOTP0_OTP_SHADOW426_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,426)
  #define OCOTP0_OTP_SHADOW427                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,427)
  #define OCOTP0_OTP_SHADOW427_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,427)
  #define OCOTP0_OTP_SHADOW428                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,428)
  #define OCOTP0_OTP_SHADOW428_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,428)
  #define OCOTP0_OTP_SHADOW429                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,429)
  #define OCOTP0_OTP_SHADOW429_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,429)
  #define OCOTP0_OTP_SHADOW430                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,430)
  #define OCOTP0_OTP_SHADOW430_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,430)
  #define OCOTP0_OTP_SHADOW431                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,431)
  #define OCOTP0_OTP_SHADOW431_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,431)
  #define OCOTP0_OTP_SHADOW432                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,432)
  #define OCOTP0_OTP_SHADOW432_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,432)
  #define OCOTP0_OTP_SHADOW433                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,433)
  #define OCOTP0_OTP_SHADOW433_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,433)
  #define OCOTP0_OTP_SHADOW434                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,434)
  #define OCOTP0_OTP_SHADOW434_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,434)
  #define OCOTP0_OTP_SHADOW435                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,435)
  #define OCOTP0_OTP_SHADOW435_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,435)
  #define OCOTP0_OTP_SHADOW436                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,436)
  #define OCOTP0_OTP_SHADOW436_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,436)
  #define OCOTP0_OTP_SHADOW437                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,437)
  #define OCOTP0_OTP_SHADOW437_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,437)
  #define OCOTP0_OTP_SHADOW438                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,438)
  #define OCOTP0_OTP_SHADOW438_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,438)
  #define OCOTP0_OTP_SHADOW439                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,439)
  #define OCOTP0_OTP_SHADOW439_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,439)
  #define OCOTP0_OTP_SHADOW440                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,440)
  #define OCOTP0_OTP_SHADOW440_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,440)
  #define OCOTP0_OTP_SHADOW441                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,441)
  #define OCOTP0_OTP_SHADOW441_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,441)
  #define OCOTP0_OTP_SHADOW442                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,442)
  #define OCOTP0_OTP_SHADOW442_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,442)
  #define OCOTP0_OTP_SHADOW443                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,443)
  #define OCOTP0_OTP_SHADOW443_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,443)
  #define OCOTP0_OTP_SHADOW444                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,444)
  #define OCOTP0_OTP_SHADOW444_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,444)
  #define OCOTP0_OTP_SHADOW445                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,445)
  #define OCOTP0_OTP_SHADOW445_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,445)
  #define OCOTP0_OTP_SHADOW446                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,446)
  #define OCOTP0_OTP_SHADOW446_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,446)
  #define OCOTP0_OTP_SHADOW447                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,447)
  #define OCOTP0_OTP_SHADOW447_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,447)
  #define OCOTP0_OTP_SHADOW448                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,448)
  #define OCOTP0_OTP_SHADOW448_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,448)
  #define OCOTP0_OTP_SHADOW449                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,449)
  #define OCOTP0_OTP_SHADOW449_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,449)
  #define OCOTP0_OTP_SHADOW450                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,450)
  #define OCOTP0_OTP_SHADOW450_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,450)
  #define OCOTP0_OTP_SHADOW451                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,451)
  #define OCOTP0_OTP_SHADOW451_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,451)
  #define OCOTP0_OTP_SHADOW452                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,452)
  #define OCOTP0_OTP_SHADOW452_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,452)
  #define OCOTP0_OTP_SHADOW453                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,453)
  #define OCOTP0_OTP_SHADOW453_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,453)
  #define OCOTP0_OTP_SHADOW454                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,454)
  #define OCOTP0_OTP_SHADOW454_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,454)
  #define OCOTP0_OTP_SHADOW455                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,455)
  #define OCOTP0_OTP_SHADOW455_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,455)
  #define OCOTP0_OTP_SHADOW456                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,456)
  #define OCOTP0_OTP_SHADOW456_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,456)
  #define OCOTP0_OTP_SHADOW457                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,457)
  #define OCOTP0_OTP_SHADOW457_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,457)
  #define OCOTP0_OTP_SHADOW458                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,458)
  #define OCOTP0_OTP_SHADOW458_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,458)
  #define OCOTP0_OTP_SHADOW459                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,459)
  #define OCOTP0_OTP_SHADOW459_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,459)
  #define OCOTP0_OTP_SHADOW460                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,460)
  #define OCOTP0_OTP_SHADOW460_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,460)
  #define OCOTP0_OTP_SHADOW461                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,461)
  #define OCOTP0_OTP_SHADOW461_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,461)
  #define OCOTP0_OTP_SHADOW462                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,462)
  #define OCOTP0_OTP_SHADOW462_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,462)
  #define OCOTP0_OTP_SHADOW463                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,463)
  #define OCOTP0_OTP_SHADOW463_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,463)
  #define OCOTP0_OTP_SHADOW464                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,464)
  #define OCOTP0_OTP_SHADOW464_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,464)
  #define OCOTP0_OTP_SHADOW465                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,465)
  #define OCOTP0_OTP_SHADOW465_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,465)
  #define OCOTP0_OTP_SHADOW466                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,466)
  #define OCOTP0_OTP_SHADOW466_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,466)
  #define OCOTP0_OTP_SHADOW467                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,467)
  #define OCOTP0_OTP_SHADOW467_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,467)
  #define OCOTP0_OTP_SHADOW468                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,468)
  #define OCOTP0_OTP_SHADOW468_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,468)
  #define OCOTP0_OTP_SHADOW469                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,469)
  #define OCOTP0_OTP_SHADOW469_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,469)
  #define OCOTP0_OTP_SHADOW470                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,470)
  #define OCOTP0_OTP_SHADOW470_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,470)
  #define OCOTP0_OTP_SHADOW471                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,471)
  #define OCOTP0_OTP_SHADOW471_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,471)
  #define OCOTP0_OTP_SHADOW472                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,472)
  #define OCOTP0_OTP_SHADOW472_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,472)
  #define OCOTP0_OTP_SHADOW473                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,473)
  #define OCOTP0_OTP_SHADOW473_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,473)
  #define OCOTP0_OTP_SHADOW474                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,474)
  #define OCOTP0_OTP_SHADOW474_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,474)
  #define OCOTP0_OTP_SHADOW475                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,475)
  #define OCOTP0_OTP_SHADOW475_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,475)
  #define OCOTP0_OTP_SHADOW476                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,476)
  #define OCOTP0_OTP_SHADOW476_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,476)
  #define OCOTP0_OTP_SHADOW477                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,477)
  #define OCOTP0_OTP_SHADOW477_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,477)
  #define OCOTP0_OTP_SHADOW478                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,478)
  #define OCOTP0_OTP_SHADOW478_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,478)
  #define OCOTP0_OTP_SHADOW479                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,479)
  #define OCOTP0_OTP_SHADOW479_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,479)
  #define OCOTP0_OTP_SHADOW480                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,480)
  #define OCOTP0_OTP_SHADOW480_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,480)
  #define OCOTP0_OTP_SHADOW481                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,481)
  #define OCOTP0_OTP_SHADOW481_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,481)
  #define OCOTP0_OTP_SHADOW482                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,482)
  #define OCOTP0_OTP_SHADOW482_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,482)
  #define OCOTP0_OTP_SHADOW483                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,483)
  #define OCOTP0_OTP_SHADOW483_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,483)
  #define OCOTP0_OTP_SHADOW484                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,484)
  #define OCOTP0_OTP_SHADOW484_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,484)
  #define OCOTP0_OTP_SHADOW485                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,485)
  #define OCOTP0_OTP_SHADOW485_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,485)
  #define OCOTP0_OTP_SHADOW486                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,486)
  #define OCOTP0_OTP_SHADOW486_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,486)
  #define OCOTP0_OTP_SHADOW487                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,487)
  #define OCOTP0_OTP_SHADOW487_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,487)
  #define OCOTP0_OTP_SHADOW488                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,488)
  #define OCOTP0_OTP_SHADOW488_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,488)
  #define OCOTP0_OTP_SHADOW489                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,489)
  #define OCOTP0_OTP_SHADOW489_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,489)
  #define OCOTP0_OTP_SHADOW490                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,490)
  #define OCOTP0_OTP_SHADOW490_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,490)
  #define OCOTP0_OTP_SHADOW491                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,491)
  #define OCOTP0_OTP_SHADOW491_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,491)
  #define OCOTP0_OTP_SHADOW492                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,492)
  #define OCOTP0_OTP_SHADOW492_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,492)
  #define OCOTP0_OTP_SHADOW493                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,493)
  #define OCOTP0_OTP_SHADOW493_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,493)
  #define OCOTP0_OTP_SHADOW494                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,494)
  #define OCOTP0_OTP_SHADOW494_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,494)
  #define OCOTP0_OTP_SHADOW495                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,495)
  #define OCOTP0_OTP_SHADOW495_NS                  OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,495)
  #define OCOTP0_OTP_CTRL                          OCOTP_OTP_CTRL_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_CTRL_NS                       OCOTP_OTP_CTRL_REG(OCOTP0_BASE_PTR_NS)
  #define OCOTP0_OTP_PDN                           OCOTP_OTP_PDN_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_PDN_NS                        OCOTP_OTP_PDN_REG(OCOTP0_BASE_PTR_NS)
  #define OCOTP0_OTP_WRITE_DATA                    OCOTP_OTP_WRITE_DATA_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_WRITE_DATA_NS                 OCOTP_OTP_WRITE_DATA_REG(OCOTP0_BASE_PTR_NS)
  #define OCOTP0_OTP_READ_CTRL                     OCOTP_OTP_READ_CTRL_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_READ_CTRL_NS                  OCOTP_OTP_READ_CTRL_REG(OCOTP0_BASE_PTR_NS)
  #define OCOTP0_OTP_READ_DATA                     OCOTP_OTP_READ_DATA_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_READ_DATA_NS                  OCOTP_OTP_READ_DATA_REG(OCOTP0_BASE_PTR_NS)
  #define OCOTP0_OTP_CLK_DIV                       OCOTP_OTP_CLK_DIV_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_CLK_DIV_NS                    OCOTP_OTP_CLK_DIV_REG(OCOTP0_BASE_PTR_NS)
  #define OCOTP0_OTP_CRC_ADDR                      OCOTP_OTP_CRC_ADDR_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_CRC_ADDR_NS                   OCOTP_OTP_CRC_ADDR_REG(OCOTP0_BASE_PTR_NS)
  #define OCOTP0_OTP_CRC_VALUE                     OCOTP_OTP_CRC_VALUE_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_CRC_VALUE_NS                  OCOTP_OTP_CRC_VALUE_REG(OCOTP0_BASE_PTR_NS)
  #define OCOTP0_OTP_STATUS                        OCOTP_OTP_STATUS_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_STATUS_NS                     OCOTP_OTP_STATUS_REG(OCOTP0_BASE_PTR_NS)
  #define OCOTP0_OTP_VERSION                       OCOTP_OTP_VERSION_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_VERSION_NS                    OCOTP_OTP_VERSION_REG(OCOTP0_BASE_PTR_NS)
#else
  /* OCOTP0 */
  #define OCOTP0_OTP_SHADOW0                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,0)
  #define OCOTP0_OTP_SHADOW1                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,1)
  #define OCOTP0_OTP_SHADOW2                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,2)
  #define OCOTP0_OTP_SHADOW3                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,3)
  #define OCOTP0_OTP_SHADOW4                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,4)
  #define OCOTP0_OTP_SHADOW5                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,5)
  #define OCOTP0_OTP_SHADOW6                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,6)
  #define OCOTP0_OTP_SHADOW7                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,7)
  #define OCOTP0_OTP_SHADOW8                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,8)
  #define OCOTP0_OTP_SHADOW9                       OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,9)
  #define OCOTP0_OTP_SHADOW10                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,10)
  #define OCOTP0_OTP_SHADOW11                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,11)
  #define OCOTP0_OTP_SHADOW12                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,12)
  #define OCOTP0_OTP_SHADOW13                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,13)
  #define OCOTP0_OTP_SHADOW14                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,14)
  #define OCOTP0_OTP_SHADOW15                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,15)
  #define OCOTP0_OTP_SHADOW16                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,16)
  #define OCOTP0_OTP_SHADOW17                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,17)
  #define OCOTP0_OTP_SHADOW18                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,18)
  #define OCOTP0_OTP_SHADOW19                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,19)
  #define OCOTP0_OTP_SHADOW20                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,20)
  #define OCOTP0_OTP_SHADOW21                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,21)
  #define OCOTP0_OTP_SHADOW22                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,22)
  #define OCOTP0_OTP_SHADOW23                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,23)
  #define OCOTP0_OTP_SHADOW24                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,24)
  #define OCOTP0_OTP_SHADOW25                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,25)
  #define OCOTP0_OTP_SHADOW26                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,26)
  #define OCOTP0_OTP_SHADOW27                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,27)
  #define OCOTP0_OTP_SHADOW28                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,28)
  #define OCOTP0_OTP_SHADOW29                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,29)
  #define OCOTP0_OTP_SHADOW30                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,30)
  #define OCOTP0_OTP_SHADOW31                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,31)
  #define OCOTP0_OTP_SHADOW32                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,32)
  #define OCOTP0_OTP_SHADOW33                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,33)
  #define OCOTP0_OTP_SHADOW34                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,34)
  #define OCOTP0_OTP_SHADOW35                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,35)
  #define OCOTP0_OTP_SHADOW36                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,36)
  #define OCOTP0_OTP_SHADOW37                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,37)
  #define OCOTP0_OTP_SHADOW38                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,38)
  #define OCOTP0_OTP_SHADOW39                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,39)
  #define OCOTP0_OTP_SHADOW40                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,40)
  #define OCOTP0_OTP_SHADOW41                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,41)
  #define OCOTP0_OTP_SHADOW42                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,42)
  #define OCOTP0_OTP_SHADOW43                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,43)
  #define OCOTP0_OTP_SHADOW44                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,44)
  #define OCOTP0_OTP_SHADOW45                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,45)
  #define OCOTP0_OTP_SHADOW46                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,46)
  #define OCOTP0_OTP_SHADOW47                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,47)
  #define OCOTP0_OTP_SHADOW48                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,48)
  #define OCOTP0_OTP_SHADOW49                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,49)
  #define OCOTP0_OTP_SHADOW50                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,50)
  #define OCOTP0_OTP_SHADOW51                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,51)
  #define OCOTP0_OTP_SHADOW52                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,52)
  #define OCOTP0_OTP_SHADOW53                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,53)
  #define OCOTP0_OTP_SHADOW54                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,54)
  #define OCOTP0_OTP_SHADOW55                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,55)
  #define OCOTP0_OTP_SHADOW56                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,56)
  #define OCOTP0_OTP_SHADOW57                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,57)
  #define OCOTP0_OTP_SHADOW58                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,58)
  #define OCOTP0_OTP_SHADOW59                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,59)
  #define OCOTP0_OTP_SHADOW60                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,60)
  #define OCOTP0_OTP_SHADOW61                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,61)
  #define OCOTP0_OTP_SHADOW62                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,62)
  #define OCOTP0_OTP_SHADOW63                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,63)
  #define OCOTP0_OTP_SHADOW64                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,64)
  #define OCOTP0_OTP_SHADOW65                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,65)
  #define OCOTP0_OTP_SHADOW66                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,66)
  #define OCOTP0_OTP_SHADOW67                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,67)
  #define OCOTP0_OTP_SHADOW68                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,68)
  #define OCOTP0_OTP_SHADOW69                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,69)
  #define OCOTP0_OTP_SHADOW70                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,70)
  #define OCOTP0_OTP_SHADOW71                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,71)
  #define OCOTP0_OTP_SHADOW72                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,72)
  #define OCOTP0_OTP_SHADOW73                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,73)
  #define OCOTP0_OTP_SHADOW74                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,74)
  #define OCOTP0_OTP_SHADOW75                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,75)
  #define OCOTP0_OTP_SHADOW76                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,76)
  #define OCOTP0_OTP_SHADOW77                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,77)
  #define OCOTP0_OTP_SHADOW78                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,78)
  #define OCOTP0_OTP_SHADOW79                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,79)
  #define OCOTP0_OTP_SHADOW80                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,80)
  #define OCOTP0_OTP_SHADOW81                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,81)
  #define OCOTP0_OTP_SHADOW82                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,82)
  #define OCOTP0_OTP_SHADOW83                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,83)
  #define OCOTP0_OTP_SHADOW84                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,84)
  #define OCOTP0_OTP_SHADOW85                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,85)
  #define OCOTP0_OTP_SHADOW86                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,86)
  #define OCOTP0_OTP_SHADOW87                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,87)
  #define OCOTP0_OTP_SHADOW88                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,88)
  #define OCOTP0_OTP_SHADOW89                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,89)
  #define OCOTP0_OTP_SHADOW90                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,90)
  #define OCOTP0_OTP_SHADOW91                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,91)
  #define OCOTP0_OTP_SHADOW92                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,92)
  #define OCOTP0_OTP_SHADOW93                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,93)
  #define OCOTP0_OTP_SHADOW94                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,94)
  #define OCOTP0_OTP_SHADOW95                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,95)
  #define OCOTP0_OTP_SHADOW96                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,96)
  #define OCOTP0_OTP_SHADOW97                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,97)
  #define OCOTP0_OTP_SHADOW98                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,98)
  #define OCOTP0_OTP_SHADOW99                      OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,99)
  #define OCOTP0_OTP_SHADOW100                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,100)
  #define OCOTP0_OTP_SHADOW101                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,101)
  #define OCOTP0_OTP_SHADOW102                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,102)
  #define OCOTP0_OTP_SHADOW103                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,103)
  #define OCOTP0_OTP_SHADOW104                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,104)
  #define OCOTP0_OTP_SHADOW105                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,105)
  #define OCOTP0_OTP_SHADOW106                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,106)
  #define OCOTP0_OTP_SHADOW107                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,107)
  #define OCOTP0_OTP_SHADOW108                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,108)
  #define OCOTP0_OTP_SHADOW109                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,109)
  #define OCOTP0_OTP_SHADOW110                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,110)
  #define OCOTP0_OTP_SHADOW111                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,111)
  #define OCOTP0_OTP_SHADOW112                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,112)
  #define OCOTP0_OTP_SHADOW113                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,113)
  #define OCOTP0_OTP_SHADOW114                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,114)
  #define OCOTP0_OTP_SHADOW115                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,115)
  #define OCOTP0_OTP_SHADOW116                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,116)
  #define OCOTP0_OTP_SHADOW117                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,117)
  #define OCOTP0_OTP_SHADOW118                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,118)
  #define OCOTP0_OTP_SHADOW119                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,119)
  #define OCOTP0_OTP_SHADOW120                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,120)
  #define OCOTP0_OTP_SHADOW121                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,121)
  #define OCOTP0_OTP_SHADOW122                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,122)
  #define OCOTP0_OTP_SHADOW123                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,123)
  #define OCOTP0_OTP_SHADOW124                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,124)
  #define OCOTP0_OTP_SHADOW125                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,125)
  #define OCOTP0_OTP_SHADOW126                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,126)
  #define OCOTP0_OTP_SHADOW127                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,127)
  #define OCOTP0_OTP_SHADOW128                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,128)
  #define OCOTP0_OTP_SHADOW129                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,129)
  #define OCOTP0_OTP_SHADOW130                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,130)
  #define OCOTP0_OTP_SHADOW131                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,131)
  #define OCOTP0_OTP_SHADOW132                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,132)
  #define OCOTP0_OTP_SHADOW133                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,133)
  #define OCOTP0_OTP_SHADOW134                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,134)
  #define OCOTP0_OTP_SHADOW135                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,135)
  #define OCOTP0_OTP_SHADOW136                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,136)
  #define OCOTP0_OTP_SHADOW137                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,137)
  #define OCOTP0_OTP_SHADOW138                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,138)
  #define OCOTP0_OTP_SHADOW139                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,139)
  #define OCOTP0_OTP_SHADOW140                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,140)
  #define OCOTP0_OTP_SHADOW141                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,141)
  #define OCOTP0_OTP_SHADOW142                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,142)
  #define OCOTP0_OTP_SHADOW143                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,143)
  #define OCOTP0_OTP_SHADOW144                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,144)
  #define OCOTP0_OTP_SHADOW145                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,145)
  #define OCOTP0_OTP_SHADOW146                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,146)
  #define OCOTP0_OTP_SHADOW147                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,147)
  #define OCOTP0_OTP_SHADOW148                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,148)
  #define OCOTP0_OTP_SHADOW149                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,149)
  #define OCOTP0_OTP_SHADOW150                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,150)
  #define OCOTP0_OTP_SHADOW151                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,151)
  #define OCOTP0_OTP_SHADOW152                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,152)
  #define OCOTP0_OTP_SHADOW153                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,153)
  #define OCOTP0_OTP_SHADOW154                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,154)
  #define OCOTP0_OTP_SHADOW155                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,155)
  #define OCOTP0_OTP_SHADOW156                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,156)
  #define OCOTP0_OTP_SHADOW157                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,157)
  #define OCOTP0_OTP_SHADOW158                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,158)
  #define OCOTP0_OTP_SHADOW159                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,159)
  #define OCOTP0_OTP_SHADOW160                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,160)
  #define OCOTP0_OTP_SHADOW161                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,161)
  #define OCOTP0_OTP_SHADOW162                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,162)
  #define OCOTP0_OTP_SHADOW163                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,163)
  #define OCOTP0_OTP_SHADOW164                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,164)
  #define OCOTP0_OTP_SHADOW165                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,165)
  #define OCOTP0_OTP_SHADOW166                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,166)
  #define OCOTP0_OTP_SHADOW167                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,167)
  #define OCOTP0_OTP_SHADOW168                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,168)
  #define OCOTP0_OTP_SHADOW169                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,169)
  #define OCOTP0_OTP_SHADOW170                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,170)
  #define OCOTP0_OTP_SHADOW171                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,171)
  #define OCOTP0_OTP_SHADOW172                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,172)
  #define OCOTP0_OTP_SHADOW173                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,173)
  #define OCOTP0_OTP_SHADOW174                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,174)
  #define OCOTP0_OTP_SHADOW175                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,175)
  #define OCOTP0_OTP_SHADOW176                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,176)
  #define OCOTP0_OTP_SHADOW177                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,177)
  #define OCOTP0_OTP_SHADOW178                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,178)
  #define OCOTP0_OTP_SHADOW179                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,179)
  #define OCOTP0_OTP_SHADOW180                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,180)
  #define OCOTP0_OTP_SHADOW181                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,181)
  #define OCOTP0_OTP_SHADOW182                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,182)
  #define OCOTP0_OTP_SHADOW183                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,183)
  #define OCOTP0_OTP_SHADOW184                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,184)
  #define OCOTP0_OTP_SHADOW185                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,185)
  #define OCOTP0_OTP_SHADOW186                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,186)
  #define OCOTP0_OTP_SHADOW187                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,187)
  #define OCOTP0_OTP_SHADOW188                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,188)
  #define OCOTP0_OTP_SHADOW189                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,189)
  #define OCOTP0_OTP_SHADOW190                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,190)
  #define OCOTP0_OTP_SHADOW191                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,191)
  #define OCOTP0_OTP_SHADOW192                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,192)
  #define OCOTP0_OTP_SHADOW193                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,193)
  #define OCOTP0_OTP_SHADOW194                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,194)
  #define OCOTP0_OTP_SHADOW195                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,195)
  #define OCOTP0_OTP_SHADOW196                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,196)
  #define OCOTP0_OTP_SHADOW197                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,197)
  #define OCOTP0_OTP_SHADOW198                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,198)
  #define OCOTP0_OTP_SHADOW199                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,199)
  #define OCOTP0_OTP_SHADOW200                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,200)
  #define OCOTP0_OTP_SHADOW201                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,201)
  #define OCOTP0_OTP_SHADOW202                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,202)
  #define OCOTP0_OTP_SHADOW203                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,203)
  #define OCOTP0_OTP_SHADOW204                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,204)
  #define OCOTP0_OTP_SHADOW205                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,205)
  #define OCOTP0_OTP_SHADOW206                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,206)
  #define OCOTP0_OTP_SHADOW207                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,207)
  #define OCOTP0_OTP_SHADOW208                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,208)
  #define OCOTP0_OTP_SHADOW209                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,209)
  #define OCOTP0_OTP_SHADOW210                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,210)
  #define OCOTP0_OTP_SHADOW211                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,211)
  #define OCOTP0_OTP_SHADOW212                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,212)
  #define OCOTP0_OTP_SHADOW213                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,213)
  #define OCOTP0_OTP_SHADOW214                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,214)
  #define OCOTP0_OTP_SHADOW215                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,215)
  #define OCOTP0_OTP_SHADOW216                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,216)
  #define OCOTP0_OTP_SHADOW217                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,217)
  #define OCOTP0_OTP_SHADOW218                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,218)
  #define OCOTP0_OTP_SHADOW219                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,219)
  #define OCOTP0_OTP_SHADOW220                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,220)
  #define OCOTP0_OTP_SHADOW221                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,221)
  #define OCOTP0_OTP_SHADOW222                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,222)
  #define OCOTP0_OTP_SHADOW223                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,223)
  #define OCOTP0_OTP_SHADOW224                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,224)
  #define OCOTP0_OTP_SHADOW225                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,225)
  #define OCOTP0_OTP_SHADOW226                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,226)
  #define OCOTP0_OTP_SHADOW227                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,227)
  #define OCOTP0_OTP_SHADOW228                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,228)
  #define OCOTP0_OTP_SHADOW229                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,229)
  #define OCOTP0_OTP_SHADOW230                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,230)
  #define OCOTP0_OTP_SHADOW231                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,231)
  #define OCOTP0_OTP_SHADOW232                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,232)
  #define OCOTP0_OTP_SHADOW233                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,233)
  #define OCOTP0_OTP_SHADOW234                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,234)
  #define OCOTP0_OTP_SHADOW235                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,235)
  #define OCOTP0_OTP_SHADOW236                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,236)
  #define OCOTP0_OTP_SHADOW237                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,237)
  #define OCOTP0_OTP_SHADOW238                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,238)
  #define OCOTP0_OTP_SHADOW239                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,239)
  #define OCOTP0_OTP_SHADOW240                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,240)
  #define OCOTP0_OTP_SHADOW241                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,241)
  #define OCOTP0_OTP_SHADOW242                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,242)
  #define OCOTP0_OTP_SHADOW243                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,243)
  #define OCOTP0_OTP_SHADOW244                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,244)
  #define OCOTP0_OTP_SHADOW245                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,245)
  #define OCOTP0_OTP_SHADOW246                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,246)
  #define OCOTP0_OTP_SHADOW247                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,247)
  #define OCOTP0_OTP_SHADOW248                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,248)
  #define OCOTP0_OTP_SHADOW249                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,249)
  #define OCOTP0_OTP_SHADOW250                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,250)
  #define OCOTP0_OTP_SHADOW251                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,251)
  #define OCOTP0_OTP_SHADOW252                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,252)
  #define OCOTP0_OTP_SHADOW253                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,253)
  #define OCOTP0_OTP_SHADOW254                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,254)
  #define OCOTP0_OTP_SHADOW255                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,255)
  #define OCOTP0_OTP_SHADOW256                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,256)
  #define OCOTP0_OTP_SHADOW257                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,257)
  #define OCOTP0_OTP_SHADOW258                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,258)
  #define OCOTP0_OTP_SHADOW259                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,259)
  #define OCOTP0_OTP_SHADOW260                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,260)
  #define OCOTP0_OTP_SHADOW261                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,261)
  #define OCOTP0_OTP_SHADOW262                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,262)
  #define OCOTP0_OTP_SHADOW263                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,263)
  #define OCOTP0_OTP_SHADOW264                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,264)
  #define OCOTP0_OTP_SHADOW265                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,265)
  #define OCOTP0_OTP_SHADOW266                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,266)
  #define OCOTP0_OTP_SHADOW267                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,267)
  #define OCOTP0_OTP_SHADOW268                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,268)
  #define OCOTP0_OTP_SHADOW269                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,269)
  #define OCOTP0_OTP_SHADOW270                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,270)
  #define OCOTP0_OTP_SHADOW271                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,271)
  #define OCOTP0_OTP_SHADOW272                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,272)
  #define OCOTP0_OTP_SHADOW273                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,273)
  #define OCOTP0_OTP_SHADOW274                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,274)
  #define OCOTP0_OTP_SHADOW275                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,275)
  #define OCOTP0_OTP_SHADOW276                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,276)
  #define OCOTP0_OTP_SHADOW277                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,277)
  #define OCOTP0_OTP_SHADOW278                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,278)
  #define OCOTP0_OTP_SHADOW279                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,279)
  #define OCOTP0_OTP_SHADOW280                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,280)
  #define OCOTP0_OTP_SHADOW281                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,281)
  #define OCOTP0_OTP_SHADOW282                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,282)
  #define OCOTP0_OTP_SHADOW283                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,283)
  #define OCOTP0_OTP_SHADOW284                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,284)
  #define OCOTP0_OTP_SHADOW285                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,285)
  #define OCOTP0_OTP_SHADOW286                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,286)
  #define OCOTP0_OTP_SHADOW287                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,287)
  #define OCOTP0_OTP_SHADOW288                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,288)
  #define OCOTP0_OTP_SHADOW289                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,289)
  #define OCOTP0_OTP_SHADOW290                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,290)
  #define OCOTP0_OTP_SHADOW291                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,291)
  #define OCOTP0_OTP_SHADOW292                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,292)
  #define OCOTP0_OTP_SHADOW293                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,293)
  #define OCOTP0_OTP_SHADOW294                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,294)
  #define OCOTP0_OTP_SHADOW295                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,295)
  #define OCOTP0_OTP_SHADOW296                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,296)
  #define OCOTP0_OTP_SHADOW297                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,297)
  #define OCOTP0_OTP_SHADOW298                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,298)
  #define OCOTP0_OTP_SHADOW299                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,299)
  #define OCOTP0_OTP_SHADOW300                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,300)
  #define OCOTP0_OTP_SHADOW301                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,301)
  #define OCOTP0_OTP_SHADOW302                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,302)
  #define OCOTP0_OTP_SHADOW303                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,303)
  #define OCOTP0_OTP_SHADOW304                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,304)
  #define OCOTP0_OTP_SHADOW305                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,305)
  #define OCOTP0_OTP_SHADOW306                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,306)
  #define OCOTP0_OTP_SHADOW307                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,307)
  #define OCOTP0_OTP_SHADOW308                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,308)
  #define OCOTP0_OTP_SHADOW309                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,309)
  #define OCOTP0_OTP_SHADOW310                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,310)
  #define OCOTP0_OTP_SHADOW311                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,311)
  #define OCOTP0_OTP_SHADOW312                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,312)
  #define OCOTP0_OTP_SHADOW313                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,313)
  #define OCOTP0_OTP_SHADOW314                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,314)
  #define OCOTP0_OTP_SHADOW315                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,315)
  #define OCOTP0_OTP_SHADOW316                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,316)
  #define OCOTP0_OTP_SHADOW317                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,317)
  #define OCOTP0_OTP_SHADOW318                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,318)
  #define OCOTP0_OTP_SHADOW319                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,319)
  #define OCOTP0_OTP_SHADOW320                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,320)
  #define OCOTP0_OTP_SHADOW321                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,321)
  #define OCOTP0_OTP_SHADOW322                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,322)
  #define OCOTP0_OTP_SHADOW323                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,323)
  #define OCOTP0_OTP_SHADOW324                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,324)
  #define OCOTP0_OTP_SHADOW325                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,325)
  #define OCOTP0_OTP_SHADOW326                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,326)
  #define OCOTP0_OTP_SHADOW327                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,327)
  #define OCOTP0_OTP_SHADOW328                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,328)
  #define OCOTP0_OTP_SHADOW329                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,329)
  #define OCOTP0_OTP_SHADOW330                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,330)
  #define OCOTP0_OTP_SHADOW331                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,331)
  #define OCOTP0_OTP_SHADOW332                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,332)
  #define OCOTP0_OTP_SHADOW333                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,333)
  #define OCOTP0_OTP_SHADOW334                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,334)
  #define OCOTP0_OTP_SHADOW335                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,335)
  #define OCOTP0_OTP_SHADOW336                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,336)
  #define OCOTP0_OTP_SHADOW337                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,337)
  #define OCOTP0_OTP_SHADOW338                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,338)
  #define OCOTP0_OTP_SHADOW339                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,339)
  #define OCOTP0_OTP_SHADOW340                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,340)
  #define OCOTP0_OTP_SHADOW341                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,341)
  #define OCOTP0_OTP_SHADOW342                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,342)
  #define OCOTP0_OTP_SHADOW343                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,343)
  #define OCOTP0_OTP_SHADOW344                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,344)
  #define OCOTP0_OTP_SHADOW345                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,345)
  #define OCOTP0_OTP_SHADOW346                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,346)
  #define OCOTP0_OTP_SHADOW347                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,347)
  #define OCOTP0_OTP_SHADOW348                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,348)
  #define OCOTP0_OTP_SHADOW349                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,349)
  #define OCOTP0_OTP_SHADOW350                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,350)
  #define OCOTP0_OTP_SHADOW351                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,351)
  #define OCOTP0_OTP_SHADOW352                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,352)
  #define OCOTP0_OTP_SHADOW353                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,353)
  #define OCOTP0_OTP_SHADOW354                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,354)
  #define OCOTP0_OTP_SHADOW355                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,355)
  #define OCOTP0_OTP_SHADOW356                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,356)
  #define OCOTP0_OTP_SHADOW357                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,357)
  #define OCOTP0_OTP_SHADOW358                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,358)
  #define OCOTP0_OTP_SHADOW359                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,359)
  #define OCOTP0_OTP_SHADOW360                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,360)
  #define OCOTP0_OTP_SHADOW361                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,361)
  #define OCOTP0_OTP_SHADOW362                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,362)
  #define OCOTP0_OTP_SHADOW363                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,363)
  #define OCOTP0_OTP_SHADOW364                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,364)
  #define OCOTP0_OTP_SHADOW365                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,365)
  #define OCOTP0_OTP_SHADOW366                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,366)
  #define OCOTP0_OTP_SHADOW367                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,367)
  #define OCOTP0_OTP_SHADOW368                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,368)
  #define OCOTP0_OTP_SHADOW369                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,369)
  #define OCOTP0_OTP_SHADOW370                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,370)
  #define OCOTP0_OTP_SHADOW371                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,371)
  #define OCOTP0_OTP_SHADOW372                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,372)
  #define OCOTP0_OTP_SHADOW373                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,373)
  #define OCOTP0_OTP_SHADOW374                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,374)
  #define OCOTP0_OTP_SHADOW375                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,375)
  #define OCOTP0_OTP_SHADOW376                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,376)
  #define OCOTP0_OTP_SHADOW377                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,377)
  #define OCOTP0_OTP_SHADOW378                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,378)
  #define OCOTP0_OTP_SHADOW379                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,379)
  #define OCOTP0_OTP_SHADOW380                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,380)
  #define OCOTP0_OTP_SHADOW381                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,381)
  #define OCOTP0_OTP_SHADOW382                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,382)
  #define OCOTP0_OTP_SHADOW383                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,383)
  #define OCOTP0_OTP_SHADOW384                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,384)
  #define OCOTP0_OTP_SHADOW385                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,385)
  #define OCOTP0_OTP_SHADOW386                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,386)
  #define OCOTP0_OTP_SHADOW387                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,387)
  #define OCOTP0_OTP_SHADOW388                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,388)
  #define OCOTP0_OTP_SHADOW389                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,389)
  #define OCOTP0_OTP_SHADOW390                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,390)
  #define OCOTP0_OTP_SHADOW391                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,391)
  #define OCOTP0_OTP_SHADOW392                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,392)
  #define OCOTP0_OTP_SHADOW393                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,393)
  #define OCOTP0_OTP_SHADOW394                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,394)
  #define OCOTP0_OTP_SHADOW395                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,395)
  #define OCOTP0_OTP_SHADOW396                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,396)
  #define OCOTP0_OTP_SHADOW397                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,397)
  #define OCOTP0_OTP_SHADOW398                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,398)
  #define OCOTP0_OTP_SHADOW399                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,399)
  #define OCOTP0_OTP_SHADOW400                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,400)
  #define OCOTP0_OTP_SHADOW401                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,401)
  #define OCOTP0_OTP_SHADOW402                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,402)
  #define OCOTP0_OTP_SHADOW403                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,403)
  #define OCOTP0_OTP_SHADOW404                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,404)
  #define OCOTP0_OTP_SHADOW405                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,405)
  #define OCOTP0_OTP_SHADOW406                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,406)
  #define OCOTP0_OTP_SHADOW407                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,407)
  #define OCOTP0_OTP_SHADOW408                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,408)
  #define OCOTP0_OTP_SHADOW409                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,409)
  #define OCOTP0_OTP_SHADOW410                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,410)
  #define OCOTP0_OTP_SHADOW411                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,411)
  #define OCOTP0_OTP_SHADOW412                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,412)
  #define OCOTP0_OTP_SHADOW413                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,413)
  #define OCOTP0_OTP_SHADOW414                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,414)
  #define OCOTP0_OTP_SHADOW415                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,415)
  #define OCOTP0_OTP_SHADOW416                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,416)
  #define OCOTP0_OTP_SHADOW417                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,417)
  #define OCOTP0_OTP_SHADOW418                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,418)
  #define OCOTP0_OTP_SHADOW419                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,419)
  #define OCOTP0_OTP_SHADOW420                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,420)
  #define OCOTP0_OTP_SHADOW421                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,421)
  #define OCOTP0_OTP_SHADOW422                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,422)
  #define OCOTP0_OTP_SHADOW423                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,423)
  #define OCOTP0_OTP_SHADOW424                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,424)
  #define OCOTP0_OTP_SHADOW425                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,425)
  #define OCOTP0_OTP_SHADOW426                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,426)
  #define OCOTP0_OTP_SHADOW427                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,427)
  #define OCOTP0_OTP_SHADOW428                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,428)
  #define OCOTP0_OTP_SHADOW429                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,429)
  #define OCOTP0_OTP_SHADOW430                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,430)
  #define OCOTP0_OTP_SHADOW431                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,431)
  #define OCOTP0_OTP_SHADOW432                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,432)
  #define OCOTP0_OTP_SHADOW433                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,433)
  #define OCOTP0_OTP_SHADOW434                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,434)
  #define OCOTP0_OTP_SHADOW435                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,435)
  #define OCOTP0_OTP_SHADOW436                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,436)
  #define OCOTP0_OTP_SHADOW437                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,437)
  #define OCOTP0_OTP_SHADOW438                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,438)
  #define OCOTP0_OTP_SHADOW439                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,439)
  #define OCOTP0_OTP_SHADOW440                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,440)
  #define OCOTP0_OTP_SHADOW441                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,441)
  #define OCOTP0_OTP_SHADOW442                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,442)
  #define OCOTP0_OTP_SHADOW443                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,443)
  #define OCOTP0_OTP_SHADOW444                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,444)
  #define OCOTP0_OTP_SHADOW445                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,445)
  #define OCOTP0_OTP_SHADOW446                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,446)
  #define OCOTP0_OTP_SHADOW447                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,447)
  #define OCOTP0_OTP_SHADOW448                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,448)
  #define OCOTP0_OTP_SHADOW449                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,449)
  #define OCOTP0_OTP_SHADOW450                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,450)
  #define OCOTP0_OTP_SHADOW451                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,451)
  #define OCOTP0_OTP_SHADOW452                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,452)
  #define OCOTP0_OTP_SHADOW453                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,453)
  #define OCOTP0_OTP_SHADOW454                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,454)
  #define OCOTP0_OTP_SHADOW455                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,455)
  #define OCOTP0_OTP_SHADOW456                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,456)
  #define OCOTP0_OTP_SHADOW457                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,457)
  #define OCOTP0_OTP_SHADOW458                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,458)
  #define OCOTP0_OTP_SHADOW459                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,459)
  #define OCOTP0_OTP_SHADOW460                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,460)
  #define OCOTP0_OTP_SHADOW461                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,461)
  #define OCOTP0_OTP_SHADOW462                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,462)
  #define OCOTP0_OTP_SHADOW463                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,463)
  #define OCOTP0_OTP_SHADOW464                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,464)
  #define OCOTP0_OTP_SHADOW465                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,465)
  #define OCOTP0_OTP_SHADOW466                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,466)
  #define OCOTP0_OTP_SHADOW467                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,467)
  #define OCOTP0_OTP_SHADOW468                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,468)
  #define OCOTP0_OTP_SHADOW469                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,469)
  #define OCOTP0_OTP_SHADOW470                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,470)
  #define OCOTP0_OTP_SHADOW471                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,471)
  #define OCOTP0_OTP_SHADOW472                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,472)
  #define OCOTP0_OTP_SHADOW473                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,473)
  #define OCOTP0_OTP_SHADOW474                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,474)
  #define OCOTP0_OTP_SHADOW475                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,475)
  #define OCOTP0_OTP_SHADOW476                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,476)
  #define OCOTP0_OTP_SHADOW477                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,477)
  #define OCOTP0_OTP_SHADOW478                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,478)
  #define OCOTP0_OTP_SHADOW479                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,479)
  #define OCOTP0_OTP_SHADOW480                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,480)
  #define OCOTP0_OTP_SHADOW481                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,481)
  #define OCOTP0_OTP_SHADOW482                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,482)
  #define OCOTP0_OTP_SHADOW483                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,483)
  #define OCOTP0_OTP_SHADOW484                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,484)
  #define OCOTP0_OTP_SHADOW485                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,485)
  #define OCOTP0_OTP_SHADOW486                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,486)
  #define OCOTP0_OTP_SHADOW487                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,487)
  #define OCOTP0_OTP_SHADOW488                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,488)
  #define OCOTP0_OTP_SHADOW489                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,489)
  #define OCOTP0_OTP_SHADOW490                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,490)
  #define OCOTP0_OTP_SHADOW491                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,491)
  #define OCOTP0_OTP_SHADOW492                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,492)
  #define OCOTP0_OTP_SHADOW493                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,493)
  #define OCOTP0_OTP_SHADOW494                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,494)
  #define OCOTP0_OTP_SHADOW495                     OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,495)
  #define OCOTP0_OTP_CTRL                          OCOTP_OTP_CTRL_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_PDN                           OCOTP_OTP_PDN_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_WRITE_DATA                    OCOTP_OTP_WRITE_DATA_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_READ_CTRL                     OCOTP_OTP_READ_CTRL_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_READ_DATA                     OCOTP_OTP_READ_DATA_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_CLK_DIV                       OCOTP_OTP_CLK_DIV_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_CRC_ADDR                      OCOTP_OTP_CRC_ADDR_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_CRC_VALUE                     OCOTP_OTP_CRC_VALUE_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_STATUS                        OCOTP_OTP_STATUS_REG(OCOTP0_BASE_PTR)
  #define OCOTP0_OTP_VERSION                       OCOTP_OTP_VERSION_REG(OCOTP0_BASE_PTR)
#endif

/* OCOTP - Register array accessors */
#define OCOTP0_OTP_SHADOW(index)                 OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,index)
#define OCOTP0_OTP_SHADOW_NS(index)              OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR_NS,index)
#define OCOTP0_OTP_SHADOW(index)                 OCOTP_OTP_SHADOW_REG(OCOTP0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group OCOTP_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group OCOTP_Peripheral */


/* ----------------------------------------------------------------------------
   -- OSTIMER
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OSTIMER_Peripheral OSTIMER
 * @{
 */

/** OSTIMER - Peripheral register structure */
typedef struct OSTIMER_MemMap {
  uint32_t EVTIMERL;                               /**< EVTIMER Low Register, offset: 0x0 */
  uint32_t EVTIMERH;                               /**< EVTIMER High Register, offset: 0x4 */
  uint32_t CAPTURE_L;                              /**< Local Capture Low Register for CPUn, offset: 0x8 */
  uint32_t CAPTURE_H;                              /**< Local Capture High Register for CPUn, offset: 0xC */
  uint32_t MATCH_L;                                /**< Local Match Low Register for CPUn, offset: 0x10 */
  uint32_t MATCH_H;                                /**< Local Match High Register for CPUn, offset: 0x14 */
  uint8_t RESERVED_0[4];
  uint32_t OSEVENT_CTRL;                           /**< OS Event Timer Control Register for CPUn, offset: 0x1C */
} volatile *OSTIMER_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- OSTIMER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OSTIMER_Register_Accessor_Macros OSTIMER - Register accessor macros
 * @{
 */


/* OSTIMER - Register accessors */
#define OSTIMER_EVTIMERL_REG(base)               ((base)->EVTIMERL)
#define OSTIMER_EVTIMERH_REG(base)               ((base)->EVTIMERH)
#define OSTIMER_CAPTURE_L_REG(base)              ((base)->CAPTURE_L)
#define OSTIMER_CAPTURE_H_REG(base)              ((base)->CAPTURE_H)
#define OSTIMER_MATCH_L_REG(base)                ((base)->MATCH_L)
#define OSTIMER_MATCH_H_REG(base)                ((base)->MATCH_H)
#define OSTIMER_OSEVENT_CTRL_REG(base)           ((base)->OSEVENT_CTRL)

/*!
 * @}
 */ /* end of group OSTIMER_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- OSTIMER Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OSTIMER_Register_Masks OSTIMER Register Masks
 * @{
 */

/*! @name EVTIMERL - EVTIMER Low Register */
/*! @{ */
#define OSTIMER_EVTIMERL_EVTIMER_COUNT_VALUE_MASK (0xFFFFFFFFU)
#define OSTIMER_EVTIMERL_EVTIMER_COUNT_VALUE_SHIFT (0U)
/*! EVTIMER_COUNT_VALUE - EVTimer Count value
 */
#define OSTIMER_EVTIMERL_EVTIMER_COUNT_VALUE(x)  (((uint32_t)(((uint32_t)(x)) << OSTIMER_EVTIMERL_EVTIMER_COUNT_VALUE_SHIFT)) & OSTIMER_EVTIMERL_EVTIMER_COUNT_VALUE_MASK)
/*! @} */

/*! @name EVTIMERH - EVTIMER High Register */
/*! @{ */
#define OSTIMER_EVTIMERH_EVTIMER_COUNT_VALUE_MASK (0xFFFFFFFFU)
#define OSTIMER_EVTIMERH_EVTIMER_COUNT_VALUE_SHIFT (0U)
/*! EVTIMER_COUNT_VALUE - EVTimer Count value
 */
#define OSTIMER_EVTIMERH_EVTIMER_COUNT_VALUE(x)  (((uint32_t)(((uint32_t)(x)) << OSTIMER_EVTIMERH_EVTIMER_COUNT_VALUE_SHIFT)) & OSTIMER_EVTIMERH_EVTIMER_COUNT_VALUE_MASK)
/*! @} */

/*! @name CAPTURE_L - Local Capture Low Register for CPUn */
/*! @{ */
#define OSTIMER_CAPTURE_L_CAPTURE_VALUE_MASK     (0xFFFFFFFFU)
#define OSTIMER_CAPTURE_L_CAPTURE_VALUE_SHIFT    (0U)
/*! CAPTURE_VALUE - EVTimer Capture value
 */
#define OSTIMER_CAPTURE_L_CAPTURE_VALUE(x)       (((uint32_t)(((uint32_t)(x)) << OSTIMER_CAPTURE_L_CAPTURE_VALUE_SHIFT)) & OSTIMER_CAPTURE_L_CAPTURE_VALUE_MASK)
/*! @} */

/*! @name CAPTURE_H - Local Capture High Register for CPUn */
/*! @{ */
#define OSTIMER_CAPTURE_H_CAPTURE_VALUE_MASK     (0xFFFFFFFFU)
#define OSTIMER_CAPTURE_H_CAPTURE_VALUE_SHIFT    (0U)
/*! CAPTURE_VALUE - EVTimer Capture value
 */
#define OSTIMER_CAPTURE_H_CAPTURE_VALUE(x)       (((uint32_t)(((uint32_t)(x)) << OSTIMER_CAPTURE_H_CAPTURE_VALUE_SHIFT)) & OSTIMER_CAPTURE_H_CAPTURE_VALUE_MASK)
/*! @} */

/*! @name MATCH_L - Local Match Low Register for CPUn */
/*! @{ */
#define OSTIMER_MATCH_L_MATCH_VALUE_MASK         (0xFFFFFFFFU)
#define OSTIMER_MATCH_L_MATCH_VALUE_SHIFT        (0U)
/*! MATCH_VALUE - EVTimer Match value
 */
#define OSTIMER_MATCH_L_MATCH_VALUE(x)           (((uint32_t)(((uint32_t)(x)) << OSTIMER_MATCH_L_MATCH_VALUE_SHIFT)) & OSTIMER_MATCH_L_MATCH_VALUE_MASK)
/*! @} */

/*! @name MATCH_H - Local Match High Register for CPUn */
/*! @{ */
#define OSTIMER_MATCH_H_MATCH_VALUE_MASK         (0xFFFFFFFFU)
#define OSTIMER_MATCH_H_MATCH_VALUE_SHIFT        (0U)
/*! MATCH_VALUE - EVTimer Match value
 */
#define OSTIMER_MATCH_H_MATCH_VALUE(x)           (((uint32_t)(((uint32_t)(x)) << OSTIMER_MATCH_H_MATCH_VALUE_SHIFT)) & OSTIMER_MATCH_H_MATCH_VALUE_MASK)
/*! @} */

/*! @name OSEVENT_CTRL - OS Event Timer Control Register for CPUn */
/*! @{ */
#define OSTIMER_OSEVENT_CTRL_OSTIMER_INTRFLAG_MASK (0x1U)
#define OSTIMER_OSEVENT_CTRL_OSTIMER_INTRFLAG_SHIFT (0U)
#define OSTIMER_OSEVENT_CTRL_OSTIMER_INTENA_MASK (0x2U)
#define OSTIMER_OSEVENT_CTRL_OSTIMER_INTENA_SHIFT (1U)
#define OSTIMER_OSEVENT_CTRL_MATCH_WR_RDY_MASK   (0x4U)
#define OSTIMER_OSEVENT_CTRL_MATCH_WR_RDY_SHIFT  (2U)
/*! @} */


/*!
 * @}
 */ /* end of group OSTIMER_Register_Masks */


/* OSTIMER - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral OSTIMER0 base pointer */
  #define OSTIMER0_BASE_PTR                        ((OSTIMER_MemMapPtr)0x50113000u)
  /** Peripheral OSTIMER0 base pointer */
  #define OSTIMER0_BASE_PTR_NS                     ((OSTIMER_MemMapPtr)0x40113000u)
  /** Array initializer of OSTIMER peripheral base pointers */
  #define OSTIMER_BASE_PTRS                        { OSTIMER0_BASE_PTR }
  /** Array initializer of OSTIMER peripheral base pointers */
  #define OSTIMER_BASE_PTRS_NS                     { OSTIMER0_BASE_PTR_NS }
#else
  /** Peripheral OSTIMER0 base pointer */
  #define OSTIMER0_BASE_PTR                        ((OSTIMER_MemMapPtr)0x40113000u)
  /** Array initializer of OSTIMER peripheral base pointers */
  #define OSTIMER_BASE_PTRS                        { OSTIMER0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- OSTIMER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OSTIMER_Register_Accessor_Macros OSTIMER - Register accessor macros
 * @{
 */


/* OSTIMER - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* OSTIMER0 */
  #define OSTIMER__OSTIMER_CM33_EVTIMERL           OSTIMER_EVTIMERL_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_EVTIMERL_NS        OSTIMER_EVTIMERL_REG(OSTIMER0_BASE_PTR_NS)
  #define OSTIMER__OSTIMER_CM33_EVTIMERH           OSTIMER_EVTIMERH_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_EVTIMERH_NS        OSTIMER_EVTIMERH_REG(OSTIMER0_BASE_PTR_NS)
  #define OSTIMER__OSTIMER_CM33_CAPTURE_L          OSTIMER_CAPTURE_L_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_CAPTURE_L_NS       OSTIMER_CAPTURE_L_REG(OSTIMER0_BASE_PTR_NS)
  #define OSTIMER__OSTIMER_CM33_CAPTURE_H          OSTIMER_CAPTURE_H_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_CAPTURE_H_NS       OSTIMER_CAPTURE_H_REG(OSTIMER0_BASE_PTR_NS)
  #define OSTIMER__OSTIMER_CM33_MATCH_L            OSTIMER_MATCH_L_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_MATCH_L_NS         OSTIMER_MATCH_L_REG(OSTIMER0_BASE_PTR_NS)
  #define OSTIMER__OSTIMER_CM33_MATCH_H            OSTIMER_MATCH_H_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_MATCH_H_NS         OSTIMER_MATCH_H_REG(OSTIMER0_BASE_PTR_NS)
  #define OSTIMER__OSTIMER_CM33_OSEVENT_CTRL       OSTIMER_OSEVENT_CTRL_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_OSEVENT_CTRL_NS    OSTIMER_OSEVENT_CTRL_REG(OSTIMER0_BASE_PTR_NS)
#else
  /* OSTIMER0 */
  #define OSTIMER__OSTIMER_CM33_EVTIMERL           OSTIMER_EVTIMERL_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_EVTIMERH           OSTIMER_EVTIMERH_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_CAPTURE_L          OSTIMER_CAPTURE_L_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_CAPTURE_H          OSTIMER_CAPTURE_H_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_MATCH_L            OSTIMER_MATCH_L_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_MATCH_H            OSTIMER_MATCH_H_REG(OSTIMER0_BASE_PTR)
  #define OSTIMER__OSTIMER_CM33_OSEVENT_CTRL       OSTIMER_OSEVENT_CTRL_REG(OSTIMER0_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group OSTIMER_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group OSTIMER_Peripheral */


/* ----------------------------------------------------------------------------
   -- OTFAD
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OTFAD_Peripheral OTFAD
 * @{
 */

/** OTFAD - Peripheral register structure */
typedef struct OTFAD_MemMap {
  uint8_t RESERVED_0[3072];
  uint32_t CR;                                     /**< Control Register, offset: 0xC00 */
  uint32_t SR;                                     /**< Status Register, offset: 0xC04 */
  uint8_t RESERVED_1[248];
  struct {                                         /* offset: 0xD00, array step: 0x40 */
    uint32_t KEY[4];                                 /**< AES Key Word, array offset: 0xD00, array step: index*0x40, index2*0x4 */
    uint32_t CTR[2];                                 /**< AES Counter Word, array offset: 0xD10, array step: index*0x40, index2*0x4 */
    uint32_t RGD_W0;                                 /**< AES Region Descriptor Word0, array offset: 0xD18, array step: 0x40 */
    uint32_t RGD_W1;                                 /**< AES Region Descriptor Word1, array offset: 0xD1C, array step: 0x40 */
    uint8_t RESERVED_0[32];
  } CTX[4];
} volatile *OTFAD_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- OTFAD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OTFAD_Register_Accessor_Macros OTFAD - Register accessor macros
 * @{
 */


/* OTFAD - Register accessors */
#define OTFAD_CR_REG(base)                       ((base)->CR)
#define OTFAD_SR_REG(base)                       ((base)->SR)
#define OTFAD_KEY_REG(base,index,index2)         ((base)->CTX[index].KEY[index2])
#define OTFAD_CTR_REG(base,index,index2)         ((base)->CTX[index].CTR[index2])
#define OTFAD_RGD_W0_REG(base,index)             ((base)->CTX[index].RGD_W0)
#define OTFAD_RGD_W1_REG(base,index)             ((base)->CTX[index].RGD_W1)

/*!
 * @}
 */ /* end of group OTFAD_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- OTFAD Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OTFAD_Register_Masks OTFAD Register Masks
 * @{
 */

/*! @name CR - Control Register */
/*! @{ */
#define OTFAD_CR_FLDM_MASK                       (0x8U)
#define OTFAD_CR_FLDM_SHIFT                      (3U)
#define OTFAD_CR_RRAE_MASK                       (0x80U)
#define OTFAD_CR_RRAE_SHIFT                      (7U)
#define OTFAD_CR_GE_MASK                         (0x80000000U)
#define OTFAD_CR_GE_SHIFT                        (31U)
/*! @} */

/*! @name SR - Status Register */
/*! @{ */
#define OTFAD_SR_MDPCP_MASK                      (0x2U)
#define OTFAD_SR_MDPCP_SHIFT                     (1U)
#define OTFAD_SR_MODE_MASK                       (0xCU)
#define OTFAD_SR_MODE_SHIFT                      (2U)
/*! MODE - Operating Mode
 *  0b00..Operating in Normal mode (NRM)
 *  0b01..Unused (reserved)
 *  0b10..Unused (reserved)
 *  0b11..Operating in Logically Disabled Mode (LDM)
 */
#define OTFAD_SR_MODE(x)                         (((uint32_t)(((uint32_t)(x)) << OTFAD_SR_MODE_SHIFT)) & OTFAD_SR_MODE_MASK)
#define OTFAD_SR_NCTX_MASK                       (0xF0U)
#define OTFAD_SR_NCTX_SHIFT                      (4U)
/*! NCTX - Number of Contexts
 */
#define OTFAD_SR_NCTX(x)                         (((uint32_t)(((uint32_t)(x)) << OTFAD_SR_NCTX_SHIFT)) & OTFAD_SR_NCTX_MASK)
#define OTFAD_SR_HRL_MASK                        (0xF000000U)
#define OTFAD_SR_HRL_SHIFT                       (24U)
/*! HRL - Hardware Revision Level
 */
#define OTFAD_SR_HRL(x)                          (((uint32_t)(((uint32_t)(x)) << OTFAD_SR_HRL_SHIFT)) & OTFAD_SR_HRL_MASK)
#define OTFAD_SR_RRAM_MASK                       (0x10000000U)
#define OTFAD_SR_RRAM_SHIFT                      (28U)
#define OTFAD_SR_GEM_MASK                        (0x20000000U)
#define OTFAD_SR_GEM_SHIFT                       (29U)
/*! @} */

/*! @name KEY - AES Key Word */
/*! @{ */
#define OTFAD_KEY_KEY_MASK                       (0xFFFFFFFFU)
#define OTFAD_KEY_KEY_SHIFT                      (0U)
/*! KEY - AES Key
 */
#define OTFAD_KEY_KEY(x)                         (((uint32_t)(((uint32_t)(x)) << OTFAD_KEY_KEY_SHIFT)) & OTFAD_KEY_KEY_MASK)
/*! @} */

/* The count of OTFAD_KEY */
#define OTFAD_KEY_COUNT                          (4U)

/* The count of OTFAD_KEY */
#define OTFAD_KEY_COUNT2                         (4U)

/*! @name CTR - AES Counter Word */
/*! @{ */
#define OTFAD_CTR_CTR_MASK                       (0xFFFFFFFFU)
#define OTFAD_CTR_CTR_SHIFT                      (0U)
/*! CTR - AES Counter
 */
#define OTFAD_CTR_CTR(x)                         (((uint32_t)(((uint32_t)(x)) << OTFAD_CTR_CTR_SHIFT)) & OTFAD_CTR_CTR_MASK)
/*! @} */

/* The count of OTFAD_CTR */
#define OTFAD_CTR_COUNT                          (4U)

/* The count of OTFAD_CTR */
#define OTFAD_CTR_COUNT2                         (2U)

/*! @name RGD_W0 - AES Region Descriptor Word0 */
/*! @{ */
#define OTFAD_RGD_W0_SRTADDR_MASK                (0xFFFFFC00U)
#define OTFAD_RGD_W0_SRTADDR_SHIFT               (10U)
/*! SRTADDR - Start Address
 */
#define OTFAD_RGD_W0_SRTADDR(x)                  (((uint32_t)(((uint32_t)(x)) << OTFAD_RGD_W0_SRTADDR_SHIFT)) & OTFAD_RGD_W0_SRTADDR_MASK)
/*! @} */

/* The count of OTFAD_RGD_W0 */
#define OTFAD_RGD_W0_COUNT                       (4U)

/*! @name RGD_W1 - AES Region Descriptor Word1 */
/*! @{ */
#define OTFAD_RGD_W1_VLD_MASK                    (0x1U)
#define OTFAD_RGD_W1_VLD_SHIFT                   (0U)
#define OTFAD_RGD_W1_ADE_MASK                    (0x2U)
#define OTFAD_RGD_W1_ADE_SHIFT                   (1U)
#define OTFAD_RGD_W1_RO_MASK                     (0x4U)
#define OTFAD_RGD_W1_RO_SHIFT                    (2U)
#define OTFAD_RGD_W1_ENDADDR_MASK                (0xFFFFFC00U)
#define OTFAD_RGD_W1_ENDADDR_SHIFT               (10U)
/*! ENDADDR - End Address
 */
#define OTFAD_RGD_W1_ENDADDR(x)                  (((uint32_t)(((uint32_t)(x)) << OTFAD_RGD_W1_ENDADDR_SHIFT)) & OTFAD_RGD_W1_ENDADDR_MASK)
/*! @} */

/* The count of OTFAD_RGD_W1 */
#define OTFAD_RGD_W1_COUNT                       (4U)


/*!
 * @}
 */ /* end of group OTFAD_Register_Masks */


/* OTFAD - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral OTFAD0 base pointer */
  #define OTFAD0_BASE_PTR                          ((OTFAD_MemMapPtr)0x50134000u)
  /** Peripheral OTFAD0 base pointer */
  #define OTFAD0_BASE_PTR_NS                       ((OTFAD_MemMapPtr)0x40134000u)
  /** Array initializer of OTFAD peripheral base pointers */
  #define OTFAD_BASE_PTRS                          { OTFAD0_BASE_PTR }
  /** Array initializer of OTFAD peripheral base pointers */
  #define OTFAD_BASE_PTRS_NS                       { OTFAD0_BASE_PTR_NS }
#else
  /** Peripheral OTFAD0 base pointer */
  #define OTFAD0_BASE_PTR                          ((OTFAD_MemMapPtr)0x40134000u)
  /** Array initializer of OTFAD peripheral base pointers */
  #define OTFAD_BASE_PTRS                          { OTFAD0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- OTFAD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OTFAD_Register_Accessor_Macros OTFAD - Register accessor macros
 * @{
 */


/* OTFAD - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* OTFAD0 */
  #define OTFAD0_CR                                OTFAD_CR_REG(OTFAD0_BASE_PTR)
  #define OTFAD0_CR_NS                             OTFAD_CR_REG(OTFAD0_BASE_PTR_NS)
  #define OTFAD0_SR                                OTFAD_SR_REG(OTFAD0_BASE_PTR)
  #define OTFAD0_SR_NS                             OTFAD_SR_REG(OTFAD0_BASE_PTR_NS)
  #define OTFAD0_CTX0_KEY0                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,0,0)
  #define OTFAD0_CTX0_KEY0_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,0,0)
  #define OTFAD0_CTX0_KEY1                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,0,1)
  #define OTFAD0_CTX0_KEY1_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,0,1)
  #define OTFAD0_CTX0_KEY2                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,0,2)
  #define OTFAD0_CTX0_KEY2_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,0,2)
  #define OTFAD0_CTX0_KEY3                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,0,3)
  #define OTFAD0_CTX0_KEY3_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,0,3)
  #define OTFAD0_CTX0_CTR0                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,0,0)
  #define OTFAD0_CTX0_CTR0_NS                      OTFAD_CTR_REG(OTFAD0_BASE_PTR_NS,0,0)
  #define OTFAD0_CTX0_CTR1                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,0,1)
  #define OTFAD0_CTX0_CTR1_NS                      OTFAD_CTR_REG(OTFAD0_BASE_PTR_NS,0,1)
  #define OTFAD0_CTX0_RGD_W0                       OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR,0)
  #define OTFAD0_CTX0_RGD_W0_NS                    OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR_NS,0)
  #define OTFAD0_CTX0_RGD_W1                       OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR,0)
  #define OTFAD0_CTX0_RGD_W1_NS                    OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR_NS,0)
  #define OTFAD0_CTX1_KEY0                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,1,0)
  #define OTFAD0_CTX1_KEY0_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,1,0)
  #define OTFAD0_CTX1_KEY1                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,1,1)
  #define OTFAD0_CTX1_KEY1_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,1,1)
  #define OTFAD0_CTX1_KEY2                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,1,2)
  #define OTFAD0_CTX1_KEY2_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,1,2)
  #define OTFAD0_CTX1_KEY3                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,1,3)
  #define OTFAD0_CTX1_KEY3_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,1,3)
  #define OTFAD0_CTX1_CTR0                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,1,0)
  #define OTFAD0_CTX1_CTR0_NS                      OTFAD_CTR_REG(OTFAD0_BASE_PTR_NS,1,0)
  #define OTFAD0_CTX1_CTR1                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,1,1)
  #define OTFAD0_CTX1_CTR1_NS                      OTFAD_CTR_REG(OTFAD0_BASE_PTR_NS,1,1)
  #define OTFAD0_CTX1_RGD_W0                       OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR,1)
  #define OTFAD0_CTX1_RGD_W0_NS                    OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR_NS,1)
  #define OTFAD0_CTX1_RGD_W1                       OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR,1)
  #define OTFAD0_CTX1_RGD_W1_NS                    OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR_NS,1)
  #define OTFAD0_CTX2_KEY0                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,2,0)
  #define OTFAD0_CTX2_KEY0_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,2,0)
  #define OTFAD0_CTX2_KEY1                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,2,1)
  #define OTFAD0_CTX2_KEY1_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,2,1)
  #define OTFAD0_CTX2_KEY2                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,2,2)
  #define OTFAD0_CTX2_KEY2_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,2,2)
  #define OTFAD0_CTX2_KEY3                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,2,3)
  #define OTFAD0_CTX2_KEY3_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,2,3)
  #define OTFAD0_CTX2_CTR0                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,2,0)
  #define OTFAD0_CTX2_CTR0_NS                      OTFAD_CTR_REG(OTFAD0_BASE_PTR_NS,2,0)
  #define OTFAD0_CTX2_CTR1                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,2,1)
  #define OTFAD0_CTX2_CTR1_NS                      OTFAD_CTR_REG(OTFAD0_BASE_PTR_NS,2,1)
  #define OTFAD0_CTX2_RGD_W0                       OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR,2)
  #define OTFAD0_CTX2_RGD_W0_NS                    OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR_NS,2)
  #define OTFAD0_CTX2_RGD_W1                       OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR,2)
  #define OTFAD0_CTX2_RGD_W1_NS                    OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR_NS,2)
  #define OTFAD0_CTX3_KEY0                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,3,0)
  #define OTFAD0_CTX3_KEY0_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,3,0)
  #define OTFAD0_CTX3_KEY1                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,3,1)
  #define OTFAD0_CTX3_KEY1_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,3,1)
  #define OTFAD0_CTX3_KEY2                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,3,2)
  #define OTFAD0_CTX3_KEY2_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,3,2)
  #define OTFAD0_CTX3_KEY3                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,3,3)
  #define OTFAD0_CTX3_KEY3_NS                      OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,3,3)
  #define OTFAD0_CTX3_CTR0                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,3,0)
  #define OTFAD0_CTX3_CTR0_NS                      OTFAD_CTR_REG(OTFAD0_BASE_PTR_NS,3,0)
  #define OTFAD0_CTX3_CTR1                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,3,1)
  #define OTFAD0_CTX3_CTR1_NS                      OTFAD_CTR_REG(OTFAD0_BASE_PTR_NS,3,1)
  #define OTFAD0_CTX3_RGD_W0                       OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR,3)
  #define OTFAD0_CTX3_RGD_W0_NS                    OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR_NS,3)
  #define OTFAD0_CTX3_RGD_W1                       OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR,3)
  #define OTFAD0_CTX3_RGD_W1_NS                    OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR_NS,3)
#else
  /* OTFAD0 */
  #define OTFAD0_CR                                OTFAD_CR_REG(OTFAD0_BASE_PTR)
  #define OTFAD0_SR                                OTFAD_SR_REG(OTFAD0_BASE_PTR)
  #define OTFAD0_CTX0_KEY0                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,0,0)
  #define OTFAD0_CTX0_KEY1                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,0,1)
  #define OTFAD0_CTX0_KEY2                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,0,2)
  #define OTFAD0_CTX0_KEY3                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,0,3)
  #define OTFAD0_CTX0_CTR0                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,0,0)
  #define OTFAD0_CTX0_CTR1                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,0,1)
  #define OTFAD0_CTX0_RGD_W0                       OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR,0)
  #define OTFAD0_CTX0_RGD_W1                       OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR,0)
  #define OTFAD0_CTX1_KEY0                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,1,0)
  #define OTFAD0_CTX1_KEY1                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,1,1)
  #define OTFAD0_CTX1_KEY2                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,1,2)
  #define OTFAD0_CTX1_KEY3                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,1,3)
  #define OTFAD0_CTX1_CTR0                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,1,0)
  #define OTFAD0_CTX1_CTR1                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,1,1)
  #define OTFAD0_CTX1_RGD_W0                       OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR,1)
  #define OTFAD0_CTX1_RGD_W1                       OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR,1)
  #define OTFAD0_CTX2_KEY0                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,2,0)
  #define OTFAD0_CTX2_KEY1                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,2,1)
  #define OTFAD0_CTX2_KEY2                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,2,2)
  #define OTFAD0_CTX2_KEY3                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,2,3)
  #define OTFAD0_CTX2_CTR0                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,2,0)
  #define OTFAD0_CTX2_CTR1                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,2,1)
  #define OTFAD0_CTX2_RGD_W0                       OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR,2)
  #define OTFAD0_CTX2_RGD_W1                       OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR,2)
  #define OTFAD0_CTX3_KEY0                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,3,0)
  #define OTFAD0_CTX3_KEY1                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,3,1)
  #define OTFAD0_CTX3_KEY2                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,3,2)
  #define OTFAD0_CTX3_KEY3                         OTFAD_KEY_REG(OTFAD0_BASE_PTR,3,3)
  #define OTFAD0_CTX3_CTR0                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,3,0)
  #define OTFAD0_CTX3_CTR1                         OTFAD_CTR_REG(OTFAD0_BASE_PTR,3,1)
  #define OTFAD0_CTX3_RGD_W0                       OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR,3)
  #define OTFAD0_CTX3_RGD_W1                       OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR,3)
#endif

/* OTFAD - Register array accessors */
#define OTFAD0_KEY(index,index2)                 OTFAD_KEY_REG(OTFAD0_BASE_PTR,index,index2)
#define OTFAD0_KEY_NS(index,index2)              OTFAD_KEY_REG(OTFAD0_BASE_PTR_NS,index,index2)
#define OTFAD0_KEY(index,index2)                 OTFAD_KEY_REG(OTFAD0_BASE_PTR,index,index2)
#define OTFAD0_CTR(index,index2)                 OTFAD_CTR_REG(OTFAD0_BASE_PTR,index,index2)
#define OTFAD0_CTR_NS(index,index2)              OTFAD_CTR_REG(OTFAD0_BASE_PTR_NS,index,index2)
#define OTFAD0_CTR(index,index2)                 OTFAD_CTR_REG(OTFAD0_BASE_PTR,index,index2)
#define OTFAD0_RGD_W0(index)                     OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR,index)
#define OTFAD0_RGD_W0_NS(index)                  OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR_NS,index)
#define OTFAD0_RGD_W0(index)                     OTFAD_RGD_W0_REG(OTFAD0_BASE_PTR,index)
#define OTFAD0_RGD_W1(index)                     OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR,index)
#define OTFAD0_RGD_W1_NS(index)                  OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR_NS,index)
#define OTFAD0_RGD_W1(index)                     OTFAD_RGD_W1_REG(OTFAD0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group OTFAD_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group OTFAD_Peripheral */


/* ----------------------------------------------------------------------------
   -- PINT
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PINT_Peripheral PINT
 * @{
 */

/** PINT - Peripheral register structure */
typedef struct PINT_MemMap {
  uint32_t ISEL;                                   /**< Pin Interrupt Mode, offset: 0x0 */
  uint32_t IENR;                                   /**< Pin Interrupt Level or Rising Edge Interrupt Enable, offset: 0x4 */
  uint32_t SIENR;                                  /**< Pin Interrupt Level or Rising Edge Interrupt Set, offset: 0x8 */
  uint32_t CIENR;                                  /**< Pin Interrupt Level (Rising Edge Interrupt) Clear, offset: 0xC */
  uint32_t IENF;                                   /**< Pin Interrupt Active Level or Falling Edge Interrupt Enable, offset: 0x10 */
  uint32_t SIENF;                                  /**< Pin Interrupt Active Level or Falling Edge Interrupt Set, offset: 0x14 */
  uint32_t CIENF;                                  /**< Pin Interrupt Active Level or Falling Edge Interrupt Clear, offset: 0x18 */
  uint32_t RISE;                                   /**< Pin Interrupt Rising Edge, offset: 0x1C */
  uint32_t FALL;                                   /**< Pin Interrupt Falling Edge, offset: 0x20 */
  uint32_t IST;                                    /**< Pin Interrupt Status, offset: 0x24 */
  uint32_t PMCTRL;                                 /**< Pattern Match Interrupt Control, offset: 0x28 */
  uint32_t PMSRC;                                  /**< Pattern Match Interrupt Bit-Slice Source, offset: 0x2C */
  uint32_t PMCFG;                                  /**< Pattern Match Interrupt Bit Slice Configuration, offset: 0x30 */
} volatile *PINT_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- PINT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PINT_Register_Accessor_Macros PINT - Register accessor macros
 * @{
 */


/* PINT - Register accessors */
#define PINT_ISEL_REG(base)                      ((base)->ISEL)
#define PINT_IENR_REG(base)                      ((base)->IENR)
#define PINT_SIENR_REG(base)                     ((base)->SIENR)
#define PINT_CIENR_REG(base)                     ((base)->CIENR)
#define PINT_IENF_REG(base)                      ((base)->IENF)
#define PINT_SIENF_REG(base)                     ((base)->SIENF)
#define PINT_CIENF_REG(base)                     ((base)->CIENF)
#define PINT_RISE_REG(base)                      ((base)->RISE)
#define PINT_FALL_REG(base)                      ((base)->FALL)
#define PINT_IST_REG(base)                       ((base)->IST)
#define PINT_PMCTRL_REG(base)                    ((base)->PMCTRL)
#define PINT_PMSRC_REG(base)                     ((base)->PMSRC)
#define PINT_PMCFG_REG(base)                     ((base)->PMCFG)

/*!
 * @}
 */ /* end of group PINT_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- PINT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PINT_Register_Masks PINT Register Masks
 * @{
 */

/*! @name ISEL - Pin Interrupt Mode */
/*! @{ */
#define PINT_ISEL_PMODE_MASK                     (0xFFU)
#define PINT_ISEL_PMODE_SHIFT                    (0U)
/*! PMODE - Interrupt mode
 *  0b00000000..Edge-sensitive
 *  0b00000001..Level-sensitive
 */
#define PINT_ISEL_PMODE(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_ISEL_PMODE_SHIFT)) & PINT_ISEL_PMODE_MASK)
/*! @} */

/*! @name IENR - Pin Interrupt Level or Rising Edge Interrupt Enable */
/*! @{ */
#define PINT_IENR_ENRL_MASK                      (0xFFU)
#define PINT_IENR_ENRL_SHIFT                     (0U)
/*! ENRL - Enable Interrupt
 *  0b00000000..Disable rising edge or level interrupt
 *  0b00000001..Enable rising edge or level interrupt
 */
#define PINT_IENR_ENRL(x)                        (((uint32_t)(((uint32_t)(x)) << PINT_IENR_ENRL_SHIFT)) & PINT_IENR_ENRL_MASK)
/*! @} */

/*! @name SIENR - Pin Interrupt Level or Rising Edge Interrupt Set */
/*! @{ */
#define PINT_SIENR_SETENRL_MASK                  (0xFFU)
#define PINT_SIENR_SETENRL_SHIFT                 (0U)
/*! SETENRL - Set bits in the IENR
 *  0b00000000..No operation
 *  0b00000001..Enable rising edge or level interrupt
 */
#define PINT_SIENR_SETENRL(x)                    (((uint32_t)(((uint32_t)(x)) << PINT_SIENR_SETENRL_SHIFT)) & PINT_SIENR_SETENRL_MASK)
/*! @} */

/*! @name CIENR - Pin Interrupt Level (Rising Edge Interrupt) Clear */
/*! @{ */
#define PINT_CIENR_CENRL_MASK                    (0xFFU)
#define PINT_CIENR_CENRL_SHIFT                   (0U)
/*! CENRL - Clear bits in the IENR
 *  0b00000000..No operation
 *  0b00000001..Disable rising edge or level interrupt
 */
#define PINT_CIENR_CENRL(x)                      (((uint32_t)(((uint32_t)(x)) << PINT_CIENR_CENRL_SHIFT)) & PINT_CIENR_CENRL_MASK)
/*! @} */

/*! @name IENF - Pin Interrupt Active Level or Falling Edge Interrupt Enable */
/*! @{ */
#define PINT_IENF_ENAF_MASK                      (0xFFU)
#define PINT_IENF_ENAF_SHIFT                     (0U)
/*! ENAF - Enable Interrupt
 *  0b00000000..Disable falling edge interrupt or set active interrupt level LOW
 *  0b00000001..Enable falling edge interrupt enabled or set active interrupt level HIGH
 */
#define PINT_IENF_ENAF(x)                        (((uint32_t)(((uint32_t)(x)) << PINT_IENF_ENAF_SHIFT)) & PINT_IENF_ENAF_MASK)
/*! @} */

/*! @name SIENF - Pin Interrupt Active Level or Falling Edge Interrupt Set */
/*! @{ */
#define PINT_SIENF_SETENAF_MASK                  (0xFFU)
#define PINT_SIENF_SETENAF_SHIFT                 (0U)
/*! SETENAF - Set bits in the IENF
 *  0b00000000..No operation
 *  0b00000001..Select HIGH-active interrupt or enable falling edge interrupt
 */
#define PINT_SIENF_SETENAF(x)                    (((uint32_t)(((uint32_t)(x)) << PINT_SIENF_SETENAF_SHIFT)) & PINT_SIENF_SETENAF_MASK)
/*! @} */

/*! @name CIENF - Pin Interrupt Active Level or Falling Edge Interrupt Clear */
/*! @{ */
#define PINT_CIENF_CENAF_MASK                    (0xFFU)
#define PINT_CIENF_CENAF_SHIFT                   (0U)
/*! CENAF - Clear bits in the IENF
 *  0b00000000..No operation
 *  0b00000001..LOW-active interrupt selected or falling edge interrupt disabled
 */
#define PINT_CIENF_CENAF(x)                      (((uint32_t)(((uint32_t)(x)) << PINT_CIENF_CENAF_SHIFT)) & PINT_CIENF_CENAF_MASK)
/*! @} */

/*! @name RISE - Pin Interrupt Rising Edge */
/*! @{ */
#define PINT_RISE_RDET_MASK                      (0xFFU)
#define PINT_RISE_RDET_SHIFT                     (0U)
/*! RDET - Rising edge detect
 *  0b00000000..Read 0- No rising edge has been detected on this pin since Reset or the last time a one was written to this bit, Write 0- no operation
 *  0b00000001..Read 1- a rising edge has been detected since Reset or the last time a one was written to this
 *              bit, Write 1- clear rising edge detection for this pin
 */
#define PINT_RISE_RDET(x)                        (((uint32_t)(((uint32_t)(x)) << PINT_RISE_RDET_SHIFT)) & PINT_RISE_RDET_MASK)
/*! @} */

/*! @name FALL - Pin Interrupt Falling Edge */
/*! @{ */
#define PINT_FALL_FDET_MASK                      (0xFFU)
#define PINT_FALL_FDET_SHIFT                     (0U)
/*! FDET - Falling edge detect
 *  0b00000000..Read 0- No falling edge has been detected on this pin since Reset or the last time a one was written to this bit, Write 0- no operation
 *  0b00000001..Read 1- a falling edge has been detected since Reset or the last time a one was written to this
 *              bit, Write 1- clear falling edge detection for this bit
 */
#define PINT_FALL_FDET(x)                        (((uint32_t)(((uint32_t)(x)) << PINT_FALL_FDET_SHIFT)) & PINT_FALL_FDET_MASK)
/*! @} */

/*! @name IST - Pin Interrupt Status */
/*! @{ */
#define PINT_IST_PSTAT_MASK                      (0xFFU)
#define PINT_IST_PSTAT_SHIFT                     (0U)
/*! PSTAT - Pin interrupt status
 *  0b00000000..Read 0- interrupt is not being requested for this pin, Write 0- no operation.
 *  0b00000001..Read 1- interrupt is being requested for this pin, Write 1 (edge-sensitive)- clear rising- and
 *              falling-edge detection for this pin, Write 1 (level-sensitive)- switch the active level for this pin
 *              (in the IENF register).
 */
#define PINT_IST_PSTAT(x)                        (((uint32_t)(((uint32_t)(x)) << PINT_IST_PSTAT_SHIFT)) & PINT_IST_PSTAT_MASK)
/*! @} */

/*! @name PMCTRL - Pattern Match Interrupt Control */
/*! @{ */
#define PINT_PMCTRL_SEL_PMATCH_MASK              (0x1U)
#define PINT_PMCTRL_SEL_PMATCH_SHIFT             (0U)
#define PINT_PMCTRL_ENA_RXEV_MASK                (0x2U)
#define PINT_PMCTRL_ENA_RXEV_SHIFT               (1U)
#define PINT_PMCTRL_PMAT_MASK                    (0xFF000000U)
#define PINT_PMCTRL_PMAT_SHIFT                   (24U)
/*! PMAT - Pattern Matches
 *  0b00000001..The corresponding product term is matched by the current state of the appropriate inputs.
 */
#define PINT_PMCTRL_PMAT(x)                      (((uint32_t)(((uint32_t)(x)) << PINT_PMCTRL_PMAT_SHIFT)) & PINT_PMCTRL_PMAT_MASK)
/*! @} */

/*! @name PMSRC - Pattern Match Interrupt Bit-Slice Source */
/*! @{ */
#define PINT_PMSRC_SRC0_MASK                     (0x700U)
#define PINT_PMSRC_SRC0_SHIFT                    (8U)
/*! SRC0 - Selects the input source for bit slice 0
 *  0b000..Input 0. Selects the pin selected in the PINT_SEL0 register as the source to bit slice n.
 *  0b001..Input 1. Selects the pin selected in the PINT_SEL1 register as the source to bit slice n.
 *  0b010..Input 2. Selects the pin selected in the PINT_SEL2 register as the source to bit slice n.
 *  0b011..Input 3. Selects the pin selected in the PINT_SEL3 register as the source to bit slice n.
 *  0b100..Input 4. Selects the pin selected in the PINT_SEL4 register as the source to bit slice n.
 *  0b101..Input 5. Selects the pin selected in the PINT_SEL5 register as the source to bit slice n.
 *  0b110..Input 6. Selects the pin selected in the PINT_SEL6 register as the source to bit slice n.
 *  0b111..Input 7. Selects the pin selected in the PINT_SEL7 register as the source to bit slice n.
 */
#define PINT_PMSRC_SRC0(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC0_SHIFT)) & PINT_PMSRC_SRC0_MASK)
#define PINT_PMSRC_SRC1_MASK                     (0x3800U)
#define PINT_PMSRC_SRC1_SHIFT                    (11U)
/*! SRC1 - Selects the input source for bit slice 1
 *  0b000..Input 0. Selects the pin selected in the PINT_SEL0 register as the source to bit slice n.
 *  0b001..Input 1. Selects the pin selected in the PINT_SEL1 register as the source to bit slice n.
 *  0b010..Input 2. Selects the pin selected in the PINT_SEL2 register as the source to bit slice n.
 *  0b011..Input 3. Selects the pin selected in the PINT_SEL3 register as the source to bit slice n.
 *  0b100..Input 4. Selects the pin selected in the PINT_SEL4 register as the source to bit slice n.
 *  0b101..Input 5. Selects the pin selected in the PINT_SEL5 register as the source to bit slice n.
 *  0b110..Input 6. Selects the pin selected in the PINT_SEL6 register as the source to bit slice n.
 *  0b111..Input 7. Selects the pin selected in the PINT_SEL7 register as the source to bit slice n.
 */
#define PINT_PMSRC_SRC1(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC1_SHIFT)) & PINT_PMSRC_SRC1_MASK)
#define PINT_PMSRC_SRC2_MASK                     (0x1C000U)
#define PINT_PMSRC_SRC2_SHIFT                    (14U)
/*! SRC2 - Selects the input source for bit slice 2
 *  0b000..Input 0. Selects the pin selected in the PINT_SEL0 register as the source to bit slice n.
 *  0b001..Input 1. Selects the pin selected in the PINT_SEL1 register as the source to bit slice n.
 *  0b010..Input 2. Selects the pin selected in the PINT_SEL2 register as the source to bit slice n.
 *  0b011..Input 3. Selects the pin selected in the PINT_SEL3 register as the source to bit slice n.
 *  0b100..Input 4. Selects the pin selected in the PINT_SEL4 register as the source to bit slice n.
 *  0b101..Input 5. Selects the pin selected in the PINT_SEL5 register as the source to bit slice n.
 *  0b110..Input 6. Selects the pin selected in the PINT_SEL6 register as the source to bit slice n.
 *  0b111..Input 7. Selects the pin selected in the PINT_SEL7 register as the source to bit slice n.
 */
#define PINT_PMSRC_SRC2(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC2_SHIFT)) & PINT_PMSRC_SRC2_MASK)
#define PINT_PMSRC_SRC3_MASK                     (0xE0000U)
#define PINT_PMSRC_SRC3_SHIFT                    (17U)
/*! SRC3 - Selects the input source for bit slice 3
 *  0b000..Input 0. Selects the pin selected in the PINT_SEL0 register as the source to bit slice n.
 *  0b001..Input 1. Selects the pin selected in the PINT_SEL1 register as the source to bit slice n.
 *  0b010..Input 2. Selects the pin selected in the PINT_SEL2 register as the source to bit slice n.
 *  0b011..Input 3. Selects the pin selected in the PINT_SEL3 register as the source to bit slice n.
 *  0b100..Input 4. Selects the pin selected in the PINT_SEL4 register as the source to bit slice n.
 *  0b101..Input 5. Selects the pin selected in the PINT_SEL5 register as the source to bit slice n.
 *  0b110..Input 6. Selects the pin selected in the PINT_SEL6 register as the source to bit slice n.
 *  0b111..Input 7. Selects the pin selected in the PINT_SEL7 register as the source to bit slice n.
 */
#define PINT_PMSRC_SRC3(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC3_SHIFT)) & PINT_PMSRC_SRC3_MASK)
#define PINT_PMSRC_SRC4_MASK                     (0x700000U)
#define PINT_PMSRC_SRC4_SHIFT                    (20U)
/*! SRC4 - Selects the input source for bit slice 4
 *  0b000..Input 0. Selects the pin selected in the PINT_SEL0 register as the source to bit slice n.
 *  0b001..Input 1. Selects the pin selected in the PINT_SEL1 register as the source to bit slice n.
 *  0b010..Input 2. Selects the pin selected in the PINT_SEL2 register as the source to bit slice n.
 *  0b011..Input 3. Selects the pin selected in the PINT_SEL3 register as the source to bit slice n.
 *  0b100..Input 4. Selects the pin selected in the PINT_SEL4 register as the source to bit slice n.
 *  0b101..Input 5. Selects the pin selected in the PINT_SEL5 register as the source to bit slice n.
 *  0b110..Input 6. Selects the pin selected in the PINT_SEL6 register as the source to bit slice n.
 *  0b111..Input 7. Selects the pin selected in the PINT_SEL7 register as the source to bit slice n.
 */
#define PINT_PMSRC_SRC4(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC4_SHIFT)) & PINT_PMSRC_SRC4_MASK)
#define PINT_PMSRC_SRC5_MASK                     (0x3800000U)
#define PINT_PMSRC_SRC5_SHIFT                    (23U)
/*! SRC5 - Selects the input source for bit slice 5
 *  0b000..Input 0. Selects the pin selected in the PINT_SEL0 register as the source to bit slice n.
 *  0b001..Input 1. Selects the pin selected in the PINT_SEL1 register as the source to bit slice n.
 *  0b010..Input 2. Selects the pin selected in the PINT_SEL2 register as the source to bit slice n.
 *  0b011..Input 3. Selects the pin selected in the PINT_SEL3 register as the source to bit slice n.
 *  0b100..Input 4. Selects the pin selected in the PINT_SEL4 register as the source to bit slice n.
 *  0b101..Input 5. Selects the pin selected in the PINT_SEL5 register as the source to bit slice n.
 *  0b110..Input 6. Selects the pin selected in the PINT_SEL6 register as the source to bit slice n.
 *  0b111..Input 7. Selects the pin selected in the PINT_SEL7 register as the source to bit slice n.
 */
#define PINT_PMSRC_SRC5(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC5_SHIFT)) & PINT_PMSRC_SRC5_MASK)
#define PINT_PMSRC_SRC6_MASK                     (0x1C000000U)
#define PINT_PMSRC_SRC6_SHIFT                    (26U)
/*! SRC6 - Selects the input source for bit slice 6
 *  0b000..Input 0. Selects the pin selected in the PINT_SEL0 register as the source to bit slice n.
 *  0b001..Input 1. Selects the pin selected in the PINT_SEL1 register as the source to bit slice n.
 *  0b010..Input 2. Selects the pin selected in the PINT_SEL2 register as the source to bit slice n.
 *  0b011..Input 3. Selects the pin selected in the PINT_SEL3 register as the source to bit slice n.
 *  0b100..Input 4. Selects the pin selected in the PINT_SEL4 register as the source to bit slice n.
 *  0b101..Input 5. Selects the pin selected in the PINT_SEL5 register as the source to bit slice n.
 *  0b110..Input 6. Selects the pin selected in the PINT_SEL6 register as the source to bit slice n.
 *  0b111..Input 7. Selects the pin selected in the PINT_SEL7 register as the source to bit slice n.
 */
#define PINT_PMSRC_SRC6(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC6_SHIFT)) & PINT_PMSRC_SRC6_MASK)
#define PINT_PMSRC_SRC7_MASK                     (0xE0000000U)
#define PINT_PMSRC_SRC7_SHIFT                    (29U)
/*! SRC7 - Selects the input source for bit slice 7
 *  0b000..Input 0. Selects the pin selected in the PINT_SEL0 register as the source to bit slice n.
 *  0b001..Input 1. Selects the pin selected in the PINT_SEL1 register as the source to bit slice n.
 *  0b010..Input 2. Selects the pin selected in the PINT_SEL2 register as the source to bit slice n.
 *  0b011..Input 3. Selects the pin selected in the PINT_SEL3 register as the source to bit slice n.
 *  0b100..Input 4. Selects the pin selected in the PINT_SEL4 register as the source to bit slice n.
 *  0b101..Input 5. Selects the pin selected in the PINT_SEL5 register as the source to bit slice n.
 *  0b110..Input 6. Selects the pin selected in the PINT_SEL6 register as the source to bit slice n.
 *  0b111..Input 7. Selects the pin selected in the PINT_SEL7 register as the source to bit slice n.
 */
#define PINT_PMSRC_SRC7(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC7_SHIFT)) & PINT_PMSRC_SRC7_MASK)
/*! @} */

/*! @name PMCFG - Pattern Match Interrupt Bit Slice Configuration */
/*! @{ */
#define PINT_PMCFG_PROD_ENDPTS0_MASK             (0x1U)
#define PINT_PMCFG_PROD_ENDPTS0_SHIFT            (0U)
#define PINT_PMCFG_PROD_ENDPTS1_MASK             (0x2U)
#define PINT_PMCFG_PROD_ENDPTS1_SHIFT            (1U)
#define PINT_PMCFG_PROD_ENDPTS2_MASK             (0x4U)
#define PINT_PMCFG_PROD_ENDPTS2_SHIFT            (2U)
#define PINT_PMCFG_PROD_ENDPTS3_MASK             (0x8U)
#define PINT_PMCFG_PROD_ENDPTS3_SHIFT            (3U)
#define PINT_PMCFG_PROD_ENDPTS4_MASK             (0x10U)
#define PINT_PMCFG_PROD_ENDPTS4_SHIFT            (4U)
#define PINT_PMCFG_PROD_ENDPTS5_MASK             (0x20U)
#define PINT_PMCFG_PROD_ENDPTS5_SHIFT            (5U)
#define PINT_PMCFG_PROD_ENDPTS6_MASK             (0x40U)
#define PINT_PMCFG_PROD_ENDPTS6_SHIFT            (6U)
#define PINT_PMCFG_CFG0_MASK                     (0x700U)
#define PINT_PMCFG_CFG0_SHIFT                    (8U)
/*! CFG0 - Specifies the match contribution condition for bit slice 0.
 *  0b000..Constant HIGH
 *  0b001..Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b010..Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b011..Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input
 *         has occurred since the last time the edge detection for this bit slice was cleared. This match condition
 *         is only cleared when the PMCFG or the PMSRC registers are written to.
 *  0b100..High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register.
 *  0b101..Low level. Match occurs when there is a low level on the specified input.
 *  0b110..Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices).
 *  0b111..Event. Non-sticky rising or falling edge. Match occurs on an event when either a rising or falling edge
 *         is first detected on the specified input (this is a non-sticky version of value 0x3). This bit is
 *         cleared after 1 clock cycle.
 */
#define PINT_PMCFG_CFG0(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG0_SHIFT)) & PINT_PMCFG_CFG0_MASK)
#define PINT_PMCFG_CFG1_MASK                     (0x3800U)
#define PINT_PMCFG_CFG1_SHIFT                    (11U)
/*! CFG1 - Specifies the match contribution condition for bit slice 1.
 *  0b000..Constant HIGH
 *  0b001..Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b010..Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b011..Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input
 *         has occurred since the last time the edge detection for this bit slice was cleared. This match condition
 *         is only cleared when the PMCFG or the PMSRC registers are written to.
 *  0b100..High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register.
 *  0b101..Low level. Match occurs when there is a low level on the specified input.
 *  0b110..Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices).
 *  0b111..Event. Non-sticky rising or falling edge. Match occurs on an event when either a rising or falling edge
 *         is first detected on the specified input (this is a non-sticky version of value 0x3). This bit is
 *         cleared after 1 clock cycle.
 */
#define PINT_PMCFG_CFG1(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG1_SHIFT)) & PINT_PMCFG_CFG1_MASK)
#define PINT_PMCFG_CFG2_MASK                     (0x1C000U)
#define PINT_PMCFG_CFG2_SHIFT                    (14U)
/*! CFG2 - Specifies the match contribution condition for bit slice 2.
 *  0b000..Constant HIGH
 *  0b001..Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b010..Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b011..Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input
 *         has occurred since the last time the edge detection for this bit slice was cleared. This match condition
 *         is only cleared when the PMCFG or the PMSRC registers are written to.
 *  0b100..High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register.
 *  0b101..Low level. Match occurs when there is a low level on the specified input.
 *  0b110..Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices).
 *  0b111..Event. Non-sticky rising or falling edge. Match occurs on an event when either a rising or falling edge
 *         is first detected on the specified input (this is a non-sticky version of value 0x3). This bit is
 *         cleared after 1 clock cycle.
 */
#define PINT_PMCFG_CFG2(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG2_SHIFT)) & PINT_PMCFG_CFG2_MASK)
#define PINT_PMCFG_CFG3_MASK                     (0xE0000U)
#define PINT_PMCFG_CFG3_SHIFT                    (17U)
/*! CFG3 - Specifies the match contribution condition for bit slice 3.
 *  0b000..Constant HIGH
 *  0b001..Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b010..Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b011..Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input
 *         has occurred since the last time the edge detection for this bit slice was cleared. This match condition
 *         is only cleared when the PMCFG or the PMSRC registers are written to.
 *  0b100..High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register.
 *  0b101..Low level. Match occurs when there is a low level on the specified input.
 *  0b110..Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices).
 *  0b111..Event. Non-sticky rising or falling edge. Match occurs on an event when either a rising or falling edge
 *         is first detected on the specified input (this is a non-sticky version of value 0x3). This bit is
 *         cleared after 1 clock cycle.
 */
#define PINT_PMCFG_CFG3(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG3_SHIFT)) & PINT_PMCFG_CFG3_MASK)
#define PINT_PMCFG_CFG4_MASK                     (0x700000U)
#define PINT_PMCFG_CFG4_SHIFT                    (20U)
/*! CFG4 - Specifies the match contribution condition for bit slice 4.
 *  0b000..Constant HIGH
 *  0b001..Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b010..Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b011..Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input
 *         has occurred since the last time the edge detection for this bit slice was cleared. This match condition
 *         is only cleared when the PMCFG or the PMSRC registers are written to.
 *  0b100..High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register.
 *  0b101..Low level. Match occurs when there is a low level on the specified input.
 *  0b110..Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices).
 *  0b111..Event. Non-sticky rising or falling edge. Match occurs on an event when either a rising or falling edge
 *         is first detected on the specified input (this is a non-sticky version of value 0x3). This bit is
 *         cleared after 1 clock cycle.
 */
#define PINT_PMCFG_CFG4(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG4_SHIFT)) & PINT_PMCFG_CFG4_MASK)
#define PINT_PMCFG_CFG5_MASK                     (0x3800000U)
#define PINT_PMCFG_CFG5_SHIFT                    (23U)
/*! CFG5 - Specifies the match contribution condition for bit slice 5.
 *  0b000..Constant HIGH
 *  0b001..Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b010..Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b011..Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input
 *         has occurred since the last time the edge detection for this bit slice was cleared. This match condition
 *         is only cleared when the PMCFG or the PMSRC registers are written to.
 *  0b100..High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register.
 *  0b101..Low level. Match occurs when there is a low level on the specified input.
 *  0b110..Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices).
 *  0b111..Event. Non-sticky rising or falling edge. Match occurs on an event when either a rising or falling edge
 *         is first detected on the specified input (this is a non-sticky version of value 0x3). This bit is
 *         cleared after 1 clock cycle.
 */
#define PINT_PMCFG_CFG5(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG5_SHIFT)) & PINT_PMCFG_CFG5_MASK)
#define PINT_PMCFG_CFG6_MASK                     (0x1C000000U)
#define PINT_PMCFG_CFG6_SHIFT                    (26U)
/*! CFG6 - Specifies the match contribution condition for bit slice 6.
 *  0b000..Constant HIGH
 *  0b001..Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b010..Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b011..Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input
 *         has occurred since the last time the edge detection for this bit slice was cleared. This match condition
 *         is only cleared when the PMCFG or the PMSRC registers are written to.
 *  0b100..High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register.
 *  0b101..Low level. Match occurs when there is a low level on the specified input.
 *  0b110..Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices).
 *  0b111..Event. Non-sticky rising or falling edge. Match occurs on an event when either a rising or falling edge
 *         is first detected on the specified input (this is a non-sticky version of value 0x3). This bit is
 *         cleared after 1 clock cycle.
 */
#define PINT_PMCFG_CFG6(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG6_SHIFT)) & PINT_PMCFG_CFG6_MASK)
#define PINT_PMCFG_CFG7_MASK                     (0xE0000000U)
#define PINT_PMCFG_CFG7_SHIFT                    (29U)
/*! CFG7 - Specifies the match contribution condition for bit slice 7.
 *  0b000..Constant HIGH
 *  0b001..Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b010..Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last
 *         time the edge detection for this bit slice was cleared. This match condition is only cleared when the
 *         PMCFG or the PMSRC registers are written to.
 *  0b011..Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input
 *         has occurred since the last time the edge detection for this bit slice was cleared. This match condition
 *         is only cleared when the PMCFG or the PMSRC registers are written to.
 *  0b100..High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register.
 *  0b101..Low level. Match occurs when there is a low level on the specified input.
 *  0b110..Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices).
 *  0b111..Event. Non-sticky rising or falling edge. Match occurs on an event when either a rising or falling edge
 *         is first detected on the specified input (this is a non-sticky version of value 0x3). This bit is
 *         cleared after 1 clock cycle.
 */
#define PINT_PMCFG_CFG7(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG7_SHIFT)) & PINT_PMCFG_CFG7_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group PINT_Register_Masks */


/* PINT - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral PINT base pointer */
  #define PINT_BASE_PTR                            ((PINT_MemMapPtr)0x50025000u)
  /** Peripheral PINT base pointer */
  #define PINT_BASE_PTR_NS                         ((PINT_MemMapPtr)0x40025000u)
  /** Array initializer of PINT peripheral base pointers */
  #define PINT_BASE_PTRS                           { PINT_BASE_PTR }
  /** Array initializer of PINT peripheral base pointers */
  #define PINT_BASE_PTRS_NS                        { PINT_BASE_PTR_NS }
#else
  /** Peripheral PINT base pointer */
  #define PINT_BASE_PTR                            ((PINT_MemMapPtr)0x40025000u)
  /** Array initializer of PINT peripheral base pointers */
  #define PINT_BASE_PTRS                           { PINT_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- PINT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PINT_Register_Accessor_Macros PINT - Register accessor macros
 * @{
 */


/* PINT - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* PINT */
  #define PINT_ISEL                                PINT_ISEL_REG(PINT_BASE_PTR)
  #define PINT_ISEL_NS                             PINT_ISEL_REG(PINT_BASE_PTR_NS)
  #define PINT_IENR                                PINT_IENR_REG(PINT_BASE_PTR)
  #define PINT_IENR_NS                             PINT_IENR_REG(PINT_BASE_PTR_NS)
  #define PINT_SIENR                               PINT_SIENR_REG(PINT_BASE_PTR)
  #define PINT_SIENR_NS                            PINT_SIENR_REG(PINT_BASE_PTR_NS)
  #define PINT_CIENR                               PINT_CIENR_REG(PINT_BASE_PTR)
  #define PINT_CIENR_NS                            PINT_CIENR_REG(PINT_BASE_PTR_NS)
  #define PINT_IENF                                PINT_IENF_REG(PINT_BASE_PTR)
  #define PINT_IENF_NS                             PINT_IENF_REG(PINT_BASE_PTR_NS)
  #define PINT_SIENF                               PINT_SIENF_REG(PINT_BASE_PTR)
  #define PINT_SIENF_NS                            PINT_SIENF_REG(PINT_BASE_PTR_NS)
  #define PINT_CIENF                               PINT_CIENF_REG(PINT_BASE_PTR)
  #define PINT_CIENF_NS                            PINT_CIENF_REG(PINT_BASE_PTR_NS)
  #define PINT_RISE                                PINT_RISE_REG(PINT_BASE_PTR)
  #define PINT_RISE_NS                             PINT_RISE_REG(PINT_BASE_PTR_NS)
  #define PINT_FALL                                PINT_FALL_REG(PINT_BASE_PTR)
  #define PINT_FALL_NS                             PINT_FALL_REG(PINT_BASE_PTR_NS)
  #define PINT_IST                                 PINT_IST_REG(PINT_BASE_PTR)
  #define PINT_IST_NS                              PINT_IST_REG(PINT_BASE_PTR_NS)
  #define PINT_PMCTRL                              PINT_PMCTRL_REG(PINT_BASE_PTR)
  #define PINT_PMCTRL_NS                           PINT_PMCTRL_REG(PINT_BASE_PTR_NS)
  #define PINT_PMSRC                               PINT_PMSRC_REG(PINT_BASE_PTR)
  #define PINT_PMSRC_NS                            PINT_PMSRC_REG(PINT_BASE_PTR_NS)
  #define PINT_PMCFG                               PINT_PMCFG_REG(PINT_BASE_PTR)
  #define PINT_PMCFG_NS                            PINT_PMCFG_REG(PINT_BASE_PTR_NS)
#else
  /* PINT */
  #define PINT_ISEL                                PINT_ISEL_REG(PINT_BASE_PTR)
  #define PINT_IENR                                PINT_IENR_REG(PINT_BASE_PTR)
  #define PINT_SIENR                               PINT_SIENR_REG(PINT_BASE_PTR)
  #define PINT_CIENR                               PINT_CIENR_REG(PINT_BASE_PTR)
  #define PINT_IENF                                PINT_IENF_REG(PINT_BASE_PTR)
  #define PINT_SIENF                               PINT_SIENF_REG(PINT_BASE_PTR)
  #define PINT_CIENF                               PINT_CIENF_REG(PINT_BASE_PTR)
  #define PINT_RISE                                PINT_RISE_REG(PINT_BASE_PTR)
  #define PINT_FALL                                PINT_FALL_REG(PINT_BASE_PTR)
  #define PINT_IST                                 PINT_IST_REG(PINT_BASE_PTR)
  #define PINT_PMCTRL                              PINT_PMCTRL_REG(PINT_BASE_PTR)
  #define PINT_PMSRC                               PINT_PMSRC_REG(PINT_BASE_PTR)
  #define PINT_PMCFG                               PINT_PMCFG_REG(PINT_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group PINT_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group PINT_Peripheral */


/* ----------------------------------------------------------------------------
   -- PMC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PMC_Peripheral PMC
 * @{
 */

/** PMC - Peripheral register structure */
typedef struct PMC_MemMap {
  uint8_t RESERVED_0[4];
  uint32_t STATUS;                                 /**< Status, offset: 0x4 */
  uint32_t FLAGS;                                  /**< Wakeup, Interrupt, Reset Flags, offset: 0x8 */
  uint32_t CTRL;                                   /**< PMC control register, offset: 0xC */
  uint8_t RESERVED_1[28];
  uint32_t PADVRANGE;                              /**< PMC GPIO VDDIO Range Selection Control, offset: 0x2C */
} volatile *PMC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- PMC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PMC_Register_Accessor_Macros PMC - Register accessor macros
 * @{
 */


/* PMC - Register accessors */
#define PMC_STATUS_REG(base)                     ((base)->STATUS)
#define PMC_FLAGS_REG(base)                      ((base)->FLAGS)
#define PMC_CTRL_REG(base)                       ((base)->CTRL)
#define PMC_PADVRANGE_REG(base)                  ((base)->PADVRANGE)

/*!
 * @}
 */ /* end of group PMC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- PMC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PMC_Register_Masks PMC Register Masks
 * @{
 */

/*! @name STATUS - Status */
/*! @{ */
#define PMC_STATUS_ACTIVEFSM_MASK                (0x1U)
#define PMC_STATUS_ACTIVEFSM_SHIFT               (0U)
#define PMC_STATUS_LVDCORE_MASK                  (0x100000U)
#define PMC_STATUS_LVDCORE_SHIFT                 (20U)
#define PMC_STATUS_HVDCORE_MASK                  (0x400000U)
#define PMC_STATUS_HVDCORE_SHIFT                 (22U)
#define PMC_STATUS_HVD1V8_MASK                   (0x1000000U)
#define PMC_STATUS_HVD1V8_SHIFT                  (24U)
#define PMC_STATUS_RTCWKUP_MASK                  (0x8000000U)
#define PMC_STATUS_RTCWKUP_SHIFT                 (27U)
#define PMC_STATUS_INTNPAD_MASK                  (0x20000000U)
#define PMC_STATUS_INTNPAD_SHIFT                 (29U)
/*! @} */

/*! @name FLAGS - Wakeup, Interrupt, Reset Flags */
/*! @{ */
#define PMC_FLAGS_PORCOREF_MASK                  (0x10000U)
#define PMC_FLAGS_PORCOREF_SHIFT                 (16U)
#define PMC_FLAGS_POR1V8F_MASK                   (0x20000U)
#define PMC_FLAGS_POR1V8F_SHIFT                  (17U)
#define PMC_FLAGS_PORAO18F_MASK                  (0x40000U)
#define PMC_FLAGS_PORAO18F_SHIFT                 (18U)
#define PMC_FLAGS_LVDCOREF_MASK                  (0x100000U)
#define PMC_FLAGS_LVDCOREF_SHIFT                 (20U)
#define PMC_FLAGS_HVDCOREF_MASK                  (0x400000U)
#define PMC_FLAGS_HVDCOREF_SHIFT                 (22U)
#define PMC_FLAGS_HVD1V8F_MASK                   (0x1000000U)
#define PMC_FLAGS_HVD1V8F_SHIFT                  (24U)
#define PMC_FLAGS_RTCF_MASK                      (0x8000000U)
#define PMC_FLAGS_RTCF_SHIFT                     (27U)
#define PMC_FLAGS_AUTOWKF_MASK                   (0x10000000U)
#define PMC_FLAGS_AUTOWKF_SHIFT                  (28U)
#define PMC_FLAGS_INTNPADF_MASK                  (0x20000000U)
#define PMC_FLAGS_INTNPADF_SHIFT                 (29U)
#define PMC_FLAGS_RESETNPADF_MASK                (0x40000000U)
#define PMC_FLAGS_RESETNPADF_SHIFT               (30U)
#define PMC_FLAGS_DEEPPDF_MASK                   (0x80000000U)
#define PMC_FLAGS_DEEPPDF_SHIFT                  (31U)
/*! @} */

/*! @name CTRL - PMC control register */
/*! @{ */
#define PMC_CTRL_APPLYCFG_MASK                   (0x1U)
#define PMC_CTRL_APPLYCFG_SHIFT                  (0U)
/*! @} */

/*! @name PADVRANGE - PMC GPIO VDDIO Range Selection Control */
/*! @{ */
#define PMC_PADVRANGE_VDDIO_0RANGE_MASK          (0x3U)
#define PMC_PADVRANGE_VDDIO_0RANGE_SHIFT         (0U)
/*! VDDIO_0RANGE - VDDE0RANGE
 *  0b00..1.71 - 3.6V. Consumes static current to detect VDDE0 level
 *  0b01..1.71 - 1.98V, vdde detector off
 *  0b10..3.00 - 3.6V, vdde detector off
 *  0b11..Not allowed (hardware translates to 10)
 */
#define PMC_PADVRANGE_VDDIO_0RANGE(x)            (((uint32_t)(((uint32_t)(x)) << PMC_PADVRANGE_VDDIO_0RANGE_SHIFT)) & PMC_PADVRANGE_VDDIO_0RANGE_MASK)
#define PMC_PADVRANGE_VDDIO_1RANGE_MASK          (0xCU)
#define PMC_PADVRANGE_VDDIO_1RANGE_SHIFT         (2U)
/*! VDDIO_1RANGE - VDDE1RANGE
 *  0b00..1.71 - 3.6V. Continuous mode. Consumes static current to detect VDDIO1 level
 *  0b01..1.71 - 1.98V, vdde detector off
 *  0b10..3.00 - 3.6V, vdde detector off
 *  0b11..Not allowed (hardware translates to 00 = continuous mode)
 */
#define PMC_PADVRANGE_VDDIO_1RANGE(x)            (((uint32_t)(((uint32_t)(x)) << PMC_PADVRANGE_VDDIO_1RANGE_SHIFT)) & PMC_PADVRANGE_VDDIO_1RANGE_MASK)
#define PMC_PADVRANGE_VDDIO_2RANGE_MASK          (0x30U)
#define PMC_PADVRANGE_VDDIO_2RANGE_SHIFT         (4U)
/*! VDDIO_2RANGE - VDDE2RANGE
 *  0b00..1.71 - 3.6V. Continuous mode. Consumes static current to detect VDDIO2 level
 *  0b01..1.71 - 1.98V, vdde detector off
 *  0b10..3.00 - 3.6V, vdde detector off
 *  0b11..Not allowed (hardware translates to 00 = continuous mode)
 */
#define PMC_PADVRANGE_VDDIO_2RANGE(x)            (((uint32_t)(((uint32_t)(x)) << PMC_PADVRANGE_VDDIO_2RANGE_SHIFT)) & PMC_PADVRANGE_VDDIO_2RANGE_MASK)
#define PMC_PADVRANGE_VDDIO_3RANGE_MASK          (0xC0U)
#define PMC_PADVRANGE_VDDIO_3RANGE_SHIFT         (6U)
/*! VDDIO_3RANGE - VDDE3RANGE
 *  0b00..1.71 - 3.6V. Continuous mode. Consumes static current to detect VDDIO3 level
 *  0b01..1.71 - 1.98V, vdde detector off
 *  0b10..3.00 - 3.6V, vdde detector off
 *  0b11..Not allowed (hardware translates to 00 = continuous mode)
 */
#define PMC_PADVRANGE_VDDIO_3RANGE(x)            (((uint32_t)(((uint32_t)(x)) << PMC_PADVRANGE_VDDIO_3RANGE_SHIFT)) & PMC_PADVRANGE_VDDIO_3RANGE_MASK)
#define PMC_PADVRANGE_VDDIO_4RANGE_MASK          (0x300U)
#define PMC_PADVRANGE_VDDIO_4RANGE_SHIFT         (8U)
/*! VDDIO_4RANGE - VDDIO4RANGE
 *  0b00..1.71 - 3.6V. Continuous mode. Consumes static current to detect VDDIO4 level
 *  0b01..1.71 - 1.98V, vdde detector off
 *  0b10..3.00 - 3.6V, vdde detector off
 *  0b11..Not allowed (hardware translates to 00 = continuous mode)
 */
#define PMC_PADVRANGE_VDDIO_4RANGE(x)            (((uint32_t)(((uint32_t)(x)) << PMC_PADVRANGE_VDDIO_4RANGE_SHIFT)) & PMC_PADVRANGE_VDDIO_4RANGE_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group PMC_Register_Masks */


/* PMC - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral PMC base pointer */
  #define PMC_BASE_PTR                             ((PMC_MemMapPtr)0x50135000u)
  /** Peripheral PMC base pointer */
  #define PMC_BASE_PTR_NS                          ((PMC_MemMapPtr)0x40135000u)
  /** Array initializer of PMC peripheral base pointers */
  #define PMC_BASE_PTRS                            { PMC_BASE_PTR }
  /** Array initializer of PMC peripheral base pointers */
  #define PMC_BASE_PTRS_NS                         { PMC_BASE_PTR_NS }
#else
  /** Peripheral PMC base pointer */
  #define PMC_BASE_PTR                             ((PMC_MemMapPtr)0x40135000u)
  /** Array initializer of PMC peripheral base pointers */
  #define PMC_BASE_PTRS                            { PMC_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- PMC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PMC_Register_Accessor_Macros PMC - Register accessor macros
 * @{
 */


/* PMC - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* PMC */
  #define PMC_STATUS                               PMC_STATUS_REG(PMC_BASE_PTR)
  #define PMC_STATUS_NS                            PMC_STATUS_REG(PMC_BASE_PTR_NS)
  #define PMC_FLAGS                                PMC_FLAGS_REG(PMC_BASE_PTR)
  #define PMC_FLAGS_NS                             PMC_FLAGS_REG(PMC_BASE_PTR_NS)
  #define PMC_CTRL                                 PMC_CTRL_REG(PMC_BASE_PTR)
  #define PMC_CTRL_NS                              PMC_CTRL_REG(PMC_BASE_PTR_NS)
  #define PMC_PADVRANGE                            PMC_PADVRANGE_REG(PMC_BASE_PTR)
  #define PMC_PADVRANGE_NS                         PMC_PADVRANGE_REG(PMC_BASE_PTR_NS)
#else
  /* PMC */
  #define PMC_STATUS                               PMC_STATUS_REG(PMC_BASE_PTR)
  #define PMC_FLAGS                                PMC_FLAGS_REG(PMC_BASE_PTR)
  #define PMC_CTRL                                 PMC_CTRL_REG(PMC_BASE_PTR)
  #define PMC_PADVRANGE                            PMC_PADVRANGE_REG(PMC_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group PMC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group PMC_Peripheral */


/* ----------------------------------------------------------------------------
   -- POWERQUAD
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup POWERQUAD_Peripheral POWERQUAD
 * @{
 */

/** POWERQUAD - Peripheral register structure */
typedef struct POWERQUAD_MemMap {
  uint32_t OUTBASE;                                /**< Output Base, offset: 0x0 */
  uint32_t OUTFORMAT;                              /**< Output Format, offset: 0x4 */
  uint32_t TMPBASE;                                /**< Temporary Base, offset: 0x8 */
  uint32_t TMPFORMAT;                              /**< Temporary Format, offset: 0xC */
  uint32_t INABASE;                                /**< Input A Base, offset: 0x10 */
  uint32_t INAFORMAT;                              /**< Input A Format, offset: 0x14 */
  uint32_t INBBASE;                                /**< Input B Base, offset: 0x18 */
  uint32_t INBFORMAT;                              /**< Input B Format, offset: 0x1C */
  uint8_t RESERVED_0[224];
  uint32_t CONTROL;                                /**< Control, offset: 0x100 */
  uint32_t LENGTH;                                 /**< Length, offset: 0x104 */
  uint32_t CPPRE;                                  /**< Coprocessor Pre-scale, offset: 0x108 */
  uint32_t MISC;                                   /**< Miscellaneous, offset: 0x10C */
  uint32_t CURSORY;                                /**< Cursory, offset: 0x110 */
  uint8_t RESERVED_1[108];
  uint32_t CORDIC_X;                               /**< Cordic input X, offset: 0x180 */
  uint32_t CORDIC_Y;                               /**< Cordic Input Y, offset: 0x184 */
  uint32_t CORDIC_Z;                               /**< Cordic Input Z, offset: 0x188 */
  uint32_t ERRSTAT;                                /**< Error Status, offset: 0x18C */
  uint32_t INTREN;                                 /**< Interrupt Enable, offset: 0x190 */
  uint32_t EVENTEN;                                /**< Event Enable, offset: 0x194 */
  uint32_t INTRSTAT;                               /**< Interrupt Status, offset: 0x198 */
  uint8_t RESERVED_2[100];
  uint32_t GPREG[16];                              /**< General Purpose Register Bank n, array offset: 0x200, array step: 0x4 */
  uint32_t COMPREG[8];                             /**< Compute Register Bank n, array offset: 0x240, array step: 0x4 */
} volatile *POWERQUAD_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- POWERQUAD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup POWERQUAD_Register_Accessor_Macros POWERQUAD - Register accessor macros
 * @{
 */


/* POWERQUAD - Register accessors */
#define POWERQUAD_OUTBASE_REG(base)              ((base)->OUTBASE)
#define POWERQUAD_OUTFORMAT_REG(base)            ((base)->OUTFORMAT)
#define POWERQUAD_TMPBASE_REG(base)              ((base)->TMPBASE)
#define POWERQUAD_TMPFORMAT_REG(base)            ((base)->TMPFORMAT)
#define POWERQUAD_INABASE_REG(base)              ((base)->INABASE)
#define POWERQUAD_INAFORMAT_REG(base)            ((base)->INAFORMAT)
#define POWERQUAD_INBBASE_REG(base)              ((base)->INBBASE)
#define POWERQUAD_INBFORMAT_REG(base)            ((base)->INBFORMAT)
#define POWERQUAD_CONTROL_REG(base)              ((base)->CONTROL)
#define POWERQUAD_LENGTH_REG(base)               ((base)->LENGTH)
#define POWERQUAD_CPPRE_REG(base)                ((base)->CPPRE)
#define POWERQUAD_MISC_REG(base)                 ((base)->MISC)
#define POWERQUAD_CURSORY_REG(base)              ((base)->CURSORY)
#define POWERQUAD_CORDIC_X_REG(base)             ((base)->CORDIC_X)
#define POWERQUAD_CORDIC_Y_REG(base)             ((base)->CORDIC_Y)
#define POWERQUAD_CORDIC_Z_REG(base)             ((base)->CORDIC_Z)
#define POWERQUAD_ERRSTAT_REG(base)              ((base)->ERRSTAT)
#define POWERQUAD_INTREN_REG(base)               ((base)->INTREN)
#define POWERQUAD_EVENTEN_REG(base)              ((base)->EVENTEN)
#define POWERQUAD_INTRSTAT_REG(base)             ((base)->INTRSTAT)
#define POWERQUAD_GPREG_REG(base,index)          ((base)->GPREG[index])
#define POWERQUAD_COMPREG_REG(base,index)        ((base)->COMPREG[index])

/*!
 * @}
 */ /* end of group POWERQUAD_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- POWERQUAD Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup POWERQUAD_Register_Masks POWERQUAD Register Masks
 * @{
 */

/*! @name OUTBASE - Output Base */
/*! @{ */
#define POWERQUAD_OUTBASE_OUTBASE_MASK           (0xFFFFFFFFU)
#define POWERQUAD_OUTBASE_OUTBASE_SHIFT          (0U)
/*! OUTBASE - Base address register for the output region
 */
#define POWERQUAD_OUTBASE_OUTBASE(x)             (((uint32_t)(((uint32_t)(x)) << POWERQUAD_OUTBASE_OUTBASE_SHIFT)) & POWERQUAD_OUTBASE_OUTBASE_MASK)
/*! @} */

/*! @name OUTFORMAT - Output Format */
/*! @{ */
#define POWERQUAD_OUTFORMAT_OUT_FORMATINT_MASK   (0x3U)
#define POWERQUAD_OUTFORMAT_OUT_FORMATINT_SHIFT  (0U)
/*! OUT_FORMATINT - Output Internal Format
 */
#define POWERQUAD_OUTFORMAT_OUT_FORMATINT(x)     (((uint32_t)(((uint32_t)(x)) << POWERQUAD_OUTFORMAT_OUT_FORMATINT_SHIFT)) & POWERQUAD_OUTFORMAT_OUT_FORMATINT_MASK)
#define POWERQUAD_OUTFORMAT_OUT_FORMATEXT_MASK   (0x30U)
#define POWERQUAD_OUTFORMAT_OUT_FORMATEXT_SHIFT  (4U)
/*! OUT_FORMATEXT - Output External Format
 */
#define POWERQUAD_OUTFORMAT_OUT_FORMATEXT(x)     (((uint32_t)(((uint32_t)(x)) << POWERQUAD_OUTFORMAT_OUT_FORMATEXT_SHIFT)) & POWERQUAD_OUTFORMAT_OUT_FORMATEXT_MASK)
#define POWERQUAD_OUTFORMAT_OUT_SCALER_MASK      (0xFF00U)
#define POWERQUAD_OUTFORMAT_OUT_SCALER_SHIFT     (8U)
/*! OUT_SCALER - Output Scaler Value
 */
#define POWERQUAD_OUTFORMAT_OUT_SCALER(x)        (((uint32_t)(((uint32_t)(x)) << POWERQUAD_OUTFORMAT_OUT_SCALER_SHIFT)) & POWERQUAD_OUTFORMAT_OUT_SCALER_MASK)
/*! @} */

/*! @name TMPBASE - Temporary Base */
/*! @{ */
#define POWERQUAD_TMPBASE_TMPBASE_MASK           (0xFFFFFFFFU)
#define POWERQUAD_TMPBASE_TMPBASE_SHIFT          (0U)
/*! TMPBASE - Base address register for the temporary region
 */
#define POWERQUAD_TMPBASE_TMPBASE(x)             (((uint32_t)(((uint32_t)(x)) << POWERQUAD_TMPBASE_TMPBASE_SHIFT)) & POWERQUAD_TMPBASE_TMPBASE_MASK)
/*! @} */

/*! @name TMPFORMAT - Temporary Format */
/*! @{ */
#define POWERQUAD_TMPFORMAT_TMP_FORMATINT_MASK   (0x3U)
#define POWERQUAD_TMPFORMAT_TMP_FORMATINT_SHIFT  (0U)
/*! TMP_FORMATINT - Temporary Internal Format
 */
#define POWERQUAD_TMPFORMAT_TMP_FORMATINT(x)     (((uint32_t)(((uint32_t)(x)) << POWERQUAD_TMPFORMAT_TMP_FORMATINT_SHIFT)) & POWERQUAD_TMPFORMAT_TMP_FORMATINT_MASK)
#define POWERQUAD_TMPFORMAT_TMP_FORMATEXT_MASK   (0x30U)
#define POWERQUAD_TMPFORMAT_TMP_FORMATEXT_SHIFT  (4U)
/*! TMP_FORMATEXT - Temporary External Format
 */
#define POWERQUAD_TMPFORMAT_TMP_FORMATEXT(x)     (((uint32_t)(((uint32_t)(x)) << POWERQUAD_TMPFORMAT_TMP_FORMATEXT_SHIFT)) & POWERQUAD_TMPFORMAT_TMP_FORMATEXT_MASK)
#define POWERQUAD_TMPFORMAT_TMP_SCALER_MASK      (0xFF00U)
#define POWERQUAD_TMPFORMAT_TMP_SCALER_SHIFT     (8U)
/*! TMP_SCALER - Temporary Scaler Value
 */
#define POWERQUAD_TMPFORMAT_TMP_SCALER(x)        (((uint32_t)(((uint32_t)(x)) << POWERQUAD_TMPFORMAT_TMP_SCALER_SHIFT)) & POWERQUAD_TMPFORMAT_TMP_SCALER_MASK)
/*! @} */

/*! @name INABASE - Input A Base */
/*! @{ */
#define POWERQUAD_INABASE_INABASE_MASK           (0xFFFFFFFFU)
#define POWERQUAD_INABASE_INABASE_SHIFT          (0U)
/*! INABASE - Input A Base
 */
#define POWERQUAD_INABASE_INABASE(x)             (((uint32_t)(((uint32_t)(x)) << POWERQUAD_INABASE_INABASE_SHIFT)) & POWERQUAD_INABASE_INABASE_MASK)
/*! @} */

/*! @name INAFORMAT - Input A Format */
/*! @{ */
#define POWERQUAD_INAFORMAT_INA_FORMATINT_MASK   (0x3U)
#define POWERQUAD_INAFORMAT_INA_FORMATINT_SHIFT  (0U)
/*! INA_FORMATINT - Input A Internal Format
 */
#define POWERQUAD_INAFORMAT_INA_FORMATINT(x)     (((uint32_t)(((uint32_t)(x)) << POWERQUAD_INAFORMAT_INA_FORMATINT_SHIFT)) & POWERQUAD_INAFORMAT_INA_FORMATINT_MASK)
#define POWERQUAD_INAFORMAT_INA_FORMATEXT_MASK   (0x30U)
#define POWERQUAD_INAFORMAT_INA_FORMATEXT_SHIFT  (4U)
/*! INA_FORMATEXT - Input A External Format
 */
#define POWERQUAD_INAFORMAT_INA_FORMATEXT(x)     (((uint32_t)(((uint32_t)(x)) << POWERQUAD_INAFORMAT_INA_FORMATEXT_SHIFT)) & POWERQUAD_INAFORMAT_INA_FORMATEXT_MASK)
#define POWERQUAD_INAFORMAT_INA_SCALER_MASK      (0xFF00U)
#define POWERQUAD_INAFORMAT_INA_SCALER_SHIFT     (8U)
/*! INA_SCALER - Input A Scaler Value
 */
#define POWERQUAD_INAFORMAT_INA_SCALER(x)        (((uint32_t)(((uint32_t)(x)) << POWERQUAD_INAFORMAT_INA_SCALER_SHIFT)) & POWERQUAD_INAFORMAT_INA_SCALER_MASK)
/*! @} */

/*! @name INBBASE - Input B Base */
/*! @{ */
#define POWERQUAD_INBBASE_INBBASE_MASK           (0xFFFFFFFFU)
#define POWERQUAD_INBBASE_INBBASE_SHIFT          (0U)
/*! INBBASE - Input B Base
 */
#define POWERQUAD_INBBASE_INBBASE(x)             (((uint32_t)(((uint32_t)(x)) << POWERQUAD_INBBASE_INBBASE_SHIFT)) & POWERQUAD_INBBASE_INBBASE_MASK)
/*! @} */

/*! @name INBFORMAT - Input B Format */
/*! @{ */
#define POWERQUAD_INBFORMAT_INB_FORMATINT_MASK   (0x3U)
#define POWERQUAD_INBFORMAT_INB_FORMATINT_SHIFT  (0U)
/*! INB_FORMATINT - Input B Internal Format
 */
#define POWERQUAD_INBFORMAT_INB_FORMATINT(x)     (((uint32_t)(((uint32_t)(x)) << POWERQUAD_INBFORMAT_INB_FORMATINT_SHIFT)) & POWERQUAD_INBFORMAT_INB_FORMATINT_MASK)
#define POWERQUAD_INBFORMAT_INB_FORMATEXT_MASK   (0x30U)
#define POWERQUAD_INBFORMAT_INB_FORMATEXT_SHIFT  (4U)
/*! INB_FORMATEXT - Input B External Format
 */
#define POWERQUAD_INBFORMAT_INB_FORMATEXT(x)     (((uint32_t)(((uint32_t)(x)) << POWERQUAD_INBFORMAT_INB_FORMATEXT_SHIFT)) & POWERQUAD_INBFORMAT_INB_FORMATEXT_MASK)
#define POWERQUAD_INBFORMAT_INB_SCALER_MASK      (0xFF00U)
#define POWERQUAD_INBFORMAT_INB_SCALER_SHIFT     (8U)
/*! INB_SCALER - Input B Scaler Value
 */
#define POWERQUAD_INBFORMAT_INB_SCALER(x)        (((uint32_t)(((uint32_t)(x)) << POWERQUAD_INBFORMAT_INB_SCALER_SHIFT)) & POWERQUAD_INBFORMAT_INB_SCALER_MASK)
/*! @} */

/*! @name CONTROL - Control */
/*! @{ */
#define POWERQUAD_CONTROL_DECODE_OPCODE_MASK     (0xFU)
#define POWERQUAD_CONTROL_DECODE_OPCODE_SHIFT    (0U)
/*! DECODE_OPCODE - Decode Opcode
 */
#define POWERQUAD_CONTROL_DECODE_OPCODE(x)       (((uint32_t)(((uint32_t)(x)) << POWERQUAD_CONTROL_DECODE_OPCODE_SHIFT)) & POWERQUAD_CONTROL_DECODE_OPCODE_MASK)
#define POWERQUAD_CONTROL_DECODE_MACHINE_MASK    (0xF0U)
#define POWERQUAD_CONTROL_DECODE_MACHINE_SHIFT   (4U)
/*! DECODE_MACHINE - Decode Machine
 */
#define POWERQUAD_CONTROL_DECODE_MACHINE(x)      (((uint32_t)(((uint32_t)(x)) << POWERQUAD_CONTROL_DECODE_MACHINE_SHIFT)) & POWERQUAD_CONTROL_DECODE_MACHINE_MASK)
#define POWERQUAD_CONTROL_INST_BUSY_MASK         (0x80000000U)
#define POWERQUAD_CONTROL_INST_BUSY_SHIFT        (31U)
/*! @} */

/*! @name LENGTH - Length */
/*! @{ */
#define POWERQUAD_LENGTH_INST_LENGTH_MASK        (0xFFFFFFFFU)
#define POWERQUAD_LENGTH_INST_LENGTH_SHIFT       (0U)
/*! INST_LENGTH - Instruction Length
 */
#define POWERQUAD_LENGTH_INST_LENGTH(x)          (((uint32_t)(((uint32_t)(x)) << POWERQUAD_LENGTH_INST_LENGTH_SHIFT)) & POWERQUAD_LENGTH_INST_LENGTH_MASK)
/*! @} */

/*! @name CPPRE - Coprocessor Pre-scale */
/*! @{ */
#define POWERQUAD_CPPRE_CPPRE_IN_MASK            (0xFFU)
#define POWERQUAD_CPPRE_CPPRE_IN_SHIFT           (0U)
/*! CPPRE_IN - Input
 */
#define POWERQUAD_CPPRE_CPPRE_IN(x)              (((uint32_t)(((uint32_t)(x)) << POWERQUAD_CPPRE_CPPRE_IN_SHIFT)) & POWERQUAD_CPPRE_CPPRE_IN_MASK)
#define POWERQUAD_CPPRE_CPPRE_OUT_MASK           (0xFF00U)
#define POWERQUAD_CPPRE_CPPRE_OUT_SHIFT          (8U)
/*! CPPRE_OUT - Output
 */
#define POWERQUAD_CPPRE_CPPRE_OUT(x)             (((uint32_t)(((uint32_t)(x)) << POWERQUAD_CPPRE_CPPRE_OUT_SHIFT)) & POWERQUAD_CPPRE_CPPRE_OUT_MASK)
#define POWERQUAD_CPPRE_CPPRE_SAT_MASK           (0x10000U)
#define POWERQUAD_CPPRE_CPPRE_SAT_SHIFT          (16U)
#define POWERQUAD_CPPRE_CPPRE_SAT8_MASK          (0x20000U)
#define POWERQUAD_CPPRE_CPPRE_SAT8_SHIFT         (17U)
/*! @} */

/*! @name MISC - Miscellaneous */
/*! @{ */
#define POWERQUAD_MISC_INST_MISC_MASK            (0xFFFFFFFFU)
#define POWERQUAD_MISC_INST_MISC_SHIFT           (0U)
/*! INST_MISC - For Matrix : Used for scaling factor
 */
#define POWERQUAD_MISC_INST_MISC(x)              (((uint32_t)(((uint32_t)(x)) << POWERQUAD_MISC_INST_MISC_SHIFT)) & POWERQUAD_MISC_INST_MISC_MASK)
/*! @} */

/*! @name CURSORY - Cursory */
/*! @{ */
#define POWERQUAD_CURSORY_CURSORY_MASK           (0x1U)
#define POWERQUAD_CURSORY_CURSORY_SHIFT          (0U)
/*! @} */

/*! @name CORDIC_X - Cordic input X */
/*! @{ */
#define POWERQUAD_CORDIC_X_CORDIC_X_MASK         (0xFFFFFFFFU)
#define POWERQUAD_CORDIC_X_CORDIC_X_SHIFT        (0U)
/*! CORDIC_X - Cordic Input x
 */
#define POWERQUAD_CORDIC_X_CORDIC_X(x)           (((uint32_t)(((uint32_t)(x)) << POWERQUAD_CORDIC_X_CORDIC_X_SHIFT)) & POWERQUAD_CORDIC_X_CORDIC_X_MASK)
/*! @} */

/*! @name CORDIC_Y - Cordic Input Y */
/*! @{ */
#define POWERQUAD_CORDIC_Y_CORDIC_Y_MASK         (0xFFFFFFFFU)
#define POWERQUAD_CORDIC_Y_CORDIC_Y_SHIFT        (0U)
/*! CORDIC_Y - Cordic Input y
 */
#define POWERQUAD_CORDIC_Y_CORDIC_Y(x)           (((uint32_t)(((uint32_t)(x)) << POWERQUAD_CORDIC_Y_CORDIC_Y_SHIFT)) & POWERQUAD_CORDIC_Y_CORDIC_Y_MASK)
/*! @} */

/*! @name CORDIC_Z - Cordic Input Z */
/*! @{ */
#define POWERQUAD_CORDIC_Z_CORDIC_Z_MASK         (0xFFFFFFFFU)
#define POWERQUAD_CORDIC_Z_CORDIC_Z_SHIFT        (0U)
/*! CORDIC_Z - Cordic Input z
 */
#define POWERQUAD_CORDIC_Z_CORDIC_Z(x)           (((uint32_t)(((uint32_t)(x)) << POWERQUAD_CORDIC_Z_CORDIC_Z_SHIFT)) & POWERQUAD_CORDIC_Z_CORDIC_Z_MASK)
/*! @} */

/*! @name ERRSTAT - Error Status */
/*! @{ */
#define POWERQUAD_ERRSTAT_OVERFLOW_MASK          (0x1U)
#define POWERQUAD_ERRSTAT_OVERFLOW_SHIFT         (0U)
#define POWERQUAD_ERRSTAT_NAN_MASK               (0x2U)
#define POWERQUAD_ERRSTAT_NAN_SHIFT              (1U)
#define POWERQUAD_ERRSTAT_FIXEDOVERFLOW_MASK     (0x4U)
#define POWERQUAD_ERRSTAT_FIXEDOVERFLOW_SHIFT    (2U)
#define POWERQUAD_ERRSTAT_UNDERFLOW_MASK         (0x8U)
#define POWERQUAD_ERRSTAT_UNDERFLOW_SHIFT        (3U)
#define POWERQUAD_ERRSTAT_BUSERROR_MASK          (0x10U)
#define POWERQUAD_ERRSTAT_BUSERROR_SHIFT         (4U)
/*! @} */

/*! @name INTREN - Interrupt Enable */
/*! @{ */
#define POWERQUAD_INTREN_INTR_OFLOW_MASK         (0x1U)
#define POWERQUAD_INTREN_INTR_OFLOW_SHIFT        (0U)
#define POWERQUAD_INTREN_INTR_NAN_MASK           (0x2U)
#define POWERQUAD_INTREN_INTR_NAN_SHIFT          (1U)
#define POWERQUAD_INTREN_INTR_FIXED_MASK         (0x4U)
#define POWERQUAD_INTREN_INTR_FIXED_SHIFT        (2U)
#define POWERQUAD_INTREN_INTR_UFLOW_MASK         (0x8U)
#define POWERQUAD_INTREN_INTR_UFLOW_SHIFT        (3U)
#define POWERQUAD_INTREN_INTR_BERR_MASK          (0x10U)
#define POWERQUAD_INTREN_INTR_BERR_SHIFT         (4U)
#define POWERQUAD_INTREN_INTR_COMP_MASK          (0x80U)
#define POWERQUAD_INTREN_INTR_COMP_SHIFT         (7U)
/*! @} */

/*! @name EVENTEN - Event Enable */
/*! @{ */
#define POWERQUAD_EVENTEN_EVENT_OFLOW_MASK       (0x1U)
#define POWERQUAD_EVENTEN_EVENT_OFLOW_SHIFT      (0U)
#define POWERQUAD_EVENTEN_EVENT_NAN_MASK         (0x2U)
#define POWERQUAD_EVENTEN_EVENT_NAN_SHIFT        (1U)
#define POWERQUAD_EVENTEN_EVENT_FIXED_MASK       (0x4U)
#define POWERQUAD_EVENTEN_EVENT_FIXED_SHIFT      (2U)
#define POWERQUAD_EVENTEN_EVENT_UFLOW_MASK       (0x8U)
#define POWERQUAD_EVENTEN_EVENT_UFLOW_SHIFT      (3U)
#define POWERQUAD_EVENTEN_EVENT_BERR_MASK        (0x10U)
#define POWERQUAD_EVENTEN_EVENT_BERR_SHIFT       (4U)
#define POWERQUAD_EVENTEN_EVENT_COMP_MASK        (0x80U)
#define POWERQUAD_EVENTEN_EVENT_COMP_SHIFT       (7U)
/*! @} */

/*! @name INTRSTAT - Interrupt Status */
/*! @{ */
#define POWERQUAD_INTRSTAT_INTR_STAT_MASK        (0x1U)
#define POWERQUAD_INTRSTAT_INTR_STAT_SHIFT       (0U)
/*! @} */

/*! @name GPREG - General Purpose Register Bank n */
/*! @{ */
#define POWERQUAD_GPREG_GPREG_MASK               (0xFFFFFFFFU)
#define POWERQUAD_GPREG_GPREG_SHIFT              (0U)
/*! GPREG - General Purpose Register Bank
 */
#define POWERQUAD_GPREG_GPREG(x)                 (((uint32_t)(((uint32_t)(x)) << POWERQUAD_GPREG_GPREG_SHIFT)) & POWERQUAD_GPREG_GPREG_MASK)
/*! @} */

/* The count of POWERQUAD_GPREG */
#define POWERQUAD_GPREG_COUNT                    (16U)

/*! @name COMPREGS_COMPREG - Compute Register Bank n */
/*! @{ */
#define POWERQUAD_COMPREGS_COMPREG_COMPREG_MASK  (0xFFFFFFFFU)
#define POWERQUAD_COMPREGS_COMPREG_COMPREG_SHIFT (0U)
/*! COMPREG - Compute Register Bank
 */
#define POWERQUAD_COMPREGS_COMPREG_COMPREG(x)    (((uint32_t)(((uint32_t)(x)) << POWERQUAD_COMPREGS_COMPREG_COMPREG_SHIFT)) & POWERQUAD_COMPREGS_COMPREG_COMPREG_MASK)
/*! @} */

/* The count of POWERQUAD_COMPREGS_COMPREG */
#define POWERQUAD_COMPREGS_COMPREG_COUNT         (8U)


/*!
 * @}
 */ /* end of group POWERQUAD_Register_Masks */


/* POWERQUAD - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral POWERQUAD base pointer */
  #define POWERQUAD_BASE_PTR                       ((POWERQUAD_MemMapPtr)0x50200000u)
  /** Peripheral POWERQUAD base pointer */
  #define POWERQUAD_BASE_PTR_NS                    ((POWERQUAD_MemMapPtr)0x40200000u)
  /** Array initializer of POWERQUAD peripheral base pointers */
  #define POWERQUAD_BASE_PTRS                      { POWERQUAD_BASE_PTR }
  /** Array initializer of POWERQUAD peripheral base pointers */
  #define POWERQUAD_BASE_PTRS_NS                   { POWERQUAD_BASE_PTR_NS }
#else
  /** Peripheral POWERQUAD base pointer */
  #define POWERQUAD_BASE_PTR                       ((POWERQUAD_MemMapPtr)0x40200000u)
  /** Array initializer of POWERQUAD peripheral base pointers */
  #define POWERQUAD_BASE_PTRS                      { POWERQUAD_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- POWERQUAD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup POWERQUAD_Register_Accessor_Macros POWERQUAD - Register accessor macros
 * @{
 */


/* POWERQUAD - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* POWERQUAD */
  #define POWERQUAD_OUTBASE                        POWERQUAD_OUTBASE_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_OUTBASE_NS                     POWERQUAD_OUTBASE_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_OUTFORMAT                      POWERQUAD_OUTFORMAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_OUTFORMAT_NS                   POWERQUAD_OUTFORMAT_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_TMPBASE                        POWERQUAD_TMPBASE_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_TMPBASE_NS                     POWERQUAD_TMPBASE_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_TMPFORMAT                      POWERQUAD_TMPFORMAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_TMPFORMAT_NS                   POWERQUAD_TMPFORMAT_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_INABASE                        POWERQUAD_INABASE_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INABASE_NS                     POWERQUAD_INABASE_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_INAFORMAT                      POWERQUAD_INAFORMAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INAFORMAT_NS                   POWERQUAD_INAFORMAT_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_INBBASE                        POWERQUAD_INBBASE_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INBBASE_NS                     POWERQUAD_INBBASE_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_INBFORMAT                      POWERQUAD_INBFORMAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INBFORMAT_NS                   POWERQUAD_INBFORMAT_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_CONTROL                        POWERQUAD_CONTROL_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CONTROL_NS                     POWERQUAD_CONTROL_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_LENGTH                         POWERQUAD_LENGTH_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_LENGTH_NS                      POWERQUAD_LENGTH_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_CPPRE                          POWERQUAD_CPPRE_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CPPRE_NS                       POWERQUAD_CPPRE_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_MISC                           POWERQUAD_MISC_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_MISC_NS                        POWERQUAD_MISC_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_CURSORY                        POWERQUAD_CURSORY_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CURSORY_NS                     POWERQUAD_CURSORY_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_CORDIC_X                       POWERQUAD_CORDIC_X_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CORDIC_X_NS                    POWERQUAD_CORDIC_X_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_CORDIC_Y                       POWERQUAD_CORDIC_Y_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CORDIC_Y_NS                    POWERQUAD_CORDIC_Y_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_CORDIC_Z                       POWERQUAD_CORDIC_Z_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CORDIC_Z_NS                    POWERQUAD_CORDIC_Z_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_ERRSTAT                        POWERQUAD_ERRSTAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_ERRSTAT_NS                     POWERQUAD_ERRSTAT_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_INTREN                         POWERQUAD_INTREN_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INTREN_NS                      POWERQUAD_INTREN_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_EVENTEN                        POWERQUAD_EVENTEN_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_EVENTEN_NS                     POWERQUAD_EVENTEN_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_INTRSTAT                       POWERQUAD_INTRSTAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INTRSTAT_NS                    POWERQUAD_INTRSTAT_REG(POWERQUAD_BASE_PTR_NS)
  #define POWERQUAD_GPREG0                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,0)
  #define POWERQUAD_GPREG0_NS                      POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,0)
  #define POWERQUAD_GPREG1                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,1)
  #define POWERQUAD_GPREG1_NS                      POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,1)
  #define POWERQUAD_GPREG2                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,2)
  #define POWERQUAD_GPREG2_NS                      POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,2)
  #define POWERQUAD_GPREG3                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,3)
  #define POWERQUAD_GPREG3_NS                      POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,3)
  #define POWERQUAD_GPREG4                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,4)
  #define POWERQUAD_GPREG4_NS                      POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,4)
  #define POWERQUAD_GPREG5                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,5)
  #define POWERQUAD_GPREG5_NS                      POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,5)
  #define POWERQUAD_GPREG6                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,6)
  #define POWERQUAD_GPREG6_NS                      POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,6)
  #define POWERQUAD_GPREG7                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,7)
  #define POWERQUAD_GPREG7_NS                      POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,7)
  #define POWERQUAD_GPREG8                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,8)
  #define POWERQUAD_GPREG8_NS                      POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,8)
  #define POWERQUAD_GPREG9                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,9)
  #define POWERQUAD_GPREG9_NS                      POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,9)
  #define POWERQUAD_GPREG10                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,10)
  #define POWERQUAD_GPREG10_NS                     POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,10)
  #define POWERQUAD_GPREG11                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,11)
  #define POWERQUAD_GPREG11_NS                     POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,11)
  #define POWERQUAD_GPREG12                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,12)
  #define POWERQUAD_GPREG12_NS                     POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,12)
  #define POWERQUAD_GPREG13                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,13)
  #define POWERQUAD_GPREG13_NS                     POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,13)
  #define POWERQUAD_GPREG14                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,14)
  #define POWERQUAD_GPREG14_NS                     POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,14)
  #define POWERQUAD_GPREG15                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,15)
  #define POWERQUAD_GPREG15_NS                     POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,15)
  #define POWERQUAD_COMPREG0                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,0)
  #define POWERQUAD_COMPREG0_NS                    POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR_NS,0)
  #define POWERQUAD_COMPREG1                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,1)
  #define POWERQUAD_COMPREG1_NS                    POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR_NS,1)
  #define POWERQUAD_COMPREG2                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,2)
  #define POWERQUAD_COMPREG2_NS                    POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR_NS,2)
  #define POWERQUAD_COMPREG3                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,3)
  #define POWERQUAD_COMPREG3_NS                    POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR_NS,3)
  #define POWERQUAD_COMPREG4                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,4)
  #define POWERQUAD_COMPREG4_NS                    POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR_NS,4)
  #define POWERQUAD_COMPREG5                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,5)
  #define POWERQUAD_COMPREG5_NS                    POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR_NS,5)
  #define POWERQUAD_COMPREG6                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,6)
  #define POWERQUAD_COMPREG6_NS                    POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR_NS,6)
  #define POWERQUAD_COMPREG7                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,7)
  #define POWERQUAD_COMPREG7_NS                    POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR_NS,7)
#else
  /* POWERQUAD */
  #define POWERQUAD_OUTBASE                        POWERQUAD_OUTBASE_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_OUTFORMAT                      POWERQUAD_OUTFORMAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_TMPBASE                        POWERQUAD_TMPBASE_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_TMPFORMAT                      POWERQUAD_TMPFORMAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INABASE                        POWERQUAD_INABASE_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INAFORMAT                      POWERQUAD_INAFORMAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INBBASE                        POWERQUAD_INBBASE_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INBFORMAT                      POWERQUAD_INBFORMAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CONTROL                        POWERQUAD_CONTROL_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_LENGTH                         POWERQUAD_LENGTH_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CPPRE                          POWERQUAD_CPPRE_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_MISC                           POWERQUAD_MISC_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CURSORY                        POWERQUAD_CURSORY_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CORDIC_X                       POWERQUAD_CORDIC_X_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CORDIC_Y                       POWERQUAD_CORDIC_Y_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_CORDIC_Z                       POWERQUAD_CORDIC_Z_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_ERRSTAT                        POWERQUAD_ERRSTAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INTREN                         POWERQUAD_INTREN_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_EVENTEN                        POWERQUAD_EVENTEN_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_INTRSTAT                       POWERQUAD_INTRSTAT_REG(POWERQUAD_BASE_PTR)
  #define POWERQUAD_GPREG0                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,0)
  #define POWERQUAD_GPREG1                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,1)
  #define POWERQUAD_GPREG2                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,2)
  #define POWERQUAD_GPREG3                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,3)
  #define POWERQUAD_GPREG4                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,4)
  #define POWERQUAD_GPREG5                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,5)
  #define POWERQUAD_GPREG6                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,6)
  #define POWERQUAD_GPREG7                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,7)
  #define POWERQUAD_GPREG8                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,8)
  #define POWERQUAD_GPREG9                         POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,9)
  #define POWERQUAD_GPREG10                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,10)
  #define POWERQUAD_GPREG11                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,11)
  #define POWERQUAD_GPREG12                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,12)
  #define POWERQUAD_GPREG13                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,13)
  #define POWERQUAD_GPREG14                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,14)
  #define POWERQUAD_GPREG15                        POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,15)
  #define POWERQUAD_COMPREG0                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,0)
  #define POWERQUAD_COMPREG1                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,1)
  #define POWERQUAD_COMPREG2                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,2)
  #define POWERQUAD_COMPREG3                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,3)
  #define POWERQUAD_COMPREG4                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,4)
  #define POWERQUAD_COMPREG5                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,5)
  #define POWERQUAD_COMPREG6                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,6)
  #define POWERQUAD_COMPREG7                       POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,7)
#endif

/* POWERQUAD - Register array accessors */
#define POWERQUAD_GPREG(index)                   POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,index)
#define POWERQUAD_GPREG_NS(index)                POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR_NS,index)
#define POWERQUAD_GPREG(index)                   POWERQUAD_GPREG_REG(POWERQUAD_BASE_PTR,index)
#define POWERQUAD_COMPREG(index)                 POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,index)
#define POWERQUAD_COMPREG_NS(index)              POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR_NS,index)
#define POWERQUAD_COMPREG(index)                 POWERQUAD_COMPREG_REG(POWERQUAD_BASE_PTR,index)

/*!
 * @}
 */ /* end of group POWERQUAD_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group POWERQUAD_Peripheral */


/* ----------------------------------------------------------------------------
   -- PUF
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PUF_Peripheral PUF
 * @{
 */

/** PUF - Peripheral register structure */
typedef struct PUF_MemMap {
  uint32_t CTRL;                                   /**< PUF Control, offset: 0x0 */
  uint32_t KEYINDEX;                               /**< PUF Key Index, offset: 0x4 */
  uint32_t KEYSIZE;                                /**< PUF Key Size, offset: 0x8 */
  uint8_t RESERVED_0[20];
  uint32_t STAT;                                   /**< PUF Status, offset: 0x20 */
  uint8_t RESERVED_1[4];
  uint32_t ALLOW;                                  /**< PUF Allow, offset: 0x28 */
  uint8_t RESERVED_2[20];
  uint32_t KEYINPUT;                               /**< PUF Key Input, offset: 0x40 */
  uint32_t CODEINPUT;                              /**< PUF Code Input, offset: 0x44 */
  uint32_t CODEOUTPUT;                             /**< PUF Code Output, offset: 0x48 */
  uint8_t RESERVED_3[20];
  uint32_t KEYOUTINDEX;                            /**< PUF Key Output Index, offset: 0x60 */
  uint32_t KEYOUTPUT;                              /**< PUF Key Output, offset: 0x64 */
  uint8_t RESERVED_4[116];
  uint32_t IFSTAT;                                 /**< PUF Interface Status and Clear, offset: 0xDC */
  uint8_t RESERVED_5[32];
  uint32_t INTEN;                                  /**< PUF Interrupt Enable, offset: 0x100 */
  uint32_t INTSTAT;                                /**< PUF Interrupt Status, offset: 0x104 */
  uint32_t PWRCTRL;                                /**< PUF Power Control, offset: 0x108 */
  uint32_t CFG;                                    /**< PUF Configuration, offset: 0x10C */
  uint8_t RESERVED_6[240];
  uint32_t KEYLOCK;                                /**< Key Lock, offset: 0x200 */
  uint32_t KEYENABLE;                              /**< Key Enable, offset: 0x204 */
  uint32_t KEYRESET;                               /**< Key Reset, offset: 0x208 */
  uint32_t IDXBLK_L;                               /**< Index Block Low, offset: 0x20C */
  uint32_t IDXBLK_H_DP;                            /**< Index Block High Duplicate, offset: 0x210 */
  uint32_t KEYMASK[4];                             /**< Key Mask 0..Key Mask 3, array offset: 0x214, array step: 0x4 */
  uint8_t RESERVED_7[48];
  uint32_t IDXBLK_H;                               /**< Index Block High, offset: 0x254 */
  uint32_t IDXBLK_L_DP;                            /**< Index Block Low Duplicate, offset: 0x258 */
} volatile *PUF_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- PUF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PUF_Register_Accessor_Macros PUF - Register accessor macros
 * @{
 */


/* PUF - Register accessors */
#define PUF_CTRL_REG(base)                       ((base)->CTRL)
#define PUF_KEYINDEX_REG(base)                   ((base)->KEYINDEX)
#define PUF_KEYSIZE_REG(base)                    ((base)->KEYSIZE)
#define PUF_STAT_REG(base)                       ((base)->STAT)
#define PUF_ALLOW_REG(base)                      ((base)->ALLOW)
#define PUF_KEYINPUT_REG(base)                   ((base)->KEYINPUT)
#define PUF_CODEINPUT_REG(base)                  ((base)->CODEINPUT)
#define PUF_CODEOUTPUT_REG(base)                 ((base)->CODEOUTPUT)
#define PUF_KEYOUTINDEX_REG(base)                ((base)->KEYOUTINDEX)
#define PUF_KEYOUTPUT_REG(base)                  ((base)->KEYOUTPUT)
#define PUF_IFSTAT_REG(base)                     ((base)->IFSTAT)
#define PUF_INTEN_REG(base)                      ((base)->INTEN)
#define PUF_INTSTAT_REG(base)                    ((base)->INTSTAT)
#define PUF_PWRCTRL_REG(base)                    ((base)->PWRCTRL)
#define PUF_CFG_REG(base)                        ((base)->CFG)
#define PUF_KEYLOCK_REG(base)                    ((base)->KEYLOCK)
#define PUF_KEYENABLE_REG(base)                  ((base)->KEYENABLE)
#define PUF_KEYRESET_REG(base)                   ((base)->KEYRESET)
#define PUF_IDXBLK_L_REG(base)                   ((base)->IDXBLK_L)
#define PUF_IDXBLK_H_DP_REG(base)                ((base)->IDXBLK_H_DP)
#define PUF_KEYMASK_REG(base,index)              ((base)->KEYMASK[index])
#define PUF_IDXBLK_H_REG(base)                   ((base)->IDXBLK_H)
#define PUF_IDXBLK_L_DP_REG(base)                ((base)->IDXBLK_L_DP)

/*!
 * @}
 */ /* end of group PUF_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- PUF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PUF_Register_Masks PUF Register Masks
 * @{
 */

/*! @name CTRL - PUF Control */
/*! @{ */
#define PUF_CTRL_ZEROIZE_MASK                    (0x1U)
#define PUF_CTRL_ZEROIZE_SHIFT                   (0U)
#define PUF_CTRL_ENROLL_MASK                     (0x2U)
#define PUF_CTRL_ENROLL_SHIFT                    (1U)
#define PUF_CTRL_START_MASK                      (0x4U)
#define PUF_CTRL_START_SHIFT                     (2U)
#define PUF_CTRL_GENERATEKEY_MASK                (0x8U)
#define PUF_CTRL_GENERATEKEY_SHIFT               (3U)
#define PUF_CTRL_SETKEY_MASK                     (0x10U)
#define PUF_CTRL_SETKEY_SHIFT                    (4U)
#define PUF_CTRL_GETKEY_MASK                     (0x40U)
#define PUF_CTRL_GETKEY_SHIFT                    (6U)
/*! @} */

/*! @name KEYINDEX - PUF Key Index */
/*! @{ */
#define PUF_KEYINDEX_KEYIDX_MASK                 (0xFU)
#define PUF_KEYINDEX_KEYIDX_SHIFT                (0U)
/*! KEYIDX - Key index for Set Key operations
 */
#define PUF_KEYINDEX_KEYIDX(x)                   (((uint32_t)(((uint32_t)(x)) << PUF_KEYINDEX_KEYIDX_SHIFT)) & PUF_KEYINDEX_KEYIDX_MASK)
/*! @} */

/*! @name KEYSIZE - PUF Key Size */
/*! @{ */
#define PUF_KEYSIZE_KEYSIZE_MASK                 (0x3FU)
#define PUF_KEYSIZE_KEYSIZE_SHIFT                (0U)
/*! KEYSIZE - Key Size for Set Key operations
 */
#define PUF_KEYSIZE_KEYSIZE(x)                   (((uint32_t)(((uint32_t)(x)) << PUF_KEYSIZE_KEYSIZE_SHIFT)) & PUF_KEYSIZE_KEYSIZE_MASK)
/*! @} */

/*! @name STAT - PUF Status */
/*! @{ */
#define PUF_STAT_BUSY_MASK                       (0x1U)
#define PUF_STAT_BUSY_SHIFT                      (0U)
#define PUF_STAT_SUCCESS_MASK                    (0x2U)
#define PUF_STAT_SUCCESS_SHIFT                   (1U)
#define PUF_STAT_ERROR_MASK                      (0x4U)
#define PUF_STAT_ERROR_SHIFT                     (2U)
#define PUF_STAT_KEYINREQ_MASK                   (0x10U)
#define PUF_STAT_KEYINREQ_SHIFT                  (4U)
#define PUF_STAT_KEYOUTAVAIL_MASK                (0x20U)
#define PUF_STAT_KEYOUTAVAIL_SHIFT               (5U)
#define PUF_STAT_CODEINREQ_MASK                  (0x40U)
#define PUF_STAT_CODEINREQ_SHIFT                 (6U)
#define PUF_STAT_CODEOUTAVAIL_MASK               (0x80U)
#define PUF_STAT_CODEOUTAVAIL_SHIFT              (7U)
/*! @} */

/*! @name ALLOW - PUF Allow */
/*! @{ */
#define PUF_ALLOW_ALLOWENROLL_MASK               (0x1U)
#define PUF_ALLOW_ALLOWENROLL_SHIFT              (0U)
#define PUF_ALLOW_ALLOWSTART_MASK                (0x2U)
#define PUF_ALLOW_ALLOWSTART_SHIFT               (1U)
#define PUF_ALLOW_ALLOWSETKEY_MASK               (0x4U)
#define PUF_ALLOW_ALLOWSETKEY_SHIFT              (2U)
#define PUF_ALLOW_ALLOWGETKEY_MASK               (0x8U)
#define PUF_ALLOW_ALLOWGETKEY_SHIFT              (3U)
/*! @} */

/*! @name KEYINPUT - PUF Key Input */
/*! @{ */
#define PUF_KEYINPUT_KEYIN_MASK                  (0xFFFFFFFFU)
#define PUF_KEYINPUT_KEYIN_SHIFT                 (0U)
/*! KEYIN - Key Input Data
 */
#define PUF_KEYINPUT_KEYIN(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_KEYINPUT_KEYIN_SHIFT)) & PUF_KEYINPUT_KEYIN_MASK)
/*! @} */

/*! @name CODEINPUT - PUF Code Input */
/*! @{ */
#define PUF_CODEINPUT_CODEIN_MASK                (0xFFFFFFFFU)
#define PUF_CODEINPUT_CODEIN_SHIFT               (0U)
/*! CODEIN - AC/KC Input Data
 */
#define PUF_CODEINPUT_CODEIN(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_CODEINPUT_CODEIN_SHIFT)) & PUF_CODEINPUT_CODEIN_MASK)
/*! @} */

/*! @name CODEOUTPUT - PUF Code Output */
/*! @{ */
#define PUF_CODEOUTPUT_CODEOUT_MASK              (0xFFFFFFFFU)
#define PUF_CODEOUTPUT_CODEOUT_SHIFT             (0U)
/*! CODEOUT - AC/KC Output Data
 */
#define PUF_CODEOUTPUT_CODEOUT(x)                (((uint32_t)(((uint32_t)(x)) << PUF_CODEOUTPUT_CODEOUT_SHIFT)) & PUF_CODEOUTPUT_CODEOUT_MASK)
/*! @} */

/*! @name KEYOUTINDEX - PUF Key Output Index */
/*! @{ */
#define PUF_KEYOUTINDEX_KEYOUTIDX_MASK           (0xFU)
#define PUF_KEYOUTINDEX_KEYOUTIDX_SHIFT          (0U)
/*! KEYOUTIDX - Key Output Index
 */
#define PUF_KEYOUTINDEX_KEYOUTIDX(x)             (((uint32_t)(((uint32_t)(x)) << PUF_KEYOUTINDEX_KEYOUTIDX_SHIFT)) & PUF_KEYOUTINDEX_KEYOUTIDX_MASK)
/*! @} */

/*! @name KEYOUTPUT - PUF Key Output */
/*! @{ */
#define PUF_KEYOUTPUT_KEYOUT_MASK                (0xFFFFFFFFU)
#define PUF_KEYOUTPUT_KEYOUT_SHIFT               (0U)
/*! KEYOUT - Key Output Data
 */
#define PUF_KEYOUTPUT_KEYOUT(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_KEYOUTPUT_KEYOUT_SHIFT)) & PUF_KEYOUTPUT_KEYOUT_MASK)
/*! @} */

/*! @name IFSTAT - PUF Interface Status and Clear */
/*! @{ */
#define PUF_IFSTAT_ERROR_MASK                    (0x1U)
#define PUF_IFSTAT_ERROR_SHIFT                   (0U)
/*! @} */

/*! @name INTEN - PUF Interrupt Enable */
/*! @{ */
#define PUF_INTEN_READYEN_MASK                   (0x1U)
#define PUF_INTEN_READYEN_SHIFT                  (0U)
#define PUF_INTEN_SUCCESEN_MASK                  (0x2U)
#define PUF_INTEN_SUCCESEN_SHIFT                 (1U)
#define PUF_INTEN_ERROREN_MASK                   (0x4U)
#define PUF_INTEN_ERROREN_SHIFT                  (2U)
#define PUF_INTEN_KEYINREQEN_MASK                (0x10U)
#define PUF_INTEN_KEYINREQEN_SHIFT               (4U)
#define PUF_INTEN_KEYOUTAVAILEN_MASK             (0x20U)
#define PUF_INTEN_KEYOUTAVAILEN_SHIFT            (5U)
#define PUF_INTEN_CODEINREQEN_MASK               (0x40U)
#define PUF_INTEN_CODEINREQEN_SHIFT              (6U)
#define PUF_INTEN_CODEOUTAVAILEN_MASK            (0x80U)
#define PUF_INTEN_CODEOUTAVAILEN_SHIFT           (7U)
/*! @} */

/*! @name INTSTAT - PUF Interrupt Status */
/*! @{ */
#define PUF_INTSTAT_READY_MASK                   (0x1U)
#define PUF_INTSTAT_READY_SHIFT                  (0U)
#define PUF_INTSTAT_SUCCESS_MASK                 (0x2U)
#define PUF_INTSTAT_SUCCESS_SHIFT                (1U)
#define PUF_INTSTAT_ERROR_MASK                   (0x4U)
#define PUF_INTSTAT_ERROR_SHIFT                  (2U)
#define PUF_INTSTAT_KEYINREQ_MASK                (0x10U)
#define PUF_INTSTAT_KEYINREQ_SHIFT               (4U)
#define PUF_INTSTAT_KEYOUTAVAIL_MASK             (0x20U)
#define PUF_INTSTAT_KEYOUTAVAIL_SHIFT            (5U)
#define PUF_INTSTAT_CODEINREQ_MASK               (0x40U)
#define PUF_INTSTAT_CODEINREQ_SHIFT              (6U)
#define PUF_INTSTAT_CODEOUTAVAIL_MASK            (0x80U)
#define PUF_INTSTAT_CODEOUTAVAIL_SHIFT           (7U)
/*! @} */

/*! @name PWRCTRL - PUF Power Control */
/*! @{ */
#define PUF_PWRCTRL_RAM_ON_MASK                  (0x1U)
#define PUF_PWRCTRL_RAM_ON_SHIFT                 (0U)
#define PUF_PWRCTRL_CK_DIS_MASK                  (0x4U)
#define PUF_PWRCTRL_CK_DIS_SHIFT                 (2U)
/*! @} */

/*! @name CFG - PUF Configuration */
/*! @{ */
#define PUF_CFG_BLOCKENROLL_SETKEY_MASK          (0x1U)
#define PUF_CFG_BLOCKENROLL_SETKEY_SHIFT         (0U)
#define PUF_CFG_BLOCKKEYOUTPUT_MASK              (0x2U)
#define PUF_CFG_BLOCKKEYOUTPUT_SHIFT             (1U)
/*! @} */

/*! @name KEYLOCK - Key Lock */
/*! @{ */
#define PUF_KEYLOCK_KEY0_MASK                    (0x3U)
#define PUF_KEYLOCK_KEY0_SHIFT                   (0U)
/*! KEY0 - Key 0
 *  0b00, 0b01, 0b11..Write access to KEY0MASK, KEYENABLE[KEY0] and KEYRESET[KEY0] is NOT allowed.
 *  0b10..Write access to KEY0MASK, KEYENABLE[KEY0] and KEYRESET[KEY0] is allowed.
 */
#define PUF_KEYLOCK_KEY0(x)                      (((uint32_t)(((uint32_t)(x)) << PUF_KEYLOCK_KEY0_SHIFT)) & PUF_KEYLOCK_KEY0_MASK)
#define PUF_KEYLOCK_KEY1_MASK                    (0xCU)
#define PUF_KEYLOCK_KEY1_SHIFT                   (2U)
/*! KEY1 - Key 1
 *  0b00, 0b01, 0b11..Write access to KEY1MASK, KEYENABLE[KEY1] and KEYRESET[KEY1] is NOT allowed.
 *  0b10..Write access to KEY1MASK, KEYENABLE[KEY1] and KEYRESET[KEY1] is allowed.
 */
#define PUF_KEYLOCK_KEY1(x)                      (((uint32_t)(((uint32_t)(x)) << PUF_KEYLOCK_KEY1_SHIFT)) & PUF_KEYLOCK_KEY1_MASK)
#define PUF_KEYLOCK_KEY2_MASK                    (0x30U)
#define PUF_KEYLOCK_KEY2_SHIFT                   (4U)
/*! KEY2 - Key 2
 *  0b00, 0b01, 0b11..Write access to KEY2MASK, KEYENABLE[KEY2] and KEYRESET[KEY2] is NOT allowed.
 *  0b10..Write access to KEY2MASK, KEYENABLE[KEY2] and KEYRESET[KEY2] is allowed.
 */
#define PUF_KEYLOCK_KEY2(x)                      (((uint32_t)(((uint32_t)(x)) << PUF_KEYLOCK_KEY2_SHIFT)) & PUF_KEYLOCK_KEY2_MASK)
#define PUF_KEYLOCK_KEY3_MASK                    (0xC0U)
#define PUF_KEYLOCK_KEY3_SHIFT                   (6U)
/*! KEY3 - Key 3
 *  0b00, 0b01, 0b11..Write access to KEY3MASK, KEYENABLE[KEY3] and KEYRESET[KEY3] is NOT allowed.
 *  0b10..Write access to KEY3MASK, KEYENABLE[KEY3] and KEYRESET[KEY3] is allowed.
 */
#define PUF_KEYLOCK_KEY3(x)                      (((uint32_t)(((uint32_t)(x)) << PUF_KEYLOCK_KEY3_SHIFT)) & PUF_KEYLOCK_KEY3_MASK)
/*! @} */

/*! @name KEYENABLE - Key Enable */
/*! @{ */
#define PUF_KEYENABLE_KEY0_MASK                  (0x3U)
#define PUF_KEYENABLE_KEY0_SHIFT                 (0U)
/*! KEY0 - Key 0
 *  0b00, 0b01, 0b11..Disabled
 *  0b10..Enabled
 */
#define PUF_KEYENABLE_KEY0(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_KEYENABLE_KEY0_SHIFT)) & PUF_KEYENABLE_KEY0_MASK)
#define PUF_KEYENABLE_KEY1_MASK                  (0xCU)
#define PUF_KEYENABLE_KEY1_SHIFT                 (2U)
/*! KEY1 - Key 1
 *  0b00, 0b01, 0b11..Data coming from the PUF Index 0 interface are NOT shifted in the KEY1 register.
 *  0b10..Data coming from the PUF Index 0 interface are shifted in the KEY1 register.
 */
#define PUF_KEYENABLE_KEY1(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_KEYENABLE_KEY1_SHIFT)) & PUF_KEYENABLE_KEY1_MASK)
#define PUF_KEYENABLE_KEY2_MASK                  (0x30U)
#define PUF_KEYENABLE_KEY2_SHIFT                 (4U)
/*! KEY2 - Key 2
 *  0b00, 0b01, 0b11..Data coming from the PUF Index 0 interface are NOT shifted in the KEY2 register.
 *  0b10..Data coming from the PUF Index 0 interface are shifted in the KEY2 register.
 */
#define PUF_KEYENABLE_KEY2(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_KEYENABLE_KEY2_SHIFT)) & PUF_KEYENABLE_KEY2_MASK)
#define PUF_KEYENABLE_KEY3_MASK                  (0xC0U)
#define PUF_KEYENABLE_KEY3_SHIFT                 (6U)
/*! KEY3 - Key 3
 *  0b00, 0b01, 0b11..Data coming from the PUF Index 0 interface are NOT shifted in the KEY3 register.
 *  0b10..Data coming from the PUF Index 0 interface are shifted in the KEY3 register.
 */
#define PUF_KEYENABLE_KEY3(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_KEYENABLE_KEY3_SHIFT)) & PUF_KEYENABLE_KEY3_MASK)
/*! @} */

/*! @name KEYRESET - Key Reset */
/*! @{ */
#define PUF_KEYRESET_KEY0_MASK                   (0x3U)
#define PUF_KEYRESET_KEY0_SHIFT                  (0U)
/*! KEY0 - Key 0
 *  0b10..Reset KEY0 Hold register and SHIFT_STATUS[KEY0].
 */
#define PUF_KEYRESET_KEY0(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_KEYRESET_KEY0_SHIFT)) & PUF_KEYRESET_KEY0_MASK)
#define PUF_KEYRESET_KEY1_MASK                   (0xCU)
#define PUF_KEYRESET_KEY1_SHIFT                  (2U)
/*! KEY1 - Key 1
 *  0b10..Reset KEY1 Hold register and SHIFT_STATUS[KEY1].
 */
#define PUF_KEYRESET_KEY1(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_KEYRESET_KEY1_SHIFT)) & PUF_KEYRESET_KEY1_MASK)
#define PUF_KEYRESET_KEY2_MASK                   (0x30U)
#define PUF_KEYRESET_KEY2_SHIFT                  (4U)
/*! KEY2 - Key 2
 *  0b10..Reset KEY2 Hold register and SHIFT_STATUS[KEY2].
 */
#define PUF_KEYRESET_KEY2(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_KEYRESET_KEY2_SHIFT)) & PUF_KEYRESET_KEY2_MASK)
#define PUF_KEYRESET_KEY3_MASK                   (0xC0U)
#define PUF_KEYRESET_KEY3_SHIFT                  (6U)
/*! KEY3 - Key 3
 *  0b10..Reset KEY3 Hold register and SHIFT_STATUS[KEY3].
 */
#define PUF_KEYRESET_KEY3(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_KEYRESET_KEY3_SHIFT)) & PUF_KEYRESET_KEY3_MASK)
/*! @} */

/*! @name IDXBLK_L - Index Block Low */
/*! @{ */
#define PUF_IDXBLK_L_IDX1_MASK                   (0xCU)
#define PUF_IDXBLK_L_IDX1_SHIFT                  (2U)
/*! IDX1 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_IDX1(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_IDX1_SHIFT)) & PUF_IDXBLK_L_IDX1_MASK)
#define PUF_IDXBLK_L_IDX2_MASK                   (0x30U)
#define PUF_IDXBLK_L_IDX2_SHIFT                  (4U)
/*! IDX2 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_IDX2(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_IDX2_SHIFT)) & PUF_IDXBLK_L_IDX2_MASK)
#define PUF_IDXBLK_L_IDX3_MASK                   (0xC0U)
#define PUF_IDXBLK_L_IDX3_SHIFT                  (6U)
/*! IDX3 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_IDX3(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_IDX3_SHIFT)) & PUF_IDXBLK_L_IDX3_MASK)
#define PUF_IDXBLK_L_IDX4_MASK                   (0x300U)
#define PUF_IDXBLK_L_IDX4_SHIFT                  (8U)
/*! IDX4 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_IDX4(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_IDX4_SHIFT)) & PUF_IDXBLK_L_IDX4_MASK)
#define PUF_IDXBLK_L_IDX5_MASK                   (0xC00U)
#define PUF_IDXBLK_L_IDX5_SHIFT                  (10U)
/*! IDX5 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_IDX5(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_IDX5_SHIFT)) & PUF_IDXBLK_L_IDX5_MASK)
#define PUF_IDXBLK_L_IDX6_MASK                   (0x3000U)
#define PUF_IDXBLK_L_IDX6_SHIFT                  (12U)
/*! IDX6 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_IDX6(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_IDX6_SHIFT)) & PUF_IDXBLK_L_IDX6_MASK)
#define PUF_IDXBLK_L_IDX7_MASK                   (0xC000U)
#define PUF_IDXBLK_L_IDX7_SHIFT                  (14U)
/*! IDX7 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_IDX7(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_IDX7_SHIFT)) & PUF_IDXBLK_L_IDX7_MASK)
#define PUF_IDXBLK_L_LOCK_IDX_MASK               (0xC0000000U)
#define PUF_IDXBLK_L_LOCK_IDX_SHIFT              (30U)
/*! LOCK_IDX - Lock Index
 */
#define PUF_IDXBLK_L_LOCK_IDX(x)                 (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_LOCK_IDX_SHIFT)) & PUF_IDXBLK_L_LOCK_IDX_MASK)
/*! @} */

/*! @name IDXBLK_H_DP - Index Block High Duplicate */
/*! @{ */
#define PUF_IDXBLK_H_DP_IDX8_MASK                (0x3U)
#define PUF_IDXBLK_H_DP_IDX8_SHIFT               (0U)
/*! IDX8 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_DP_IDX8(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_DP_IDX8_SHIFT)) & PUF_IDXBLK_H_DP_IDX8_MASK)
#define PUF_IDXBLK_H_DP_IDX9_MASK                (0xCU)
#define PUF_IDXBLK_H_DP_IDX9_SHIFT               (2U)
/*! IDX9 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_DP_IDX9(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_DP_IDX9_SHIFT)) & PUF_IDXBLK_H_DP_IDX9_MASK)
#define PUF_IDXBLK_H_DP_IDX10_MASK               (0x30U)
#define PUF_IDXBLK_H_DP_IDX10_SHIFT              (4U)
/*! IDX10 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_DP_IDX10(x)                 (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_DP_IDX10_SHIFT)) & PUF_IDXBLK_H_DP_IDX10_MASK)
#define PUF_IDXBLK_H_DP_IDX11_MASK               (0xC0U)
#define PUF_IDXBLK_H_DP_IDX11_SHIFT              (6U)
/*! IDX11 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_DP_IDX11(x)                 (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_DP_IDX11_SHIFT)) & PUF_IDXBLK_H_DP_IDX11_MASK)
#define PUF_IDXBLK_H_DP_IDX12_MASK               (0x300U)
#define PUF_IDXBLK_H_DP_IDX12_SHIFT              (8U)
/*! IDX12 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_DP_IDX12(x)                 (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_DP_IDX12_SHIFT)) & PUF_IDXBLK_H_DP_IDX12_MASK)
#define PUF_IDXBLK_H_DP_IDX13_MASK               (0xC00U)
#define PUF_IDXBLK_H_DP_IDX13_SHIFT              (10U)
/*! IDX13 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_DP_IDX13(x)                 (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_DP_IDX13_SHIFT)) & PUF_IDXBLK_H_DP_IDX13_MASK)
#define PUF_IDXBLK_H_DP_IDX14_MASK               (0x3000U)
#define PUF_IDXBLK_H_DP_IDX14_SHIFT              (12U)
/*! IDX14 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_DP_IDX14(x)                 (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_DP_IDX14_SHIFT)) & PUF_IDXBLK_H_DP_IDX14_MASK)
#define PUF_IDXBLK_H_DP_IDX15_MASK               (0xC000U)
#define PUF_IDXBLK_H_DP_IDX15_SHIFT              (14U)
/*! IDX15 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_DP_IDX15(x)                 (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_DP_IDX15_SHIFT)) & PUF_IDXBLK_H_DP_IDX15_MASK)
/*! @} */

/*! @name KEYMASK - Key Mask 0..Key Mask 3 */
/*! @{ */
#define PUF_KEYMASK_KEYMASK_MASK                 (0xFFFFFFFFU)
#define PUF_KEYMASK_KEYMASK_SHIFT                (0U)
/*! KEYMASK - Key a Mask
 */
#define PUF_KEYMASK_KEYMASK(x)                   (((uint32_t)(((uint32_t)(x)) << PUF_KEYMASK_KEYMASK_SHIFT)) & PUF_KEYMASK_KEYMASK_MASK)
/*! @} */

/* The count of PUF_KEYMASK */
#define PUF_KEYMASK_COUNT                        (4U)

/*! @name IDXBLK_H - Index Block High */
/*! @{ */
#define PUF_IDXBLK_H_IDX8_MASK                   (0x3U)
#define PUF_IDXBLK_H_IDX8_SHIFT                  (0U)
/*! IDX8 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_IDX8(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_IDX8_SHIFT)) & PUF_IDXBLK_H_IDX8_MASK)
#define PUF_IDXBLK_H_IDX9_MASK                   (0xCU)
#define PUF_IDXBLK_H_IDX9_SHIFT                  (2U)
/*! IDX9 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_IDX9(x)                     (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_IDX9_SHIFT)) & PUF_IDXBLK_H_IDX9_MASK)
#define PUF_IDXBLK_H_IDX10_MASK                  (0x30U)
#define PUF_IDXBLK_H_IDX10_SHIFT                 (4U)
/*! IDX10 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_IDX10(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_IDX10_SHIFT)) & PUF_IDXBLK_H_IDX10_MASK)
#define PUF_IDXBLK_H_IDX11_MASK                  (0xC0U)
#define PUF_IDXBLK_H_IDX11_SHIFT                 (6U)
/*! IDX11 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_IDX11(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_IDX11_SHIFT)) & PUF_IDXBLK_H_IDX11_MASK)
#define PUF_IDXBLK_H_IDX12_MASK                  (0x300U)
#define PUF_IDXBLK_H_IDX12_SHIFT                 (8U)
/*! IDX12 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_IDX12(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_IDX12_SHIFT)) & PUF_IDXBLK_H_IDX12_MASK)
#define PUF_IDXBLK_H_IDX13_MASK                  (0xC00U)
#define PUF_IDXBLK_H_IDX13_SHIFT                 (10U)
/*! IDX13 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_IDX13(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_IDX13_SHIFT)) & PUF_IDXBLK_H_IDX13_MASK)
#define PUF_IDXBLK_H_IDX14_MASK                  (0x3000U)
#define PUF_IDXBLK_H_IDX14_SHIFT                 (12U)
/*! IDX14 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_IDX14(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_IDX14_SHIFT)) & PUF_IDXBLK_H_IDX14_MASK)
#define PUF_IDXBLK_H_IDX15_MASK                  (0xC000U)
#define PUF_IDXBLK_H_IDX15_SHIFT                 (14U)
/*! IDX15 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_H_IDX15(x)                    (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_IDX15_SHIFT)) & PUF_IDXBLK_H_IDX15_MASK)
#define PUF_IDXBLK_H_LOCK_IDX_MASK               (0xC0000000U)
#define PUF_IDXBLK_H_LOCK_IDX_SHIFT              (30U)
/*! LOCK_IDX - Lock Index
 */
#define PUF_IDXBLK_H_LOCK_IDX(x)                 (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_H_LOCK_IDX_SHIFT)) & PUF_IDXBLK_H_LOCK_IDX_MASK)
/*! @} */

/*! @name IDXBLK_L_DP - Index Block Low Duplicate */
/*! @{ */
#define PUF_IDXBLK_L_DP_IDX0_MASK                (0x3U)
#define PUF_IDXBLK_L_DP_IDX0_SHIFT               (0U)
/*! IDX0 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_DP_IDX0(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_DP_IDX0_SHIFT)) & PUF_IDXBLK_L_DP_IDX0_MASK)
#define PUF_IDXBLK_L_DP_IDX1_MASK                (0xCU)
#define PUF_IDXBLK_L_DP_IDX1_SHIFT               (2U)
/*! IDX1 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_DP_IDX1(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_DP_IDX1_SHIFT)) & PUF_IDXBLK_L_DP_IDX1_MASK)
#define PUF_IDXBLK_L_DP_IDX2_MASK                (0x30U)
#define PUF_IDXBLK_L_DP_IDX2_SHIFT               (4U)
/*! IDX2 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_DP_IDX2(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_DP_IDX2_SHIFT)) & PUF_IDXBLK_L_DP_IDX2_MASK)
#define PUF_IDXBLK_L_DP_IDX3_MASK                (0xC0U)
#define PUF_IDXBLK_L_DP_IDX3_SHIFT               (6U)
/*! IDX3 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_DP_IDX3(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_DP_IDX3_SHIFT)) & PUF_IDXBLK_L_DP_IDX3_MASK)
#define PUF_IDXBLK_L_DP_IDX4_MASK                (0x300U)
#define PUF_IDXBLK_L_DP_IDX4_SHIFT               (8U)
/*! IDX4 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_DP_IDX4(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_DP_IDX4_SHIFT)) & PUF_IDXBLK_L_DP_IDX4_MASK)
#define PUF_IDXBLK_L_DP_IDX5_MASK                (0xC00U)
#define PUF_IDXBLK_L_DP_IDX5_SHIFT               (10U)
/*! IDX5 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_DP_IDX5(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_DP_IDX5_SHIFT)) & PUF_IDXBLK_L_DP_IDX5_MASK)
#define PUF_IDXBLK_L_DP_IDX6_MASK                (0x3000U)
#define PUF_IDXBLK_L_DP_IDX6_SHIFT               (12U)
/*! IDX6 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_DP_IDX6(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_DP_IDX6_SHIFT)) & PUF_IDXBLK_L_DP_IDX6_MASK)
#define PUF_IDXBLK_L_DP_IDX7_MASK                (0xC000U)
#define PUF_IDXBLK_L_DP_IDX7_SHIFT               (14U)
/*! IDX7 - Index n
 *  0b10..PUF index is accessible.
 *  0b01..PUF index is blocked.
 *  0b00, 0b11..Reserved
 */
#define PUF_IDXBLK_L_DP_IDX7(x)                  (((uint32_t)(((uint32_t)(x)) << PUF_IDXBLK_L_DP_IDX7_SHIFT)) & PUF_IDXBLK_L_DP_IDX7_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group PUF_Register_Masks */


/* PUF - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral PUF base pointer */
  #define PUF_BASE_PTR                             ((PUF_MemMapPtr)0x50006000u)
  /** Peripheral PUF base pointer */
  #define PUF_BASE_PTR_NS                          ((PUF_MemMapPtr)0x40006000u)
  /** Array initializer of PUF peripheral base pointers */
  #define PUF_BASE_PTRS                            { PUF_BASE_PTR }
  /** Array initializer of PUF peripheral base pointers */
  #define PUF_BASE_PTRS_NS                         { PUF_BASE_PTR_NS }
#else
  /** Peripheral PUF base pointer */
  #define PUF_BASE_PTR                             ((PUF_MemMapPtr)0x40006000u)
  /** Array initializer of PUF peripheral base pointers */
  #define PUF_BASE_PTRS                            { PUF_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- PUF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PUF_Register_Accessor_Macros PUF - Register accessor macros
 * @{
 */


/* PUF - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* PUF */
  #define PUF_CTRL                                 PUF_CTRL_REG(PUF_BASE_PTR)
  #define PUF_CTRL_NS                              PUF_CTRL_REG(PUF_BASE_PTR_NS)
  #define PUF_KEYINDEX                             PUF_KEYINDEX_REG(PUF_BASE_PTR)
  #define PUF_KEYINDEX_NS                          PUF_KEYINDEX_REG(PUF_BASE_PTR_NS)
  #define PUF_KEYSIZE                              PUF_KEYSIZE_REG(PUF_BASE_PTR)
  #define PUF_KEYSIZE_NS                           PUF_KEYSIZE_REG(PUF_BASE_PTR_NS)
  #define PUF_STAT                                 PUF_STAT_REG(PUF_BASE_PTR)
  #define PUF_STAT_NS                              PUF_STAT_REG(PUF_BASE_PTR_NS)
  #define PUF_ALLOW                                PUF_ALLOW_REG(PUF_BASE_PTR)
  #define PUF_ALLOW_NS                             PUF_ALLOW_REG(PUF_BASE_PTR_NS)
  #define PUF_KEYINPUT                             PUF_KEYINPUT_REG(PUF_BASE_PTR)
  #define PUF_KEYINPUT_NS                          PUF_KEYINPUT_REG(PUF_BASE_PTR_NS)
  #define PUF_CODEINPUT                            PUF_CODEINPUT_REG(PUF_BASE_PTR)
  #define PUF_CODEINPUT_NS                         PUF_CODEINPUT_REG(PUF_BASE_PTR_NS)
  #define PUF_CODEOUTPUT                           PUF_CODEOUTPUT_REG(PUF_BASE_PTR)
  #define PUF_CODEOUTPUT_NS                        PUF_CODEOUTPUT_REG(PUF_BASE_PTR_NS)
  #define PUF_KEYOUTINDEX                          PUF_KEYOUTINDEX_REG(PUF_BASE_PTR)
  #define PUF_KEYOUTINDEX_NS                       PUF_KEYOUTINDEX_REG(PUF_BASE_PTR_NS)
  #define PUF_KEYOUTPUT                            PUF_KEYOUTPUT_REG(PUF_BASE_PTR)
  #define PUF_KEYOUTPUT_NS                         PUF_KEYOUTPUT_REG(PUF_BASE_PTR_NS)
  #define PUF_IFSTAT                               PUF_IFSTAT_REG(PUF_BASE_PTR)
  #define PUF_IFSTAT_NS                            PUF_IFSTAT_REG(PUF_BASE_PTR_NS)
  #define PUF_INTEN                                PUF_INTEN_REG(PUF_BASE_PTR)
  #define PUF_INTEN_NS                             PUF_INTEN_REG(PUF_BASE_PTR_NS)
  #define PUF_INTSTAT                              PUF_INTSTAT_REG(PUF_BASE_PTR)
  #define PUF_INTSTAT_NS                           PUF_INTSTAT_REG(PUF_BASE_PTR_NS)
  #define PUF_PWRCTRL                              PUF_PWRCTRL_REG(PUF_BASE_PTR)
  #define PUF_PWRCTRL_NS                           PUF_PWRCTRL_REG(PUF_BASE_PTR_NS)
  #define PUF_CFG                                  PUF_CFG_REG(PUF_BASE_PTR)
  #define PUF_CFG_NS                               PUF_CFG_REG(PUF_BASE_PTR_NS)
  #define PUF_KEYLOCK                              PUF_KEYLOCK_REG(PUF_BASE_PTR)
  #define PUF_KEYLOCK_NS                           PUF_KEYLOCK_REG(PUF_BASE_PTR_NS)
  #define PUF_KEYENABLE                            PUF_KEYENABLE_REG(PUF_BASE_PTR)
  #define PUF_KEYENABLE_NS                         PUF_KEYENABLE_REG(PUF_BASE_PTR_NS)
  #define PUF_KEYRESET                             PUF_KEYRESET_REG(PUF_BASE_PTR)
  #define PUF_KEYRESET_NS                          PUF_KEYRESET_REG(PUF_BASE_PTR_NS)
  #define PUF_IDXBLK_L                             PUF_IDXBLK_L_REG(PUF_BASE_PTR)
  #define PUF_IDXBLK_L_NS                          PUF_IDXBLK_L_REG(PUF_BASE_PTR_NS)
  #define PUF_IDXBLK_H_DP                          PUF_IDXBLK_H_DP_REG(PUF_BASE_PTR)
  #define PUF_IDXBLK_H_DP_NS                       PUF_IDXBLK_H_DP_REG(PUF_BASE_PTR_NS)
  #define PUF_KEY0MASK                             PUF_KEYMASK_REG(PUF_BASE_PTR,0)
  #define PUF_KEY0MASK_NS                          PUF_KEYMASK_REG(PUF_BASE_PTR_NS,0)
  #define PUF_KEY1MASK                             PUF_KEYMASK_REG(PUF_BASE_PTR,1)
  #define PUF_KEY1MASK_NS                          PUF_KEYMASK_REG(PUF_BASE_PTR_NS,1)
  #define PUF_KEY2MASK                             PUF_KEYMASK_REG(PUF_BASE_PTR,2)
  #define PUF_KEY2MASK_NS                          PUF_KEYMASK_REG(PUF_BASE_PTR_NS,2)
  #define PUF_KEY3MASK                             PUF_KEYMASK_REG(PUF_BASE_PTR,3)
  #define PUF_KEY3MASK_NS                          PUF_KEYMASK_REG(PUF_BASE_PTR_NS,3)
  #define PUF_IDXBLK_H                             PUF_IDXBLK_H_REG(PUF_BASE_PTR)
  #define PUF_IDXBLK_H_NS                          PUF_IDXBLK_H_REG(PUF_BASE_PTR_NS)
  #define PUF_IDXBLK_L_DP                          PUF_IDXBLK_L_DP_REG(PUF_BASE_PTR)
  #define PUF_IDXBLK_L_DP_NS                       PUF_IDXBLK_L_DP_REG(PUF_BASE_PTR_NS)
#else
  /* PUF */
  #define PUF_CTRL                                 PUF_CTRL_REG(PUF_BASE_PTR)
  #define PUF_KEYINDEX                             PUF_KEYINDEX_REG(PUF_BASE_PTR)
  #define PUF_KEYSIZE                              PUF_KEYSIZE_REG(PUF_BASE_PTR)
  #define PUF_STAT                                 PUF_STAT_REG(PUF_BASE_PTR)
  #define PUF_ALLOW                                PUF_ALLOW_REG(PUF_BASE_PTR)
  #define PUF_KEYINPUT                             PUF_KEYINPUT_REG(PUF_BASE_PTR)
  #define PUF_CODEINPUT                            PUF_CODEINPUT_REG(PUF_BASE_PTR)
  #define PUF_CODEOUTPUT                           PUF_CODEOUTPUT_REG(PUF_BASE_PTR)
  #define PUF_KEYOUTINDEX                          PUF_KEYOUTINDEX_REG(PUF_BASE_PTR)
  #define PUF_KEYOUTPUT                            PUF_KEYOUTPUT_REG(PUF_BASE_PTR)
  #define PUF_IFSTAT                               PUF_IFSTAT_REG(PUF_BASE_PTR)
  #define PUF_INTEN                                PUF_INTEN_REG(PUF_BASE_PTR)
  #define PUF_INTSTAT                              PUF_INTSTAT_REG(PUF_BASE_PTR)
  #define PUF_PWRCTRL                              PUF_PWRCTRL_REG(PUF_BASE_PTR)
  #define PUF_CFG                                  PUF_CFG_REG(PUF_BASE_PTR)
  #define PUF_KEYLOCK                              PUF_KEYLOCK_REG(PUF_BASE_PTR)
  #define PUF_KEYENABLE                            PUF_KEYENABLE_REG(PUF_BASE_PTR)
  #define PUF_KEYRESET                             PUF_KEYRESET_REG(PUF_BASE_PTR)
  #define PUF_IDXBLK_L                             PUF_IDXBLK_L_REG(PUF_BASE_PTR)
  #define PUF_IDXBLK_H_DP                          PUF_IDXBLK_H_DP_REG(PUF_BASE_PTR)
  #define PUF_KEY0MASK                             PUF_KEYMASK_REG(PUF_BASE_PTR,0)
  #define PUF_KEY1MASK                             PUF_KEYMASK_REG(PUF_BASE_PTR,1)
  #define PUF_KEY2MASK                             PUF_KEYMASK_REG(PUF_BASE_PTR,2)
  #define PUF_KEY3MASK                             PUF_KEYMASK_REG(PUF_BASE_PTR,3)
  #define PUF_IDXBLK_H                             PUF_IDXBLK_H_REG(PUF_BASE_PTR)
  #define PUF_IDXBLK_L_DP                          PUF_IDXBLK_L_DP_REG(PUF_BASE_PTR)
#endif

/* PUF - Register array accessors */
#define PUF_KEYMASK(index)                       PUF_KEYMASK_REG(PUF_BASE_PTR,index)
#define PUF_KEYMASK_NS(index)                    PUF_KEYMASK_REG(PUF_BASE_PTR_NS,index)
#define PUF_KEYMASK(index)                       PUF_KEYMASK_REG(PUF_BASE_PTR,index)

/*!
 * @}
 */ /* end of group PUF_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group PUF_Peripheral */


/* ----------------------------------------------------------------------------
   -- RSTCTL0
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RSTCTL0_Peripheral RSTCTL0
 * @{
 */

/** RSTCTL0 - Peripheral register structure */
typedef struct RSTCTL0_MemMap {
  uint32_t SYSRSTSTAT;                             /**< System Reset Status Register, offset: 0x0 */
  uint8_t RESERVED_0[12];
  uint32_t PRSTCTL0;                               /**< Peripheral Reset Control Register 0, offset: 0x10 */
  uint32_t PRSTCTL1;                               /**< Peripheral Reset Control Register 1, offset: 0x14 */
  uint32_t PRSTCTL2;                               /**< Peripheral Reset Control Register 2, offset: 0x18 */
  uint8_t RESERVED_1[36];
  uint32_t PRSTCTL0_SET;                           /**< Peripheral Reset Control Register 0 SET, offset: 0x40 */
  uint32_t PRSTCTL1_SET;                           /**< Peripheral Reset Control Register 1 SET, offset: 0x44 */
  uint32_t PRSTCTL2_SET;                           /**< Peripheral Reset Control Register 2 SET, offset: 0x48 */
  uint8_t RESERVED_2[36];
  uint32_t PRSTCTL0_CLR;                           /**< Peripheral Reset Control Register 0 CLR, offset: 0x70 */
  uint32_t PRSTCTL1_CLR;                           /**< Peripheral Reset Control Register 1 CLR, offset: 0x74 */
  uint32_t PRSTCTL2_CLR;                           /**< Peripheral Reset Control Register 2 CLR, offset: 0x78 */
} volatile *RSTCTL0_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- RSTCTL0 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RSTCTL0_Register_Accessor_Macros RSTCTL0 - Register accessor macros
 * @{
 */


/* RSTCTL0 - Register accessors */
#define RSTCTL0_SYSRSTSTAT_REG(base)             ((base)->SYSRSTSTAT)
#define RSTCTL0_PRSTCTL0_REG(base)               ((base)->PRSTCTL0)
#define RSTCTL0_PRSTCTL1_REG(base)               ((base)->PRSTCTL1)
#define RSTCTL0_PRSTCTL2_REG(base)               ((base)->PRSTCTL2)
#define RSTCTL0_PRSTCTL0_SET_REG(base)           ((base)->PRSTCTL0_SET)
#define RSTCTL0_PRSTCTL1_SET_REG(base)           ((base)->PRSTCTL1_SET)
#define RSTCTL0_PRSTCTL2_SET_REG(base)           ((base)->PRSTCTL2_SET)
#define RSTCTL0_PRSTCTL0_CLR_REG(base)           ((base)->PRSTCTL0_CLR)
#define RSTCTL0_PRSTCTL1_CLR_REG(base)           ((base)->PRSTCTL1_CLR)
#define RSTCTL0_PRSTCTL2_CLR_REG(base)           ((base)->PRSTCTL2_CLR)

/*!
 * @}
 */ /* end of group RSTCTL0_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- RSTCTL0 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RSTCTL0_Register_Masks RSTCTL0 Register Masks
 * @{
 */

/*! @name SYSRSTSTAT - System Reset Status Register */
/*! @{ */
#define RSTCTL0_SYSRSTSTAT_VDD_POR_MASK          (0x1U)
#define RSTCTL0_SYSRSTSTAT_VDD_POR_SHIFT         (0U)
#define RSTCTL0_SYSRSTSTAT_PAD_RESET_MASK        (0x10U)
#define RSTCTL0_SYSRSTSTAT_PAD_RESET_SHIFT       (4U)
#define RSTCTL0_SYSRSTSTAT_ARM_RESET_MASK        (0x20U)
#define RSTCTL0_SYSRSTSTAT_ARM_RESET_SHIFT       (5U)
#define RSTCTL0_SYSRSTSTAT_WDT0_RESET_MASK       (0x40U)
#define RSTCTL0_SYSRSTSTAT_WDT0_RESET_SHIFT      (6U)
#define RSTCTL0_SYSRSTSTAT_WDT1_RESET_MASK       (0x80U)
#define RSTCTL0_SYSRSTSTAT_WDT1_RESET_SHIFT      (7U)
/*! @} */

/*! @name PRSTCTL0 - Peripheral Reset Control Register 0 */
/*! @{ */
#define RSTCTL0_PRSTCTL0_DSP_MASK                (0x2U)
#define RSTCTL0_PRSTCTL0_DSP_SHIFT               (1U)
#define RSTCTL0_PRSTCTL0_AXI_SWITCH_MASK         (0x8U)
#define RSTCTL0_PRSTCTL0_AXI_SWITCH_SHIFT        (3U)
#define RSTCTL0_PRSTCTL0_POWERQUAD_MASK          (0x100U)
#define RSTCTL0_PRSTCTL0_POWERQUAD_SHIFT         (8U)
#define RSTCTL0_PRSTCTL0_CASPER_MASK             (0x200U)
#define RSTCTL0_PRSTCTL0_CASPER_SHIFT            (9U)
#define RSTCTL0_PRSTCTL0_HASHCRYPT_MASK          (0x400U)
#define RSTCTL0_PRSTCTL0_HASHCRYPT_SHIFT         (10U)
#define RSTCTL0_PRSTCTL0_PUF_MASK                (0x800U)
#define RSTCTL0_PRSTCTL0_PUF_SHIFT               (11U)
#define RSTCTL0_PRSTCTL0_RNG_MASK                (0x1000U)
#define RSTCTL0_PRSTCTL0_RNG_SHIFT               (12U)
#define RSTCTL0_PRSTCTL0_FLEXSPI0_OTFAD_MASK     (0x10000U)
#define RSTCTL0_PRSTCTL0_FLEXSPI0_OTFAD_SHIFT    (16U)
#define RSTCTL0_PRSTCTL0_FLEXSPI1_MASK           (0x40000U)
#define RSTCTL0_PRSTCTL0_FLEXSPI1_SHIFT          (18U)
#define RSTCTL0_PRSTCTL0_USBHS_PHY_MASK          (0x100000U)
#define RSTCTL0_PRSTCTL0_USBHS_PHY_SHIFT         (20U)
#define RSTCTL0_PRSTCTL0_USBHS_DEVICE_MASK       (0x200000U)
#define RSTCTL0_PRSTCTL0_USBHS_DEVICE_SHIFT      (21U)
#define RSTCTL0_PRSTCTL0_USBHS_HOST_MASK         (0x400000U)
#define RSTCTL0_PRSTCTL0_USBHS_HOST_SHIFT        (22U)
#define RSTCTL0_PRSTCTL0_USBHS_SRAM_MASK         (0x800000U)
#define RSTCTL0_PRSTCTL0_USBHS_SRAM_SHIFT        (23U)
#define RSTCTL0_PRSTCTL0_SCT_MASK                (0x1000000U)
#define RSTCTL0_PRSTCTL0_SCT_SHIFT               (24U)
#define RSTCTL0_PRSTCTL0_GPU_MASK                (0x4000000U)
#define RSTCTL0_PRSTCTL0_GPU_SHIFT               (26U)
#define RSTCTL0_PRSTCTL0_DISPLAY_CONTROLLER_MASK (0x8000000U)
#define RSTCTL0_PRSTCTL0_DISPLAY_CONTROLLER_SHIFT (27U)
#define RSTCTL0_PRSTCTL0_MIPI_DSI_CONTROLLER_MASK (0x10000000U)
#define RSTCTL0_PRSTCTL0_MIPI_DSI_CONTROLLER_SHIFT (28U)
#define RSTCTL0_PRSTCTL0_MIPI_DSI_PHY_MASK       (0x20000000U)
#define RSTCTL0_PRSTCTL0_MIPI_DSI_PHY_SHIFT      (29U)
#define RSTCTL0_PRSTCTL0_SMARTDMA_MASK           (0x40000000U)
#define RSTCTL0_PRSTCTL0_SMARTDMA_SHIFT          (30U)
/*! @} */

/*! @name PRSTCTL1 - Peripheral Reset Control Register 1 */
/*! @{ */
#define RSTCTL0_PRSTCTL1_SDIO0_MASK              (0x4U)
#define RSTCTL0_PRSTCTL1_SDIO0_SHIFT             (2U)
#define RSTCTL0_PRSTCTL1_SDIO1_MASK              (0x8U)
#define RSTCTL0_PRSTCTL1_SDIO1_SHIFT             (3U)
#define RSTCTL0_PRSTCTL1_ACMP0_MASK              (0x8000U)
#define RSTCTL0_PRSTCTL1_ACMP0_SHIFT             (15U)
#define RSTCTL0_PRSTCTL1_ADC0_MASK               (0x10000U)
#define RSTCTL0_PRSTCTL1_ADC0_SHIFT              (16U)
#define RSTCTL0_PRSTCTL1_SHSGPIO0_MASK           (0x1000000U)
#define RSTCTL0_PRSTCTL1_SHSGPIO0_SHIFT          (24U)
/*! @} */

/*! @name PRSTCTL2 - Peripheral Reset Control Register 2 */
/*! @{ */
#define RSTCTL0_PRSTCTL2_UTICK0_MASK             (0x1U)
#define RSTCTL0_PRSTCTL2_UTICK0_SHIFT            (0U)
#define RSTCTL0_PRSTCTL2_WWDT0_MASK              (0x2U)
#define RSTCTL0_PRSTCTL2_WWDT0_SHIFT             (1U)
/*! @} */

/*! @name PRSTCTL0_SET - Peripheral Reset Control Register 0 SET */
/*! @{ */
#define RSTCTL0_PRSTCTL0_SET_DSP_MASK            (0x2U)
#define RSTCTL0_PRSTCTL0_SET_DSP_SHIFT           (1U)
#define RSTCTL0_PRSTCTL0_SET_AXI_SWITCH_MASK     (0x8U)
#define RSTCTL0_PRSTCTL0_SET_AXI_SWITCH_SHIFT    (3U)
#define RSTCTL0_PRSTCTL0_SET_POWERQUAD_MASK      (0x100U)
#define RSTCTL0_PRSTCTL0_SET_POWERQUAD_SHIFT     (8U)
#define RSTCTL0_PRSTCTL0_SET_CASPER_MASK         (0x200U)
#define RSTCTL0_PRSTCTL0_SET_CASPER_SHIFT        (9U)
#define RSTCTL0_PRSTCTL0_SET_HASHCRYPT_MASK      (0x400U)
#define RSTCTL0_PRSTCTL0_SET_HASHCRYPT_SHIFT     (10U)
#define RSTCTL0_PRSTCTL0_SET_PUF_MASK            (0x800U)
#define RSTCTL0_PRSTCTL0_SET_PUF_SHIFT           (11U)
#define RSTCTL0_PRSTCTL0_SET_RNG_MASK            (0x1000U)
#define RSTCTL0_PRSTCTL0_SET_RNG_SHIFT           (12U)
#define RSTCTL0_PRSTCTL0_SET_FLEXSPI0_OTFAD_MASK (0x10000U)
#define RSTCTL0_PRSTCTL0_SET_FLEXSPI0_OTFAD_SHIFT (16U)
#define RSTCTL0_PRSTCTL0_SET_FLEXSPI1_MASK       (0x40000U)
#define RSTCTL0_PRSTCTL0_SET_FLEXSPI1_SHIFT      (18U)
#define RSTCTL0_PRSTCTL0_SET_USBHS_PHY_MASK      (0x100000U)
#define RSTCTL0_PRSTCTL0_SET_USBHS_PHY_SHIFT     (20U)
#define RSTCTL0_PRSTCTL0_SET_USBHS_DEVICE_MASK   (0x200000U)
#define RSTCTL0_PRSTCTL0_SET_USBHS_DEVICE_SHIFT  (21U)
#define RSTCTL0_PRSTCTL0_SET_USBHS_HOST_MASK     (0x400000U)
#define RSTCTL0_PRSTCTL0_SET_USBHS_HOST_SHIFT    (22U)
#define RSTCTL0_PRSTCTL0_SET_USBHS_SRAM_MASK     (0x800000U)
#define RSTCTL0_PRSTCTL0_SET_USBHS_SRAM_SHIFT    (23U)
#define RSTCTL0_PRSTCTL0_SET_SCT_MASK            (0x1000000U)
#define RSTCTL0_PRSTCTL0_SET_SCT_SHIFT           (24U)
#define RSTCTL0_PRSTCTL0_SET_GPU_MASK            (0x4000000U)
#define RSTCTL0_PRSTCTL0_SET_GPU_SHIFT           (26U)
#define RSTCTL0_PRSTCTL0_SET_DISPLAY_CONTROLLER_MASK (0x8000000U)
#define RSTCTL0_PRSTCTL0_SET_DISPLAY_CONTROLLER_SHIFT (27U)
#define RSTCTL0_PRSTCTL0_SET_MIPI_DSI_CONTROLLER_MASK (0x10000000U)
#define RSTCTL0_PRSTCTL0_SET_MIPI_DSI_CONTROLLER_SHIFT (28U)
#define RSTCTL0_PRSTCTL0_SET_MIPI_DSI_PHY_MASK   (0x20000000U)
#define RSTCTL0_PRSTCTL0_SET_MIPI_DSI_PHY_SHIFT  (29U)
#define RSTCTL0_PRSTCTL0_SET_SMARTDMA_MASK       (0x40000000U)
#define RSTCTL0_PRSTCTL0_SET_SMARTDMA_SHIFT      (30U)
/*! @} */

/*! @name PRSTCTL1_SET - Peripheral Reset Control Register 1 SET */
/*! @{ */
#define RSTCTL0_PRSTCTL1_SET_SDIO0_MASK          (0x4U)
#define RSTCTL0_PRSTCTL1_SET_SDIO0_SHIFT         (2U)
#define RSTCTL0_PRSTCTL1_SET_SDIO1_MASK          (0x8U)
#define RSTCTL0_PRSTCTL1_SET_SDIO1_SHIFT         (3U)
#define RSTCTL0_PRSTCTL1_SET_ACMP0_MASK          (0x8000U)
#define RSTCTL0_PRSTCTL1_SET_ACMP0_SHIFT         (15U)
#define RSTCTL0_PRSTCTL1_SET_ADC0_MASK           (0x10000U)
#define RSTCTL0_PRSTCTL1_SET_ADC0_SHIFT          (16U)
#define RSTCTL0_PRSTCTL1_SET_SHSGPIO0_MASK       (0x1000000U)
#define RSTCTL0_PRSTCTL1_SET_SHSGPIO0_SHIFT      (24U)
/*! @} */

/*! @name PRSTCTL2_SET - Peripheral Reset Control Register 2 SET */
/*! @{ */
#define RSTCTL0_PRSTCTL2_SET_UTICK0_MASK         (0x1U)
#define RSTCTL0_PRSTCTL2_SET_UTICK0_SHIFT        (0U)
#define RSTCTL0_PRSTCTL2_SET_WWDT0_MASK          (0x2U)
#define RSTCTL0_PRSTCTL2_SET_WWDT0_SHIFT         (1U)
/*! @} */

/*! @name PRSTCTL0_CLR - Peripheral Reset Control Register 0 CLR */
/*! @{ */
#define RSTCTL0_PRSTCTL0_CLR_DSP_MASK            (0x2U)
#define RSTCTL0_PRSTCTL0_CLR_DSP_SHIFT           (1U)
#define RSTCTL0_PRSTCTL0_CLR_AXI_SWITCH_MASK     (0x8U)
#define RSTCTL0_PRSTCTL0_CLR_AXI_SWITCH_SHIFT    (3U)
#define RSTCTL0_PRSTCTL0_CLR_POWERQUAD_MASK      (0x100U)
#define RSTCTL0_PRSTCTL0_CLR_POWERQUAD_SHIFT     (8U)
#define RSTCTL0_PRSTCTL0_CLR_CASPER_MASK         (0x200U)
#define RSTCTL0_PRSTCTL0_CLR_CASPER_SHIFT        (9U)
#define RSTCTL0_PRSTCTL0_CLR_HASHCRYPT_MASK      (0x400U)
#define RSTCTL0_PRSTCTL0_CLR_HASHCRYPT_SHIFT     (10U)
#define RSTCTL0_PRSTCTL0_CLR_PUF_MASK            (0x800U)
#define RSTCTL0_PRSTCTL0_CLR_PUF_SHIFT           (11U)
#define RSTCTL0_PRSTCTL0_CLR_RNG_MASK            (0x1000U)
#define RSTCTL0_PRSTCTL0_CLR_RNG_SHIFT           (12U)
#define RSTCTL0_PRSTCTL0_CLR_FLEXSPI0_OTFAD_MASK (0x10000U)
#define RSTCTL0_PRSTCTL0_CLR_FLEXSPI0_OTFAD_SHIFT (16U)
#define RSTCTL0_PRSTCTL0_CLR_FLEXSPI1_MASK       (0x40000U)
#define RSTCTL0_PRSTCTL0_CLR_FLEXSPI1_SHIFT      (18U)
#define RSTCTL0_PRSTCTL0_CLR_USBHS_PHY_MASK      (0x100000U)
#define RSTCTL0_PRSTCTL0_CLR_USBHS_PHY_SHIFT     (20U)
#define RSTCTL0_PRSTCTL0_CLR_USBHS_DEVICE_MASK   (0x200000U)
#define RSTCTL0_PRSTCTL0_CLR_USBHS_DEVICE_SHIFT  (21U)
#define RSTCTL0_PRSTCTL0_CLR_USBHS_HOST_MASK     (0x400000U)
#define RSTCTL0_PRSTCTL0_CLR_USBHS_HOST_SHIFT    (22U)
#define RSTCTL0_PRSTCTL0_CLR_USBHS_SRAM_MASK     (0x800000U)
#define RSTCTL0_PRSTCTL0_CLR_USBHS_SRAM_SHIFT    (23U)
#define RSTCTL0_PRSTCTL0_CLR_SCT_MASK            (0x1000000U)
#define RSTCTL0_PRSTCTL0_CLR_SCT_SHIFT           (24U)
#define RSTCTL0_PRSTCTL0_CLR_GPU_MASK            (0x4000000U)
#define RSTCTL0_PRSTCTL0_CLR_GPU_SHIFT           (26U)
#define RSTCTL0_PRSTCTL0_CLR_DISPLAY_CONTROLLER_MASK (0x8000000U)
#define RSTCTL0_PRSTCTL0_CLR_DISPLAY_CONTROLLER_SHIFT (27U)
#define RSTCTL0_PRSTCTL0_CLR_MIPI_DSI_CONTROLLER_MASK (0x10000000U)
#define RSTCTL0_PRSTCTL0_CLR_MIPI_DSI_CONTROLLER_SHIFT (28U)
#define RSTCTL0_PRSTCTL0_CLR_MIPI_DSI_PHY_MASK   (0x20000000U)
#define RSTCTL0_PRSTCTL0_CLR_MIPI_DSI_PHY_SHIFT  (29U)
#define RSTCTL0_PRSTCTL0_CLR_SMARTDMA_MASK       (0x40000000U)
#define RSTCTL0_PRSTCTL0_CLR_SMARTDMA_SHIFT      (30U)
/*! @} */

/*! @name PRSTCTL1_CLR - Peripheral Reset Control Register 1 CLR */
/*! @{ */
#define RSTCTL0_PRSTCTL1_CLR_SDIO0_MASK          (0x4U)
#define RSTCTL0_PRSTCTL1_CLR_SDIO0_SHIFT         (2U)
#define RSTCTL0_PRSTCTL1_CLR_SDIO1_MASK          (0x8U)
#define RSTCTL0_PRSTCTL1_CLR_SDIO1_SHIFT         (3U)
#define RSTCTL0_PRSTCTL1_CLR_ACMP0_MASK          (0x8000U)
#define RSTCTL0_PRSTCTL1_CLR_ACMP0_SHIFT         (15U)
#define RSTCTL0_PRSTCTL1_CLR_ADC0_MASK           (0x10000U)
#define RSTCTL0_PRSTCTL1_CLR_ADC0_SHIFT          (16U)
#define RSTCTL0_PRSTCTL1_CLR_SHSGPIO0_MASK       (0x1000000U)
#define RSTCTL0_PRSTCTL1_CLR_SHSGPIO0_SHIFT      (24U)
/*! @} */

/*! @name PRSTCTL2_CLR - Peripheral Reset Control Register 2 CLR */
/*! @{ */
#define RSTCTL0_PRSTCTL2_CLR_UTICK0_MASK         (0x1U)
#define RSTCTL0_PRSTCTL2_CLR_UTICK0_SHIFT        (0U)
#define RSTCTL0_PRSTCTL2_CLR_WWDT0_MASK          (0x2U)
#define RSTCTL0_PRSTCTL2_CLR_WWDT0_SHIFT         (1U)
/*! @} */


/*!
 * @}
 */ /* end of group RSTCTL0_Register_Masks */


/* RSTCTL0 - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral RSTCTL0 base pointer */
  #define RSTCTL0_BASE_PTR                         ((RSTCTL0_MemMapPtr)0x50000000u)
  /** Peripheral RSTCTL0 base pointer */
  #define RSTCTL0_BASE_PTR_NS                      ((RSTCTL0_MemMapPtr)0x40000000u)
  /** Array initializer of RSTCTL0 peripheral base pointers */
  #define RSTCTL0_BASE_PTRS                        { RSTCTL0_BASE_PTR }
  /** Array initializer of RSTCTL0 peripheral base pointers */
  #define RSTCTL0_BASE_PTRS_NS                     { RSTCTL0_BASE_PTR_NS }
#else
  /** Peripheral RSTCTL0 base pointer */
  #define RSTCTL0_BASE_PTR                         ((RSTCTL0_MemMapPtr)0x40000000u)
  /** Array initializer of RSTCTL0 peripheral base pointers */
  #define RSTCTL0_BASE_PTRS                        { RSTCTL0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- RSTCTL0 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RSTCTL0_Register_Accessor_Macros RSTCTL0 - Register accessor macros
 * @{
 */


/* RSTCTL0 - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* RSTCTL0 */
  #define RSTCTL0_SYSRSTSTAT                       RSTCTL0_SYSRSTSTAT_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_SYSRSTSTAT_NS                    RSTCTL0_SYSRSTSTAT_REG(RSTCTL0_BASE_PTR_NS)
  #define RSTCTL0_PRSTCTL0                         RSTCTL0_PRSTCTL0_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL0_NS                      RSTCTL0_PRSTCTL0_REG(RSTCTL0_BASE_PTR_NS)
  #define RSTCTL0_PRSTCTL1                         RSTCTL0_PRSTCTL1_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL1_NS                      RSTCTL0_PRSTCTL1_REG(RSTCTL0_BASE_PTR_NS)
  #define RSTCTL0_PRSTCTL2                         RSTCTL0_PRSTCTL2_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL2_NS                      RSTCTL0_PRSTCTL2_REG(RSTCTL0_BASE_PTR_NS)
  #define RSTCTL0_PRSTCTL0_SET                     RSTCTL0_PRSTCTL0_SET_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL0_SET_NS                  RSTCTL0_PRSTCTL0_SET_REG(RSTCTL0_BASE_PTR_NS)
  #define RSTCTL0_PRSTCTL1_SET                     RSTCTL0_PRSTCTL1_SET_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL1_SET_NS                  RSTCTL0_PRSTCTL1_SET_REG(RSTCTL0_BASE_PTR_NS)
  #define RSTCTL0_PRSTCTL2_SET                     RSTCTL0_PRSTCTL2_SET_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL2_SET_NS                  RSTCTL0_PRSTCTL2_SET_REG(RSTCTL0_BASE_PTR_NS)
  #define RSTCTL0_PRSTCTL0_CLR                     RSTCTL0_PRSTCTL0_CLR_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL0_CLR_NS                  RSTCTL0_PRSTCTL0_CLR_REG(RSTCTL0_BASE_PTR_NS)
  #define RSTCTL0_PRSTCTL1_CLR                     RSTCTL0_PRSTCTL1_CLR_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL1_CLR_NS                  RSTCTL0_PRSTCTL1_CLR_REG(RSTCTL0_BASE_PTR_NS)
  #define RSTCTL0_PRSTCTL2_CLR                     RSTCTL0_PRSTCTL2_CLR_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL2_CLR_NS                  RSTCTL0_PRSTCTL2_CLR_REG(RSTCTL0_BASE_PTR_NS)
#else
  /* RSTCTL0 */
  #define RSTCTL0_SYSRSTSTAT                       RSTCTL0_SYSRSTSTAT_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL0                         RSTCTL0_PRSTCTL0_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL1                         RSTCTL0_PRSTCTL1_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL2                         RSTCTL0_PRSTCTL2_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL0_SET                     RSTCTL0_PRSTCTL0_SET_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL1_SET                     RSTCTL0_PRSTCTL1_SET_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL2_SET                     RSTCTL0_PRSTCTL2_SET_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL0_CLR                     RSTCTL0_PRSTCTL0_CLR_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL1_CLR                     RSTCTL0_PRSTCTL1_CLR_REG(RSTCTL0_BASE_PTR)
  #define RSTCTL0_PRSTCTL2_CLR                     RSTCTL0_PRSTCTL2_CLR_REG(RSTCTL0_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group RSTCTL0_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group RSTCTL0_Peripheral */


/* ----------------------------------------------------------------------------
   -- RSTCTL1
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RSTCTL1_Peripheral RSTCTL1
 * @{
 */

/** RSTCTL1 - Peripheral register structure */
typedef struct RSTCTL1_MemMap {
  uint32_t SYSRSTSTAT;                             /**< System Reset Status Register, offset: 0x0 */
  uint8_t RESERVED_0[12];
  uint32_t PRSTCTL0;                               /**< Peripheral Reset Control Register 0, offset: 0x10 */
  uint32_t PRSTCTL1;                               /**< Peripheral Reset Control Register 1, offset: 0x14 */
  uint32_t PRSTCTL2;                               /**< Peripheral Reset Control Register 2, offset: 0x18 */
  uint8_t RESERVED_1[36];
  uint32_t PRSTCTL0_SET;                           /**< Peripheral Reset Control Register 0 SET, offset: 0x40 */
  uint32_t PRSTCTL1_SET;                           /**< Peripheral Reset Control Register 1 SET, offset: 0x44 */
  uint32_t PRSTCTL2_SET;                           /**< Peripheral Reset Control Register 2 SET, offset: 0x48 */
  uint8_t RESERVED_2[36];
  uint32_t PRSTCTL0_CLR;                           /**< Peripheral Reset Control Register 0 CLR, offset: 0x70 */
  uint32_t PRSTCTL1_CLR;                           /**< Peripheral Reset Control Register 1 CLR, offset: 0x74 */
  uint32_t PRSTCTL2_CLR;                           /**< Peripheral Reset Control Register 2 CLR, offset: 0x78 */
} volatile *RSTCTL1_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- RSTCTL1 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RSTCTL1_Register_Accessor_Macros RSTCTL1 - Register accessor macros
 * @{
 */


/* RSTCTL1 - Register accessors */
#define RSTCTL1_SYSRSTSTAT_REG(base)             ((base)->SYSRSTSTAT)
#define RSTCTL1_PRSTCTL0_REG(base)               ((base)->PRSTCTL0)
#define RSTCTL1_PRSTCTL1_REG(base)               ((base)->PRSTCTL1)
#define RSTCTL1_PRSTCTL2_REG(base)               ((base)->PRSTCTL2)
#define RSTCTL1_PRSTCTL0_SET_REG(base)           ((base)->PRSTCTL0_SET)
#define RSTCTL1_PRSTCTL1_SET_REG(base)           ((base)->PRSTCTL1_SET)
#define RSTCTL1_PRSTCTL2_SET_REG(base)           ((base)->PRSTCTL2_SET)
#define RSTCTL1_PRSTCTL0_CLR_REG(base)           ((base)->PRSTCTL0_CLR)
#define RSTCTL1_PRSTCTL1_CLR_REG(base)           ((base)->PRSTCTL1_CLR)
#define RSTCTL1_PRSTCTL2_CLR_REG(base)           ((base)->PRSTCTL2_CLR)

/*!
 * @}
 */ /* end of group RSTCTL1_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- RSTCTL1 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RSTCTL1_Register_Masks RSTCTL1 Register Masks
 * @{
 */

/*! @name SYSRSTSTAT - System Reset Status Register */
/*! @{ */
#define RSTCTL1_SYSRSTSTAT_VDD_POR_MASK          (0x1U)
#define RSTCTL1_SYSRSTSTAT_VDD_POR_SHIFT         (0U)
#define RSTCTL1_SYSRSTSTAT_PAD_RESET_MASK        (0x10U)
#define RSTCTL1_SYSRSTSTAT_PAD_RESET_SHIFT       (4U)
#define RSTCTL1_SYSRSTSTAT_ARM_RESET_MASK        (0x20U)
#define RSTCTL1_SYSRSTSTAT_ARM_RESET_SHIFT       (5U)
#define RSTCTL1_SYSRSTSTAT_WDT0_RESET_MASK       (0x40U)
#define RSTCTL1_SYSRSTSTAT_WDT0_RESET_SHIFT      (6U)
#define RSTCTL1_SYSRSTSTAT_WDT1_RESET_MASK       (0x80U)
#define RSTCTL1_SYSRSTSTAT_WDT1_RESET_SHIFT      (7U)
/*! @} */

/*! @name PRSTCTL0 - Peripheral Reset Control Register 0 */
/*! @{ */
#define RSTCTL1_PRSTCTL0_FLEXCOMM0_MASK          (0x100U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM0_SHIFT         (8U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM1_MASK          (0x200U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM1_SHIFT         (9U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM2_MASK          (0x400U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM2_SHIFT         (10U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM3_MASK          (0x800U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM3_SHIFT         (11U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM4_MASK          (0x1000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM4_SHIFT         (12U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM5_MASK          (0x2000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM5_SHIFT         (13U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM6_MASK          (0x4000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM6_SHIFT         (14U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM7_MASK          (0x8000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM7_SHIFT         (15U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM8_MASK          (0x10000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM8_SHIFT         (16U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM9_MASK          (0x20000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM9_SHIFT         (17U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM10_MASK         (0x40000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM10_SHIFT        (18U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM11_MASK         (0x80000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM11_SHIFT        (19U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM12_MASK         (0x100000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM12_SHIFT        (20U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM13_MASK         (0x200000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM13_SHIFT        (21U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM14_MASK         (0x400000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM14_SHIFT        (22U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM15_I2C_MASK     (0x800000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM15_I2C_SHIFT    (23U)
#define RSTCTL1_PRSTCTL0_DMIC0_MASK              (0x1000000U)
#define RSTCTL1_PRSTCTL0_DMIC0_SHIFT             (24U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM16_MASK         (0x2000000U)
#define RSTCTL1_PRSTCTL0_FLEXCOMM16_SHIFT        (25U)
#define RSTCTL1_PRSTCTL0_OSEVENT_TIMER_MASK      (0x8000000U)
#define RSTCTL1_PRSTCTL0_OSEVENT_TIMER_SHIFT     (27U)
#define RSTCTL1_PRSTCTL0_FLEXIO_MASK             (0x20000000U)
#define RSTCTL1_PRSTCTL0_FLEXIO_SHIFT            (29U)
/*! @} */

/*! @name PRSTCTL1 - Peripheral Reset Control Register 1 */
/*! @{ */
#define RSTCTL1_PRSTCTL1_HSGPIO0_MASK            (0x1U)
#define RSTCTL1_PRSTCTL1_HSGPIO0_SHIFT           (0U)
#define RSTCTL1_PRSTCTL1_HSGPIO1_MASK            (0x2U)
#define RSTCTL1_PRSTCTL1_HSGPIO1_SHIFT           (1U)
#define RSTCTL1_PRSTCTL1_HSGPIO2_MASK            (0x4U)
#define RSTCTL1_PRSTCTL1_HSGPIO2_SHIFT           (2U)
#define RSTCTL1_PRSTCTL1_HSGPIO3_MASK            (0x8U)
#define RSTCTL1_PRSTCTL1_HSGPIO3_SHIFT           (3U)
#define RSTCTL1_PRSTCTL1_HSGPIO4_MASK            (0x10U)
#define RSTCTL1_PRSTCTL1_HSGPIO4_SHIFT           (4U)
#define RSTCTL1_PRSTCTL1_HSGPIO5_MASK            (0x20U)
#define RSTCTL1_PRSTCTL1_HSGPIO5_SHIFT           (5U)
#define RSTCTL1_PRSTCTL1_HSGPIO6_MASK            (0x40U)
#define RSTCTL1_PRSTCTL1_HSGPIO6_SHIFT           (6U)
#define RSTCTL1_PRSTCTL1_HSGPIO7_MASK            (0x80U)
#define RSTCTL1_PRSTCTL1_HSGPIO7_SHIFT           (7U)
#define RSTCTL1_PRSTCTL1_CRC_MASK                (0x10000U)
#define RSTCTL1_PRSTCTL1_CRC_SHIFT               (16U)
#define RSTCTL1_PRSTCTL1_DMAC0_MASK              (0x800000U)
#define RSTCTL1_PRSTCTL1_DMAC0_SHIFT             (23U)
#define RSTCTL1_PRSTCTL1_DMAC1_MASK              (0x1000000U)
#define RSTCTL1_PRSTCTL1_DMAC1_SHIFT             (24U)
#define RSTCTL1_PRSTCTL1_MU_MASK                 (0x10000000U)
#define RSTCTL1_PRSTCTL1_MU_SHIFT                (28U)
#define RSTCTL1_PRSTCTL1_SEMA_MASK               (0x20000000U)
#define RSTCTL1_PRSTCTL1_SEMA_SHIFT              (29U)
#define RSTCTL1_PRSTCTL1_FREQME_MASK             (0x80000000U)
#define RSTCTL1_PRSTCTL1_FREQME_SHIFT            (31U)
/*! @} */

/*! @name PRSTCTL2 - Peripheral Reset Control Register 2 */
/*! @{ */
#define RSTCTL1_PRSTCTL2_CT32BIT0_MASK           (0x1U)
#define RSTCTL1_PRSTCTL2_CT32BIT0_SHIFT          (0U)
#define RSTCTL1_PRSTCTL2_CT32BIT1_MASK           (0x2U)
#define RSTCTL1_PRSTCTL2_CT32BIT1_SHIFT          (1U)
#define RSTCTL1_PRSTCTL2_CT32BIT2_MASK           (0x4U)
#define RSTCTL1_PRSTCTL2_CT32BIT2_SHIFT          (2U)
#define RSTCTL1_PRSTCTL2_CT32BIT3_MASK           (0x8U)
#define RSTCTL1_PRSTCTL2_CT32BIT3_SHIFT          (3U)
#define RSTCTL1_PRSTCTL2_CT32BIT4_MASK           (0x10U)
#define RSTCTL1_PRSTCTL2_CT32BIT4_SHIFT          (4U)
#define RSTCTL1_PRSTCTL2_MRT0_MASK               (0x100U)
#define RSTCTL1_PRSTCTL2_MRT0_SHIFT              (8U)
#define RSTCTL1_PRSTCTL2_WWDT1_MASK              (0x400U)
#define RSTCTL1_PRSTCTL2_WWDT1_SHIFT             (10U)
#define RSTCTL1_PRSTCTL2_I3C0_MASK               (0x10000U)
#define RSTCTL1_PRSTCTL2_I3C0_SHIFT              (16U)
#define RSTCTL1_PRSTCTL2_I3C1_MASK               (0x20000U)
#define RSTCTL1_PRSTCTL2_I3C1_SHIFT              (17U)
#define RSTCTL1_PRSTCTL2_GPIOINTCTL_MASK         (0x40000000U)
#define RSTCTL1_PRSTCTL2_GPIOINTCTL_SHIFT        (30U)
#define RSTCTL1_PRSTCTL2_PIMCTL_MASK             (0x80000000U)
#define RSTCTL1_PRSTCTL2_PIMCTL_SHIFT            (31U)
/*! @} */

/*! @name PRSTCTL0_SET - Peripheral Reset Control Register 0 SET */
/*! @{ */
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM0_MASK      (0x100U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM0_SHIFT     (8U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM1_MASK      (0x200U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM1_SHIFT     (9U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM2_MASK      (0x400U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM2_SHIFT     (10U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM3_MASK      (0x800U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM3_SHIFT     (11U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM4_MASK      (0x1000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM4_SHIFT     (12U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM5_MASK      (0x2000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM5_SHIFT     (13U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM6_MASK      (0x4000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM6_SHIFT     (14U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM7_MASK      (0x8000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM7_SHIFT     (15U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM8_MASK      (0x10000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM8_SHIFT     (16U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM9_MASK      (0x20000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM9_SHIFT     (17U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM10_MASK     (0x40000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM10_SHIFT    (18U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM11_MASK     (0x80000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM11_SHIFT    (19U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM12_MASK     (0x100000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM12_SHIFT    (20U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM13_MASK     (0x200000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM13_SHIFT    (21U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM14_MASK     (0x400000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM14_SHIFT    (22U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM15_I2C_MASK (0x800000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM15_I2C_SHIFT (23U)
#define RSTCTL1_PRSTCTL0_SET_DMIC0_MASK          (0x1000000U)
#define RSTCTL1_PRSTCTL0_SET_DMIC0_SHIFT         (24U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM16_MASK     (0x2000000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXCOMM16_SHIFT    (25U)
#define RSTCTL1_PRSTCTL0_SET_OSEVENT_TIMER_MASK  (0x8000000U)
#define RSTCTL1_PRSTCTL0_SET_OSEVENT_TIMER_SHIFT (27U)
#define RSTCTL1_PRSTCTL0_SET_FLEXIO_MASK         (0x20000000U)
#define RSTCTL1_PRSTCTL0_SET_FLEXIO_SHIFT        (29U)
/*! @} */

/*! @name PRSTCTL1_SET - Peripheral Reset Control Register 1 SET */
/*! @{ */
#define RSTCTL1_PRSTCTL1_SET_HSGPIO0_MASK        (0x1U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO0_SHIFT       (0U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO1_MASK        (0x2U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO1_SHIFT       (1U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO2_MASK        (0x4U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO2_SHIFT       (2U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO3_MASK        (0x8U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO3_SHIFT       (3U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO4_MASK        (0x10U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO4_SHIFT       (4U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO5_MASK        (0x20U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO5_SHIFT       (5U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO6_MASK        (0x40U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO6_SHIFT       (6U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO7_MASK        (0x80U)
#define RSTCTL1_PRSTCTL1_SET_HSGPIO7_SHIFT       (7U)
#define RSTCTL1_PRSTCTL1_SET_CRC_MASK            (0x10000U)
#define RSTCTL1_PRSTCTL1_SET_CRC_SHIFT           (16U)
#define RSTCTL1_PRSTCTL1_SET_DMAC0_MASK          (0x800000U)
#define RSTCTL1_PRSTCTL1_SET_DMAC0_SHIFT         (23U)
#define RSTCTL1_PRSTCTL1_SET_DMAC1_MASK          (0x1000000U)
#define RSTCTL1_PRSTCTL1_SET_DMAC1_SHIFT         (24U)
#define RSTCTL1_PRSTCTL1_SET_MU_MASK             (0x10000000U)
#define RSTCTL1_PRSTCTL1_SET_MU_SHIFT            (28U)
#define RSTCTL1_PRSTCTL1_SET_SEMA_MASK           (0x20000000U)
#define RSTCTL1_PRSTCTL1_SET_SEMA_SHIFT          (29U)
#define RSTCTL1_PRSTCTL1_SET_FREQME_MASK         (0x80000000U)
#define RSTCTL1_PRSTCTL1_SET_FREQME_SHIFT        (31U)
/*! @} */

/*! @name PRSTCTL2_SET - Peripheral Reset Control Register 2 SET */
/*! @{ */
#define RSTCTL1_PRSTCTL2_SET_CT32BIT0_MASK       (0x1U)
#define RSTCTL1_PRSTCTL2_SET_CT32BIT0_SHIFT      (0U)
#define RSTCTL1_PRSTCTL2_SET_CT32BIT1_MASK       (0x2U)
#define RSTCTL1_PRSTCTL2_SET_CT32BIT1_SHIFT      (1U)
#define RSTCTL1_PRSTCTL2_SET_CT32BIT2_MASK       (0x4U)
#define RSTCTL1_PRSTCTL2_SET_CT32BIT2_SHIFT      (2U)
#define RSTCTL1_PRSTCTL2_SET_CT32BIT3_MASK       (0x8U)
#define RSTCTL1_PRSTCTL2_SET_CT32BIT3_SHIFT      (3U)
#define RSTCTL1_PRSTCTL2_SET_CT32BIT4_MASK       (0x10U)
#define RSTCTL1_PRSTCTL2_SET_CT32BIT4_SHIFT      (4U)
#define RSTCTL1_PRSTCTL2_SET_MRT0_MASK           (0x100U)
#define RSTCTL1_PRSTCTL2_SET_MRT0_SHIFT          (8U)
#define RSTCTL1_PRSTCTL2_SET_WWDT1_MASK          (0x400U)
#define RSTCTL1_PRSTCTL2_SET_WWDT1_SHIFT         (10U)
#define RSTCTL1_PRSTCTL2_SET_I3C0_MASK           (0x10000U)
#define RSTCTL1_PRSTCTL2_SET_I3C0_SHIFT          (16U)
#define RSTCTL1_PRSTCTL2_SET_I3C1_MASK           (0x20000U)
#define RSTCTL1_PRSTCTL2_SET_I3C1_SHIFT          (17U)
#define RSTCTL1_PRSTCTL2_SET_GPIOINTCTL_MASK     (0x40000000U)
#define RSTCTL1_PRSTCTL2_SET_GPIOINTCTL_SHIFT    (30U)
#define RSTCTL1_PRSTCTL2_SET_PIMCTL_MASK         (0x80000000U)
#define RSTCTL1_PRSTCTL2_SET_PIMCTL_SHIFT        (31U)
/*! @} */

/*! @name PRSTCTL0_CLR - Peripheral Reset Control Register 0 CLR */
/*! @{ */
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM0_MASK      (0x100U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM0_SHIFT     (8U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM1_MASK      (0x200U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM1_SHIFT     (9U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM2_MASK      (0x400U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM2_SHIFT     (10U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM3_MASK      (0x800U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM3_SHIFT     (11U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM4_MASK      (0x1000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM4_SHIFT     (12U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM5_MASK      (0x2000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM5_SHIFT     (13U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM6_MASK      (0x4000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM6_SHIFT     (14U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM7_MASK      (0x8000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM7_SHIFT     (15U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM8_MASK      (0x10000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM8_SHIFT     (16U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM9_MASK      (0x20000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM9_SHIFT     (17U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM10_MASK     (0x40000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM10_SHIFT    (18U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM11_MASK     (0x80000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM11_SHIFT    (19U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM12_MASK     (0x100000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM12_SHIFT    (20U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM13_MASK     (0x200000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM13_SHIFT    (21U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM14_MASK     (0x400000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM14_SHIFT    (22U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM15_I2C_MASK (0x800000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM15_I2C_SHIFT (23U)
#define RSTCTL1_PRSTCTL0_CLR_DMIC0_MASK          (0x1000000U)
#define RSTCTL1_PRSTCTL0_CLR_DMIC0_SHIFT         (24U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM16_MASK     (0x2000000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXCOMM16_SHIFT    (25U)
#define RSTCTL1_PRSTCTL0_CLR_OSEVENT_TIMER_MASK  (0x8000000U)
#define RSTCTL1_PRSTCTL0_CLR_OSEVENT_TIMER_SHIFT (27U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXIO_MASK         (0x20000000U)
#define RSTCTL1_PRSTCTL0_CLR_FLEXIO_SHIFT        (29U)
/*! @} */

/*! @name PRSTCTL1_CLR - Peripheral Reset Control Register 1 CLR */
/*! @{ */
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO0_MASK        (0x1U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO0_SHIFT       (0U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO1_MASK        (0x2U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO1_SHIFT       (1U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO2_MASK        (0x4U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO2_SHIFT       (2U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO3_MASK        (0x8U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO3_SHIFT       (3U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO4_MASK        (0x10U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO4_SHIFT       (4U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO5_MASK        (0x20U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO5_SHIFT       (5U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO6_MASK        (0x40U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO6_SHIFT       (6U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO7_MASK        (0x80U)
#define RSTCTL1_PRSTCTL1_CLR_HSGPIO7_SHIFT       (7U)
#define RSTCTL1_PRSTCTL1_CLR_CRC_MASK            (0x10000U)
#define RSTCTL1_PRSTCTL1_CLR_CRC_SHIFT           (16U)
#define RSTCTL1_PRSTCTL1_CLR_DMAC0_MASK          (0x800000U)
#define RSTCTL1_PRSTCTL1_CLR_DMAC0_SHIFT         (23U)
#define RSTCTL1_PRSTCTL1_CLR_DMAC1_MASK          (0x1000000U)
#define RSTCTL1_PRSTCTL1_CLR_DMAC1_SHIFT         (24U)
#define RSTCTL1_PRSTCTL1_CLR_MU_MASK             (0x10000000U)
#define RSTCTL1_PRSTCTL1_CLR_MU_SHIFT            (28U)
#define RSTCTL1_PRSTCTL1_CLR_SEMA_MASK           (0x20000000U)
#define RSTCTL1_PRSTCTL1_CLR_SEMA_SHIFT          (29U)
#define RSTCTL1_PRSTCTL1_CLR_FREQME_MASK         (0x80000000U)
#define RSTCTL1_PRSTCTL1_CLR_FREQME_SHIFT        (31U)
/*! @} */

/*! @name PRSTCTL2_CLR - Peripheral Reset Control Register 2 CLR */
/*! @{ */
#define RSTCTL1_PRSTCTL2_CLR_CT32BIT0_MASK       (0x1U)
#define RSTCTL1_PRSTCTL2_CLR_CT32BIT0_SHIFT      (0U)
#define RSTCTL1_PRSTCTL2_CLR_CT32BIT1_MASK       (0x2U)
#define RSTCTL1_PRSTCTL2_CLR_CT32BIT1_SHIFT      (1U)
#define RSTCTL1_PRSTCTL2_CLR_CT32BIT2_MASK       (0x4U)
#define RSTCTL1_PRSTCTL2_CLR_CT32BIT2_SHIFT      (2U)
#define RSTCTL1_PRSTCTL2_CLR_CT32BIT3_MASK       (0x8U)
#define RSTCTL1_PRSTCTL2_CLR_CT32BIT3_SHIFT      (3U)
#define RSTCTL1_PRSTCTL2_CLR_CT32BIT4_MASK       (0x10U)
#define RSTCTL1_PRSTCTL2_CLR_CT32BIT4_SHIFT      (4U)
#define RSTCTL1_PRSTCTL2_CLR_MRT0_MASK           (0x100U)
#define RSTCTL1_PRSTCTL2_CLR_MRT0_SHIFT          (8U)
#define RSTCTL1_PRSTCTL2_CLR_WWDT1_MASK          (0x400U)
#define RSTCTL1_PRSTCTL2_CLR_WWDT1_SHIFT         (10U)
#define RSTCTL1_PRSTCTL2_CLR_I3C0_MASK           (0x10000U)
#define RSTCTL1_PRSTCTL2_CLR_I3C0_SHIFT          (16U)
#define RSTCTL1_PRSTCTL2_CLR_I3C1_MASK           (0x20000U)
#define RSTCTL1_PRSTCTL2_CLR_I3C1_SHIFT          (17U)
#define RSTCTL1_PRSTCTL2_CLR_GPIOINTCTL_MASK     (0x40000000U)
#define RSTCTL1_PRSTCTL2_CLR_GPIOINTCTL_SHIFT    (30U)
#define RSTCTL1_PRSTCTL2_CLR_PIMCTL_MASK         (0x80000000U)
#define RSTCTL1_PRSTCTL2_CLR_PIMCTL_SHIFT        (31U)
/*! @} */


/*!
 * @}
 */ /* end of group RSTCTL1_Register_Masks */


/* RSTCTL1 - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral RSTCTL1 base pointer */
  #define RSTCTL1_BASE_PTR                         ((RSTCTL1_MemMapPtr)0x50020000u)
  /** Peripheral RSTCTL1 base pointer */
  #define RSTCTL1_BASE_PTR_NS                      ((RSTCTL1_MemMapPtr)0x40020000u)
  /** Array initializer of RSTCTL1 peripheral base pointers */
  #define RSTCTL1_BASE_PTRS                        { RSTCTL1_BASE_PTR }
  /** Array initializer of RSTCTL1 peripheral base pointers */
  #define RSTCTL1_BASE_PTRS_NS                     { RSTCTL1_BASE_PTR_NS }
#else
  /** Peripheral RSTCTL1 base pointer */
  #define RSTCTL1_BASE_PTR                         ((RSTCTL1_MemMapPtr)0x40020000u)
  /** Array initializer of RSTCTL1 peripheral base pointers */
  #define RSTCTL1_BASE_PTRS                        { RSTCTL1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- RSTCTL1 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RSTCTL1_Register_Accessor_Macros RSTCTL1 - Register accessor macros
 * @{
 */


/* RSTCTL1 - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* RSTCTL1 */
  #define RSTCTL1_SYSRSTSTAT                       RSTCTL1_SYSRSTSTAT_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_SYSRSTSTAT_NS                    RSTCTL1_SYSRSTSTAT_REG(RSTCTL1_BASE_PTR_NS)
  #define RSTCTL1_PRSTCTL0                         RSTCTL1_PRSTCTL0_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL0_NS                      RSTCTL1_PRSTCTL0_REG(RSTCTL1_BASE_PTR_NS)
  #define RSTCTL1_PRSTCTL1                         RSTCTL1_PRSTCTL1_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL1_NS                      RSTCTL1_PRSTCTL1_REG(RSTCTL1_BASE_PTR_NS)
  #define RSTCTL1_PRSTCTL2                         RSTCTL1_PRSTCTL2_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL2_NS                      RSTCTL1_PRSTCTL2_REG(RSTCTL1_BASE_PTR_NS)
  #define RSTCTL1_PRSTCTL0_SET                     RSTCTL1_PRSTCTL0_SET_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL0_SET_NS                  RSTCTL1_PRSTCTL0_SET_REG(RSTCTL1_BASE_PTR_NS)
  #define RSTCTL1_PRSTCTL1_SET                     RSTCTL1_PRSTCTL1_SET_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL1_SET_NS                  RSTCTL1_PRSTCTL1_SET_REG(RSTCTL1_BASE_PTR_NS)
  #define RSTCTL1_PRSTCTL2_SET                     RSTCTL1_PRSTCTL2_SET_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL2_SET_NS                  RSTCTL1_PRSTCTL2_SET_REG(RSTCTL1_BASE_PTR_NS)
  #define RSTCTL1_PRSTCTL0_CLR                     RSTCTL1_PRSTCTL0_CLR_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL0_CLR_NS                  RSTCTL1_PRSTCTL0_CLR_REG(RSTCTL1_BASE_PTR_NS)
  #define RSTCTL1_PRSTCTL1_CLR                     RSTCTL1_PRSTCTL1_CLR_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL1_CLR_NS                  RSTCTL1_PRSTCTL1_CLR_REG(RSTCTL1_BASE_PTR_NS)
  #define RSTCTL1_PRSTCTL2_CLR                     RSTCTL1_PRSTCTL2_CLR_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL2_CLR_NS                  RSTCTL1_PRSTCTL2_CLR_REG(RSTCTL1_BASE_PTR_NS)
#else
  /* RSTCTL1 */
  #define RSTCTL1_SYSRSTSTAT                       RSTCTL1_SYSRSTSTAT_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL0                         RSTCTL1_PRSTCTL0_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL1                         RSTCTL1_PRSTCTL1_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL2                         RSTCTL1_PRSTCTL2_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL0_SET                     RSTCTL1_PRSTCTL0_SET_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL1_SET                     RSTCTL1_PRSTCTL1_SET_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL2_SET                     RSTCTL1_PRSTCTL2_SET_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL0_CLR                     RSTCTL1_PRSTCTL0_CLR_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL1_CLR                     RSTCTL1_PRSTCTL1_CLR_REG(RSTCTL1_BASE_PTR)
  #define RSTCTL1_PRSTCTL2_CLR                     RSTCTL1_PRSTCTL2_CLR_REG(RSTCTL1_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group RSTCTL1_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group RSTCTL1_Peripheral */


/* ----------------------------------------------------------------------------
   -- RTC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RTC_Peripheral RTC
 * @{
 */

/** RTC - Peripheral register structure */
typedef struct RTC_MemMap {
  uint32_t CTRL;                                   /**< RTC Control, offset: 0x0 */
  uint32_t MATCH;                                  /**< RTC Match, offset: 0x4 */
  uint32_t COUNT;                                  /**< RTC Counter, offset: 0x8 */
  uint32_t WAKE;                                   /**< High-resolution/Wake-up Timer Control, offset: 0xC */
  uint32_t SUBSEC;                                 /**< RTC Sub-second Counter, offset: 0x10 */
  uint8_t RESERVED_0[44];
  uint32_t GPREG[8];                               /**< General Purpose, array offset: 0x40, array step: 0x4 */
} volatile *RTC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- RTC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RTC_Register_Accessor_Macros RTC - Register accessor macros
 * @{
 */


/* RTC - Register accessors */
#define RTC_CTRL_REG(base)                       ((base)->CTRL)
#define RTC_MATCH_REG(base)                      ((base)->MATCH)
#define RTC_COUNT_REG(base)                      ((base)->COUNT)
#define RTC_WAKE_REG(base)                       ((base)->WAKE)
#define RTC_SUBSEC_REG(base)                     ((base)->SUBSEC)
#define RTC_GPREG_REG(base,index)                ((base)->GPREG[index])

/*!
 * @}
 */ /* end of group RTC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- RTC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RTC_Register_Masks RTC Register Masks
 * @{
 */

/*! @name CTRL - RTC Control */
/*! @{ */
#define RTC_CTRL_SWRESET_MASK                    (0x1U)
#define RTC_CTRL_SWRESET_SHIFT                   (0U)
#define RTC_CTRL_ALARM1HZ_MASK                   (0x4U)
#define RTC_CTRL_ALARM1HZ_SHIFT                  (2U)
#define RTC_CTRL_WAKE1KHZ_MASK                   (0x8U)
#define RTC_CTRL_WAKE1KHZ_SHIFT                  (3U)
#define RTC_CTRL_ALARMDPD_EN_MASK                (0x10U)
#define RTC_CTRL_ALARMDPD_EN_SHIFT               (4U)
#define RTC_CTRL_WAKEDPD_EN_MASK                 (0x20U)
#define RTC_CTRL_WAKEDPD_EN_SHIFT                (5U)
#define RTC_CTRL_RTC1KHZ_EN_MASK                 (0x40U)
#define RTC_CTRL_RTC1KHZ_EN_SHIFT                (6U)
#define RTC_CTRL_RTC_EN_MASK                     (0x80U)
#define RTC_CTRL_RTC_EN_SHIFT                    (7U)
#define RTC_CTRL_RTC_OSC_PD_MASK                 (0x100U)
#define RTC_CTRL_RTC_OSC_PD_SHIFT                (8U)
#define RTC_CTRL_RTC_SUBSEC_ENA_MASK             (0x400U)
#define RTC_CTRL_RTC_SUBSEC_ENA_SHIFT            (10U)
#define RTC_CTRL_RTC_OSC_loadcap_MASK            (0xF0000000U)
#define RTC_CTRL_RTC_OSC_loadcap_SHIFT           (28U)
/*! RTC_OSC_loadcap - Capacitive Load Selection
 */
#define RTC_CTRL_RTC_OSC_loadcap(x)              (((uint32_t)(((uint32_t)(x)) << RTC_CTRL_RTC_OSC_loadcap_SHIFT)) & RTC_CTRL_RTC_OSC_loadcap_MASK)
/*! @} */

/*! @name MATCH - RTC Match */
/*! @{ */
#define RTC_MATCH_MATVAL_MASK                    (0xFFFFFFFFU)
#define RTC_MATCH_MATVAL_SHIFT                   (0U)
/*! MATVAL - Match Value
 */
#define RTC_MATCH_MATVAL(x)                      (((uint32_t)(((uint32_t)(x)) << RTC_MATCH_MATVAL_SHIFT)) & RTC_MATCH_MATVAL_MASK)
/*! @} */

/*! @name COUNT - RTC Counter */
/*! @{ */
#define RTC_COUNT_VAL_MASK                       (0xFFFFFFFFU)
#define RTC_COUNT_VAL_SHIFT                      (0U)
/*! VAL - Value
 */
#define RTC_COUNT_VAL(x)                         (((uint32_t)(((uint32_t)(x)) << RTC_COUNT_VAL_SHIFT)) & RTC_COUNT_VAL_MASK)
/*! @} */

/*! @name WAKE - High-resolution/Wake-up Timer Control */
/*! @{ */
#define RTC_WAKE_VAL_MASK                        (0xFFFFU)
#define RTC_WAKE_VAL_SHIFT                       (0U)
/*! VAL - Value
 */
#define RTC_WAKE_VAL(x)                          (((uint32_t)(((uint32_t)(x)) << RTC_WAKE_VAL_SHIFT)) & RTC_WAKE_VAL_MASK)
/*! @} */

/*! @name SUBSEC - RTC Sub-second Counter */
/*! @{ */
#define RTC_SUBSEC_RTC_SUBSEC_MASK               (0x7FFFU)
#define RTC_SUBSEC_RTC_SUBSEC_SHIFT              (0U)
/*! RTC_SUBSEC - RTC Sub-second Counter
 */
#define RTC_SUBSEC_RTC_SUBSEC(x)                 (((uint32_t)(((uint32_t)(x)) << RTC_SUBSEC_RTC_SUBSEC_SHIFT)) & RTC_SUBSEC_RTC_SUBSEC_MASK)
/*! @} */

/*! @name GPREG - General Purpose */
/*! @{ */
#define RTC_GPREG_GPDATA_MASK                    (0xFFFFFFFFU)
#define RTC_GPREG_GPDATA_SHIFT                   (0U)
/*! GPDATA - General Purpose Data
 */
#define RTC_GPREG_GPDATA(x)                      (((uint32_t)(((uint32_t)(x)) << RTC_GPREG_GPDATA_SHIFT)) & RTC_GPREG_GPDATA_MASK)
/*! @} */

/* The count of RTC_GPREG */
#define RTC_GPREG_COUNT                          (8U)


/*!
 * @}
 */ /* end of group RTC_Register_Masks */


/* RTC - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral RTC base pointer */
  #define RTC_BASE_PTR                             ((RTC_MemMapPtr)0x50030000u)
  /** Peripheral RTC base pointer */
  #define RTC_BASE_PTR_NS                          ((RTC_MemMapPtr)0x40030000u)
  /** Array initializer of RTC peripheral base pointers */
  #define RTC_BASE_PTRS                            { RTC_BASE_PTR }
  /** Array initializer of RTC peripheral base pointers */
  #define RTC_BASE_PTRS_NS                         { RTC_BASE_PTR_NS }
#else
  /** Peripheral RTC base pointer */
  #define RTC_BASE_PTR                             ((RTC_MemMapPtr)0x40030000u)
  /** Array initializer of RTC peripheral base pointers */
  #define RTC_BASE_PTRS                            { RTC_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- RTC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RTC_Register_Accessor_Macros RTC - Register accessor macros
 * @{
 */


/* RTC - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* RTC */
  #define RTC_CTRL                                 RTC_CTRL_REG(RTC_BASE_PTR)
  #define RTC_CTRL_NS                              RTC_CTRL_REG(RTC_BASE_PTR_NS)
  #define RTC_MATCH                                RTC_MATCH_REG(RTC_BASE_PTR)
  #define RTC_MATCH_NS                             RTC_MATCH_REG(RTC_BASE_PTR_NS)
  #define RTC_COUNT                                RTC_COUNT_REG(RTC_BASE_PTR)
  #define RTC_COUNT_NS                             RTC_COUNT_REG(RTC_BASE_PTR_NS)
  #define RTC_WAKE                                 RTC_WAKE_REG(RTC_BASE_PTR)
  #define RTC_WAKE_NS                              RTC_WAKE_REG(RTC_BASE_PTR_NS)
  #define RTC_SUBSEC                               RTC_SUBSEC_REG(RTC_BASE_PTR)
  #define RTC_SUBSEC_NS                            RTC_SUBSEC_REG(RTC_BASE_PTR_NS)
  #define RTC_GPREG0                               RTC_GPREG_REG(RTC_BASE_PTR,0)
  #define RTC_GPREG0_NS                            RTC_GPREG_REG(RTC_BASE_PTR_NS,0)
  #define RTC_GPREG1                               RTC_GPREG_REG(RTC_BASE_PTR,1)
  #define RTC_GPREG1_NS                            RTC_GPREG_REG(RTC_BASE_PTR_NS,1)
  #define RTC_GPREG2                               RTC_GPREG_REG(RTC_BASE_PTR,2)
  #define RTC_GPREG2_NS                            RTC_GPREG_REG(RTC_BASE_PTR_NS,2)
  #define RTC_GPREG3                               RTC_GPREG_REG(RTC_BASE_PTR,3)
  #define RTC_GPREG3_NS                            RTC_GPREG_REG(RTC_BASE_PTR_NS,3)
  #define RTC_GPREG4                               RTC_GPREG_REG(RTC_BASE_PTR,4)
  #define RTC_GPREG4_NS                            RTC_GPREG_REG(RTC_BASE_PTR_NS,4)
  #define RTC_GPREG5                               RTC_GPREG_REG(RTC_BASE_PTR,5)
  #define RTC_GPREG5_NS                            RTC_GPREG_REG(RTC_BASE_PTR_NS,5)
  #define RTC_GPREG6                               RTC_GPREG_REG(RTC_BASE_PTR,6)
  #define RTC_GPREG6_NS                            RTC_GPREG_REG(RTC_BASE_PTR_NS,6)
  #define RTC_GPREG7                               RTC_GPREG_REG(RTC_BASE_PTR,7)
  #define RTC_GPREG7_NS                            RTC_GPREG_REG(RTC_BASE_PTR_NS,7)
#else
  /* RTC */
  #define RTC_CTRL                                 RTC_CTRL_REG(RTC_BASE_PTR)
  #define RTC_MATCH                                RTC_MATCH_REG(RTC_BASE_PTR)
  #define RTC_COUNT                                RTC_COUNT_REG(RTC_BASE_PTR)
  #define RTC_WAKE                                 RTC_WAKE_REG(RTC_BASE_PTR)
  #define RTC_SUBSEC                               RTC_SUBSEC_REG(RTC_BASE_PTR)
  #define RTC_GPREG0                               RTC_GPREG_REG(RTC_BASE_PTR,0)
  #define RTC_GPREG1                               RTC_GPREG_REG(RTC_BASE_PTR,1)
  #define RTC_GPREG2                               RTC_GPREG_REG(RTC_BASE_PTR,2)
  #define RTC_GPREG3                               RTC_GPREG_REG(RTC_BASE_PTR,3)
  #define RTC_GPREG4                               RTC_GPREG_REG(RTC_BASE_PTR,4)
  #define RTC_GPREG5                               RTC_GPREG_REG(RTC_BASE_PTR,5)
  #define RTC_GPREG6                               RTC_GPREG_REG(RTC_BASE_PTR,6)
  #define RTC_GPREG7                               RTC_GPREG_REG(RTC_BASE_PTR,7)
#endif

/* RTC - Register array accessors */
#define RTC_GPREG(index)                         RTC_GPREG_REG(RTC_BASE_PTR,index)
#define RTC_GPREG_NS(index)                      RTC_GPREG_REG(RTC_BASE_PTR_NS,index)
#define RTC_GPREG(index)                         RTC_GPREG_REG(RTC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group RTC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group RTC_Peripheral */


/* ----------------------------------------------------------------------------
   -- SCT
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SCT_Peripheral SCT
 * @{
 */

/** SCT - Peripheral register structure */
typedef struct SCT_MemMap {
  uint32_t CONFIG;                                 /**< SCTimer Configuration, offset: 0x0 */
  union {                                          /* offset: 0x4 */
    struct {                                         /* offset: 0x4 */
      uint16_t CTRLL;                                  /**< SCT_CTRLL register, offset: 0x4 */
      uint16_t CTRLH;                                  /**< SCT_CTRLH register, offset: 0x6 */
    } CTRL_ACCESS16BIT;
    uint32_t CTRL;                                   /**< SCT Control, offset: 0x4 */
  };
  union {                                          /* offset: 0x8 */
    struct {                                         /* offset: 0x8 */
      uint16_t LIMITL;                                 /**< SCT_LIMITL register, offset: 0x8 */
      uint16_t LIMITH;                                 /**< SCT_LIMITH register, offset: 0xA */
    } LIMIT_ACCESS16BIT;
    uint32_t LIMIT;                                  /**< SCT Limit Event Select, offset: 0x8 */
  };
  union {                                          /* offset: 0xC */
    struct {                                         /* offset: 0xC */
      uint16_t HALTL;                                  /**< SCT_HALTL register, offset: 0xC */
      uint16_t HALTH;                                  /**< SCT_HALTH register, offset: 0xE */
    } HALT_ACCESS16BIT;
    uint32_t HALT;                                   /**< Halt Event Select, offset: 0xC */
  };
  union {                                          /* offset: 0x10 */
    struct {                                         /* offset: 0x10 */
      uint16_t STOPL;                                  /**< SCT_STOPL register, offset: 0x10 */
      uint16_t STOPH;                                  /**< SCT_STOPH register, offset: 0x12 */
    } STOP_ACCESS16BIT;
    uint32_t STOP;                                   /**< Stop Event Select, offset: 0x10 */
  };
  union {                                          /* offset: 0x14 */
    struct {                                         /* offset: 0x14 */
      uint16_t STARTL;                                 /**< SCT_STARTL register, offset: 0x14 */
      uint16_t STARTH;                                 /**< SCT_STARTH register, offset: 0x16 */
    } START_ACCESS16BIT;
    uint32_t START;                                  /**< Start Event Select, offset: 0x14 */
  };
  uint8_t RESERVED_0[40];
  union {                                          /* offset: 0x40 */
    struct {                                         /* offset: 0x40 */
      uint16_t COUNTL;                                 /**< SCT_COUNTL register, offset: 0x40 */
      uint16_t COUNTH;                                 /**< SCT_COUNTH register, offset: 0x42 */
    } COUNT_ACCESS16BIT;
    uint32_t COUNT;                                  /**< Counter, offset: 0x40 */
  };
  union {                                          /* offset: 0x44 */
    struct {                                         /* offset: 0x44 */
      uint16_t STATEL;                                 /**< SCT_STATEL register, offset: 0x44 */
      uint16_t STATEH;                                 /**< SCT_STATEH register, offset: 0x46 */
    } STATE_ACCESS16BIT;
    uint32_t STATE;                                  /**< State, offset: 0x44 */
  };
  uint32_t INPUT;                                  /**< Input, offset: 0x48 */
  union {                                          /* offset: 0x4C */
    struct {                                         /* offset: 0x4C */
      uint16_t REGMODEL;                               /**< SCT_REGMODEL register, offset: 0x4C */
      uint16_t REGMODEH;                               /**< SCT_REGMODEH register, offset: 0x4E */
    } REGMODE_ACCESS16BIT;
    uint32_t REGMODE;                                /**< Match/Capture Mode, offset: 0x4C */
  };
  uint32_t OUTPUT;                                 /**< Output, offset: 0x50 */
  uint32_t OUTPUTDIRCTRL;                          /**< Output Counter Direction Control, offset: 0x54 */
  uint32_t RES;                                    /**< Output Conflict Resolution, offset: 0x58 */
  uint32_t DMAREQ0;                                /**< DMA Request 0, offset: 0x5C */
  uint32_t DMAREQ1;                                /**< DMA Request 1, offset: 0x60 */
  uint8_t RESERVED_1[140];
  uint32_t EVEN;                                   /**< Event Interrupt Enable, offset: 0xF0 */
  uint32_t EVFLAG;                                 /**< Event Flag, offset: 0xF4 */
  uint32_t CONEN;                                  /**< Conflict Interrupt Enable, offset: 0xF8 */
  uint32_t CONFLAG;                                /**< Conflict Flag, offset: 0xFC */
  union {                                          /* offset: 0x100 */
    union {                                          /* offset: 0x100, array step: 0x4 */
      struct {                                         /* offset: 0x100, array step: 0x4 */
        uint16_t CAPL;                                   /**< SCT_CAPL register, array offset: 0x100, array step: 0x4 */
        uint16_t CAPH;                                   /**< SCT_CAPH register, array offset: 0x102, array step: 0x4 */
      } CAP_ACCESS16BIT[16];
      uint32_t CAP[16];                                /**< Capture Value, array offset: 0x100, array step: 0x4 */
    };
    union {                                          /* offset: 0x100, array step: 0x4 */
      struct {                                         /* offset: 0x100, array step: 0x4 */
        uint16_t MATCHL;                                 /**< SCT_MATCHL register, array offset: 0x100, array step: 0x4 */
        uint16_t MATCHH;                                 /**< SCT_MATCHH register, array offset: 0x102, array step: 0x4 */
      } MATCH_ACCESS16BIT[16];
      uint32_t MATCH[16];                              /**< Match Value, array offset: 0x100, array step: 0x4 */
    };
  };
  uint8_t RESERVED_2[192];
  union {                                          /* offset: 0x200 */
    union {                                          /* offset: 0x200, array step: 0x4 */
      struct {                                         /* offset: 0x200, array step: 0x4 */
        uint16_t CAPCTRLL;                               /**< SCT_CAPCTRLL register, array offset: 0x200, array step: 0x4 */
        uint16_t CAPCTRLH;                               /**< SCT_CAPCTRLH register, array offset: 0x202, array step: 0x4 */
      } CAPCTRL_ACCESS16BIT[16];
      uint32_t CAPCTRL[16];                            /**< Capture Control, array offset: 0x200, array step: 0x4 */
    };
    union {                                          /* offset: 0x200, array step: 0x4 */
      struct {                                         /* offset: 0x200, array step: 0x4 */
        uint16_t MATCHRELL;                              /**< SCT_MATCHRELL register, array offset: 0x200, array step: 0x4 */
        uint16_t MATCHRELH;                              /**< SCT_MATCHRELH register, array offset: 0x202, array step: 0x4 */
      } MATCHREL_ACCESS16BIT[16];
      uint32_t MATCHREL[16];                           /**< Match Reload Value, array offset: 0x200, array step: 0x4 */
    };
  };
  uint8_t RESERVED_3[192];
  struct {                                         /* offset: 0x300, array step: 0x8 */
    uint32_t STATE;                                  /**< Event n State, array offset: 0x300, array step: 0x8 */
    uint32_t CTRL;                                   /**< Event n Control, array offset: 0x304, array step: 0x8 */
  } EV[16];
  uint8_t RESERVED_4[384];
  struct {                                         /* offset: 0x500, array step: 0x8 */
    uint32_t SET;                                    /**< Output n Set, array offset: 0x500, array step: 0x8 */
    uint32_t CLR;                                    /**< Output n Clear, array offset: 0x504, array step: 0x8 */
  } OUT[10];
} volatile *SCT_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SCT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SCT_Register_Accessor_Macros SCT - Register accessor macros
 * @{
 */


/* SCT - Register accessors */
#define SCT_CONFIG_REG(base)                     ((base)->CONFIG)
#define SCT_CTRL_ACCESS16BIT_CTRLL_REG(base)     ((base)->CTRL_ACCESS16BIT.CTRLL)
#define SCT_CTRL_ACCESS16BIT_CTRLH_REG(base)     ((base)->CTRL_ACCESS16BIT.CTRLH)
#define SCT_CTRL_REG(base)                       ((base)->CTRL)
#define SCT_LIMIT_ACCESS16BIT_LIMITL_REG(base)   ((base)->LIMIT_ACCESS16BIT.LIMITL)
#define SCT_LIMIT_ACCESS16BIT_LIMITH_REG(base)   ((base)->LIMIT_ACCESS16BIT.LIMITH)
#define SCT_LIMIT_REG(base)                      ((base)->LIMIT)
#define SCT_HALT_ACCESS16BIT_HALTL_REG(base)     ((base)->HALT_ACCESS16BIT.HALTL)
#define SCT_HALT_ACCESS16BIT_HALTH_REG(base)     ((base)->HALT_ACCESS16BIT.HALTH)
#define SCT_HALT_REG(base)                       ((base)->HALT)
#define SCT_STOP_ACCESS16BIT_STOPL_REG(base)     ((base)->STOP_ACCESS16BIT.STOPL)
#define SCT_STOP_ACCESS16BIT_STOPH_REG(base)     ((base)->STOP_ACCESS16BIT.STOPH)
#define SCT_STOP_REG(base)                       ((base)->STOP)
#define SCT_START_ACCESS16BIT_STARTL_REG(base)   ((base)->START_ACCESS16BIT.STARTL)
#define SCT_START_ACCESS16BIT_STARTH_REG(base)   ((base)->START_ACCESS16BIT.STARTH)
#define SCT_START_REG(base)                      ((base)->START)
#define SCT_COUNT_ACCESS16BIT_COUNTL_REG(base)   ((base)->COUNT_ACCESS16BIT.COUNTL)
#define SCT_COUNT_ACCESS16BIT_COUNTH_REG(base)   ((base)->COUNT_ACCESS16BIT.COUNTH)
#define SCT_COUNT_REG(base)                      ((base)->COUNT)
#define SCT_STATE_ACCESS16BIT_STATEL_REG(base)   ((base)->STATE_ACCESS16BIT.STATEL)
#define SCT_STATE_ACCESS16BIT_STATEH_REG(base)   ((base)->STATE_ACCESS16BIT.STATEH)
#define SCT_STATE_REG(base)                      ((base)->STATE)
#define SCT_INPUT_REG(base)                      ((base)->INPUT)
#define SCT_REGMODE_ACCESS16BIT_REGMODEL_REG(base) ((base)->REGMODE_ACCESS16BIT.REGMODEL)
#define SCT_REGMODE_ACCESS16BIT_REGMODEH_REG(base) ((base)->REGMODE_ACCESS16BIT.REGMODEH)
#define SCT_REGMODE_REG(base)                    ((base)->REGMODE)
#define SCT_OUTPUT_REG(base)                     ((base)->OUTPUT)
#define SCT_OUTPUTDIRCTRL_REG(base)              ((base)->OUTPUTDIRCTRL)
#define SCT_RES_REG(base)                        ((base)->RES)
#define SCT_DMAREQ0_REG(base)                    ((base)->DMAREQ0)
#define SCT_DMAREQ1_REG(base)                    ((base)->DMAREQ1)
#define SCT_EVEN_REG(base)                       ((base)->EVEN)
#define SCT_EVFLAG_REG(base)                     ((base)->EVFLAG)
#define SCT_CONEN_REG(base)                      ((base)->CONEN)
#define SCT_CONFLAG_REG(base)                    ((base)->CONFLAG)
#define SCT_CAP_ACCESS16BIT_CAPL_REG(base,index) ((base)->CAP_ACCESS16BIT[index].CAPL)
#define SCT_CAP_ACCESS16BIT_CAPH_REG(base,index) ((base)->CAP_ACCESS16BIT[index].CAPH)
#define SCT_CAP_REG(base,index)                  ((base)->CAP[index])
#define SCT_MATCH_ACCESS16BIT_MATCHL_REG(base,index) ((base)->MATCH_ACCESS16BIT[index].MATCHL)
#define SCT_MATCH_ACCESS16BIT_MATCHH_REG(base,index) ((base)->MATCH_ACCESS16BIT[index].MATCHH)
#define SCT_MATCH_REG(base,index)                ((base)->MATCH[index])
#define SCT_CAPCTRL_ACCESS16BIT_CAPCTRLL_REG(base,index) ((base)->CAPCTRL_ACCESS16BIT[index].CAPCTRLL)
#define SCT_CAPCTRL_ACCESS16BIT_CAPCTRLH_REG(base,index) ((base)->CAPCTRL_ACCESS16BIT[index].CAPCTRLH)
#define SCT_CAPCTRL_REG(base,index)              ((base)->CAPCTRL[index])
#define SCT_MATCHREL_ACCESS16BIT_MATCHRELL_REG(base,index) ((base)->MATCHREL_ACCESS16BIT[index].MATCHRELL)
#define SCT_MATCHREL_ACCESS16BIT_MATCHRELH_REG(base,index) ((base)->MATCHREL_ACCESS16BIT[index].MATCHRELH)
#define SCT_MATCHREL_REG(base,index)             ((base)->MATCHREL[index])
#define SCT_EV_STATE_REG(base,index)             ((base)->EV[index].STATE)
#define SCT_EV_CTRL_REG(base,index)              ((base)->EV[index].CTRL)
#define SCT_OUT_SET_REG(base,index)              ((base)->OUT[index].SET)
#define SCT_OUT_CLR_REG(base,index)              ((base)->OUT[index].CLR)

/*!
 * @}
 */ /* end of group SCT_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SCT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SCT_Register_Masks SCT Register Masks
 * @{
 */

/*! @name CONFIG - SCTimer Configuration */
/*! @{ */
#define SCT_CONFIG_UNIFY_MASK                    (0x1U)
#define SCT_CONFIG_UNIFY_SHIFT                   (0U)
#define SCT_CONFIG_CLKMODE_MASK                  (0x6U)
#define SCT_CONFIG_CLKMODE_SHIFT                 (1U)
/*! CLKMODE - SCT Clock Mode
 *  0b00..System Clock Mode. The system clock clocks the entire SCT module including all counters and counter prescalers.
 *  0b01..Sampled System Clock Mode. The system clock clocks the SCT module, but the counter and prescalers are
 *        only enabled to count when the designated edge is detected on the input selected by the CKSEL field. The
 *        minimum pulse width on the selected clock-gate input is 1 bus clock period. This mode is the
 *        high-performance, sampled-clock mode.
 *  0b10..SCT Input Clock Mode. The input/edge selected by the CKSEL field clocks the SCT module, including all
 *        counters and prescalers, after first being synchronized to the system clock. The minimum pulse width on the
 *        clock input is 1 bus clock period. This mode is the low-power, sampled-clock mode.
 *  0b11..Asynchronous Mode. The entire SCT module is clocked directly by the input/edge selected by the CKSEL
 *        field. In this mode, the SCT outputs are switched synchronously to the SCT input clock - not the system
 *        clock. The input clock rate must be at least half the system clock rate and can be the same or faster than
 *        the system clock.
 */
#define SCT_CONFIG_CLKMODE(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_CLKMODE_SHIFT)) & SCT_CONFIG_CLKMODE_MASK)
#define SCT_CONFIG_CKSEL_MASK                    (0x78U)
#define SCT_CONFIG_CKSEL_SHIFT                   (3U)
/*! CKSEL - SCT Clock Select. The specific functionality of the designated input/edge is dependent
 *    on the CLKMODE bit selection in this register.
 *  0b0000..Rising edges on input 0
 *  0b0001..Falling edges on input 0
 *  0b0010..Rising edges on input 1
 *  0b0011..Falling edges on input 1
 *  0b0100..Rising edges on input 2
 *  0b0101..Falling edges on input 2
 *  0b0110..Rising edges on input 3
 *  0b0111..Falling edges on input 3
 *  0b1000..Rising edges on input 4
 *  0b1001..Falling edges on input 4
 *  0b1010..Rising edges on input 5
 *  0b1011..Falling edges on input 5
 *  0b1100..Rising edges on input 6
 *  0b1101..Falling edges on input 6
 *  0b1110..Rising edges on input 7
 *  0b1111..Falling edges on input 7
 */
#define SCT_CONFIG_CKSEL(x)                      (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_CKSEL_SHIFT)) & SCT_CONFIG_CKSEL_MASK)
#define SCT_CONFIG_NORELOAD_L_MASK               (0x80U)
#define SCT_CONFIG_NORELOAD_L_SHIFT              (7U)
#define SCT_CONFIG_NORELOAD_H_MASK               (0x100U)
#define SCT_CONFIG_NORELOAD_H_SHIFT              (8U)
#define SCT_CONFIG_INSYNC_MASK                   (0x1FE00U)
#define SCT_CONFIG_INSYNC_SHIFT                  (9U)
/*! INSYNC - Input Synchronization
 */
#define SCT_CONFIG_INSYNC(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_INSYNC_SHIFT)) & SCT_CONFIG_INSYNC_MASK)
#define SCT_CONFIG_AUTOLIMIT_L_MASK              (0x20000U)
#define SCT_CONFIG_AUTOLIMIT_L_SHIFT             (17U)
#define SCT_CONFIG_AUTOLIMIT_H_MASK              (0x40000U)
#define SCT_CONFIG_AUTOLIMIT_H_SHIFT             (18U)
/*! @} */

/*! @name CTRLL - SCT_CTRLL register */
/*! @{ */
#define SCT_CTRLL_DOWN_L_MASK                    (0x1U)
#define SCT_CTRLL_DOWN_L_SHIFT                   (0U)
#define SCT_CTRLL_STOP_L_MASK                    (0x2U)
#define SCT_CTRLL_STOP_L_SHIFT                   (1U)
#define SCT_CTRLL_HALT_L_MASK                    (0x4U)
#define SCT_CTRLL_HALT_L_SHIFT                   (2U)
#define SCT_CTRLL_CLRCTR_L_MASK                  (0x8U)
#define SCT_CTRLL_CLRCTR_L_SHIFT                 (3U)
#define SCT_CTRLL_BIDIR_L_MASK                   (0x10U)
#define SCT_CTRLL_BIDIR_L_SHIFT                  (4U)
#define SCT_CTRLL_PRE_L_MASK                     (0x1FE0U)
#define SCT_CTRLL_PRE_L_SHIFT                    (5U)
/*! PRE_L - Prescaler for Low Counter
 */
#define SCT_CTRLL_PRE_L(x)                       (((uint16_t)(((uint16_t)(x)) << SCT_CTRLL_PRE_L_SHIFT)) & SCT_CTRLL_PRE_L_MASK)
/*! @} */

/*! @name CTRLH - SCT_CTRLH register */
/*! @{ */
#define SCT_CTRLH_DOWN_H_MASK                    (0x1U)
#define SCT_CTRLH_DOWN_H_SHIFT                   (0U)
#define SCT_CTRLH_STOP_H_MASK                    (0x2U)
#define SCT_CTRLH_STOP_H_SHIFT                   (1U)
#define SCT_CTRLH_HALT_H_MASK                    (0x4U)
#define SCT_CTRLH_HALT_H_SHIFT                   (2U)
#define SCT_CTRLH_CLRCTR_H_MASK                  (0x8U)
#define SCT_CTRLH_CLRCTR_H_SHIFT                 (3U)
#define SCT_CTRLH_BIDIR_H_MASK                   (0x10U)
#define SCT_CTRLH_BIDIR_H_SHIFT                  (4U)
#define SCT_CTRLH_PRE_H_MASK                     (0x1FE0U)
#define SCT_CTRLH_PRE_H_SHIFT                    (5U)
/*! PRE_H - Prescaler for High Counter
 */
#define SCT_CTRLH_PRE_H(x)                       (((uint16_t)(((uint16_t)(x)) << SCT_CTRLH_PRE_H_SHIFT)) & SCT_CTRLH_PRE_H_MASK)
/*! @} */

/*! @name CTRL - SCT Control */
/*! @{ */
#define SCT_CTRL_DOWN_L_MASK                     (0x1U)
#define SCT_CTRL_DOWN_L_SHIFT                    (0U)
#define SCT_CTRL_STOP_L_MASK                     (0x2U)
#define SCT_CTRL_STOP_L_SHIFT                    (1U)
#define SCT_CTRL_HALT_L_MASK                     (0x4U)
#define SCT_CTRL_HALT_L_SHIFT                    (2U)
#define SCT_CTRL_CLRCTR_L_MASK                   (0x8U)
#define SCT_CTRL_CLRCTR_L_SHIFT                  (3U)
#define SCT_CTRL_BIDIR_L_MASK                    (0x10U)
#define SCT_CTRL_BIDIR_L_SHIFT                   (4U)
#define SCT_CTRL_PRE_L_MASK                      (0x1FE0U)
#define SCT_CTRL_PRE_L_SHIFT                     (5U)
/*! PRE_L - Prescaler for Low Counter
 */
#define SCT_CTRL_PRE_L(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_PRE_L_SHIFT)) & SCT_CTRL_PRE_L_MASK)
#define SCT_CTRL_DOWN_H_MASK                     (0x10000U)
#define SCT_CTRL_DOWN_H_SHIFT                    (16U)
#define SCT_CTRL_STOP_H_MASK                     (0x20000U)
#define SCT_CTRL_STOP_H_SHIFT                    (17U)
#define SCT_CTRL_HALT_H_MASK                     (0x40000U)
#define SCT_CTRL_HALT_H_SHIFT                    (18U)
#define SCT_CTRL_CLRCTR_H_MASK                   (0x80000U)
#define SCT_CTRL_CLRCTR_H_SHIFT                  (19U)
#define SCT_CTRL_BIDIR_H_MASK                    (0x100000U)
#define SCT_CTRL_BIDIR_H_SHIFT                   (20U)
#define SCT_CTRL_PRE_H_MASK                      (0x1FE00000U)
#define SCT_CTRL_PRE_H_SHIFT                     (21U)
/*! PRE_H - Prescaler for High Counter
 */
#define SCT_CTRL_PRE_H(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_PRE_H_SHIFT)) & SCT_CTRL_PRE_H_MASK)
/*! @} */

/*! @name LIMITL - SCT_LIMITL register */
/*! @{ */
#define SCT_LIMITL_LIMITL_MASK                   (0xFFFFU)
#define SCT_LIMITL_LIMITL_SHIFT                  (0U)
#define SCT_LIMITL_LIMITL(x)                     (((uint16_t)(((uint16_t)(x)) << SCT_LIMITL_LIMITL_SHIFT)) & SCT_LIMITL_LIMITL_MASK)
/*! @} */

/*! @name LIMITH - SCT_LIMITH register */
/*! @{ */
#define SCT_LIMITH_LIMITH_MASK                   (0xFFFFU)
#define SCT_LIMITH_LIMITH_SHIFT                  (0U)
#define SCT_LIMITH_LIMITH(x)                     (((uint16_t)(((uint16_t)(x)) << SCT_LIMITH_LIMITH_SHIFT)) & SCT_LIMITH_LIMITH_MASK)
/*! @} */

/*! @name LIMIT - SCT Limit Event Select */
/*! @{ */
#define SCT_LIMIT_LIMMSK_L_MASK                  (0xFFFFU)
#define SCT_LIMIT_LIMMSK_L_SHIFT                 (0U)
/*! LIMMSK_L - Limit Event Counter Low
 */
#define SCT_LIMIT_LIMMSK_L(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_LIMIT_LIMMSK_L_SHIFT)) & SCT_LIMIT_LIMMSK_L_MASK)
#define SCT_LIMIT_LIMMSK_H_MASK                  (0xFFFF0000U)
#define SCT_LIMIT_LIMMSK_H_SHIFT                 (16U)
/*! LIMMSK_H - Limit Event Counter High
 */
#define SCT_LIMIT_LIMMSK_H(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_LIMIT_LIMMSK_H_SHIFT)) & SCT_LIMIT_LIMMSK_H_MASK)
/*! @} */

/*! @name HALTL - SCT_HALTL register */
/*! @{ */
#define SCT_HALTL_HALTL_MASK                     (0xFFFFU)
#define SCT_HALTL_HALTL_SHIFT                    (0U)
#define SCT_HALTL_HALTL(x)                       (((uint16_t)(((uint16_t)(x)) << SCT_HALTL_HALTL_SHIFT)) & SCT_HALTL_HALTL_MASK)
/*! @} */

/*! @name HALTH - SCT_HALTH register */
/*! @{ */
#define SCT_HALTH_HALTH_MASK                     (0xFFFFU)
#define SCT_HALTH_HALTH_SHIFT                    (0U)
#define SCT_HALTH_HALTH(x)                       (((uint16_t)(((uint16_t)(x)) << SCT_HALTH_HALTH_SHIFT)) & SCT_HALTH_HALTH_MASK)
/*! @} */

/*! @name HALT - Halt Event Select */
/*! @{ */
#define SCT_HALT_HALTMSK_L_MASK                  (0xFFFFU)
#define SCT_HALT_HALTMSK_L_SHIFT                 (0U)
/*! HALTMSK_L - Halt Event Low
 */
#define SCT_HALT_HALTMSK_L(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_HALT_HALTMSK_L_SHIFT)) & SCT_HALT_HALTMSK_L_MASK)
#define SCT_HALT_HALTMSK_H_MASK                  (0xFFFF0000U)
#define SCT_HALT_HALTMSK_H_SHIFT                 (16U)
/*! HALTMSK_H - Halt Event High
 */
#define SCT_HALT_HALTMSK_H(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_HALT_HALTMSK_H_SHIFT)) & SCT_HALT_HALTMSK_H_MASK)
/*! @} */

/*! @name STOPL - SCT_STOPL register */
/*! @{ */
#define SCT_STOPL_STOPL_MASK                     (0xFFFFU)
#define SCT_STOPL_STOPL_SHIFT                    (0U)
#define SCT_STOPL_STOPL(x)                       (((uint16_t)(((uint16_t)(x)) << SCT_STOPL_STOPL_SHIFT)) & SCT_STOPL_STOPL_MASK)
/*! @} */

/*! @name STOPH - SCT_STOPH register */
/*! @{ */
#define SCT_STOPH_STOPH_MASK                     (0xFFFFU)
#define SCT_STOPH_STOPH_SHIFT                    (0U)
#define SCT_STOPH_STOPH(x)                       (((uint16_t)(((uint16_t)(x)) << SCT_STOPH_STOPH_SHIFT)) & SCT_STOPH_STOPH_MASK)
/*! @} */

/*! @name STOP - Stop Event Select */
/*! @{ */
#define SCT_STOP_STOPMSK_L_MASK                  (0xFFFFU)
#define SCT_STOP_STOPMSK_L_SHIFT                 (0U)
/*! STOPMSK_L - Stop Event Low
 */
#define SCT_STOP_STOPMSK_L(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_STOP_STOPMSK_L_SHIFT)) & SCT_STOP_STOPMSK_L_MASK)
#define SCT_STOP_STOPMSK_H_MASK                  (0xFFFF0000U)
#define SCT_STOP_STOPMSK_H_SHIFT                 (16U)
/*! STOPMSK_H - Stop Event High
 */
#define SCT_STOP_STOPMSK_H(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_STOP_STOPMSK_H_SHIFT)) & SCT_STOP_STOPMSK_H_MASK)
/*! @} */

/*! @name STARTL - SCT_STARTL register */
/*! @{ */
#define SCT_STARTL_STARTL_MASK                   (0xFFFFU)
#define SCT_STARTL_STARTL_SHIFT                  (0U)
#define SCT_STARTL_STARTL(x)                     (((uint16_t)(((uint16_t)(x)) << SCT_STARTL_STARTL_SHIFT)) & SCT_STARTL_STARTL_MASK)
/*! @} */

/*! @name STARTH - SCT_STARTH register */
/*! @{ */
#define SCT_STARTH_STARTH_MASK                   (0xFFFFU)
#define SCT_STARTH_STARTH_SHIFT                  (0U)
#define SCT_STARTH_STARTH(x)                     (((uint16_t)(((uint16_t)(x)) << SCT_STARTH_STARTH_SHIFT)) & SCT_STARTH_STARTH_MASK)
/*! @} */

/*! @name START - Start Event Select */
/*! @{ */
#define SCT_START_STARTMSK_L_MASK                (0xFFFFU)
#define SCT_START_STARTMSK_L_SHIFT               (0U)
/*! STARTMSK_L - If bit n is one, event n clears the CTRL[STOP_L] = 0 (event 0 = bit 0, event 1 =
 *    bit 1, etc.). The number of bits = number of events in this SCT.
 */
#define SCT_START_STARTMSK_L(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_START_STARTMSK_L_SHIFT)) & SCT_START_STARTMSK_L_MASK)
#define SCT_START_STARTMSK_H_MASK                (0xFFFF0000U)
#define SCT_START_STARTMSK_H_SHIFT               (16U)
/*! STARTMSK_H - If bit n is one, event n clears the CTRL[STOP_H] = 0 (event 0 = bit 16, event 1 =
 *    bit 17, etc.). The number of bits = number of events in this SCT.
 */
#define SCT_START_STARTMSK_H(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_START_STARTMSK_H_SHIFT)) & SCT_START_STARTMSK_H_MASK)
/*! @} */

/*! @name COUNTL - SCT_COUNTL register */
/*! @{ */
#define SCT_COUNTL_COUNTL_MASK                   (0xFFFFU)
#define SCT_COUNTL_COUNTL_SHIFT                  (0U)
#define SCT_COUNTL_COUNTL(x)                     (((uint16_t)(((uint16_t)(x)) << SCT_COUNTL_COUNTL_SHIFT)) & SCT_COUNTL_COUNTL_MASK)
/*! @} */

/*! @name COUNTH - SCT_COUNTH register */
/*! @{ */
#define SCT_COUNTH_COUNTH_MASK                   (0xFFFFU)
#define SCT_COUNTH_COUNTH_SHIFT                  (0U)
#define SCT_COUNTH_COUNTH(x)                     (((uint16_t)(((uint16_t)(x)) << SCT_COUNTH_COUNTH_SHIFT)) & SCT_COUNTH_COUNTH_MASK)
/*! @} */

/*! @name COUNT - Counter */
/*! @{ */
#define SCT_COUNT_CTR_L_MASK                     (0xFFFFU)
#define SCT_COUNT_CTR_L_SHIFT                    (0U)
/*! CTR_L - Counter Low
 */
#define SCT_COUNT_CTR_L(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_COUNT_CTR_L_SHIFT)) & SCT_COUNT_CTR_L_MASK)
#define SCT_COUNT_CTR_H_MASK                     (0xFFFF0000U)
#define SCT_COUNT_CTR_H_SHIFT                    (16U)
/*! CTR_H - Counter High
 */
#define SCT_COUNT_CTR_H(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_COUNT_CTR_H_SHIFT)) & SCT_COUNT_CTR_H_MASK)
/*! @} */

/*! @name STATEL - SCT_STATEL register */
/*! @{ */
#define SCT_STATEL_STATEL_MASK                   (0xFFFFU)
#define SCT_STATEL_STATEL_SHIFT                  (0U)
#define SCT_STATEL_STATEL(x)                     (((uint16_t)(((uint16_t)(x)) << SCT_STATEL_STATEL_SHIFT)) & SCT_STATEL_STATEL_MASK)
/*! @} */

/*! @name STATEH - SCT_STATEH register */
/*! @{ */
#define SCT_STATEH_STATEH_MASK                   (0xFFFFU)
#define SCT_STATEH_STATEH_SHIFT                  (0U)
#define SCT_STATEH_STATEH(x)                     (((uint16_t)(((uint16_t)(x)) << SCT_STATEH_STATEH_SHIFT)) & SCT_STATEH_STATEH_MASK)
/*! @} */

/*! @name STATE - State */
/*! @{ */
#define SCT_STATE_STATE_L_MASK                   (0x1FU)
#define SCT_STATE_STATE_L_SHIFT                  (0U)
/*! STATE_L - State variable
 */
#define SCT_STATE_STATE_L(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_STATE_STATE_L_SHIFT)) & SCT_STATE_STATE_L_MASK)
#define SCT_STATE_STATE_H_MASK                   (0x1F0000U)
#define SCT_STATE_STATE_H_SHIFT                  (16U)
/*! STATE_H - State variable
 */
#define SCT_STATE_STATE_H(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_STATE_STATE_H_SHIFT)) & SCT_STATE_STATE_H_MASK)
/*! @} */

/*! @name INPUT - Input */
/*! @{ */
#define SCT_INPUT_AIN0_MASK                      (0x1U)
#define SCT_INPUT_AIN0_SHIFT                     (0U)
#define SCT_INPUT_AIN1_MASK                      (0x2U)
#define SCT_INPUT_AIN1_SHIFT                     (1U)
#define SCT_INPUT_AIN2_MASK                      (0x4U)
#define SCT_INPUT_AIN2_SHIFT                     (2U)
#define SCT_INPUT_AIN3_MASK                      (0x8U)
#define SCT_INPUT_AIN3_SHIFT                     (3U)
#define SCT_INPUT_AIN4_MASK                      (0x10U)
#define SCT_INPUT_AIN4_SHIFT                     (4U)
#define SCT_INPUT_AIN5_MASK                      (0x20U)
#define SCT_INPUT_AIN5_SHIFT                     (5U)
#define SCT_INPUT_AIN6_MASK                      (0x40U)
#define SCT_INPUT_AIN6_SHIFT                     (6U)
#define SCT_INPUT_AIN7_MASK                      (0x80U)
#define SCT_INPUT_AIN7_SHIFT                     (7U)
#define SCT_INPUT_AIN8_MASK                      (0x100U)
#define SCT_INPUT_AIN8_SHIFT                     (8U)
#define SCT_INPUT_AIN9_MASK                      (0x200U)
#define SCT_INPUT_AIN9_SHIFT                     (9U)
#define SCT_INPUT_AIN10_MASK                     (0x400U)
#define SCT_INPUT_AIN10_SHIFT                    (10U)
#define SCT_INPUT_AIN11_MASK                     (0x800U)
#define SCT_INPUT_AIN11_SHIFT                    (11U)
#define SCT_INPUT_AIN12_MASK                     (0x1000U)
#define SCT_INPUT_AIN12_SHIFT                    (12U)
#define SCT_INPUT_AIN13_MASK                     (0x2000U)
#define SCT_INPUT_AIN13_SHIFT                    (13U)
#define SCT_INPUT_AIN14_MASK                     (0x4000U)
#define SCT_INPUT_AIN14_SHIFT                    (14U)
#define SCT_INPUT_AIN15_MASK                     (0x8000U)
#define SCT_INPUT_AIN15_SHIFT                    (15U)
#define SCT_INPUT_SIN0_MASK                      (0x10000U)
#define SCT_INPUT_SIN0_SHIFT                     (16U)
#define SCT_INPUT_SIN1_MASK                      (0x20000U)
#define SCT_INPUT_SIN1_SHIFT                     (17U)
#define SCT_INPUT_SIN2_MASK                      (0x40000U)
#define SCT_INPUT_SIN2_SHIFT                     (18U)
#define SCT_INPUT_SIN3_MASK                      (0x80000U)
#define SCT_INPUT_SIN3_SHIFT                     (19U)
#define SCT_INPUT_SIN4_MASK                      (0x100000U)
#define SCT_INPUT_SIN4_SHIFT                     (20U)
#define SCT_INPUT_SIN5_MASK                      (0x200000U)
#define SCT_INPUT_SIN5_SHIFT                     (21U)
#define SCT_INPUT_SIN6_MASK                      (0x400000U)
#define SCT_INPUT_SIN6_SHIFT                     (22U)
#define SCT_INPUT_SIN7_MASK                      (0x800000U)
#define SCT_INPUT_SIN7_SHIFT                     (23U)
#define SCT_INPUT_SIN8_MASK                      (0x1000000U)
#define SCT_INPUT_SIN8_SHIFT                     (24U)
#define SCT_INPUT_SIN9_MASK                      (0x2000000U)
#define SCT_INPUT_SIN9_SHIFT                     (25U)
#define SCT_INPUT_SIN10_MASK                     (0x4000000U)
#define SCT_INPUT_SIN10_SHIFT                    (26U)
#define SCT_INPUT_SIN11_MASK                     (0x8000000U)
#define SCT_INPUT_SIN11_SHIFT                    (27U)
#define SCT_INPUT_SIN12_MASK                     (0x10000000U)
#define SCT_INPUT_SIN12_SHIFT                    (28U)
#define SCT_INPUT_SIN13_MASK                     (0x20000000U)
#define SCT_INPUT_SIN13_SHIFT                    (29U)
#define SCT_INPUT_SIN14_MASK                     (0x40000000U)
#define SCT_INPUT_SIN14_SHIFT                    (30U)
#define SCT_INPUT_SIN15_MASK                     (0x80000000U)
#define SCT_INPUT_SIN15_SHIFT                    (31U)
/*! @} */

/*! @name REGMODEL - SCT_REGMODEL register */
/*! @{ */
#define SCT_REGMODEL_REGMODEL_MASK               (0xFFFFU)
#define SCT_REGMODEL_REGMODEL_SHIFT              (0U)
/*! REGMODEL
 *  0b0..Match. Register n operates as a match register
 *  0b1..Capture. Register n operates as a capture register
 */
#define SCT_REGMODEL_REGMODEL(x)                 (((uint16_t)(((uint16_t)(x)) << SCT_REGMODEL_REGMODEL_SHIFT)) & SCT_REGMODEL_REGMODEL_MASK)
#define SCT_REGMODEL_REGMOD_L_MASK               (0xFFFFU)
#define SCT_REGMODEL_REGMOD_L_SHIFT              (0U)
/*! REGMOD_L
 *  0b0..Match. Register n operates as a match register
 *  0b1..Capture. Register n operates as a capture register
 */
#define SCT_REGMODEL_REGMOD_L(x)                 (((uint16_t)(((uint16_t)(x)) << SCT_REGMODEL_REGMOD_L_SHIFT)) & SCT_REGMODEL_REGMOD_L_MASK)
#define SCT_REGMODEL_REGMOD_H_MASK               (0xFFFF0000U)
#define SCT_REGMODEL_REGMOD_H_SHIFT              (16U)
/*! REGMOD_H
 *  0b0..Match. Register n operates as a match register
 *  0b1..Capture. Register n operates as a capture register
 */
#define SCT_REGMODEL_REGMOD_H(x)                 (((uint16_t)(((uint16_t)(x)) << SCT_REGMODEL_REGMOD_H_SHIFT)) & SCT_REGMODEL_REGMOD_H_MASK)
/*! @} */

/*! @name REGMODEH - SCT_REGMODEH register */
/*! @{ */
#define SCT_REGMODEH_REGMODEH_MASK               (0xFFFFU)
#define SCT_REGMODEH_REGMODEH_SHIFT              (0U)
/*! REGMODEH
 *  0b0..Match. Register n operates as a match register
 *  0b1..Capture. Register n operates as a capture register
 */
#define SCT_REGMODEH_REGMODEH(x)                 (((uint16_t)(((uint16_t)(x)) << SCT_REGMODEH_REGMODEH_SHIFT)) & SCT_REGMODEH_REGMODEH_MASK)
#define SCT_REGMODEH_REGMOD_L_MASK               (0xFFFFU)
#define SCT_REGMODEH_REGMOD_L_SHIFT              (0U)
/*! REGMOD_L
 *  0b0..Match. Register n operates as a match register
 *  0b1..Capture. Register n operates as a capture register
 */
#define SCT_REGMODEH_REGMOD_L(x)                 (((uint16_t)(((uint16_t)(x)) << SCT_REGMODEH_REGMOD_L_SHIFT)) & SCT_REGMODEH_REGMOD_L_MASK)
#define SCT_REGMODEH_REGMOD_H_MASK               (0xFFFF0000U)
#define SCT_REGMODEH_REGMOD_H_SHIFT              (16U)
/*! REGMOD_H
 *  0b0..Match. Register n operates as a match register
 *  0b1..Capture. Register n operates as a capture register
 */
#define SCT_REGMODEH_REGMOD_H(x)                 (((uint16_t)(((uint16_t)(x)) << SCT_REGMODEH_REGMOD_H_SHIFT)) & SCT_REGMODEH_REGMOD_H_MASK)
/*! @} */

/*! @name REGMODE - Match/Capture Mode */
/*! @{ */
#define SCT_REGMODE_REGMOD_L_MASK                (0xFFFFU)
#define SCT_REGMODE_REGMOD_L_SHIFT               (0U)
/*! REGMOD_L
 *  0b0..Match. Register n operates as a match register
 *  0b1..Capture. Register n operates as a capture register
 */
#define SCT_REGMODE_REGMOD_L(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_REGMODE_REGMOD_L_SHIFT)) & SCT_REGMODE_REGMOD_L_MASK)
#define SCT_REGMODE_REGMOD_L0_MASK               (0x1U)
#define SCT_REGMODE_REGMOD_L0_SHIFT              (0U)
#define SCT_REGMODE_REGMOD_L1_MASK               (0x2U)
#define SCT_REGMODE_REGMOD_L1_SHIFT              (1U)
#define SCT_REGMODE_REGMOD_L2_MASK               (0x4U)
#define SCT_REGMODE_REGMOD_L2_SHIFT              (2U)
#define SCT_REGMODE_REGMOD_L3_MASK               (0x8U)
#define SCT_REGMODE_REGMOD_L3_SHIFT              (3U)
#define SCT_REGMODE_REGMOD_L4_MASK               (0x10U)
#define SCT_REGMODE_REGMOD_L4_SHIFT              (4U)
#define SCT_REGMODE_REGMOD_L5_MASK               (0x20U)
#define SCT_REGMODE_REGMOD_L5_SHIFT              (5U)
#define SCT_REGMODE_REGMOD_L6_MASK               (0x40U)
#define SCT_REGMODE_REGMOD_L6_SHIFT              (6U)
#define SCT_REGMODE_REGMOD_L7_MASK               (0x80U)
#define SCT_REGMODE_REGMOD_L7_SHIFT              (7U)
#define SCT_REGMODE_REGMOD_L8_MASK               (0x100U)
#define SCT_REGMODE_REGMOD_L8_SHIFT              (8U)
#define SCT_REGMODE_REGMOD_L9_MASK               (0x200U)
#define SCT_REGMODE_REGMOD_L9_SHIFT              (9U)
#define SCT_REGMODE_REGMOD_L10_MASK              (0x400U)
#define SCT_REGMODE_REGMOD_L10_SHIFT             (10U)
#define SCT_REGMODE_REGMOD_L11_MASK              (0x800U)
#define SCT_REGMODE_REGMOD_L11_SHIFT             (11U)
#define SCT_REGMODE_REGMOD_L12_MASK              (0x1000U)
#define SCT_REGMODE_REGMOD_L12_SHIFT             (12U)
#define SCT_REGMODE_REGMOD_L13_MASK              (0x2000U)
#define SCT_REGMODE_REGMOD_L13_SHIFT             (13U)
#define SCT_REGMODE_REGMOD_L14_MASK              (0x4000U)
#define SCT_REGMODE_REGMOD_L14_SHIFT             (14U)
#define SCT_REGMODE_REGMOD_L15_MASK              (0x8000U)
#define SCT_REGMODE_REGMOD_L15_SHIFT             (15U)
#define SCT_REGMODE_REGMOD_H_MASK                (0xFFFF0000U)
#define SCT_REGMODE_REGMOD_H_SHIFT               (16U)
/*! REGMOD_H
 *  0b0..Match. Register n operates as a match register
 *  0b1..Capture. Register n operates as a capture register
 */
#define SCT_REGMODE_REGMOD_H(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_REGMODE_REGMOD_H_SHIFT)) & SCT_REGMODE_REGMOD_H_MASK)
#define SCT_REGMODE_REGMOD_H0_MASK               (0x10000U)
#define SCT_REGMODE_REGMOD_H0_SHIFT              (16U)
#define SCT_REGMODE_REGMOD_H1_MASK               (0x20000U)
#define SCT_REGMODE_REGMOD_H1_SHIFT              (17U)
#define SCT_REGMODE_REGMOD_H2_MASK               (0x40000U)
#define SCT_REGMODE_REGMOD_H2_SHIFT              (18U)
#define SCT_REGMODE_REGMOD_H3_MASK               (0x80000U)
#define SCT_REGMODE_REGMOD_H3_SHIFT              (19U)
#define SCT_REGMODE_REGMOD_H4_MASK               (0x100000U)
#define SCT_REGMODE_REGMOD_H4_SHIFT              (20U)
#define SCT_REGMODE_REGMOD_H5_MASK               (0x200000U)
#define SCT_REGMODE_REGMOD_H5_SHIFT              (21U)
#define SCT_REGMODE_REGMOD_H6_MASK               (0x400000U)
#define SCT_REGMODE_REGMOD_H6_SHIFT              (22U)
#define SCT_REGMODE_REGMOD_H7_MASK               (0x800000U)
#define SCT_REGMODE_REGMOD_H7_SHIFT              (23U)
#define SCT_REGMODE_REGMOD_H8_MASK               (0x1000000U)
#define SCT_REGMODE_REGMOD_H8_SHIFT              (24U)
#define SCT_REGMODE_REGMOD_H9_MASK               (0x2000000U)
#define SCT_REGMODE_REGMOD_H9_SHIFT              (25U)
#define SCT_REGMODE_REGMOD_H10_MASK              (0x4000000U)
#define SCT_REGMODE_REGMOD_H10_SHIFT             (26U)
#define SCT_REGMODE_REGMOD_H11_MASK              (0x8000000U)
#define SCT_REGMODE_REGMOD_H11_SHIFT             (27U)
#define SCT_REGMODE_REGMOD_H12_MASK              (0x10000000U)
#define SCT_REGMODE_REGMOD_H12_SHIFT             (28U)
#define SCT_REGMODE_REGMOD_H13_MASK              (0x20000000U)
#define SCT_REGMODE_REGMOD_H13_SHIFT             (29U)
#define SCT_REGMODE_REGMOD_H14_MASK              (0x40000000U)
#define SCT_REGMODE_REGMOD_H14_SHIFT             (30U)
#define SCT_REGMODE_REGMOD_H15_MASK              (0x80000000U)
#define SCT_REGMODE_REGMOD_H15_SHIFT             (31U)
/*! @} */

/*! @name OUTPUT - Output */
/*! @{ */
#define SCT_OUTPUT_OUT0_MASK                     (0x1U)
#define SCT_OUTPUT_OUT0_SHIFT                    (0U)
#define SCT_OUTPUT_OUT1_MASK                     (0x2U)
#define SCT_OUTPUT_OUT1_SHIFT                    (1U)
#define SCT_OUTPUT_OUT2_MASK                     (0x4U)
#define SCT_OUTPUT_OUT2_SHIFT                    (2U)
#define SCT_OUTPUT_OUT3_MASK                     (0x8U)
#define SCT_OUTPUT_OUT3_SHIFT                    (3U)
#define SCT_OUTPUT_OUT4_MASK                     (0x10U)
#define SCT_OUTPUT_OUT4_SHIFT                    (4U)
#define SCT_OUTPUT_OUT5_MASK                     (0x20U)
#define SCT_OUTPUT_OUT5_SHIFT                    (5U)
#define SCT_OUTPUT_OUT6_MASK                     (0x40U)
#define SCT_OUTPUT_OUT6_SHIFT                    (6U)
#define SCT_OUTPUT_OUT7_MASK                     (0x80U)
#define SCT_OUTPUT_OUT7_SHIFT                    (7U)
#define SCT_OUTPUT_OUT8_MASK                     (0x100U)
#define SCT_OUTPUT_OUT8_SHIFT                    (8U)
#define SCT_OUTPUT_OUT9_MASK                     (0x200U)
#define SCT_OUTPUT_OUT9_SHIFT                    (9U)
/*! @} */

/*! @name OUTPUTDIRCTRL - Output Counter Direction Control */
/*! @{ */
#define SCT_OUTPUTDIRCTRL_SETCLR0_MASK           (0x3U)
#define SCT_OUTPUTDIRCTRL_SETCLR0_SHIFT          (0U)
/*! SETCLR0 - Set/Clear Operation on Output n
 *  0b00..Set and clear do not depend on the direction of any counter.
 *  0b01..Set and clear are reversed when counter L or the unified counter is counting down.
 *  0b10..Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1.
 *  0b11..Reserved. Do not program this value.
 */
#define SCT_OUTPUTDIRCTRL_SETCLR0(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR0_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR0_MASK)
#define SCT_OUTPUTDIRCTRL_SETCLR1_MASK           (0xCU)
#define SCT_OUTPUTDIRCTRL_SETCLR1_SHIFT          (2U)
/*! SETCLR1 - Set/Clear Operation on Output n
 *  0b00..Set and clear do not depend on the direction of any counter.
 *  0b01..Set and clear are reversed when counter L or the unified counter is counting down.
 *  0b10..Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1.
 *  0b11..Reserved. Do not program this value.
 */
#define SCT_OUTPUTDIRCTRL_SETCLR1(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR1_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR1_MASK)
#define SCT_OUTPUTDIRCTRL_SETCLR2_MASK           (0x30U)
#define SCT_OUTPUTDIRCTRL_SETCLR2_SHIFT          (4U)
/*! SETCLR2 - Set/Clear Operation on Output n
 *  0b00..Set and clear do not depend on the direction of any counter.
 *  0b01..Set and clear are reversed when counter L or the unified counter is counting down.
 *  0b10..Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1.
 *  0b11..Reserved. Do not program this value.
 */
#define SCT_OUTPUTDIRCTRL_SETCLR2(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR2_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR2_MASK)
#define SCT_OUTPUTDIRCTRL_SETCLR3_MASK           (0xC0U)
#define SCT_OUTPUTDIRCTRL_SETCLR3_SHIFT          (6U)
/*! SETCLR3 - Set/Clear Operation on Output n
 *  0b00..Set and clear do not depend on the direction of any counter.
 *  0b01..Set and clear are reversed when counter L or the unified counter is counting down.
 *  0b10..Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1.
 *  0b11..Reserved. Do not program this value.
 */
#define SCT_OUTPUTDIRCTRL_SETCLR3(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR3_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR3_MASK)
#define SCT_OUTPUTDIRCTRL_SETCLR4_MASK           (0x300U)
#define SCT_OUTPUTDIRCTRL_SETCLR4_SHIFT          (8U)
/*! SETCLR4 - Set/Clear Operation on Output n
 *  0b00..Set and clear do not depend on the direction of any counter.
 *  0b01..Set and clear are reversed when counter L or the unified counter is counting down.
 *  0b10..Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1.
 *  0b11..Reserved. Do not program this value.
 */
#define SCT_OUTPUTDIRCTRL_SETCLR4(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR4_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR4_MASK)
#define SCT_OUTPUTDIRCTRL_SETCLR5_MASK           (0xC00U)
#define SCT_OUTPUTDIRCTRL_SETCLR5_SHIFT          (10U)
/*! SETCLR5 - Set/Clear Operation on Output n
 *  0b00..Set and clear do not depend on the direction of any counter.
 *  0b01..Set and clear are reversed when counter L or the unified counter is counting down.
 *  0b10..Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1.
 *  0b11..Reserved. Do not program this value.
 */
#define SCT_OUTPUTDIRCTRL_SETCLR5(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR5_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR5_MASK)
#define SCT_OUTPUTDIRCTRL_SETCLR6_MASK           (0x3000U)
#define SCT_OUTPUTDIRCTRL_SETCLR6_SHIFT          (12U)
/*! SETCLR6 - Set/Clear Operation on Output n
 *  0b00..Set and clear do not depend on the direction of any counter.
 *  0b01..Set and clear are reversed when counter L or the unified counter is counting down.
 *  0b10..Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1.
 *  0b11..Reserved. Do not program this value.
 */
#define SCT_OUTPUTDIRCTRL_SETCLR6(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR6_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR6_MASK)
#define SCT_OUTPUTDIRCTRL_SETCLR7_MASK           (0xC000U)
#define SCT_OUTPUTDIRCTRL_SETCLR7_SHIFT          (14U)
/*! SETCLR7 - Set/Clear Operation on Output n
 *  0b00..Set and clear do not depend on the direction of any counter.
 *  0b01..Set and clear are reversed when counter L or the unified counter is counting down.
 *  0b10..Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1.
 *  0b11..Reserved. Do not program this value.
 */
#define SCT_OUTPUTDIRCTRL_SETCLR7(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR7_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR7_MASK)
#define SCT_OUTPUTDIRCTRL_SETCLR8_MASK           (0x30000U)
#define SCT_OUTPUTDIRCTRL_SETCLR8_SHIFT          (16U)
/*! SETCLR8 - Set/Clear Operation on Output n
 *  0b00..Set and clear do not depend on the direction of any counter.
 *  0b01..Set and clear are reversed when counter L or the unified counter is counting down.
 *  0b10..Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1.
 *  0b11..Reserved. Do not program this value.
 */
#define SCT_OUTPUTDIRCTRL_SETCLR8(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR8_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR8_MASK)
#define SCT_OUTPUTDIRCTRL_SETCLR9_MASK           (0xC0000U)
#define SCT_OUTPUTDIRCTRL_SETCLR9_SHIFT          (18U)
/*! SETCLR9 - Set/Clear Operation on Output n
 *  0b00..Set and clear do not depend on the direction of any counter.
 *  0b01..Set and clear are reversed when counter L or the unified counter is counting down.
 *  0b10..Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1.
 *  0b11..Reserved. Do not program this value.
 */
#define SCT_OUTPUTDIRCTRL_SETCLR9(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR9_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR9_MASK)
/*! @} */

/*! @name RES - Output Conflict Resolution */
/*! @{ */
#define SCT_RES_O0RES_MASK                       (0x3U)
#define SCT_RES_O0RES_SHIFT                      (0U)
/*! O0RES - Effect of simultaneous set and clear on output n
 *  0b00..No change
 *  0b01..Set output (or clear based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b10..Clear output (or set based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b11..Toggle output
 */
#define SCT_RES_O0RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O0RES_SHIFT)) & SCT_RES_O0RES_MASK)
#define SCT_RES_O1RES_MASK                       (0xCU)
#define SCT_RES_O1RES_SHIFT                      (2U)
/*! O1RES - Effect of simultaneous set and clear on output n
 *  0b00..No change
 *  0b01..Set output (or clear based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b10..Clear output (or set based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b11..Toggle output
 */
#define SCT_RES_O1RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O1RES_SHIFT)) & SCT_RES_O1RES_MASK)
#define SCT_RES_O2RES_MASK                       (0x30U)
#define SCT_RES_O2RES_SHIFT                      (4U)
/*! O2RES - Effect of simultaneous set and clear on output n
 *  0b00..No change
 *  0b01..Set output (or clear based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b10..Clear output (or set based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b11..Toggle output
 */
#define SCT_RES_O2RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O2RES_SHIFT)) & SCT_RES_O2RES_MASK)
#define SCT_RES_O3RES_MASK                       (0xC0U)
#define SCT_RES_O3RES_SHIFT                      (6U)
/*! O3RES - Effect of simultaneous set and clear on output n
 *  0b00..No change
 *  0b01..Set output (or clear based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b10..Clear output (or set based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b11..Toggle output
 */
#define SCT_RES_O3RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O3RES_SHIFT)) & SCT_RES_O3RES_MASK)
#define SCT_RES_O4RES_MASK                       (0x300U)
#define SCT_RES_O4RES_SHIFT                      (8U)
/*! O4RES - Effect of simultaneous set and clear on output n
 *  0b00..No change
 *  0b01..Set output (or clear based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b10..Clear output (or set based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b11..Toggle output
 */
#define SCT_RES_O4RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O4RES_SHIFT)) & SCT_RES_O4RES_MASK)
#define SCT_RES_O5RES_MASK                       (0xC00U)
#define SCT_RES_O5RES_SHIFT                      (10U)
/*! O5RES - Effect of simultaneous set and clear on output n
 *  0b00..No change
 *  0b01..Set output (or clear based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b10..Clear output (or set based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b11..Toggle output
 */
#define SCT_RES_O5RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O5RES_SHIFT)) & SCT_RES_O5RES_MASK)
#define SCT_RES_O6RES_MASK                       (0x3000U)
#define SCT_RES_O6RES_SHIFT                      (12U)
/*! O6RES - Effect of simultaneous set and clear on output n
 *  0b00..No change
 *  0b01..Set output (or clear based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b10..Clear output (or set based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b11..Toggle output
 */
#define SCT_RES_O6RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O6RES_SHIFT)) & SCT_RES_O6RES_MASK)
#define SCT_RES_O7RES_MASK                       (0xC000U)
#define SCT_RES_O7RES_SHIFT                      (14U)
/*! O7RES - Effect of simultaneous set and clear on output n
 *  0b00..No change
 *  0b01..Set output (or clear based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b10..Clear output (or set based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b11..Toggle output
 */
#define SCT_RES_O7RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O7RES_SHIFT)) & SCT_RES_O7RES_MASK)
#define SCT_RES_O8RES_MASK                       (0x30000U)
#define SCT_RES_O8RES_SHIFT                      (16U)
/*! O8RES - Effect of simultaneous set and clear on output n
 *  0b00..No change
 *  0b01..Set output (or clear based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b10..Clear output (or set based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b11..Toggle output
 */
#define SCT_RES_O8RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O8RES_SHIFT)) & SCT_RES_O8RES_MASK)
#define SCT_RES_O9RES_MASK                       (0xC0000U)
#define SCT_RES_O9RES_SHIFT                      (18U)
/*! O9RES - Effect of simultaneous set and clear on output n
 *  0b00..No change
 *  0b01..Set output (or clear based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b10..Clear output (or set based on the OUTPUTDIRCTRL[SETCLRn] field)
 *  0b11..Toggle output
 */
#define SCT_RES_O9RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O9RES_SHIFT)) & SCT_RES_O9RES_MASK)
/*! @} */

/*! @name DMAREQ0 - DMA Request 0 */
/*! @{ */
#define SCT_DMAREQ0_DEV_0_MASK                   (0x1U)
#define SCT_DMAREQ0_DEV_0_SHIFT                  (0U)
#define SCT_DMAREQ0_DEV_1_MASK                   (0x2U)
#define SCT_DMAREQ0_DEV_1_SHIFT                  (1U)
#define SCT_DMAREQ0_DEV_2_MASK                   (0x4U)
#define SCT_DMAREQ0_DEV_2_SHIFT                  (2U)
#define SCT_DMAREQ0_DEV_3_MASK                   (0x8U)
#define SCT_DMAREQ0_DEV_3_SHIFT                  (3U)
#define SCT_DMAREQ0_DEV_4_MASK                   (0x10U)
#define SCT_DMAREQ0_DEV_4_SHIFT                  (4U)
#define SCT_DMAREQ0_DEV_5_MASK                   (0x20U)
#define SCT_DMAREQ0_DEV_5_SHIFT                  (5U)
#define SCT_DMAREQ0_DEV_6_MASK                   (0x40U)
#define SCT_DMAREQ0_DEV_6_SHIFT                  (6U)
#define SCT_DMAREQ0_DEV_7_MASK                   (0x80U)
#define SCT_DMAREQ0_DEV_7_SHIFT                  (7U)
#define SCT_DMAREQ0_DEV_8_MASK                   (0x100U)
#define SCT_DMAREQ0_DEV_8_SHIFT                  (8U)
#define SCT_DMAREQ0_DEV_9_MASK                   (0x200U)
#define SCT_DMAREQ0_DEV_9_SHIFT                  (9U)
#define SCT_DMAREQ0_DEV_10_MASK                  (0x400U)
#define SCT_DMAREQ0_DEV_10_SHIFT                 (10U)
#define SCT_DMAREQ0_DEV_11_MASK                  (0x800U)
#define SCT_DMAREQ0_DEV_11_SHIFT                 (11U)
#define SCT_DMAREQ0_DEV_12_MASK                  (0x1000U)
#define SCT_DMAREQ0_DEV_12_SHIFT                 (12U)
#define SCT_DMAREQ0_DEV_13_MASK                  (0x2000U)
#define SCT_DMAREQ0_DEV_13_SHIFT                 (13U)
#define SCT_DMAREQ0_DEV_14_MASK                  (0x4000U)
#define SCT_DMAREQ0_DEV_14_SHIFT                 (14U)
#define SCT_DMAREQ0_DEV_15_MASK                  (0x8000U)
#define SCT_DMAREQ0_DEV_15_SHIFT                 (15U)
#define SCT_DMAREQ0_DRL0_MASK                    (0x40000000U)
#define SCT_DMAREQ0_DRL0_SHIFT                   (30U)
#define SCT_DMAREQ0_DRQ0_MASK                    (0x80000000U)
#define SCT_DMAREQ0_DRQ0_SHIFT                   (31U)
/*! @} */

/*! @name DMAREQ1 - DMA Request 1 */
/*! @{ */
#define SCT_DMAREQ1_DEV_0_MASK                   (0x1U)
#define SCT_DMAREQ1_DEV_0_SHIFT                  (0U)
#define SCT_DMAREQ1_DEV_1_MASK                   (0x2U)
#define SCT_DMAREQ1_DEV_1_SHIFT                  (1U)
#define SCT_DMAREQ1_DEV_2_MASK                   (0x4U)
#define SCT_DMAREQ1_DEV_2_SHIFT                  (2U)
#define SCT_DMAREQ1_DEV_3_MASK                   (0x8U)
#define SCT_DMAREQ1_DEV_3_SHIFT                  (3U)
#define SCT_DMAREQ1_DEV_4_MASK                   (0x10U)
#define SCT_DMAREQ1_DEV_4_SHIFT                  (4U)
#define SCT_DMAREQ1_DEV_5_MASK                   (0x20U)
#define SCT_DMAREQ1_DEV_5_SHIFT                  (5U)
#define SCT_DMAREQ1_DEV_6_MASK                   (0x40U)
#define SCT_DMAREQ1_DEV_6_SHIFT                  (6U)
#define SCT_DMAREQ1_DEV_7_MASK                   (0x80U)
#define SCT_DMAREQ1_DEV_7_SHIFT                  (7U)
#define SCT_DMAREQ1_DEV_8_MASK                   (0x100U)
#define SCT_DMAREQ1_DEV_8_SHIFT                  (8U)
#define SCT_DMAREQ1_DEV_9_MASK                   (0x200U)
#define SCT_DMAREQ1_DEV_9_SHIFT                  (9U)
#define SCT_DMAREQ1_DEV_10_MASK                  (0x400U)
#define SCT_DMAREQ1_DEV_10_SHIFT                 (10U)
#define SCT_DMAREQ1_DEV_11_MASK                  (0x800U)
#define SCT_DMAREQ1_DEV_11_SHIFT                 (11U)
#define SCT_DMAREQ1_DEV_12_MASK                  (0x1000U)
#define SCT_DMAREQ1_DEV_12_SHIFT                 (12U)
#define SCT_DMAREQ1_DEV_13_MASK                  (0x2000U)
#define SCT_DMAREQ1_DEV_13_SHIFT                 (13U)
#define SCT_DMAREQ1_DEV_14_MASK                  (0x4000U)
#define SCT_DMAREQ1_DEV_14_SHIFT                 (14U)
#define SCT_DMAREQ1_DEV_15_MASK                  (0x8000U)
#define SCT_DMAREQ1_DEV_15_SHIFT                 (15U)
#define SCT_DMAREQ1_DRL1_MASK                    (0x40000000U)
#define SCT_DMAREQ1_DRL1_SHIFT                   (30U)
#define SCT_DMAREQ1_DRQ1_MASK                    (0x80000000U)
#define SCT_DMAREQ1_DRQ1_SHIFT                   (31U)
/*! @} */

/*! @name EVEN - Event Interrupt Enable */
/*! @{ */
#define SCT_EVEN_IEN0_MASK                       (0x1U)
#define SCT_EVEN_IEN0_SHIFT                      (0U)
#define SCT_EVEN_IEN1_MASK                       (0x2U)
#define SCT_EVEN_IEN1_SHIFT                      (1U)
#define SCT_EVEN_IEN2_MASK                       (0x4U)
#define SCT_EVEN_IEN2_SHIFT                      (2U)
#define SCT_EVEN_IEN3_MASK                       (0x8U)
#define SCT_EVEN_IEN3_SHIFT                      (3U)
#define SCT_EVEN_IEN4_MASK                       (0x10U)
#define SCT_EVEN_IEN4_SHIFT                      (4U)
#define SCT_EVEN_IEN5_MASK                       (0x20U)
#define SCT_EVEN_IEN5_SHIFT                      (5U)
#define SCT_EVEN_IEN6_MASK                       (0x40U)
#define SCT_EVEN_IEN6_SHIFT                      (6U)
#define SCT_EVEN_IEN7_MASK                       (0x80U)
#define SCT_EVEN_IEN7_SHIFT                      (7U)
#define SCT_EVEN_IEN8_MASK                       (0x100U)
#define SCT_EVEN_IEN8_SHIFT                      (8U)
#define SCT_EVEN_IEN9_MASK                       (0x200U)
#define SCT_EVEN_IEN9_SHIFT                      (9U)
#define SCT_EVEN_IEN10_MASK                      (0x400U)
#define SCT_EVEN_IEN10_SHIFT                     (10U)
#define SCT_EVEN_IEN11_MASK                      (0x800U)
#define SCT_EVEN_IEN11_SHIFT                     (11U)
#define SCT_EVEN_IEN12_MASK                      (0x1000U)
#define SCT_EVEN_IEN12_SHIFT                     (12U)
#define SCT_EVEN_IEN13_MASK                      (0x2000U)
#define SCT_EVEN_IEN13_SHIFT                     (13U)
#define SCT_EVEN_IEN14_MASK                      (0x4000U)
#define SCT_EVEN_IEN14_SHIFT                     (14U)
#define SCT_EVEN_IEN15_MASK                      (0x8000U)
#define SCT_EVEN_IEN15_SHIFT                     (15U)
/*! @} */

/*! @name EVFLAG - Event Flag */
/*! @{ */
#define SCT_EVFLAG_FLAG0_MASK                    (0x1U)
#define SCT_EVFLAG_FLAG0_SHIFT                   (0U)
#define SCT_EVFLAG_FLAG1_MASK                    (0x2U)
#define SCT_EVFLAG_FLAG1_SHIFT                   (1U)
#define SCT_EVFLAG_FLAG2_MASK                    (0x4U)
#define SCT_EVFLAG_FLAG2_SHIFT                   (2U)
#define SCT_EVFLAG_FLAG3_MASK                    (0x8U)
#define SCT_EVFLAG_FLAG3_SHIFT                   (3U)
#define SCT_EVFLAG_FLAG4_MASK                    (0x10U)
#define SCT_EVFLAG_FLAG4_SHIFT                   (4U)
#define SCT_EVFLAG_FLAG5_MASK                    (0x20U)
#define SCT_EVFLAG_FLAG5_SHIFT                   (5U)
#define SCT_EVFLAG_FLAG6_MASK                    (0x40U)
#define SCT_EVFLAG_FLAG6_SHIFT                   (6U)
#define SCT_EVFLAG_FLAG7_MASK                    (0x80U)
#define SCT_EVFLAG_FLAG7_SHIFT                   (7U)
#define SCT_EVFLAG_FLAG8_MASK                    (0x100U)
#define SCT_EVFLAG_FLAG8_SHIFT                   (8U)
#define SCT_EVFLAG_FLAG9_MASK                    (0x200U)
#define SCT_EVFLAG_FLAG9_SHIFT                   (9U)
#define SCT_EVFLAG_FLAG10_MASK                   (0x400U)
#define SCT_EVFLAG_FLAG10_SHIFT                  (10U)
#define SCT_EVFLAG_FLAG11_MASK                   (0x800U)
#define SCT_EVFLAG_FLAG11_SHIFT                  (11U)
#define SCT_EVFLAG_FLAG12_MASK                   (0x1000U)
#define SCT_EVFLAG_FLAG12_SHIFT                  (12U)
#define SCT_EVFLAG_FLAG13_MASK                   (0x2000U)
#define SCT_EVFLAG_FLAG13_SHIFT                  (13U)
#define SCT_EVFLAG_FLAG14_MASK                   (0x4000U)
#define SCT_EVFLAG_FLAG14_SHIFT                  (14U)
#define SCT_EVFLAG_FLAG15_MASK                   (0x8000U)
#define SCT_EVFLAG_FLAG15_SHIFT                  (15U)
/*! @} */

/*! @name CONEN - Conflict Interrupt Enable */
/*! @{ */
#define SCT_CONEN_NCEN0_MASK                     (0x1U)
#define SCT_CONEN_NCEN0_SHIFT                    (0U)
#define SCT_CONEN_NCEN1_MASK                     (0x2U)
#define SCT_CONEN_NCEN1_SHIFT                    (1U)
#define SCT_CONEN_NCEN2_MASK                     (0x4U)
#define SCT_CONEN_NCEN2_SHIFT                    (2U)
#define SCT_CONEN_NCEN3_MASK                     (0x8U)
#define SCT_CONEN_NCEN3_SHIFT                    (3U)
#define SCT_CONEN_NCEN4_MASK                     (0x10U)
#define SCT_CONEN_NCEN4_SHIFT                    (4U)
#define SCT_CONEN_NCEN5_MASK                     (0x20U)
#define SCT_CONEN_NCEN5_SHIFT                    (5U)
#define SCT_CONEN_NCEN6_MASK                     (0x40U)
#define SCT_CONEN_NCEN6_SHIFT                    (6U)
#define SCT_CONEN_NCEN7_MASK                     (0x80U)
#define SCT_CONEN_NCEN7_SHIFT                    (7U)
#define SCT_CONEN_NCEN8_MASK                     (0x100U)
#define SCT_CONEN_NCEN8_SHIFT                    (8U)
#define SCT_CONEN_NCEN9_MASK                     (0x200U)
#define SCT_CONEN_NCEN9_SHIFT                    (9U)
/*! @} */

/*! @name CONFLAG - Conflict Flag */
/*! @{ */
#define SCT_CONFLAG_NCFLAG0_MASK                 (0x1U)
#define SCT_CONFLAG_NCFLAG0_SHIFT                (0U)
#define SCT_CONFLAG_NCFLAG1_MASK                 (0x2U)
#define SCT_CONFLAG_NCFLAG1_SHIFT                (1U)
#define SCT_CONFLAG_NCFLAG2_MASK                 (0x4U)
#define SCT_CONFLAG_NCFLAG2_SHIFT                (2U)
#define SCT_CONFLAG_NCFLAG3_MASK                 (0x8U)
#define SCT_CONFLAG_NCFLAG3_SHIFT                (3U)
#define SCT_CONFLAG_NCFLAG4_MASK                 (0x10U)
#define SCT_CONFLAG_NCFLAG4_SHIFT                (4U)
#define SCT_CONFLAG_NCFLAG5_MASK                 (0x20U)
#define SCT_CONFLAG_NCFLAG5_SHIFT                (5U)
#define SCT_CONFLAG_NCFLAG6_MASK                 (0x40U)
#define SCT_CONFLAG_NCFLAG6_SHIFT                (6U)
#define SCT_CONFLAG_NCFLAG7_MASK                 (0x80U)
#define SCT_CONFLAG_NCFLAG7_SHIFT                (7U)
#define SCT_CONFLAG_NCFLAG8_MASK                 (0x100U)
#define SCT_CONFLAG_NCFLAG8_SHIFT                (8U)
#define SCT_CONFLAG_NCFLAG9_MASK                 (0x200U)
#define SCT_CONFLAG_NCFLAG9_SHIFT                (9U)
#define SCT_CONFLAG_BUSERRL_MASK                 (0x40000000U)
#define SCT_CONFLAG_BUSERRL_SHIFT                (30U)
#define SCT_CONFLAG_BUSERRH_MASK                 (0x80000000U)
#define SCT_CONFLAG_BUSERRH_SHIFT                (31U)
/*! @} */

/*! @name CAPL - SCT_CAPL register */
/*! @{ */
#define SCT_CAPL_CAPL_MASK                       (0xFFFFU)
#define SCT_CAPL_CAPL_SHIFT                      (0U)
#define SCT_CAPL_CAPL(x)                         (((uint16_t)(((uint16_t)(x)) << SCT_CAPL_CAPL_SHIFT)) & SCT_CAPL_CAPL_MASK)
/*! @} */

/* The count of SCT_CAPL */
#define SCT_CAPL_COUNT                           (16U)

/*! @name CAPH - SCT_CAPH register */
/*! @{ */
#define SCT_CAPH_CAPH_MASK                       (0xFFFFU)
#define SCT_CAPH_CAPH_SHIFT                      (0U)
#define SCT_CAPH_CAPH(x)                         (((uint16_t)(((uint16_t)(x)) << SCT_CAPH_CAPH_SHIFT)) & SCT_CAPH_CAPH_MASK)
/*! @} */

/* The count of SCT_CAPH */
#define SCT_CAPH_COUNT                           (16U)

/*! @name CAP - Capture Value */
/*! @{ */
#define SCT_CAP_CAPn_L_MASK                      (0xFFFFU)
#define SCT_CAP_CAPn_L_SHIFT                     (0U)
/*! CAPn_L - Capture n Low
 */
#define SCT_CAP_CAPn_L(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_CAP_CAPn_L_SHIFT)) & SCT_CAP_CAPn_L_MASK)
#define SCT_CAP_CAPn_H_MASK                      (0xFFFF0000U)
#define SCT_CAP_CAPn_H_SHIFT                     (16U)
/*! CAPn_H - Capture n High
 */
#define SCT_CAP_CAPn_H(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_CAP_CAPn_H_SHIFT)) & SCT_CAP_CAPn_H_MASK)
/*! @} */

/* The count of SCT_CAP */
#define SCT_CAP_COUNT                            (16U)

/*! @name MATCHL - SCT_MATCHL register */
/*! @{ */
#define SCT_MATCHL_MATCHL_MASK                   (0xFFFFU)
#define SCT_MATCHL_MATCHL_SHIFT                  (0U)
#define SCT_MATCHL_MATCHL(x)                     (((uint16_t)(((uint16_t)(x)) << SCT_MATCHL_MATCHL_SHIFT)) & SCT_MATCHL_MATCHL_MASK)
/*! @} */

/* The count of SCT_MATCHL */
#define SCT_MATCHL_COUNT                         (16U)

/*! @name MATCHH - SCT_MATCHH register */
/*! @{ */
#define SCT_MATCHH_MATCHH_MASK                   (0xFFFFU)
#define SCT_MATCHH_MATCHH_SHIFT                  (0U)
#define SCT_MATCHH_MATCHH(x)                     (((uint16_t)(((uint16_t)(x)) << SCT_MATCHH_MATCHH_SHIFT)) & SCT_MATCHH_MATCHH_MASK)
/*! @} */

/* The count of SCT_MATCHH */
#define SCT_MATCHH_COUNT                         (16U)

/*! @name MATCH - Match Value */
/*! @{ */
#define SCT_MATCH_MATCHn_L_MASK                  (0xFFFFU)
#define SCT_MATCH_MATCHn_L_SHIFT                 (0U)
/*! MATCHn_L - Match n Low
 */
#define SCT_MATCH_MATCHn_L(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_MATCH_MATCHn_L_SHIFT)) & SCT_MATCH_MATCHn_L_MASK)
#define SCT_MATCH_MATCHn_H_MASK                  (0xFFFF0000U)
#define SCT_MATCH_MATCHn_H_SHIFT                 (16U)
/*! MATCHn_H - Match n High
 */
#define SCT_MATCH_MATCHn_H(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_MATCH_MATCHn_H_SHIFT)) & SCT_MATCH_MATCHn_H_MASK)
/*! @} */

/* The count of SCT_MATCH */
#define SCT_MATCH_COUNT                          (16U)

/*! @name CAPCTRLL - SCT_CAPCTRLL register */
/*! @{ */
#define SCT_CAPCTRLL_CAPCTRLL_MASK               (0xFFFFU)
#define SCT_CAPCTRLL_CAPCTRLL_SHIFT              (0U)
#define SCT_CAPCTRLL_CAPCTRLL(x)                 (((uint16_t)(((uint16_t)(x)) << SCT_CAPCTRLL_CAPCTRLL_SHIFT)) & SCT_CAPCTRLL_CAPCTRLL_MASK)
/*! @} */

/* The count of SCT_CAPCTRLL */
#define SCT_CAPCTRLL_COUNT                       (16U)

/*! @name CAPCTRLH - SCT_CAPCTRLH register */
/*! @{ */
#define SCT_CAPCTRLH_CAPCTRLH_MASK               (0xFFFFU)
#define SCT_CAPCTRLH_CAPCTRLH_SHIFT              (0U)
#define SCT_CAPCTRLH_CAPCTRLH(x)                 (((uint16_t)(((uint16_t)(x)) << SCT_CAPCTRLH_CAPCTRLH_SHIFT)) & SCT_CAPCTRLH_CAPCTRLH_MASK)
/*! @} */

/* The count of SCT_CAPCTRLH */
#define SCT_CAPCTRLH_COUNT                       (16U)

/*! @name CAPCTRL - Capture Control */
/*! @{ */
#define SCT_CAPCTRL_CAPCONn_L_MASK               (0xFFFFU)
#define SCT_CAPCTRL_CAPCONn_L_SHIFT              (0U)
/*! CAPCONn_L - Capture Control n Low
 */
#define SCT_CAPCTRL_CAPCONn_L(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_CAPCTRL_CAPCONn_L_SHIFT)) & SCT_CAPCTRL_CAPCONn_L_MASK)
#define SCT_CAPCTRL_CAPCONn_H_MASK               (0xFFFF0000U)
#define SCT_CAPCTRL_CAPCONn_H_SHIFT              (16U)
/*! CAPCONn_H - Capture Control n High
 */
#define SCT_CAPCTRL_CAPCONn_H(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_CAPCTRL_CAPCONn_H_SHIFT)) & SCT_CAPCTRL_CAPCONn_H_MASK)
/*! @} */

/* The count of SCT_CAPCTRL */
#define SCT_CAPCTRL_COUNT                        (16U)

/*! @name MATCHRELL - SCT_MATCHRELL register */
/*! @{ */
#define SCT_MATCHRELL_MATCHRELL_MASK             (0xFFFFU)
#define SCT_MATCHRELL_MATCHRELL_SHIFT            (0U)
#define SCT_MATCHRELL_MATCHRELL(x)               (((uint16_t)(((uint16_t)(x)) << SCT_MATCHRELL_MATCHRELL_SHIFT)) & SCT_MATCHRELL_MATCHRELL_MASK)
/*! @} */

/* The count of SCT_MATCHRELL */
#define SCT_MATCHRELL_COUNT                      (16U)

/*! @name MATCHRELH - SCT_MATCHRELH register */
/*! @{ */
#define SCT_MATCHRELH_MATCHRELH_MASK             (0xFFFFU)
#define SCT_MATCHRELH_MATCHRELH_SHIFT            (0U)
#define SCT_MATCHRELH_MATCHRELH(x)               (((uint16_t)(((uint16_t)(x)) << SCT_MATCHRELH_MATCHRELH_SHIFT)) & SCT_MATCHRELH_MATCHRELH_MASK)
/*! @} */

/* The count of SCT_MATCHRELH */
#define SCT_MATCHRELH_COUNT                      (16U)

/*! @name MATCHREL - Match Reload Value */
/*! @{ */
#define SCT_MATCHREL_RELOADn_L_MASK              (0xFFFFU)
#define SCT_MATCHREL_RELOADn_L_SHIFT             (0U)
/*! RELOADn_L - Reload n Low
 */
#define SCT_MATCHREL_RELOADn_L(x)                (((uint32_t)(((uint32_t)(x)) << SCT_MATCHREL_RELOADn_L_SHIFT)) & SCT_MATCHREL_RELOADn_L_MASK)
#define SCT_MATCHREL_RELOADn_H_MASK              (0xFFFF0000U)
#define SCT_MATCHREL_RELOADn_H_SHIFT             (16U)
/*! RELOADn_H - Reload n High
 */
#define SCT_MATCHREL_RELOADn_H(x)                (((uint32_t)(((uint32_t)(x)) << SCT_MATCHREL_RELOADn_H_SHIFT)) & SCT_MATCHREL_RELOADn_H_MASK)
/*! @} */

/* The count of SCT_MATCHREL */
#define SCT_MATCHREL_COUNT                       (16U)

/*! @name EV_STATE - Event n State */
/*! @{ */
#define SCT_EV_STATE_STATEMSKn_MASK              (0xFFFFFFFFU)
#define SCT_EV_STATE_STATEMSKn_SHIFT             (0U)
/*! STATEMSKn - Event State Mask n
 */
#define SCT_EV_STATE_STATEMSKn(x)                (((uint32_t)(((uint32_t)(x)) << SCT_EV_STATE_STATEMSKn_SHIFT)) & SCT_EV_STATE_STATEMSKn_MASK)
/*! @} */

/* The count of SCT_EV_STATE */
#define SCT_EV_STATE_COUNT                       (16U)

/*! @name EV_CTRL - Event n Control */
/*! @{ */
#define SCT_EV_CTRL_MATCHSEL_MASK                (0xFU)
#define SCT_EV_CTRL_MATCHSEL_SHIFT               (0U)
/*! MATCHSEL - Match Select
 */
#define SCT_EV_CTRL_MATCHSEL(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_EV_CTRL_MATCHSEL_SHIFT)) & SCT_EV_CTRL_MATCHSEL_MASK)
#define SCT_EV_CTRL_HEVENT_MASK                  (0x10U)
#define SCT_EV_CTRL_HEVENT_SHIFT                 (4U)
#define SCT_EV_CTRL_OUTSEL_MASK                  (0x20U)
#define SCT_EV_CTRL_OUTSEL_SHIFT                 (5U)
#define SCT_EV_CTRL_IOSEL_MASK                   (0x3C0U)
#define SCT_EV_CTRL_IOSEL_SHIFT                  (6U)
/*! IOSEL - Input/Output Signal Select
 */
#define SCT_EV_CTRL_IOSEL(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_EV_CTRL_IOSEL_SHIFT)) & SCT_EV_CTRL_IOSEL_MASK)
#define SCT_EV_CTRL_IOCOND_MASK                  (0xC00U)
#define SCT_EV_CTRL_IOCOND_SHIFT                 (10U)
/*! IOCOND - Input/Output Condition
 *  0b00..Low
 *  0b01..Rise
 *  0b10..Fall
 *  0b11..High
 */
#define SCT_EV_CTRL_IOCOND(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_EV_CTRL_IOCOND_SHIFT)) & SCT_EV_CTRL_IOCOND_MASK)
#define SCT_EV_CTRL_COMBMODE_MASK                (0x3000U)
#define SCT_EV_CTRL_COMBMODE_SHIFT               (12U)
/*! COMBMODE - Combination Mode
 *  0b00..OR. The event occurs when either the specified match or I/O condition occurs.
 *  0b01..MATCH. Uses the specified match only.
 *  0b10..IO. Uses the specified I/O condition only.
 *  0b11..AND. The event occurs when the specified match and I/O condition occur simultaneously.
 */
#define SCT_EV_CTRL_COMBMODE(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_EV_CTRL_COMBMODE_SHIFT)) & SCT_EV_CTRL_COMBMODE_MASK)
#define SCT_EV_CTRL_STATELD_MASK                 (0x4000U)
#define SCT_EV_CTRL_STATELD_SHIFT                (14U)
#define SCT_EV_CTRL_STATEV_MASK                  (0xF8000U)
#define SCT_EV_CTRL_STATEV_SHIFT                 (15U)
/*! STATEV - State Value
 */
#define SCT_EV_CTRL_STATEV(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_EV_CTRL_STATEV_SHIFT)) & SCT_EV_CTRL_STATEV_MASK)
#define SCT_EV_CTRL_MATCHMEM_MASK                (0x100000U)
#define SCT_EV_CTRL_MATCHMEM_SHIFT               (20U)
#define SCT_EV_CTRL_DIRECTION_MASK               (0x600000U)
#define SCT_EV_CTRL_DIRECTION_SHIFT              (21U)
/*! DIRECTION - Direction
 *  0b00..Direction independent. This event is triggered regardless of the count direction.
 *  0b01..Counting up. This event is triggered only during up-counting when BIDIR = 1.
 *  0b10..Counting down. This event is triggered only during down-counting when BIDIR = 1.
 *  0b11..Reserved
 */
#define SCT_EV_CTRL_DIRECTION(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_EV_CTRL_DIRECTION_SHIFT)) & SCT_EV_CTRL_DIRECTION_MASK)
/*! @} */

/* The count of SCT_EV_CTRL */
#define SCT_EV_CTRL_COUNT                        (16U)

/*! @name OUT_SET - Output n Set */
/*! @{ */
#define SCT_OUT_SET_SET_MASK                     (0xFFFFU)
#define SCT_OUT_SET_SET_SHIFT                    (0U)
/*! SET - Set
 */
#define SCT_OUT_SET_SET(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_OUT_SET_SET_SHIFT)) & SCT_OUT_SET_SET_MASK)
/*! @} */

/* The count of SCT_OUT_SET */
#define SCT_OUT_SET_COUNT                        (10U)

/*! @name OUT_CLR - Output n Clear */
/*! @{ */
#define SCT_OUT_CLR_CLR_MASK                     (0xFFFFU)
#define SCT_OUT_CLR_CLR_SHIFT                    (0U)
/*! CLR - Clear
 */
#define SCT_OUT_CLR_CLR(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_OUT_CLR_CLR_SHIFT)) & SCT_OUT_CLR_CLR_MASK)
/*! @} */

/* The count of SCT_OUT_CLR */
#define SCT_OUT_CLR_COUNT                        (10U)


/*!
 * @}
 */ /* end of group SCT_Register_Masks */


/* SCT - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral SCT0 base pointer */
  #define SCT0_BASE_PTR                            ((SCT_MemMapPtr)0x50146000u)
  /** Peripheral SCT0 base pointer */
  #define SCT0_BASE_PTR_NS                         ((SCT_MemMapPtr)0x40146000u)
  /** Array initializer of SCT peripheral base pointers */
  #define SCT_BASE_PTRS                            { SCT0_BASE_PTR }
  /** Array initializer of SCT peripheral base pointers */
  #define SCT_BASE_PTRS_NS                         { SCT0_BASE_PTR_NS }
#else
  /** Peripheral SCT0 base pointer */
  #define SCT0_BASE_PTR                            ((SCT_MemMapPtr)0x40146000u)
  /** Array initializer of SCT peripheral base pointers */
  #define SCT_BASE_PTRS                            { SCT0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- SCT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SCT_Register_Accessor_Macros SCT - Register accessor macros
 * @{
 */


/* SCT - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* SCT0 */
  #define SCT0_CONFIG                              SCT_CONFIG_REG(SCT0_BASE_PTR)
  #define SCT0_CONFIG_NS                           SCT_CONFIG_REG(SCT0_BASE_PTR_NS)
  #define SCT0_CTRL                                SCT_CTRL_REG(SCT0_BASE_PTR)
  #define SCT0_CTRL_NS                             SCT_CTRL_REG(SCT0_BASE_PTR_NS)
  #define SCT0_LIMIT                               SCT_LIMIT_REG(SCT0_BASE_PTR)
  #define SCT0_LIMIT_NS                            SCT_LIMIT_REG(SCT0_BASE_PTR_NS)
  #define SCT0_HALT                                SCT_HALT_REG(SCT0_BASE_PTR)
  #define SCT0_HALT_NS                             SCT_HALT_REG(SCT0_BASE_PTR_NS)
  #define SCT0_STOP                                SCT_STOP_REG(SCT0_BASE_PTR)
  #define SCT0_STOP_NS                             SCT_STOP_REG(SCT0_BASE_PTR_NS)
  #define SCT0_START                               SCT_START_REG(SCT0_BASE_PTR)
  #define SCT0_START_NS                            SCT_START_REG(SCT0_BASE_PTR_NS)
  #define SCT0_COUNT                               SCT_COUNT_REG(SCT0_BASE_PTR)
  #define SCT0_COUNT_NS                            SCT_COUNT_REG(SCT0_BASE_PTR_NS)
  #define SCT0_STATE                               SCT_STATE_REG(SCT0_BASE_PTR)
  #define SCT0_STATE_NS                            SCT_STATE_REG(SCT0_BASE_PTR_NS)
  #define SCT0_INPUT                               SCT_INPUT_REG(SCT0_BASE_PTR)
  #define SCT0_INPUT_NS                            SCT_INPUT_REG(SCT0_BASE_PTR_NS)
  #define SCT0_REGMODE                             SCT_REGMODE_REG(SCT0_BASE_PTR)
  #define SCT0_REGMODE_NS                          SCT_REGMODE_REG(SCT0_BASE_PTR_NS)
  #define SCT0_OUTPUT                              SCT_OUTPUT_REG(SCT0_BASE_PTR)
  #define SCT0_OUTPUT_NS                           SCT_OUTPUT_REG(SCT0_BASE_PTR_NS)
  #define SCT0_OUTPUTDIRCTRL                       SCT_OUTPUTDIRCTRL_REG(SCT0_BASE_PTR)
  #define SCT0_OUTPUTDIRCTRL_NS                    SCT_OUTPUTDIRCTRL_REG(SCT0_BASE_PTR_NS)
  #define SCT0_RES                                 SCT_RES_REG(SCT0_BASE_PTR)
  #define SCT0_RES_NS                              SCT_RES_REG(SCT0_BASE_PTR_NS)
  #define SCT0_DMAREQ0                             SCT_DMAREQ0_REG(SCT0_BASE_PTR)
  #define SCT0_DMAREQ0_NS                          SCT_DMAREQ0_REG(SCT0_BASE_PTR_NS)
  #define SCT0_DMAREQ1                             SCT_DMAREQ1_REG(SCT0_BASE_PTR)
  #define SCT0_DMAREQ1_NS                          SCT_DMAREQ1_REG(SCT0_BASE_PTR_NS)
  #define SCT0_EVEN                                SCT_EVEN_REG(SCT0_BASE_PTR)
  #define SCT0_EVEN_NS                             SCT_EVEN_REG(SCT0_BASE_PTR_NS)
  #define SCT0_EVFLAG                              SCT_EVFLAG_REG(SCT0_BASE_PTR)
  #define SCT0_EVFLAG_NS                           SCT_EVFLAG_REG(SCT0_BASE_PTR_NS)
  #define SCT0_CONEN                               SCT_CONEN_REG(SCT0_BASE_PTR)
  #define SCT0_CONEN_NS                            SCT_CONEN_REG(SCT0_BASE_PTR_NS)
  #define SCT0_CONFLAG                             SCT_CONFLAG_REG(SCT0_BASE_PTR)
  #define SCT0_CONFLAG_NS                          SCT_CONFLAG_REG(SCT0_BASE_PTR_NS)
  #define SCT0_CAP0                                SCT_CAP_REG(SCT0_BASE_PTR,0)
  #define SCT0_CAP0_NS                             SCT_CAP_REG(SCT0_BASE_PTR_NS,0)
  #define SCT0_MATCH0                              SCT_MATCH_REG(SCT0_BASE_PTR,0)
  #define SCT0_MATCH0_NS                           SCT_MATCH_REG(SCT0_BASE_PTR_NS,0)
  #define SCT0_CAP1                                SCT_CAP_REG(SCT0_BASE_PTR,1)
  #define SCT0_CAP1_NS                             SCT_CAP_REG(SCT0_BASE_PTR_NS,1)
  #define SCT0_MATCH1                              SCT_MATCH_REG(SCT0_BASE_PTR,1)
  #define SCT0_MATCH1_NS                           SCT_MATCH_REG(SCT0_BASE_PTR_NS,1)
  #define SCT0_CAP2                                SCT_CAP_REG(SCT0_BASE_PTR,2)
  #define SCT0_CAP2_NS                             SCT_CAP_REG(SCT0_BASE_PTR_NS,2)
  #define SCT0_MATCH2                              SCT_MATCH_REG(SCT0_BASE_PTR,2)
  #define SCT0_MATCH2_NS                           SCT_MATCH_REG(SCT0_BASE_PTR_NS,2)
  #define SCT0_CAP3                                SCT_CAP_REG(SCT0_BASE_PTR,3)
  #define SCT0_CAP3_NS                             SCT_CAP_REG(SCT0_BASE_PTR_NS,3)
  #define SCT0_MATCH3                              SCT_MATCH_REG(SCT0_BASE_PTR,3)
  #define SCT0_MATCH3_NS                           SCT_MATCH_REG(SCT0_BASE_PTR_NS,3)
  #define SCT0_CAP4                                SCT_CAP_REG(SCT0_BASE_PTR,4)
  #define SCT0_CAP4_NS                             SCT_CAP_REG(SCT0_BASE_PTR_NS,4)
  #define SCT0_MATCH4                              SCT_MATCH_REG(SCT0_BASE_PTR,4)
  #define SCT0_MATCH4_NS                           SCT_MATCH_REG(SCT0_BASE_PTR_NS,4)
  #define SCT0_CAP5                                SCT_CAP_REG(SCT0_BASE_PTR,5)
  #define SCT0_CAP5_NS                             SCT_CAP_REG(SCT0_BASE_PTR_NS,5)
  #define SCT0_MATCH5                              SCT_MATCH_REG(SCT0_BASE_PTR,5)
  #define SCT0_MATCH5_NS                           SCT_MATCH_REG(SCT0_BASE_PTR_NS,5)
  #define SCT0_CAP6                                SCT_CAP_REG(SCT0_BASE_PTR,6)
  #define SCT0_CAP6_NS                             SCT_CAP_REG(SCT0_BASE_PTR_NS,6)
  #define SCT0_MATCH6                              SCT_MATCH_REG(SCT0_BASE_PTR,6)
  #define SCT0_MATCH6_NS                           SCT_MATCH_REG(SCT0_BASE_PTR_NS,6)
  #define SCT0_CAP7                                SCT_CAP_REG(SCT0_BASE_PTR,7)
  #define SCT0_CAP7_NS                             SCT_CAP_REG(SCT0_BASE_PTR_NS,7)
  #define SCT0_MATCH7                              SCT_MATCH_REG(SCT0_BASE_PTR,7)
  #define SCT0_MATCH7_NS                           SCT_MATCH_REG(SCT0_BASE_PTR_NS,7)
  #define SCT0_CAP8                                SCT_CAP_REG(SCT0_BASE_PTR,8)
  #define SCT0_CAP8_NS                             SCT_CAP_REG(SCT0_BASE_PTR_NS,8)
  #define SCT0_MATCH8                              SCT_MATCH_REG(SCT0_BASE_PTR,8)
  #define SCT0_MATCH8_NS                           SCT_MATCH_REG(SCT0_BASE_PTR_NS,8)
  #define SCT0_CAP9                                SCT_CAP_REG(SCT0_BASE_PTR,9)
  #define SCT0_CAP9_NS                             SCT_CAP_REG(SCT0_BASE_PTR_NS,9)
  #define SCT0_MATCH9                              SCT_MATCH_REG(SCT0_BASE_PTR,9)
  #define SCT0_MATCH9_NS                           SCT_MATCH_REG(SCT0_BASE_PTR_NS,9)
  #define SCT0_CAP10                               SCT_CAP_REG(SCT0_BASE_PTR,10)
  #define SCT0_CAP10_NS                            SCT_CAP_REG(SCT0_BASE_PTR_NS,10)
  #define SCT0_MATCH10                             SCT_MATCH_REG(SCT0_BASE_PTR,10)
  #define SCT0_MATCH10_NS                          SCT_MATCH_REG(SCT0_BASE_PTR_NS,10)
  #define SCT0_CAP11                               SCT_CAP_REG(SCT0_BASE_PTR,11)
  #define SCT0_CAP11_NS                            SCT_CAP_REG(SCT0_BASE_PTR_NS,11)
  #define SCT0_MATCH11                             SCT_MATCH_REG(SCT0_BASE_PTR,11)
  #define SCT0_MATCH11_NS                          SCT_MATCH_REG(SCT0_BASE_PTR_NS,11)
  #define SCT0_CAP12                               SCT_CAP_REG(SCT0_BASE_PTR,12)
  #define SCT0_CAP12_NS                            SCT_CAP_REG(SCT0_BASE_PTR_NS,12)
  #define SCT0_MATCH12                             SCT_MATCH_REG(SCT0_BASE_PTR,12)
  #define SCT0_MATCH12_NS                          SCT_MATCH_REG(SCT0_BASE_PTR_NS,12)
  #define SCT0_CAP13                               SCT_CAP_REG(SCT0_BASE_PTR,13)
  #define SCT0_CAP13_NS                            SCT_CAP_REG(SCT0_BASE_PTR_NS,13)
  #define SCT0_MATCH13                             SCT_MATCH_REG(SCT0_BASE_PTR,13)
  #define SCT0_MATCH13_NS                          SCT_MATCH_REG(SCT0_BASE_PTR_NS,13)
  #define SCT0_CAP14                               SCT_CAP_REG(SCT0_BASE_PTR,14)
  #define SCT0_CAP14_NS                            SCT_CAP_REG(SCT0_BASE_PTR_NS,14)
  #define SCT0_MATCH14                             SCT_MATCH_REG(SCT0_BASE_PTR,14)
  #define SCT0_MATCH14_NS                          SCT_MATCH_REG(SCT0_BASE_PTR_NS,14)
  #define SCT0_CAP15                               SCT_CAP_REG(SCT0_BASE_PTR,15)
  #define SCT0_CAP15_NS                            SCT_CAP_REG(SCT0_BASE_PTR_NS,15)
  #define SCT0_MATCH15                             SCT_MATCH_REG(SCT0_BASE_PTR,15)
  #define SCT0_MATCH15_NS                          SCT_MATCH_REG(SCT0_BASE_PTR_NS,15)
  #define SCT0_CAPCTRL0                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,0)
  #define SCT0_CAPCTRL0_NS                         SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,0)
  #define SCT0_MATCHREL0                           SCT_MATCHREL_REG(SCT0_BASE_PTR,0)
  #define SCT0_MATCHREL0_NS                        SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,0)
  #define SCT0_CAPCTRL1                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,1)
  #define SCT0_CAPCTRL1_NS                         SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,1)
  #define SCT0_MATCHREL1                           SCT_MATCHREL_REG(SCT0_BASE_PTR,1)
  #define SCT0_MATCHREL1_NS                        SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,1)
  #define SCT0_CAPCTRL2                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,2)
  #define SCT0_CAPCTRL2_NS                         SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,2)
  #define SCT0_MATCHREL2                           SCT_MATCHREL_REG(SCT0_BASE_PTR,2)
  #define SCT0_MATCHREL2_NS                        SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,2)
  #define SCT0_CAPCTRL3                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,3)
  #define SCT0_CAPCTRL3_NS                         SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,3)
  #define SCT0_MATCHREL3                           SCT_MATCHREL_REG(SCT0_BASE_PTR,3)
  #define SCT0_MATCHREL3_NS                        SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,3)
  #define SCT0_CAPCTRL4                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,4)
  #define SCT0_CAPCTRL4_NS                         SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,4)
  #define SCT0_MATCHREL4                           SCT_MATCHREL_REG(SCT0_BASE_PTR,4)
  #define SCT0_MATCHREL4_NS                        SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,4)
  #define SCT0_CAPCTRL5                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,5)
  #define SCT0_CAPCTRL5_NS                         SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,5)
  #define SCT0_MATCHREL5                           SCT_MATCHREL_REG(SCT0_BASE_PTR,5)
  #define SCT0_MATCHREL5_NS                        SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,5)
  #define SCT0_CAPCTRL6                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,6)
  #define SCT0_CAPCTRL6_NS                         SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,6)
  #define SCT0_MATCHREL6                           SCT_MATCHREL_REG(SCT0_BASE_PTR,6)
  #define SCT0_MATCHREL6_NS                        SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,6)
  #define SCT0_CAPCTRL7                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,7)
  #define SCT0_CAPCTRL7_NS                         SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,7)
  #define SCT0_MATCHREL7                           SCT_MATCHREL_REG(SCT0_BASE_PTR,7)
  #define SCT0_MATCHREL7_NS                        SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,7)
  #define SCT0_CAPCTRL8                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,8)
  #define SCT0_CAPCTRL8_NS                         SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,8)
  #define SCT0_MATCHREL8                           SCT_MATCHREL_REG(SCT0_BASE_PTR,8)
  #define SCT0_MATCHREL8_NS                        SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,8)
  #define SCT0_CAPCTRL9                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,9)
  #define SCT0_CAPCTRL9_NS                         SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,9)
  #define SCT0_MATCHREL9                           SCT_MATCHREL_REG(SCT0_BASE_PTR,9)
  #define SCT0_MATCHREL9_NS                        SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,9)
  #define SCT0_CAPCTRL10                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,10)
  #define SCT0_CAPCTRL10_NS                        SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,10)
  #define SCT0_MATCHREL10                          SCT_MATCHREL_REG(SCT0_BASE_PTR,10)
  #define SCT0_MATCHREL10_NS                       SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,10)
  #define SCT0_CAPCTRL11                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,11)
  #define SCT0_CAPCTRL11_NS                        SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,11)
  #define SCT0_MATCHREL11                          SCT_MATCHREL_REG(SCT0_BASE_PTR,11)
  #define SCT0_MATCHREL11_NS                       SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,11)
  #define SCT0_CAPCTRL12                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,12)
  #define SCT0_CAPCTRL12_NS                        SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,12)
  #define SCT0_MATCHREL12                          SCT_MATCHREL_REG(SCT0_BASE_PTR,12)
  #define SCT0_MATCHREL12_NS                       SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,12)
  #define SCT0_CAPCTRL13                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,13)
  #define SCT0_CAPCTRL13_NS                        SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,13)
  #define SCT0_MATCHREL13                          SCT_MATCHREL_REG(SCT0_BASE_PTR,13)
  #define SCT0_MATCHREL13_NS                       SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,13)
  #define SCT0_CAPCTRL14                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,14)
  #define SCT0_CAPCTRL14_NS                        SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,14)
  #define SCT0_MATCHREL14                          SCT_MATCHREL_REG(SCT0_BASE_PTR,14)
  #define SCT0_MATCHREL14_NS                       SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,14)
  #define SCT0_CAPCTRL15                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,15)
  #define SCT0_CAPCTRL15_NS                        SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,15)
  #define SCT0_MATCHREL15                          SCT_MATCHREL_REG(SCT0_BASE_PTR,15)
  #define SCT0_MATCHREL15_NS                       SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,15)
  #define SCT0_EV0_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,0)
  #define SCT0_EV0_STATE_NS                        SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,0)
  #define SCT0_EV0_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,0)
  #define SCT0_EV0_CTRL_NS                         SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,0)
  #define SCT0_EV1_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,1)
  #define SCT0_EV1_STATE_NS                        SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,1)
  #define SCT0_EV1_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,1)
  #define SCT0_EV1_CTRL_NS                         SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,1)
  #define SCT0_EV2_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,2)
  #define SCT0_EV2_STATE_NS                        SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,2)
  #define SCT0_EV2_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,2)
  #define SCT0_EV2_CTRL_NS                         SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,2)
  #define SCT0_EV3_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,3)
  #define SCT0_EV3_STATE_NS                        SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,3)
  #define SCT0_EV3_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,3)
  #define SCT0_EV3_CTRL_NS                         SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,3)
  #define SCT0_EV4_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,4)
  #define SCT0_EV4_STATE_NS                        SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,4)
  #define SCT0_EV4_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,4)
  #define SCT0_EV4_CTRL_NS                         SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,4)
  #define SCT0_EV5_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,5)
  #define SCT0_EV5_STATE_NS                        SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,5)
  #define SCT0_EV5_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,5)
  #define SCT0_EV5_CTRL_NS                         SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,5)
  #define SCT0_EV6_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,6)
  #define SCT0_EV6_STATE_NS                        SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,6)
  #define SCT0_EV6_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,6)
  #define SCT0_EV6_CTRL_NS                         SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,6)
  #define SCT0_EV7_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,7)
  #define SCT0_EV7_STATE_NS                        SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,7)
  #define SCT0_EV7_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,7)
  #define SCT0_EV7_CTRL_NS                         SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,7)
  #define SCT0_EV8_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,8)
  #define SCT0_EV8_STATE_NS                        SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,8)
  #define SCT0_EV8_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,8)
  #define SCT0_EV8_CTRL_NS                         SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,8)
  #define SCT0_EV9_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,9)
  #define SCT0_EV9_STATE_NS                        SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,9)
  #define SCT0_EV9_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,9)
  #define SCT0_EV9_CTRL_NS                         SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,9)
  #define SCT0_EV10_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,10)
  #define SCT0_EV10_STATE_NS                       SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,10)
  #define SCT0_EV10_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,10)
  #define SCT0_EV10_CTRL_NS                        SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,10)
  #define SCT0_EV11_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,11)
  #define SCT0_EV11_STATE_NS                       SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,11)
  #define SCT0_EV11_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,11)
  #define SCT0_EV11_CTRL_NS                        SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,11)
  #define SCT0_EV12_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,12)
  #define SCT0_EV12_STATE_NS                       SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,12)
  #define SCT0_EV12_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,12)
  #define SCT0_EV12_CTRL_NS                        SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,12)
  #define SCT0_EV13_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,13)
  #define SCT0_EV13_STATE_NS                       SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,13)
  #define SCT0_EV13_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,13)
  #define SCT0_EV13_CTRL_NS                        SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,13)
  #define SCT0_EV14_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,14)
  #define SCT0_EV14_STATE_NS                       SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,14)
  #define SCT0_EV14_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,14)
  #define SCT0_EV14_CTRL_NS                        SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,14)
  #define SCT0_EV15_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,15)
  #define SCT0_EV15_STATE_NS                       SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,15)
  #define SCT0_EV15_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,15)
  #define SCT0_EV15_CTRL_NS                        SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,15)
  #define SCT0_OUT0_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,0)
  #define SCT0_OUT0_SET_NS                         SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,0)
  #define SCT0_OUT0_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,0)
  #define SCT0_OUT0_CLR_NS                         SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,0)
  #define SCT0_OUT1_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,1)
  #define SCT0_OUT1_SET_NS                         SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,1)
  #define SCT0_OUT1_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,1)
  #define SCT0_OUT1_CLR_NS                         SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,1)
  #define SCT0_OUT2_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,2)
  #define SCT0_OUT2_SET_NS                         SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,2)
  #define SCT0_OUT2_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,2)
  #define SCT0_OUT2_CLR_NS                         SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,2)
  #define SCT0_OUT3_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,3)
  #define SCT0_OUT3_SET_NS                         SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,3)
  #define SCT0_OUT3_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,3)
  #define SCT0_OUT3_CLR_NS                         SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,3)
  #define SCT0_OUT4_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,4)
  #define SCT0_OUT4_SET_NS                         SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,4)
  #define SCT0_OUT4_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,4)
  #define SCT0_OUT4_CLR_NS                         SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,4)
  #define SCT0_OUT5_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,5)
  #define SCT0_OUT5_SET_NS                         SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,5)
  #define SCT0_OUT5_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,5)
  #define SCT0_OUT5_CLR_NS                         SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,5)
  #define SCT0_OUT6_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,6)
  #define SCT0_OUT6_SET_NS                         SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,6)
  #define SCT0_OUT6_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,6)
  #define SCT0_OUT6_CLR_NS                         SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,6)
  #define SCT0_OUT7_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,7)
  #define SCT0_OUT7_SET_NS                         SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,7)
  #define SCT0_OUT7_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,7)
  #define SCT0_OUT7_CLR_NS                         SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,7)
  #define SCT0_OUT8_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,8)
  #define SCT0_OUT8_SET_NS                         SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,8)
  #define SCT0_OUT8_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,8)
  #define SCT0_OUT8_CLR_NS                         SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,8)
  #define SCT0_OUT9_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,9)
  #define SCT0_OUT9_SET_NS                         SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,9)
  #define SCT0_OUT9_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,9)
  #define SCT0_OUT9_CLR_NS                         SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,9)
#else
  /* SCT0 */
  #define SCT0_CONFIG                              SCT_CONFIG_REG(SCT0_BASE_PTR)
  #define SCT0_CTRL                                SCT_CTRL_REG(SCT0_BASE_PTR)
  #define SCT0_LIMIT                               SCT_LIMIT_REG(SCT0_BASE_PTR)
  #define SCT0_HALT                                SCT_HALT_REG(SCT0_BASE_PTR)
  #define SCT0_STOP                                SCT_STOP_REG(SCT0_BASE_PTR)
  #define SCT0_START                               SCT_START_REG(SCT0_BASE_PTR)
  #define SCT0_COUNT                               SCT_COUNT_REG(SCT0_BASE_PTR)
  #define SCT0_STATE                               SCT_STATE_REG(SCT0_BASE_PTR)
  #define SCT0_INPUT                               SCT_INPUT_REG(SCT0_BASE_PTR)
  #define SCT0_REGMODE                             SCT_REGMODE_REG(SCT0_BASE_PTR)
  #define SCT0_OUTPUT                              SCT_OUTPUT_REG(SCT0_BASE_PTR)
  #define SCT0_OUTPUTDIRCTRL                       SCT_OUTPUTDIRCTRL_REG(SCT0_BASE_PTR)
  #define SCT0_RES                                 SCT_RES_REG(SCT0_BASE_PTR)
  #define SCT0_DMAREQ0                             SCT_DMAREQ0_REG(SCT0_BASE_PTR)
  #define SCT0_DMAREQ1                             SCT_DMAREQ1_REG(SCT0_BASE_PTR)
  #define SCT0_EVEN                                SCT_EVEN_REG(SCT0_BASE_PTR)
  #define SCT0_EVFLAG                              SCT_EVFLAG_REG(SCT0_BASE_PTR)
  #define SCT0_CONEN                               SCT_CONEN_REG(SCT0_BASE_PTR)
  #define SCT0_CONFLAG                             SCT_CONFLAG_REG(SCT0_BASE_PTR)
  #define SCT0_CAP0                                SCT_CAP_REG(SCT0_BASE_PTR,0)
  #define SCT0_MATCH0                              SCT_MATCH_REG(SCT0_BASE_PTR,0)
  #define SCT0_CAP1                                SCT_CAP_REG(SCT0_BASE_PTR,1)
  #define SCT0_MATCH1                              SCT_MATCH_REG(SCT0_BASE_PTR,1)
  #define SCT0_CAP2                                SCT_CAP_REG(SCT0_BASE_PTR,2)
  #define SCT0_MATCH2                              SCT_MATCH_REG(SCT0_BASE_PTR,2)
  #define SCT0_CAP3                                SCT_CAP_REG(SCT0_BASE_PTR,3)
  #define SCT0_MATCH3                              SCT_MATCH_REG(SCT0_BASE_PTR,3)
  #define SCT0_CAP4                                SCT_CAP_REG(SCT0_BASE_PTR,4)
  #define SCT0_MATCH4                              SCT_MATCH_REG(SCT0_BASE_PTR,4)
  #define SCT0_CAP5                                SCT_CAP_REG(SCT0_BASE_PTR,5)
  #define SCT0_MATCH5                              SCT_MATCH_REG(SCT0_BASE_PTR,5)
  #define SCT0_CAP6                                SCT_CAP_REG(SCT0_BASE_PTR,6)
  #define SCT0_MATCH6                              SCT_MATCH_REG(SCT0_BASE_PTR,6)
  #define SCT0_CAP7                                SCT_CAP_REG(SCT0_BASE_PTR,7)
  #define SCT0_MATCH7                              SCT_MATCH_REG(SCT0_BASE_PTR,7)
  #define SCT0_CAP8                                SCT_CAP_REG(SCT0_BASE_PTR,8)
  #define SCT0_MATCH8                              SCT_MATCH_REG(SCT0_BASE_PTR,8)
  #define SCT0_CAP9                                SCT_CAP_REG(SCT0_BASE_PTR,9)
  #define SCT0_MATCH9                              SCT_MATCH_REG(SCT0_BASE_PTR,9)
  #define SCT0_CAP10                               SCT_CAP_REG(SCT0_BASE_PTR,10)
  #define SCT0_MATCH10                             SCT_MATCH_REG(SCT0_BASE_PTR,10)
  #define SCT0_CAP11                               SCT_CAP_REG(SCT0_BASE_PTR,11)
  #define SCT0_MATCH11                             SCT_MATCH_REG(SCT0_BASE_PTR,11)
  #define SCT0_CAP12                               SCT_CAP_REG(SCT0_BASE_PTR,12)
  #define SCT0_MATCH12                             SCT_MATCH_REG(SCT0_BASE_PTR,12)
  #define SCT0_CAP13                               SCT_CAP_REG(SCT0_BASE_PTR,13)
  #define SCT0_MATCH13                             SCT_MATCH_REG(SCT0_BASE_PTR,13)
  #define SCT0_CAP14                               SCT_CAP_REG(SCT0_BASE_PTR,14)
  #define SCT0_MATCH14                             SCT_MATCH_REG(SCT0_BASE_PTR,14)
  #define SCT0_CAP15                               SCT_CAP_REG(SCT0_BASE_PTR,15)
  #define SCT0_MATCH15                             SCT_MATCH_REG(SCT0_BASE_PTR,15)
  #define SCT0_CAPCTRL0                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,0)
  #define SCT0_MATCHREL0                           SCT_MATCHREL_REG(SCT0_BASE_PTR,0)
  #define SCT0_CAPCTRL1                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,1)
  #define SCT0_MATCHREL1                           SCT_MATCHREL_REG(SCT0_BASE_PTR,1)
  #define SCT0_CAPCTRL2                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,2)
  #define SCT0_MATCHREL2                           SCT_MATCHREL_REG(SCT0_BASE_PTR,2)
  #define SCT0_CAPCTRL3                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,3)
  #define SCT0_MATCHREL3                           SCT_MATCHREL_REG(SCT0_BASE_PTR,3)
  #define SCT0_CAPCTRL4                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,4)
  #define SCT0_MATCHREL4                           SCT_MATCHREL_REG(SCT0_BASE_PTR,4)
  #define SCT0_CAPCTRL5                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,5)
  #define SCT0_MATCHREL5                           SCT_MATCHREL_REG(SCT0_BASE_PTR,5)
  #define SCT0_CAPCTRL6                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,6)
  #define SCT0_MATCHREL6                           SCT_MATCHREL_REG(SCT0_BASE_PTR,6)
  #define SCT0_CAPCTRL7                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,7)
  #define SCT0_MATCHREL7                           SCT_MATCHREL_REG(SCT0_BASE_PTR,7)
  #define SCT0_CAPCTRL8                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,8)
  #define SCT0_MATCHREL8                           SCT_MATCHREL_REG(SCT0_BASE_PTR,8)
  #define SCT0_CAPCTRL9                            SCT_CAPCTRL_REG(SCT0_BASE_PTR,9)
  #define SCT0_MATCHREL9                           SCT_MATCHREL_REG(SCT0_BASE_PTR,9)
  #define SCT0_CAPCTRL10                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,10)
  #define SCT0_MATCHREL10                          SCT_MATCHREL_REG(SCT0_BASE_PTR,10)
  #define SCT0_CAPCTRL11                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,11)
  #define SCT0_MATCHREL11                          SCT_MATCHREL_REG(SCT0_BASE_PTR,11)
  #define SCT0_CAPCTRL12                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,12)
  #define SCT0_MATCHREL12                          SCT_MATCHREL_REG(SCT0_BASE_PTR,12)
  #define SCT0_CAPCTRL13                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,13)
  #define SCT0_MATCHREL13                          SCT_MATCHREL_REG(SCT0_BASE_PTR,13)
  #define SCT0_CAPCTRL14                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,14)
  #define SCT0_MATCHREL14                          SCT_MATCHREL_REG(SCT0_BASE_PTR,14)
  #define SCT0_CAPCTRL15                           SCT_CAPCTRL_REG(SCT0_BASE_PTR,15)
  #define SCT0_MATCHREL15                          SCT_MATCHREL_REG(SCT0_BASE_PTR,15)
  #define SCT0_EV0_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,0)
  #define SCT0_EV0_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,0)
  #define SCT0_EV1_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,1)
  #define SCT0_EV1_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,1)
  #define SCT0_EV2_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,2)
  #define SCT0_EV2_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,2)
  #define SCT0_EV3_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,3)
  #define SCT0_EV3_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,3)
  #define SCT0_EV4_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,4)
  #define SCT0_EV4_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,4)
  #define SCT0_EV5_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,5)
  #define SCT0_EV5_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,5)
  #define SCT0_EV6_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,6)
  #define SCT0_EV6_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,6)
  #define SCT0_EV7_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,7)
  #define SCT0_EV7_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,7)
  #define SCT0_EV8_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,8)
  #define SCT0_EV8_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,8)
  #define SCT0_EV9_STATE                           SCT_EV_STATE_REG(SCT0_BASE_PTR,9)
  #define SCT0_EV9_CTRL                            SCT_EV_CTRL_REG(SCT0_BASE_PTR,9)
  #define SCT0_EV10_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,10)
  #define SCT0_EV10_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,10)
  #define SCT0_EV11_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,11)
  #define SCT0_EV11_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,11)
  #define SCT0_EV12_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,12)
  #define SCT0_EV12_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,12)
  #define SCT0_EV13_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,13)
  #define SCT0_EV13_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,13)
  #define SCT0_EV14_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,14)
  #define SCT0_EV14_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,14)
  #define SCT0_EV15_STATE                          SCT_EV_STATE_REG(SCT0_BASE_PTR,15)
  #define SCT0_EV15_CTRL                           SCT_EV_CTRL_REG(SCT0_BASE_PTR,15)
  #define SCT0_OUT0_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,0)
  #define SCT0_OUT0_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,0)
  #define SCT0_OUT1_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,1)
  #define SCT0_OUT1_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,1)
  #define SCT0_OUT2_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,2)
  #define SCT0_OUT2_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,2)
  #define SCT0_OUT3_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,3)
  #define SCT0_OUT3_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,3)
  #define SCT0_OUT4_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,4)
  #define SCT0_OUT4_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,4)
  #define SCT0_OUT5_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,5)
  #define SCT0_OUT5_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,5)
  #define SCT0_OUT6_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,6)
  #define SCT0_OUT6_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,6)
  #define SCT0_OUT7_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,7)
  #define SCT0_OUT7_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,7)
  #define SCT0_OUT8_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,8)
  #define SCT0_OUT8_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,8)
  #define SCT0_OUT9_SET                            SCT_OUT_SET_REG(SCT0_BASE_PTR,9)
  #define SCT0_OUT9_CLR                            SCT_OUT_CLR_REG(SCT0_BASE_PTR,9)
#endif

/* SCT - Register array accessors */
#define SCT0_CAP_ACCESS16BIT_CAPL(index)         SCT_CAP_ACCESS16BIT_CAPL_REG(SCT0_BASE_PTR,index)
#define SCT0_CAP_ACCESS16BIT_CAPL_NS(index)      SCT_CAP_ACCESS16BIT_CAPL_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_CAP_ACCESS16BIT_CAPL(index)         SCT_CAP_ACCESS16BIT_CAPL_REG(SCT0_BASE_PTR,index)
#define SCT0_CAP_ACCESS16BIT_CAPH(index)         SCT_CAP_ACCESS16BIT_CAPH_REG(SCT0_BASE_PTR,index)
#define SCT0_CAP_ACCESS16BIT_CAPH_NS(index)      SCT_CAP_ACCESS16BIT_CAPH_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_CAP_ACCESS16BIT_CAPH(index)         SCT_CAP_ACCESS16BIT_CAPH_REG(SCT0_BASE_PTR,index)
#define SCT0_CAP(index)                          SCT_CAP_REG(SCT0_BASE_PTR,index)
#define SCT0_CAP_NS(index)                       SCT_CAP_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_CAP(index)                          SCT_CAP_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCH_ACCESS16BIT_MATCHL(index)     SCT_MATCH_ACCESS16BIT_MATCHL_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCH_ACCESS16BIT_MATCHL_NS(index)  SCT_MATCH_ACCESS16BIT_MATCHL_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_MATCH_ACCESS16BIT_MATCHL(index)     SCT_MATCH_ACCESS16BIT_MATCHL_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCH_ACCESS16BIT_MATCHH(index)     SCT_MATCH_ACCESS16BIT_MATCHH_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCH_ACCESS16BIT_MATCHH_NS(index)  SCT_MATCH_ACCESS16BIT_MATCHH_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_MATCH_ACCESS16BIT_MATCHH(index)     SCT_MATCH_ACCESS16BIT_MATCHH_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCH(index)                        SCT_MATCH_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCH_NS(index)                     SCT_MATCH_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_MATCH(index)                        SCT_MATCH_REG(SCT0_BASE_PTR,index)
#define SCT0_CAPCTRL_ACCESS16BIT_CAPCTRLL(index) SCT_CAPCTRL_ACCESS16BIT_CAPCTRLL_REG(SCT0_BASE_PTR,index)
#define SCT0_CAPCTRL_ACCESS16BIT_CAPCTRLL_NS(index) SCT_CAPCTRL_ACCESS16BIT_CAPCTRLL_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_CAPCTRL_ACCESS16BIT_CAPCTRLL(index) SCT_CAPCTRL_ACCESS16BIT_CAPCTRLL_REG(SCT0_BASE_PTR,index)
#define SCT0_CAPCTRL_ACCESS16BIT_CAPCTRLH(index) SCT_CAPCTRL_ACCESS16BIT_CAPCTRLH_REG(SCT0_BASE_PTR,index)
#define SCT0_CAPCTRL_ACCESS16BIT_CAPCTRLH_NS(index) SCT_CAPCTRL_ACCESS16BIT_CAPCTRLH_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_CAPCTRL_ACCESS16BIT_CAPCTRLH(index) SCT_CAPCTRL_ACCESS16BIT_CAPCTRLH_REG(SCT0_BASE_PTR,index)
#define SCT0_CAPCTRL(index)                      SCT_CAPCTRL_REG(SCT0_BASE_PTR,index)
#define SCT0_CAPCTRL_NS(index)                   SCT_CAPCTRL_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_CAPCTRL(index)                      SCT_CAPCTRL_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCHREL_ACCESS16BIT_MATCHRELL(index) SCT_MATCHREL_ACCESS16BIT_MATCHRELL_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCHREL_ACCESS16BIT_MATCHRELL_NS(index) SCT_MATCHREL_ACCESS16BIT_MATCHRELL_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_MATCHREL_ACCESS16BIT_MATCHRELL(index) SCT_MATCHREL_ACCESS16BIT_MATCHRELL_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCHREL_ACCESS16BIT_MATCHRELH(index) SCT_MATCHREL_ACCESS16BIT_MATCHRELH_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCHREL_ACCESS16BIT_MATCHRELH_NS(index) SCT_MATCHREL_ACCESS16BIT_MATCHRELH_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_MATCHREL_ACCESS16BIT_MATCHRELH(index) SCT_MATCHREL_ACCESS16BIT_MATCHRELH_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCHREL(index)                     SCT_MATCHREL_REG(SCT0_BASE_PTR,index)
#define SCT0_MATCHREL_NS(index)                  SCT_MATCHREL_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_MATCHREL(index)                     SCT_MATCHREL_REG(SCT0_BASE_PTR,index)
#define SCT0_EV_STATE(index)                     SCT_EV_STATE_REG(SCT0_BASE_PTR,index)
#define SCT0_EV_STATE_NS(index)                  SCT_EV_STATE_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_EV_STATE(index)                     SCT_EV_STATE_REG(SCT0_BASE_PTR,index)
#define SCT0_EV_CTRL(index)                      SCT_EV_CTRL_REG(SCT0_BASE_PTR,index)
#define SCT0_EV_CTRL_NS(index)                   SCT_EV_CTRL_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_EV_CTRL(index)                      SCT_EV_CTRL_REG(SCT0_BASE_PTR,index)
#define SCT0_OUT_SET(index)                      SCT_OUT_SET_REG(SCT0_BASE_PTR,index)
#define SCT0_OUT_SET_NS(index)                   SCT_OUT_SET_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_OUT_SET(index)                      SCT_OUT_SET_REG(SCT0_BASE_PTR,index)
#define SCT0_OUT_CLR(index)                      SCT_OUT_CLR_REG(SCT0_BASE_PTR,index)
#define SCT0_OUT_CLR_NS(index)                   SCT_OUT_CLR_REG(SCT0_BASE_PTR_NS,index)
#define SCT0_OUT_CLR(index)                      SCT_OUT_CLR_REG(SCT0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SCT_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SCT_Peripheral */


/* ----------------------------------------------------------------------------
   -- SEMA42
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA42_Peripheral SEMA42
 * @{
 */

/** SEMA42 - Peripheral register structure */
typedef struct SEMA42_MemMap {
  uint8_t GATE3;                                   /**< Gate Register, offset: 0x0 */
  uint8_t GATE2;                                   /**< Gate Register, offset: 0x1 */
  uint8_t GATE1;                                   /**< Gate Register, offset: 0x2 */
  uint8_t GATE0;                                   /**< Gate Register, offset: 0x3 */
  uint8_t GATE7;                                   /**< Gate Register, offset: 0x4 */
  uint8_t GATE6;                                   /**< Gate Register, offset: 0x5 */
  uint8_t GATE5;                                   /**< Gate Register, offset: 0x6 */
  uint8_t GATE4;                                   /**< Gate Register, offset: 0x7 */
  uint8_t GATE11;                                  /**< Gate Register, offset: 0x8 */
  uint8_t GATE10;                                  /**< Gate Register, offset: 0x9 */
  uint8_t GATE9;                                   /**< Gate Register, offset: 0xA */
  uint8_t GATE8;                                   /**< Gate Register, offset: 0xB */
  uint8_t GATE15;                                  /**< Gate Register, offset: 0xC */
  uint8_t GATE14;                                  /**< Gate Register, offset: 0xD */
  uint8_t GATE13;                                  /**< Gate Register, offset: 0xE */
  uint8_t GATE12;                                  /**< Gate Register, offset: 0xF */
  uint8_t RESERVED_0[50];
  union {                                          /* offset: 0x42 */
    uint16_t RSTGT_R;                                /**< Reset Gate Read, offset: 0x42 */
    uint16_t RSTGT_W;                                /**< Reset Gate Write, offset: 0x42 */
  };
} volatile *SEMA42_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SEMA42 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA42_Register_Accessor_Macros SEMA42 - Register accessor macros
 * @{
 */


/* SEMA42 - Register accessors */
#define SEMA42_GATE3_REG(base)                   ((base)->GATE3)
#define SEMA42_GATE2_REG(base)                   ((base)->GATE2)
#define SEMA42_GATE1_REG(base)                   ((base)->GATE1)
#define SEMA42_GATE0_REG(base)                   ((base)->GATE0)
#define SEMA42_GATE7_REG(base)                   ((base)->GATE7)
#define SEMA42_GATE6_REG(base)                   ((base)->GATE6)
#define SEMA42_GATE5_REG(base)                   ((base)->GATE5)
#define SEMA42_GATE4_REG(base)                   ((base)->GATE4)
#define SEMA42_GATE11_REG(base)                  ((base)->GATE11)
#define SEMA42_GATE10_REG(base)                  ((base)->GATE10)
#define SEMA42_GATE9_REG(base)                   ((base)->GATE9)
#define SEMA42_GATE8_REG(base)                   ((base)->GATE8)
#define SEMA42_GATE15_REG(base)                  ((base)->GATE15)
#define SEMA42_GATE14_REG(base)                  ((base)->GATE14)
#define SEMA42_GATE13_REG(base)                  ((base)->GATE13)
#define SEMA42_GATE12_REG(base)                  ((base)->GATE12)
#define SEMA42_RSTGT_R_REG(base)                 ((base)->RSTGT_R)
#define SEMA42_RSTGT_W_REG(base)                 ((base)->RSTGT_W)

/*!
 * @}
 */ /* end of group SEMA42_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SEMA42 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA42_Register_Masks SEMA42 Register Masks
 * @{
 */

/*! @name GATE3 - Gate Register */
/*! @{ */
#define SEMA42_GATE3_GTFSM_MASK                  (0xFU)
#define SEMA42_GATE3_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE3_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE3_GTFSM_SHIFT)) & SEMA42_GATE3_GTFSM_MASK)
/*! @} */

/*! @name GATE2 - Gate Register */
/*! @{ */
#define SEMA42_GATE2_GTFSM_MASK                  (0xFU)
#define SEMA42_GATE2_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE2_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE2_GTFSM_SHIFT)) & SEMA42_GATE2_GTFSM_MASK)
/*! @} */

/*! @name GATE1 - Gate Register */
/*! @{ */
#define SEMA42_GATE1_GTFSM_MASK                  (0xFU)
#define SEMA42_GATE1_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE1_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE1_GTFSM_SHIFT)) & SEMA42_GATE1_GTFSM_MASK)
/*! @} */

/*! @name GATE0 - Gate Register */
/*! @{ */
#define SEMA42_GATE0_GTFSM_MASK                  (0xFU)
#define SEMA42_GATE0_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE0_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE0_GTFSM_SHIFT)) & SEMA42_GATE0_GTFSM_MASK)
/*! @} */

/*! @name GATE7 - Gate Register */
/*! @{ */
#define SEMA42_GATE7_GTFSM_MASK                  (0xFU)
#define SEMA42_GATE7_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE7_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE7_GTFSM_SHIFT)) & SEMA42_GATE7_GTFSM_MASK)
/*! @} */

/*! @name GATE6 - Gate Register */
/*! @{ */
#define SEMA42_GATE6_GTFSM_MASK                  (0xFU)
#define SEMA42_GATE6_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE6_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE6_GTFSM_SHIFT)) & SEMA42_GATE6_GTFSM_MASK)
/*! @} */

/*! @name GATE5 - Gate Register */
/*! @{ */
#define SEMA42_GATE5_GTFSM_MASK                  (0xFU)
#define SEMA42_GATE5_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE5_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE5_GTFSM_SHIFT)) & SEMA42_GATE5_GTFSM_MASK)
/*! @} */

/*! @name GATE4 - Gate Register */
/*! @{ */
#define SEMA42_GATE4_GTFSM_MASK                  (0xFU)
#define SEMA42_GATE4_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE4_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE4_GTFSM_SHIFT)) & SEMA42_GATE4_GTFSM_MASK)
/*! @} */

/*! @name GATE11 - Gate Register */
/*! @{ */
#define SEMA42_GATE11_GTFSM_MASK                 (0xFU)
#define SEMA42_GATE11_GTFSM_SHIFT                (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE11_GTFSM(x)                   (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE11_GTFSM_SHIFT)) & SEMA42_GATE11_GTFSM_MASK)
/*! @} */

/*! @name GATE10 - Gate Register */
/*! @{ */
#define SEMA42_GATE10_GTFSM_MASK                 (0xFU)
#define SEMA42_GATE10_GTFSM_SHIFT                (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE10_GTFSM(x)                   (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE10_GTFSM_SHIFT)) & SEMA42_GATE10_GTFSM_MASK)
/*! @} */

/*! @name GATE9 - Gate Register */
/*! @{ */
#define SEMA42_GATE9_GTFSM_MASK                  (0xFU)
#define SEMA42_GATE9_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE9_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE9_GTFSM_SHIFT)) & SEMA42_GATE9_GTFSM_MASK)
/*! @} */

/*! @name GATE8 - Gate Register */
/*! @{ */
#define SEMA42_GATE8_GTFSM_MASK                  (0xFU)
#define SEMA42_GATE8_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE8_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE8_GTFSM_SHIFT)) & SEMA42_GATE8_GTFSM_MASK)
/*! @} */

/*! @name GATE15 - Gate Register */
/*! @{ */
#define SEMA42_GATE15_GTFSM_MASK                 (0xFU)
#define SEMA42_GATE15_GTFSM_SHIFT                (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE15_GTFSM(x)                   (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE15_GTFSM_SHIFT)) & SEMA42_GATE15_GTFSM_MASK)
/*! @} */

/*! @name GATE14 - Gate Register */
/*! @{ */
#define SEMA42_GATE14_GTFSM_MASK                 (0xFU)
#define SEMA42_GATE14_GTFSM_SHIFT                (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE14_GTFSM(x)                   (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE14_GTFSM_SHIFT)) & SEMA42_GATE14_GTFSM_MASK)
/*! @} */

/*! @name GATE13 - Gate Register */
/*! @{ */
#define SEMA42_GATE13_GTFSM_MASK                 (0xFU)
#define SEMA42_GATE13_GTFSM_SHIFT                (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE13_GTFSM(x)                   (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE13_GTFSM_SHIFT)) & SEMA42_GATE13_GTFSM_MASK)
/*! @} */

/*! @name GATE12 - Gate Register */
/*! @{ */
#define SEMA42_GATE12_GTFSM_MASK                 (0xFU)
#define SEMA42_GATE12_GTFSM_SHIFT                (0U)
/*! GTFSM - Gate finite state machine
 *  0b0000..The gate is unlocked (free).
 *  0b0001..Domain 0 locked the gate.
 *  0b0010..Domain 1 locked the gate.
 *  0b0011..Domain 2 locked the gate.
 *  0b0100..Domain 3 locked the gate.
 *  0b0101..Domain 4 locked the gate.
 *  0b0110..Domain 5 locked the gate.
 *  0b0111..Domain 6 locked the gate.
 *  0b1000..Domain 7 locked the gate.
 *  0b1001..Domain 8 locked the gate.
 *  0b1010..Domain 9 locked the gate.
 *  0b1011..Domain 10 locked the gate.
 *  0b1100..Domain 11 locked the gate.
 *  0b1101..Domain 12 locked the gate.
 *  0b1110..Domain 13 locked the gate.
 *  0b1111..Domain 14 locked the gate.
 */
#define SEMA42_GATE12_GTFSM(x)                   (((uint8_t)(((uint8_t)(x)) << SEMA42_GATE12_GTFSM_SHIFT)) & SEMA42_GATE12_GTFSM_MASK)
/*! @} */

/*! @name RSTGT_R - Reset Gate Read */
/*! @{ */
#define SEMA42_RSTGT_R_RSTGTN_MASK               (0xFFU)
#define SEMA42_RSTGT_R_RSTGTN_SHIFT              (0U)
/*! RSTGTN - Reset gate number
 */
#define SEMA42_RSTGT_R_RSTGTN(x)                 (((uint16_t)(((uint16_t)(x)) << SEMA42_RSTGT_R_RSTGTN_SHIFT)) & SEMA42_RSTGT_R_RSTGTN_MASK)
#define SEMA42_RSTGT_R_RSTGMS_MASK               (0xF00U)
#define SEMA42_RSTGT_R_RSTGMS_SHIFT              (8U)
/*! RSTGMS - Reset gate domain
 */
#define SEMA42_RSTGT_R_RSTGMS(x)                 (((uint16_t)(((uint16_t)(x)) << SEMA42_RSTGT_R_RSTGMS_SHIFT)) & SEMA42_RSTGT_R_RSTGMS_MASK)
#define SEMA42_RSTGT_R_RSTGSM_MASK               (0x3000U)
#define SEMA42_RSTGT_R_RSTGSM_SHIFT              (12U)
/*! RSTGSM - Reset gate finite state machine
 *  0b00..Idle, waiting for the first data pattern write.
 *  0b01..Waiting for the second data pattern write
 *  0b10..The 2-write sequence has completed. Generate the specified gate reset(s). After the reset is performed,
 *        this machine returns to the idle (waiting for first data pattern write) state.
 *  0b11..This state encoding is never used and therefore reserved.
 */
#define SEMA42_RSTGT_R_RSTGSM(x)                 (((uint16_t)(((uint16_t)(x)) << SEMA42_RSTGT_R_RSTGSM_SHIFT)) & SEMA42_RSTGT_R_RSTGSM_MASK)
#define SEMA42_RSTGT_R_ROZ_MASK                  (0xC000U)
#define SEMA42_RSTGT_R_ROZ_SHIFT                 (14U)
/*! ROZ - ROZ
 */
#define SEMA42_RSTGT_R_ROZ(x)                    (((uint16_t)(((uint16_t)(x)) << SEMA42_RSTGT_R_ROZ_SHIFT)) & SEMA42_RSTGT_R_ROZ_MASK)
/*! @} */

/*! @name RSTGT_W - Reset Gate Write */
/*! @{ */
#define SEMA42_RSTGT_W_RSTGTN_MASK               (0xFFU)
#define SEMA42_RSTGT_W_RSTGTN_SHIFT              (0U)
/*! RSTGTN - Reset gate number
 */
#define SEMA42_RSTGT_W_RSTGTN(x)                 (((uint16_t)(((uint16_t)(x)) << SEMA42_RSTGT_W_RSTGTN_SHIFT)) & SEMA42_RSTGT_W_RSTGTN_MASK)
#define SEMA42_RSTGT_W_RSTGDP_MASK               (0xFF00U)
#define SEMA42_RSTGT_W_RSTGDP_SHIFT              (8U)
/*! RSTGDP - Reset gate data pattern
 */
#define SEMA42_RSTGT_W_RSTGDP(x)                 (((uint16_t)(((uint16_t)(x)) << SEMA42_RSTGT_W_RSTGDP_SHIFT)) & SEMA42_RSTGT_W_RSTGDP_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group SEMA42_Register_Masks */


/* SEMA42 - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral SEMA42 base pointer */
  #define SEMA42_BASE_PTR                          ((SEMA42_MemMapPtr)0x50112000u)
  /** Peripheral SEMA42 base pointer */
  #define SEMA42_BASE_PTR_NS                       ((SEMA42_MemMapPtr)0x40112000u)
  /** Array initializer of SEMA42 peripheral base pointers */
  #define SEMA42_BASE_PTRS                         { SEMA42_BASE_PTR }
  /** Array initializer of SEMA42 peripheral base pointers */
  #define SEMA42_BASE_PTRS_NS                      { SEMA42_BASE_PTR_NS }
#else
  /** Peripheral SEMA42 base pointer */
  #define SEMA42_BASE_PTR                          ((SEMA42_MemMapPtr)0x40112000u)
  /** Array initializer of SEMA42 peripheral base pointers */
  #define SEMA42_BASE_PTRS                         { SEMA42_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- SEMA42 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA42_Register_Accessor_Macros SEMA42 - Register accessor macros
 * @{
 */


/* SEMA42 - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* SEMA42 */
  #define SEMA42_GATE3                             SEMA42_GATE3_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE3_NS                          SEMA42_GATE3_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE2                             SEMA42_GATE2_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE2_NS                          SEMA42_GATE2_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE1                             SEMA42_GATE1_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE1_NS                          SEMA42_GATE1_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE0                             SEMA42_GATE0_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE0_NS                          SEMA42_GATE0_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE7                             SEMA42_GATE7_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE7_NS                          SEMA42_GATE7_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE6                             SEMA42_GATE6_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE6_NS                          SEMA42_GATE6_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE5                             SEMA42_GATE5_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE5_NS                          SEMA42_GATE5_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE4                             SEMA42_GATE4_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE4_NS                          SEMA42_GATE4_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE11                            SEMA42_GATE11_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE11_NS                         SEMA42_GATE11_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE10                            SEMA42_GATE10_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE10_NS                         SEMA42_GATE10_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE9                             SEMA42_GATE9_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE9_NS                          SEMA42_GATE9_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE8                             SEMA42_GATE8_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE8_NS                          SEMA42_GATE8_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE15                            SEMA42_GATE15_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE15_NS                         SEMA42_GATE15_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE14                            SEMA42_GATE14_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE14_NS                         SEMA42_GATE14_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE13                            SEMA42_GATE13_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE13_NS                         SEMA42_GATE13_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_GATE12                            SEMA42_GATE12_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE12_NS                         SEMA42_GATE12_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_RSTGT_R                           SEMA42_RSTGT_R_REG(SEMA42_BASE_PTR)
  #define SEMA42_RSTGT_R_NS                        SEMA42_RSTGT_R_REG(SEMA42_BASE_PTR_NS)
  #define SEMA42_RSTGT_W                           SEMA42_RSTGT_W_REG(SEMA42_BASE_PTR)
  #define SEMA42_RSTGT_W_NS                        SEMA42_RSTGT_W_REG(SEMA42_BASE_PTR_NS)
#else
  /* SEMA42 */
  #define SEMA42_GATE3                             SEMA42_GATE3_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE2                             SEMA42_GATE2_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE1                             SEMA42_GATE1_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE0                             SEMA42_GATE0_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE7                             SEMA42_GATE7_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE6                             SEMA42_GATE6_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE5                             SEMA42_GATE5_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE4                             SEMA42_GATE4_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE11                            SEMA42_GATE11_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE10                            SEMA42_GATE10_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE9                             SEMA42_GATE9_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE8                             SEMA42_GATE8_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE15                            SEMA42_GATE15_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE14                            SEMA42_GATE14_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE13                            SEMA42_GATE13_REG(SEMA42_BASE_PTR)
  #define SEMA42_GATE12                            SEMA42_GATE12_REG(SEMA42_BASE_PTR)
  #define SEMA42_RSTGT_R                           SEMA42_RSTGT_R_REG(SEMA42_BASE_PTR)
  #define SEMA42_RSTGT_W                           SEMA42_RSTGT_W_REG(SEMA42_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group SEMA42_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SEMA42_Peripheral */


/* ----------------------------------------------------------------------------
   -- SPI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPI_Peripheral SPI
 * @{
 */

/** SPI - Peripheral register structure */
typedef struct SPI_MemMap {
  uint8_t RESERVED_0[1024];
  uint32_t CFG;                                    /**< Configuration Register, offset: 0x400 */
  uint32_t DLY;                                    /**< Delay Register, offset: 0x404 */
  uint32_t STAT;                                   /**< Status Register, offset: 0x408 */
  uint32_t INTENSET;                               /**< Interrupt Enable Register, offset: 0x40C */
  uint32_t INTENCLR;                               /**< Interrupt Enable Clear Register, offset: 0x410 */
  uint8_t RESERVED_1[16];
  uint32_t DIV;                                    /**< Clock Divider Register, offset: 0x424 */
  uint32_t INTSTAT;                                /**< Interrupt Status Register, offset: 0x428 */
  uint8_t RESERVED_2[2516];
  uint32_t FIFOCFG;                                /**< FIFO Configuration Register, offset: 0xE00 */
  uint32_t FIFOSTAT;                               /**< FIFO Status Register, offset: 0xE04 */
  uint32_t FIFOTRIG;                               /**< FIFO Trigger Register, offset: 0xE08 */
  uint8_t RESERVED_3[4];
  uint32_t FIFOINTENSET;                           /**< FIFO Interrupt Enable Register, offset: 0xE10 */
  uint32_t FIFOINTENCLR;                           /**< FIFO Interrupt Enable Clear Register, offset: 0xE14 */
  uint32_t FIFOINTSTAT;                            /**< FIFO Interrupt Status Register, offset: 0xE18 */
  uint8_t RESERVED_4[4];
  uint32_t FIFOWR;                                 /**< FIFO Write Data Register, offset: 0xE20 */
  uint8_t RESERVED_5[12];
  uint32_t FIFORD;                                 /**< FIFO Read Data Register, offset: 0xE30 */
  uint8_t RESERVED_6[12];
  uint32_t FIFORDNOPOP;                            /**< FIFO Data Read with no FIFO Pop Register, offset: 0xE40 */
  uint8_t RESERVED_7[4];
  uint32_t FIFOSIZE;                               /**< FIFO Size Register, offset: 0xE48 */
  uint8_t RESERVED_8[432];
  uint32_t ID;                                     /**< Peripheral Identification Register, offset: 0xFFC */
} volatile *SPI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPI_Register_Accessor_Macros SPI - Register accessor macros
 * @{
 */


/* SPI - Register accessors */
#define SPI_CFG_REG(base)                        ((base)->CFG)
#define SPI_DLY_REG(base)                        ((base)->DLY)
#define SPI_STAT_REG(base)                       ((base)->STAT)
#define SPI_INTENSET_REG(base)                   ((base)->INTENSET)
#define SPI_INTENCLR_REG(base)                   ((base)->INTENCLR)
#define SPI_DIV_REG(base)                        ((base)->DIV)
#define SPI_INTSTAT_REG(base)                    ((base)->INTSTAT)
#define SPI_FIFOCFG_REG(base)                    ((base)->FIFOCFG)
#define SPI_FIFOSTAT_REG(base)                   ((base)->FIFOSTAT)
#define SPI_FIFOTRIG_REG(base)                   ((base)->FIFOTRIG)
#define SPI_FIFOINTENSET_REG(base)               ((base)->FIFOINTENSET)
#define SPI_FIFOINTENCLR_REG(base)               ((base)->FIFOINTENCLR)
#define SPI_FIFOINTSTAT_REG(base)                ((base)->FIFOINTSTAT)
#define SPI_FIFOWR_REG(base)                     ((base)->FIFOWR)
#define SPI_FIFORD_REG(base)                     ((base)->FIFORD)
#define SPI_FIFORDNOPOP_REG(base)                ((base)->FIFORDNOPOP)
#define SPI_FIFOSIZE_REG(base)                   ((base)->FIFOSIZE)
#define SPI_ID_REG(base)                         ((base)->ID)

/*!
 * @}
 */ /* end of group SPI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPI_Register_Masks SPI Register Masks
 * @{
 */

/*! @name CFG - Configuration Register */
/*! @{ */
#define SPI_CFG_ENABLE_MASK                      (0x1U)
#define SPI_CFG_ENABLE_SHIFT                     (0U)
#define SPI_CFG_MASTER_MASK                      (0x4U)
#define SPI_CFG_MASTER_SHIFT                     (2U)
#define SPI_CFG_LSBF_MASK                        (0x8U)
#define SPI_CFG_LSBF_SHIFT                       (3U)
#define SPI_CFG_CPHA_MASK                        (0x10U)
#define SPI_CFG_CPHA_SHIFT                       (4U)
#define SPI_CFG_CPOL_MASK                        (0x20U)
#define SPI_CFG_CPOL_SHIFT                       (5U)
#define SPI_CFG_LOOP_MASK                        (0x80U)
#define SPI_CFG_LOOP_SHIFT                       (7U)
#define SPI_CFG_SPOL0_MASK                       (0x100U)
#define SPI_CFG_SPOL0_SHIFT                      (8U)
#define SPI_CFG_SPOL1_MASK                       (0x200U)
#define SPI_CFG_SPOL1_SHIFT                      (9U)
#define SPI_CFG_SPOL2_MASK                       (0x400U)
#define SPI_CFG_SPOL2_SHIFT                      (10U)
#define SPI_CFG_SPOL3_MASK                       (0x800U)
#define SPI_CFG_SPOL3_SHIFT                      (11U)
/*! @} */

/*! @name DLY - Delay Register */
/*! @{ */
#define SPI_DLY_PRE_DELAY_MASK                   (0xFU)
#define SPI_DLY_PRE_DELAY_SHIFT                  (0U)
/*! PRE_DELAY - Pre-Delay
 *  0b0000..No additional time is inserted
 *  0b0001..1 SPI clock time is inserted
 *  0b0010..2 SPI clock times are inserted
 *  0b1111..15 SPI clock times are inserted
 */
#define SPI_DLY_PRE_DELAY(x)                     (((uint32_t)(((uint32_t)(x)) << SPI_DLY_PRE_DELAY_SHIFT)) & SPI_DLY_PRE_DELAY_MASK)
#define SPI_DLY_POST_DELAY_MASK                  (0xF0U)
#define SPI_DLY_POST_DELAY_SHIFT                 (4U)
/*! POST_DELAY - Post-Delay
 *  0b0000..No additional time is inserted
 *  0b0001..1 SPI clock time is inserted
 *  0b0010..2 SPI clock times are inserted
 *  0b1111..15 SPI clock times are inserted
 */
#define SPI_DLY_POST_DELAY(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_DLY_POST_DELAY_SHIFT)) & SPI_DLY_POST_DELAY_MASK)
#define SPI_DLY_FRAME_DELAY_MASK                 (0xF00U)
#define SPI_DLY_FRAME_DELAY_SHIFT                (8U)
/*! FRAME_DELAY - Frame Delay
 *  0b0000..No additional time is inserted
 *  0b0001..1 SPI clock time is inserted
 *  0b0010..2 SPI clock times are inserted
 *  0b1111..15 SPI clock times are inserted
 */
#define SPI_DLY_FRAME_DELAY(x)                   (((uint32_t)(((uint32_t)(x)) << SPI_DLY_FRAME_DELAY_SHIFT)) & SPI_DLY_FRAME_DELAY_MASK)
#define SPI_DLY_TRANSFER_DELAY_MASK              (0xF000U)
#define SPI_DLY_TRANSFER_DELAY_SHIFT             (12U)
/*! TRANSFER_DELAY - Transfer Delay
 *  0b0000..The minimum time that SSEL is deasserted is 1 SPI clock time (zero-added time)
 *  0b0001..The minimum time that SSEL is deasserted is 2 SPI clock times
 *  0b0010..The minimum time that SSEL is deasserted is 3 SPI clock times
 *  0b1111..The minimum time that SSEL is deasserted is 16 SPI clock times
 */
#define SPI_DLY_TRANSFER_DELAY(x)                (((uint32_t)(((uint32_t)(x)) << SPI_DLY_TRANSFER_DELAY_SHIFT)) & SPI_DLY_TRANSFER_DELAY_MASK)
/*! @} */

/*! @name STAT - Status Register */
/*! @{ */
#define SPI_STAT_SSA_MASK                        (0x10U)
#define SPI_STAT_SSA_SHIFT                       (4U)
#define SPI_STAT_SSD_MASK                        (0x20U)
#define SPI_STAT_SSD_SHIFT                       (5U)
#define SPI_STAT_STALLED_MASK                    (0x40U)
#define SPI_STAT_STALLED_SHIFT                   (6U)
#define SPI_STAT_ENDTRANSFER_MASK                (0x80U)
#define SPI_STAT_ENDTRANSFER_SHIFT               (7U)
#define SPI_STAT_MSTIDLE_MASK                    (0x100U)
#define SPI_STAT_MSTIDLE_SHIFT                   (8U)
/*! @} */

/*! @name INTENSET - Interrupt Enable Register */
/*! @{ */
#define SPI_INTENSET_SSAEN_MASK                  (0x10U)
#define SPI_INTENSET_SSAEN_SHIFT                 (4U)
#define SPI_INTENSET_SSDEN_MASK                  (0x20U)
#define SPI_INTENSET_SSDEN_SHIFT                 (5U)
#define SPI_INTENSET_MSTIDLEEN_MASK              (0x100U)
#define SPI_INTENSET_MSTIDLEEN_SHIFT             (8U)
/*! @} */

/*! @name INTENCLR - Interrupt Enable Clear Register */
/*! @{ */
#define SPI_INTENCLR_SSAEN_MASK                  (0x10U)
#define SPI_INTENCLR_SSAEN_SHIFT                 (4U)
#define SPI_INTENCLR_SSDEN_MASK                  (0x20U)
#define SPI_INTENCLR_SSDEN_SHIFT                 (5U)
#define SPI_INTENCLR_MSTIDLE_MASK                (0x100U)
#define SPI_INTENCLR_MSTIDLE_SHIFT               (8U)
/*! @} */

/*! @name DIV - Clock Divider Register */
/*! @{ */
#define SPI_DIV_DIVVAL_MASK                      (0xFFFFU)
#define SPI_DIV_DIVVAL_SHIFT                     (0U)
/*! DIVVAL - Rate Divider Value
 */
#define SPI_DIV_DIVVAL(x)                        (((uint32_t)(((uint32_t)(x)) << SPI_DIV_DIVVAL_SHIFT)) & SPI_DIV_DIVVAL_MASK)
/*! @} */

/*! @name INTSTAT - Interrupt Status Register */
/*! @{ */
#define SPI_INTSTAT_SSA_MASK                     (0x10U)
#define SPI_INTSTAT_SSA_SHIFT                    (4U)
#define SPI_INTSTAT_SSD_MASK                     (0x20U)
#define SPI_INTSTAT_SSD_SHIFT                    (5U)
#define SPI_INTSTAT_MSTIDLE_MASK                 (0x100U)
#define SPI_INTSTAT_MSTIDLE_SHIFT                (8U)
/*! @} */

/*! @name FIFOCFG - FIFO Configuration Register */
/*! @{ */
#define SPI_FIFOCFG_ENABLETX_MASK                (0x1U)
#define SPI_FIFOCFG_ENABLETX_SHIFT               (0U)
#define SPI_FIFOCFG_ENABLERX_MASK                (0x2U)
#define SPI_FIFOCFG_ENABLERX_SHIFT               (1U)
#define SPI_FIFOCFG_SIZE_MASK                    (0x30U)
#define SPI_FIFOCFG_SIZE_SHIFT                   (4U)
/*! SIZE - FIFO Size Configuration
 *  0b00..FIFO is configured as 16 entries of 8 bits.
 *  0b01..FIFO is configured as 8 entries of 16 bits.
 *  0b10..Not used
 *  0b11..Not used
 */
#define SPI_FIFOCFG_SIZE(x)                      (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_SIZE_SHIFT)) & SPI_FIFOCFG_SIZE_MASK)
#define SPI_FIFOCFG_DMATX_MASK                   (0x1000U)
#define SPI_FIFOCFG_DMATX_SHIFT                  (12U)
#define SPI_FIFOCFG_DMARX_MASK                   (0x2000U)
#define SPI_FIFOCFG_DMARX_SHIFT                  (13U)
#define SPI_FIFOCFG_WAKETX_MASK                  (0x4000U)
#define SPI_FIFOCFG_WAKETX_SHIFT                 (14U)
#define SPI_FIFOCFG_WAKERX_MASK                  (0x8000U)
#define SPI_FIFOCFG_WAKERX_SHIFT                 (15U)
#define SPI_FIFOCFG_EMPTYTX_MASK                 (0x10000U)
#define SPI_FIFOCFG_EMPTYTX_SHIFT                (16U)
#define SPI_FIFOCFG_EMPTYRX_MASK                 (0x20000U)
#define SPI_FIFOCFG_EMPTYRX_SHIFT                (17U)
#define SPI_FIFOCFG_POPDBG_MASK                  (0x40000U)
#define SPI_FIFOCFG_POPDBG_SHIFT                 (18U)
/*! @} */

/*! @name FIFOSTAT - FIFO Status Register */
/*! @{ */
#define SPI_FIFOSTAT_TXERR_MASK                  (0x1U)
#define SPI_FIFOSTAT_TXERR_SHIFT                 (0U)
#define SPI_FIFOSTAT_RXERR_MASK                  (0x2U)
#define SPI_FIFOSTAT_RXERR_SHIFT                 (1U)
#define SPI_FIFOSTAT_PERINT_MASK                 (0x8U)
#define SPI_FIFOSTAT_PERINT_SHIFT                (3U)
#define SPI_FIFOSTAT_TXEMPTY_MASK                (0x10U)
#define SPI_FIFOSTAT_TXEMPTY_SHIFT               (4U)
#define SPI_FIFOSTAT_TXNOTFULL_MASK              (0x20U)
#define SPI_FIFOSTAT_TXNOTFULL_SHIFT             (5U)
#define SPI_FIFOSTAT_RXNOTEMPTY_MASK             (0x40U)
#define SPI_FIFOSTAT_RXNOTEMPTY_SHIFT            (6U)
#define SPI_FIFOSTAT_RXFULL_MASK                 (0x80U)
#define SPI_FIFOSTAT_RXFULL_SHIFT                (7U)
#define SPI_FIFOSTAT_TXLVL_MASK                  (0x1F00U)
#define SPI_FIFOSTAT_TXLVL_SHIFT                 (8U)
/*! TXLVL - Transmit FIFO Current Level
 */
#define SPI_FIFOSTAT_TXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_TXLVL_SHIFT)) & SPI_FIFOSTAT_TXLVL_MASK)
#define SPI_FIFOSTAT_RXLVL_MASK                  (0x1F0000U)
#define SPI_FIFOSTAT_RXLVL_SHIFT                 (16U)
/*! RXLVL - Receive FIFO Current Level
 */
#define SPI_FIFOSTAT_RXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_RXLVL_SHIFT)) & SPI_FIFOSTAT_RXLVL_MASK)
/*! @} */

/*! @name FIFOTRIG - FIFO Trigger Register */
/*! @{ */
#define SPI_FIFOTRIG_TXLVLENA_MASK               (0x1U)
#define SPI_FIFOTRIG_TXLVLENA_SHIFT              (0U)
#define SPI_FIFOTRIG_RXLVLENA_MASK               (0x2U)
#define SPI_FIFOTRIG_RXLVLENA_SHIFT              (1U)
#define SPI_FIFOTRIG_TXLVL_MASK                  (0xF00U)
#define SPI_FIFOTRIG_TXLVL_SHIFT                 (8U)
/*! TXLVL - Transmit FIFO Level Trigger Point
 *  0b0000..Trigger when the TX FIFO becomes empty
 *  0b0001..Trigger when the TX FIFO level decreases to 1 entry
 *  0b1111..Trigger when the TX FIFO level decreases to 15 entries (is no longer full)
 */
#define SPI_FIFOTRIG_TXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOTRIG_TXLVL_SHIFT)) & SPI_FIFOTRIG_TXLVL_MASK)
#define SPI_FIFOTRIG_RXLVL_MASK                  (0xF0000U)
#define SPI_FIFOTRIG_RXLVL_SHIFT                 (16U)
/*! RXLVL - Receive FIFO Level Trigger Point
 *  0b0000..Trigger when the RX FIFO has received 1 entry (is no longer empty)
 *  0b0001..Trigger when the RX FIFO has received 2 entries
 *  0b1111..Trigger when the RX FIFO has received 16 entries (has become full)
 */
#define SPI_FIFOTRIG_RXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOTRIG_RXLVL_SHIFT)) & SPI_FIFOTRIG_RXLVL_MASK)
/*! @} */

/*! @name FIFOINTENSET - FIFO Interrupt Enable Register */
/*! @{ */
#define SPI_FIFOINTENSET_TXERR_MASK              (0x1U)
#define SPI_FIFOINTENSET_TXERR_SHIFT             (0U)
#define SPI_FIFOINTENSET_RXERR_MASK              (0x2U)
#define SPI_FIFOINTENSET_RXERR_SHIFT             (1U)
#define SPI_FIFOINTENSET_TXLVL_MASK              (0x4U)
#define SPI_FIFOINTENSET_TXLVL_SHIFT             (2U)
#define SPI_FIFOINTENSET_RXLVL_MASK              (0x8U)
#define SPI_FIFOINTENSET_RXLVL_SHIFT             (3U)
/*! @} */

/*! @name FIFOINTENCLR - FIFO Interrupt Enable Clear Register */
/*! @{ */
#define SPI_FIFOINTENCLR_TXERR_MASK              (0x1U)
#define SPI_FIFOINTENCLR_TXERR_SHIFT             (0U)
#define SPI_FIFOINTENCLR_RXERR_MASK              (0x2U)
#define SPI_FIFOINTENCLR_RXERR_SHIFT             (1U)
#define SPI_FIFOINTENCLR_TXLVL_MASK              (0x4U)
#define SPI_FIFOINTENCLR_TXLVL_SHIFT             (2U)
#define SPI_FIFOINTENCLR_RXLVL_MASK              (0x8U)
#define SPI_FIFOINTENCLR_RXLVL_SHIFT             (3U)
/*! @} */

/*! @name FIFOINTSTAT - FIFO Interrupt Status Register */
/*! @{ */
#define SPI_FIFOINTSTAT_TXERR_MASK               (0x1U)
#define SPI_FIFOINTSTAT_TXERR_SHIFT              (0U)
#define SPI_FIFOINTSTAT_RXERR_MASK               (0x2U)
#define SPI_FIFOINTSTAT_RXERR_SHIFT              (1U)
#define SPI_FIFOINTSTAT_TXLVL_MASK               (0x4U)
#define SPI_FIFOINTSTAT_TXLVL_SHIFT              (2U)
#define SPI_FIFOINTSTAT_RXLVL_MASK               (0x8U)
#define SPI_FIFOINTSTAT_RXLVL_SHIFT              (3U)
#define SPI_FIFOINTSTAT_PERINT_MASK              (0x10U)
#define SPI_FIFOINTSTAT_PERINT_SHIFT             (4U)
/*! @} */

/*! @name FIFOWR - FIFO Write Data Register */
/*! @{ */
#define SPI_FIFOWR_TXDATA_MASK                   (0xFFFFU)
#define SPI_FIFOWR_TXDATA_SHIFT                  (0U)
/*! TXDATA - Transmit Data to the FIFO
 */
#define SPI_FIFOWR_TXDATA(x)                     (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_TXDATA_SHIFT)) & SPI_FIFOWR_TXDATA_MASK)
#define SPI_FIFOWR_TXSSEL0_N_MASK                (0x10000U)
#define SPI_FIFOWR_TXSSEL0_N_SHIFT               (16U)
#define SPI_FIFOWR_TXSSEL1_N_MASK                (0x20000U)
#define SPI_FIFOWR_TXSSEL1_N_SHIFT               (17U)
#define SPI_FIFOWR_TXSSEL2_N_MASK                (0x40000U)
#define SPI_FIFOWR_TXSSEL2_N_SHIFT               (18U)
#define SPI_FIFOWR_TXSSEL3_N_MASK                (0x80000U)
#define SPI_FIFOWR_TXSSEL3_N_SHIFT               (19U)
#define SPI_FIFOWR_EOT_MASK                      (0x100000U)
#define SPI_FIFOWR_EOT_SHIFT                     (20U)
#define SPI_FIFOWR_EOF_MASK                      (0x200000U)
#define SPI_FIFOWR_EOF_SHIFT                     (21U)
#define SPI_FIFOWR_RXIGNORE_MASK                 (0x400000U)
#define SPI_FIFOWR_RXIGNORE_SHIFT                (22U)
#define SPI_FIFOWR_TXIGNORE_MASK                 (0x800000U)
#define SPI_FIFOWR_TXIGNORE_SHIFT                (23U)
#define SPI_FIFOWR_LEN_MASK                      (0xF000000U)
#define SPI_FIFOWR_LEN_SHIFT                     (24U)
/*! LEN - Data Length
 *  0b0000..Reserved
 *  0b0001..Reserved
 *  0b0010..Reserved
 *  0b0011..Data transfer is 4 bits in length
 *  0b0100..Data transfer is 5 bits in length
 *  0b1111..Data transfer is 16 bits in length
 */
#define SPI_FIFOWR_LEN(x)                        (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_LEN_SHIFT)) & SPI_FIFOWR_LEN_MASK)
/*! @} */

/*! @name FIFORD - FIFO Read Data Register */
/*! @{ */
#define SPI_FIFORD_RXDATA_MASK                   (0xFFFFU)
#define SPI_FIFORD_RXDATA_SHIFT                  (0U)
/*! RXDATA - Received Data from the FIFO
 */
#define SPI_FIFORD_RXDATA(x)                     (((uint32_t)(((uint32_t)(x)) << SPI_FIFORD_RXDATA_SHIFT)) & SPI_FIFORD_RXDATA_MASK)
#define SPI_FIFORD_RXSSEL0_N_MASK                (0x10000U)
#define SPI_FIFORD_RXSSEL0_N_SHIFT               (16U)
#define SPI_FIFORD_RXSSEL1_N_MASK                (0x20000U)
#define SPI_FIFORD_RXSSEL1_N_SHIFT               (17U)
#define SPI_FIFORD_RXSSEL2_N_MASK                (0x40000U)
#define SPI_FIFORD_RXSSEL2_N_SHIFT               (18U)
#define SPI_FIFORD_RXSSEL3_N_MASK                (0x80000U)
#define SPI_FIFORD_RXSSEL3_N_SHIFT               (19U)
#define SPI_FIFORD_SOT_MASK                      (0x100000U)
#define SPI_FIFORD_SOT_SHIFT                     (20U)
/*! @} */

/*! @name FIFORDNOPOP - FIFO Data Read with no FIFO Pop Register */
/*! @{ */
#define SPI_FIFORDNOPOP_RXDATA_MASK              (0xFFFFU)
#define SPI_FIFORDNOPOP_RXDATA_SHIFT             (0U)
/*! RXDATA - Received Data from the FIFO
 */
#define SPI_FIFORDNOPOP_RXDATA(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFORDNOPOP_RXDATA_SHIFT)) & SPI_FIFORDNOPOP_RXDATA_MASK)
#define SPI_FIFORDNOPOP_RXSSEL0_N_MASK           (0x10000U)
#define SPI_FIFORDNOPOP_RXSSEL0_N_SHIFT          (16U)
#define SPI_FIFORDNOPOP_RXSSEL1_N_MASK           (0x20000U)
#define SPI_FIFORDNOPOP_RXSSEL1_N_SHIFT          (17U)
#define SPI_FIFORDNOPOP_RXSSEL2_N_MASK           (0x40000U)
#define SPI_FIFORDNOPOP_RXSSEL2_N_SHIFT          (18U)
#define SPI_FIFORDNOPOP_RXSSEL3_N_MASK           (0x80000U)
#define SPI_FIFORDNOPOP_RXSSEL3_N_SHIFT          (19U)
#define SPI_FIFORDNOPOP_SOT_MASK                 (0x100000U)
#define SPI_FIFORDNOPOP_SOT_SHIFT                (20U)
/*! @} */

/*! @name FIFOSIZE - FIFO Size Register */
/*! @{ */
#define SPI_FIFOSIZE_FIFOSIZE_MASK               (0x1FU)
#define SPI_FIFOSIZE_FIFOSIZE_SHIFT              (0U)
/*! FIFOSIZE - FIFO Size
 */
#define SPI_FIFOSIZE_FIFOSIZE(x)                 (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSIZE_FIFOSIZE_SHIFT)) & SPI_FIFOSIZE_FIFOSIZE_MASK)
/*! @} */

/*! @name ID - Peripheral Identification Register */
/*! @{ */
#define SPI_ID_APERTURE_MASK                     (0xFFU)
#define SPI_ID_APERTURE_SHIFT                    (0U)
/*! APERTURE - Aperture
 */
#define SPI_ID_APERTURE(x)                       (((uint32_t)(((uint32_t)(x)) << SPI_ID_APERTURE_SHIFT)) & SPI_ID_APERTURE_MASK)
#define SPI_ID_MINOR_REV_MASK                    (0xF00U)
#define SPI_ID_MINOR_REV_SHIFT                   (8U)
/*! MINOR_REV - Minor revision of module implementation
 */
#define SPI_ID_MINOR_REV(x)                      (((uint32_t)(((uint32_t)(x)) << SPI_ID_MINOR_REV_SHIFT)) & SPI_ID_MINOR_REV_MASK)
#define SPI_ID_MAJOR_REV_MASK                    (0xF000U)
#define SPI_ID_MAJOR_REV_SHIFT                   (12U)
/*! MAJOR_REV - Major revision of module implementation
 */
#define SPI_ID_MAJOR_REV(x)                      (((uint32_t)(((uint32_t)(x)) << SPI_ID_MAJOR_REV_SHIFT)) & SPI_ID_MAJOR_REV_MASK)
#define SPI_ID_ID_MASK                           (0xFFFF0000U)
#define SPI_ID_ID_SHIFT                          (16U)
/*! ID - Module identifier for the selected function
 */
#define SPI_ID_ID(x)                             (((uint32_t)(((uint32_t)(x)) << SPI_ID_ID_SHIFT)) & SPI_ID_ID_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group SPI_Register_Masks */


/* SPI - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral SPI0 base pointer */
  #define SPI0_BASE_PTR                            ((SPI_MemMapPtr)0x50106000u)
  /** Peripheral SPI0 base pointer */
  #define SPI0_BASE_PTR_NS                         ((SPI_MemMapPtr)0x40106000u)
  /** Peripheral SPI1 base pointer */
  #define SPI1_BASE_PTR                            ((SPI_MemMapPtr)0x50107000u)
  /** Peripheral SPI1 base pointer */
  #define SPI1_BASE_PTR_NS                         ((SPI_MemMapPtr)0x40107000u)
  /** Peripheral SPI2 base pointer */
  #define SPI2_BASE_PTR                            ((SPI_MemMapPtr)0x50108000u)
  /** Peripheral SPI2 base pointer */
  #define SPI2_BASE_PTR_NS                         ((SPI_MemMapPtr)0x40108000u)
  /** Peripheral SPI3 base pointer */
  #define SPI3_BASE_PTR                            ((SPI_MemMapPtr)0x50109000u)
  /** Peripheral SPI3 base pointer */
  #define SPI3_BASE_PTR_NS                         ((SPI_MemMapPtr)0x40109000u)
  /** Peripheral SPI4 base pointer */
  #define SPI4_BASE_PTR                            ((SPI_MemMapPtr)0x50122000u)
  /** Peripheral SPI4 base pointer */
  #define SPI4_BASE_PTR_NS                         ((SPI_MemMapPtr)0x40122000u)
  /** Peripheral SPI5 base pointer */
  #define SPI5_BASE_PTR                            ((SPI_MemMapPtr)0x50123000u)
  /** Peripheral SPI5 base pointer */
  #define SPI5_BASE_PTR_NS                         ((SPI_MemMapPtr)0x40123000u)
  /** Peripheral SPI6 base pointer */
  #define SPI6_BASE_PTR                            ((SPI_MemMapPtr)0x50124000u)
  /** Peripheral SPI6 base pointer */
  #define SPI6_BASE_PTR_NS                         ((SPI_MemMapPtr)0x40124000u)
  /** Peripheral SPI7 base pointer */
  #define SPI7_BASE_PTR                            ((SPI_MemMapPtr)0x50125000u)
  /** Peripheral SPI7 base pointer */
  #define SPI7_BASE_PTR_NS                         ((SPI_MemMapPtr)0x40125000u)
  /** Peripheral SPI8 base pointer */
  #define SPI8_BASE_PTR                            ((SPI_MemMapPtr)0x50209000u)
  /** Peripheral SPI8 base pointer */
  #define SPI8_BASE_PTR_NS                         ((SPI_MemMapPtr)0x40209000u)
  /** Peripheral SPI9 base pointer */
  #define SPI9_BASE_PTR                            ((SPI_MemMapPtr)0x5020A000u)
  /** Peripheral SPI9 base pointer */
  #define SPI9_BASE_PTR_NS                         ((SPI_MemMapPtr)0x4020A000u)
  /** Peripheral SPI10 base pointer */
  #define SPI10_BASE_PTR                           ((SPI_MemMapPtr)0x5020B000u)
  /** Peripheral SPI10 base pointer */
  #define SPI10_BASE_PTR_NS                        ((SPI_MemMapPtr)0x4020B000u)
  /** Peripheral SPI11 base pointer */
  #define SPI11_BASE_PTR                           ((SPI_MemMapPtr)0x5020C000u)
  /** Peripheral SPI11 base pointer */
  #define SPI11_BASE_PTR_NS                        ((SPI_MemMapPtr)0x4020C000u)
  /** Peripheral SPI12 base pointer */
  #define SPI12_BASE_PTR                           ((SPI_MemMapPtr)0x5020D000u)
  /** Peripheral SPI12 base pointer */
  #define SPI12_BASE_PTR_NS                        ((SPI_MemMapPtr)0x4020D000u)
  /** Peripheral SPI13 base pointer */
  #define SPI13_BASE_PTR                           ((SPI_MemMapPtr)0x5020E000u)
  /** Peripheral SPI13 base pointer */
  #define SPI13_BASE_PTR_NS                        ((SPI_MemMapPtr)0x4020E000u)
  /** Peripheral SPI14 base pointer */
  #define SPI14_BASE_PTR                           ((SPI_MemMapPtr)0x50126000u)
  /** Peripheral SPI14 base pointer */
  #define SPI14_BASE_PTR_NS                        ((SPI_MemMapPtr)0x40126000u)
  /** Peripheral SPI16 base pointer */
  #define SPI16_BASE_PTR                           ((SPI_MemMapPtr)0x50128000u)
  /** Peripheral SPI16 base pointer */
  #define SPI16_BASE_PTR_NS                        ((SPI_MemMapPtr)0x40128000u)
  /** Array initializer of SPI peripheral base pointers */
  #define SPI_BASE_PTRS                            { SPI0_BASE_PTR, SPI1_BASE_PTR, SPI2_BASE_PTR, SPI3_BASE_PTR, SPI4_BASE_PTR, SPI5_BASE_PTR, SPI6_BASE_PTR, SPI7_BASE_PTR, SPI8_BASE_PTR, SPI9_BASE_PTR, SPI10_BASE_PTR, SPI11_BASE_PTR, SPI12_BASE_PTR, SPI13_BASE_PTR, SPI14_BASE_PTR, SPI16_BASE_PTR }
  /** Array initializer of SPI peripheral base pointers */
  #define SPI_BASE_PTRS_NS                         { SPI0_BASE_PTR_NS, SPI1_BASE_PTR_NS, SPI2_BASE_PTR_NS, SPI3_BASE_PTR_NS, SPI4_BASE_PTR_NS, SPI5_BASE_PTR_NS, SPI6_BASE_PTR_NS, SPI7_BASE_PTR_NS, SPI8_BASE_PTR_NS, SPI9_BASE_PTR_NS, SPI10_BASE_PTR_NS, SPI11_BASE_PTR_NS, SPI12_BASE_PTR_NS, SPI13_BASE_PTR_NS, SPI14_BASE_PTR_NS, SPI16_BASE_PTR_NS }
#else
  /** Peripheral SPI0 base pointer */
  #define SPI0_BASE_PTR                            ((SPI_MemMapPtr)0x40106000u)
  /** Peripheral SPI1 base pointer */
  #define SPI1_BASE_PTR                            ((SPI_MemMapPtr)0x40107000u)
  /** Peripheral SPI2 base pointer */
  #define SPI2_BASE_PTR                            ((SPI_MemMapPtr)0x40108000u)
  /** Peripheral SPI3 base pointer */
  #define SPI3_BASE_PTR                            ((SPI_MemMapPtr)0x40109000u)
  /** Peripheral SPI4 base pointer */
  #define SPI4_BASE_PTR                            ((SPI_MemMapPtr)0x40122000u)
  /** Peripheral SPI5 base pointer */
  #define SPI5_BASE_PTR                            ((SPI_MemMapPtr)0x40123000u)
  /** Peripheral SPI6 base pointer */
  #define SPI6_BASE_PTR                            ((SPI_MemMapPtr)0x40124000u)
  /** Peripheral SPI7 base pointer */
  #define SPI7_BASE_PTR                            ((SPI_MemMapPtr)0x40125000u)
  /** Peripheral SPI8 base pointer */
  #define SPI8_BASE_PTR                            ((SPI_MemMapPtr)0x40209000u)
  /** Peripheral SPI9 base pointer */
  #define SPI9_BASE_PTR                            ((SPI_MemMapPtr)0x4020A000u)
  /** Peripheral SPI10 base pointer */
  #define SPI10_BASE_PTR                           ((SPI_MemMapPtr)0x4020B000u)
  /** Peripheral SPI11 base pointer */
  #define SPI11_BASE_PTR                           ((SPI_MemMapPtr)0x4020C000u)
  /** Peripheral SPI12 base pointer */
  #define SPI12_BASE_PTR                           ((SPI_MemMapPtr)0x4020D000u)
  /** Peripheral SPI13 base pointer */
  #define SPI13_BASE_PTR                           ((SPI_MemMapPtr)0x4020E000u)
  /** Peripheral SPI14 base pointer */
  #define SPI14_BASE_PTR                           ((SPI_MemMapPtr)0x40126000u)
  /** Peripheral SPI16 base pointer */
  #define SPI16_BASE_PTR                           ((SPI_MemMapPtr)0x40128000u)
  /** Array initializer of SPI peripheral base pointers */
  #define SPI_BASE_PTRS                            { SPI0_BASE_PTR, SPI1_BASE_PTR, SPI2_BASE_PTR, SPI3_BASE_PTR, SPI4_BASE_PTR, SPI5_BASE_PTR, SPI6_BASE_PTR, SPI7_BASE_PTR, SPI8_BASE_PTR, SPI9_BASE_PTR, SPI10_BASE_PTR, SPI11_BASE_PTR, SPI12_BASE_PTR, SPI13_BASE_PTR, SPI14_BASE_PTR, SPI16_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- SPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPI_Register_Accessor_Macros SPI - Register accessor macros
 * @{
 */


/* SPI - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* SPI0 */
  #define FLEXCOMM0__SPI_CFG                       SPI_CFG_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_CFG_NS                    SPI_CFG_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_DLY                       SPI_DLY_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_DLY_NS                    SPI_DLY_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_STAT                      SPI_STAT_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_STAT_NS                   SPI_STAT_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_INTENSET                  SPI_INTENSET_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_INTENSET_NS               SPI_INTENSET_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_INTENCLR_NS               SPI_INTENCLR_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_DIV                       SPI_DIV_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_DIV_NS                    SPI_DIV_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_INTSTAT_NS                SPI_INTSTAT_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOCFG_NS                SPI_FIFOCFG_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOSTAT_NS               SPI_FIFOSTAT_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOTRIG_NS               SPI_FIFOTRIG_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOINTENSET_NS           SPI_FIFOINTENSET_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOINTENCLR_NS           SPI_FIFOINTENCLR_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOINTSTAT_NS            SPI_FIFOINTSTAT_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOWR_NS                 SPI_FIFOWR_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_FIFORD                    SPI_FIFORD_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFORD_NS                 SPI_FIFORD_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFORDNOPOP_NS            SPI_FIFORDNOPOP_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOSIZE_NS               SPI_FIFOSIZE_REG(SPI0_BASE_PTR_NS)
  #define FLEXCOMM0__SPI_ID                        SPI_ID_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_ID_NS                     SPI_ID_REG(SPI0_BASE_PTR_NS)
  /* SPI1 */
  #define FLEXCOMM1__SPI_CFG                       SPI_CFG_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_CFG_NS                    SPI_CFG_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_DLY                       SPI_DLY_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_DLY_NS                    SPI_DLY_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_STAT                      SPI_STAT_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_STAT_NS                   SPI_STAT_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_INTENSET                  SPI_INTENSET_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_INTENSET_NS               SPI_INTENSET_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_INTENCLR_NS               SPI_INTENCLR_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_DIV                       SPI_DIV_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_DIV_NS                    SPI_DIV_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_INTSTAT_NS                SPI_INTSTAT_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOCFG_NS                SPI_FIFOCFG_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOSTAT_NS               SPI_FIFOSTAT_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOTRIG_NS               SPI_FIFOTRIG_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOINTENSET_NS           SPI_FIFOINTENSET_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOINTENCLR_NS           SPI_FIFOINTENCLR_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOINTSTAT_NS            SPI_FIFOINTSTAT_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOWR_NS                 SPI_FIFOWR_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_FIFORD                    SPI_FIFORD_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFORD_NS                 SPI_FIFORD_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFORDNOPOP_NS            SPI_FIFORDNOPOP_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOSIZE_NS               SPI_FIFOSIZE_REG(SPI1_BASE_PTR_NS)
  #define FLEXCOMM1__SPI_ID                        SPI_ID_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_ID_NS                     SPI_ID_REG(SPI1_BASE_PTR_NS)
  /* SPI2 */
  #define FLEXCOMM2__SPI_CFG                       SPI_CFG_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_CFG_NS                    SPI_CFG_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_DLY                       SPI_DLY_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_DLY_NS                    SPI_DLY_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_STAT                      SPI_STAT_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_STAT_NS                   SPI_STAT_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_INTENSET                  SPI_INTENSET_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_INTENSET_NS               SPI_INTENSET_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_INTENCLR_NS               SPI_INTENCLR_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_DIV                       SPI_DIV_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_DIV_NS                    SPI_DIV_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_INTSTAT_NS                SPI_INTSTAT_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOCFG_NS                SPI_FIFOCFG_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOSTAT_NS               SPI_FIFOSTAT_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOTRIG_NS               SPI_FIFOTRIG_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOINTENSET_NS           SPI_FIFOINTENSET_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOINTENCLR_NS           SPI_FIFOINTENCLR_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOINTSTAT_NS            SPI_FIFOINTSTAT_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOWR_NS                 SPI_FIFOWR_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_FIFORD                    SPI_FIFORD_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFORD_NS                 SPI_FIFORD_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFORDNOPOP_NS            SPI_FIFORDNOPOP_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOSIZE_NS               SPI_FIFOSIZE_REG(SPI2_BASE_PTR_NS)
  #define FLEXCOMM2__SPI_ID                        SPI_ID_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_ID_NS                     SPI_ID_REG(SPI2_BASE_PTR_NS)
  /* SPI3 */
  #define FLEXCOMM3__SPI_CFG                       SPI_CFG_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_CFG_NS                    SPI_CFG_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_DLY                       SPI_DLY_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_DLY_NS                    SPI_DLY_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_STAT                      SPI_STAT_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_STAT_NS                   SPI_STAT_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_INTENSET                  SPI_INTENSET_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_INTENSET_NS               SPI_INTENSET_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_INTENCLR_NS               SPI_INTENCLR_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_DIV                       SPI_DIV_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_DIV_NS                    SPI_DIV_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_INTSTAT_NS                SPI_INTSTAT_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOCFG_NS                SPI_FIFOCFG_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOSTAT_NS               SPI_FIFOSTAT_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOTRIG_NS               SPI_FIFOTRIG_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOINTENSET_NS           SPI_FIFOINTENSET_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOINTENCLR_NS           SPI_FIFOINTENCLR_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOINTSTAT_NS            SPI_FIFOINTSTAT_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOWR_NS                 SPI_FIFOWR_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_FIFORD                    SPI_FIFORD_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFORD_NS                 SPI_FIFORD_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFORDNOPOP_NS            SPI_FIFORDNOPOP_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOSIZE_NS               SPI_FIFOSIZE_REG(SPI3_BASE_PTR_NS)
  #define FLEXCOMM3__SPI_ID                        SPI_ID_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_ID_NS                     SPI_ID_REG(SPI3_BASE_PTR_NS)
  /* SPI4 */
  #define FLEXCOMM4__SPI_CFG                       SPI_CFG_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_CFG_NS                    SPI_CFG_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_DLY                       SPI_DLY_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_DLY_NS                    SPI_DLY_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_STAT                      SPI_STAT_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_STAT_NS                   SPI_STAT_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_INTENSET                  SPI_INTENSET_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_INTENSET_NS               SPI_INTENSET_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_INTENCLR_NS               SPI_INTENCLR_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_DIV                       SPI_DIV_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_DIV_NS                    SPI_DIV_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_INTSTAT_NS                SPI_INTSTAT_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOCFG_NS                SPI_FIFOCFG_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOSTAT_NS               SPI_FIFOSTAT_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOTRIG_NS               SPI_FIFOTRIG_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOINTENSET_NS           SPI_FIFOINTENSET_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOINTENCLR_NS           SPI_FIFOINTENCLR_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOINTSTAT_NS            SPI_FIFOINTSTAT_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOWR_NS                 SPI_FIFOWR_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_FIFORD                    SPI_FIFORD_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFORD_NS                 SPI_FIFORD_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFORDNOPOP_NS            SPI_FIFORDNOPOP_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOSIZE_NS               SPI_FIFOSIZE_REG(SPI4_BASE_PTR_NS)
  #define FLEXCOMM4__SPI_ID                        SPI_ID_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_ID_NS                     SPI_ID_REG(SPI4_BASE_PTR_NS)
  /* SPI5 */
  #define FLEXCOMM5__SPI_CFG                       SPI_CFG_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_CFG_NS                    SPI_CFG_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_DLY                       SPI_DLY_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_DLY_NS                    SPI_DLY_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_STAT                      SPI_STAT_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_STAT_NS                   SPI_STAT_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_INTENSET                  SPI_INTENSET_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_INTENSET_NS               SPI_INTENSET_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_INTENCLR_NS               SPI_INTENCLR_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_DIV                       SPI_DIV_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_DIV_NS                    SPI_DIV_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_INTSTAT_NS                SPI_INTSTAT_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOCFG_NS                SPI_FIFOCFG_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOSTAT_NS               SPI_FIFOSTAT_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOTRIG_NS               SPI_FIFOTRIG_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOINTENSET_NS           SPI_FIFOINTENSET_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOINTENCLR_NS           SPI_FIFOINTENCLR_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOINTSTAT_NS            SPI_FIFOINTSTAT_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOWR_NS                 SPI_FIFOWR_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_FIFORD                    SPI_FIFORD_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFORD_NS                 SPI_FIFORD_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFORDNOPOP_NS            SPI_FIFORDNOPOP_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOSIZE_NS               SPI_FIFOSIZE_REG(SPI5_BASE_PTR_NS)
  #define FLEXCOMM5__SPI_ID                        SPI_ID_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_ID_NS                     SPI_ID_REG(SPI5_BASE_PTR_NS)
  /* SPI6 */
  #define FLEXCOMM6__SPI_CFG                       SPI_CFG_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_CFG_NS                    SPI_CFG_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_DLY                       SPI_DLY_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_DLY_NS                    SPI_DLY_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_STAT                      SPI_STAT_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_STAT_NS                   SPI_STAT_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_INTENSET                  SPI_INTENSET_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_INTENSET_NS               SPI_INTENSET_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_INTENCLR_NS               SPI_INTENCLR_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_DIV                       SPI_DIV_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_DIV_NS                    SPI_DIV_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_INTSTAT_NS                SPI_INTSTAT_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOCFG_NS                SPI_FIFOCFG_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOSTAT_NS               SPI_FIFOSTAT_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOTRIG_NS               SPI_FIFOTRIG_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOINTENSET_NS           SPI_FIFOINTENSET_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOINTENCLR_NS           SPI_FIFOINTENCLR_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOINTSTAT_NS            SPI_FIFOINTSTAT_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOWR_NS                 SPI_FIFOWR_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_FIFORD                    SPI_FIFORD_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFORD_NS                 SPI_FIFORD_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFORDNOPOP_NS            SPI_FIFORDNOPOP_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOSIZE_NS               SPI_FIFOSIZE_REG(SPI6_BASE_PTR_NS)
  #define FLEXCOMM6__SPI_ID                        SPI_ID_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_ID_NS                     SPI_ID_REG(SPI6_BASE_PTR_NS)
  /* SPI7 */
  #define FLEXCOMM7__SPI_CFG                       SPI_CFG_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_CFG_NS                    SPI_CFG_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_DLY                       SPI_DLY_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_DLY_NS                    SPI_DLY_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_STAT                      SPI_STAT_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_STAT_NS                   SPI_STAT_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_INTENSET                  SPI_INTENSET_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_INTENSET_NS               SPI_INTENSET_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_INTENCLR_NS               SPI_INTENCLR_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_DIV                       SPI_DIV_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_DIV_NS                    SPI_DIV_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_INTSTAT_NS                SPI_INTSTAT_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOCFG_NS                SPI_FIFOCFG_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOSTAT_NS               SPI_FIFOSTAT_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOTRIG_NS               SPI_FIFOTRIG_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOINTENSET_NS           SPI_FIFOINTENSET_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOINTENCLR_NS           SPI_FIFOINTENCLR_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOINTSTAT_NS            SPI_FIFOINTSTAT_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOWR_NS                 SPI_FIFOWR_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_FIFORD                    SPI_FIFORD_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFORD_NS                 SPI_FIFORD_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFORDNOPOP_NS            SPI_FIFORDNOPOP_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOSIZE_NS               SPI_FIFOSIZE_REG(SPI7_BASE_PTR_NS)
  #define FLEXCOMM7__SPI_ID                        SPI_ID_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_ID_NS                     SPI_ID_REG(SPI7_BASE_PTR_NS)
  /* SPI8 */
  #define FLEXCOMM8__SPI_CFG                       SPI_CFG_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_CFG_NS                    SPI_CFG_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_DLY                       SPI_DLY_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_DLY_NS                    SPI_DLY_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_STAT                      SPI_STAT_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_STAT_NS                   SPI_STAT_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_INTENSET                  SPI_INTENSET_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_INTENSET_NS               SPI_INTENSET_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_INTENCLR_NS               SPI_INTENCLR_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_DIV                       SPI_DIV_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_DIV_NS                    SPI_DIV_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_INTSTAT_NS                SPI_INTSTAT_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOCFG_NS                SPI_FIFOCFG_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOSTAT_NS               SPI_FIFOSTAT_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOTRIG_NS               SPI_FIFOTRIG_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOINTENSET_NS           SPI_FIFOINTENSET_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOINTENCLR_NS           SPI_FIFOINTENCLR_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOINTSTAT_NS            SPI_FIFOINTSTAT_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOWR_NS                 SPI_FIFOWR_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_FIFORD                    SPI_FIFORD_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFORD_NS                 SPI_FIFORD_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFORDNOPOP_NS            SPI_FIFORDNOPOP_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOSIZE_NS               SPI_FIFOSIZE_REG(SPI8_BASE_PTR_NS)
  #define FLEXCOMM8__SPI_ID                        SPI_ID_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_ID_NS                     SPI_ID_REG(SPI8_BASE_PTR_NS)
  /* SPI9 */
  #define FLEXCOMM9__SPI_CFG                       SPI_CFG_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_CFG_NS                    SPI_CFG_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_DLY                       SPI_DLY_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_DLY_NS                    SPI_DLY_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_STAT                      SPI_STAT_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_STAT_NS                   SPI_STAT_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_INTENSET                  SPI_INTENSET_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_INTENSET_NS               SPI_INTENSET_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_INTENCLR_NS               SPI_INTENCLR_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_DIV                       SPI_DIV_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_DIV_NS                    SPI_DIV_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_INTSTAT_NS                SPI_INTSTAT_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOCFG_NS                SPI_FIFOCFG_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOSTAT_NS               SPI_FIFOSTAT_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOTRIG_NS               SPI_FIFOTRIG_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOINTENSET_NS           SPI_FIFOINTENSET_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOINTENCLR_NS           SPI_FIFOINTENCLR_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOINTSTAT_NS            SPI_FIFOINTSTAT_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOWR_NS                 SPI_FIFOWR_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_FIFORD                    SPI_FIFORD_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFORD_NS                 SPI_FIFORD_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFORDNOPOP_NS            SPI_FIFORDNOPOP_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOSIZE_NS               SPI_FIFOSIZE_REG(SPI9_BASE_PTR_NS)
  #define FLEXCOMM9__SPI_ID                        SPI_ID_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_ID_NS                     SPI_ID_REG(SPI9_BASE_PTR_NS)
  /* SPI10 */
  #define FLEXCOMM10__SPI_CFG                      SPI_CFG_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_CFG_NS                   SPI_CFG_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_DLY                      SPI_DLY_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_DLY_NS                   SPI_DLY_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_STAT                     SPI_STAT_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_STAT_NS                  SPI_STAT_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_INTENSET                 SPI_INTENSET_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_INTENSET_NS              SPI_INTENSET_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_INTENCLR_NS              SPI_INTENCLR_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_DIV                      SPI_DIV_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_DIV_NS                   SPI_DIV_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_INTSTAT_NS               SPI_INTSTAT_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOCFG_NS               SPI_FIFOCFG_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOSTAT_NS              SPI_FIFOSTAT_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOTRIG_NS              SPI_FIFOTRIG_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOINTENSET_NS          SPI_FIFOINTENSET_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOINTENCLR_NS          SPI_FIFOINTENCLR_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOINTSTAT_NS           SPI_FIFOINTSTAT_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOWR_NS                SPI_FIFOWR_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_FIFORD                   SPI_FIFORD_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFORD_NS                SPI_FIFORD_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFORDNOPOP_NS           SPI_FIFORDNOPOP_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOSIZE_NS              SPI_FIFOSIZE_REG(SPI10_BASE_PTR_NS)
  #define FLEXCOMM10__SPI_ID                       SPI_ID_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_ID_NS                    SPI_ID_REG(SPI10_BASE_PTR_NS)
  /* SPI11 */
  #define FLEXCOMM11__SPI_CFG                      SPI_CFG_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_CFG_NS                   SPI_CFG_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_DLY                      SPI_DLY_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_DLY_NS                   SPI_DLY_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_STAT                     SPI_STAT_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_STAT_NS                  SPI_STAT_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_INTENSET                 SPI_INTENSET_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_INTENSET_NS              SPI_INTENSET_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_INTENCLR_NS              SPI_INTENCLR_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_DIV                      SPI_DIV_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_DIV_NS                   SPI_DIV_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_INTSTAT_NS               SPI_INTSTAT_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOCFG_NS               SPI_FIFOCFG_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOSTAT_NS              SPI_FIFOSTAT_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOTRIG_NS              SPI_FIFOTRIG_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOINTENSET_NS          SPI_FIFOINTENSET_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOINTENCLR_NS          SPI_FIFOINTENCLR_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOINTSTAT_NS           SPI_FIFOINTSTAT_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOWR_NS                SPI_FIFOWR_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_FIFORD                   SPI_FIFORD_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFORD_NS                SPI_FIFORD_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFORDNOPOP_NS           SPI_FIFORDNOPOP_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOSIZE_NS              SPI_FIFOSIZE_REG(SPI11_BASE_PTR_NS)
  #define FLEXCOMM11__SPI_ID                       SPI_ID_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_ID_NS                    SPI_ID_REG(SPI11_BASE_PTR_NS)
  /* SPI12 */
  #define FLEXCOMM12__SPI_CFG                      SPI_CFG_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_CFG_NS                   SPI_CFG_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_DLY                      SPI_DLY_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_DLY_NS                   SPI_DLY_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_STAT                     SPI_STAT_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_STAT_NS                  SPI_STAT_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_INTENSET                 SPI_INTENSET_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_INTENSET_NS              SPI_INTENSET_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_INTENCLR_NS              SPI_INTENCLR_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_DIV                      SPI_DIV_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_DIV_NS                   SPI_DIV_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_INTSTAT_NS               SPI_INTSTAT_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOCFG_NS               SPI_FIFOCFG_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOSTAT_NS              SPI_FIFOSTAT_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOTRIG_NS              SPI_FIFOTRIG_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOINTENSET_NS          SPI_FIFOINTENSET_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOINTENCLR_NS          SPI_FIFOINTENCLR_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOINTSTAT_NS           SPI_FIFOINTSTAT_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOWR_NS                SPI_FIFOWR_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_FIFORD                   SPI_FIFORD_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFORD_NS                SPI_FIFORD_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFORDNOPOP_NS           SPI_FIFORDNOPOP_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOSIZE_NS              SPI_FIFOSIZE_REG(SPI12_BASE_PTR_NS)
  #define FLEXCOMM12__SPI_ID                       SPI_ID_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_ID_NS                    SPI_ID_REG(SPI12_BASE_PTR_NS)
  /* SPI13 */
  #define FLEXCOMM13__SPI_CFG                      SPI_CFG_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_CFG_NS                   SPI_CFG_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_DLY                      SPI_DLY_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_DLY_NS                   SPI_DLY_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_STAT                     SPI_STAT_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_STAT_NS                  SPI_STAT_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_INTENSET                 SPI_INTENSET_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_INTENSET_NS              SPI_INTENSET_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_INTENCLR_NS              SPI_INTENCLR_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_DIV                      SPI_DIV_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_DIV_NS                   SPI_DIV_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_INTSTAT_NS               SPI_INTSTAT_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOCFG_NS               SPI_FIFOCFG_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOSTAT_NS              SPI_FIFOSTAT_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOTRIG_NS              SPI_FIFOTRIG_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOINTENSET_NS          SPI_FIFOINTENSET_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOINTENCLR_NS          SPI_FIFOINTENCLR_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOINTSTAT_NS           SPI_FIFOINTSTAT_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOWR_NS                SPI_FIFOWR_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_FIFORD                   SPI_FIFORD_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFORD_NS                SPI_FIFORD_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFORDNOPOP_NS           SPI_FIFORDNOPOP_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOSIZE_NS              SPI_FIFOSIZE_REG(SPI13_BASE_PTR_NS)
  #define FLEXCOMM13__SPI_ID                       SPI_ID_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_ID_NS                    SPI_ID_REG(SPI13_BASE_PTR_NS)
  /* SPI14 */
  #define FLEXCOMM14__SPI_CFG                      SPI_CFG_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_CFG_NS                   SPI_CFG_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_DLY                      SPI_DLY_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_DLY_NS                   SPI_DLY_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_STAT                     SPI_STAT_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_STAT_NS                  SPI_STAT_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_INTENSET                 SPI_INTENSET_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_INTENSET_NS              SPI_INTENSET_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_INTENCLR_NS              SPI_INTENCLR_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_DIV                      SPI_DIV_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_DIV_NS                   SPI_DIV_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_INTSTAT_NS               SPI_INTSTAT_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOCFG_NS               SPI_FIFOCFG_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOSTAT_NS              SPI_FIFOSTAT_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOTRIG_NS              SPI_FIFOTRIG_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOINTENSET_NS          SPI_FIFOINTENSET_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOINTENCLR_NS          SPI_FIFOINTENCLR_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOINTSTAT_NS           SPI_FIFOINTSTAT_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOWR_NS                SPI_FIFOWR_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_FIFORD                   SPI_FIFORD_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFORD_NS                SPI_FIFORD_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFORDNOPOP_NS           SPI_FIFORDNOPOP_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOSIZE_NS              SPI_FIFOSIZE_REG(SPI14_BASE_PTR_NS)
  #define FLEXCOMM14__SPI_ID                       SPI_ID_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_ID_NS                    SPI_ID_REG(SPI14_BASE_PTR_NS)
  /* SPI16 */
  #define FLEXCOMM16__SPI_CFG                      SPI_CFG_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_CFG_NS                   SPI_CFG_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_DLY                      SPI_DLY_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_DLY_NS                   SPI_DLY_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_STAT                     SPI_STAT_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_STAT_NS                  SPI_STAT_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_INTENSET                 SPI_INTENSET_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_INTENSET_NS              SPI_INTENSET_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_INTENCLR_NS              SPI_INTENCLR_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_DIV                      SPI_DIV_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_DIV_NS                   SPI_DIV_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_INTSTAT_NS               SPI_INTSTAT_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOCFG_NS               SPI_FIFOCFG_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOSTAT_NS              SPI_FIFOSTAT_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOTRIG_NS              SPI_FIFOTRIG_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOINTENSET_NS          SPI_FIFOINTENSET_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOINTENCLR_NS          SPI_FIFOINTENCLR_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOINTSTAT_NS           SPI_FIFOINTSTAT_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOWR_NS                SPI_FIFOWR_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_FIFORD                   SPI_FIFORD_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFORD_NS                SPI_FIFORD_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFORDNOPOP_NS           SPI_FIFORDNOPOP_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOSIZE_NS              SPI_FIFOSIZE_REG(SPI16_BASE_PTR_NS)
  #define FLEXCOMM16__SPI_ID                       SPI_ID_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_ID_NS                    SPI_ID_REG(SPI16_BASE_PTR_NS)
#else
  /* SPI0 */
  #define FLEXCOMM0__SPI_CFG                       SPI_CFG_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_DLY                       SPI_DLY_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_STAT                      SPI_STAT_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_INTENSET                  SPI_INTENSET_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_DIV                       SPI_DIV_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFORD                    SPI_FIFORD_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI0_BASE_PTR)
  #define FLEXCOMM0__SPI_ID                        SPI_ID_REG(SPI0_BASE_PTR)
  /* SPI1 */
  #define FLEXCOMM1__SPI_CFG                       SPI_CFG_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_DLY                       SPI_DLY_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_STAT                      SPI_STAT_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_INTENSET                  SPI_INTENSET_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_DIV                       SPI_DIV_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFORD                    SPI_FIFORD_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI1_BASE_PTR)
  #define FLEXCOMM1__SPI_ID                        SPI_ID_REG(SPI1_BASE_PTR)
  /* SPI2 */
  #define FLEXCOMM2__SPI_CFG                       SPI_CFG_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_DLY                       SPI_DLY_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_STAT                      SPI_STAT_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_INTENSET                  SPI_INTENSET_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_DIV                       SPI_DIV_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFORD                    SPI_FIFORD_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI2_BASE_PTR)
  #define FLEXCOMM2__SPI_ID                        SPI_ID_REG(SPI2_BASE_PTR)
  /* SPI3 */
  #define FLEXCOMM3__SPI_CFG                       SPI_CFG_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_DLY                       SPI_DLY_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_STAT                      SPI_STAT_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_INTENSET                  SPI_INTENSET_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_DIV                       SPI_DIV_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFORD                    SPI_FIFORD_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI3_BASE_PTR)
  #define FLEXCOMM3__SPI_ID                        SPI_ID_REG(SPI3_BASE_PTR)
  /* SPI4 */
  #define FLEXCOMM4__SPI_CFG                       SPI_CFG_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_DLY                       SPI_DLY_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_STAT                      SPI_STAT_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_INTENSET                  SPI_INTENSET_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_DIV                       SPI_DIV_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFORD                    SPI_FIFORD_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI4_BASE_PTR)
  #define FLEXCOMM4__SPI_ID                        SPI_ID_REG(SPI4_BASE_PTR)
  /* SPI5 */
  #define FLEXCOMM5__SPI_CFG                       SPI_CFG_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_DLY                       SPI_DLY_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_STAT                      SPI_STAT_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_INTENSET                  SPI_INTENSET_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_DIV                       SPI_DIV_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFORD                    SPI_FIFORD_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI5_BASE_PTR)
  #define FLEXCOMM5__SPI_ID                        SPI_ID_REG(SPI5_BASE_PTR)
  /* SPI6 */
  #define FLEXCOMM6__SPI_CFG                       SPI_CFG_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_DLY                       SPI_DLY_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_STAT                      SPI_STAT_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_INTENSET                  SPI_INTENSET_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_DIV                       SPI_DIV_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFORD                    SPI_FIFORD_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI6_BASE_PTR)
  #define FLEXCOMM6__SPI_ID                        SPI_ID_REG(SPI6_BASE_PTR)
  /* SPI7 */
  #define FLEXCOMM7__SPI_CFG                       SPI_CFG_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_DLY                       SPI_DLY_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_STAT                      SPI_STAT_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_INTENSET                  SPI_INTENSET_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_DIV                       SPI_DIV_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFORD                    SPI_FIFORD_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI7_BASE_PTR)
  #define FLEXCOMM7__SPI_ID                        SPI_ID_REG(SPI7_BASE_PTR)
  /* SPI8 */
  #define FLEXCOMM8__SPI_CFG                       SPI_CFG_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_DLY                       SPI_DLY_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_STAT                      SPI_STAT_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_INTENSET                  SPI_INTENSET_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_DIV                       SPI_DIV_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFORD                    SPI_FIFORD_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI8_BASE_PTR)
  #define FLEXCOMM8__SPI_ID                        SPI_ID_REG(SPI8_BASE_PTR)
  /* SPI9 */
  #define FLEXCOMM9__SPI_CFG                       SPI_CFG_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_DLY                       SPI_DLY_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_STAT                      SPI_STAT_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_INTENSET                  SPI_INTENSET_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_INTENCLR                  SPI_INTENCLR_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_DIV                       SPI_DIV_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_INTSTAT                   SPI_INTSTAT_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOCFG                   SPI_FIFOCFG_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOSTAT                  SPI_FIFOSTAT_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOTRIG                  SPI_FIFOTRIG_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOINTENSET              SPI_FIFOINTENSET_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOINTENCLR              SPI_FIFOINTENCLR_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOINTSTAT               SPI_FIFOINTSTAT_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOWR                    SPI_FIFOWR_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFORD                    SPI_FIFORD_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFORDNOPOP               SPI_FIFORDNOPOP_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_FIFOSIZE                  SPI_FIFOSIZE_REG(SPI9_BASE_PTR)
  #define FLEXCOMM9__SPI_ID                        SPI_ID_REG(SPI9_BASE_PTR)
  /* SPI10 */
  #define FLEXCOMM10__SPI_CFG                      SPI_CFG_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_DLY                      SPI_DLY_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_STAT                     SPI_STAT_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_INTENSET                 SPI_INTENSET_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_DIV                      SPI_DIV_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFORD                   SPI_FIFORD_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI10_BASE_PTR)
  #define FLEXCOMM10__SPI_ID                       SPI_ID_REG(SPI10_BASE_PTR)
  /* SPI11 */
  #define FLEXCOMM11__SPI_CFG                      SPI_CFG_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_DLY                      SPI_DLY_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_STAT                     SPI_STAT_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_INTENSET                 SPI_INTENSET_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_DIV                      SPI_DIV_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFORD                   SPI_FIFORD_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI11_BASE_PTR)
  #define FLEXCOMM11__SPI_ID                       SPI_ID_REG(SPI11_BASE_PTR)
  /* SPI12 */
  #define FLEXCOMM12__SPI_CFG                      SPI_CFG_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_DLY                      SPI_DLY_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_STAT                     SPI_STAT_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_INTENSET                 SPI_INTENSET_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_DIV                      SPI_DIV_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFORD                   SPI_FIFORD_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI12_BASE_PTR)
  #define FLEXCOMM12__SPI_ID                       SPI_ID_REG(SPI12_BASE_PTR)
  /* SPI13 */
  #define FLEXCOMM13__SPI_CFG                      SPI_CFG_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_DLY                      SPI_DLY_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_STAT                     SPI_STAT_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_INTENSET                 SPI_INTENSET_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_DIV                      SPI_DIV_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFORD                   SPI_FIFORD_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI13_BASE_PTR)
  #define FLEXCOMM13__SPI_ID                       SPI_ID_REG(SPI13_BASE_PTR)
  /* SPI14 */
  #define FLEXCOMM14__SPI_CFG                      SPI_CFG_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_DLY                      SPI_DLY_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_STAT                     SPI_STAT_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_INTENSET                 SPI_INTENSET_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_DIV                      SPI_DIV_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFORD                   SPI_FIFORD_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI14_BASE_PTR)
  #define FLEXCOMM14__SPI_ID                       SPI_ID_REG(SPI14_BASE_PTR)
  /* SPI16 */
  #define FLEXCOMM16__SPI_CFG                      SPI_CFG_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_DLY                      SPI_DLY_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_STAT                     SPI_STAT_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_INTENSET                 SPI_INTENSET_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_INTENCLR                 SPI_INTENCLR_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_DIV                      SPI_DIV_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_INTSTAT                  SPI_INTSTAT_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOCFG                  SPI_FIFOCFG_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOSTAT                 SPI_FIFOSTAT_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOTRIG                 SPI_FIFOTRIG_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOINTENSET             SPI_FIFOINTENSET_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOINTENCLR             SPI_FIFOINTENCLR_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOINTSTAT              SPI_FIFOINTSTAT_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOWR                   SPI_FIFOWR_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFORD                   SPI_FIFORD_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFORDNOPOP              SPI_FIFORDNOPOP_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_FIFOSIZE                 SPI_FIFOSIZE_REG(SPI16_BASE_PTR)
  #define FLEXCOMM16__SPI_ID                       SPI_ID_REG(SPI16_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group SPI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SPI_Peripheral */


/* ----------------------------------------------------------------------------
   -- SYSCTL0
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SYSCTL0_Peripheral SYSCTL0
 * @{
 */

/** SYSCTL0 - Peripheral register structure */
typedef struct SYSCTL0_MemMap {
  uint8_t RESERVED_0[4];
  uint32_t DSP_VECT_REMAP;                         /**< DSP Vector Remap, offset: 0x4 */
  uint8_t RESERVED_1[4];
  uint32_t DSPSTALL;                               /**< DSP Stall Control, offset: 0xC */
  uint32_t AHBMATRIXPRIOR;                         /**< AHB MAX Priority, offset: 0x10 */
  uint8_t RESERVED_2[12];
  uint32_t AHBBRIDGEBUFFER[2];                     /**< AHB Buffer, array offset: 0x20, array step: 0x4 */
  uint8_t RESERVED_3[4];
  uint32_t BOOTROM_LCKOUT;                         /**< BOOT ROM lockout, offset: 0x2C */
  uint32_t M33NMISRCSEL;                           /**< M33 NMI source selection, offset: 0x30 */
  uint32_t SYSTEM_STICK_CALIB;                     /**< System secure tick calibration, offset: 0x34 */
  uint32_t SYSTEM_NSTICK_CALIB;                    /**< System non-secure tick calibration, offset: 0x38 */
  uint8_t RESERVED_4[36];
  uint32_t PRODUCT_ID;                             /**< Product ID, offset: 0x60 */
  uint32_t SILICONREV_ID;                          /**< Silicon Revision ID, offset: 0x64 */
  uint32_t JTAG_ID;                                /**< JTAG ID, offset: 0x68 */
  uint8_t RESERVED_5[4];
  uint32_t NSGPIO_PSYNC;                           /**< Non-secure GPIO PSYNC, offset: 0x70 */
  uint32_t SGPIO_PSYNC;                            /**< Secure GPIO PSYNC, offset: 0x74 */
  uint8_t RESERVED_6[8];
  uint32_t AUTOCLKGATEOVERRIDE0;                   /**< Auto clock gate override 0, offset: 0x80 */
  uint32_t AUTOCLKGATEOVERRIDE1;                   /**< Auto clock gate override 1, offset: 0x84 */
  uint8_t RESERVED_7[24];
  uint32_t CLKGATEOVERRIDE0;                       /**< Clock gate override 0, offset: 0xA0 */
  uint8_t RESERVED_8[88];
  uint32_t AHB_SRAM_ACCESS_DISABLE;                /**< AHB SRAM access disable, offset: 0xFC */
  uint32_t AXI_SRAM_ACCESS_DISABLE;                /**< AXI SRAM access disable, offset: 0x100 */
  uint32_t DSP_SRAM_ACCESS_DISABLE;                /**< DSP SRAM access disable, offset: 0x104 */
  uint8_t RESERVED_9[8];
  uint32_t PQ_MEM_CTRL;                            /**< Power-Quad Memory Control, offset: 0x110 */
  uint32_t FLEXSPI0_MEM_CTRL;                      /**< FlexSPI0 Memory Control, offset: 0x114 */
  uint32_t USBHS_MEM_CTRL;                         /**< USBHS Memory Control, offset: 0x118 */
  uint32_t USDHC0_MEM_CTRL;                        /**< USDHC0 Memory Control, offset: 0x11C */
  uint32_t USDHC1_MEM_CTRL;                        /**< USDHC1 Memory Control, offset: 0x120 */
  uint32_t CASPER_MEM_CTRL;                        /**< CASPER Memory Control, offset: 0x124 */
  uint32_t ROM_MEM_CTRL;                           /**< ROM Memory Control, offset: 0x128 */
  uint32_t FLEXSPI1_MEM_CTRL;                      /**< FlexSPI1 Memory Control, offset: 0x12C */
  uint32_t GPU_MEM_CTRL;                           /**< GPU Memory Control, offset: 0x130 */
  uint32_t MIPI_MEM_CTRL;                          /**< MIPI Memory Control, offset: 0x134 */
  uint32_t DCN_MEM_CTRL;                           /**< LCDIF Memory Control, offset: 0x138 */
  uint32_t SMARTDMA_MEM_CTRL;                      /**< SMARTDMA Memory Control, offset: 0x13C */
  uint8_t RESERVED_10[704];
  uint32_t MIPI_DSI_CTRL;                          /**< MIPI DSI Control, offset: 0x400 */
  uint8_t RESERVED_11[8];
  uint32_t USB0CLKCTRL;                            /**< USB Clock Control, offset: 0x40C */
  uint32_t USB0CLKSTAT;                            /**< USB Clock Status, offset: 0x410 */
  uint32_t USBPHYPLL0LOCKTIMEDIV2;                 /**< USB PHY PLL0 lock time division, offset: 0x414 */
  uint8_t RESERVED_12[488];
  uint32_t PDSLEEPCFG0;                            /**< Sleep configuration 0, offset: 0x600 */
  uint32_t PDSLEEPCFG1;                            /**< Sleep configuration 1, offset: 0x604 */
  uint32_t PDSLEEPCFG2;                            /**< Sleep configuration 2, offset: 0x608 */
  uint32_t PDSLEEPCFG3;                            /**< Sleep configuration 3, offset: 0x60C */
  uint32_t PDRUNCFG0;                              /**< Run configuration 0, offset: 0x610 */
  uint32_t PDRUNCFG1;                              /**< Run configuration 1, offset: 0x614 */
  uint32_t PDRUNCFG2;                              /**< Run configuration 2, offset: 0x618 */
  uint32_t PDRUNCFG3;                              /**< Run configuration 3, offset: 0x61C */
  uint32_t PDRUNCFG0_SET;                          /**< Run configuration 0 set, offset: 0x620 */
  uint32_t PDRUNCFG1_SET;                          /**< Run configuration 1 set, offset: 0x624 */
  uint32_t PDRUNCFG2_SET;                          /**< Run configuration 2 set, offset: 0x628 */
  uint32_t PDRUNCFG3_SET;                          /**< Run configuration 3 set, offset: 0x62C */
  uint32_t PDRUNCFG0_CLR;                          /**< Run configuration 0 clear, offset: 0x630 */
  uint32_t PDRUNCFG1_CLR;                          /**< Run configuration 1 clear, offset: 0x634 */
  uint32_t PDRUNCFG2_CLR;                          /**< Run configuration 2 clear, offset: 0x638 */
  uint32_t PDRUNCFG3_CLR;                          /**< Run configuration 3 clear, offset: 0x63C */
  uint8_t RESERVED_13[32];
  uint32_t PDWAKECFG;                              /**< PD Wake Configuration, offset: 0x660 */
  uint8_t RESERVED_14[28];
  uint32_t STARTEN0;                               /**< Start Enable 0, offset: 0x680 */
  uint32_t STARTEN1;                               /**< Start Enable 1, offset: 0x684 */
  uint32_t STARTEN2;                               /**< Start Enable 2, offset: 0x688 */
  uint8_t RESERVED_15[20];
  uint32_t STARTEN0_SET;                           /**< Start Enable 0 Set, offset: 0x6A0 */
  uint32_t STARTEN1_SET;                           /**< Start Enable 1 Set, offset: 0x6A4 */
  uint32_t STARTEN2_SET;                           /**< Start Enable 2, offset: 0x6A8 */
  uint8_t RESERVED_16[20];
  uint32_t STARTEN0_CLR;                           /**< Start Enable 0 clear, offset: 0x6C0 */
  uint32_t STARTEN1_CLR;                           /**< Start Enable 1 clear, offset: 0x6C4 */
  uint32_t STARTEN2_CLR;                           /**< Start Enable 2, offset: 0x6C8 */
  uint8_t RESERVED_17[180];
  uint32_t HWWAKE;                                 /**< Hardware Wake, offset: 0x780 */
  uint8_t RESERVED_18[1672];
  uint32_t TEMPSENSORCTL;                          /**< Temperature Sensor Control, offset: 0xE0C */
  uint8_t RESERVED_19[48];
  uint32_t BOOTSTATELOCK;                          /**< Boot State Lock, offset: 0xE40 */
  uint8_t RESERVED_20[12];
  uint32_t BOOTSTATESEED[8];                       /**< Boot State Seed, array offset: 0xE50, array step: 0x4 */
  uint32_t BOOTSTATEHMAC[8];                       /**< HMAC of boot state used for attestation., array offset: 0xE70, array step: 0x4 */
  uint8_t RESERVED_21[96];
  uint32_t FLEXSPI0PADCTL;                         /**< FLEXSPI0 Pad Control, offset: 0xEF0 */
  uint32_t FLEXSPI1PADCTL;                         /**< FLEXSPI1 Pad Control, offset: 0xEF4 */
  uint32_t SDIO0PADCTL;                            /**< SDIO0 Pad Control, offset: 0xEF8 */
  uint32_t SDIO1PADCTL;                            /**< SDIO1 Pad Control, offset: 0xEFC */
  uint32_t DICEHWREGN;                             /**< Compound Device Identifier (CDI), offset: 0xF00 */
  uint8_t RESERVED_22[76];
  uint32_t UUID[4];                                /**< UUID, array offset: 0xF50, array step: 0x4 */
  uint8_t RESERVED_23[32];
  uint32_t AESKEY_SRCSEL;                          /**< AES Key Source Select, offset: 0xF80 */
  uint32_t OTFADKEY_SRCSEL;                        /**< OTFAD Key Source Select, offset: 0xF84 */
  uint32_t HASHHWKEYDISABLE;                       /**< HASH Hardware Key Disable, offset: 0xF88 */
  uint8_t RESERVED_24[20];
  uint32_t DBG_LOCKEN;                             /**< Debug Lock Enable, offset: 0xFA0 */
  uint32_t DBG_FEATURES;                           /**< Debug Features, offset: 0xFA4 */
  uint32_t DBG_FEATURES_DP;                        /**< Debug Features Duplicate, offset: 0xFA8 */
  uint8_t RESERVED_25[8];
  uint32_t CS_PROTCPU0;                            /**< Code Security for CPU0, offset: 0xFB4 */
  uint32_t CS_PROTCPU1;                            /**< Code Security for CPU1, offset: 0xFB8 */
  uint8_t RESERVED_26[4];
  uint32_t DBG_AUTH_SCRATCH;                       /**< Debug authorization scratch, offset: 0xFC0 */
  uint8_t RESERVED_27[12];
  uint32_t KEY_BLOCK;                              /**< Key block, offset: 0xFD0 */
} volatile *SYSCTL0_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SYSCTL0 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SYSCTL0_Register_Accessor_Macros SYSCTL0 - Register accessor macros
 * @{
 */


/* SYSCTL0 - Register accessors */
#define SYSCTL0_DSP_VECT_REMAP_REG(base)         ((base)->DSP_VECT_REMAP)
#define SYSCTL0_DSPSTALL_REG(base)               ((base)->DSPSTALL)
#define SYSCTL0_AHBMATRIXPRIOR_REG(base)         ((base)->AHBMATRIXPRIOR)
#define SYSCTL0_AHBBRIDGEBUFFER_REG(base,index)  ((base)->AHBBRIDGEBUFFER[index])
#define SYSCTL0_BOOTROM_LCKOUT_REG(base)         ((base)->BOOTROM_LCKOUT)
#define SYSCTL0_M33NMISRCSEL_REG(base)           ((base)->M33NMISRCSEL)
#define SYSCTL0_SYSTEM_STICK_CALIB_REG(base)     ((base)->SYSTEM_STICK_CALIB)
#define SYSCTL0_SYSTEM_NSTICK_CALIB_REG(base)    ((base)->SYSTEM_NSTICK_CALIB)
#define SYSCTL0_PRODUCT_ID_REG(base)             ((base)->PRODUCT_ID)
#define SYSCTL0_SILICONREV_ID_REG(base)          ((base)->SILICONREV_ID)
#define SYSCTL0_JTAG_ID_REG(base)                ((base)->JTAG_ID)
#define SYSCTL0_NSGPIO_PSYNC_REG(base)           ((base)->NSGPIO_PSYNC)
#define SYSCTL0_SGPIO_PSYNC_REG(base)            ((base)->SGPIO_PSYNC)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_REG(base)   ((base)->AUTOCLKGATEOVERRIDE0)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_REG(base)   ((base)->AUTOCLKGATEOVERRIDE1)
#define SYSCTL0_CLKGATEOVERRIDE0_REG(base)       ((base)->CLKGATEOVERRIDE0)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_REG(base) ((base)->AHB_SRAM_ACCESS_DISABLE)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_REG(base) ((base)->AXI_SRAM_ACCESS_DISABLE)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_REG(base) ((base)->DSP_SRAM_ACCESS_DISABLE)
#define SYSCTL0_PQ_MEM_CTRL_REG(base)            ((base)->PQ_MEM_CTRL)
#define SYSCTL0_FLEXSPI0_MEM_CTRL_REG(base)      ((base)->FLEXSPI0_MEM_CTRL)
#define SYSCTL0_USBHS_MEM_CTRL_REG(base)         ((base)->USBHS_MEM_CTRL)
#define SYSCTL0_USDHC0_MEM_CTRL_REG(base)        ((base)->USDHC0_MEM_CTRL)
#define SYSCTL0_USDHC1_MEM_CTRL_REG(base)        ((base)->USDHC1_MEM_CTRL)
#define SYSCTL0_CASPER_MEM_CTRL_REG(base)        ((base)->CASPER_MEM_CTRL)
#define SYSCTL0_ROM_MEM_CTRL_REG(base)           ((base)->ROM_MEM_CTRL)
#define SYSCTL0_FLEXSPI1_MEM_CTRL_REG(base)      ((base)->FLEXSPI1_MEM_CTRL)
#define SYSCTL0_GPU_MEM_CTRL_REG(base)           ((base)->GPU_MEM_CTRL)
#define SYSCTL0_MIPI_MEM_CTRL_REG(base)          ((base)->MIPI_MEM_CTRL)
#define SYSCTL0_DCN_MEM_CTRL_REG(base)           ((base)->DCN_MEM_CTRL)
#define SYSCTL0_SMARTDMA_MEM_CTRL_REG(base)      ((base)->SMARTDMA_MEM_CTRL)
#define SYSCTL0_MIPI_DSI_CTRL_REG(base)          ((base)->MIPI_DSI_CTRL)
#define SYSCTL0_USB0CLKCTRL_REG(base)            ((base)->USB0CLKCTRL)
#define SYSCTL0_USB0CLKSTAT_REG(base)            ((base)->USB0CLKSTAT)
#define SYSCTL0_USBPHYPLL0LOCKTIMEDIV2_REG(base) ((base)->USBPHYPLL0LOCKTIMEDIV2)
#define SYSCTL0_PDSLEEPCFG0_REG(base)            ((base)->PDSLEEPCFG0)
#define SYSCTL0_PDSLEEPCFG1_REG(base)            ((base)->PDSLEEPCFG1)
#define SYSCTL0_PDSLEEPCFG2_REG(base)            ((base)->PDSLEEPCFG2)
#define SYSCTL0_PDSLEEPCFG3_REG(base)            ((base)->PDSLEEPCFG3)
#define SYSCTL0_PDRUNCFG0_REG(base)              ((base)->PDRUNCFG0)
#define SYSCTL0_PDRUNCFG1_REG(base)              ((base)->PDRUNCFG1)
#define SYSCTL0_PDRUNCFG2_REG(base)              ((base)->PDRUNCFG2)
#define SYSCTL0_PDRUNCFG3_REG(base)              ((base)->PDRUNCFG3)
#define SYSCTL0_PDRUNCFG0_SET_REG(base)          ((base)->PDRUNCFG0_SET)
#define SYSCTL0_PDRUNCFG1_SET_REG(base)          ((base)->PDRUNCFG1_SET)
#define SYSCTL0_PDRUNCFG2_SET_REG(base)          ((base)->PDRUNCFG2_SET)
#define SYSCTL0_PDRUNCFG3_SET_REG(base)          ((base)->PDRUNCFG3_SET)
#define SYSCTL0_PDRUNCFG0_CLR_REG(base)          ((base)->PDRUNCFG0_CLR)
#define SYSCTL0_PDRUNCFG1_CLR_REG(base)          ((base)->PDRUNCFG1_CLR)
#define SYSCTL0_PDRUNCFG2_CLR_REG(base)          ((base)->PDRUNCFG2_CLR)
#define SYSCTL0_PDRUNCFG3_CLR_REG(base)          ((base)->PDRUNCFG3_CLR)
#define SYSCTL0_PDWAKECFG_REG(base)              ((base)->PDWAKECFG)
#define SYSCTL0_STARTEN0_REG(base)               ((base)->STARTEN0)
#define SYSCTL0_STARTEN1_REG(base)               ((base)->STARTEN1)
#define SYSCTL0_STARTEN2_REG(base)               ((base)->STARTEN2)
#define SYSCTL0_STARTEN0_SET_REG(base)           ((base)->STARTEN0_SET)
#define SYSCTL0_STARTEN1_SET_REG(base)           ((base)->STARTEN1_SET)
#define SYSCTL0_STARTEN2_SET_REG(base)           ((base)->STARTEN2_SET)
#define SYSCTL0_STARTEN0_CLR_REG(base)           ((base)->STARTEN0_CLR)
#define SYSCTL0_STARTEN1_CLR_REG(base)           ((base)->STARTEN1_CLR)
#define SYSCTL0_STARTEN2_CLR_REG(base)           ((base)->STARTEN2_CLR)
#define SYSCTL0_HWWAKE_REG(base)                 ((base)->HWWAKE)
#define SYSCTL0_TEMPSENSORCTL_REG(base)          ((base)->TEMPSENSORCTL)
#define SYSCTL0_BOOTSTATELOCK_REG(base)          ((base)->BOOTSTATELOCK)
#define SYSCTL0_BOOTSTATESEED_REG(base,index)    ((base)->BOOTSTATESEED[index])
#define SYSCTL0_BOOTSTATEHMAC_REG(base,index)    ((base)->BOOTSTATEHMAC[index])
#define SYSCTL0_FLEXSPI0PADCTL_REG(base)         ((base)->FLEXSPI0PADCTL)
#define SYSCTL0_FLEXSPI1PADCTL_REG(base)         ((base)->FLEXSPI1PADCTL)
#define SYSCTL0_SDIO0PADCTL_REG(base)            ((base)->SDIO0PADCTL)
#define SYSCTL0_SDIO1PADCTL_REG(base)            ((base)->SDIO1PADCTL)
#define SYSCTL0_DICEHWREGN_REG(base)             ((base)->DICEHWREGN)
#define SYSCTL0_UUID_REG(base,index)             ((base)->UUID[index])
#define SYSCTL0_AESKEY_SRCSEL_REG(base)          ((base)->AESKEY_SRCSEL)
#define SYSCTL0_OTFADKEY_SRCSEL_REG(base)        ((base)->OTFADKEY_SRCSEL)
#define SYSCTL0_HASHHWKEYDISABLE_REG(base)       ((base)->HASHHWKEYDISABLE)
#define SYSCTL0_DBG_LOCKEN_REG(base)             ((base)->DBG_LOCKEN)
#define SYSCTL0_DBG_FEATURES_REG(base)           ((base)->DBG_FEATURES)
#define SYSCTL0_DBG_FEATURES_DP_REG(base)        ((base)->DBG_FEATURES_DP)
#define SYSCTL0_CS_PROTCPU0_REG(base)            ((base)->CS_PROTCPU0)
#define SYSCTL0_CS_PROTCPU1_REG(base)            ((base)->CS_PROTCPU1)
#define SYSCTL0_DBG_AUTH_SCRATCH_REG(base)       ((base)->DBG_AUTH_SCRATCH)
#define SYSCTL0_KEY_BLOCK_REG(base)              ((base)->KEY_BLOCK)

/*!
 * @}
 */ /* end of group SYSCTL0_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SYSCTL0 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SYSCTL0_Register_Masks SYSCTL0 Register Masks
 * @{
 */

/*! @name DSP_VECT_REMAP - DSP Vector Remap */
/*! @{ */
#define SYSCTL0_DSP_VECT_REMAP_DSP_VECT_REMAP_MASK (0xFFFU)
#define SYSCTL0_DSP_VECT_REMAP_DSP_VECT_REMAP_SHIFT (0U)
/*! DSP_VECT_REMAP - DSP_VECT_REMAP
 */
#define SYSCTL0_DSP_VECT_REMAP_DSP_VECT_REMAP(x) (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DSP_VECT_REMAP_DSP_VECT_REMAP_SHIFT)) & SYSCTL0_DSP_VECT_REMAP_DSP_VECT_REMAP_MASK)
#define SYSCTL0_DSP_VECT_REMAP_STATVECSELECT_MASK (0x1000U)
#define SYSCTL0_DSP_VECT_REMAP_STATVECSELECT_SHIFT (12U)
/*! @} */

/*! @name DSPSTALL - DSP Stall Control */
/*! @{ */
#define SYSCTL0_DSPSTALL_DSPSTALL_MASK           (0x1U)
#define SYSCTL0_DSPSTALL_DSPSTALL_SHIFT          (0U)
/*! @} */

/*! @name AHBMATRIXPRIOR - AHB MAX Priority */
/*! @{ */
#define SYSCTL0_AHBMATRIXPRIOR_M0_MASK           (0x3U)
#define SYSCTL0_AHBMATRIXPRIOR_M0_SHIFT          (0U)
/*! M0 - Master 0 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M0(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M0_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M0_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M1_MASK           (0xCU)
#define SYSCTL0_AHBMATRIXPRIOR_M1_SHIFT          (2U)
/*! M1 - Master 1 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M1(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M1_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M1_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M2_MASK           (0x30U)
#define SYSCTL0_AHBMATRIXPRIOR_M2_SHIFT          (4U)
/*! M2 - Master 2 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M2(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M2_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M2_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M3_MASK           (0xC0U)
#define SYSCTL0_AHBMATRIXPRIOR_M3_SHIFT          (6U)
/*! M3 - Master 3 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M3(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M3_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M3_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M4_MASK           (0x300U)
#define SYSCTL0_AHBMATRIXPRIOR_M4_SHIFT          (8U)
/*! M4 - Master 4 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M4(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M4_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M4_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M5_MASK           (0xC00U)
#define SYSCTL0_AHBMATRIXPRIOR_M5_SHIFT          (10U)
/*! M5 - Master 5 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M5(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M5_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M5_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M6_MASK           (0x3000U)
#define SYSCTL0_AHBMATRIXPRIOR_M6_SHIFT          (12U)
/*! M6 - Master 6 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M6(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M6_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M6_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M7_MASK           (0xC000U)
#define SYSCTL0_AHBMATRIXPRIOR_M7_SHIFT          (14U)
/*! M7 - Master 7 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M7(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M7_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M7_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M8_MASK           (0x30000U)
#define SYSCTL0_AHBMATRIXPRIOR_M8_SHIFT          (16U)
/*! M8 - Master 8 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M8(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M8_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M8_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M9_MASK           (0xC0000U)
#define SYSCTL0_AHBMATRIXPRIOR_M9_SHIFT          (18U)
/*! M9 - Master 9 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M9(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M9_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M9_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M10_MASK          (0x300000U)
#define SYSCTL0_AHBMATRIXPRIOR_M10_SHIFT         (20U)
/*! M10 - Master 10 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M10(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M10_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M10_MASK)
#define SYSCTL0_AHBMATRIXPRIOR_M11_MASK          (0xC00000U)
#define SYSCTL0_AHBMATRIXPRIOR_M11_SHIFT         (22U)
/*! M11 - Master 10 Priority
 */
#define SYSCTL0_AHBMATRIXPRIOR_M11(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AHBMATRIXPRIOR_M11_SHIFT)) & SYSCTL0_AHBMATRIXPRIOR_M11_MASK)
/*! @} */

/*! @name AHBBRIDGEBUFFER - AHB Buffer */
/*! @{ */
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE0_MASK      (0x1U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE0_SHIFT     (0U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE1_MASK      (0x2U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE1_SHIFT     (1U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE2_MASK      (0x4U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE2_SHIFT     (2U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE3_MASK      (0x8U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE3_SHIFT     (3U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE4_MASK      (0x10U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE4_SHIFT     (4U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE5_MASK      (0x20U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE5_SHIFT     (5U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE6_MASK      (0x40U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE6_SHIFT     (6U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE7_MASK      (0x80U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE7_SHIFT     (7U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE8_MASK      (0x100U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE8_SHIFT     (8U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE9_MASK      (0x200U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE9_SHIFT     (9U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE10_MASK     (0x400U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE10_SHIFT    (10U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE11_MASK     (0x800U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE11_SHIFT    (11U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE12_MASK     (0x1000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE12_SHIFT    (12U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE13_MASK     (0x2000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE13_SHIFT    (13U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE14_MASK     (0x4000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE14_SHIFT    (14U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE15_MASK     (0x8000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE15_SHIFT    (15U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE16_MASK     (0x10000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE16_SHIFT    (16U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE17_MASK     (0x20000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE17_SHIFT    (17U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE18_MASK     (0x40000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE18_SHIFT    (18U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE19_MASK     (0x80000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE19_SHIFT    (19U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE20_MASK     (0x100000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE20_SHIFT    (20U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE21_MASK     (0x200000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE21_SHIFT    (21U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE22_MASK     (0x400000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE22_SHIFT    (22U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE23_MASK     (0x800000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE23_SHIFT    (23U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE24_MASK     (0x1000000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE24_SHIFT    (24U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE25_MASK     (0x2000000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE25_SHIFT    (25U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE26_MASK     (0x4000000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE26_SHIFT    (26U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE27_MASK     (0x8000000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE27_SHIFT    (27U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE28_MASK     (0x10000000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE28_SHIFT    (28U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE29_MASK     (0x20000000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE29_SHIFT    (29U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE30_MASK     (0x40000000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE30_SHIFT    (30U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE31_MASK     (0x80000000U)
#define SYSCTL0_AHBBRIDGEBUFFER_SLAVE31_SHIFT    (31U)
/*! @} */

/* The count of SYSCTL0_AHBBRIDGEBUFFER */
#define SYSCTL0_AHBBRIDGEBUFFER_COUNT            (2U)

/*! @name BOOTROM_LCKOUT - BOOT ROM lockout */
/*! @{ */
#define SYSCTL0_BOOTROM_LCKOUT_READ_LCKOUT_SPACE_MASK (0x1FFFFU)
#define SYSCTL0_BOOTROM_LCKOUT_READ_LCKOUT_SPACE_SHIFT (0U)
/*! READ_LCKOUT_SPACE - Read Lockout
 */
#define SYSCTL0_BOOTROM_LCKOUT_READ_LCKOUT_SPACE(x) (((uint32_t)(((uint32_t)(x)) << SYSCTL0_BOOTROM_LCKOUT_READ_LCKOUT_SPACE_SHIFT)) & SYSCTL0_BOOTROM_LCKOUT_READ_LCKOUT_SPACE_MASK)
#define SYSCTL0_BOOTROM_LCKOUT_WRITE_LOCK_MASK   (0xC0000000U)
#define SYSCTL0_BOOTROM_LCKOUT_WRITE_LOCK_SHIFT  (30U)
/*! WRITE_LOCK - Self Write Disable
 *  0b00..Write disable
 *  0b01..Write disable
 *  0b11..Write disable
 *  0b10..Write enable
 */
#define SYSCTL0_BOOTROM_LCKOUT_WRITE_LOCK(x)     (((uint32_t)(((uint32_t)(x)) << SYSCTL0_BOOTROM_LCKOUT_WRITE_LOCK_SHIFT)) & SYSCTL0_BOOTROM_LCKOUT_WRITE_LOCK_MASK)
/*! @} */

/*! @name M33NMISRCSEL - M33 NMI source selection */
/*! @{ */
#define SYSCTL0_M33NMISRCSEL_NMISRCSEL_MASK      (0x7FU)
#define SYSCTL0_M33NMISRCSEL_NMISRCSEL_SHIFT     (0U)
/*! NMISRCSEL - Selects one of the M33 interrupt sources as the NMI source interrupt.
 */
#define SYSCTL0_M33NMISRCSEL_NMISRCSEL(x)        (((uint32_t)(((uint32_t)(x)) << SYSCTL0_M33NMISRCSEL_NMISRCSEL_SHIFT)) & SYSCTL0_M33NMISRCSEL_NMISRCSEL_MASK)
#define SYSCTL0_M33NMISRCSEL_NMI_ENABLE_MASK     (0x80000000U)
#define SYSCTL0_M33NMISRCSEL_NMI_ENABLE_SHIFT    (31U)
/*! @} */

/*! @name SYSTEM_STICK_CALIB - System secure tick calibration */
/*! @{ */
#define SYSCTL0_SYSTEM_STICK_CALIB_SYSTEM_STICK_CALIB_MASK (0x7FFFFFFU)
#define SYSCTL0_SYSTEM_STICK_CALIB_SYSTEM_STICK_CALIB_SHIFT (0U)
/*! SYSTEM_STICK_CALIB - M33 secure tick calibration
 */
#define SYSCTL0_SYSTEM_STICK_CALIB_SYSTEM_STICK_CALIB(x) (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SYSTEM_STICK_CALIB_SYSTEM_STICK_CALIB_SHIFT)) & SYSCTL0_SYSTEM_STICK_CALIB_SYSTEM_STICK_CALIB_MASK)
/*! @} */

/*! @name SYSTEM_NSTICK_CALIB - System non-secure tick calibration */
/*! @{ */
#define SYSCTL0_SYSTEM_NSTICK_CALIB_SYSTEM_NSTICK_CALIB_MASK (0x7FFFFFFU)
#define SYSCTL0_SYSTEM_NSTICK_CALIB_SYSTEM_NSTICK_CALIB_SHIFT (0U)
/*! SYSTEM_NSTICK_CALIB - M33 non secure tick calibration
 */
#define SYSCTL0_SYSTEM_NSTICK_CALIB_SYSTEM_NSTICK_CALIB(x) (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SYSTEM_NSTICK_CALIB_SYSTEM_NSTICK_CALIB_SHIFT)) & SYSCTL0_SYSTEM_NSTICK_CALIB_SYSTEM_NSTICK_CALIB_MASK)
/*! @} */

/*! @name PRODUCT_ID - Product ID */
/*! @{ */
#define SYSCTL0_PRODUCT_ID_PRODUCT_ID_MASK       (0xFFFFU)
#define SYSCTL0_PRODUCT_ID_PRODUCT_ID_SHIFT      (0U)
/*! PRODUCT_ID - PRODUCT ID
 */
#define SYSCTL0_PRODUCT_ID_PRODUCT_ID(x)         (((uint32_t)(((uint32_t)(x)) << SYSCTL0_PRODUCT_ID_PRODUCT_ID_SHIFT)) & SYSCTL0_PRODUCT_ID_PRODUCT_ID_MASK)
/*! @} */

/*! @name SILICONREV_ID - Silicon Revision ID */
/*! @{ */
#define SYSCTL0_SILICONREV_ID_MINOR_MASK         (0xFU)
#define SYSCTL0_SILICONREV_ID_MINOR_SHIFT        (0U)
/*! MINOR - MINOR
 */
#define SYSCTL0_SILICONREV_ID_MINOR(x)           (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SILICONREV_ID_MINOR_SHIFT)) & SYSCTL0_SILICONREV_ID_MINOR_MASK)
#define SYSCTL0_SILICONREV_ID_MAJOR_MASK         (0xF0000U)
#define SYSCTL0_SILICONREV_ID_MAJOR_SHIFT        (16U)
/*! MAJOR - MAJOR
 */
#define SYSCTL0_SILICONREV_ID_MAJOR(x)           (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SILICONREV_ID_MAJOR_SHIFT)) & SYSCTL0_SILICONREV_ID_MAJOR_MASK)
/*! @} */

/*! @name JTAG_ID - JTAG ID */
/*! @{ */
#define SYSCTL0_JTAG_ID_FIXBIT_MASK              (0x1U)
#define SYSCTL0_JTAG_ID_FIXBIT_SHIFT             (0U)
#define SYSCTL0_JTAG_ID_MANU_MASK                (0xFFEU)
#define SYSCTL0_JTAG_ID_MANU_SHIFT               (1U)
/*! MANU - JTAG ID Manufacturer
 */
#define SYSCTL0_JTAG_ID_MANU(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCTL0_JTAG_ID_MANU_SHIFT)) & SYSCTL0_JTAG_ID_MANU_MASK)
#define SYSCTL0_JTAG_ID_PRODUCT_ID_MASK          (0xFFFF000U)
#define SYSCTL0_JTAG_ID_PRODUCT_ID_SHIFT         (12U)
/*! PRODUCT_ID - JTAG ID Product ID as defined in the Product ID register
 */
#define SYSCTL0_JTAG_ID_PRODUCT_ID(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_JTAG_ID_PRODUCT_ID_SHIFT)) & SYSCTL0_JTAG_ID_PRODUCT_ID_MASK)
#define SYSCTL0_JTAG_ID_CHIPREV_MASK             (0xF0000000U)
#define SYSCTL0_JTAG_ID_CHIPREV_SHIFT            (28U)
/*! CHIPREV - JTAG ID 4-Bit Chip Silicon Revision
 */
#define SYSCTL0_JTAG_ID_CHIPREV(x)               (((uint32_t)(((uint32_t)(x)) << SYSCTL0_JTAG_ID_CHIPREV_SHIFT)) & SYSCTL0_JTAG_ID_CHIPREV_MASK)
/*! @} */

/*! @name NSGPIO_PSYNC - Non-secure GPIO PSYNC */
/*! @{ */
#define SYSCTL0_NSGPIO_PSYNC_PSYNC_MASK          (0x1U)
#define SYSCTL0_NSGPIO_PSYNC_PSYNC_SHIFT         (0U)
/*! @} */

/*! @name SGPIO_PSYNC - Secure GPIO PSYNC */
/*! @{ */
#define SYSCTL0_SGPIO_PSYNC_PSYNC_MASK           (0x1U)
#define SYSCTL0_SGPIO_PSYNC_PSYNC_SHIFT          (0U)
/*! @} */

/*! @name AUTOCLKGATEOVERRIDE0 - Auto clock gate override 0 */
/*! @{ */
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_AHB2APB0_MASK (0x1U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_AHB2APB0_SHIFT (0U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_AHB2APB1_MASK (0x2U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_AHB2APB1_SHIFT (1U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_CRC_ENGINE_MASK (0x4U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_CRC_ENGINE_SHIFT (2U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_CASPER_MASK (0x8U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_CASPER_SHIFT (3U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_DMAC0_MASK  (0x10U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_DMAC0_SHIFT (4U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_DMAC1_MASK  (0x20U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE0_DMAC1_SHIFT (5U)
/*! @} */

/*! @name AUTOCLKGATEOVERRIDE1 - Auto clock gate override 1 */
/*! @{ */
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM0_IF_MASK (0x1U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM0_IF_SHIFT (0U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM1_IF_MASK (0x2U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM1_IF_SHIFT (1U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM2_IF_MASK (0x4U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM2_IF_SHIFT (2U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM3_IF_MASK (0x8U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM3_IF_SHIFT (3U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM4_IF_MASK (0x10U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM4_IF_SHIFT (4U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM5_IF_MASK (0x20U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM5_IF_SHIFT (5U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM6_IF_MASK (0x40U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM6_IF_SHIFT (6U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM7_IF_MASK (0x80U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM7_IF_SHIFT (7U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM8_IF_MASK (0x100U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM8_IF_SHIFT (8U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM9_IF_MASK (0x200U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM9_IF_SHIFT (9U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM10_IF_MASK (0x400U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM10_IF_SHIFT (10U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM11_IF_MASK (0x800U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM11_IF_SHIFT (11U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM12_IF_MASK (0x1000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM12_IF_SHIFT (12U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM13_IF_MASK (0x2000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM13_IF_SHIFT (13U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM14_IF_MASK (0x4000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM14_IF_SHIFT (14U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM15_IF_MASK (0x8000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM15_IF_SHIFT (15U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM16_IF_MASK (0x10000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM16_IF_SHIFT (16U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM17_IF_MASK (0x20000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM17_IF_SHIFT (17U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM18_IF_MASK (0x40000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM18_IF_SHIFT (18U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM19_IF_MASK (0x80000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM19_IF_SHIFT (19U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM20_IF_MASK (0x100000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM20_IF_SHIFT (20U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM21_IF_MASK (0x200000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM21_IF_SHIFT (21U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM22_IF_MASK (0x400000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM22_IF_SHIFT (22U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM23_IF_MASK (0x800000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM23_IF_SHIFT (23U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM24_IF_MASK (0x1000000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM24_IF_SHIFT (24U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM25_IF_MASK (0x2000000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM25_IF_SHIFT (25U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM26_IF_MASK (0x4000000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM26_IF_SHIFT (26U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM27_IF_MASK (0x8000000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM27_IF_SHIFT (27U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM28_IF_MASK (0x10000000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM28_IF_SHIFT (28U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM29_IF_MASK (0x20000000U)
#define SYSCTL0_AUTOCLKGATEOVERRIDE1_SRAM29_IF_SHIFT (29U)
/*! @} */

/*! @name CLKGATEOVERRIDE0 - Clock gate override 0 */
/*! @{ */
#define SYSCTL0_CLKGATEOVERRIDE0_SDIO0_MASK      (0x1U)
#define SYSCTL0_CLKGATEOVERRIDE0_SDIO0_SHIFT     (0U)
#define SYSCTL0_CLKGATEOVERRIDE0_SDIO1_MASK      (0x2U)
#define SYSCTL0_CLKGATEOVERRIDE0_SDIO1_SHIFT     (1U)
#define SYSCTL0_CLKGATEOVERRIDE0_USBPHY_MASK     (0x4U)
#define SYSCTL0_CLKGATEOVERRIDE0_USBPHY_SHIFT    (2U)
#define SYSCTL0_CLKGATEOVERRIDE0_ADC_MASK        (0x8U)
#define SYSCTL0_CLKGATEOVERRIDE0_ADC_SHIFT       (3U)
#define SYSCTL0_CLKGATEOVERRIDE0_MU_MASK         (0x10U)
#define SYSCTL0_CLKGATEOVERRIDE0_MU_SHIFT        (4U)
#define SYSCTL0_CLKGATEOVERRIDE0_ACMP_MASK       (0x20U)
#define SYSCTL0_CLKGATEOVERRIDE0_ACMP_SHIFT      (5U)
#define SYSCTL0_CLKGATEOVERRIDE0_PMC_MASK        (0x40U)
#define SYSCTL0_CLKGATEOVERRIDE0_PMC_SHIFT       (6U)
/*! @} */

/*! @name AHB_SRAM_ACCESS_DISABLE - AHB SRAM access disable */
/*! @{ */
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM00_IF_MASK (0x1U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM00_IF_SHIFT (0U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM01_IF_MASK (0x2U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM01_IF_SHIFT (1U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM02_IF_MASK (0x4U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM02_IF_SHIFT (2U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM03_IF_MASK (0x8U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM03_IF_SHIFT (3U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM04_IF_MASK (0x10U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM04_IF_SHIFT (4U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM05_IF_MASK (0x20U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM05_IF_SHIFT (5U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM06_IF_MASK (0x40U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM06_IF_SHIFT (6U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM07_IF_MASK (0x80U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM07_IF_SHIFT (7U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM08_IF_MASK (0x100U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM08_IF_SHIFT (8U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM09_IF_MASK (0x200U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM09_IF_SHIFT (9U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM010_IF_MASK (0x400U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM010_IF_SHIFT (10U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM011_IF_MASK (0x800U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM011_IF_SHIFT (11U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM012_IF_MASK (0x1000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM012_IF_SHIFT (12U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM013_IF_MASK (0x2000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM013_IF_SHIFT (13U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM014_IF_MASK (0x4000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM014_IF_SHIFT (14U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM015_IF_MASK (0x8000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM015_IF_SHIFT (15U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM016_IF_MASK (0x10000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM016_IF_SHIFT (16U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM017_IF_MASK (0x20000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM017_IF_SHIFT (17U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM018_IF_MASK (0x40000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM018_IF_SHIFT (18U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM019_IF_MASK (0x80000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM019_IF_SHIFT (19U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM020_IF_MASK (0x100000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM020_IF_SHIFT (20U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM021_IF_MASK (0x200000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM021_IF_SHIFT (21U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM022_IF_MASK (0x400000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM022_IF_SHIFT (22U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM023_IF_MASK (0x800000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM023_IF_SHIFT (23U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM024_IF_MASK (0x1000000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM024_IF_SHIFT (24U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM025_IF_MASK (0x2000000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM025_IF_SHIFT (25U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM026_IF_MASK (0x4000000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM026_IF_SHIFT (26U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM027_IF_MASK (0x8000000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM027_IF_SHIFT (27U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM028_IF_MASK (0x10000000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM028_IF_SHIFT (28U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM029_IF_MASK (0x20000000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM029_IF_SHIFT (29U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM030_IF_MASK (0x40000000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM030_IF_SHIFT (30U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM031_IF_MASK (0x80000000U)
#define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_SRAM031_IF_SHIFT (31U)
/*! @} */

/*! @name AXI_SRAM_ACCESS_DISABLE - AXI SRAM access disable */
/*! @{ */
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM00_IF_MASK (0x1U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM00_IF_SHIFT (0U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM01_IF_MASK (0x2U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM01_IF_SHIFT (1U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM02_IF_MASK (0x4U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM02_IF_SHIFT (2U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM03_IF_MASK (0x8U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM03_IF_SHIFT (3U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM04_IF_MASK (0x10U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM04_IF_SHIFT (4U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM05_IF_MASK (0x20U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM05_IF_SHIFT (5U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM06_IF_MASK (0x40U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM06_IF_SHIFT (6U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM07_IF_MASK (0x80U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM07_IF_SHIFT (7U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM08_IF_MASK (0x100U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM08_IF_SHIFT (8U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM09_IF_MASK (0x200U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM09_IF_SHIFT (9U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM010_IF_MASK (0x400U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM010_IF_SHIFT (10U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM011_IF_MASK (0x800U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM011_IF_SHIFT (11U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM012_IF_MASK (0x1000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM012_IF_SHIFT (12U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM013_IF_MASK (0x2000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM013_IF_SHIFT (13U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM014_IF_MASK (0x4000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM014_IF_SHIFT (14U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM015_IF_MASK (0x8000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM015_IF_SHIFT (15U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM016_IF_MASK (0x10000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM016_IF_SHIFT (16U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM017_IF_MASK (0x20000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM017_IF_SHIFT (17U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM018_IF_MASK (0x40000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM018_IF_SHIFT (18U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM019_IF_MASK (0x80000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM019_IF_SHIFT (19U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM020_IF_MASK (0x100000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM020_IF_SHIFT (20U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM021_IF_MASK (0x200000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM021_IF_SHIFT (21U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM022_IF_MASK (0x400000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM022_IF_SHIFT (22U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM023_IF_MASK (0x800000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM023_IF_SHIFT (23U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM024_IF_MASK (0x1000000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM024_IF_SHIFT (24U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM025_IF_MASK (0x2000000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM025_IF_SHIFT (25U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM026_IF_MASK (0x4000000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM026_IF_SHIFT (26U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM027_IF_MASK (0x8000000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM027_IF_SHIFT (27U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM028_IF_MASK (0x10000000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM028_IF_SHIFT (28U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM029_IF_MASK (0x20000000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM029_IF_SHIFT (29U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM030_IF_MASK (0x40000000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM030_IF_SHIFT (30U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM031_IF_MASK (0x80000000U)
#define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_SRAM031_IF_SHIFT (31U)
/*! @} */

/*! @name DSP_SRAM_ACCESS_DISABLE - DSP SRAM access disable */
/*! @{ */
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM0_IF_MASK (0x1U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM0_IF_SHIFT (0U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM1_IF_MASK (0x2U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM1_IF_SHIFT (1U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM2_IF_MASK (0x4U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM2_IF_SHIFT (2U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM3_IF_MASK (0x8U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM3_IF_SHIFT (3U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM4_IF_MASK (0x10U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM4_IF_SHIFT (4U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM5_IF_MASK (0x20U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM5_IF_SHIFT (5U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM6_IF_MASK (0x40U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM6_IF_SHIFT (6U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM7_IF_MASK (0x80U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM7_IF_SHIFT (7U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM8_IF_MASK (0x100U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM8_IF_SHIFT (8U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM9_IF_MASK (0x200U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM9_IF_SHIFT (9U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM10_IF_MASK (0x400U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM10_IF_SHIFT (10U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM11_IF_MASK (0x800U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM11_IF_SHIFT (11U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM12_IF_MASK (0x1000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM12_IF_SHIFT (12U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM13_IF_MASK (0x2000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM13_IF_SHIFT (13U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM14_IF_MASK (0x4000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM14_IF_SHIFT (14U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM15_IF_MASK (0x8000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM15_IF_SHIFT (15U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM16_IF_MASK (0x10000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM16_IF_SHIFT (16U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM17_IF_MASK (0x20000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM17_IF_SHIFT (17U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM18_IF_MASK (0x40000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM18_IF_SHIFT (18U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM19_IF_MASK (0x80000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM19_IF_SHIFT (19U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM20_IF_MASK (0x100000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM20_IF_SHIFT (20U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM21_IF_MASK (0x200000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM21_IF_SHIFT (21U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM22_IF_MASK (0x400000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM22_IF_SHIFT (22U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM23_IF_MASK (0x800000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM23_IF_SHIFT (23U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM24_IF_MASK (0x1000000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM24_IF_SHIFT (24U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM25_IF_MASK (0x2000000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM25_IF_SHIFT (25U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM26_IF_MASK (0x4000000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM26_IF_SHIFT (26U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM27_IF_MASK (0x8000000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM27_IF_SHIFT (27U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM28_IF_MASK (0x10000000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM28_IF_SHIFT (28U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM29_IF_MASK (0x20000000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM29_IF_SHIFT (29U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM30_IF_MASK (0x40000000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM30_IF_SHIFT (30U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM31_IF_MASK (0x80000000U)
#define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_SRAM31_IF_SHIFT (31U)
/*! @} */

/*! @name PQ_MEM_CTRL - Power-Quad Memory Control */
/*! @{ */
#define SYSCTL0_PQ_MEM_CTRL_SRAM_IG_MASK         (0x1U)
#define SYSCTL0_PQ_MEM_CTRL_SRAM_IG_SHIFT        (0U)
#define SYSCTL0_PQ_MEM_CTRL_SRAM_STDBY_MASK      (0x2U)
#define SYSCTL0_PQ_MEM_CTRL_SRAM_STDBY_SHIFT     (1U)
/*! @} */

/*! @name FLEXSPI0_MEM_CTRL - FlexSPI0 Memory Control */
/*! @{ */
#define SYSCTL0_FLEXSPI0_MEM_CTRL_MEM_RIG_MASK   (0x1U)
#define SYSCTL0_FLEXSPI0_MEM_CTRL_MEM_RIG_SHIFT  (0U)
#define SYSCTL0_FLEXSPI0_MEM_CTRL_MEM_WIG_MASK   (0x2U)
#define SYSCTL0_FLEXSPI0_MEM_CTRL_MEM_WIG_SHIFT  (1U)
#define SYSCTL0_FLEXSPI0_MEM_CTRL_MEM_STDBY_MASK (0x4U)
#define SYSCTL0_FLEXSPI0_MEM_CTRL_MEM_STDBY_SHIFT (2U)
/*! @} */

/*! @name USBHS_MEM_CTRL - USBHS Memory Control */
/*! @{ */
#define SYSCTL0_USBHS_MEM_CTRL_MEM_IG_MASK       (0x1U)
#define SYSCTL0_USBHS_MEM_CTRL_MEM_IG_SHIFT      (0U)
#define SYSCTL0_USBHS_MEM_CTRL_MEM_STDBY_MASK    (0x2U)
#define SYSCTL0_USBHS_MEM_CTRL_MEM_STDBY_SHIFT   (1U)
/*! @} */

/*! @name USDHC0_MEM_CTRL - USDHC0 Memory Control */
/*! @{ */
#define SYSCTL0_USDHC0_MEM_CTRL_MEM_RIG_MASK     (0x1U)
#define SYSCTL0_USDHC0_MEM_CTRL_MEM_RIG_SHIFT    (0U)
#define SYSCTL0_USDHC0_MEM_CTRL_MEM_WIG_MASK     (0x2U)
#define SYSCTL0_USDHC0_MEM_CTRL_MEM_WIG_SHIFT    (1U)
#define SYSCTL0_USDHC0_MEM_CTRL_MEM_STDBY_MASK   (0x4U)
#define SYSCTL0_USDHC0_MEM_CTRL_MEM_STDBY_SHIFT  (2U)
/*! @} */

/*! @name USDHC1_MEM_CTRL - USDHC1 Memory Control */
/*! @{ */
#define SYSCTL0_USDHC1_MEM_CTRL_MEM_RIG_MASK     (0x1U)
#define SYSCTL0_USDHC1_MEM_CTRL_MEM_RIG_SHIFT    (0U)
#define SYSCTL0_USDHC1_MEM_CTRL_MEM_WIG_MASK     (0x2U)
#define SYSCTL0_USDHC1_MEM_CTRL_MEM_WIG_SHIFT    (1U)
#define SYSCTL0_USDHC1_MEM_CTRL_MEM_STDBY_MASK   (0x4U)
#define SYSCTL0_USDHC1_MEM_CTRL_MEM_STDBY_SHIFT  (2U)
/*! @} */

/*! @name CASPER_MEM_CTRL - CASPER Memory Control */
/*! @{ */
#define SYSCTL0_CASPER_MEM_CTRL_MEM_IG_MASK      (0x1U)
#define SYSCTL0_CASPER_MEM_CTRL_MEM_IG_SHIFT     (0U)
#define SYSCTL0_CASPER_MEM_CTRL_MEM_STDBY_MASK   (0x2U)
#define SYSCTL0_CASPER_MEM_CTRL_MEM_STDBY_SHIFT  (1U)
/*! @} */

/*! @name ROM_MEM_CTRL - ROM Memory Control */
/*! @{ */
#define SYSCTL0_ROM_MEM_CTRL_MEM_IG_MASK         (0x1U)
#define SYSCTL0_ROM_MEM_CTRL_MEM_IG_SHIFT        (0U)
#define SYSCTL0_ROM_MEM_CTRL_MEM_STDBY_MASK      (0x2U)
#define SYSCTL0_ROM_MEM_CTRL_MEM_STDBY_SHIFT     (1U)
#define SYSCTL0_ROM_MEM_CTRL_MEM_LS_MASK         (0x4U)
#define SYSCTL0_ROM_MEM_CTRL_MEM_LS_SHIFT        (2U)
/*! @} */

/*! @name FLEXSPI1_MEM_CTRL - FlexSPI1 Memory Control */
/*! @{ */
#define SYSCTL0_FLEXSPI1_MEM_CTRL_MEM_RIG_MASK   (0x1U)
#define SYSCTL0_FLEXSPI1_MEM_CTRL_MEM_RIG_SHIFT  (0U)
#define SYSCTL0_FLEXSPI1_MEM_CTRL_MEM_WIG_MASK   (0x2U)
#define SYSCTL0_FLEXSPI1_MEM_CTRL_MEM_WIG_SHIFT  (1U)
#define SYSCTL0_FLEXSPI1_MEM_CTRL_MEM_STDBY_MASK (0x4U)
#define SYSCTL0_FLEXSPI1_MEM_CTRL_MEM_STDBY_SHIFT (2U)
/*! @} */

/*! @name GPU_MEM_CTRL - GPU Memory Control */
/*! @{ */
#define SYSCTL0_GPU_MEM_CTRL_MEM_RIG_MASK        (0x1U)
#define SYSCTL0_GPU_MEM_CTRL_MEM_RIG_SHIFT       (0U)
#define SYSCTL0_GPU_MEM_CTRL_MEM_WIG_MASK        (0x2U)
#define SYSCTL0_GPU_MEM_CTRL_MEM_WIG_SHIFT       (1U)
#define SYSCTL0_GPU_MEM_CTRL_MEM_STDBY_MASK      (0x4U)
#define SYSCTL0_GPU_MEM_CTRL_MEM_STDBY_SHIFT     (2U)
/*! @} */

/*! @name MIPI_MEM_CTRL - MIPI Memory Control */
/*! @{ */
#define SYSCTL0_MIPI_MEM_CTRL_MEM_RIG_MASK       (0x1U)
#define SYSCTL0_MIPI_MEM_CTRL_MEM_RIG_SHIFT      (0U)
#define SYSCTL0_MIPI_MEM_CTRL_MEM_WIG_MASK       (0x2U)
#define SYSCTL0_MIPI_MEM_CTRL_MEM_WIG_SHIFT      (1U)
#define SYSCTL0_MIPI_MEM_CTRL_MEM_STDBY_MASK     (0x4U)
#define SYSCTL0_MIPI_MEM_CTRL_MEM_STDBY_SHIFT    (2U)
/*! @} */

/*! @name DCN_MEM_CTRL - LCDIF Memory Control */
/*! @{ */
#define SYSCTL0_DCN_MEM_CTRL_MEM_RIG_MASK        (0x1U)
#define SYSCTL0_DCN_MEM_CTRL_MEM_RIG_SHIFT       (0U)
#define SYSCTL0_DCN_MEM_CTRL_MEM_WIG_MASK        (0x2U)
#define SYSCTL0_DCN_MEM_CTRL_MEM_WIG_SHIFT       (1U)
#define SYSCTL0_DCN_MEM_CTRL_MEM_STDBY_MASK      (0x4U)
#define SYSCTL0_DCN_MEM_CTRL_MEM_STDBY_SHIFT     (2U)
/*! @} */

/*! @name SMARTDMA_MEM_CTRL - SMARTDMA Memory Control */
/*! @{ */
#define SYSCTL0_SMARTDMA_MEM_CTRL_MEM_IG_MASK    (0x1U)
#define SYSCTL0_SMARTDMA_MEM_CTRL_MEM_IG_SHIFT   (0U)
#define SYSCTL0_SMARTDMA_MEM_CTRL_MEM_STDBY_MASK (0x2U)
#define SYSCTL0_SMARTDMA_MEM_CTRL_MEM_STDBY_SHIFT (1U)
/*! @} */

/*! @name MIPI_DSI_CTRL - MIPI DSI Control */
/*! @{ */
#define SYSCTL0_MIPI_DSI_CTRL_DSI_SD_MASK        (0x1U)
#define SYSCTL0_MIPI_DSI_CTRL_DSI_SD_SHIFT       (0U)
#define SYSCTL0_MIPI_DSI_CTRL_DSI_CM_MASK        (0x2U)
#define SYSCTL0_MIPI_DSI_CTRL_DSI_CM_SHIFT       (1U)
#define SYSCTL0_MIPI_DSI_CTRL_DSI_TX_ACTIVE_MASK (0x4U)
#define SYSCTL0_MIPI_DSI_CTRL_DSI_TX_ACTIVE_SHIFT (2U)
/*! @} */

/*! @name USB0CLKCTRL - USB Clock Control */
/*! @{ */
#define SYSCTL0_USB0CLKCTRL_AP_FS_DEV_CLK_MASK   (0x1U)
#define SYSCTL0_USB0CLKCTRL_AP_FS_DEV_CLK_SHIFT  (0U)
#define SYSCTL0_USB0CLKCTRL_POL_FS_DEV_CLK_MASK  (0x2U)
#define SYSCTL0_USB0CLKCTRL_POL_FS_DEV_CLK_SHIFT (1U)
#define SYSCTL0_USB0CLKCTRL_AP_FS_HOST_CLK_MASK  (0x4U)
#define SYSCTL0_USB0CLKCTRL_AP_FS_HOST_CLK_SHIFT (2U)
#define SYSCTL0_USB0CLKCTRL_POL_FS_HOST_CLK_MASK (0x8U)
#define SYSCTL0_USB0CLKCTRL_POL_FS_HOST_CLK_SHIFT (3U)
#define SYSCTL0_USB0CLKCTRL_HS_DEV_WAKEUP_N_MASK (0x10U)
#define SYSCTL0_USB0CLKCTRL_HS_DEV_WAKEUP_N_SHIFT (4U)
/*! @} */

/*! @name USB0CLKSTAT - USB Clock Status */
/*! @{ */
#define SYSCTL0_USB0CLKSTAT_DEV_NEED_CLKST_MASK  (0x1U)
#define SYSCTL0_USB0CLKSTAT_DEV_NEED_CLKST_SHIFT (0U)
#define SYSCTL0_USB0CLKSTAT_HOST_NEED_CLKST_MASK (0x2U)
#define SYSCTL0_USB0CLKSTAT_HOST_NEED_CLKST_SHIFT (1U)
/*! @} */

/*! @name USBPHYPLL0LOCKTIMEDIV2 - USB PHY PLL0 lock time division */
/*! @{ */
#define SYSCTL0_USBPHYPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_MASK (0xFFFFU)
#define SYSCTL0_USBPHYPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_SHIFT (0U)
/*! LOCKTIMEDIV2 - USBPHYPLL0 Lock Time
 */
#define SYSCTL0_USBPHYPLL0LOCKTIMEDIV2_LOCKTIMEDIV2(x) (((uint32_t)(((uint32_t)(x)) << SYSCTL0_USBPHYPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_SHIFT)) & SYSCTL0_USBPHYPLL0LOCKTIMEDIV2_LOCKTIMEDIV2_MASK)
/*! @} */

/*! @name PDSLEEPCFG0 - Sleep configuration 0 */
/*! @{ */
#define SYSCTL0_PDSLEEPCFG0_MAINCLK_SHUTOFF_MASK (0x1U)
#define SYSCTL0_PDSLEEPCFG0_MAINCLK_SHUTOFF_SHIFT (0U)
#define SYSCTL0_PDSLEEPCFG0_PMIC_MODE0_MASK      (0x2U)
#define SYSCTL0_PDSLEEPCFG0_PMIC_MODE0_SHIFT     (1U)
#define SYSCTL0_PDSLEEPCFG0_PMIC_MODE1_MASK      (0x4U)
#define SYSCTL0_PDSLEEPCFG0_PMIC_MODE1_SHIFT     (2U)
#define SYSCTL0_PDSLEEPCFG0_DEEP_PD_MASK         (0x8U)
#define SYSCTL0_PDSLEEPCFG0_DEEP_PD_SHIFT        (3U)
#define SYSCTL0_PDSLEEPCFG0_VDDCOREREG_LP_MASK   (0x10U)
#define SYSCTL0_PDSLEEPCFG0_VDDCOREREG_LP_SHIFT  (4U)
#define SYSCTL0_PDSLEEPCFG0_PMCREF_LP_MASK       (0x40U)
#define SYSCTL0_PDSLEEPCFG0_PMCREF_LP_SHIFT      (6U)
#define SYSCTL0_PDSLEEPCFG0_HVD1V8_PD_MASK       (0x80U)
#define SYSCTL0_PDSLEEPCFG0_HVD1V8_PD_SHIFT      (7U)
#define SYSCTL0_PDSLEEPCFG0_PORCORE_LP_MASK      (0x100U)
#define SYSCTL0_PDSLEEPCFG0_PORCORE_LP_SHIFT     (8U)
#define SYSCTL0_PDSLEEPCFG0_LVDCORE_LP_MASK      (0x200U)
#define SYSCTL0_PDSLEEPCFG0_LVDCORE_LP_SHIFT     (9U)
#define SYSCTL0_PDSLEEPCFG0_HVDCORE_PD_MASK      (0x400U)
#define SYSCTL0_PDSLEEPCFG0_HVDCORE_PD_SHIFT     (10U)
#define SYSCTL0_PDSLEEPCFG0_RBB_PD_MASK          (0x800U)
#define SYSCTL0_PDSLEEPCFG0_RBB_PD_SHIFT         (11U)
#define SYSCTL0_PDSLEEPCFG0_FBB_PD_MASK          (0x1000U)
#define SYSCTL0_PDSLEEPCFG0_FBB_PD_SHIFT         (12U)
#define SYSCTL0_PDSLEEPCFG0_SYSXTAL_PD_MASK      (0x2000U)
#define SYSCTL0_PDSLEEPCFG0_SYSXTAL_PD_SHIFT     (13U)
#define SYSCTL0_PDSLEEPCFG0_LPOSC_PD_MASK        (0x4000U)
#define SYSCTL0_PDSLEEPCFG0_LPOSC_PD_SHIFT       (14U)
#define SYSCTL0_PDSLEEPCFG0_RBBSRAM_PD_MASK      (0x8000U)
#define SYSCTL0_PDSLEEPCFG0_RBBSRAM_PD_SHIFT     (15U)
#define SYSCTL0_PDSLEEPCFG0_FFRO_PD_MASK         (0x10000U)
#define SYSCTL0_PDSLEEPCFG0_FFRO_PD_SHIFT        (16U)
#define SYSCTL0_PDSLEEPCFG0_SYSPLLLDO_PD_MASK    (0x20000U)
#define SYSCTL0_PDSLEEPCFG0_SYSPLLLDO_PD_SHIFT   (17U)
#define SYSCTL0_PDSLEEPCFG0_SYSPLLANA_PD_MASK    (0x40000U)
#define SYSCTL0_PDSLEEPCFG0_SYSPLLANA_PD_SHIFT   (18U)
#define SYSCTL0_PDSLEEPCFG0_AUDPLLLDO_PD_MASK    (0x80000U)
#define SYSCTL0_PDSLEEPCFG0_AUDPLLLDO_PD_SHIFT   (19U)
#define SYSCTL0_PDSLEEPCFG0_AUDPLLANA_PD_MASK    (0x100000U)
#define SYSCTL0_PDSLEEPCFG0_AUDPLLANA_PD_SHIFT   (20U)
#define SYSCTL0_PDSLEEPCFG0_ADC_PD_MASK          (0x200000U)
#define SYSCTL0_PDSLEEPCFG0_ADC_PD_SHIFT         (21U)
#define SYSCTL0_PDSLEEPCFG0_ADC_LP_MASK          (0x400000U)
#define SYSCTL0_PDSLEEPCFG0_ADC_LP_SHIFT         (22U)
#define SYSCTL0_PDSLEEPCFG0_ADC_TEMPSNS_PD_MASK  (0x800000U)
#define SYSCTL0_PDSLEEPCFG0_ADC_TEMPSNS_PD_SHIFT (23U)
#define SYSCTL0_PDSLEEPCFG0_PMC_TEMPSNS_PD_MASK  (0x1000000U)
#define SYSCTL0_PDSLEEPCFG0_PMC_TEMPSNS_PD_SHIFT (24U)
#define SYSCTL0_PDSLEEPCFG0_ACMP_PD_MASK         (0x2000000U)
#define SYSCTL0_PDSLEEPCFG0_ACMP_PD_SHIFT        (25U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_FSPI0_VDET_LP_MASK (0x4000000U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_FSPI0_VDET_LP_SHIFT (26U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_FSPI0_REF_PD_MASK (0x8000000U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_FSPI0_REF_PD_SHIFT (27U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_SDIO0_VDET_LP_MASK (0x10000000U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_SDIO0_VDET_LP_SHIFT (28U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_SDIO0_REF_PD_MASK (0x20000000U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_SDIO0_REF_PD_SHIFT (29U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_FSPI1_VDET_LP_MASK (0x40000000U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_FSPI1_VDET_LP_SHIFT (30U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_FSPI1_REF_PD_MASK (0x80000000U)
#define SYSCTL0_PDSLEEPCFG0_HSPAD_FSPI1_REF_PD_SHIFT (31U)
/*! @} */

/*! @name PDSLEEPCFG1 - Sleep configuration 1 */
/*! @{ */
#define SYSCTL0_PDSLEEPCFG1_PQ_SRAM_PPD_MASK     (0x2U)
#define SYSCTL0_PDSLEEPCFG1_PQ_SRAM_PPD_SHIFT    (1U)
#define SYSCTL0_PDSLEEPCFG1_FLEXSPI0_SRAM_APD_MASK (0x4U)
#define SYSCTL0_PDSLEEPCFG1_FLEXSPI0_SRAM_APD_SHIFT (2U)
#define SYSCTL0_PDSLEEPCFG1_FLEXSPI0_SRAM_PPD_MASK (0x8U)
#define SYSCTL0_PDSLEEPCFG1_FLEXSPI0_SRAM_PPD_SHIFT (3U)
#define SYSCTL0_PDSLEEPCFG1_FLEXSPI1_SRAM_APD_MASK (0x10U)
#define SYSCTL0_PDSLEEPCFG1_FLEXSPI1_SRAM_APD_SHIFT (4U)
#define SYSCTL0_PDSLEEPCFG1_FLEXSPI1_SRAM_PPD_MASK (0x20U)
#define SYSCTL0_PDSLEEPCFG1_FLEXSPI1_SRAM_PPD_SHIFT (5U)
#define SYSCTL0_PDSLEEPCFG1_USBHS_SRAM_APD_MASK  (0x40U)
#define SYSCTL0_PDSLEEPCFG1_USBHS_SRAM_APD_SHIFT (6U)
#define SYSCTL0_PDSLEEPCFG1_USBHS_SRAM_PPD_MASK  (0x80U)
#define SYSCTL0_PDSLEEPCFG1_USBHS_SRAM_PPD_SHIFT (7U)
#define SYSCTL0_PDSLEEPCFG1_USDHC0_SRAM_APD_MASK (0x100U)
#define SYSCTL0_PDSLEEPCFG1_USDHC0_SRAM_APD_SHIFT (8U)
#define SYSCTL0_PDSLEEPCFG1_USDHC0_SRAM_PPD_MASK (0x200U)
#define SYSCTL0_PDSLEEPCFG1_USDHC0_SRAM_PPD_SHIFT (9U)
#define SYSCTL0_PDSLEEPCFG1_USDHC1_SRAM_APD_MASK (0x400U)
#define SYSCTL0_PDSLEEPCFG1_USDHC1_SRAM_APD_SHIFT (10U)
#define SYSCTL0_PDSLEEPCFG1_USDHC1_SRAM_PPD_MASK (0x800U)
#define SYSCTL0_PDSLEEPCFG1_USDHC1_SRAM_PPD_SHIFT (11U)
#define SYSCTL0_PDSLEEPCFG1_CASPER_SRAM_PPD_MASK (0x2000U)
#define SYSCTL0_PDSLEEPCFG1_CASPER_SRAM_PPD_SHIFT (13U)
#define SYSCTL0_PDSLEEPCFG1_GPU_SRAM_APD_MASK    (0x4000U)
#define SYSCTL0_PDSLEEPCFG1_GPU_SRAM_APD_SHIFT   (14U)
#define SYSCTL0_PDSLEEPCFG1_GPU_SRAM_PPD_MASK    (0x8000U)
#define SYSCTL0_PDSLEEPCFG1_GPU_SRAM_PPD_SHIFT   (15U)
#define SYSCTL0_PDSLEEPCFG1_SMARTDMA_SRAM_APD_MASK (0x10000U)
#define SYSCTL0_PDSLEEPCFG1_SMARTDMA_SRAM_APD_SHIFT (16U)
#define SYSCTL0_PDSLEEPCFG1_SMARTDMA_SRAM_PPD_MASK (0x20000U)
#define SYSCTL0_PDSLEEPCFG1_SMARTDMA_SRAM_PPD_SHIFT (17U)
#define SYSCTL0_PDSLEEPCFG1_MIPIDSI_SRAM_APD_MASK (0x40000U)
#define SYSCTL0_PDSLEEPCFG1_MIPIDSI_SRAM_APD_SHIFT (18U)
#define SYSCTL0_PDSLEEPCFG1_MIPIDSI_SRAM_PPD_MASK (0x80000U)
#define SYSCTL0_PDSLEEPCFG1_MIPIDSI_SRAM_PPD_SHIFT (19U)
#define SYSCTL0_PDSLEEPCFG1_LCDIF_SRAM_APD_MASK  (0x100000U)
#define SYSCTL0_PDSLEEPCFG1_LCDIF_SRAM_APD_SHIFT (20U)
#define SYSCTL0_PDSLEEPCFG1_LCDIF_SRAM_PPD_MASK  (0x200000U)
#define SYSCTL0_PDSLEEPCFG1_LCDIF_SRAM_PPD_SHIFT (21U)
#define SYSCTL0_PDSLEEPCFG1_DSP_PD_MASK          (0x2000000U)
#define SYSCTL0_PDSLEEPCFG1_DSP_PD_SHIFT         (25U)
#define SYSCTL0_PDSLEEPCFG1_MIPIDSI_PD_MASK      (0x4000000U)
#define SYSCTL0_PDSLEEPCFG1_MIPIDSI_PD_SHIFT     (26U)
#define SYSCTL0_PDSLEEPCFG1_OTP_PD_MASK          (0x8000000U)
#define SYSCTL0_PDSLEEPCFG1_OTP_PD_SHIFT         (27U)
#define SYSCTL0_PDSLEEPCFG1_ROM_PD_MASK          (0x10000000U)
#define SYSCTL0_PDSLEEPCFG1_ROM_PD_SHIFT         (28U)
#define SYSCTL0_PDSLEEPCFG1_HSPAD_SDIO1_VDET_LP_MASK (0x20000000U)
#define SYSCTL0_PDSLEEPCFG1_HSPAD_SDIO1_VDET_LP_SHIFT (29U)
#define SYSCTL0_PDSLEEPCFG1_HSPAD_SDIO1_REF_PD_MASK (0x40000000U)
#define SYSCTL0_PDSLEEPCFG1_HSPAD_SDIO1_REF_PD_SHIFT (30U)
#define SYSCTL0_PDSLEEPCFG1_SRAM_SLEEP_MASK      (0x80000000U)
#define SYSCTL0_PDSLEEPCFG1_SRAM_SLEEP_SHIFT     (31U)
/*! @} */

/*! @name PDSLEEPCFG2 - Sleep configuration 2 */
/*! @{ */
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF0_APD_MASK    (0x1U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF0_APD_SHIFT   (0U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF1_APD_MASK    (0x2U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF1_APD_SHIFT   (1U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF2_APD_MASK    (0x4U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF2_APD_SHIFT   (2U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF3_APD_MASK    (0x8U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF3_APD_SHIFT   (3U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF4_APD_MASK    (0x10U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF4_APD_SHIFT   (4U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF5_APD_MASK    (0x20U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF5_APD_SHIFT   (5U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF6_APD_MASK    (0x40U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF6_APD_SHIFT   (6U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF7_APD_MASK    (0x80U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF7_APD_SHIFT   (7U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF8_APD_MASK    (0x100U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF8_APD_SHIFT   (8U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF9_APD_MASK    (0x200U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF9_APD_SHIFT   (9U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF10_APD_MASK   (0x400U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF10_APD_SHIFT  (10U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF11_APD_MASK   (0x800U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF11_APD_SHIFT  (11U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF12_APD_MASK   (0x1000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF12_APD_SHIFT  (12U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF13_APD_MASK   (0x2000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF13_APD_SHIFT  (13U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF14_APD_MASK   (0x4000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF14_APD_SHIFT  (14U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF15_APD_MASK   (0x8000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF15_APD_SHIFT  (15U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF16_APD_MASK   (0x10000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF16_APD_SHIFT  (16U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF17_APD_MASK   (0x20000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF17_APD_SHIFT  (17U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF18_APD_MASK   (0x40000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF18_APD_SHIFT  (18U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF19_APD_MASK   (0x80000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF19_APD_SHIFT  (19U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF20_APD_MASK   (0x100000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF20_APD_SHIFT  (20U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF21_APD_MASK   (0x200000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF21_APD_SHIFT  (21U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF22_APD_MASK   (0x400000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF22_APD_SHIFT  (22U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF23_APD_MASK   (0x800000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF23_APD_SHIFT  (23U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF24_APD_MASK   (0x1000000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF24_APD_SHIFT  (24U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF25_APD_MASK   (0x2000000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF25_APD_SHIFT  (25U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF26_APD_MASK   (0x4000000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF26_APD_SHIFT  (26U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF27_APD_MASK   (0x8000000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF27_APD_SHIFT  (27U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF28_APD_MASK   (0x10000000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF28_APD_SHIFT  (28U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF29_APD_MASK   (0x20000000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF29_APD_SHIFT  (29U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF30_APD_MASK   (0x40000000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF30_APD_SHIFT  (30U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF31_APD_MASK   (0x80000000U)
#define SYSCTL0_PDSLEEPCFG2_SRAM_IF31_APD_SHIFT  (31U)
/*! @} */

/*! @name PDSLEEPCFG3 - Sleep configuration 3 */
/*! @{ */
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF0_PPD_MASK    (0x1U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF0_PPD_SHIFT   (0U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF1_PPD_MASK    (0x2U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF1_PPD_SHIFT   (1U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF2_PPD_MASK    (0x4U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF2_PPD_SHIFT   (2U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF3_PPD_MASK    (0x8U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF3_PPD_SHIFT   (3U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF4_PPD_MASK    (0x10U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF4_PPD_SHIFT   (4U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF5_PPD_MASK    (0x20U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF5_PPD_SHIFT   (5U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF6_PPD_MASK    (0x40U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF6_PPD_SHIFT   (6U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF7_PPD_MASK    (0x80U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF7_PPD_SHIFT   (7U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF8_PPD_MASK    (0x100U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF8_PPD_SHIFT   (8U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF9_PPD_MASK    (0x200U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF9_PPD_SHIFT   (9U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF10_PPD_MASK   (0x400U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF10_PPD_SHIFT  (10U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF11_PPD_MASK   (0x800U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF11_PPD_SHIFT  (11U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF12_PPD_MASK   (0x1000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF12_PPD_SHIFT  (12U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF13_PPD_MASK   (0x2000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF13_PPD_SHIFT  (13U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF14_PPD_MASK   (0x4000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF14_PPD_SHIFT  (14U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF15_PPD_MASK   (0x8000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF15_PPD_SHIFT  (15U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF16_PPD_MASK   (0x10000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF16_PPD_SHIFT  (16U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF17_PPD_MASK   (0x20000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF17_PPD_SHIFT  (17U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF18_PPD_MASK   (0x40000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF18_PPD_SHIFT  (18U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF19_PPD_MASK   (0x80000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF19_PPD_SHIFT  (19U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF20_PPD_MASK   (0x100000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF20_PPD_SHIFT  (20U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF21_PPD_MASK   (0x200000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF21_PPD_SHIFT  (21U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF22_PPD_MASK   (0x400000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF22_PPD_SHIFT  (22U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF23_PPD_MASK   (0x800000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF23_PPD_SHIFT  (23U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF24_PPD_MASK   (0x1000000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF24_PPD_SHIFT  (24U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF25_PPD_MASK   (0x2000000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF25_PPD_SHIFT  (25U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF26_PPD_MASK   (0x4000000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF26_PPD_SHIFT  (26U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF27_PPD_MASK   (0x8000000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF27_PPD_SHIFT  (27U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF28_PPD_MASK   (0x10000000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF28_PPD_SHIFT  (28U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF29_PPD_MASK   (0x20000000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF29_PPD_SHIFT  (29U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF30_PPD_MASK   (0x40000000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF30_PPD_SHIFT  (30U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF31_PPD_MASK   (0x80000000U)
#define SYSCTL0_PDSLEEPCFG3_SRAM_IF31_PPD_SHIFT  (31U)
/*! @} */

/*! @name PDRUNCFG0 - Run configuration 0 */
/*! @{ */
#define SYSCTL0_PDRUNCFG0_MAINCLK_SHUTOFF_MASK   (0x1U)
#define SYSCTL0_PDRUNCFG0_MAINCLK_SHUTOFF_SHIFT  (0U)
#define SYSCTL0_PDRUNCFG0_PMIC_MODE0_MASK        (0x2U)
#define SYSCTL0_PDRUNCFG0_PMIC_MODE0_SHIFT       (1U)
#define SYSCTL0_PDRUNCFG0_PMIC_MODE1_MASK        (0x4U)
#define SYSCTL0_PDRUNCFG0_PMIC_MODE1_SHIFT       (2U)
#define SYSCTL0_PDRUNCFG0_DEEP_PD_MASK           (0x8U)
#define SYSCTL0_PDRUNCFG0_DEEP_PD_SHIFT          (3U)
#define SYSCTL0_PDRUNCFG0_VDDCOREREG_LP_MASK     (0x10U)
#define SYSCTL0_PDRUNCFG0_VDDCOREREG_LP_SHIFT    (4U)
#define SYSCTL0_PDRUNCFG0_PMCREF_LP_MASK         (0x40U)
#define SYSCTL0_PDRUNCFG0_PMCREF_LP_SHIFT        (6U)
#define SYSCTL0_PDRUNCFG0_HVD1V8_PD_MASK         (0x80U)
#define SYSCTL0_PDRUNCFG0_HVD1V8_PD_SHIFT        (7U)
#define SYSCTL0_PDRUNCFG0_PORCORE_LP_MASK        (0x100U)
#define SYSCTL0_PDRUNCFG0_PORCORE_LP_SHIFT       (8U)
#define SYSCTL0_PDRUNCFG0_LVDCORE_LP_MASK        (0x200U)
#define SYSCTL0_PDRUNCFG0_LVDCORE_LP_SHIFT       (9U)
#define SYSCTL0_PDRUNCFG0_HVDCORE_PD_MASK        (0x400U)
#define SYSCTL0_PDRUNCFG0_HVDCORE_PD_SHIFT       (10U)
#define SYSCTL0_PDRUNCFG0_RBB_PD_MASK            (0x800U)
#define SYSCTL0_PDRUNCFG0_RBB_PD_SHIFT           (11U)
#define SYSCTL0_PDRUNCFG0_FBB_PD_MASK            (0x1000U)
#define SYSCTL0_PDRUNCFG0_FBB_PD_SHIFT           (12U)
#define SYSCTL0_PDRUNCFG0_SYSXTAL_PD_MASK        (0x2000U)
#define SYSCTL0_PDRUNCFG0_SYSXTAL_PD_SHIFT       (13U)
#define SYSCTL0_PDRUNCFG0_LPOSC_PD_MASK          (0x4000U)
#define SYSCTL0_PDRUNCFG0_LPOSC_PD_SHIFT         (14U)
#define SYSCTL0_PDRUNCFG0_RBBSRAM_PD_MASK        (0x8000U)
#define SYSCTL0_PDRUNCFG0_RBBSRAM_PD_SHIFT       (15U)
#define SYSCTL0_PDRUNCFG0_FFRO_PD_MASK           (0x10000U)
#define SYSCTL0_PDRUNCFG0_FFRO_PD_SHIFT          (16U)
#define SYSCTL0_PDRUNCFG0_SYSPLLLDO_PD_MASK      (0x20000U)
#define SYSCTL0_PDRUNCFG0_SYSPLLLDO_PD_SHIFT     (17U)
#define SYSCTL0_PDRUNCFG0_SYSPLLANA_PD_MASK      (0x40000U)
#define SYSCTL0_PDRUNCFG0_SYSPLLANA_PD_SHIFT     (18U)
#define SYSCTL0_PDRUNCFG0_AUDPLLLDO_PD_MASK      (0x80000U)
#define SYSCTL0_PDRUNCFG0_AUDPLLLDO_PD_SHIFT     (19U)
#define SYSCTL0_PDRUNCFG0_AUDPLLANA_PD_MASK      (0x100000U)
#define SYSCTL0_PDRUNCFG0_AUDPLLANA_PD_SHIFT     (20U)
#define SYSCTL0_PDRUNCFG0_ADC_PD_MASK            (0x200000U)
#define SYSCTL0_PDRUNCFG0_ADC_PD_SHIFT           (21U)
#define SYSCTL0_PDRUNCFG0_ADC_LP_MASK            (0x400000U)
#define SYSCTL0_PDRUNCFG0_ADC_LP_SHIFT           (22U)
#define SYSCTL0_PDRUNCFG0_ADC_TEMPSNS_PD_MASK    (0x800000U)
#define SYSCTL0_PDRUNCFG0_ADC_TEMPSNS_PD_SHIFT   (23U)
#define SYSCTL0_PDRUNCFG0_PMC_TEMPSNS_PD_MASK    (0x1000000U)
#define SYSCTL0_PDRUNCFG0_PMC_TEMPSNS_PD_SHIFT   (24U)
#define SYSCTL0_PDRUNCFG0_ACMP_PD_MASK           (0x2000000U)
#define SYSCTL0_PDRUNCFG0_ACMP_PD_SHIFT          (25U)
#define SYSCTL0_PDRUNCFG0_HSPAD_FSPI0_VDET_LP_MASK (0x4000000U)
#define SYSCTL0_PDRUNCFG0_HSPAD_FSPI0_VDET_LP_SHIFT (26U)
#define SYSCTL0_PDRUNCFG0_HSPAD_FSPI0_REF_PD_MASK (0x8000000U)
#define SYSCTL0_PDRUNCFG0_HSPAD_FSPI0_REF_PD_SHIFT (27U)
#define SYSCTL0_PDRUNCFG0_HSPAD_SDIO0_VDET_LP_MASK (0x10000000U)
#define SYSCTL0_PDRUNCFG0_HSPAD_SDIO0_VDET_LP_SHIFT (28U)
#define SYSCTL0_PDRUNCFG0_HSPAD_SDIO0_REF_PD_MASK (0x20000000U)
#define SYSCTL0_PDRUNCFG0_HSPAD_SDIO0_REF_PD_SHIFT (29U)
#define SYSCTL0_PDRUNCFG0_HSPAD_FSPI1_VDET_LP_MASK (0x40000000U)
#define SYSCTL0_PDRUNCFG0_HSPAD_FSPI1_VDET_LP_SHIFT (30U)
#define SYSCTL0_PDRUNCFG0_HSPAD_FSPI1_REF_PD_MASK (0x80000000U)
#define SYSCTL0_PDRUNCFG0_HSPAD_FSPI1_REF_PD_SHIFT (31U)
/*! @} */

/*! @name PDRUNCFG1 - Run configuration 1 */
/*! @{ */
#define SYSCTL0_PDRUNCFG1_PQ_SRAM_PPD_MASK       (0x2U)
#define SYSCTL0_PDRUNCFG1_PQ_SRAM_PPD_SHIFT      (1U)
#define SYSCTL0_PDRUNCFG1_FLEXSPI0_SRAM_APD_MASK (0x4U)
#define SYSCTL0_PDRUNCFG1_FLEXSPI0_SRAM_APD_SHIFT (2U)
#define SYSCTL0_PDRUNCFG1_FLEXSPI0_SRAM_PPD_MASK (0x8U)
#define SYSCTL0_PDRUNCFG1_FLEXSPI0_SRAM_PPD_SHIFT (3U)
#define SYSCTL0_PDRUNCFG1_FLEXSPI1_SRAM_APD_MASK (0x10U)
#define SYSCTL0_PDRUNCFG1_FLEXSPI1_SRAM_APD_SHIFT (4U)
#define SYSCTL0_PDRUNCFG1_FLEXSPI1_SRAM_PPD_MASK (0x20U)
#define SYSCTL0_PDRUNCFG1_FLEXSPI1_SRAM_PPD_SHIFT (5U)
#define SYSCTL0_PDRUNCFG1_USBHS_SRAM_APD_MASK    (0x40U)
#define SYSCTL0_PDRUNCFG1_USBHS_SRAM_APD_SHIFT   (6U)
#define SYSCTL0_PDRUNCFG1_USBHS_SRAM_PPD_MASK    (0x80U)
#define SYSCTL0_PDRUNCFG1_USBHS_SRAM_PPD_SHIFT   (7U)
#define SYSCTL0_PDRUNCFG1_USDHC0_SRAM_APD_MASK   (0x100U)
#define SYSCTL0_PDRUNCFG1_USDHC0_SRAM_APD_SHIFT  (8U)
#define SYSCTL0_PDRUNCFG1_USDHC0_SRAM_PPD_MASK   (0x200U)
#define SYSCTL0_PDRUNCFG1_USDHC0_SRAM_PPD_SHIFT  (9U)
#define SYSCTL0_PDRUNCFG1_USDHC1_SRAM_APD_MASK   (0x400U)
#define SYSCTL0_PDRUNCFG1_USDHC1_SRAM_APD_SHIFT  (10U)
#define SYSCTL0_PDRUNCFG1_USDHC1_SRAM_PPD_MASK   (0x800U)
#define SYSCTL0_PDRUNCFG1_USDHC1_SRAM_PPD_SHIFT  (11U)
#define SYSCTL0_PDRUNCFG1_CASPER_SRAM_PPD_MASK   (0x2000U)
#define SYSCTL0_PDRUNCFG1_CASPER_SRAM_PPD_SHIFT  (13U)
#define SYSCTL0_PDRUNCFG1_GPU_SRAM_APD_MASK      (0x4000U)
#define SYSCTL0_PDRUNCFG1_GPU_SRAM_APD_SHIFT     (14U)
#define SYSCTL0_PDRUNCFG1_GPU_SRAM_PPD_MASK      (0x8000U)
#define SYSCTL0_PDRUNCFG1_GPU_SRAM_PPD_SHIFT     (15U)
#define SYSCTL0_PDRUNCFG1_SMARTDMA_SRAM_APD_MASK (0x10000U)
#define SYSCTL0_PDRUNCFG1_SMARTDMA_SRAM_APD_SHIFT (16U)
#define SYSCTL0_PDRUNCFG1_SMARTDMA_SRAM_PPD_MASK (0x20000U)
#define SYSCTL0_PDRUNCFG1_SMARTDMA_SRAM_PPD_SHIFT (17U)
#define SYSCTL0_PDRUNCFG1_MIPIDSI_SRAM_APD_MASK  (0x40000U)
#define SYSCTL0_PDRUNCFG1_MIPIDSI_SRAM_APD_SHIFT (18U)
#define SYSCTL0_PDRUNCFG1_MIPIDSI_SRAM_PPD_MASK  (0x80000U)
#define SYSCTL0_PDRUNCFG1_MIPIDSI_SRAM_PPD_SHIFT (19U)
#define SYSCTL0_PDRUNCFG1_LCDIF_SRAM_APD_MASK    (0x100000U)
#define SYSCTL0_PDRUNCFG1_LCDIF_SRAM_APD_SHIFT   (20U)
#define SYSCTL0_PDRUNCFG1_LCDIF_SRAM_PPD_MASK    (0x200000U)
#define SYSCTL0_PDRUNCFG1_LCDIF_SRAM_PPD_SHIFT   (21U)
#define SYSCTL0_PDRUNCFG1_DSP_PD_MASK            (0x2000000U)
#define SYSCTL0_PDRUNCFG1_DSP_PD_SHIFT           (25U)
#define SYSCTL0_PDRUNCFG1_MIPIDSI_PD_MASK        (0x4000000U)
#define SYSCTL0_PDRUNCFG1_MIPIDSI_PD_SHIFT       (26U)
#define SYSCTL0_PDRUNCFG1_OTP_PD_MASK            (0x8000000U)
#define SYSCTL0_PDRUNCFG1_OTP_PD_SHIFT           (27U)
#define SYSCTL0_PDRUNCFG1_ROM_PD_MASK            (0x10000000U)
#define SYSCTL0_PDRUNCFG1_ROM_PD_SHIFT           (28U)
#define SYSCTL0_PDRUNCFG1_HSPAD_SDIO1_VDET_LP_MASK (0x20000000U)
#define SYSCTL0_PDRUNCFG1_HSPAD_SDIO1_VDET_LP_SHIFT (29U)
#define SYSCTL0_PDRUNCFG1_HSPAD_SDIO1_REF_PD_MASK (0x40000000U)
#define SYSCTL0_PDRUNCFG1_HSPAD_SDIO1_REF_PD_SHIFT (30U)
#define SYSCTL0_PDRUNCFG1_SRAM_SLEEP_MASK        (0x80000000U)
#define SYSCTL0_PDRUNCFG1_SRAM_SLEEP_SHIFT       (31U)
/*! @} */

/*! @name PDRUNCFG2 - Run configuration 2 */
/*! @{ */
#define SYSCTL0_PDRUNCFG2_SRAM_IF0_APD_MASK      (0x1U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF0_APD_SHIFT     (0U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF1_APD_MASK      (0x2U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF1_APD_SHIFT     (1U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF2_APD_MASK      (0x4U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF2_APD_SHIFT     (2U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF3_APD_MASK      (0x8U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF3_APD_SHIFT     (3U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF4_APD_MASK      (0x10U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF4_APD_SHIFT     (4U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF5_APD_MASK      (0x20U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF5_APD_SHIFT     (5U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF6_APD_MASK      (0x40U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF6_APD_SHIFT     (6U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF7_APD_MASK      (0x80U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF7_APD_SHIFT     (7U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF8_APD_MASK      (0x100U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF8_APD_SHIFT     (8U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF9_APD_MASK      (0x200U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF9_APD_SHIFT     (9U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF10_APD_MASK     (0x400U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF10_APD_SHIFT    (10U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF11_APD_MASK     (0x800U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF11_APD_SHIFT    (11U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF12_APD_MASK     (0x1000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF12_APD_SHIFT    (12U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF13_APD_MASK     (0x2000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF13_APD_SHIFT    (13U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF14_APD_MASK     (0x4000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF14_APD_SHIFT    (14U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF15_APD_MASK     (0x8000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF15_APD_SHIFT    (15U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF16_APD_MASK     (0x10000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF16_APD_SHIFT    (16U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF17_APD_MASK     (0x20000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF17_APD_SHIFT    (17U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF18_APD_MASK     (0x40000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF18_APD_SHIFT    (18U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF19_APD_MASK     (0x80000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF19_APD_SHIFT    (19U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF20_APD_MASK     (0x100000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF20_APD_SHIFT    (20U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF21_APD_MASK     (0x200000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF21_APD_SHIFT    (21U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF22_APD_MASK     (0x400000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF22_APD_SHIFT    (22U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF23_APD_MASK     (0x800000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF23_APD_SHIFT    (23U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF24_APD_MASK     (0x1000000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF24_APD_SHIFT    (24U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF25_APD_MASK     (0x2000000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF25_APD_SHIFT    (25U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF26_APD_MASK     (0x4000000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF26_APD_SHIFT    (26U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF27_APD_MASK     (0x8000000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF27_APD_SHIFT    (27U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF28_APD_MASK     (0x10000000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF28_APD_SHIFT    (28U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF29_APD_MASK     (0x20000000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF29_APD_SHIFT    (29U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF30_APD_MASK     (0x40000000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF30_APD_SHIFT    (30U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF31_APD_MASK     (0x80000000U)
#define SYSCTL0_PDRUNCFG2_SRAM_IF31_APD_SHIFT    (31U)
/*! @} */

/*! @name PDRUNCFG3 - Run configuration 3 */
/*! @{ */
#define SYSCTL0_PDRUNCFG3_SRAM_IF0_PPD_MASK      (0x1U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF0_PPD_SHIFT     (0U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF1_PPD_MASK      (0x2U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF1_PPD_SHIFT     (1U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF2_PPD_MASK      (0x4U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF2_PPD_SHIFT     (2U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF3_PPD_MASK      (0x8U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF3_PPD_SHIFT     (3U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF4_PPD_MASK      (0x10U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF4_PPD_SHIFT     (4U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF5_PPD_MASK      (0x20U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF5_PPD_SHIFT     (5U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF6_PPD_MASK      (0x40U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF6_PPD_SHIFT     (6U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF7_PPD_MASK      (0x80U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF7_PPD_SHIFT     (7U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF8_PPD_MASK      (0x100U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF8_PPD_SHIFT     (8U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF9_PPD_MASK      (0x200U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF9_PPD_SHIFT     (9U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF10_PPD_MASK     (0x400U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF10_PPD_SHIFT    (10U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF11_PPD_MASK     (0x800U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF11_PPD_SHIFT    (11U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF12_PPD_MASK     (0x1000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF12_PPD_SHIFT    (12U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF13_PPD_MASK     (0x2000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF13_PPD_SHIFT    (13U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF14_PPD_MASK     (0x4000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF14_PPD_SHIFT    (14U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF15_PPD_MASK     (0x8000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF15_PPD_SHIFT    (15U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF16_PPD_MASK     (0x10000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF16_PPD_SHIFT    (16U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF17_PPD_MASK     (0x20000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF17_PPD_SHIFT    (17U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF18_PPD_MASK     (0x40000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF18_PPD_SHIFT    (18U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF19_PPD_MASK     (0x80000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF19_PPD_SHIFT    (19U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF20_PPD_MASK     (0x100000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF20_PPD_SHIFT    (20U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF21_PPD_MASK     (0x200000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF21_PPD_SHIFT    (21U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF22_PPD_MASK     (0x400000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF22_PPD_SHIFT    (22U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF23_PPD_MASK     (0x800000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF23_PPD_SHIFT    (23U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF24_PPD_MASK     (0x1000000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF24_PPD_SHIFT    (24U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF25_PPD_MASK     (0x2000000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF25_PPD_SHIFT    (25U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF26_PPD_MASK     (0x4000000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF26_PPD_SHIFT    (26U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF27_PPD_MASK     (0x8000000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF27_PPD_SHIFT    (27U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF28_PPD_MASK     (0x10000000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF28_PPD_SHIFT    (28U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF29_PPD_MASK     (0x20000000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF29_PPD_SHIFT    (29U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF30_PPD_MASK     (0x40000000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF30_PPD_SHIFT    (30U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF31_PPD_MASK     (0x80000000U)
#define SYSCTL0_PDRUNCFG3_SRAM_IF31_PPD_SHIFT    (31U)
/*! @} */

/*! @name PDRUNCFG0_SET - Run configuration 0 set */
/*! @{ */
#define SYSCTL0_PDRUNCFG0_SET_MAINCLK_SHUTOFF_MASK (0x1U)
#define SYSCTL0_PDRUNCFG0_SET_MAINCLK_SHUTOFF_SHIFT (0U)
#define SYSCTL0_PDRUNCFG0_SET_PMIC_MODE0_MASK    (0x2U)
#define SYSCTL0_PDRUNCFG0_SET_PMIC_MODE0_SHIFT   (1U)
#define SYSCTL0_PDRUNCFG0_SET_PMIC_MODE1_MASK    (0x4U)
#define SYSCTL0_PDRUNCFG0_SET_PMIC_MODE1_SHIFT   (2U)
#define SYSCTL0_PDRUNCFG0_SET_DEEP_PD_MASK       (0x8U)
#define SYSCTL0_PDRUNCFG0_SET_DEEP_PD_SHIFT      (3U)
#define SYSCTL0_PDRUNCFG0_SET_VDDCOREREG_LP_MASK (0x10U)
#define SYSCTL0_PDRUNCFG0_SET_VDDCOREREG_LP_SHIFT (4U)
#define SYSCTL0_PDRUNCFG0_SET_PMCREF_LP_MASK     (0x40U)
#define SYSCTL0_PDRUNCFG0_SET_PMCREF_LP_SHIFT    (6U)
#define SYSCTL0_PDRUNCFG0_SET_HVD1V8_PD_MASK     (0x80U)
#define SYSCTL0_PDRUNCFG0_SET_HVD1V8_PD_SHIFT    (7U)
#define SYSCTL0_PDRUNCFG0_SET_PORCORE_LP_MASK    (0x100U)
#define SYSCTL0_PDRUNCFG0_SET_PORCORE_LP_SHIFT   (8U)
#define SYSCTL0_PDRUNCFG0_SET_LVDCORE_LP_MASK    (0x200U)
#define SYSCTL0_PDRUNCFG0_SET_LVDCORE_LP_SHIFT   (9U)
#define SYSCTL0_PDRUNCFG0_SET_HVDCORE_PD_MASK    (0x400U)
#define SYSCTL0_PDRUNCFG0_SET_HVDCORE_PD_SHIFT   (10U)
#define SYSCTL0_PDRUNCFG0_SET_RBB_PD_MASK        (0x800U)
#define SYSCTL0_PDRUNCFG0_SET_RBB_PD_SHIFT       (11U)
#define SYSCTL0_PDRUNCFG0_SET_FBB_PD_MASK        (0x1000U)
#define SYSCTL0_PDRUNCFG0_SET_FBB_PD_SHIFT       (12U)
#define SYSCTL0_PDRUNCFG0_SET_SYSXTAL_PD_MASK    (0x2000U)
#define SYSCTL0_PDRUNCFG0_SET_SYSXTAL_PD_SHIFT   (13U)
#define SYSCTL0_PDRUNCFG0_SET_LPOSC_PD_MASK      (0x4000U)
#define SYSCTL0_PDRUNCFG0_SET_LPOSC_PD_SHIFT     (14U)
#define SYSCTL0_PDRUNCFG0_SET_RBBSRAM_PD_MASK    (0x8000U)
#define SYSCTL0_PDRUNCFG0_SET_RBBSRAM_PD_SHIFT   (15U)
#define SYSCTL0_PDRUNCFG0_SET_FFRO_PD_MASK       (0x10000U)
#define SYSCTL0_PDRUNCFG0_SET_FFRO_PD_SHIFT      (16U)
#define SYSCTL0_PDRUNCFG0_SET_SYSPLLLDO_PD_MASK  (0x20000U)
#define SYSCTL0_PDRUNCFG0_SET_SYSPLLLDO_PD_SHIFT (17U)
#define SYSCTL0_PDRUNCFG0_SET_SYSPLLANA_PD_MASK  (0x40000U)
#define SYSCTL0_PDRUNCFG0_SET_SYSPLLANA_PD_SHIFT (18U)
#define SYSCTL0_PDRUNCFG0_SET_AUDPLLLDO_PD_MASK  (0x80000U)
#define SYSCTL0_PDRUNCFG0_SET_AUDPLLLDO_PD_SHIFT (19U)
#define SYSCTL0_PDRUNCFG0_SET_AUDPLLANA_PD_MASK  (0x100000U)
#define SYSCTL0_PDRUNCFG0_SET_AUDPLLANA_PD_SHIFT (20U)
#define SYSCTL0_PDRUNCFG0_SET_ADC_PD_MASK        (0x200000U)
#define SYSCTL0_PDRUNCFG0_SET_ADC_PD_SHIFT       (21U)
#define SYSCTL0_PDRUNCFG0_SET_ADC_LP_MASK        (0x400000U)
#define SYSCTL0_PDRUNCFG0_SET_ADC_LP_SHIFT       (22U)
#define SYSCTL0_PDRUNCFG0_SET_ADC_TEMPSNS_PD_MASK (0x800000U)
#define SYSCTL0_PDRUNCFG0_SET_ADC_TEMPSNS_PD_SHIFT (23U)
#define SYSCTL0_PDRUNCFG0_SET_PMC_TEMPSNS_PD_MASK (0x1000000U)
#define SYSCTL0_PDRUNCFG0_SET_PMC_TEMPSNS_PD_SHIFT (24U)
#define SYSCTL0_PDRUNCFG0_SET_ACMP_PD_MASK       (0x2000000U)
#define SYSCTL0_PDRUNCFG0_SET_ACMP_PD_SHIFT      (25U)
#define SYSCTL0_PDRUNCFG0_SET_HSPAD_FSPI0_VDET_LP_MASK (0x4000000U)
#define SYSCTL0_PDRUNCFG0_SET_HSPAD_FSPI0_VDET_LP_SHIFT (26U)
#define SYSCTL0_PDRUNCFG0_SET_HSPAD_FSPI0_REF_PD_MASK (0x8000000U)
#define SYSCTL0_PDRUNCFG0_SET_HSPAD_FSPI0_REF_PD_SHIFT (27U)
#define SYSCTL0_PDRUNCFG0_SET_HSPADVDET_LP_MASK  (0x10000000U)
#define SYSCTL0_PDRUNCFG0_SET_HSPADVDET_LP_SHIFT (28U)
#define SYSCTL0_PDRUNCFG0_SET_HSPADREF_PD_MASK   (0x20000000U)
#define SYSCTL0_PDRUNCFG0_SET_HSPADREF_PD_SHIFT  (29U)
#define SYSCTL0_PDRUNCFG0_SET_HSPAD_FSPI1_VDET_LP_MASK (0x40000000U)
#define SYSCTL0_PDRUNCFG0_SET_HSPAD_FSPI1_VDET_LP_SHIFT (30U)
#define SYSCTL0_PDRUNCFG0_SET_HSPAD_FSPI1_REF_PD_MASK (0x80000000U)
#define SYSCTL0_PDRUNCFG0_SET_HSPAD_FSPI1_REF_PD_SHIFT (31U)
/*! @} */

/*! @name PDRUNCFG1_SET - Run configuration 1 set */
/*! @{ */
#define SYSCTL0_PDRUNCFG1_SET_PQ_SRAM_APD_MASK   (0x1U)
#define SYSCTL0_PDRUNCFG1_SET_PQ_SRAM_APD_SHIFT  (0U)
#define SYSCTL0_PDRUNCFG1_SET_PQ_SRAM_PPD_MASK   (0x2U)
#define SYSCTL0_PDRUNCFG1_SET_PQ_SRAM_PPD_SHIFT  (1U)
#define SYSCTL0_PDRUNCFG1_SET_FLEXSPI0_SRAM_APD_MASK (0x4U)
#define SYSCTL0_PDRUNCFG1_SET_FLEXSPI0_SRAM_APD_SHIFT (2U)
#define SYSCTL0_PDRUNCFG1_SET_FLEXSPI0_SRAM_PPD_MASK (0x8U)
#define SYSCTL0_PDRUNCFG1_SET_FLEXSPI0_SRAM_PPD_SHIFT (3U)
#define SYSCTL0_PDRUNCFG1_SET_FLEXSPI1_SRAM_APD_MASK (0x10U)
#define SYSCTL0_PDRUNCFG1_SET_FLEXSPI1_SRAM_APD_SHIFT (4U)
#define SYSCTL0_PDRUNCFG1_SET_FLEXSPI1_SRAM_PPD_MASK (0x20U)
#define SYSCTL0_PDRUNCFG1_SET_FLEXSPI1_SRAM_PPD_SHIFT (5U)
#define SYSCTL0_PDRUNCFG1_SET_USBHS_SRAM_APD_MASK (0x40U)
#define SYSCTL0_PDRUNCFG1_SET_USBHS_SRAM_APD_SHIFT (6U)
#define SYSCTL0_PDRUNCFG1_SET_USBHS_SRAM_PPD_MASK (0x80U)
#define SYSCTL0_PDRUNCFG1_SET_USBHS_SRAM_PPD_SHIFT (7U)
#define SYSCTL0_PDRUNCFG1_SET_USDHC0_SRAM_APD_MASK (0x100U)
#define SYSCTL0_PDRUNCFG1_SET_USDHC0_SRAM_APD_SHIFT (8U)
#define SYSCTL0_PDRUNCFG1_SET_USDHC0_SRAM_PPD_MASK (0x200U)
#define SYSCTL0_PDRUNCFG1_SET_USDHC0_SRAM_PPD_SHIFT (9U)
#define SYSCTL0_PDRUNCFG1_SET_USDHC1_SRAM_APD_MASK (0x400U)
#define SYSCTL0_PDRUNCFG1_SET_USDHC1_SRAM_APD_SHIFT (10U)
#define SYSCTL0_PDRUNCFG1_SET_USDHC1_SRAM_PPD_MASK (0x800U)
#define SYSCTL0_PDRUNCFG1_SET_USDHC1_SRAM_PPD_SHIFT (11U)
#define SYSCTL0_PDRUNCFG1_SET_CASPER_SRAM_PPD_MASK (0x2000U)
#define SYSCTL0_PDRUNCFG1_SET_CASPER_SRAM_PPD_SHIFT (13U)
#define SYSCTL0_PDRUNCFG1_SET_GPU_SRAM_APD_MASK  (0x4000U)
#define SYSCTL0_PDRUNCFG1_SET_GPU_SRAM_APD_SHIFT (14U)
#define SYSCTL0_PDRUNCFG1_SET_GPU_SRAM_PPD_MASK  (0x8000U)
#define SYSCTL0_PDRUNCFG1_SET_GPU_SRAM_PPD_SHIFT (15U)
#define SYSCTL0_PDRUNCFG1_SET_SMARTDMA_SRAM_APD_MASK (0x10000U)
#define SYSCTL0_PDRUNCFG1_SET_SMARTDMA_SRAM_APD_SHIFT (16U)
#define SYSCTL0_PDRUNCFG1_SET_SMARTDMA_SRAM_PPD_MASK (0x20000U)
#define SYSCTL0_PDRUNCFG1_SET_SMARTDMA_SRAM_PPD_SHIFT (17U)
#define SYSCTL0_PDRUNCFG1_SET_MIPIDSI_SRAM_APD_MASK (0x40000U)
#define SYSCTL0_PDRUNCFG1_SET_MIPIDSI_SRAM_APD_SHIFT (18U)
#define SYSCTL0_PDRUNCFG1_SET_MIPIDSI_SRAM_PPD_MASK (0x80000U)
#define SYSCTL0_PDRUNCFG1_SET_MIPIDSI_SRAM_PPD_SHIFT (19U)
#define SYSCTL0_PDRUNCFG1_SET_LCDIF_SRAM_APD_MASK (0x100000U)
#define SYSCTL0_PDRUNCFG1_SET_LCDIF_SRAM_APD_SHIFT (20U)
#define SYSCTL0_PDRUNCFG1_SET_LCDIF_SRAM_PPD_MASK (0x200000U)
#define SYSCTL0_PDRUNCFG1_SET_LCDIF_SRAM_PPD_SHIFT (21U)
#define SYSCTL0_PDRUNCFG1_SET_DSP_PD_MASK        (0x2000000U)
#define SYSCTL0_PDRUNCFG1_SET_DSP_PD_SHIFT       (25U)
#define SYSCTL0_PDRUNCFG1_SET_MIPIDSI_PD_MASK    (0x4000000U)
#define SYSCTL0_PDRUNCFG1_SET_MIPIDSI_PD_SHIFT   (26U)
#define SYSCTL0_PDRUNCFG1_SET_OTP_PD_MASK        (0x8000000U)
#define SYSCTL0_PDRUNCFG1_SET_OTP_PD_SHIFT       (27U)
#define SYSCTL0_PDRUNCFG1_SET_ROM_PD_MASK        (0x10000000U)
#define SYSCTL0_PDRUNCFG1_SET_ROM_PD_SHIFT       (28U)
#define SYSCTL0_PDRUNCFG1_SET_HSPAD_SDIO1_VDET_LP_MASK (0x20000000U)
#define SYSCTL0_PDRUNCFG1_SET_HSPAD_SDIO1_VDET_LP_SHIFT (29U)
#define SYSCTL0_PDRUNCFG1_SET_HSPAD_SDIO1_REF_PD_MASK (0x40000000U)
#define SYSCTL0_PDRUNCFG1_SET_HSPAD_SDIO1_REF_PD_SHIFT (30U)
#define SYSCTL0_PDRUNCFG1_SET_SRAM_SLEEP_MASK    (0x80000000U)
#define SYSCTL0_PDRUNCFG1_SET_SRAM_SLEEP_SHIFT   (31U)
/*! @} */

/*! @name PDRUNCFG2_SET - Run configuration 2 set */
/*! @{ */
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF0_APD_MASK  (0x1U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF0_APD_SHIFT (0U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF1_APD_MASK  (0x2U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF1_APD_SHIFT (1U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF2_APD_MASK  (0x4U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF2_APD_SHIFT (2U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF3_APD_MASK  (0x8U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF3_APD_SHIFT (3U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF4_APD_MASK  (0x10U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF4_APD_SHIFT (4U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF5_APD_MASK  (0x20U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF5_APD_SHIFT (5U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF6_APD_MASK  (0x40U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF6_APD_SHIFT (6U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF7_APD_MASK  (0x80U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF7_APD_SHIFT (7U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF8_APD_MASK  (0x100U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF8_APD_SHIFT (8U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF9_APD_MASK  (0x200U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF9_APD_SHIFT (9U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF10_APD_MASK (0x400U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF10_APD_SHIFT (10U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF11_APD_MASK (0x800U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF11_APD_SHIFT (11U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF12_APD_MASK (0x1000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF12_APD_SHIFT (12U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF13_APD_MASK (0x2000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF13_APD_SHIFT (13U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF14_APD_MASK (0x4000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF14_APD_SHIFT (14U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF15_APD_MASK (0x8000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF15_APD_SHIFT (15U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF16_APD_MASK (0x10000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF16_APD_SHIFT (16U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF17_APD_MASK (0x20000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF17_APD_SHIFT (17U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF18_APD_MASK (0x40000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF18_APD_SHIFT (18U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF19_APD_MASK (0x80000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF19_APD_SHIFT (19U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF20_APD_MASK (0x100000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF20_APD_SHIFT (20U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF21_APD_MASK (0x200000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF21_APD_SHIFT (21U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF22_APD_MASK (0x400000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF22_APD_SHIFT (22U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF23_APD_MASK (0x800000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF23_APD_SHIFT (23U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF24_APD_MASK (0x1000000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF24_APD_SHIFT (24U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF25_APD_MASK (0x2000000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF25_APD_SHIFT (25U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF26_APD_MASK (0x4000000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF26_APD_SHIFT (26U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF27_APD_MASK (0x8000000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF27_APD_SHIFT (27U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF28_APD_MASK (0x10000000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF28_APD_SHIFT (28U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF29_APD_MASK (0x20000000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF29_APD_SHIFT (29U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF30_APD_MASK (0x40000000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF30_APD_SHIFT (30U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF31_APD_MASK (0x80000000U)
#define SYSCTL0_PDRUNCFG2_SET_SRAM_IF31_APD_SHIFT (31U)
/*! @} */

/*! @name PDRUNCFG3_SET - Run configuration 3 set */
/*! @{ */
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF0_PPD_MASK  (0x1U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF0_PPD_SHIFT (0U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF1_PPD_MASK  (0x2U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF1_PPD_SHIFT (1U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF2_PPD_MASK  (0x4U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF2_PPD_SHIFT (2U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF3_PPD_MASK  (0x8U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF3_PPD_SHIFT (3U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF4_PPD_MASK  (0x10U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF4_PPD_SHIFT (4U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF5_PPD_MASK  (0x20U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF5_PPD_SHIFT (5U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF6_PPD_MASK  (0x40U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF6_PPD_SHIFT (6U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF7_PPD_MASK  (0x80U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF7_PPD_SHIFT (7U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF8_PPD_MASK  (0x100U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF8_PPD_SHIFT (8U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF9_PPD_MASK  (0x200U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF9_PPD_SHIFT (9U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF10_PPD_MASK (0x400U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF10_PPD_SHIFT (10U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF11_PPD_MASK (0x800U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF11_PPD_SHIFT (11U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF12_PPD_MASK (0x1000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF12_PPD_SHIFT (12U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF13_PPD_MASK (0x2000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF13_PPD_SHIFT (13U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF14_PPD_MASK (0x4000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF14_PPD_SHIFT (14U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF15_PPD_MASK (0x8000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF15_PPD_SHIFT (15U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF16_PPD_MASK (0x10000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF16_PPD_SHIFT (16U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF17_PPD_MASK (0x20000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF17_PPD_SHIFT (17U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF18_PPD_MASK (0x40000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF18_PPD_SHIFT (18U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF19_PPD_MASK (0x80000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF19_PPD_SHIFT (19U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF20_PPD_MASK (0x100000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF20_PPD_SHIFT (20U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF21_PPD_MASK (0x200000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF21_PPD_SHIFT (21U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF22_PPD_MASK (0x400000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF22_PPD_SHIFT (22U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF23_PPD_MASK (0x800000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF23_PPD_SHIFT (23U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF24_PPD_MASK (0x1000000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF24_PPD_SHIFT (24U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF25_PPD_MASK (0x2000000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF25_PPD_SHIFT (25U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF26_PPD_MASK (0x4000000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF26_PPD_SHIFT (26U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF27_PPD_MASK (0x8000000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF27_PPD_SHIFT (27U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF28_PPD_MASK (0x10000000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF28_PPD_SHIFT (28U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF29_PPD_MASK (0x20000000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF29_PPD_SHIFT (29U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF30_PPD_MASK (0x40000000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF30_PPD_SHIFT (30U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF31_PPD_MASK (0x80000000U)
#define SYSCTL0_PDRUNCFG3_SET_SRAM_IF31_PPD_SHIFT (31U)
/*! @} */

/*! @name PDRUNCFG0_CLR - Run configuration 0 clear */
/*! @{ */
#define SYSCTL0_PDRUNCFG0_CLR_MAINCLK_SHUTOFF_MASK (0x1U)
#define SYSCTL0_PDRUNCFG0_CLR_MAINCLK_SHUTOFF_SHIFT (0U)
#define SYSCTL0_PDRUNCFG0_CLR_PMIC_MODE0_MASK    (0x2U)
#define SYSCTL0_PDRUNCFG0_CLR_PMIC_MODE0_SHIFT   (1U)
#define SYSCTL0_PDRUNCFG0_CLR_PMIC_MODE1_MASK    (0x4U)
#define SYSCTL0_PDRUNCFG0_CLR_PMIC_MODE1_SHIFT   (2U)
#define SYSCTL0_PDRUNCFG0_CLR_DEEP_PD_MASK       (0x8U)
#define SYSCTL0_PDRUNCFG0_CLR_DEEP_PD_SHIFT      (3U)
#define SYSCTL0_PDRUNCFG0_CLR_VDDCOREREG_LP_MASK (0x10U)
#define SYSCTL0_PDRUNCFG0_CLR_VDDCOREREG_LP_SHIFT (4U)
#define SYSCTL0_PDRUNCFG0_CLR_PMCREF_LP_MASK     (0x40U)
#define SYSCTL0_PDRUNCFG0_CLR_PMCREF_LP_SHIFT    (6U)
#define SYSCTL0_PDRUNCFG0_CLR_HVD1V8_PD_MASK     (0x80U)
#define SYSCTL0_PDRUNCFG0_CLR_HVD1V8_PD_SHIFT    (7U)
#define SYSCTL0_PDRUNCFG0_CLR_PORCORE_LP_MASK    (0x100U)
#define SYSCTL0_PDRUNCFG0_CLR_PORCORE_LP_SHIFT   (8U)
#define SYSCTL0_PDRUNCFG0_CLR_LVDCORE_LP_MASK    (0x200U)
#define SYSCTL0_PDRUNCFG0_CLR_LVDCORE_LP_SHIFT   (9U)
#define SYSCTL0_PDRUNCFG0_CLR_HVDCORE_PD_MASK    (0x400U)
#define SYSCTL0_PDRUNCFG0_CLR_HVDCORE_PD_SHIFT   (10U)
#define SYSCTL0_PDRUNCFG0_CLR_RBB_PD_MASK        (0x800U)
#define SYSCTL0_PDRUNCFG0_CLR_RBB_PD_SHIFT       (11U)
#define SYSCTL0_PDRUNCFG0_CLR_FBB_PD_MASK        (0x1000U)
#define SYSCTL0_PDRUNCFG0_CLR_FBB_PD_SHIFT       (12U)
#define SYSCTL0_PDRUNCFG0_CLR_SYSXTAL_PD_MASK    (0x2000U)
#define SYSCTL0_PDRUNCFG0_CLR_SYSXTAL_PD_SHIFT   (13U)
#define SYSCTL0_PDRUNCFG0_CLR_LPOSC_PD_MASK      (0x4000U)
#define SYSCTL0_PDRUNCFG0_CLR_LPOSC_PD_SHIFT     (14U)
#define SYSCTL0_PDRUNCFG0_CLR_RBBSRAM_PD_MASK    (0x8000U)
#define SYSCTL0_PDRUNCFG0_CLR_RBBSRAM_PD_SHIFT   (15U)
#define SYSCTL0_PDRUNCFG0_CLR_FFRO_PD_MASK       (0x10000U)
#define SYSCTL0_PDRUNCFG0_CLR_FFRO_PD_SHIFT      (16U)
#define SYSCTL0_PDRUNCFG0_CLR_SYSPLLLDO_PD_MASK  (0x20000U)
#define SYSCTL0_PDRUNCFG0_CLR_SYSPLLLDO_PD_SHIFT (17U)
#define SYSCTL0_PDRUNCFG0_CLR_SYSPLLANA_PD_MASK  (0x40000U)
#define SYSCTL0_PDRUNCFG0_CLR_SYSPLLANA_PD_SHIFT (18U)
#define SYSCTL0_PDRUNCFG0_CLR_AUDPLLLDO_PD_MASK  (0x80000U)
#define SYSCTL0_PDRUNCFG0_CLR_AUDPLLLDO_PD_SHIFT (19U)
#define SYSCTL0_PDRUNCFG0_CLR_AUDPLLANA_PD_MASK  (0x100000U)
#define SYSCTL0_PDRUNCFG0_CLR_AUDPLLANA_PD_SHIFT (20U)
#define SYSCTL0_PDRUNCFG0_CLR_ADC_PD_MASK        (0x200000U)
#define SYSCTL0_PDRUNCFG0_CLR_ADC_PD_SHIFT       (21U)
#define SYSCTL0_PDRUNCFG0_CLR_ADC_LP_MASK        (0x400000U)
#define SYSCTL0_PDRUNCFG0_CLR_ADC_LP_SHIFT       (22U)
#define SYSCTL0_PDRUNCFG0_CLR_ADC_TEMPSNS_PD_MASK (0x800000U)
#define SYSCTL0_PDRUNCFG0_CLR_ADC_TEMPSNS_PD_SHIFT (23U)
#define SYSCTL0_PDRUNCFG0_CLR_PMC_TEMPSNS_PD_MASK (0x1000000U)
#define SYSCTL0_PDRUNCFG0_CLR_PMC_TEMPSNS_PD_SHIFT (24U)
#define SYSCTL0_PDRUNCFG0_CLR_ACMP_PD_MASK       (0x2000000U)
#define SYSCTL0_PDRUNCFG0_CLR_ACMP_PD_SHIFT      (25U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPAD_FSPI0_VDET_LP_MASK (0x4000000U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPAD_FSPI0_VDET_LP_SHIFT (26U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPAD_FSPI0_REF_PD_MASK (0x8000000U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPAD_FSPI0_REF_PD_SHIFT (27U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPADVDET_LP_MASK  (0x10000000U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPADVDET_LP_SHIFT (28U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPADREF_PD_MASK   (0x20000000U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPADREF_PD_SHIFT  (29U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPAD_FSPI1_VDET_LP_MASK (0x40000000U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPAD_FSPI1_VDET_LP_SHIFT (30U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPAD_FSPI1_REF_PD_MASK (0x80000000U)
#define SYSCTL0_PDRUNCFG0_CLR_HSPAD_FSPI1_REF_PD_SHIFT (31U)
/*! @} */

/*! @name PDRUNCFG1_CLR - Run configuration 1 clear */
/*! @{ */
#define SYSCTL0_PDRUNCFG1_CLR_PQ_SRAM_APD_MASK   (0x1U)
#define SYSCTL0_PDRUNCFG1_CLR_PQ_SRAM_APD_SHIFT  (0U)
#define SYSCTL0_PDRUNCFG1_CLR_PQ_SRAM_PPD_MASK   (0x2U)
#define SYSCTL0_PDRUNCFG1_CLR_PQ_SRAM_PPD_SHIFT  (1U)
#define SYSCTL0_PDRUNCFG1_CLR_FLEXSPI0_SRAM_APD_MASK (0x4U)
#define SYSCTL0_PDRUNCFG1_CLR_FLEXSPI0_SRAM_APD_SHIFT (2U)
#define SYSCTL0_PDRUNCFG1_CLR_FLEXSPI0_SRAM_PPD_MASK (0x8U)
#define SYSCTL0_PDRUNCFG1_CLR_FLEXSPI0_SRAM_PPD_SHIFT (3U)
#define SYSCTL0_PDRUNCFG1_CLR_FLEXSPI1_SRAM_APD_MASK (0x10U)
#define SYSCTL0_PDRUNCFG1_CLR_FLEXSPI1_SRAM_APD_SHIFT (4U)
#define SYSCTL0_PDRUNCFG1_CLR_FLEXSPI1_SRAM_PPD_MASK (0x20U)
#define SYSCTL0_PDRUNCFG1_CLR_FLEXSPI1_SRAM_PPD_SHIFT (5U)
#define SYSCTL0_PDRUNCFG1_CLR_USBHS_SRAM_APD_MASK (0x40U)
#define SYSCTL0_PDRUNCFG1_CLR_USBHS_SRAM_APD_SHIFT (6U)
#define SYSCTL0_PDRUNCFG1_CLR_USBHS_SRAM_PPD_MASK (0x80U)
#define SYSCTL0_PDRUNCFG1_CLR_USBHS_SRAM_PPD_SHIFT (7U)
#define SYSCTL0_PDRUNCFG1_CLR_USDHC0_SRAM_APD_MASK (0x100U)
#define SYSCTL0_PDRUNCFG1_CLR_USDHC0_SRAM_APD_SHIFT (8U)
#define SYSCTL0_PDRUNCFG1_CLR_USDHC0_SRAM_PPD_MASK (0x200U)
#define SYSCTL0_PDRUNCFG1_CLR_USDHC0_SRAM_PPD_SHIFT (9U)
#define SYSCTL0_PDRUNCFG1_CLR_USDHC1_SRAM_APD_MASK (0x400U)
#define SYSCTL0_PDRUNCFG1_CLR_USDHC1_SRAM_APD_SHIFT (10U)
#define SYSCTL0_PDRUNCFG1_CLR_USDHC1_SRAM_PPD_MASK (0x800U)
#define SYSCTL0_PDRUNCFG1_CLR_USDHC1_SRAM_PPD_SHIFT (11U)
#define SYSCTL0_PDRUNCFG1_CLR_CASPER_SRAM_PPD_MASK (0x2000U)
#define SYSCTL0_PDRUNCFG1_CLR_CASPER_SRAM_PPD_SHIFT (13U)
#define SYSCTL0_PDRUNCFG1_CLR_GPU_SRAM_APD_MASK  (0x4000U)
#define SYSCTL0_PDRUNCFG1_CLR_GPU_SRAM_APD_SHIFT (14U)
#define SYSCTL0_PDRUNCFG1_CLR_GPU_SRAM_PPD_MASK  (0x8000U)
#define SYSCTL0_PDRUNCFG1_CLR_GPU_SRAM_PPD_SHIFT (15U)
#define SYSCTL0_PDRUNCFG1_CLR_SMARTDMA_SRAM_APD_MASK (0x10000U)
#define SYSCTL0_PDRUNCFG1_CLR_SMARTDMA_SRAM_APD_SHIFT (16U)
#define SYSCTL0_PDRUNCFG1_CLR_SMARTDMA_SRAM_PPD_MASK (0x20000U)
#define SYSCTL0_PDRUNCFG1_CLR_SMARTDMA_SRAM_PPD_SHIFT (17U)
#define SYSCTL0_PDRUNCFG1_CLR_MIPIDSI_SRAM_APD_MASK (0x40000U)
#define SYSCTL0_PDRUNCFG1_CLR_MIPIDSI_SRAM_APD_SHIFT (18U)
#define SYSCTL0_PDRUNCFG1_CLR_MIPIDSI_SRAM_PPD_MASK (0x80000U)
#define SYSCTL0_PDRUNCFG1_CLR_MIPIDSI_SRAM_PPD_SHIFT (19U)
#define SYSCTL0_PDRUNCFG1_CLR_LCDIF_SRAM_APD_MASK (0x100000U)
#define SYSCTL0_PDRUNCFG1_CLR_LCDIF_SRAM_APD_SHIFT (20U)
#define SYSCTL0_PDRUNCFG1_CLR_LCDIF_SRAM_PPD_MASK (0x200000U)
#define SYSCTL0_PDRUNCFG1_CLR_LCDIF_SRAM_PPD_SHIFT (21U)
#define SYSCTL0_PDRUNCFG1_CLR_DSP_PD_MASK        (0x2000000U)
#define SYSCTL0_PDRUNCFG1_CLR_DSP_PD_SHIFT       (25U)
#define SYSCTL0_PDRUNCFG1_CLR_MIPIDSI_PD_MASK    (0x4000000U)
#define SYSCTL0_PDRUNCFG1_CLR_MIPIDSI_PD_SHIFT   (26U)
#define SYSCTL0_PDRUNCFG1_CLR_OTP_PD_MASK        (0x8000000U)
#define SYSCTL0_PDRUNCFG1_CLR_OTP_PD_SHIFT       (27U)
#define SYSCTL0_PDRUNCFG1_CLR_ROM_PD_MASK        (0x10000000U)
#define SYSCTL0_PDRUNCFG1_CLR_ROM_PD_SHIFT       (28U)
#define SYSCTL0_PDRUNCFG1_CLR_HSPAD_SDIO1_VDET_LP_MASK (0x20000000U)
#define SYSCTL0_PDRUNCFG1_CLR_HSPAD_SDIO1_VDET_LP_SHIFT (29U)
#define SYSCTL0_PDRUNCFG1_CLR_HSPAD_SDIO1_REF_PD_MASK (0x40000000U)
#define SYSCTL0_PDRUNCFG1_CLR_HSPAD_SDIO1_REF_PD_SHIFT (30U)
#define SYSCTL0_PDRUNCFG1_CLR_SRAM_SLEEP_MASK    (0x80000000U)
#define SYSCTL0_PDRUNCFG1_CLR_SRAM_SLEEP_SHIFT   (31U)
/*! @} */

/*! @name PDRUNCFG2_CLR - Run configuration 2 clear */
/*! @{ */
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF0_APD_MASK  (0x1U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF0_APD_SHIFT (0U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF1_APD_MASK  (0x2U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF1_APD_SHIFT (1U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF2_APD_MASK  (0x4U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF2_APD_SHIFT (2U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF3_APD_MASK  (0x8U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF3_APD_SHIFT (3U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF4_APD_MASK  (0x10U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF4_APD_SHIFT (4U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF5_APD_MASK  (0x20U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF5_APD_SHIFT (5U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF6_APD_MASK  (0x40U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF6_APD_SHIFT (6U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF7_APD_MASK  (0x80U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF7_APD_SHIFT (7U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF8_APD_MASK  (0x100U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF8_APD_SHIFT (8U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF9_APD_MASK  (0x200U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF9_APD_SHIFT (9U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF10_APD_MASK (0x400U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF10_APD_SHIFT (10U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF11_APD_MASK (0x800U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF11_APD_SHIFT (11U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF12_APD_MASK (0x1000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF12_APD_SHIFT (12U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF13_APD_MASK (0x2000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF13_APD_SHIFT (13U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF14_APD_MASK (0x4000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF14_APD_SHIFT (14U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF15_APD_MASK (0x8000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF15_APD_SHIFT (15U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF16_APD_MASK (0x10000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF16_APD_SHIFT (16U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF17_APD_MASK (0x20000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF17_APD_SHIFT (17U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF18_APD_MASK (0x40000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF18_APD_SHIFT (18U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF19_APD_MASK (0x80000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF19_APD_SHIFT (19U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF20_APD_MASK (0x100000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF20_APD_SHIFT (20U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF21_APD_MASK (0x200000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF21_APD_SHIFT (21U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF22_APD_MASK (0x400000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF22_APD_SHIFT (22U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF23_APD_MASK (0x800000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF23_APD_SHIFT (23U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF24_APD_MASK (0x1000000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF24_APD_SHIFT (24U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF25_APD_MASK (0x2000000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF25_APD_SHIFT (25U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF26_APD_MASK (0x4000000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF26_APD_SHIFT (26U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF27_APD_MASK (0x8000000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF27_APD_SHIFT (27U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF28_APD_MASK (0x10000000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF28_APD_SHIFT (28U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF29_APD_MASK (0x20000000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF29_APD_SHIFT (29U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF30_APD_MASK (0x40000000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF30_APD_SHIFT (30U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF31_APD_MASK (0x80000000U)
#define SYSCTL0_PDRUNCFG2_CLR_SRAM_IF31_APD_SHIFT (31U)
/*! @} */

/*! @name PDRUNCFG3_CLR - Run configuration 3 clear */
/*! @{ */
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF0_PPD_MASK  (0x1U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF0_PPD_SHIFT (0U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF1_PPD_MASK  (0x2U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF1_PPD_SHIFT (1U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF2_PPD_MASK  (0x4U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF2_PPD_SHIFT (2U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF3_PPD_MASK  (0x8U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF3_PPD_SHIFT (3U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF4_PPD_MASK  (0x10U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF4_PPD_SHIFT (4U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF5_PPD_MASK  (0x20U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF5_PPD_SHIFT (5U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF6_PPD_MASK  (0x40U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF6_PPD_SHIFT (6U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF7_PPD_MASK  (0x80U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF7_PPD_SHIFT (7U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF8_PPD_MASK  (0x100U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF8_PPD_SHIFT (8U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF9_PPD_MASK  (0x200U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF9_PPD_SHIFT (9U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF10_PPD_MASK (0x400U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF10_PPD_SHIFT (10U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF11_PPD_MASK (0x800U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF11_PPD_SHIFT (11U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF12_PPD_MASK (0x1000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF12_PPD_SHIFT (12U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF13_PPD_MASK (0x2000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF13_PPD_SHIFT (13U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF14_PPD_MASK (0x4000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF14_PPD_SHIFT (14U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF15_PPD_MASK (0x8000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF15_PPD_SHIFT (15U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF16_PPD_MASK (0x10000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF16_PPD_SHIFT (16U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF17_PPD_MASK (0x20000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF17_PPD_SHIFT (17U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF18_PPD_MASK (0x40000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF18_PPD_SHIFT (18U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF19_PPD_MASK (0x80000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF19_PPD_SHIFT (19U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF20_PPD_MASK (0x100000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF20_PPD_SHIFT (20U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF21_PPD_MASK (0x200000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF21_PPD_SHIFT (21U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF22_PPD_MASK (0x400000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF22_PPD_SHIFT (22U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF23_PPD_MASK (0x800000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF23_PPD_SHIFT (23U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF24_PPD_MASK (0x1000000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF24_PPD_SHIFT (24U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF25_PPD_MASK (0x2000000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF25_PPD_SHIFT (25U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF26_PPD_MASK (0x4000000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF26_PPD_SHIFT (26U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF27_PPD_MASK (0x8000000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF27_PPD_SHIFT (27U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF28_PPD_MASK (0x10000000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF28_PPD_SHIFT (28U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF29_PPD_MASK (0x20000000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF29_PPD_SHIFT (29U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF30_PPD_MASK (0x40000000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF30_PPD_SHIFT (30U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF31_PPD_MASK (0x80000000U)
#define SYSCTL0_PDRUNCFG3_CLR_SRAM_IF31_PPD_SHIFT (31U)
/*! @} */

/*! @name PDWAKECFG - PD Wake Configuration */
/*! @{ */
#define SYSCTL0_PDWAKECFG_RBBKEEPST_MASK         (0x1U)
#define SYSCTL0_PDWAKECFG_RBBKEEPST_SHIFT        (0U)
#define SYSCTL0_PDWAKECFG_FBBKEEPST_MASK         (0x2U)
#define SYSCTL0_PDWAKECFG_FBBKEEPST_SHIFT        (1U)
#define SYSCTL0_PDWAKECFG_RBBSRAMKEEPST_MASK     (0x4U)
#define SYSCTL0_PDWAKECFG_RBBSRAMKEEPST_SHIFT    (2U)
#define SYSCTL0_PDWAKECFG_MIPIPDKEEPST_MASK      (0x8U)
#define SYSCTL0_PDWAKECFG_MIPIPDKEEPST_SHIFT     (3U)
#define SYSCTL0_PDWAKECFG_DSPPDKEEPST_MASK       (0x10U)
#define SYSCTL0_PDWAKECFG_DSPPDKEEPST_SHIFT      (4U)
#define SYSCTL0_PDWAKECFG_OTPPDKEEPST_MASK       (0x20U)
#define SYSCTL0_PDWAKECFG_OTPPDKEEPST_SHIFT      (5U)
/*! @} */

/*! @name STARTEN0 - Start Enable 0 */
/*! @{ */
#define SYSCTL0_STARTEN0_WDT0_MASK               (0x1U)
#define SYSCTL0_STARTEN0_WDT0_SHIFT              (0U)
#define SYSCTL0_STARTEN0_DMAC0_MASK              (0x2U)
#define SYSCTL0_STARTEN0_DMAC0_SHIFT             (1U)
#define SYSCTL0_STARTEN0_GPIO_INTA_MASK          (0x4U)
#define SYSCTL0_STARTEN0_GPIO_INTA_SHIFT         (2U)
#define SYSCTL0_STARTEN0_GPIO_INTB_MASK          (0x8U)
#define SYSCTL0_STARTEN0_GPIO_INTB_SHIFT         (3U)
#define SYSCTL0_STARTEN0_GPIO_INT0_IRQ0_MASK     (0x10U)
#define SYSCTL0_STARTEN0_GPIO_INT0_IRQ0_SHIFT    (4U)
#define SYSCTL0_STARTEN0_GPIO_INT0_IRQ1_MASK     (0x20U)
#define SYSCTL0_STARTEN0_GPIO_INT0_IRQ1_SHIFT    (5U)
#define SYSCTL0_STARTEN0_GPIO_INT0_IRQ2_MASK     (0x40U)
#define SYSCTL0_STARTEN0_GPIO_INT0_IRQ2_SHIFT    (6U)
#define SYSCTL0_STARTEN0_GPIO_INT0_IRQ3_MASK     (0x80U)
#define SYSCTL0_STARTEN0_GPIO_INT0_IRQ3_SHIFT    (7U)
#define SYSCTL0_STARTEN0_UTICK0_MASK             (0x100U)
#define SYSCTL0_STARTEN0_UTICK0_SHIFT            (8U)
#define SYSCTL0_STARTEN0_MRT0_MASK               (0x200U)
#define SYSCTL0_STARTEN0_MRT0_SHIFT              (9U)
#define SYSCTL0_STARTEN0_CT32BIT0_MASK           (0x400U)
#define SYSCTL0_STARTEN0_CT32BIT0_SHIFT          (10U)
#define SYSCTL0_STARTEN0_CT32BIT1_MASK           (0x800U)
#define SYSCTL0_STARTEN0_CT32BIT1_SHIFT          (11U)
#define SYSCTL0_STARTEN0_SCT0_MASK               (0x1000U)
#define SYSCTL0_STARTEN0_SCT0_SHIFT              (12U)
#define SYSCTL0_STARTEN0_CT32BIT3_MASK           (0x2000U)
#define SYSCTL0_STARTEN0_CT32BIT3_SHIFT          (13U)
#define SYSCTL0_STARTEN0_FLEXCOMM0_MASK          (0x4000U)
#define SYSCTL0_STARTEN0_FLEXCOMM0_SHIFT         (14U)
#define SYSCTL0_STARTEN0_FLEXCOMM1_MASK          (0x8000U)
#define SYSCTL0_STARTEN0_FLEXCOMM1_SHIFT         (15U)
#define SYSCTL0_STARTEN0_FLEXCOMM2_MASK          (0x10000U)
#define SYSCTL0_STARTEN0_FLEXCOMM2_SHIFT         (16U)
#define SYSCTL0_STARTEN0_FLEXCOMM3_MASK          (0x20000U)
#define SYSCTL0_STARTEN0_FLEXCOMM3_SHIFT         (17U)
#define SYSCTL0_STARTEN0_FLEXCOMM4_MASK          (0x40000U)
#define SYSCTL0_STARTEN0_FLEXCOMM4_SHIFT         (18U)
#define SYSCTL0_STARTEN0_FLEXCOMM5_MASK          (0x80000U)
#define SYSCTL0_STARTEN0_FLEXCOMM5_SHIFT         (19U)
#define SYSCTL0_STARTEN0_FLEXCOMM14_MASK         (0x100000U)
#define SYSCTL0_STARTEN0_FLEXCOMM14_SHIFT        (20U)
#define SYSCTL0_STARTEN0_FLEXCOMM15_MASK         (0x200000U)
#define SYSCTL0_STARTEN0_FLEXCOMM15_SHIFT        (21U)
#define SYSCTL0_STARTEN0_ADC0_MASK               (0x400000U)
#define SYSCTL0_STARTEN0_ADC0_SHIFT              (22U)
#define SYSCTL0_STARTEN0_ACMP_MASK               (0x1000000U)
#define SYSCTL0_STARTEN0_ACMP_SHIFT              (24U)
#define SYSCTL0_STARTEN0_DMIC0_MASK              (0x2000000U)
#define SYSCTL0_STARTEN0_DMIC0_SHIFT             (25U)
#define SYSCTL0_STARTEN0_HYPERVISOR_MASK         (0x8000000U)
#define SYSCTL0_STARTEN0_HYPERVISOR_SHIFT        (27U)
#define SYSCTL0_STARTEN0_SECUREVIOLATION_MASK    (0x10000000U)
#define SYSCTL0_STARTEN0_SECUREVIOLATION_SHIFT   (28U)
#define SYSCTL0_STARTEN0_HWVAD0_MASK             (0x20000000U)
#define SYSCTL0_STARTEN0_HWVAD0_SHIFT            (29U)
#define SYSCTL0_STARTEN0_PMC_MASK                (0x40000000U)
#define SYSCTL0_STARTEN0_PMC_SHIFT               (30U)
#define SYSCTL0_STARTEN0_RNG_MASK                (0x80000000U)
#define SYSCTL0_STARTEN0_RNG_SHIFT               (31U)
/*! @} */

/*! @name STARTEN1 - Start Enable 1 */
/*! @{ */
#define SYSCTL0_STARTEN1_RTC_LITE0_WAKEUP_MASK   (0x1U)
#define SYSCTL0_STARTEN1_RTC_LITE0_WAKEUP_SHIFT  (0U)
#define SYSCTL0_STARTEN1_DSP_TIE_EXPSTATE1_MASK  (0x2U)
#define SYSCTL0_STARTEN1_DSP_TIE_EXPSTATE1_SHIFT (1U)
#define SYSCTL0_STARTEN1_MU_MASK                 (0x4U)
#define SYSCTL0_STARTEN1_MU_SHIFT                (2U)
#define SYSCTL0_STARTEN1_GPIO_INT0_IRQ4_MASK     (0x8U)
#define SYSCTL0_STARTEN1_GPIO_INT0_IRQ4_SHIFT    (3U)
#define SYSCTL0_STARTEN1_GPIO_INT0_IRQ5_MASK     (0x10U)
#define SYSCTL0_STARTEN1_GPIO_INT0_IRQ5_SHIFT    (4U)
#define SYSCTL0_STARTEN1_GPIO_INT0_IRQ6_MASK     (0x20U)
#define SYSCTL0_STARTEN1_GPIO_INT0_IRQ6_SHIFT    (5U)
#define SYSCTL0_STARTEN1_GPIO_INT0_IRQ7_MASK     (0x40U)
#define SYSCTL0_STARTEN1_GPIO_INT0_IRQ7_SHIFT    (6U)
#define SYSCTL0_STARTEN1_CT32BIT2_MASK           (0x80U)
#define SYSCTL0_STARTEN1_CT32BIT2_SHIFT          (7U)
#define SYSCTL0_STARTEN1_CT32BIT4_MASK           (0x100U)
#define SYSCTL0_STARTEN1_CT32BIT4_SHIFT          (8U)
#define SYSCTL0_STARTEN1_OS_EVENT_TIMER_WU_MASK  (0x200U)
#define SYSCTL0_STARTEN1_OS_EVENT_TIMER_WU_SHIFT (9U)
#define SYSCTL0_STARTEN1_FLEXSPI_MASK            (0x400U)
#define SYSCTL0_STARTEN1_FLEXSPI_SHIFT           (10U)
#define SYSCTL0_STARTEN1_FLEXCOMM6_MASK          (0x800U)
#define SYSCTL0_STARTEN1_FLEXCOMM6_SHIFT         (11U)
#define SYSCTL0_STARTEN1_FLEXCOMM7_MASK          (0x1000U)
#define SYSCTL0_STARTEN1_FLEXCOMM7_SHIFT         (12U)
#define SYSCTL0_STARTEN1_SDIO0_MASK              (0x2000U)
#define SYSCTL0_STARTEN1_SDIO0_SHIFT             (13U)
#define SYSCTL0_STARTEN1_SDIO1_MASK              (0x4000U)
#define SYSCTL0_STARTEN1_SDIO1_SHIFT             (14U)
#define SYSCTL0_STARTEN1_SGPIO_INTA_MASK         (0x8000U)
#define SYSCTL0_STARTEN1_SGPIO_INTA_SHIFT        (15U)
#define SYSCTL0_STARTEN1_SGPIO_INTB_MASK         (0x10000U)
#define SYSCTL0_STARTEN1_SGPIO_INTB_SHIFT        (16U)
#define SYSCTL0_STARTEN1_USB0_NEEDCLK_MASK       (0x80000U)
#define SYSCTL0_STARTEN1_USB0_NEEDCLK_SHIFT      (19U)
#define SYSCTL0_STARTEN1_USB_PHYDCD_MASK         (0x200000U)
#define SYSCTL0_STARTEN1_USB_PHYDCD_SHIFT        (21U)
#define SYSCTL0_STARTEN1_DMAC1_MASK              (0x400000U)
#define SYSCTL0_STARTEN1_DMAC1_SHIFT             (22U)
#define SYSCTL0_STARTEN1_PUF_MASK                (0x800000U)
#define SYSCTL0_STARTEN1_PUF_SHIFT               (23U)
#define SYSCTL0_STARTEN1_POWERQUAD_MASK          (0x1000000U)
#define SYSCTL0_STARTEN1_POWERQUAD_SHIFT         (24U)
#define SYSCTL0_STARTEN1_CASPER_MASK             (0x2000000U)
#define SYSCTL0_STARTEN1_CASPER_SHIFT            (25U)
#define SYSCTL0_STARTEN1_PMIC_MASK               (0x4000000U)
#define SYSCTL0_STARTEN1_PMIC_SHIFT              (26U)
#define SYSCTL0_STARTEN1_SHA_MASK                (0x8000000U)
#define SYSCTL0_STARTEN1_SHA_SHIFT               (27U)
#define SYSCTL0_STARTEN1_FLEXCOMM8_MASK          (0x10000000U)
#define SYSCTL0_STARTEN1_FLEXCOMM8_SHIFT         (28U)
#define SYSCTL0_STARTEN1_FLEXCOMM9_MASK          (0x20000000U)
#define SYSCTL0_STARTEN1_FLEXCOMM9_SHIFT         (29U)
#define SYSCTL0_STARTEN1_FLEXCOMM10_MASK         (0x40000000U)
#define SYSCTL0_STARTEN1_FLEXCOMM10_SHIFT        (30U)
#define SYSCTL0_STARTEN1_FLEXCOMM11_MASK         (0x80000000U)
#define SYSCTL0_STARTEN1_FLEXCOMM11_SHIFT        (31U)
/*! @} */

/*! @name STARTEN2 - Start Enable 2 */
/*! @{ */
#define SYSCTL0_STARTEN2_FLEXCOMM12_MASK         (0x1U)
#define SYSCTL0_STARTEN2_FLEXCOMM12_SHIFT        (0U)
#define SYSCTL0_STARTEN2_FLEXCOMM13_MASK         (0x2U)
#define SYSCTL0_STARTEN2_FLEXCOMM13_SHIFT        (1U)
#define SYSCTL0_STARTEN2_FLEXCOMM16_MASK         (0x4U)
#define SYSCTL0_STARTEN2_FLEXCOMM16_SHIFT        (2U)
/*! @} */

/*! @name STARTEN0_SET - Start Enable 0 Set */
/*! @{ */
#define SYSCTL0_STARTEN0_SET_WDT0_MASK           (0x1U)
#define SYSCTL0_STARTEN0_SET_WDT0_SHIFT          (0U)
#define SYSCTL0_STARTEN0_SET_DMAC0_MASK          (0x2U)
#define SYSCTL0_STARTEN0_SET_DMAC0_SHIFT         (1U)
#define SYSCTL0_STARTEN0_SET_GPIO_INTA_MASK      (0x4U)
#define SYSCTL0_STARTEN0_SET_GPIO_INTA_SHIFT     (2U)
#define SYSCTL0_STARTEN0_SET_GPIO_INTB_MASK      (0x8U)
#define SYSCTL0_STARTEN0_SET_GPIO_INTB_SHIFT     (3U)
#define SYSCTL0_STARTEN0_SET_GPIO_INT0_IRQ0_MASK (0x10U)
#define SYSCTL0_STARTEN0_SET_GPIO_INT0_IRQ0_SHIFT (4U)
#define SYSCTL0_STARTEN0_SET_GPIO_INT0_IRQ1_MASK (0x20U)
#define SYSCTL0_STARTEN0_SET_GPIO_INT0_IRQ1_SHIFT (5U)
#define SYSCTL0_STARTEN0_SET_GPIO_INT0_IRQ2_MASK (0x40U)
#define SYSCTL0_STARTEN0_SET_GPIO_INT0_IRQ2_SHIFT (6U)
#define SYSCTL0_STARTEN0_SET_GPIO_INT0_IRQ3_MASK (0x80U)
#define SYSCTL0_STARTEN0_SET_GPIO_INT0_IRQ3_SHIFT (7U)
#define SYSCTL0_STARTEN0_SET_UTICK0_MASK         (0x100U)
#define SYSCTL0_STARTEN0_SET_UTICK0_SHIFT        (8U)
#define SYSCTL0_STARTEN0_SET_MRT0_MASK           (0x200U)
#define SYSCTL0_STARTEN0_SET_MRT0_SHIFT          (9U)
#define SYSCTL0_STARTEN0_SET_CT32BIT0_MASK       (0x400U)
#define SYSCTL0_STARTEN0_SET_CT32BIT0_SHIFT      (10U)
#define SYSCTL0_STARTEN0_SET_CT32BIT1_MASK       (0x800U)
#define SYSCTL0_STARTEN0_SET_CT32BIT1_SHIFT      (11U)
#define SYSCTL0_STARTEN0_SET_SCT0_MASK           (0x1000U)
#define SYSCTL0_STARTEN0_SET_SCT0_SHIFT          (12U)
#define SYSCTL0_STARTEN0_SET_CT32BIT3_MASK       (0x2000U)
#define SYSCTL0_STARTEN0_SET_CT32BIT3_SHIFT      (13U)
#define SYSCTL0_STARTEN0_SET_FLEXCOMM14_MASK     (0x100000U)
#define SYSCTL0_STARTEN0_SET_FLEXCOMM14_SHIFT    (20U)
#define SYSCTL0_STARTEN0_SET_FLEXCOMM15_MASK     (0x200000U)
#define SYSCTL0_STARTEN0_SET_FLEXCOMM15_SHIFT    (21U)
#define SYSCTL0_STARTEN0_SET_ADC0_MASK           (0x400000U)
#define SYSCTL0_STARTEN0_SET_ADC0_SHIFT          (22U)
#define SYSCTL0_STARTEN0_SET_ACMP_MASK           (0x1000000U)
#define SYSCTL0_STARTEN0_SET_ACMP_SHIFT          (24U)
#define SYSCTL0_STARTEN0_SET_DMIC0_MASK          (0x2000000U)
#define SYSCTL0_STARTEN0_SET_DMIC0_SHIFT         (25U)
#define SYSCTL0_STARTEN0_SET_HYPERVISOR_MASK     (0x8000000U)
#define SYSCTL0_STARTEN0_SET_HYPERVISOR_SHIFT    (27U)
#define SYSCTL0_STARTEN0_SET_SECUREVIOLATION_MASK (0x10000000U)
#define SYSCTL0_STARTEN0_SET_SECUREVIOLATION_SHIFT (28U)
#define SYSCTL0_STARTEN0_SET_HWVAD0_MASK         (0x20000000U)
#define SYSCTL0_STARTEN0_SET_HWVAD0_SHIFT        (29U)
#define SYSCTL0_STARTEN0_SET_PMC_MASK            (0x40000000U)
#define SYSCTL0_STARTEN0_SET_PMC_SHIFT           (30U)
#define SYSCTL0_STARTEN0_SET_RNG_MASK            (0x80000000U)
#define SYSCTL0_STARTEN0_SET_RNG_SHIFT           (31U)
/*! @} */

/*! @name STARTEN1_SET - Start Enable 1 Set */
/*! @{ */
#define SYSCTL0_STARTEN1_SET_RTC_LITE0_WAKEUP_MASK (0x1U)
#define SYSCTL0_STARTEN1_SET_RTC_LITE0_WAKEUP_SHIFT (0U)
#define SYSCTL0_STARTEN1_SET_DSP_TIE_EXPSTATE1_MASK (0x2U)
#define SYSCTL0_STARTEN1_SET_DSP_TIE_EXPSTATE1_SHIFT (1U)
#define SYSCTL0_STARTEN1_SET_MU_MASK             (0x4U)
#define SYSCTL0_STARTEN1_SET_MU_SHIFT            (2U)
#define SYSCTL0_STARTEN1_SET_GPIO_INT0_IRQ4_MASK (0x8U)
#define SYSCTL0_STARTEN1_SET_GPIO_INT0_IRQ4_SHIFT (3U)
#define SYSCTL0_STARTEN1_SET_GPIO_INT0_IRQ5_MASK (0x10U)
#define SYSCTL0_STARTEN1_SET_GPIO_INT0_IRQ5_SHIFT (4U)
#define SYSCTL0_STARTEN1_SET_GPIO_INT0_IRQ6_MASK (0x20U)
#define SYSCTL0_STARTEN1_SET_GPIO_INT0_IRQ6_SHIFT (5U)
#define SYSCTL0_STARTEN1_SET_GPIO_INT0_IRQ7_MASK (0x40U)
#define SYSCTL0_STARTEN1_SET_GPIO_INT0_IRQ7_SHIFT (6U)
#define SYSCTL0_STARTEN1_SET_CT32BIT2_MASK       (0x80U)
#define SYSCTL0_STARTEN1_SET_CT32BIT2_SHIFT      (7U)
#define SYSCTL0_STARTEN1_SET_CT32BIT4_MASK       (0x100U)
#define SYSCTL0_STARTEN1_SET_CT32BIT4_SHIFT      (8U)
#define SYSCTL0_STARTEN1_SET_OS_EVENT_TIMER_WU_MASK (0x200U)
#define SYSCTL0_STARTEN1_SET_OS_EVENT_TIMER_WU_SHIFT (9U)
#define SYSCTL0_STARTEN1_SET_FLEXSPI_MASK        (0x400U)
#define SYSCTL0_STARTEN1_SET_FLEXSPI_SHIFT       (10U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM6_MASK      (0x800U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM6_SHIFT     (11U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM7_MASK      (0x1000U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM7_SHIFT     (12U)
#define SYSCTL0_STARTEN1_SET_SDIO0_MASK          (0x2000U)
#define SYSCTL0_STARTEN1_SET_SDIO0_SHIFT         (13U)
#define SYSCTL0_STARTEN1_SET_SDIO1_MASK          (0x4000U)
#define SYSCTL0_STARTEN1_SET_SDIO1_SHIFT         (14U)
#define SYSCTL0_STARTEN1_SET_SGPIO_INTA_MASK     (0x8000U)
#define SYSCTL0_STARTEN1_SET_SGPIO_INTA_SHIFT    (15U)
#define SYSCTL0_STARTEN1_SET_SGPIO_INTB_MASK     (0x10000U)
#define SYSCTL0_STARTEN1_SET_SGPIO_INTB_SHIFT    (16U)
#define SYSCTL0_STARTEN1_SET_USB0_NEEDCLK_MASK   (0x80000U)
#define SYSCTL0_STARTEN1_SET_USB0_NEEDCLK_SHIFT  (19U)
#define SYSCTL0_STARTEN1_SET_USB_PHYDCD_MASK     (0x200000U)
#define SYSCTL0_STARTEN1_SET_USB_PHYDCD_SHIFT    (21U)
#define SYSCTL0_STARTEN1_SET_DMAC1_MASK          (0x400000U)
#define SYSCTL0_STARTEN1_SET_DMAC1_SHIFT         (22U)
#define SYSCTL0_STARTEN1_SET_PUF_MASK            (0x800000U)
#define SYSCTL0_STARTEN1_SET_PUF_SHIFT           (23U)
#define SYSCTL0_STARTEN1_SET_POWERQUAD_MASK      (0x1000000U)
#define SYSCTL0_STARTEN1_SET_POWERQUAD_SHIFT     (24U)
#define SYSCTL0_STARTEN1_SET_CASPER_MASK         (0x2000000U)
#define SYSCTL0_STARTEN1_SET_CASPER_SHIFT        (25U)
#define SYSCTL0_STARTEN1_SET_PMIC_MASK           (0x4000000U)
#define SYSCTL0_STARTEN1_SET_PMIC_SHIFT          (26U)
#define SYSCTL0_STARTEN1_SET_SHA_MASK            (0x8000000U)
#define SYSCTL0_STARTEN1_SET_SHA_SHIFT           (27U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM8_MASK      (0x10000000U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM8_SHIFT     (28U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM9_MASK      (0x20000000U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM9_SHIFT     (29U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM10_MASK     (0x40000000U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM10_SHIFT    (30U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM11_MASK     (0x80000000U)
#define SYSCTL0_STARTEN1_SET_FLEXCOMM11_SHIFT    (31U)
/*! @} */

/*! @name STARTEN2_SET - Start Enable 2 */
/*! @{ */
#define SYSCTL0_STARTEN2_SET_FLEXCOMMC12_MASK    (0x1U)
#define SYSCTL0_STARTEN2_SET_FLEXCOMMC12_SHIFT   (0U)
#define SYSCTL0_STARTEN2_SET_FLEXCOMM13_MASK     (0x2U)
#define SYSCTL0_STARTEN2_SET_FLEXCOMM13_SHIFT    (1U)
#define SYSCTL0_STARTEN2_SET_FLEXCOMM16_MASK     (0x4U)
#define SYSCTL0_STARTEN2_SET_FLEXCOMM16_SHIFT    (2U)
/*! @} */

/*! @name STARTEN0_CLR - Start Enable 0 clear */
/*! @{ */
#define SYSCTL0_STARTEN0_CLR_WDT0_MASK           (0x1U)
#define SYSCTL0_STARTEN0_CLR_WDT0_SHIFT          (0U)
#define SYSCTL0_STARTEN0_CLR_DMAC0_MASK          (0x2U)
#define SYSCTL0_STARTEN0_CLR_DMAC0_SHIFT         (1U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INTA_MASK      (0x4U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INTA_SHIFT     (2U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INTB_MASK      (0x8U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INTB_SHIFT     (3U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INT0_IRQ0_MASK (0x10U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INT0_IRQ0_SHIFT (4U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INT0_IRQ1_MASK (0x20U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INT0_IRQ1_SHIFT (5U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INT0_IRQ2_MASK (0x40U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INT0_IRQ2_SHIFT (6U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INT0_IRQ3_MASK (0x80U)
#define SYSCTL0_STARTEN0_CLR_GPIO_INT0_IRQ3_SHIFT (7U)
#define SYSCTL0_STARTEN0_CLR_UTICK0_MASK         (0x100U)
#define SYSCTL0_STARTEN0_CLR_UTICK0_SHIFT        (8U)
#define SYSCTL0_STARTEN0_CLR_MRT0_MASK           (0x200U)
#define SYSCTL0_STARTEN0_CLR_MRT0_SHIFT          (9U)
#define SYSCTL0_STARTEN0_CLR_CT32BIT0_MASK       (0x400U)
#define SYSCTL0_STARTEN0_CLR_CT32BIT0_SHIFT      (10U)
#define SYSCTL0_STARTEN0_CLR_CT32BIT1_MASK       (0x800U)
#define SYSCTL0_STARTEN0_CLR_CT32BIT1_SHIFT      (11U)
#define SYSCTL0_STARTEN0_CLR_SCT0_MASK           (0x1000U)
#define SYSCTL0_STARTEN0_CLR_SCT0_SHIFT          (12U)
#define SYSCTL0_STARTEN0_CLR_CT32BIT3_MASK       (0x2000U)
#define SYSCTL0_STARTEN0_CLR_CT32BIT3_SHIFT      (13U)
#define SYSCTL0_STARTEN0_CLR_FLEXCOMM14_MASK     (0x100000U)
#define SYSCTL0_STARTEN0_CLR_FLEXCOMM14_SHIFT    (20U)
#define SYSCTL0_STARTEN0_CLR_FLEXCOMM15_MASK     (0x200000U)
#define SYSCTL0_STARTEN0_CLR_FLEXCOMM15_SHIFT    (21U)
#define SYSCTL0_STARTEN0_CLR_ADC0_MASK           (0x400000U)
#define SYSCTL0_STARTEN0_CLR_ADC0_SHIFT          (22U)
#define SYSCTL0_STARTEN0_CLR_ACMP_MASK           (0x1000000U)
#define SYSCTL0_STARTEN0_CLR_ACMP_SHIFT          (24U)
#define SYSCTL0_STARTEN0_CLR_DMIC0_MASK          (0x2000000U)
#define SYSCTL0_STARTEN0_CLR_DMIC0_SHIFT         (25U)
#define SYSCTL0_STARTEN0_CLR_HYPERVISOR_MASK     (0x8000000U)
#define SYSCTL0_STARTEN0_CLR_HYPERVISOR_SHIFT    (27U)
#define SYSCTL0_STARTEN0_CLR_SECUREVIOLATION_MASK (0x10000000U)
#define SYSCTL0_STARTEN0_CLR_SECUREVIOLATION_SHIFT (28U)
#define SYSCTL0_STARTEN0_CLR_HWVAD0_MASK         (0x20000000U)
#define SYSCTL0_STARTEN0_CLR_HWVAD0_SHIFT        (29U)
#define SYSCTL0_STARTEN0_CLR_PMC_MASK            (0x40000000U)
#define SYSCTL0_STARTEN0_CLR_PMC_SHIFT           (30U)
#define SYSCTL0_STARTEN0_CLR_RNG_MASK            (0x80000000U)
#define SYSCTL0_STARTEN0_CLR_RNG_SHIFT           (31U)
/*! @} */

/*! @name STARTEN1_CLR - Start Enable 1 clear */
/*! @{ */
#define SYSCTL0_STARTEN1_CLR_RTC_LITE0_WAKEUP_MASK (0x1U)
#define SYSCTL0_STARTEN1_CLR_RTC_LITE0_WAKEUP_SHIFT (0U)
#define SYSCTL0_STARTEN1_CLR_MU_MASK             (0x4U)
#define SYSCTL0_STARTEN1_CLR_MU_SHIFT            (2U)
#define SYSCTL0_STARTEN1_CLR_GPIO_INT0_IRQ4_MASK (0x8U)
#define SYSCTL0_STARTEN1_CLR_GPIO_INT0_IRQ4_SHIFT (3U)
#define SYSCTL0_STARTEN1_CLR_GPIO_INT0_IRQ5_MASK (0x10U)
#define SYSCTL0_STARTEN1_CLR_GPIO_INT0_IRQ5_SHIFT (4U)
#define SYSCTL0_STARTEN1_CLR_GPIO_INT0_IRQ6_MASK (0x20U)
#define SYSCTL0_STARTEN1_CLR_GPIO_INT0_IRQ6_SHIFT (5U)
#define SYSCTL0_STARTEN1_CLR_GPIO_INT0_IRQ7_MASK (0x40U)
#define SYSCTL0_STARTEN1_CLR_GPIO_INT0_IRQ7_SHIFT (6U)
#define SYSCTL0_STARTEN1_CLR_CT32BIT2_MASK       (0x80U)
#define SYSCTL0_STARTEN1_CLR_CT32BIT2_SHIFT      (7U)
#define SYSCTL0_STARTEN1_CLR_CT32BIT4_MASK       (0x100U)
#define SYSCTL0_STARTEN1_CLR_CT32BIT4_SHIFT      (8U)
#define SYSCTL0_STARTEN1_CLR_OS_EVENT_TIMER_WU_MASK (0x200U)
#define SYSCTL0_STARTEN1_CLR_OS_EVENT_TIMER_WU_SHIFT (9U)
#define SYSCTL0_STARTEN1_CLR_FLEXSPI_MASK        (0x400U)
#define SYSCTL0_STARTEN1_CLR_FLEXSPI_SHIFT       (10U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM6_MASK      (0x800U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM6_SHIFT     (11U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM7_MASK      (0x1000U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM7_SHIFT     (12U)
#define SYSCTL0_STARTEN1_CLR_SDIO0_MASK          (0x2000U)
#define SYSCTL0_STARTEN1_CLR_SDIO0_SHIFT         (13U)
#define SYSCTL0_STARTEN1_CLR_SDIO1_MASK          (0x4000U)
#define SYSCTL0_STARTEN1_CLR_SDIO1_SHIFT         (14U)
#define SYSCTL0_STARTEN1_CLR_SGPIO_INTA_MASK     (0x8000U)
#define SYSCTL0_STARTEN1_CLR_SGPIO_INTA_SHIFT    (15U)
#define SYSCTL0_STARTEN1_CLR_SGPIO_INTB_MASK     (0x10000U)
#define SYSCTL0_STARTEN1_CLR_SGPIO_INTB_SHIFT    (16U)
#define SYSCTL0_STARTEN1_CLR_USB0_NEEDCLK_MASK   (0x80000U)
#define SYSCTL0_STARTEN1_CLR_USB0_NEEDCLK_SHIFT  (19U)
#define SYSCTL0_STARTEN1_CLR_USB_PHYDCD_MASK     (0x200000U)
#define SYSCTL0_STARTEN1_CLR_USB_PHYDCD_SHIFT    (21U)
#define SYSCTL0_STARTEN1_CLR_DMAC1_MASK          (0x400000U)
#define SYSCTL0_STARTEN1_CLR_DMAC1_SHIFT         (22U)
#define SYSCTL0_STARTEN1_CLR_PUF_MASK            (0x800000U)
#define SYSCTL0_STARTEN1_CLR_PUF_SHIFT           (23U)
#define SYSCTL0_STARTEN1_CLR_POWERQUAD_MASK      (0x1000000U)
#define SYSCTL0_STARTEN1_CLR_POWERQUAD_SHIFT     (24U)
#define SYSCTL0_STARTEN1_CLR_CASPER_MASK         (0x2000000U)
#define SYSCTL0_STARTEN1_CLR_CASPER_SHIFT        (25U)
#define SYSCTL0_STARTEN1_CLR_PMIC_MASK           (0x4000000U)
#define SYSCTL0_STARTEN1_CLR_PMIC_SHIFT          (26U)
#define SYSCTL0_STARTEN1_CLR_SHA_MASK            (0x8000000U)
#define SYSCTL0_STARTEN1_CLR_SHA_SHIFT           (27U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM8_MASK      (0x10000000U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM8_SHIFT     (28U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM9_MASK      (0x20000000U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM9_SHIFT     (29U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM10_MASK     (0x40000000U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM10_SHIFT    (30U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM11_MASK     (0x80000000U)
#define SYSCTL0_STARTEN1_CLR_FLEXCOMM11_SHIFT    (31U)
/*! @} */

/*! @name STARTEN2_CLR - Start Enable 2 */
/*! @{ */
#define SYSCTL0_STARTEN2_CLR_FLEXCOMM12_MASK     (0x1U)
#define SYSCTL0_STARTEN2_CLR_FLEXCOMM12_SHIFT    (0U)
#define SYSCTL0_STARTEN2_CLR_FLEXCOMM13_MASK     (0x2U)
#define SYSCTL0_STARTEN2_CLR_FLEXCOMM13_SHIFT    (1U)
#define SYSCTL0_STARTEN2_CLR_FLEXCOMM16_MASK     (0x4U)
#define SYSCTL0_STARTEN2_CLR_FLEXCOMM16_SHIFT    (2U)
/*! @} */

/*! @name HWWAKE - Hardware Wake */
/*! @{ */
#define SYSCTL0_HWWAKE_FORCEWAKE_MASK            (0x1U)
#define SYSCTL0_HWWAKE_FORCEWAKE_SHIFT           (0U)
#define SYSCTL0_HWWAKE_FCWAKE_MASK               (0x2U)
#define SYSCTL0_HWWAKE_FCWAKE_SHIFT              (1U)
#define SYSCTL0_HWWAKE_DMICWAKE_MASK             (0x4U)
#define SYSCTL0_HWWAKE_DMICWAKE_SHIFT            (2U)
#define SYSCTL0_HWWAKE_DMAC0WAKE_MASK            (0x8U)
#define SYSCTL0_HWWAKE_DMAC0WAKE_SHIFT           (3U)
#define SYSCTL0_HWWAKE_DMAC1WAKE_MASK            (0x10U)
#define SYSCTL0_HWWAKE_DMAC1WAKE_SHIFT           (4U)
/*! @} */

/*! @name TEMPSENSORCTL - Temperature Sensor Control */
/*! @{ */
#define SYSCTL0_TEMPSENSORCTL_TSSRC_MASK         (0x1U)
#define SYSCTL0_TEMPSENSORCTL_TSSRC_SHIFT        (0U)
/*! @} */

/*! @name BOOTSTATELOCK - Boot State Lock */
/*! @{ */
#define SYSCTL0_BOOTSTATELOCK_BOOTSTATESEEDLOCK_MASK (0x1U)
#define SYSCTL0_BOOTSTATELOCK_BOOTSTATESEEDLOCK_SHIFT (0U)
#define SYSCTL0_BOOTSTATELOCK_BOOTSTATEHMACLOCK_MASK (0x2U)
#define SYSCTL0_BOOTSTATELOCK_BOOTSTATEHMACLOCK_SHIFT (1U)
/*! @} */

/*! @name BOOTSTATESEED - Boot State Seed */
/*! @{ */
#define SYSCTL0_BOOTSTATESEED_BOOTSTATESEED_MASK (0xFFFFFFFFU)
#define SYSCTL0_BOOTSTATESEED_BOOTSTATESEED_SHIFT (0U)
/*! BOOTSTATESEED - BOOTSTATESEED[0:7]
 */
#define SYSCTL0_BOOTSTATESEED_BOOTSTATESEED(x)   (((uint32_t)(((uint32_t)(x)) << SYSCTL0_BOOTSTATESEED_BOOTSTATESEED_SHIFT)) & SYSCTL0_BOOTSTATESEED_BOOTSTATESEED_MASK)
/*! @} */

/* The count of SYSCTL0_BOOTSTATESEED */
#define SYSCTL0_BOOTSTATESEED_COUNT              (8U)

/*! @name BOOTSTATEHMAC - HMAC of boot state used for attestation. */
/*! @{ */
#define SYSCTL0_BOOTSTATEHMAC_BOOTSTATEHMAC_MASK (0xFFFFFFFFU)
#define SYSCTL0_BOOTSTATEHMAC_BOOTSTATEHMAC_SHIFT (0U)
/*! BOOTSTATEHMAC - BOOTSTATEHMAC[0:7]
 */
#define SYSCTL0_BOOTSTATEHMAC_BOOTSTATEHMAC(x)   (((uint32_t)(((uint32_t)(x)) << SYSCTL0_BOOTSTATEHMAC_BOOTSTATEHMAC_SHIFT)) & SYSCTL0_BOOTSTATEHMAC_BOOTSTATEHMAC_MASK)
/*! @} */

/* The count of SYSCTL0_BOOTSTATEHMAC */
#define SYSCTL0_BOOTSTATEHMAC_COUNT              (8U)

/*! @name FLEXSPI0PADCTL - FLEXSPI0 Pad Control */
/*! @{ */
#define SYSCTL0_FLEXSPI0PADCTL_RASRCN_3_0_MASK   (0xFU)
#define SYSCTL0_FLEXSPI0PADCTL_RASRCN_3_0_SHIFT  (0U)
/*! RASRCN_3_0 - Drives FLEXSPI0 Pad Compensation Circuit
 */
#define SYSCTL0_FLEXSPI0PADCTL_RASRCN_3_0(x)     (((uint32_t)(((uint32_t)(x)) << SYSCTL0_FLEXSPI0PADCTL_RASRCN_3_0_SHIFT)) & SYSCTL0_FLEXSPI0PADCTL_RASRCN_3_0_MASK)
#define SYSCTL0_FLEXSPI0PADCTL_RASRCP_3_0_MASK   (0xF0U)
#define SYSCTL0_FLEXSPI0PADCTL_RASRCP_3_0_SHIFT  (4U)
/*! RASRCP_3_0 - Drives FLEXSPI0 Pad Compensation Circuit
 */
#define SYSCTL0_FLEXSPI0PADCTL_RASRCP_3_0(x)     (((uint32_t)(((uint32_t)(x)) << SYSCTL0_FLEXSPI0PADCTL_RASRCP_3_0_SHIFT)) & SYSCTL0_FLEXSPI0PADCTL_RASRCP_3_0_MASK)
#define SYSCTL0_FLEXSPI0PADCTL_FASTFRZ_MASK      (0x100U)
#define SYSCTL0_FLEXSPI0PADCTL_FASTFRZ_SHIFT     (8U)
#define SYSCTL0_FLEXSPI0PADCTL_FREEZE_MASK       (0x200U)
#define SYSCTL0_FLEXSPI0PADCTL_FREEZE_SHIFT      (9U)
#define SYSCTL0_FLEXSPI0PADCTL_COMPTQ_MASK       (0x400U)
#define SYSCTL0_FLEXSPI0PADCTL_COMPTQ_SHIFT      (10U)
#define SYSCTL0_FLEXSPI0PADCTL_COMPEN_MASK       (0x800U)
#define SYSCTL0_FLEXSPI0PADCTL_COMPEN_SHIFT      (11U)
#define SYSCTL0_FLEXSPI0PADCTL_NASRCN_MASK       (0xF0000U)
#define SYSCTL0_FLEXSPI0PADCTL_NASRCN_SHIFT      (16U)
/*! NASRCN - FLEXSPI0 Pad Compensation Circuit Status
 */
#define SYSCTL0_FLEXSPI0PADCTL_NASRCN(x)         (((uint32_t)(((uint32_t)(x)) << SYSCTL0_FLEXSPI0PADCTL_NASRCN_SHIFT)) & SYSCTL0_FLEXSPI0PADCTL_NASRCN_MASK)
#define SYSCTL0_FLEXSPI0PADCTL_NASRCP_MASK       (0xF00000U)
#define SYSCTL0_FLEXSPI0PADCTL_NASRCP_SHIFT      (20U)
/*! NASRCP - FLEXSPI0 Pad Compensation Circuit Status
 */
#define SYSCTL0_FLEXSPI0PADCTL_NASRCP(x)         (((uint32_t)(((uint32_t)(x)) << SYSCTL0_FLEXSPI0PADCTL_NASRCP_SHIFT)) & SYSCTL0_FLEXSPI0PADCTL_NASRCP_MASK)
#define SYSCTL0_FLEXSPI0PADCTL_COMPOK_MASK       (0x1000000U)
#define SYSCTL0_FLEXSPI0PADCTL_COMPOK_SHIFT      (24U)
/*! @} */

/*! @name FLEXSPI1PADCTL - FLEXSPI1 Pad Control */
/*! @{ */
#define SYSCTL0_FLEXSPI1PADCTL_RASRCN_3_0_MASK   (0xFU)
#define SYSCTL0_FLEXSPI1PADCTL_RASRCN_3_0_SHIFT  (0U)
/*! RASRCN_3_0 - Drives FLEXSPI1 Pad Compensation Circuit
 */
#define SYSCTL0_FLEXSPI1PADCTL_RASRCN_3_0(x)     (((uint32_t)(((uint32_t)(x)) << SYSCTL0_FLEXSPI1PADCTL_RASRCN_3_0_SHIFT)) & SYSCTL0_FLEXSPI1PADCTL_RASRCN_3_0_MASK)
#define SYSCTL0_FLEXSPI1PADCTL_RASRCP_3_0_MASK   (0xF0U)
#define SYSCTL0_FLEXSPI1PADCTL_RASRCP_3_0_SHIFT  (4U)
/*! RASRCP_3_0 - Drives FLEXSPI1 Pad Compensation Circuit
 */
#define SYSCTL0_FLEXSPI1PADCTL_RASRCP_3_0(x)     (((uint32_t)(((uint32_t)(x)) << SYSCTL0_FLEXSPI1PADCTL_RASRCP_3_0_SHIFT)) & SYSCTL0_FLEXSPI1PADCTL_RASRCP_3_0_MASK)
#define SYSCTL0_FLEXSPI1PADCTL_FASTFRZ_MASK      (0x100U)
#define SYSCTL0_FLEXSPI1PADCTL_FASTFRZ_SHIFT     (8U)
#define SYSCTL0_FLEXSPI1PADCTL_FREEZE_MASK       (0x200U)
#define SYSCTL0_FLEXSPI1PADCTL_FREEZE_SHIFT      (9U)
#define SYSCTL0_FLEXSPI1PADCTL_COMPTQ_MASK       (0x400U)
#define SYSCTL0_FLEXSPI1PADCTL_COMPTQ_SHIFT      (10U)
#define SYSCTL0_FLEXSPI1PADCTL_COMPEN_MASK       (0x800U)
#define SYSCTL0_FLEXSPI1PADCTL_COMPEN_SHIFT      (11U)
#define SYSCTL0_FLEXSPI1PADCTL_NASRCN_3_0_MASK   (0xF0000U)
#define SYSCTL0_FLEXSPI1PADCTL_NASRCN_3_0_SHIFT  (16U)
/*! NASRCN_3_0 - FLEXSPI1 Pad Compensation Circuit Status
 */
#define SYSCTL0_FLEXSPI1PADCTL_NASRCN_3_0(x)     (((uint32_t)(((uint32_t)(x)) << SYSCTL0_FLEXSPI1PADCTL_NASRCN_3_0_SHIFT)) & SYSCTL0_FLEXSPI1PADCTL_NASRCN_3_0_MASK)
#define SYSCTL0_FLEXSPI1PADCTL_NASRCP_3_0_MASK   (0xF00000U)
#define SYSCTL0_FLEXSPI1PADCTL_NASRCP_3_0_SHIFT  (20U)
/*! NASRCP_3_0 - FLEXSPI1 Pad Compensation Circuit Status
 */
#define SYSCTL0_FLEXSPI1PADCTL_NASRCP_3_0(x)     (((uint32_t)(((uint32_t)(x)) << SYSCTL0_FLEXSPI1PADCTL_NASRCP_3_0_SHIFT)) & SYSCTL0_FLEXSPI1PADCTL_NASRCP_3_0_MASK)
#define SYSCTL0_FLEXSPI1PADCTL_COMPOK_MASK       (0x1000000U)
#define SYSCTL0_FLEXSPI1PADCTL_COMPOK_SHIFT      (24U)
/*! @} */

/*! @name SDIO0PADCTL - SDIO0 Pad Control */
/*! @{ */
#define SYSCTL0_SDIO0PADCTL_RASRCN_MASK          (0xFU)
#define SYSCTL0_SDIO0PADCTL_RASRCN_SHIFT         (0U)
/*! RASRCN - Drives SDIO0 Pad Compensation Circuit
 */
#define SYSCTL0_SDIO0PADCTL_RASRCN(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SDIO0PADCTL_RASRCN_SHIFT)) & SYSCTL0_SDIO0PADCTL_RASRCN_MASK)
#define SYSCTL0_SDIO0PADCTL_RASRCP_MASK          (0xF0U)
#define SYSCTL0_SDIO0PADCTL_RASRCP_SHIFT         (4U)
/*! RASRCP - Drives SDIO0 Pad Compensation Circuit
 */
#define SYSCTL0_SDIO0PADCTL_RASRCP(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SDIO0PADCTL_RASRCP_SHIFT)) & SYSCTL0_SDIO0PADCTL_RASRCP_MASK)
#define SYSCTL0_SDIO0PADCTL_FASTFRZ_MASK         (0x100U)
#define SYSCTL0_SDIO0PADCTL_FASTFRZ_SHIFT        (8U)
#define SYSCTL0_SDIO0PADCTL_FREEZE_MASK          (0x200U)
#define SYSCTL0_SDIO0PADCTL_FREEZE_SHIFT         (9U)
#define SYSCTL0_SDIO0PADCTL_COMPTQ_MASK          (0x400U)
#define SYSCTL0_SDIO0PADCTL_COMPTQ_SHIFT         (10U)
#define SYSCTL0_SDIO0PADCTL_COMPEN_MASK          (0x800U)
#define SYSCTL0_SDIO0PADCTL_COMPEN_SHIFT         (11U)
#define SYSCTL0_SDIO0PADCTL_NASRCN_MASK          (0xF0000U)
#define SYSCTL0_SDIO0PADCTL_NASRCN_SHIFT         (16U)
/*! NASRCN - SDIO0 Pad Compensation Circuit Status
 */
#define SYSCTL0_SDIO0PADCTL_NASRCN(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SDIO0PADCTL_NASRCN_SHIFT)) & SYSCTL0_SDIO0PADCTL_NASRCN_MASK)
#define SYSCTL0_SDIO0PADCTL_NASRCP_MASK          (0xF00000U)
#define SYSCTL0_SDIO0PADCTL_NASRCP_SHIFT         (20U)
/*! NASRCP - SDIO0 Pad Compensation Circuit Status
 */
#define SYSCTL0_SDIO0PADCTL_NASRCP(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SDIO0PADCTL_NASRCP_SHIFT)) & SYSCTL0_SDIO0PADCTL_NASRCP_MASK)
#define SYSCTL0_SDIO0PADCTL_COMPOK_MASK          (0x1000000U)
#define SYSCTL0_SDIO0PADCTL_COMPOK_SHIFT         (24U)
/*! @} */

/*! @name SDIO1PADCTL - SDIO1 Pad Control */
/*! @{ */
#define SYSCTL0_SDIO1PADCTL_RASRCN_MASK          (0xFU)
#define SYSCTL0_SDIO1PADCTL_RASRCN_SHIFT         (0U)
/*! RASRCN - Drives SDIO1 Pad Compensation Circuit
 */
#define SYSCTL0_SDIO1PADCTL_RASRCN(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SDIO1PADCTL_RASRCN_SHIFT)) & SYSCTL0_SDIO1PADCTL_RASRCN_MASK)
#define SYSCTL0_SDIO1PADCTL_RASRCP_MASK          (0xF0U)
#define SYSCTL0_SDIO1PADCTL_RASRCP_SHIFT         (4U)
/*! RASRCP - Drives SDIO1 Pad Compensation Circuit
 */
#define SYSCTL0_SDIO1PADCTL_RASRCP(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SDIO1PADCTL_RASRCP_SHIFT)) & SYSCTL0_SDIO1PADCTL_RASRCP_MASK)
#define SYSCTL0_SDIO1PADCTL_FASTFRZ_MASK         (0x100U)
#define SYSCTL0_SDIO1PADCTL_FASTFRZ_SHIFT        (8U)
#define SYSCTL0_SDIO1PADCTL_FREEZE_MASK          (0x200U)
#define SYSCTL0_SDIO1PADCTL_FREEZE_SHIFT         (9U)
#define SYSCTL0_SDIO1PADCTL_COMPTQ_MASK          (0x400U)
#define SYSCTL0_SDIO1PADCTL_COMPTQ_SHIFT         (10U)
#define SYSCTL0_SDIO1PADCTL_COMPEN_MASK          (0x800U)
#define SYSCTL0_SDIO1PADCTL_COMPEN_SHIFT         (11U)
#define SYSCTL0_SDIO1PADCTL_NASRCN_MASK          (0xF0000U)
#define SYSCTL0_SDIO1PADCTL_NASRCN_SHIFT         (16U)
/*! NASRCN - SDIO1 Pad Compensation Circuit Status
 */
#define SYSCTL0_SDIO1PADCTL_NASRCN(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SDIO1PADCTL_NASRCN_SHIFT)) & SYSCTL0_SDIO1PADCTL_NASRCN_MASK)
#define SYSCTL0_SDIO1PADCTL_NASRCP_MASK          (0xF00000U)
#define SYSCTL0_SDIO1PADCTL_NASRCP_SHIFT         (20U)
/*! NASRCP - SDIO1 Pad Compensation Circuit Status
 */
#define SYSCTL0_SDIO1PADCTL_NASRCP(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL0_SDIO1PADCTL_NASRCP_SHIFT)) & SYSCTL0_SDIO1PADCTL_NASRCP_MASK)
#define SYSCTL0_SDIO1PADCTL_COMPOK_MASK          (0x1000000U)
#define SYSCTL0_SDIO1PADCTL_COMPOK_SHIFT         (24U)
/*! @} */

/*! @name DICEHWREGN - Compound Device Identifier (CDI) */
/*! @{ */
#define SYSCTL0_DICEHWREGN_DICEHWREGN_MASK       (0xFFFFFFFFU)
#define SYSCTL0_DICEHWREGN_DICEHWREGN_SHIFT      (0U)
/*! DICEHWREGN - DICE General Purpose 32-Bit Data Register
 */
#define SYSCTL0_DICEHWREGN_DICEHWREGN(x)         (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DICEHWREGN_DICEHWREGN_SHIFT)) & SYSCTL0_DICEHWREGN_DICEHWREGN_MASK)
/*! @} */

/*! @name UUID - UUID */
/*! @{ */
#define SYSCTL0_UUID_UUIDN_MASK                  (0xFFFFFFFFU)
#define SYSCTL0_UUID_UUIDN_SHIFT                 (0U)
/*! UUIDN - UUIDn 32-Bit Data Register
 */
#define SYSCTL0_UUID_UUIDN(x)                    (((uint32_t)(((uint32_t)(x)) << SYSCTL0_UUID_UUIDN_SHIFT)) & SYSCTL0_UUID_UUIDN_MASK)
/*! @} */

/* The count of SYSCTL0_UUID */
#define SYSCTL0_UUID_COUNT                       (4U)

/*! @name AESKEY_SRCSEL - AES Key Source Select */
/*! @{ */
#define SYSCTL0_AESKEY_SRCSEL_AESKEY_SRCSEL_MASK (0x3U)
#define SYSCTL0_AESKEY_SRCSEL_AESKEY_SRCSEL_SHIFT (0U)
/*! AESKEY_SRCSEL - AES Key Source Select
 *  0b00..PUF
 *  0b01..PUF
 *  0b10..OTP
 *  0b11..PUF
 */
#define SYSCTL0_AESKEY_SRCSEL_AESKEY_SRCSEL(x)   (((uint32_t)(((uint32_t)(x)) << SYSCTL0_AESKEY_SRCSEL_AESKEY_SRCSEL_SHIFT)) & SYSCTL0_AESKEY_SRCSEL_AESKEY_SRCSEL_MASK)
/*! @} */

/*! @name OTFADKEY_SRCSEL - OTFAD Key Source Select */
/*! @{ */
#define SYSCTL0_OTFADKEY_SRCSEL_OTFADKEY_SRCSEL_MASK (0x3U)
#define SYSCTL0_OTFADKEY_SRCSEL_OTFADKEY_SRCSEL_SHIFT (0U)
/*! OTFADKEY_SRCSEL - OTFAD Key Source Select
 *  0b00..PUF
 *  0b01..PUF
 *  0b10..OTP
 *  0b11..PUF
 */
#define SYSCTL0_OTFADKEY_SRCSEL_OTFADKEY_SRCSEL(x) (((uint32_t)(((uint32_t)(x)) << SYSCTL0_OTFADKEY_SRCSEL_OTFADKEY_SRCSEL_SHIFT)) & SYSCTL0_OTFADKEY_SRCSEL_OTFADKEY_SRCSEL_MASK)
/*! @} */

/*! @name HASHHWKEYDISABLE - HASH Hardware Key Disable */
/*! @{ */
#define SYSCTL0_HASHHWKEYDISABLE_HASHHWKEYDISABLE_MASK (0xFFFFFFFFU)
#define SYSCTL0_HASHHWKEYDISABLE_HASHHWKEYDISABLE_SHIFT (0U)
/*! HASHHWKEYDISABLE - HASH Hardware Key Disable
 */
#define SYSCTL0_HASHHWKEYDISABLE_HASHHWKEYDISABLE(x) (((uint32_t)(((uint32_t)(x)) << SYSCTL0_HASHHWKEYDISABLE_HASHHWKEYDISABLE_SHIFT)) & SYSCTL0_HASHHWKEYDISABLE_HASHHWKEYDISABLE_MASK)
/*! @} */

/*! @name DBG_LOCKEN - Debug Lock Enable */
/*! @{ */
#define SYSCTL0_DBG_LOCKEN_DBG_LOCKEN_MASK       (0xFU)
#define SYSCTL0_DBG_LOCKEN_DBG_LOCKEN_SHIFT      (0U)
/*! DBG_LOCKEN - Debug Write Lock the following registers
 */
#define SYSCTL0_DBG_LOCKEN_DBG_LOCKEN(x)         (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DBG_LOCKEN_DBG_LOCKEN_SHIFT)) & SYSCTL0_DBG_LOCKEN_DBG_LOCKEN_MASK)
/*! @} */

/*! @name DBG_FEATURES - Debug Features */
/*! @{ */
#define SYSCTL0_DBG_FEATURES_DBGEN1_MASK         (0x3U)
#define SYSCTL0_DBG_FEATURES_DBGEN1_SHIFT        (0U)
/*! DBGEN1 - CM33 Debug Enable Control
 *  0b10..Enabled
 *  0b01..Disabled
 *  0b00..Disabled
 *  0b11..Disabled
 */
#define SYSCTL0_DBG_FEATURES_DBGEN1(x)           (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DBG_FEATURES_DBGEN1_SHIFT)) & SYSCTL0_DBG_FEATURES_DBGEN1_MASK)
#define SYSCTL0_DBG_FEATURES_NIDEN1_MASK         (0xCU)
#define SYSCTL0_DBG_FEATURES_NIDEN1_SHIFT        (2U)
/*! NIDEN1 - CM33 NID Enable Control
 *  0b10..Enabled
 *  0b01..Disabled
 *  0b00..Disabled
 *  0b11..Disabled
 */
#define SYSCTL0_DBG_FEATURES_NIDEN1(x)           (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DBG_FEATURES_NIDEN1_SHIFT)) & SYSCTL0_DBG_FEATURES_NIDEN1_MASK)
#define SYSCTL0_DBG_FEATURES_SPIDEN1_MASK        (0x30U)
#define SYSCTL0_DBG_FEATURES_SPIDEN1_SHIFT       (4U)
/*! SPIDEN1 - CM33 SPID Enable Control
 *  0b10..Enabled
 *  0b01..Disabled
 *  0b00..Disabled
 *  0b11..Disabled
 */
#define SYSCTL0_DBG_FEATURES_SPIDEN1(x)          (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DBG_FEATURES_SPIDEN1_SHIFT)) & SYSCTL0_DBG_FEATURES_SPIDEN1_MASK)
#define SYSCTL0_DBG_FEATURES_SPNIDEN1_MASK       (0xC0U)
#define SYSCTL0_DBG_FEATURES_SPNIDEN1_SHIFT      (6U)
/*! SPNIDEN1 - CM33 SPNIDEN Enable Control
 *  0b10..Enabled
 *  0b01..Disabled
 *  0b00..Disabled
 *  0b11..Disabled
 */
#define SYSCTL0_DBG_FEATURES_SPNIDEN1(x)         (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DBG_FEATURES_SPNIDEN1_SHIFT)) & SYSCTL0_DBG_FEATURES_SPNIDEN1_MASK)
/*! @} */

/*! @name DBG_FEATURES_DP - Debug Features Duplicate */
/*! @{ */
#define SYSCTL0_DBG_FEATURES_DP_DBGEN1_MASK      (0x3U)
#define SYSCTL0_DBG_FEATURES_DP_DBGEN1_SHIFT     (0U)
/*! DBGEN1 - CM33 Debug Enable Control
 *  0b10..Enabled
 *  0b01..Disabled
 *  0b00..Disabled
 *  0b11..Disabled
 */
#define SYSCTL0_DBG_FEATURES_DP_DBGEN1(x)        (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DBG_FEATURES_DP_DBGEN1_SHIFT)) & SYSCTL0_DBG_FEATURES_DP_DBGEN1_MASK)
#define SYSCTL0_DBG_FEATURES_DP_NIDEN1_MASK      (0xCU)
#define SYSCTL0_DBG_FEATURES_DP_NIDEN1_SHIFT     (2U)
/*! NIDEN1 - CM33 NID Enable Control
 *  0b10..Enabled
 *  0b01..Disabled
 *  0b00..Disabled
 *  0b11..Disabled
 */
#define SYSCTL0_DBG_FEATURES_DP_NIDEN1(x)        (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DBG_FEATURES_DP_NIDEN1_SHIFT)) & SYSCTL0_DBG_FEATURES_DP_NIDEN1_MASK)
#define SYSCTL0_DBG_FEATURES_DP_SPIDEN1_MASK     (0x30U)
#define SYSCTL0_DBG_FEATURES_DP_SPIDEN1_SHIFT    (4U)
/*! SPIDEN1 - CM33 SPID Enable Control
 *  0b10..Enabled
 *  0b01..Disabled
 *  0b00..Disabled
 *  0b11..Disabled
 */
#define SYSCTL0_DBG_FEATURES_DP_SPIDEN1(x)       (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DBG_FEATURES_DP_SPIDEN1_SHIFT)) & SYSCTL0_DBG_FEATURES_DP_SPIDEN1_MASK)
#define SYSCTL0_DBG_FEATURES_DP_SPNIDEN1_MASK    (0xC0U)
#define SYSCTL0_DBG_FEATURES_DP_SPNIDEN1_SHIFT   (6U)
/*! SPNIDEN1 - CM33 SPNIDEN Enable Control
 *  0b10..Enabled
 *  0b01..Disabled
 *  0b00..Disabled
 *  0b11..Disabled
 */
#define SYSCTL0_DBG_FEATURES_DP_SPNIDEN1(x)      (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DBG_FEATURES_DP_SPNIDEN1_SHIFT)) & SYSCTL0_DBG_FEATURES_DP_SPNIDEN1_MASK)
/*! @} */

/*! @name CS_PROTCPU0 - Code Security for CPU0 */
/*! @{ */
#define SYSCTL0_CS_PROTCPU0_CS_PROTCPU0_MASK     (0xFFFFFFFFU)
#define SYSCTL0_CS_PROTCPU0_CS_PROTCPU0_SHIFT    (0U)
/*! CS_PROTCPU0 - Controls M33 AP Enable
 */
#define SYSCTL0_CS_PROTCPU0_CS_PROTCPU0(x)       (((uint32_t)(((uint32_t)(x)) << SYSCTL0_CS_PROTCPU0_CS_PROTCPU0_SHIFT)) & SYSCTL0_CS_PROTCPU0_CS_PROTCPU0_MASK)
/*! @} */

/*! @name CS_PROTCPU1 - Code Security for CPU1 */
/*! @{ */
#define SYSCTL0_CS_PROTCPU1_CS_PROTCPU1_MASK     (0xFFFFFFFFU)
#define SYSCTL0_CS_PROTCPU1_CS_PROTCPU1_SHIFT    (0U)
/*! CS_PROTCPU1 - Controls AP Enable
 */
#define SYSCTL0_CS_PROTCPU1_CS_PROTCPU1(x)       (((uint32_t)(((uint32_t)(x)) << SYSCTL0_CS_PROTCPU1_CS_PROTCPU1_SHIFT)) & SYSCTL0_CS_PROTCPU1_CS_PROTCPU1_MASK)
/*! @} */

/*! @name DBG_AUTH_SCRATCH - Debug authorization scratch */
/*! @{ */
#define SYSCTL0_DBG_AUTH_SCRATCH_DBG_AUTH_SCRATCH_MASK (0xFFFFFFFFU)
#define SYSCTL0_DBG_AUTH_SCRATCH_DBG_AUTH_SCRATCH_SHIFT (0U)
/*! DBG_AUTH_SCRATCH - Debug authorization scratch register for S/W.
 */
#define SYSCTL0_DBG_AUTH_SCRATCH_DBG_AUTH_SCRATCH(x) (((uint32_t)(((uint32_t)(x)) << SYSCTL0_DBG_AUTH_SCRATCH_DBG_AUTH_SCRATCH_SHIFT)) & SYSCTL0_DBG_AUTH_SCRATCH_DBG_AUTH_SCRATCH_MASK)
/*! @} */

/*! @name KEY_BLOCK - Key block */
/*! @{ */
#define SYSCTL0_KEY_BLOCK_KEY_BLOCK_MASK         (0xFFFFFFFFU)
#define SYSCTL0_KEY_BLOCK_KEY_BLOCK_SHIFT        (0U)
/*! KEY_BLOCK - PUF key and data output
 */
#define SYSCTL0_KEY_BLOCK_KEY_BLOCK(x)           (((uint32_t)(((uint32_t)(x)) << SYSCTL0_KEY_BLOCK_KEY_BLOCK_SHIFT)) & SYSCTL0_KEY_BLOCK_KEY_BLOCK_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group SYSCTL0_Register_Masks */


/* SYSCTL0 - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral SYSCTL0 base pointer */
  #define SYSCTL0_BASE_PTR                         ((SYSCTL0_MemMapPtr)0x50002000u)
  /** Peripheral SYSCTL0 base pointer */
  #define SYSCTL0_BASE_PTR_NS                      ((SYSCTL0_MemMapPtr)0x40002000u)
  /** Array initializer of SYSCTL0 peripheral base pointers */
  #define SYSCTL0_BASE_PTRS                        { SYSCTL0_BASE_PTR }
  /** Array initializer of SYSCTL0 peripheral base pointers */
  #define SYSCTL0_BASE_PTRS_NS                     { SYSCTL0_BASE_PTR_NS }
#else
  /** Peripheral SYSCTL0 base pointer */
  #define SYSCTL0_BASE_PTR                         ((SYSCTL0_MemMapPtr)0x40002000u)
  /** Array initializer of SYSCTL0 peripheral base pointers */
  #define SYSCTL0_BASE_PTRS                        { SYSCTL0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- SYSCTL0 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SYSCTL0_Register_Accessor_Macros SYSCTL0 - Register accessor macros
 * @{
 */


/* SYSCTL0 - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* SYSCTL0 */
  #define SYSCTL0_DSP_VECT_REMAP                   SYSCTL0_DSP_VECT_REMAP_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DSP_VECT_REMAP_NS                SYSCTL0_DSP_VECT_REMAP_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_DSPSTALL                         SYSCTL0_DSPSTALL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DSPSTALL_NS                      SYSCTL0_DSPSTALL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_AHBMATRIXPRIOR                   SYSCTL0_AHBMATRIXPRIOR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AHBMATRIXPRIOR_NS                SYSCTL0_AHBMATRIXPRIOR_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_AHBBRIDGEBUFFER0                 SYSCTL0_AHBBRIDGEBUFFER_REG(SYSCTL0_BASE_PTR,0)
  #define SYSCTL0_AHBBRIDGEBUFFER0_NS              SYSCTL0_AHBBRIDGEBUFFER_REG(SYSCTL0_BASE_PTR_NS,0)
  #define SYSCTL0_AHBBRIDGEBUFFER1                 SYSCTL0_AHBBRIDGEBUFFER_REG(SYSCTL0_BASE_PTR,1)
  #define SYSCTL0_AHBBRIDGEBUFFER1_NS              SYSCTL0_AHBBRIDGEBUFFER_REG(SYSCTL0_BASE_PTR_NS,1)
  #define SYSCTL0_BOOTROM_LCKOUT                   SYSCTL0_BOOTROM_LCKOUT_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_BOOTROM_LCKOUT_NS                SYSCTL0_BOOTROM_LCKOUT_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_M33NMISRCSEL                     SYSCTL0_M33NMISRCSEL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_M33NMISRCSEL_NS                  SYSCTL0_M33NMISRCSEL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_SYSTEM_STICK_CALIB               SYSCTL0_SYSTEM_STICK_CALIB_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SYSTEM_STICK_CALIB_NS            SYSCTL0_SYSTEM_STICK_CALIB_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_SYSTEM_NSTICK_CALIB              SYSCTL0_SYSTEM_NSTICK_CALIB_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SYSTEM_NSTICK_CALIB_NS           SYSCTL0_SYSTEM_NSTICK_CALIB_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PRODUCT_ID                       SYSCTL0_PRODUCT_ID_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PRODUCT_ID_NS                    SYSCTL0_PRODUCT_ID_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_SILICONREV_ID                    SYSCTL0_SILICONREV_ID_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SILICONREV_ID_NS                 SYSCTL0_SILICONREV_ID_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_JTAG_ID                          SYSCTL0_JTAG_ID_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_JTAG_ID_NS                       SYSCTL0_JTAG_ID_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_NSGPIO_PSYNC                     SYSCTL0_NSGPIO_PSYNC_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_NSGPIO_PSYNC_NS                  SYSCTL0_NSGPIO_PSYNC_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_SGPIO_PSYNC                      SYSCTL0_SGPIO_PSYNC_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SGPIO_PSYNC_NS                   SYSCTL0_SGPIO_PSYNC_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_AUTOCLKGATEOVERRIDE0             SYSCTL0_AUTOCLKGATEOVERRIDE0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AUTOCLKGATEOVERRIDE0_NS          SYSCTL0_AUTOCLKGATEOVERRIDE0_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_AUTOCLKGATEOVERRIDE1             SYSCTL0_AUTOCLKGATEOVERRIDE1_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AUTOCLKGATEOVERRIDE1_NS          SYSCTL0_AUTOCLKGATEOVERRIDE1_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_CLKGATEOVERRIDE0                 SYSCTL0_CLKGATEOVERRIDE0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_CLKGATEOVERRIDE0_NS              SYSCTL0_CLKGATEOVERRIDE0_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_AHB_SRAM_ACCESS_DISABLE          SYSCTL0_AHB_SRAM_ACCESS_DISABLE_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AHB_SRAM_ACCESS_DISABLE_NS       SYSCTL0_AHB_SRAM_ACCESS_DISABLE_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_AXI_SRAM_ACCESS_DISABLE          SYSCTL0_AXI_SRAM_ACCESS_DISABLE_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AXI_SRAM_ACCESS_DISABLE_NS       SYSCTL0_AXI_SRAM_ACCESS_DISABLE_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_DSP_SRAM_ACCESS_DISABLE          SYSCTL0_DSP_SRAM_ACCESS_DISABLE_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DSP_SRAM_ACCESS_DISABLE_NS       SYSCTL0_DSP_SRAM_ACCESS_DISABLE_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PQ_MEM_CTRL                      SYSCTL0_PQ_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PQ_MEM_CTRL_NS                   SYSCTL0_PQ_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_FLEXSPI0_MEM_CTRL                SYSCTL0_FLEXSPI0_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_FLEXSPI0_MEM_CTRL_NS             SYSCTL0_FLEXSPI0_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_USBHS_MEM_CTRL                   SYSCTL0_USBHS_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USBHS_MEM_CTRL_NS                SYSCTL0_USBHS_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_USDHC0_MEM_CTRL                  SYSCTL0_USDHC0_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USDHC0_MEM_CTRL_NS               SYSCTL0_USDHC0_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_USDHC1_MEM_CTRL                  SYSCTL0_USDHC1_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USDHC1_MEM_CTRL_NS               SYSCTL0_USDHC1_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_CASPER_MEM_CTRL                  SYSCTL0_CASPER_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_CASPER_MEM_CTRL_NS               SYSCTL0_CASPER_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_ROM_MEM_CTRL                     SYSCTL0_ROM_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_ROM_MEM_CTRL_NS                  SYSCTL0_ROM_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_FLEXSPI1_MEM_CTRL                SYSCTL0_FLEXSPI1_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_FLEXSPI1_MEM_CTRL_NS             SYSCTL0_FLEXSPI1_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_GPU_MEM_CTRL                     SYSCTL0_GPU_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_GPU_MEM_CTRL_NS                  SYSCTL0_GPU_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_MIPI_MEM_CTRL                    SYSCTL0_MIPI_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_MIPI_MEM_CTRL_NS                 SYSCTL0_MIPI_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_DCN_MEM_CTRL                     SYSCTL0_DCN_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DCN_MEM_CTRL_NS                  SYSCTL0_DCN_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_SMARTDMA_MEM_CTRL                SYSCTL0_SMARTDMA_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SMARTDMA_MEM_CTRL_NS             SYSCTL0_SMARTDMA_MEM_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_MIPI_DSI_CTRL                    SYSCTL0_MIPI_DSI_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_MIPI_DSI_CTRL_NS                 SYSCTL0_MIPI_DSI_CTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_USB0CLKCTRL                      SYSCTL0_USB0CLKCTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USB0CLKCTRL_NS                   SYSCTL0_USB0CLKCTRL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_USB0CLKSTAT                      SYSCTL0_USB0CLKSTAT_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USB0CLKSTAT_NS                   SYSCTL0_USB0CLKSTAT_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_USBPHYPLL0LOCKTIMEDIV2           SYSCTL0_USBPHYPLL0LOCKTIMEDIV2_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USBPHYPLL0LOCKTIMEDIV2_NS        SYSCTL0_USBPHYPLL0LOCKTIMEDIV2_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDSLEEPCFG0                      SYSCTL0_PDSLEEPCFG0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDSLEEPCFG0_NS                   SYSCTL0_PDSLEEPCFG0_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDSLEEPCFG1                      SYSCTL0_PDSLEEPCFG1_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDSLEEPCFG1_NS                   SYSCTL0_PDSLEEPCFG1_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDSLEEPCFG2                      SYSCTL0_PDSLEEPCFG2_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDSLEEPCFG2_NS                   SYSCTL0_PDSLEEPCFG2_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDSLEEPCFG3                      SYSCTL0_PDSLEEPCFG3_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDSLEEPCFG3_NS                   SYSCTL0_PDSLEEPCFG3_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG0                        SYSCTL0_PDRUNCFG0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG0_NS                     SYSCTL0_PDRUNCFG0_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG1                        SYSCTL0_PDRUNCFG1_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG1_NS                     SYSCTL0_PDRUNCFG1_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG2                        SYSCTL0_PDRUNCFG2_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG2_NS                     SYSCTL0_PDRUNCFG2_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG3                        SYSCTL0_PDRUNCFG3_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG3_NS                     SYSCTL0_PDRUNCFG3_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG0_SET                    SYSCTL0_PDRUNCFG0_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG0_SET_NS                 SYSCTL0_PDRUNCFG0_SET_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG1_SET                    SYSCTL0_PDRUNCFG1_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG1_SET_NS                 SYSCTL0_PDRUNCFG1_SET_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG2_SET                    SYSCTL0_PDRUNCFG2_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG2_SET_NS                 SYSCTL0_PDRUNCFG2_SET_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG3_SET                    SYSCTL0_PDRUNCFG3_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG3_SET_NS                 SYSCTL0_PDRUNCFG3_SET_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG0_CLR                    SYSCTL0_PDRUNCFG0_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG0_CLR_NS                 SYSCTL0_PDRUNCFG0_CLR_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG1_CLR                    SYSCTL0_PDRUNCFG1_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG1_CLR_NS                 SYSCTL0_PDRUNCFG1_CLR_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG2_CLR                    SYSCTL0_PDRUNCFG2_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG2_CLR_NS                 SYSCTL0_PDRUNCFG2_CLR_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDRUNCFG3_CLR                    SYSCTL0_PDRUNCFG3_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG3_CLR_NS                 SYSCTL0_PDRUNCFG3_CLR_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_PDWAKECFG                        SYSCTL0_PDWAKECFG_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDWAKECFG_NS                     SYSCTL0_PDWAKECFG_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_STARTEN0                         SYSCTL0_STARTEN0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN0_NS                      SYSCTL0_STARTEN0_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_STARTEN1                         SYSCTL0_STARTEN1_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN1_NS                      SYSCTL0_STARTEN1_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_STARTEN2                         SYSCTL0_STARTEN2_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN2_NS                      SYSCTL0_STARTEN2_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_STARTEN0_SET                     SYSCTL0_STARTEN0_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN0_SET_NS                  SYSCTL0_STARTEN0_SET_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_STARTEN1_SET                     SYSCTL0_STARTEN1_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN1_SET_NS                  SYSCTL0_STARTEN1_SET_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_STARTEN2_SET                     SYSCTL0_STARTEN2_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN2_SET_NS                  SYSCTL0_STARTEN2_SET_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_STARTEN0_CLR                     SYSCTL0_STARTEN0_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN0_CLR_NS                  SYSCTL0_STARTEN0_CLR_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_STARTEN1_CLR                     SYSCTL0_STARTEN1_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN1_CLR_NS                  SYSCTL0_STARTEN1_CLR_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_STARTEN2_CLR                     SYSCTL0_STARTEN2_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN2_CLR_NS                  SYSCTL0_STARTEN2_CLR_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_HWWAKE                           SYSCTL0_HWWAKE_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_HWWAKE_NS                        SYSCTL0_HWWAKE_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_TEMPSENSORCTL                    SYSCTL0_TEMPSENSORCTL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_TEMPSENSORCTL_NS                 SYSCTL0_TEMPSENSORCTL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_BOOTSTATELOCK                    SYSCTL0_BOOTSTATELOCK_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_BOOTSTATELOCK_NS                 SYSCTL0_BOOTSTATELOCK_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_BOOTSTATESEED0                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,0)
  #define SYSCTL0_BOOTSTATESEED0_NS                SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR_NS,0)
  #define SYSCTL0_BOOTSTATESEED1                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,1)
  #define SYSCTL0_BOOTSTATESEED1_NS                SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR_NS,1)
  #define SYSCTL0_BOOTSTATESEED2                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,2)
  #define SYSCTL0_BOOTSTATESEED2_NS                SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR_NS,2)
  #define SYSCTL0_BOOTSTATESEED3                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,3)
  #define SYSCTL0_BOOTSTATESEED3_NS                SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR_NS,3)
  #define SYSCTL0_BOOTSTATESEED4                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,4)
  #define SYSCTL0_BOOTSTATESEED4_NS                SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR_NS,4)
  #define SYSCTL0_BOOTSTATESEED5                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,5)
  #define SYSCTL0_BOOTSTATESEED5_NS                SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR_NS,5)
  #define SYSCTL0_BOOTSTATESEED6                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,6)
  #define SYSCTL0_BOOTSTATESEED6_NS                SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR_NS,6)
  #define SYSCTL0_BOOTSTATESEED7                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,7)
  #define SYSCTL0_BOOTSTATESEED7_NS                SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR_NS,7)
  #define SYSCTL0_BOOTSTATEHMAC0                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,0)
  #define SYSCTL0_BOOTSTATEHMAC0_NS                SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR_NS,0)
  #define SYSCTL0_BOOTSTATEHMAC1                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,1)
  #define SYSCTL0_BOOTSTATEHMAC1_NS                SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR_NS,1)
  #define SYSCTL0_BOOTSTATEHMAC2                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,2)
  #define SYSCTL0_BOOTSTATEHMAC2_NS                SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR_NS,2)
  #define SYSCTL0_BOOTSTATEHMAC3                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,3)
  #define SYSCTL0_BOOTSTATEHMAC3_NS                SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR_NS,3)
  #define SYSCTL0_BOOTSTATEHMAC4                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,4)
  #define SYSCTL0_BOOTSTATEHMAC4_NS                SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR_NS,4)
  #define SYSCTL0_BOOTSTATEHMAC5                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,5)
  #define SYSCTL0_BOOTSTATEHMAC5_NS                SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR_NS,5)
  #define SYSCTL0_BOOTSTATEHMAC6                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,6)
  #define SYSCTL0_BOOTSTATEHMAC6_NS                SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR_NS,6)
  #define SYSCTL0_BOOTSTATEHMAC7                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,7)
  #define SYSCTL0_BOOTSTATEHMAC7_NS                SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR_NS,7)
  #define SYSCTL0_FLEXSPI0PADCTL                   SYSCTL0_FLEXSPI0PADCTL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_FLEXSPI0PADCTL_NS                SYSCTL0_FLEXSPI0PADCTL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_FLEXSPI1PADCTL                   SYSCTL0_FLEXSPI1PADCTL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_FLEXSPI1PADCTL_NS                SYSCTL0_FLEXSPI1PADCTL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_SDIO0PADCTL                      SYSCTL0_SDIO0PADCTL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SDIO0PADCTL_NS                   SYSCTL0_SDIO0PADCTL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_SDIO1PADCTL                      SYSCTL0_SDIO1PADCTL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SDIO1PADCTL_NS                   SYSCTL0_SDIO1PADCTL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_DICEHWREGN                       SYSCTL0_DICEHWREGN_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DICEHWREGN_NS                    SYSCTL0_DICEHWREGN_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_UUID0                            SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR,0)
  #define SYSCTL0_UUID0_NS                         SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR_NS,0)
  #define SYSCTL0_UUID1                            SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR,1)
  #define SYSCTL0_UUID1_NS                         SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR_NS,1)
  #define SYSCTL0_UUID2                            SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR,2)
  #define SYSCTL0_UUID2_NS                         SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR_NS,2)
  #define SYSCTL0_UUID3                            SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR,3)
  #define SYSCTL0_UUID3_NS                         SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR_NS,3)
  #define SYSCTL0_AESKEY_SRCSEL                    SYSCTL0_AESKEY_SRCSEL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AESKEY_SRCSEL_NS                 SYSCTL0_AESKEY_SRCSEL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_OTFADKEY_SRCSEL                  SYSCTL0_OTFADKEY_SRCSEL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_OTFADKEY_SRCSEL_NS               SYSCTL0_OTFADKEY_SRCSEL_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_HASHHWKEYDISABLE                 SYSCTL0_HASHHWKEYDISABLE_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_HASHHWKEYDISABLE_NS              SYSCTL0_HASHHWKEYDISABLE_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_DBG_LOCKEN                       SYSCTL0_DBG_LOCKEN_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DBG_LOCKEN_NS                    SYSCTL0_DBG_LOCKEN_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_DBG_FEATURES                     SYSCTL0_DBG_FEATURES_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DBG_FEATURES_NS                  SYSCTL0_DBG_FEATURES_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_DBG_FEATURES_DP                  SYSCTL0_DBG_FEATURES_DP_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DBG_FEATURES_DP_NS               SYSCTL0_DBG_FEATURES_DP_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_CS_PROTCPU0                      SYSCTL0_CS_PROTCPU0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_CS_PROTCPU0_NS                   SYSCTL0_CS_PROTCPU0_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_CS_PROTCPU1                      SYSCTL0_CS_PROTCPU1_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_CS_PROTCPU1_NS                   SYSCTL0_CS_PROTCPU1_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_DBG_AUTH_SCRATCH                 SYSCTL0_DBG_AUTH_SCRATCH_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DBG_AUTH_SCRATCH_NS              SYSCTL0_DBG_AUTH_SCRATCH_REG(SYSCTL0_BASE_PTR_NS)
  #define SYSCTL0_KEY_BLOCK                        SYSCTL0_KEY_BLOCK_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_KEY_BLOCK_NS                     SYSCTL0_KEY_BLOCK_REG(SYSCTL0_BASE_PTR_NS)
#else
  /* SYSCTL0 */
  #define SYSCTL0_DSP_VECT_REMAP                   SYSCTL0_DSP_VECT_REMAP_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DSPSTALL                         SYSCTL0_DSPSTALL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AHBMATRIXPRIOR                   SYSCTL0_AHBMATRIXPRIOR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AHBBRIDGEBUFFER0                 SYSCTL0_AHBBRIDGEBUFFER_REG(SYSCTL0_BASE_PTR,0)
  #define SYSCTL0_AHBBRIDGEBUFFER1                 SYSCTL0_AHBBRIDGEBUFFER_REG(SYSCTL0_BASE_PTR,1)
  #define SYSCTL0_BOOTROM_LCKOUT                   SYSCTL0_BOOTROM_LCKOUT_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_M33NMISRCSEL                     SYSCTL0_M33NMISRCSEL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SYSTEM_STICK_CALIB               SYSCTL0_SYSTEM_STICK_CALIB_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SYSTEM_NSTICK_CALIB              SYSCTL0_SYSTEM_NSTICK_CALIB_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PRODUCT_ID                       SYSCTL0_PRODUCT_ID_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SILICONREV_ID                    SYSCTL0_SILICONREV_ID_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_JTAG_ID                          SYSCTL0_JTAG_ID_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_NSGPIO_PSYNC                     SYSCTL0_NSGPIO_PSYNC_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SGPIO_PSYNC                      SYSCTL0_SGPIO_PSYNC_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AUTOCLKGATEOVERRIDE0             SYSCTL0_AUTOCLKGATEOVERRIDE0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AUTOCLKGATEOVERRIDE1             SYSCTL0_AUTOCLKGATEOVERRIDE1_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_CLKGATEOVERRIDE0                 SYSCTL0_CLKGATEOVERRIDE0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AHB_SRAM_ACCESS_DISABLE          SYSCTL0_AHB_SRAM_ACCESS_DISABLE_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_AXI_SRAM_ACCESS_DISABLE          SYSCTL0_AXI_SRAM_ACCESS_DISABLE_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DSP_SRAM_ACCESS_DISABLE          SYSCTL0_DSP_SRAM_ACCESS_DISABLE_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PQ_MEM_CTRL                      SYSCTL0_PQ_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_FLEXSPI0_MEM_CTRL                SYSCTL0_FLEXSPI0_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USBHS_MEM_CTRL                   SYSCTL0_USBHS_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USDHC0_MEM_CTRL                  SYSCTL0_USDHC0_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USDHC1_MEM_CTRL                  SYSCTL0_USDHC1_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_CASPER_MEM_CTRL                  SYSCTL0_CASPER_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_ROM_MEM_CTRL                     SYSCTL0_ROM_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_FLEXSPI1_MEM_CTRL                SYSCTL0_FLEXSPI1_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_GPU_MEM_CTRL                     SYSCTL0_GPU_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_MIPI_MEM_CTRL                    SYSCTL0_MIPI_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DCN_MEM_CTRL                     SYSCTL0_DCN_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SMARTDMA_MEM_CTRL                SYSCTL0_SMARTDMA_MEM_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_MIPI_DSI_CTRL                    SYSCTL0_MIPI_DSI_CTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USB0CLKCTRL                      SYSCTL0_USB0CLKCTRL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USB0CLKSTAT                      SYSCTL0_USB0CLKSTAT_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_USBPHYPLL0LOCKTIMEDIV2           SYSCTL0_USBPHYPLL0LOCKTIMEDIV2_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDSLEEPCFG0                      SYSCTL0_PDSLEEPCFG0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDSLEEPCFG1                      SYSCTL0_PDSLEEPCFG1_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDSLEEPCFG2                      SYSCTL0_PDSLEEPCFG2_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDSLEEPCFG3                      SYSCTL0_PDSLEEPCFG3_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG0                        SYSCTL0_PDRUNCFG0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG1                        SYSCTL0_PDRUNCFG1_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG2                        SYSCTL0_PDRUNCFG2_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG3                        SYSCTL0_PDRUNCFG3_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG0_SET                    SYSCTL0_PDRUNCFG0_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG1_SET                    SYSCTL0_PDRUNCFG1_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG2_SET                    SYSCTL0_PDRUNCFG2_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG3_SET                    SYSCTL0_PDRUNCFG3_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG0_CLR                    SYSCTL0_PDRUNCFG0_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG1_CLR                    SYSCTL0_PDRUNCFG1_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG2_CLR                    SYSCTL0_PDRUNCFG2_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDRUNCFG3_CLR                    SYSCTL0_PDRUNCFG3_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_PDWAKECFG                        SYSCTL0_PDWAKECFG_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN0                         SYSCTL0_STARTEN0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN1                         SYSCTL0_STARTEN1_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN2                         SYSCTL0_STARTEN2_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN0_SET                     SYSCTL0_STARTEN0_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN1_SET                     SYSCTL0_STARTEN1_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN2_SET                     SYSCTL0_STARTEN2_SET_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN0_CLR                     SYSCTL0_STARTEN0_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN1_CLR                     SYSCTL0_STARTEN1_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_STARTEN2_CLR                     SYSCTL0_STARTEN2_CLR_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_HWWAKE                           SYSCTL0_HWWAKE_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_TEMPSENSORCTL                    SYSCTL0_TEMPSENSORCTL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_BOOTSTATELOCK                    SYSCTL0_BOOTSTATELOCK_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_BOOTSTATESEED0                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,0)
  #define SYSCTL0_BOOTSTATESEED1                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,1)
  #define SYSCTL0_BOOTSTATESEED2                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,2)
  #define SYSCTL0_BOOTSTATESEED3                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,3)
  #define SYSCTL0_BOOTSTATESEED4                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,4)
  #define SYSCTL0_BOOTSTATESEED5                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,5)
  #define SYSCTL0_BOOTSTATESEED6                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,6)
  #define SYSCTL0_BOOTSTATESEED7                   SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,7)
  #define SYSCTL0_BOOTSTATEHMAC0                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,0)
  #define SYSCTL0_BOOTSTATEHMAC1                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,1)
  #define SYSCTL0_BOOTSTATEHMAC2                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,2)
  #define SYSCTL0_BOOTSTATEHMAC3                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,3)
  #define SYSCTL0_BOOTSTATEHMAC4                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,4)
  #define SYSCTL0_BOOTSTATEHMAC5                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,5)
  #define SYSCTL0_BOOTSTATEHMAC6                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,6)
  #define SYSCTL0_BOOTSTATEHMAC7                   SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,7)
  #define SYSCTL0_FLEXSPI0PADCTL                   SYSCTL0_FLEXSPI0PADCTL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_FLEXSPI1PADCTL                   SYSCTL0_FLEXSPI1PADCTL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SDIO0PADCTL                      SYSCTL0_SDIO0PADCTL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_SDIO1PADCTL                      SYSCTL0_SDIO1PADCTL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DICEHWREGN                       SYSCTL0_DICEHWREGN_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_UUID0                            SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR,0)
  #define SYSCTL0_UUID1                            SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR,1)
  #define SYSCTL0_UUID2                            SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR,2)
  #define SYSCTL0_UUID3                            SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR,3)
  #define SYSCTL0_AESKEY_SRCSEL                    SYSCTL0_AESKEY_SRCSEL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_OTFADKEY_SRCSEL                  SYSCTL0_OTFADKEY_SRCSEL_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_HASHHWKEYDISABLE                 SYSCTL0_HASHHWKEYDISABLE_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DBG_LOCKEN                       SYSCTL0_DBG_LOCKEN_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DBG_FEATURES                     SYSCTL0_DBG_FEATURES_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DBG_FEATURES_DP                  SYSCTL0_DBG_FEATURES_DP_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_CS_PROTCPU0                      SYSCTL0_CS_PROTCPU0_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_CS_PROTCPU1                      SYSCTL0_CS_PROTCPU1_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_DBG_AUTH_SCRATCH                 SYSCTL0_DBG_AUTH_SCRATCH_REG(SYSCTL0_BASE_PTR)
  #define SYSCTL0_KEY_BLOCK                        SYSCTL0_KEY_BLOCK_REG(SYSCTL0_BASE_PTR)
#endif

/* SYSCTL0 - Register array accessors */
#define SYSCTL0_AHBBRIDGEBUFFER(index)           SYSCTL0_AHBBRIDGEBUFFER_REG(SYSCTL0_BASE_PTR,index)
#define SYSCTL0_AHBBRIDGEBUFFER_NS(index)        SYSCTL0_AHBBRIDGEBUFFER_REG(SYSCTL0_BASE_PTR_NS,index)
#define SYSCTL0_AHBBRIDGEBUFFER(index)           SYSCTL0_AHBBRIDGEBUFFER_REG(SYSCTL0_BASE_PTR,index)
#define SYSCTL0_BOOTSTATESEED(index)             SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,index)
#define SYSCTL0_BOOTSTATESEED_NS(index)          SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR_NS,index)
#define SYSCTL0_BOOTSTATESEED(index)             SYSCTL0_BOOTSTATESEED_REG(SYSCTL0_BASE_PTR,index)
#define SYSCTL0_BOOTSTATEHMAC(index)             SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,index)
#define SYSCTL0_BOOTSTATEHMAC_NS(index)          SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR_NS,index)
#define SYSCTL0_BOOTSTATEHMAC(index)             SYSCTL0_BOOTSTATEHMAC_REG(SYSCTL0_BASE_PTR,index)
#define SYSCTL0_UUID(index)                      SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR,index)
#define SYSCTL0_UUID_NS(index)                   SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR_NS,index)
#define SYSCTL0_UUID(index)                      SYSCTL0_UUID_REG(SYSCTL0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SYSCTL0_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SYSCTL0_Peripheral */


/* ----------------------------------------------------------------------------
   -- SYSCTL1
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SYSCTL1_Peripheral SYSCTL1
 * @{
 */

/** SYSCTL1 - Peripheral register structure */
typedef struct SYSCTL1_MemMap {
  uint32_t UPDATELCKOUT;                           /**< Update Clock Lockout, offset: 0x0 */
  uint8_t RESERVED_0[12];
  uint32_t MCLKPINDIR;                             /**< MCLK direction control, offset: 0x10 */
  uint8_t RESERVED_1[28];
  uint32_t DSPNMISRCSEL;                           /**< DSP NMI source selection, offset: 0x30 */
  uint8_t RESERVED_2[12];
  uint32_t FCCTRLSEL[14];                          /**< Flexcomm control selection, array offset: 0x40, array step: 0x4 */
  uint8_t RESERVED_3[8];
  uint32_t SHAREDCTRLSET[2];                       /**< Shared control set, array offset: 0x80, array step: 0x4 */
  uint8_t RESERVED_4[376];
  uint32_t RXEVPULSEGEN;                           /**< RX Event Pulse Generator, offset: 0x200 */
} volatile *SYSCTL1_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SYSCTL1 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SYSCTL1_Register_Accessor_Macros SYSCTL1 - Register accessor macros
 * @{
 */


/* SYSCTL1 - Register accessors */
#define SYSCTL1_UPDATELCKOUT_REG(base)           ((base)->UPDATELCKOUT)
#define SYSCTL1_MCLKPINDIR_REG(base)             ((base)->MCLKPINDIR)
#define SYSCTL1_DSPNMISRCSEL_REG(base)           ((base)->DSPNMISRCSEL)
#define SYSCTL1_FCCTRLSEL_REG(base,index)        ((base)->FCCTRLSEL[index])
#define SYSCTL1_SHAREDCTRLSET_REG(base,index)    ((base)->SHAREDCTRLSET[index])
#define SYSCTL1_RXEVPULSEGEN_REG(base)           ((base)->RXEVPULSEGEN)

/*!
 * @}
 */ /* end of group SYSCTL1_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SYSCTL1 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SYSCTL1_Register_Masks SYSCTL1 Register Masks
 * @{
 */

/*! @name UPDATELCKOUT - Update Clock Lockout */
/*! @{ */
#define SYSCTL1_UPDATELCKOUT_UPDATELCKOUT_MASK   (0x1U)
#define SYSCTL1_UPDATELCKOUT_UPDATELCKOUT_SHIFT  (0U)
/*! @} */

/*! @name MCLKPINDIR - MCLK direction control */
/*! @{ */
#define SYSCTL1_MCLKPINDIR_MCLKPINDIR_MASK       (0x1U)
#define SYSCTL1_MCLKPINDIR_MCLKPINDIR_SHIFT      (0U)
/*! @} */

/*! @name DSPNMISRCSEL - DSP NMI source selection */
/*! @{ */
#define SYSCTL1_DSPNMISRCSEL_NMISRCSEL_MASK      (0x1FU)
#define SYSCTL1_DSPNMISRCSEL_NMISRCSEL_SHIFT     (0U)
/*! NMISRCSEL - DSP NMI source selection
 */
#define SYSCTL1_DSPNMISRCSEL_NMISRCSEL(x)        (((uint32_t)(((uint32_t)(x)) << SYSCTL1_DSPNMISRCSEL_NMISRCSEL_SHIFT)) & SYSCTL1_DSPNMISRCSEL_NMISRCSEL_MASK)
#define SYSCTL1_DSPNMISRCSEL_NMIEN_MASK          (0x80000000U)
#define SYSCTL1_DSPNMISRCSEL_NMIEN_SHIFT         (31U)
/*! @} */

/*! @name FCCTRLSEL - Flexcomm control selection */
/*! @{ */
#define SYSCTL1_FCCTRLSEL_SCKINSEL_MASK          (0x3U)
#define SYSCTL1_FCCTRLSEL_SCKINSEL_SHIFT         (0U)
/*! SCKINSEL - SCK IN Select
 *  0b00..Original FLEXCOMM I2S signals
 *  0b01..Shared Set0 I2S signals
 *  0b10..Shared Set1 I2S signals
 *  0b11..Reserved
 */
#define SYSCTL1_FCCTRLSEL_SCKINSEL(x)            (((uint32_t)(((uint32_t)(x)) << SYSCTL1_FCCTRLSEL_SCKINSEL_SHIFT)) & SYSCTL1_FCCTRLSEL_SCKINSEL_MASK)
#define SYSCTL1_FCCTRLSEL_WSINSEL_MASK           (0x300U)
#define SYSCTL1_FCCTRLSEL_WSINSEL_SHIFT          (8U)
/*! WSINSEL - SCK IN Select
 *  0b00..Original FLEXCOMM I2S signals
 *  0b01..Shared Set0 I2S signals
 *  0b10..Shared Set1 I2S signals
 *  0b11..Reserved
 */
#define SYSCTL1_FCCTRLSEL_WSINSEL(x)             (((uint32_t)(((uint32_t)(x)) << SYSCTL1_FCCTRLSEL_WSINSEL_SHIFT)) & SYSCTL1_FCCTRLSEL_WSINSEL_MASK)
#define SYSCTL1_FCCTRLSEL_DATAINSEL_MASK         (0x30000U)
#define SYSCTL1_FCCTRLSEL_DATAINSEL_SHIFT        (16U)
/*! DATAINSEL - DATA IN Select
 *  0b00..Original FLEXCOMM I2S signals
 *  0b01..Shared Set0 I2S signals
 *  0b10..Shared Set1 I2S signals
 *  0b11..Reserved
 */
#define SYSCTL1_FCCTRLSEL_DATAINSEL(x)           (((uint32_t)(((uint32_t)(x)) << SYSCTL1_FCCTRLSEL_DATAINSEL_SHIFT)) & SYSCTL1_FCCTRLSEL_DATAINSEL_MASK)
#define SYSCTL1_FCCTRLSEL_DATAOUTSEL_MASK        (0x3000000U)
#define SYSCTL1_FCCTRLSEL_DATAOUTSEL_SHIFT       (24U)
/*! DATAOUTSEL - DATA OUT Select
 *  0b00..Original FLEXCOMM I2S signals
 *  0b01..Shared Set0 I2S signals
 *  0b10..Shared Set1 I2S signals
 *  0b11..Reserved
 */
#define SYSCTL1_FCCTRLSEL_DATAOUTSEL(x)          (((uint32_t)(((uint32_t)(x)) << SYSCTL1_FCCTRLSEL_DATAOUTSEL_SHIFT)) & SYSCTL1_FCCTRLSEL_DATAOUTSEL_MASK)
/*! @} */

/* The count of SYSCTL1_FCCTRLSEL */
#define SYSCTL1_FCCTRLSEL_COUNT                  (14U)

/*! @name SHAREDCTRLSET - Shared control set */
/*! @{ */
#define SYSCTL1_SHAREDCTRLSET_SHAREDSCKSEL_MASK  (0x7U)
#define SYSCTL1_SHAREDCTRLSET_SHAREDSCKSEL_SHIFT (0U)
/*! SHAREDSCKSEL - Shared SCK Select
 *  0b000..FLEXCOMM0
 *  0b001..FLEXCOMM1
 *  0b010..FLEXCOMM2
 *  0b011..FLEXCOMM3
 *  0b100..FLEXCOMM4
 *  0b101..FLEXCOMM5
 *  0b110..FLEXCOMM6
 *  0b111..FLEXCOMM7
 */
#define SYSCTL1_SHAREDCTRLSET_SHAREDSCKSEL(x)    (((uint32_t)(((uint32_t)(x)) << SYSCTL1_SHAREDCTRLSET_SHAREDSCKSEL_SHIFT)) & SYSCTL1_SHAREDCTRLSET_SHAREDSCKSEL_MASK)
#define SYSCTL1_SHAREDCTRLSET_SHAREDWSSEL_MASK   (0x70U)
#define SYSCTL1_SHAREDCTRLSET_SHAREDWSSEL_SHIFT  (4U)
/*! SHAREDWSSEL - Shared WS Select:
 *  0b000..FLEXCOMM0
 *  0b001..FLEXCOMM1
 *  0b010..FLEXCOMM2
 *  0b011..FLEXCOMM3
 *  0b100..FLEXCOMM4
 *  0b101..FLEXCOMM5
 *  0b110..FLEXCOMM6
 *  0b111..FLEXCOMM7
 */
#define SYSCTL1_SHAREDCTRLSET_SHAREDWSSEL(x)     (((uint32_t)(((uint32_t)(x)) << SYSCTL1_SHAREDCTRLSET_SHAREDWSSEL_SHIFT)) & SYSCTL1_SHAREDCTRLSET_SHAREDWSSEL_MASK)
#define SYSCTL1_SHAREDCTRLSET_SHAREDDATASEL_MASK (0x700U)
#define SYSCTL1_SHAREDCTRLSET_SHAREDDATASEL_SHIFT (8U)
/*! SHAREDDATASEL - Shared DATA Select:
 *  0b000..FLEXCOMM0
 *  0b001..FLEXCOMM1
 *  0b010..FLEXCOMM2
 *  0b011..FLEXCOMM3
 *  0b100..FLEXCOMM4
 *  0b101..FLEXCOMM5
 *  0b110..FLEXCOMM6
 *  0b111..FLEXCOMM7
 */
#define SYSCTL1_SHAREDCTRLSET_SHAREDDATASEL(x)   (((uint32_t)(((uint32_t)(x)) << SYSCTL1_SHAREDCTRLSET_SHAREDDATASEL_SHIFT)) & SYSCTL1_SHAREDCTRLSET_SHAREDDATASEL_MASK)
#define SYSCTL1_SHAREDCTRLSET_FC0DATAOUTEN_MASK  (0x10000U)
#define SYSCTL1_SHAREDCTRLSET_FC0DATAOUTEN_SHIFT (16U)
#define SYSCTL1_SHAREDCTRLSET_FC1DATAOUTEN_MASK  (0x20000U)
#define SYSCTL1_SHAREDCTRLSET_FC1DATAOUTEN_SHIFT (17U)
#define SYSCTL1_SHAREDCTRLSET_FC2DATAOUTEN_MASK  (0x40000U)
#define SYSCTL1_SHAREDCTRLSET_FC2DATAOUTEN_SHIFT (18U)
#define SYSCTL1_SHAREDCTRLSET_FC3DATAOUTEN_MASK  (0x80000U)
#define SYSCTL1_SHAREDCTRLSET_FC3DATAOUTEN_SHIFT (19U)
#define SYSCTL1_SHAREDCTRLSET_FC4DATAOUTEN_MASK  (0x100000U)
#define SYSCTL1_SHAREDCTRLSET_FC4DATAOUTEN_SHIFT (20U)
#define SYSCTL1_SHAREDCTRLSET_FC5DATAOUTEN_MASK  (0x200000U)
#define SYSCTL1_SHAREDCTRLSET_FC5DATAOUTEN_SHIFT (21U)
#define SYSCTL1_SHAREDCTRLSET_FC6DATAOUTEN_MASK  (0x400000U)
#define SYSCTL1_SHAREDCTRLSET_FC6DATAOUTEN_SHIFT (22U)
#define SYSCTL1_SHAREDCTRLSET_FC7DATAOUTEN_MASK  (0x800000U)
#define SYSCTL1_SHAREDCTRLSET_FC7DATAOUTEN_SHIFT (23U)
/*! @} */

/* The count of SYSCTL1_SHAREDCTRLSET */
#define SYSCTL1_SHAREDCTRLSET_COUNT              (2U)

/*! @name RXEVPULSEGEN - RX Event Pulse Generator */
/*! @{ */
#define SYSCTL1_RXEVPULSEGEN_RXEVPULSEGEN_MASK   (0x1U)
#define SYSCTL1_RXEVPULSEGEN_RXEVPULSEGEN_SHIFT  (0U)
/*! @} */


/*!
 * @}
 */ /* end of group SYSCTL1_Register_Masks */


/* SYSCTL1 - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral SYSCTL1 base pointer */
  #define SYSCTL1_BASE_PTR                         ((SYSCTL1_MemMapPtr)0x50022000u)
  /** Peripheral SYSCTL1 base pointer */
  #define SYSCTL1_BASE_PTR_NS                      ((SYSCTL1_MemMapPtr)0x40022000u)
  /** Array initializer of SYSCTL1 peripheral base pointers */
  #define SYSCTL1_BASE_PTRS                        { SYSCTL1_BASE_PTR }
  /** Array initializer of SYSCTL1 peripheral base pointers */
  #define SYSCTL1_BASE_PTRS_NS                     { SYSCTL1_BASE_PTR_NS }
#else
  /** Peripheral SYSCTL1 base pointer */
  #define SYSCTL1_BASE_PTR                         ((SYSCTL1_MemMapPtr)0x40022000u)
  /** Array initializer of SYSCTL1 peripheral base pointers */
  #define SYSCTL1_BASE_PTRS                        { SYSCTL1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- SYSCTL1 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SYSCTL1_Register_Accessor_Macros SYSCTL1 - Register accessor macros
 * @{
 */


/* SYSCTL1 - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* SYSCTL1 */
  #define SYSCTL1_UPDATELCKOUT                     SYSCTL1_UPDATELCKOUT_REG(SYSCTL1_BASE_PTR)
  #define SYSCTL1_UPDATELCKOUT_NS                  SYSCTL1_UPDATELCKOUT_REG(SYSCTL1_BASE_PTR_NS)
  #define SYSCTL1_MCLKPINDIR                       SYSCTL1_MCLKPINDIR_REG(SYSCTL1_BASE_PTR)
  #define SYSCTL1_MCLKPINDIR_NS                    SYSCTL1_MCLKPINDIR_REG(SYSCTL1_BASE_PTR_NS)
  #define SYSCTL1_DSPNMISRCSEL                     SYSCTL1_DSPNMISRCSEL_REG(SYSCTL1_BASE_PTR)
  #define SYSCTL1_DSPNMISRCSEL_NS                  SYSCTL1_DSPNMISRCSEL_REG(SYSCTL1_BASE_PTR_NS)
  #define SYSCTL1_FC0CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,0)
  #define SYSCTL1_FC0CTRLSEL_NS                    SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,0)
  #define SYSCTL1_FC1CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,1)
  #define SYSCTL1_FC1CTRLSEL_NS                    SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,1)
  #define SYSCTL1_FC2CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,2)
  #define SYSCTL1_FC2CTRLSEL_NS                    SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,2)
  #define SYSCTL1_FC3CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,3)
  #define SYSCTL1_FC3CTRLSEL_NS                    SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,3)
  #define SYSCTL1_FC4CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,4)
  #define SYSCTL1_FC4CTRLSEL_NS                    SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,4)
  #define SYSCTL1_FC5CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,5)
  #define SYSCTL1_FC5CTRLSEL_NS                    SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,5)
  #define SYSCTL1_FC6CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,6)
  #define SYSCTL1_FC6CTRLSEL_NS                    SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,6)
  #define SYSCTL1_FC7CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,7)
  #define SYSCTL1_FC7CTRLSEL_NS                    SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,7)
  #define SYSCTL1_FC8CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,8)
  #define SYSCTL1_FC8CTRLSEL_NS                    SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,8)
  #define SYSCTL1_FC9CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,9)
  #define SYSCTL1_FC9CTRLSEL_NS                    SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,9)
  #define SYSCTL1_FC10CTRLSEL                      SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,10)
  #define SYSCTL1_FC10CTRLSEL_NS                   SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,10)
  #define SYSCTL1_FC11CTRLSEL                      SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,11)
  #define SYSCTL1_FC11CTRLSEL_NS                   SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,11)
  #define SYSCTL1_FC12CTRLSEL                      SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,12)
  #define SYSCTL1_FC12CTRLSEL_NS                   SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,12)
  #define SYSCTL1_FC13CTRLSEL                      SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,13)
  #define SYSCTL1_FC13CTRLSEL_NS                   SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,13)
  #define SYSCTL1_SHAREDCTRLSET0                   SYSCTL1_SHAREDCTRLSET_REG(SYSCTL1_BASE_PTR,0)
  #define SYSCTL1_SHAREDCTRLSET0_NS                SYSCTL1_SHAREDCTRLSET_REG(SYSCTL1_BASE_PTR_NS,0)
  #define SYSCTL1_SHAREDCTRLSET1                   SYSCTL1_SHAREDCTRLSET_REG(SYSCTL1_BASE_PTR,1)
  #define SYSCTL1_SHAREDCTRLSET1_NS                SYSCTL1_SHAREDCTRLSET_REG(SYSCTL1_BASE_PTR_NS,1)
  #define SYSCTL1_RXEVPULSEGEN                     SYSCTL1_RXEVPULSEGEN_REG(SYSCTL1_BASE_PTR)
  #define SYSCTL1_RXEVPULSEGEN_NS                  SYSCTL1_RXEVPULSEGEN_REG(SYSCTL1_BASE_PTR_NS)
#else
  /* SYSCTL1 */
  #define SYSCTL1_UPDATELCKOUT                     SYSCTL1_UPDATELCKOUT_REG(SYSCTL1_BASE_PTR)
  #define SYSCTL1_MCLKPINDIR                       SYSCTL1_MCLKPINDIR_REG(SYSCTL1_BASE_PTR)
  #define SYSCTL1_DSPNMISRCSEL                     SYSCTL1_DSPNMISRCSEL_REG(SYSCTL1_BASE_PTR)
  #define SYSCTL1_FC0CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,0)
  #define SYSCTL1_FC1CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,1)
  #define SYSCTL1_FC2CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,2)
  #define SYSCTL1_FC3CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,3)
  #define SYSCTL1_FC4CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,4)
  #define SYSCTL1_FC5CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,5)
  #define SYSCTL1_FC6CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,6)
  #define SYSCTL1_FC7CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,7)
  #define SYSCTL1_FC8CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,8)
  #define SYSCTL1_FC9CTRLSEL                       SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,9)
  #define SYSCTL1_FC10CTRLSEL                      SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,10)
  #define SYSCTL1_FC11CTRLSEL                      SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,11)
  #define SYSCTL1_FC12CTRLSEL                      SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,12)
  #define SYSCTL1_FC13CTRLSEL                      SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,13)
  #define SYSCTL1_SHAREDCTRLSET0                   SYSCTL1_SHAREDCTRLSET_REG(SYSCTL1_BASE_PTR,0)
  #define SYSCTL1_SHAREDCTRLSET1                   SYSCTL1_SHAREDCTRLSET_REG(SYSCTL1_BASE_PTR,1)
  #define SYSCTL1_RXEVPULSEGEN                     SYSCTL1_RXEVPULSEGEN_REG(SYSCTL1_BASE_PTR)
#endif

/* SYSCTL1 - Register array accessors */
#define SYSCTL1_FCCTRLSEL(index)                 SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,index)
#define SYSCTL1_FCCTRLSEL_NS(index)              SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR_NS,index)
#define SYSCTL1_FCCTRLSEL(index)                 SYSCTL1_FCCTRLSEL_REG(SYSCTL1_BASE_PTR,index)
#define SYSCTL1_SHAREDCTRLSET(index)             SYSCTL1_SHAREDCTRLSET_REG(SYSCTL1_BASE_PTR,index)
#define SYSCTL1_SHAREDCTRLSET_NS(index)          SYSCTL1_SHAREDCTRLSET_REG(SYSCTL1_BASE_PTR_NS,index)
#define SYSCTL1_SHAREDCTRLSET(index)             SYSCTL1_SHAREDCTRLSET_REG(SYSCTL1_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SYSCTL1_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SYSCTL1_Peripheral */


/* ----------------------------------------------------------------------------
   -- TRNG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TRNG_Peripheral TRNG
 * @{
 */

/** TRNG - Peripheral register structure */
typedef struct TRNG_MemMap {
  uint32_t MCTL;                                   /**< Miscellaneous Control Register, offset: 0x0 */
  uint32_t SCMISC;                                 /**< Statistical Check Miscellaneous Register, offset: 0x4 */
  uint32_t PKRRNG;                                 /**< Poker Range Register, offset: 0x8 */
  union {                                          /* offset: 0xC */
    uint32_t PKRMAX;                                 /**< Poker Maximum Limit Register, offset: 0xC */
    uint32_t PKRSQ;                                  /**< Poker Square Calculation Result Register, offset: 0xC */
  };
  uint32_t SDCTL;                                  /**< Seed Control Register, offset: 0x10 */
  union {                                          /* offset: 0x14 */
    uint32_t SBLIM;                                  /**< Sparse Bit Limit Register, offset: 0x14 */
    uint32_t TOTSAM;                                 /**< Total Samples Register, offset: 0x14 */
  };
  uint32_t FRQMIN;                                 /**< Frequency Count Minimum Limit Register, offset: 0x18 */
  union {                                          /* offset: 0x1C */
    uint32_t FRQCNT;                                 /**< Frequency Count Register, offset: 0x1C */
    uint32_t FRQMAX;                                 /**< Frequency Count Maximum Limit Register, offset: 0x1C */
  };
  union {                                          /* offset: 0x20 */
    uint32_t SCMC;                                   /**< Statistical Check Monobit Count Register, offset: 0x20 */
    uint32_t SCML;                                   /**< Statistical Check Monobit Limit Register, offset: 0x20 */
  };
  union {                                          /* offset: 0x24 */
    uint32_t SCR1C;                                  /**< Statistical Check Run Length 1 Count Register, offset: 0x24 */
    uint32_t SCR1L;                                  /**< Statistical Check Run Length 1 Limit Register, offset: 0x24 */
  };
  union {                                          /* offset: 0x28 */
    uint32_t SCR2C;                                  /**< Statistical Check Run Length 2 Count Register, offset: 0x28 */
    uint32_t SCR2L;                                  /**< Statistical Check Run Length 2 Limit Register, offset: 0x28 */
  };
  union {                                          /* offset: 0x2C */
    uint32_t SCR3C;                                  /**< Statistical Check Run Length 3 Count Register, offset: 0x2C */
    uint32_t SCR3L;                                  /**< Statistical Check Run Length 3 Limit Register, offset: 0x2C */
  };
  union {                                          /* offset: 0x30 */
    uint32_t SCR4C;                                  /**< Statistical Check Run Length 4 Count Register, offset: 0x30 */
    uint32_t SCR4L;                                  /**< Statistical Check Run Length 4 Limit Register, offset: 0x30 */
  };
  union {                                          /* offset: 0x34 */
    uint32_t SCR5C;                                  /**< Statistical Check Run Length 5 Count Register, offset: 0x34 */
    uint32_t SCR5L;                                  /**< Statistical Check Run Length 5 Limit Register, offset: 0x34 */
  };
  union {                                          /* offset: 0x38 */
    uint32_t SCR6PC;                                 /**< Statistical Check Run Length 6+ Count Register, offset: 0x38 */
    uint32_t SCR6PL;                                 /**< Statistical Check Run Length 6+ Limit Register, offset: 0x38 */
  };
  uint32_t STATUS;                                 /**< Status Register, offset: 0x3C */
  uint32_t ENT[16];                                /**< Entropy Read Register, array offset: 0x40, array step: 0x4 */
  uint32_t PKRCNT10;                               /**< Statistical Check Poker Count 1 and 0 Register, offset: 0x80 */
  uint32_t PKRCNT32;                               /**< Statistical Check Poker Count 3 and 2 Register, offset: 0x84 */
  uint32_t PKRCNT54;                               /**< Statistical Check Poker Count 5 and 4 Register, offset: 0x88 */
  uint32_t PKRCNT76;                               /**< Statistical Check Poker Count 7 and 6 Register, offset: 0x8C */
  uint32_t PKRCNT98;                               /**< Statistical Check Poker Count 9 and 8 Register, offset: 0x90 */
  uint32_t PKRCNTBA;                               /**< Statistical Check Poker Count B and A Register, offset: 0x94 */
  uint32_t PKRCNTDC;                               /**< Statistical Check Poker Count D and C Register, offset: 0x98 */
  uint32_t PKRCNTFE;                               /**< Statistical Check Poker Count F and E Register, offset: 0x9C */
  uint32_t SEC_CFG;                                /**< Security Configuration Register, offset: 0xA0 */
  uint32_t INT_CTRL;                               /**< Interrupt Control Register, offset: 0xA4 */
  uint32_t INT_MASK;                               /**< Mask Register, offset: 0xA8 */
  uint32_t INT_STATUS;                             /**< Interrupt Status Register, offset: 0xAC */
  uint8_t RESERVED_0[64];
  uint32_t VID1;                                   /**< Version ID Register (MS), offset: 0xF0 */
  uint32_t VID2;                                   /**< Version ID Register (LS), offset: 0xF4 */
} volatile *TRNG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- TRNG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TRNG_Register_Accessor_Macros TRNG - Register accessor macros
 * @{
 */


/* TRNG - Register accessors */
#define TRNG_MCTL_REG(base)                      ((base)->MCTL)
#define TRNG_SCMISC_REG(base)                    ((base)->SCMISC)
#define TRNG_PKRRNG_REG(base)                    ((base)->PKRRNG)
#define TRNG_PKRMAX_REG(base)                    ((base)->PKRMAX)
#define TRNG_PKRSQ_REG(base)                     ((base)->PKRSQ)
#define TRNG_SDCTL_REG(base)                     ((base)->SDCTL)
#define TRNG_SBLIM_REG(base)                     ((base)->SBLIM)
#define TRNG_TOTSAM_REG(base)                    ((base)->TOTSAM)
#define TRNG_FRQMIN_REG(base)                    ((base)->FRQMIN)
#define TRNG_FRQCNT_REG(base)                    ((base)->FRQCNT)
#define TRNG_FRQMAX_REG(base)                    ((base)->FRQMAX)
#define TRNG_SCMC_REG(base)                      ((base)->SCMC)
#define TRNG_SCML_REG(base)                      ((base)->SCML)
#define TRNG_SCR1C_REG(base)                     ((base)->SCR1C)
#define TRNG_SCR1L_REG(base)                     ((base)->SCR1L)
#define TRNG_SCR2C_REG(base)                     ((base)->SCR2C)
#define TRNG_SCR2L_REG(base)                     ((base)->SCR2L)
#define TRNG_SCR3C_REG(base)                     ((base)->SCR3C)
#define TRNG_SCR3L_REG(base)                     ((base)->SCR3L)
#define TRNG_SCR4C_REG(base)                     ((base)->SCR4C)
#define TRNG_SCR4L_REG(base)                     ((base)->SCR4L)
#define TRNG_SCR5C_REG(base)                     ((base)->SCR5C)
#define TRNG_SCR5L_REG(base)                     ((base)->SCR5L)
#define TRNG_SCR6PC_REG(base)                    ((base)->SCR6PC)
#define TRNG_SCR6PL_REG(base)                    ((base)->SCR6PL)
#define TRNG_STATUS_REG(base)                    ((base)->STATUS)
#define TRNG_ENT_REG(base,index)                 ((base)->ENT[index])
#define TRNG_PKRCNT10_REG(base)                  ((base)->PKRCNT10)
#define TRNG_PKRCNT32_REG(base)                  ((base)->PKRCNT32)
#define TRNG_PKRCNT54_REG(base)                  ((base)->PKRCNT54)
#define TRNG_PKRCNT76_REG(base)                  ((base)->PKRCNT76)
#define TRNG_PKRCNT98_REG(base)                  ((base)->PKRCNT98)
#define TRNG_PKRCNTBA_REG(base)                  ((base)->PKRCNTBA)
#define TRNG_PKRCNTDC_REG(base)                  ((base)->PKRCNTDC)
#define TRNG_PKRCNTFE_REG(base)                  ((base)->PKRCNTFE)
#define TRNG_SEC_CFG_REG(base)                   ((base)->SEC_CFG)
#define TRNG_INT_CTRL_REG(base)                  ((base)->INT_CTRL)
#define TRNG_INT_MASK_REG(base)                  ((base)->INT_MASK)
#define TRNG_INT_STATUS_REG(base)                ((base)->INT_STATUS)
#define TRNG_VID1_REG(base)                      ((base)->VID1)
#define TRNG_VID2_REG(base)                      ((base)->VID2)

/*!
 * @}
 */ /* end of group TRNG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- TRNG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TRNG_Register_Masks TRNG Register Masks
 * @{
 */

/*! @name MCTL - Miscellaneous Control Register */
/*! @{ */
#define TRNG_MCTL_SAMP_MODE_MASK                 (0x3U)
#define TRNG_MCTL_SAMP_MODE_SHIFT                (0U)
/*! SAMP_MODE
 *  0b00..use Von Neumann data into both Entropy shifter and Statistical Checker
 *  0b01..use raw data into both Entropy shifter and Statistical Checker
 *  0b10..use Von Neumann data into Entropy shifter. Use raw data into Statistical Checker
 *  0b11..undefined/reserved.
 */
#define TRNG_MCTL_SAMP_MODE(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_MCTL_SAMP_MODE_SHIFT)) & TRNG_MCTL_SAMP_MODE_MASK)
#define TRNG_MCTL_OSC_DIV_MASK                   (0xCU)
#define TRNG_MCTL_OSC_DIV_SHIFT                  (2U)
/*! OSC_DIV
 *  0b00..use ring oscillator with no divide
 *  0b01..use ring oscillator divided-by-2
 *  0b10..use ring oscillator divided-by-4
 *  0b11..use ring oscillator divided-by-8
 */
#define TRNG_MCTL_OSC_DIV(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_MCTL_OSC_DIV_SHIFT)) & TRNG_MCTL_OSC_DIV_MASK)
#define TRNG_MCTL_UNUSED4_MASK                   (0x10U)
#define TRNG_MCTL_UNUSED4_SHIFT                  (4U)
#define TRNG_MCTL_TRNG_ACC_MASK                  (0x20U)
#define TRNG_MCTL_TRNG_ACC_SHIFT                 (5U)
#define TRNG_MCTL_RST_DEF_MASK                   (0x40U)
#define TRNG_MCTL_RST_DEF_SHIFT                  (6U)
#define TRNG_MCTL_FOR_SCLK_MASK                  (0x80U)
#define TRNG_MCTL_FOR_SCLK_SHIFT                 (7U)
#define TRNG_MCTL_FCT_FAIL_MASK                  (0x100U)
#define TRNG_MCTL_FCT_FAIL_SHIFT                 (8U)
#define TRNG_MCTL_FCT_VAL_MASK                   (0x200U)
#define TRNG_MCTL_FCT_VAL_SHIFT                  (9U)
#define TRNG_MCTL_ENT_VAL_MASK                   (0x400U)
#define TRNG_MCTL_ENT_VAL_SHIFT                  (10U)
#define TRNG_MCTL_TST_OUT_MASK                   (0x800U)
#define TRNG_MCTL_TST_OUT_SHIFT                  (11U)
#define TRNG_MCTL_ERR_MASK                       (0x1000U)
#define TRNG_MCTL_ERR_SHIFT                      (12U)
#define TRNG_MCTL_TSTOP_OK_MASK                  (0x2000U)
#define TRNG_MCTL_TSTOP_OK_SHIFT                 (13U)
#define TRNG_MCTL_PRGM_MASK                      (0x10000U)
#define TRNG_MCTL_PRGM_SHIFT                     (16U)
/*! @} */

/*! @name SCMISC - Statistical Check Miscellaneous Register */
/*! @{ */
#define TRNG_SCMISC_LRUN_MAX_MASK                (0xFFU)
#define TRNG_SCMISC_LRUN_MAX_SHIFT               (0U)
#define TRNG_SCMISC_LRUN_MAX(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_SCMISC_LRUN_MAX_SHIFT)) & TRNG_SCMISC_LRUN_MAX_MASK)
#define TRNG_SCMISC_RTY_CT_MASK                  (0xF0000U)
#define TRNG_SCMISC_RTY_CT_SHIFT                 (16U)
#define TRNG_SCMISC_RTY_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCMISC_RTY_CT_SHIFT)) & TRNG_SCMISC_RTY_CT_MASK)
/*! @} */

/*! @name PKRRNG - Poker Range Register */
/*! @{ */
#define TRNG_PKRRNG_PKR_RNG_MASK                 (0xFFFFU)
#define TRNG_PKRRNG_PKR_RNG_SHIFT                (0U)
#define TRNG_PKRRNG_PKR_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_PKRRNG_PKR_RNG_SHIFT)) & TRNG_PKRRNG_PKR_RNG_MASK)
/*! @} */

/*! @name PKRMAX - Poker Maximum Limit Register */
/*! @{ */
#define TRNG_PKRMAX_PKR_MAX_MASK                 (0xFFFFFFU)
#define TRNG_PKRMAX_PKR_MAX_SHIFT                (0U)
/*! PKR_MAX - Poker Maximum Limit.
 */
#define TRNG_PKRMAX_PKR_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_PKRMAX_PKR_MAX_SHIFT)) & TRNG_PKRMAX_PKR_MAX_MASK)
/*! @} */

/*! @name PKRSQ - Poker Square Calculation Result Register */
/*! @{ */
#define TRNG_PKRSQ_PKR_SQ_MASK                   (0xFFFFFFU)
#define TRNG_PKRSQ_PKR_SQ_SHIFT                  (0U)
/*! PKR_SQ - Poker Square Calculation Result.
 */
#define TRNG_PKRSQ_PKR_SQ(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_PKRSQ_PKR_SQ_SHIFT)) & TRNG_PKRSQ_PKR_SQ_MASK)
/*! @} */

/*! @name SDCTL - Seed Control Register */
/*! @{ */
#define TRNG_SDCTL_SAMP_SIZE_MASK                (0xFFFFU)
#define TRNG_SDCTL_SAMP_SIZE_SHIFT               (0U)
#define TRNG_SDCTL_SAMP_SIZE(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_SDCTL_SAMP_SIZE_SHIFT)) & TRNG_SDCTL_SAMP_SIZE_MASK)
#define TRNG_SDCTL_ENT_DLY_MASK                  (0xFFFF0000U)
#define TRNG_SDCTL_ENT_DLY_SHIFT                 (16U)
#define TRNG_SDCTL_ENT_DLY(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SDCTL_ENT_DLY_SHIFT)) & TRNG_SDCTL_ENT_DLY_MASK)
/*! @} */

/*! @name SBLIM - Sparse Bit Limit Register */
/*! @{ */
#define TRNG_SBLIM_SB_LIM_MASK                   (0x3FFU)
#define TRNG_SBLIM_SB_LIM_SHIFT                  (0U)
#define TRNG_SBLIM_SB_LIM(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_SBLIM_SB_LIM_SHIFT)) & TRNG_SBLIM_SB_LIM_MASK)
/*! @} */

/*! @name TOTSAM - Total Samples Register */
/*! @{ */
#define TRNG_TOTSAM_TOT_SAM_MASK                 (0xFFFFFU)
#define TRNG_TOTSAM_TOT_SAM_SHIFT                (0U)
#define TRNG_TOTSAM_TOT_SAM(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_TOTSAM_TOT_SAM_SHIFT)) & TRNG_TOTSAM_TOT_SAM_MASK)
/*! @} */

/*! @name FRQMIN - Frequency Count Minimum Limit Register */
/*! @{ */
#define TRNG_FRQMIN_FRQ_MIN_MASK                 (0x3FFFFFU)
#define TRNG_FRQMIN_FRQ_MIN_SHIFT                (0U)
#define TRNG_FRQMIN_FRQ_MIN(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_FRQMIN_FRQ_MIN_SHIFT)) & TRNG_FRQMIN_FRQ_MIN_MASK)
/*! @} */

/*! @name FRQCNT - Frequency Count Register */
/*! @{ */
#define TRNG_FRQCNT_FRQ_CT_MASK                  (0x3FFFFFU)
#define TRNG_FRQCNT_FRQ_CT_SHIFT                 (0U)
#define TRNG_FRQCNT_FRQ_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_FRQCNT_FRQ_CT_SHIFT)) & TRNG_FRQCNT_FRQ_CT_MASK)
/*! @} */

/*! @name FRQMAX - Frequency Count Maximum Limit Register */
/*! @{ */
#define TRNG_FRQMAX_FRQ_MAX_MASK                 (0x3FFFFFU)
#define TRNG_FRQMAX_FRQ_MAX_SHIFT                (0U)
#define TRNG_FRQMAX_FRQ_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_FRQMAX_FRQ_MAX_SHIFT)) & TRNG_FRQMAX_FRQ_MAX_MASK)
/*! @} */

/*! @name SCMC - Statistical Check Monobit Count Register */
/*! @{ */
#define TRNG_SCMC_MONO_CT_MASK                   (0xFFFFU)
#define TRNG_SCMC_MONO_CT_SHIFT                  (0U)
#define TRNG_SCMC_MONO_CT(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_SCMC_MONO_CT_SHIFT)) & TRNG_SCMC_MONO_CT_MASK)
/*! @} */

/*! @name SCML - Statistical Check Monobit Limit Register */
/*! @{ */
#define TRNG_SCML_MONO_MAX_MASK                  (0xFFFFU)
#define TRNG_SCML_MONO_MAX_SHIFT                 (0U)
#define TRNG_SCML_MONO_MAX(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCML_MONO_MAX_SHIFT)) & TRNG_SCML_MONO_MAX_MASK)
#define TRNG_SCML_MONO_RNG_MASK                  (0xFFFF0000U)
#define TRNG_SCML_MONO_RNG_SHIFT                 (16U)
#define TRNG_SCML_MONO_RNG(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCML_MONO_RNG_SHIFT)) & TRNG_SCML_MONO_RNG_MASK)
/*! @} */

/*! @name SCR1C - Statistical Check Run Length 1 Count Register */
/*! @{ */
#define TRNG_SCR1C_R1_0_CT_MASK                  (0x7FFFU)
#define TRNG_SCR1C_R1_0_CT_SHIFT                 (0U)
#define TRNG_SCR1C_R1_0_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR1C_R1_0_CT_SHIFT)) & TRNG_SCR1C_R1_0_CT_MASK)
#define TRNG_SCR1C_R1_1_CT_MASK                  (0x7FFF0000U)
#define TRNG_SCR1C_R1_1_CT_SHIFT                 (16U)
#define TRNG_SCR1C_R1_1_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR1C_R1_1_CT_SHIFT)) & TRNG_SCR1C_R1_1_CT_MASK)
/*! @} */

/*! @name SCR1L - Statistical Check Run Length 1 Limit Register */
/*! @{ */
#define TRNG_SCR1L_RUN1_MAX_MASK                 (0x7FFFU)
#define TRNG_SCR1L_RUN1_MAX_SHIFT                (0U)
#define TRNG_SCR1L_RUN1_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR1L_RUN1_MAX_SHIFT)) & TRNG_SCR1L_RUN1_MAX_MASK)
#define TRNG_SCR1L_RUN1_RNG_MASK                 (0x7FFF0000U)
#define TRNG_SCR1L_RUN1_RNG_SHIFT                (16U)
#define TRNG_SCR1L_RUN1_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR1L_RUN1_RNG_SHIFT)) & TRNG_SCR1L_RUN1_RNG_MASK)
/*! @} */

/*! @name SCR2C - Statistical Check Run Length 2 Count Register */
/*! @{ */
#define TRNG_SCR2C_R2_0_CT_MASK                  (0x3FFFU)
#define TRNG_SCR2C_R2_0_CT_SHIFT                 (0U)
#define TRNG_SCR2C_R2_0_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR2C_R2_0_CT_SHIFT)) & TRNG_SCR2C_R2_0_CT_MASK)
#define TRNG_SCR2C_R2_1_CT_MASK                  (0x3FFF0000U)
#define TRNG_SCR2C_R2_1_CT_SHIFT                 (16U)
#define TRNG_SCR2C_R2_1_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR2C_R2_1_CT_SHIFT)) & TRNG_SCR2C_R2_1_CT_MASK)
/*! @} */

/*! @name SCR2L - Statistical Check Run Length 2 Limit Register */
/*! @{ */
#define TRNG_SCR2L_RUN2_MAX_MASK                 (0x3FFFU)
#define TRNG_SCR2L_RUN2_MAX_SHIFT                (0U)
#define TRNG_SCR2L_RUN2_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR2L_RUN2_MAX_SHIFT)) & TRNG_SCR2L_RUN2_MAX_MASK)
#define TRNG_SCR2L_RUN2_RNG_MASK                 (0x3FFF0000U)
#define TRNG_SCR2L_RUN2_RNG_SHIFT                (16U)
#define TRNG_SCR2L_RUN2_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR2L_RUN2_RNG_SHIFT)) & TRNG_SCR2L_RUN2_RNG_MASK)
/*! @} */

/*! @name SCR3C - Statistical Check Run Length 3 Count Register */
/*! @{ */
#define TRNG_SCR3C_R3_0_CT_MASK                  (0x1FFFU)
#define TRNG_SCR3C_R3_0_CT_SHIFT                 (0U)
#define TRNG_SCR3C_R3_0_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR3C_R3_0_CT_SHIFT)) & TRNG_SCR3C_R3_0_CT_MASK)
#define TRNG_SCR3C_R3_1_CT_MASK                  (0x1FFF0000U)
#define TRNG_SCR3C_R3_1_CT_SHIFT                 (16U)
#define TRNG_SCR3C_R3_1_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR3C_R3_1_CT_SHIFT)) & TRNG_SCR3C_R3_1_CT_MASK)
/*! @} */

/*! @name SCR3L - Statistical Check Run Length 3 Limit Register */
/*! @{ */
#define TRNG_SCR3L_RUN3_MAX_MASK                 (0x1FFFU)
#define TRNG_SCR3L_RUN3_MAX_SHIFT                (0U)
#define TRNG_SCR3L_RUN3_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR3L_RUN3_MAX_SHIFT)) & TRNG_SCR3L_RUN3_MAX_MASK)
#define TRNG_SCR3L_RUN3_RNG_MASK                 (0x1FFF0000U)
#define TRNG_SCR3L_RUN3_RNG_SHIFT                (16U)
#define TRNG_SCR3L_RUN3_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR3L_RUN3_RNG_SHIFT)) & TRNG_SCR3L_RUN3_RNG_MASK)
/*! @} */

/*! @name SCR4C - Statistical Check Run Length 4 Count Register */
/*! @{ */
#define TRNG_SCR4C_R4_0_CT_MASK                  (0xFFFU)
#define TRNG_SCR4C_R4_0_CT_SHIFT                 (0U)
#define TRNG_SCR4C_R4_0_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR4C_R4_0_CT_SHIFT)) & TRNG_SCR4C_R4_0_CT_MASK)
#define TRNG_SCR4C_R4_1_CT_MASK                  (0xFFF0000U)
#define TRNG_SCR4C_R4_1_CT_SHIFT                 (16U)
#define TRNG_SCR4C_R4_1_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR4C_R4_1_CT_SHIFT)) & TRNG_SCR4C_R4_1_CT_MASK)
/*! @} */

/*! @name SCR4L - Statistical Check Run Length 4 Limit Register */
/*! @{ */
#define TRNG_SCR4L_RUN4_MAX_MASK                 (0xFFFU)
#define TRNG_SCR4L_RUN4_MAX_SHIFT                (0U)
#define TRNG_SCR4L_RUN4_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR4L_RUN4_MAX_SHIFT)) & TRNG_SCR4L_RUN4_MAX_MASK)
#define TRNG_SCR4L_RUN4_RNG_MASK                 (0xFFF0000U)
#define TRNG_SCR4L_RUN4_RNG_SHIFT                (16U)
#define TRNG_SCR4L_RUN4_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR4L_RUN4_RNG_SHIFT)) & TRNG_SCR4L_RUN4_RNG_MASK)
/*! @} */

/*! @name SCR5C - Statistical Check Run Length 5 Count Register */
/*! @{ */
#define TRNG_SCR5C_R5_0_CT_MASK                  (0x7FFU)
#define TRNG_SCR5C_R5_0_CT_SHIFT                 (0U)
#define TRNG_SCR5C_R5_0_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR5C_R5_0_CT_SHIFT)) & TRNG_SCR5C_R5_0_CT_MASK)
#define TRNG_SCR5C_R5_1_CT_MASK                  (0x7FF0000U)
#define TRNG_SCR5C_R5_1_CT_SHIFT                 (16U)
#define TRNG_SCR5C_R5_1_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR5C_R5_1_CT_SHIFT)) & TRNG_SCR5C_R5_1_CT_MASK)
/*! @} */

/*! @name SCR5L - Statistical Check Run Length 5 Limit Register */
/*! @{ */
#define TRNG_SCR5L_RUN5_MAX_MASK                 (0x7FFU)
#define TRNG_SCR5L_RUN5_MAX_SHIFT                (0U)
#define TRNG_SCR5L_RUN5_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR5L_RUN5_MAX_SHIFT)) & TRNG_SCR5L_RUN5_MAX_MASK)
#define TRNG_SCR5L_RUN5_RNG_MASK                 (0x7FF0000U)
#define TRNG_SCR5L_RUN5_RNG_SHIFT                (16U)
#define TRNG_SCR5L_RUN5_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR5L_RUN5_RNG_SHIFT)) & TRNG_SCR5L_RUN5_RNG_MASK)
/*! @} */

/*! @name SCR6PC - Statistical Check Run Length 6+ Count Register */
/*! @{ */
#define TRNG_SCR6PC_R6P_0_CT_MASK                (0x7FFU)
#define TRNG_SCR6PC_R6P_0_CT_SHIFT               (0U)
#define TRNG_SCR6PC_R6P_0_CT(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_SCR6PC_R6P_0_CT_SHIFT)) & TRNG_SCR6PC_R6P_0_CT_MASK)
#define TRNG_SCR6PC_R6P_1_CT_MASK                (0x7FF0000U)
#define TRNG_SCR6PC_R6P_1_CT_SHIFT               (16U)
#define TRNG_SCR6PC_R6P_1_CT(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_SCR6PC_R6P_1_CT_SHIFT)) & TRNG_SCR6PC_R6P_1_CT_MASK)
/*! @} */

/*! @name SCR6PL - Statistical Check Run Length 6+ Limit Register */
/*! @{ */
#define TRNG_SCR6PL_RUN6P_MAX_MASK               (0x7FFU)
#define TRNG_SCR6PL_RUN6P_MAX_SHIFT              (0U)
#define TRNG_SCR6PL_RUN6P_MAX(x)                 (((uint32_t)(((uint32_t)(x)) << TRNG_SCR6PL_RUN6P_MAX_SHIFT)) & TRNG_SCR6PL_RUN6P_MAX_MASK)
#define TRNG_SCR6PL_RUN6P_RNG_MASK               (0x7FF0000U)
#define TRNG_SCR6PL_RUN6P_RNG_SHIFT              (16U)
#define TRNG_SCR6PL_RUN6P_RNG(x)                 (((uint32_t)(((uint32_t)(x)) << TRNG_SCR6PL_RUN6P_RNG_SHIFT)) & TRNG_SCR6PL_RUN6P_RNG_MASK)
/*! @} */

/*! @name STATUS - Status Register */
/*! @{ */
#define TRNG_STATUS_TF1BR0_MASK                  (0x1U)
#define TRNG_STATUS_TF1BR0_SHIFT                 (0U)
#define TRNG_STATUS_TF1BR1_MASK                  (0x2U)
#define TRNG_STATUS_TF1BR1_SHIFT                 (1U)
#define TRNG_STATUS_TF2BR0_MASK                  (0x4U)
#define TRNG_STATUS_TF2BR0_SHIFT                 (2U)
#define TRNG_STATUS_TF2BR1_MASK                  (0x8U)
#define TRNG_STATUS_TF2BR1_SHIFT                 (3U)
#define TRNG_STATUS_TF3BR0_MASK                  (0x10U)
#define TRNG_STATUS_TF3BR0_SHIFT                 (4U)
#define TRNG_STATUS_TF3BR1_MASK                  (0x20U)
#define TRNG_STATUS_TF3BR1_SHIFT                 (5U)
#define TRNG_STATUS_TF4BR0_MASK                  (0x40U)
#define TRNG_STATUS_TF4BR0_SHIFT                 (6U)
#define TRNG_STATUS_TF4BR1_MASK                  (0x80U)
#define TRNG_STATUS_TF4BR1_SHIFT                 (7U)
#define TRNG_STATUS_TF5BR0_MASK                  (0x100U)
#define TRNG_STATUS_TF5BR0_SHIFT                 (8U)
#define TRNG_STATUS_TF5BR1_MASK                  (0x200U)
#define TRNG_STATUS_TF5BR1_SHIFT                 (9U)
#define TRNG_STATUS_TF6PBR0_MASK                 (0x400U)
#define TRNG_STATUS_TF6PBR0_SHIFT                (10U)
#define TRNG_STATUS_TF6PBR1_MASK                 (0x800U)
#define TRNG_STATUS_TF6PBR1_SHIFT                (11U)
#define TRNG_STATUS_TFSB_MASK                    (0x1000U)
#define TRNG_STATUS_TFSB_SHIFT                   (12U)
#define TRNG_STATUS_TFLR_MASK                    (0x2000U)
#define TRNG_STATUS_TFLR_SHIFT                   (13U)
#define TRNG_STATUS_TFP_MASK                     (0x4000U)
#define TRNG_STATUS_TFP_SHIFT                    (14U)
#define TRNG_STATUS_TFMB_MASK                    (0x8000U)
#define TRNG_STATUS_TFMB_SHIFT                   (15U)
#define TRNG_STATUS_RETRY_CT_MASK                (0xF0000U)
#define TRNG_STATUS_RETRY_CT_SHIFT               (16U)
#define TRNG_STATUS_RETRY_CT(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_STATUS_RETRY_CT_SHIFT)) & TRNG_STATUS_RETRY_CT_MASK)
/*! @} */

/*! @name ENT - Entropy Read Register */
/*! @{ */
#define TRNG_ENT_ENT_MASK                        (0xFFFFFFFFU)
#define TRNG_ENT_ENT_SHIFT                       (0U)
#define TRNG_ENT_ENT(x)                          (((uint32_t)(((uint32_t)(x)) << TRNG_ENT_ENT_SHIFT)) & TRNG_ENT_ENT_MASK)
/*! @} */

/* The count of TRNG_ENT */
#define TRNG_ENT_COUNT                           (16U)

/*! @name PKRCNT10 - Statistical Check Poker Count 1 and 0 Register */
/*! @{ */
#define TRNG_PKRCNT10_PKR_0_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNT10_PKR_0_CT_SHIFT             (0U)
#define TRNG_PKRCNT10_PKR_0_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT10_PKR_0_CT_SHIFT)) & TRNG_PKRCNT10_PKR_0_CT_MASK)
#define TRNG_PKRCNT10_PKR_1_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNT10_PKR_1_CT_SHIFT             (16U)
#define TRNG_PKRCNT10_PKR_1_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT10_PKR_1_CT_SHIFT)) & TRNG_PKRCNT10_PKR_1_CT_MASK)
/*! @} */

/*! @name PKRCNT32 - Statistical Check Poker Count 3 and 2 Register */
/*! @{ */
#define TRNG_PKRCNT32_PKR_2_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNT32_PKR_2_CT_SHIFT             (0U)
#define TRNG_PKRCNT32_PKR_2_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT32_PKR_2_CT_SHIFT)) & TRNG_PKRCNT32_PKR_2_CT_MASK)
#define TRNG_PKRCNT32_PKR_3_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNT32_PKR_3_CT_SHIFT             (16U)
#define TRNG_PKRCNT32_PKR_3_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT32_PKR_3_CT_SHIFT)) & TRNG_PKRCNT32_PKR_3_CT_MASK)
/*! @} */

/*! @name PKRCNT54 - Statistical Check Poker Count 5 and 4 Register */
/*! @{ */
#define TRNG_PKRCNT54_PKR_4_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNT54_PKR_4_CT_SHIFT             (0U)
#define TRNG_PKRCNT54_PKR_4_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT54_PKR_4_CT_SHIFT)) & TRNG_PKRCNT54_PKR_4_CT_MASK)
#define TRNG_PKRCNT54_PKR_5_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNT54_PKR_5_CT_SHIFT             (16U)
#define TRNG_PKRCNT54_PKR_5_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT54_PKR_5_CT_SHIFT)) & TRNG_PKRCNT54_PKR_5_CT_MASK)
/*! @} */

/*! @name PKRCNT76 - Statistical Check Poker Count 7 and 6 Register */
/*! @{ */
#define TRNG_PKRCNT76_PKR_6_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNT76_PKR_6_CT_SHIFT             (0U)
#define TRNG_PKRCNT76_PKR_6_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT76_PKR_6_CT_SHIFT)) & TRNG_PKRCNT76_PKR_6_CT_MASK)
#define TRNG_PKRCNT76_PKR_7_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNT76_PKR_7_CT_SHIFT             (16U)
#define TRNG_PKRCNT76_PKR_7_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT76_PKR_7_CT_SHIFT)) & TRNG_PKRCNT76_PKR_7_CT_MASK)
/*! @} */

/*! @name PKRCNT98 - Statistical Check Poker Count 9 and 8 Register */
/*! @{ */
#define TRNG_PKRCNT98_PKR_8_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNT98_PKR_8_CT_SHIFT             (0U)
#define TRNG_PKRCNT98_PKR_8_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT98_PKR_8_CT_SHIFT)) & TRNG_PKRCNT98_PKR_8_CT_MASK)
#define TRNG_PKRCNT98_PKR_9_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNT98_PKR_9_CT_SHIFT             (16U)
#define TRNG_PKRCNT98_PKR_9_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT98_PKR_9_CT_SHIFT)) & TRNG_PKRCNT98_PKR_9_CT_MASK)
/*! @} */

/*! @name PKRCNTBA - Statistical Check Poker Count B and A Register */
/*! @{ */
#define TRNG_PKRCNTBA_PKR_A_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNTBA_PKR_A_CT_SHIFT             (0U)
#define TRNG_PKRCNTBA_PKR_A_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTBA_PKR_A_CT_SHIFT)) & TRNG_PKRCNTBA_PKR_A_CT_MASK)
#define TRNG_PKRCNTBA_PKR_B_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNTBA_PKR_B_CT_SHIFT             (16U)
#define TRNG_PKRCNTBA_PKR_B_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTBA_PKR_B_CT_SHIFT)) & TRNG_PKRCNTBA_PKR_B_CT_MASK)
/*! @} */

/*! @name PKRCNTDC - Statistical Check Poker Count D and C Register */
/*! @{ */
#define TRNG_PKRCNTDC_PKR_C_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNTDC_PKR_C_CT_SHIFT             (0U)
#define TRNG_PKRCNTDC_PKR_C_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTDC_PKR_C_CT_SHIFT)) & TRNG_PKRCNTDC_PKR_C_CT_MASK)
#define TRNG_PKRCNTDC_PKR_D_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNTDC_PKR_D_CT_SHIFT             (16U)
#define TRNG_PKRCNTDC_PKR_D_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTDC_PKR_D_CT_SHIFT)) & TRNG_PKRCNTDC_PKR_D_CT_MASK)
/*! @} */

/*! @name PKRCNTFE - Statistical Check Poker Count F and E Register */
/*! @{ */
#define TRNG_PKRCNTFE_PKR_E_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNTFE_PKR_E_CT_SHIFT             (0U)
#define TRNG_PKRCNTFE_PKR_E_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTFE_PKR_E_CT_SHIFT)) & TRNG_PKRCNTFE_PKR_E_CT_MASK)
#define TRNG_PKRCNTFE_PKR_F_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNTFE_PKR_F_CT_SHIFT             (16U)
#define TRNG_PKRCNTFE_PKR_F_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTFE_PKR_F_CT_SHIFT)) & TRNG_PKRCNTFE_PKR_F_CT_MASK)
/*! @} */

/*! @name SEC_CFG - Security Configuration Register */
/*! @{ */
#define TRNG_SEC_CFG_UNUSED0_MASK                (0x1U)
#define TRNG_SEC_CFG_UNUSED0_SHIFT               (0U)
#define TRNG_SEC_CFG_NO_PRGM_MASK                (0x2U)
#define TRNG_SEC_CFG_NO_PRGM_SHIFT               (1U)
#define TRNG_SEC_CFG_UNUSED2_MASK                (0x4U)
#define TRNG_SEC_CFG_UNUSED2_SHIFT               (2U)
/*! @} */

/*! @name INT_CTRL - Interrupt Control Register */
/*! @{ */
#define TRNG_INT_CTRL_HW_ERR_MASK                (0x1U)
#define TRNG_INT_CTRL_HW_ERR_SHIFT               (0U)
#define TRNG_INT_CTRL_ENT_VAL_MASK               (0x2U)
#define TRNG_INT_CTRL_ENT_VAL_SHIFT              (1U)
#define TRNG_INT_CTRL_FRQ_CT_FAIL_MASK           (0x4U)
#define TRNG_INT_CTRL_FRQ_CT_FAIL_SHIFT          (2U)
#define TRNG_INT_CTRL_UNUSED_MASK                (0xFFFFFFF8U)
#define TRNG_INT_CTRL_UNUSED_SHIFT               (3U)
#define TRNG_INT_CTRL_UNUSED(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_INT_CTRL_UNUSED_SHIFT)) & TRNG_INT_CTRL_UNUSED_MASK)
/*! @} */

/*! @name INT_MASK - Mask Register */
/*! @{ */
#define TRNG_INT_MASK_HW_ERR_MASK                (0x1U)
#define TRNG_INT_MASK_HW_ERR_SHIFT               (0U)
#define TRNG_INT_MASK_ENT_VAL_MASK               (0x2U)
#define TRNG_INT_MASK_ENT_VAL_SHIFT              (1U)
#define TRNG_INT_MASK_FRQ_CT_FAIL_MASK           (0x4U)
#define TRNG_INT_MASK_FRQ_CT_FAIL_SHIFT          (2U)
/*! @} */

/*! @name INT_STATUS - Interrupt Status Register */
/*! @{ */
#define TRNG_INT_STATUS_HW_ERR_MASK              (0x1U)
#define TRNG_INT_STATUS_HW_ERR_SHIFT             (0U)
#define TRNG_INT_STATUS_ENT_VAL_MASK             (0x2U)
#define TRNG_INT_STATUS_ENT_VAL_SHIFT            (1U)
#define TRNG_INT_STATUS_FRQ_CT_FAIL_MASK         (0x4U)
#define TRNG_INT_STATUS_FRQ_CT_FAIL_SHIFT        (2U)
/*! @} */

/*! @name VID1 - Version ID Register (MS) */
/*! @{ */
#define TRNG_VID1_MIN_REV_MASK                   (0xFFU)
#define TRNG_VID1_MIN_REV_SHIFT                  (0U)
/*! MIN_REV
 *  0b00000000..Minor revision number for TRNG.
 */
#define TRNG_VID1_MIN_REV(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_VID1_MIN_REV_SHIFT)) & TRNG_VID1_MIN_REV_MASK)
#define TRNG_VID1_MAJ_REV_MASK                   (0xFF00U)
#define TRNG_VID1_MAJ_REV_SHIFT                  (8U)
/*! MAJ_REV
 *  0b00000001..Major revision number for TRNG.
 */
#define TRNG_VID1_MAJ_REV(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_VID1_MAJ_REV_SHIFT)) & TRNG_VID1_MAJ_REV_MASK)
#define TRNG_VID1_IP_ID_MASK                     (0xFFFF0000U)
#define TRNG_VID1_IP_ID_SHIFT                    (16U)
/*! IP_ID
 *  0b0000000000110000..ID for TRNG.
 */
#define TRNG_VID1_IP_ID(x)                       (((uint32_t)(((uint32_t)(x)) << TRNG_VID1_IP_ID_SHIFT)) & TRNG_VID1_IP_ID_MASK)
/*! @} */

/*! @name VID2 - Version ID Register (LS) */
/*! @{ */
#define TRNG_VID2_CONFIG_OPT_MASK                (0xFFU)
#define TRNG_VID2_CONFIG_OPT_SHIFT               (0U)
/*! CONFIG_OPT
 *  0b00000000..TRNG_CONFIG_OPT for TRNG.
 */
#define TRNG_VID2_CONFIG_OPT(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_VID2_CONFIG_OPT_SHIFT)) & TRNG_VID2_CONFIG_OPT_MASK)
#define TRNG_VID2_ECO_REV_MASK                   (0xFF00U)
#define TRNG_VID2_ECO_REV_SHIFT                  (8U)
/*! ECO_REV
 *  0b00000000..TRNG_ECO_REV for TRNG.
 */
#define TRNG_VID2_ECO_REV(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_VID2_ECO_REV_SHIFT)) & TRNG_VID2_ECO_REV_MASK)
#define TRNG_VID2_INTG_OPT_MASK                  (0xFF0000U)
#define TRNG_VID2_INTG_OPT_SHIFT                 (16U)
/*! INTG_OPT
 *  0b00000000..INTG_OPT for TRNG.
 */
#define TRNG_VID2_INTG_OPT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_VID2_INTG_OPT_SHIFT)) & TRNG_VID2_INTG_OPT_MASK)
#define TRNG_VID2_ERA_MASK                       (0xFF000000U)
#define TRNG_VID2_ERA_SHIFT                      (24U)
/*! ERA
 *  0b00000000..COMPILE_OPT for TRNG.
 */
#define TRNG_VID2_ERA(x)                         (((uint32_t)(((uint32_t)(x)) << TRNG_VID2_ERA_SHIFT)) & TRNG_VID2_ERA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group TRNG_Register_Masks */


/* TRNG - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral TRNG base pointer */
  #define TRNG_BASE_PTR                            ((TRNG_MemMapPtr)0x50138000u)
  /** Peripheral TRNG base pointer */
  #define TRNG_BASE_PTR_NS                         ((TRNG_MemMapPtr)0x40138000u)
  /** Array initializer of TRNG peripheral base pointers */
  #define TRNG_BASE_PTRS                           { TRNG_BASE_PTR }
  /** Array initializer of TRNG peripheral base pointers */
  #define TRNG_BASE_PTRS_NS                        { TRNG_BASE_PTR_NS }
#else
  /** Peripheral TRNG base pointer */
  #define TRNG_BASE_PTR                            ((TRNG_MemMapPtr)0x40138000u)
  /** Array initializer of TRNG peripheral base pointers */
  #define TRNG_BASE_PTRS                           { TRNG_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- TRNG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TRNG_Register_Accessor_Macros TRNG - Register accessor macros
 * @{
 */


/* TRNG - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* TRNG */
  #define TRNG_MCTL                                TRNG_MCTL_REG(TRNG_BASE_PTR)
  #define TRNG_MCTL_NS                             TRNG_MCTL_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCMISC                              TRNG_SCMISC_REG(TRNG_BASE_PTR)
  #define TRNG_SCMISC_NS                           TRNG_SCMISC_REG(TRNG_BASE_PTR_NS)
  #define TRNG_PKRRNG                              TRNG_PKRRNG_REG(TRNG_BASE_PTR)
  #define TRNG_PKRRNG_NS                           TRNG_PKRRNG_REG(TRNG_BASE_PTR_NS)
  #define TRNG_PKRMAX                              TRNG_PKRMAX_REG(TRNG_BASE_PTR)
  #define TRNG_PKRMAX_NS                           TRNG_PKRMAX_REG(TRNG_BASE_PTR_NS)
  #define TRNG_PKRSQ                               TRNG_PKRSQ_REG(TRNG_BASE_PTR)
  #define TRNG_PKRSQ_NS                            TRNG_PKRSQ_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SDCTL                               TRNG_SDCTL_REG(TRNG_BASE_PTR)
  #define TRNG_SDCTL_NS                            TRNG_SDCTL_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SBLIM                               TRNG_SBLIM_REG(TRNG_BASE_PTR)
  #define TRNG_SBLIM_NS                            TRNG_SBLIM_REG(TRNG_BASE_PTR_NS)
  #define TRNG_TOTSAM                              TRNG_TOTSAM_REG(TRNG_BASE_PTR)
  #define TRNG_TOTSAM_NS                           TRNG_TOTSAM_REG(TRNG_BASE_PTR_NS)
  #define TRNG_FRQMIN                              TRNG_FRQMIN_REG(TRNG_BASE_PTR)
  #define TRNG_FRQMIN_NS                           TRNG_FRQMIN_REG(TRNG_BASE_PTR_NS)
  #define TRNG_FRQCNT                              TRNG_FRQCNT_REG(TRNG_BASE_PTR)
  #define TRNG_FRQCNT_NS                           TRNG_FRQCNT_REG(TRNG_BASE_PTR_NS)
  #define TRNG_FRQMAX                              TRNG_FRQMAX_REG(TRNG_BASE_PTR)
  #define TRNG_FRQMAX_NS                           TRNG_FRQMAX_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCMC                                TRNG_SCMC_REG(TRNG_BASE_PTR)
  #define TRNG_SCMC_NS                             TRNG_SCMC_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCML                                TRNG_SCML_REG(TRNG_BASE_PTR)
  #define TRNG_SCML_NS                             TRNG_SCML_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR1C                               TRNG_SCR1C_REG(TRNG_BASE_PTR)
  #define TRNG_SCR1C_NS                            TRNG_SCR1C_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR1L                               TRNG_SCR1L_REG(TRNG_BASE_PTR)
  #define TRNG_SCR1L_NS                            TRNG_SCR1L_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR2C                               TRNG_SCR2C_REG(TRNG_BASE_PTR)
  #define TRNG_SCR2C_NS                            TRNG_SCR2C_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR2L                               TRNG_SCR2L_REG(TRNG_BASE_PTR)
  #define TRNG_SCR2L_NS                            TRNG_SCR2L_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR3C                               TRNG_SCR3C_REG(TRNG_BASE_PTR)
  #define TRNG_SCR3C_NS                            TRNG_SCR3C_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR3L                               TRNG_SCR3L_REG(TRNG_BASE_PTR)
  #define TRNG_SCR3L_NS                            TRNG_SCR3L_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR4C                               TRNG_SCR4C_REG(TRNG_BASE_PTR)
  #define TRNG_SCR4C_NS                            TRNG_SCR4C_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR4L                               TRNG_SCR4L_REG(TRNG_BASE_PTR)
  #define TRNG_SCR4L_NS                            TRNG_SCR4L_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR5C                               TRNG_SCR5C_REG(TRNG_BASE_PTR)
  #define TRNG_SCR5C_NS                            TRNG_SCR5C_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR5L                               TRNG_SCR5L_REG(TRNG_BASE_PTR)
  #define TRNG_SCR5L_NS                            TRNG_SCR5L_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR6PC                              TRNG_SCR6PC_REG(TRNG_BASE_PTR)
  #define TRNG_SCR6PC_NS                           TRNG_SCR6PC_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SCR6PL                              TRNG_SCR6PL_REG(TRNG_BASE_PTR)
  #define TRNG_SCR6PL_NS                           TRNG_SCR6PL_REG(TRNG_BASE_PTR_NS)
  #define TRNG_STATUS                              TRNG_STATUS_REG(TRNG_BASE_PTR)
  #define TRNG_STATUS_NS                           TRNG_STATUS_REG(TRNG_BASE_PTR_NS)
  #define TRNG_ENT0                                TRNG_ENT_REG(TRNG_BASE_PTR,0)
  #define TRNG_ENT0_NS                             TRNG_ENT_REG(TRNG_BASE_PTR_NS,0)
  #define TRNG_ENT1                                TRNG_ENT_REG(TRNG_BASE_PTR,1)
  #define TRNG_ENT1_NS                             TRNG_ENT_REG(TRNG_BASE_PTR_NS,1)
  #define TRNG_ENT2                                TRNG_ENT_REG(TRNG_BASE_PTR,2)
  #define TRNG_ENT2_NS                             TRNG_ENT_REG(TRNG_BASE_PTR_NS,2)
  #define TRNG_ENT3                                TRNG_ENT_REG(TRNG_BASE_PTR,3)
  #define TRNG_ENT3_NS                             TRNG_ENT_REG(TRNG_BASE_PTR_NS,3)
  #define TRNG_ENT4                                TRNG_ENT_REG(TRNG_BASE_PTR,4)
  #define TRNG_ENT4_NS                             TRNG_ENT_REG(TRNG_BASE_PTR_NS,4)
  #define TRNG_ENT5                                TRNG_ENT_REG(TRNG_BASE_PTR,5)
  #define TRNG_ENT5_NS                             TRNG_ENT_REG(TRNG_BASE_PTR_NS,5)
  #define TRNG_ENT6                                TRNG_ENT_REG(TRNG_BASE_PTR,6)
  #define TRNG_ENT6_NS                             TRNG_ENT_REG(TRNG_BASE_PTR_NS,6)
  #define TRNG_ENT7                                TRNG_ENT_REG(TRNG_BASE_PTR,7)
  #define TRNG_ENT7_NS                             TRNG_ENT_REG(TRNG_BASE_PTR_NS,7)
  #define TRNG_ENT8                                TRNG_ENT_REG(TRNG_BASE_PTR,8)
  #define TRNG_ENT8_NS                             TRNG_ENT_REG(TRNG_BASE_PTR_NS,8)
  #define TRNG_ENT9                                TRNG_ENT_REG(TRNG_BASE_PTR,9)
  #define TRNG_ENT9_NS                             TRNG_ENT_REG(TRNG_BASE_PTR_NS,9)
  #define TRNG_ENT10                               TRNG_ENT_REG(TRNG_BASE_PTR,10)
  #define TRNG_ENT10_NS                            TRNG_ENT_REG(TRNG_BASE_PTR_NS,10)
  #define TRNG_ENT11                               TRNG_ENT_REG(TRNG_BASE_PTR,11)
  #define TRNG_ENT11_NS                            TRNG_ENT_REG(TRNG_BASE_PTR_NS,11)
  #define TRNG_ENT12                               TRNG_ENT_REG(TRNG_BASE_PTR,12)
  #define TRNG_ENT12_NS                            TRNG_ENT_REG(TRNG_BASE_PTR_NS,12)
  #define TRNG_ENT13                               TRNG_ENT_REG(TRNG_BASE_PTR,13)
  #define TRNG_ENT13_NS                            TRNG_ENT_REG(TRNG_BASE_PTR_NS,13)
  #define TRNG_ENT14                               TRNG_ENT_REG(TRNG_BASE_PTR,14)
  #define TRNG_ENT14_NS                            TRNG_ENT_REG(TRNG_BASE_PTR_NS,14)
  #define TRNG_ENT15                               TRNG_ENT_REG(TRNG_BASE_PTR,15)
  #define TRNG_ENT15_NS                            TRNG_ENT_REG(TRNG_BASE_PTR_NS,15)
  #define TRNG_PKRCNT10                            TRNG_PKRCNT10_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNT10_NS                         TRNG_PKRCNT10_REG(TRNG_BASE_PTR_NS)
  #define TRNG_PKRCNT32                            TRNG_PKRCNT32_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNT32_NS                         TRNG_PKRCNT32_REG(TRNG_BASE_PTR_NS)
  #define TRNG_PKRCNT54                            TRNG_PKRCNT54_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNT54_NS                         TRNG_PKRCNT54_REG(TRNG_BASE_PTR_NS)
  #define TRNG_PKRCNT76                            TRNG_PKRCNT76_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNT76_NS                         TRNG_PKRCNT76_REG(TRNG_BASE_PTR_NS)
  #define TRNG_PKRCNT98                            TRNG_PKRCNT98_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNT98_NS                         TRNG_PKRCNT98_REG(TRNG_BASE_PTR_NS)
  #define TRNG_PKRCNTBA                            TRNG_PKRCNTBA_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNTBA_NS                         TRNG_PKRCNTBA_REG(TRNG_BASE_PTR_NS)
  #define TRNG_PKRCNTDC                            TRNG_PKRCNTDC_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNTDC_NS                         TRNG_PKRCNTDC_REG(TRNG_BASE_PTR_NS)
  #define TRNG_PKRCNTFE                            TRNG_PKRCNTFE_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNTFE_NS                         TRNG_PKRCNTFE_REG(TRNG_BASE_PTR_NS)
  #define TRNG_SEC_CFG                             TRNG_SEC_CFG_REG(TRNG_BASE_PTR)
  #define TRNG_SEC_CFG_NS                          TRNG_SEC_CFG_REG(TRNG_BASE_PTR_NS)
  #define TRNG_INT_CTRL                            TRNG_INT_CTRL_REG(TRNG_BASE_PTR)
  #define TRNG_INT_CTRL_NS                         TRNG_INT_CTRL_REG(TRNG_BASE_PTR_NS)
  #define TRNG_INT_MASK                            TRNG_INT_MASK_REG(TRNG_BASE_PTR)
  #define TRNG_INT_MASK_NS                         TRNG_INT_MASK_REG(TRNG_BASE_PTR_NS)
  #define TRNG_INT_STATUS                          TRNG_INT_STATUS_REG(TRNG_BASE_PTR)
  #define TRNG_INT_STATUS_NS                       TRNG_INT_STATUS_REG(TRNG_BASE_PTR_NS)
  #define TRNG_VID1                                TRNG_VID1_REG(TRNG_BASE_PTR)
  #define TRNG_VID1_NS                             TRNG_VID1_REG(TRNG_BASE_PTR_NS)
  #define TRNG_VID2                                TRNG_VID2_REG(TRNG_BASE_PTR)
  #define TRNG_VID2_NS                             TRNG_VID2_REG(TRNG_BASE_PTR_NS)
#else
  /* TRNG */
  #define TRNG_MCTL                                TRNG_MCTL_REG(TRNG_BASE_PTR)
  #define TRNG_SCMISC                              TRNG_SCMISC_REG(TRNG_BASE_PTR)
  #define TRNG_PKRRNG                              TRNG_PKRRNG_REG(TRNG_BASE_PTR)
  #define TRNG_PKRMAX                              TRNG_PKRMAX_REG(TRNG_BASE_PTR)
  #define TRNG_PKRSQ                               TRNG_PKRSQ_REG(TRNG_BASE_PTR)
  #define TRNG_SDCTL                               TRNG_SDCTL_REG(TRNG_BASE_PTR)
  #define TRNG_SBLIM                               TRNG_SBLIM_REG(TRNG_BASE_PTR)
  #define TRNG_TOTSAM                              TRNG_TOTSAM_REG(TRNG_BASE_PTR)
  #define TRNG_FRQMIN                              TRNG_FRQMIN_REG(TRNG_BASE_PTR)
  #define TRNG_FRQCNT                              TRNG_FRQCNT_REG(TRNG_BASE_PTR)
  #define TRNG_FRQMAX                              TRNG_FRQMAX_REG(TRNG_BASE_PTR)
  #define TRNG_SCMC                                TRNG_SCMC_REG(TRNG_BASE_PTR)
  #define TRNG_SCML                                TRNG_SCML_REG(TRNG_BASE_PTR)
  #define TRNG_SCR1C                               TRNG_SCR1C_REG(TRNG_BASE_PTR)
  #define TRNG_SCR1L                               TRNG_SCR1L_REG(TRNG_BASE_PTR)
  #define TRNG_SCR2C                               TRNG_SCR2C_REG(TRNG_BASE_PTR)
  #define TRNG_SCR2L                               TRNG_SCR2L_REG(TRNG_BASE_PTR)
  #define TRNG_SCR3C                               TRNG_SCR3C_REG(TRNG_BASE_PTR)
  #define TRNG_SCR3L                               TRNG_SCR3L_REG(TRNG_BASE_PTR)
  #define TRNG_SCR4C                               TRNG_SCR4C_REG(TRNG_BASE_PTR)
  #define TRNG_SCR4L                               TRNG_SCR4L_REG(TRNG_BASE_PTR)
  #define TRNG_SCR5C                               TRNG_SCR5C_REG(TRNG_BASE_PTR)
  #define TRNG_SCR5L                               TRNG_SCR5L_REG(TRNG_BASE_PTR)
  #define TRNG_SCR6PC                              TRNG_SCR6PC_REG(TRNG_BASE_PTR)
  #define TRNG_SCR6PL                              TRNG_SCR6PL_REG(TRNG_BASE_PTR)
  #define TRNG_STATUS                              TRNG_STATUS_REG(TRNG_BASE_PTR)
  #define TRNG_ENT0                                TRNG_ENT_REG(TRNG_BASE_PTR,0)
  #define TRNG_ENT1                                TRNG_ENT_REG(TRNG_BASE_PTR,1)
  #define TRNG_ENT2                                TRNG_ENT_REG(TRNG_BASE_PTR,2)
  #define TRNG_ENT3                                TRNG_ENT_REG(TRNG_BASE_PTR,3)
  #define TRNG_ENT4                                TRNG_ENT_REG(TRNG_BASE_PTR,4)
  #define TRNG_ENT5                                TRNG_ENT_REG(TRNG_BASE_PTR,5)
  #define TRNG_ENT6                                TRNG_ENT_REG(TRNG_BASE_PTR,6)
  #define TRNG_ENT7                                TRNG_ENT_REG(TRNG_BASE_PTR,7)
  #define TRNG_ENT8                                TRNG_ENT_REG(TRNG_BASE_PTR,8)
  #define TRNG_ENT9                                TRNG_ENT_REG(TRNG_BASE_PTR,9)
  #define TRNG_ENT10                               TRNG_ENT_REG(TRNG_BASE_PTR,10)
  #define TRNG_ENT11                               TRNG_ENT_REG(TRNG_BASE_PTR,11)
  #define TRNG_ENT12                               TRNG_ENT_REG(TRNG_BASE_PTR,12)
  #define TRNG_ENT13                               TRNG_ENT_REG(TRNG_BASE_PTR,13)
  #define TRNG_ENT14                               TRNG_ENT_REG(TRNG_BASE_PTR,14)
  #define TRNG_ENT15                               TRNG_ENT_REG(TRNG_BASE_PTR,15)
  #define TRNG_PKRCNT10                            TRNG_PKRCNT10_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNT32                            TRNG_PKRCNT32_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNT54                            TRNG_PKRCNT54_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNT76                            TRNG_PKRCNT76_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNT98                            TRNG_PKRCNT98_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNTBA                            TRNG_PKRCNTBA_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNTDC                            TRNG_PKRCNTDC_REG(TRNG_BASE_PTR)
  #define TRNG_PKRCNTFE                            TRNG_PKRCNTFE_REG(TRNG_BASE_PTR)
  #define TRNG_SEC_CFG                             TRNG_SEC_CFG_REG(TRNG_BASE_PTR)
  #define TRNG_INT_CTRL                            TRNG_INT_CTRL_REG(TRNG_BASE_PTR)
  #define TRNG_INT_MASK                            TRNG_INT_MASK_REG(TRNG_BASE_PTR)
  #define TRNG_INT_STATUS                          TRNG_INT_STATUS_REG(TRNG_BASE_PTR)
  #define TRNG_VID1                                TRNG_VID1_REG(TRNG_BASE_PTR)
  #define TRNG_VID2                                TRNG_VID2_REG(TRNG_BASE_PTR)
#endif

/* TRNG - Register array accessors */
#define TRNG_ENT(index)                          TRNG_ENT_REG(TRNG_BASE_PTR,index)
#define TRNG_ENT_NS(index)                       TRNG_ENT_REG(TRNG_BASE_PTR_NS,index)
#define TRNG_ENT(index)                          TRNG_ENT_REG(TRNG_BASE_PTR,index)

/*!
 * @}
 */ /* end of group TRNG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group TRNG_Peripheral */


/* ----------------------------------------------------------------------------
   -- USART
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USART_Peripheral USART
 * @{
 */

/** USART - Peripheral register structure */
typedef struct USART_MemMap {
  uint32_t CFG;                                    /**< USART Configuration, offset: 0x0 */
  uint32_t CTL;                                    /**< USART Control, offset: 0x4 */
  uint32_t STAT;                                   /**< USART Status, offset: 0x8 */
  uint32_t INTENSET;                               /**< Interrupt Enable Read and Set for USART (not FIFO) Status, offset: 0xC */
  uint32_t INTENCLR;                               /**< Interrupt Enable Clear, offset: 0x10 */
  uint8_t RESERVED_0[12];
  uint32_t BRG;                                    /**< Baud Rate Generator, offset: 0x20 */
  uint32_t INTSTAT;                                /**< Interrupt Status, offset: 0x24 */
  uint32_t OSR;                                    /**< Oversample Selection Register for Asynchronous Communication, offset: 0x28 */
  uint32_t ADDR;                                   /**< Address Register for Automatic Address Matching, offset: 0x2C */
  uint8_t RESERVED_1[3536];
  uint32_t FIFOCFG;                                /**< FIFO Configuration, offset: 0xE00 */
  uint32_t FIFOSTAT;                               /**< FIFO Status, offset: 0xE04 */
  uint32_t FIFOTRIG;                               /**< FIFO Trigger Settings for Interrupt and DMA Request, offset: 0xE08 */
  uint8_t RESERVED_2[4];
  uint32_t FIFOINTENSET;                           /**< FIFO Interrupt Enable, offset: 0xE10 */
  uint32_t FIFOINTENCLR;                           /**< FIFO Interrupt Enable Clear, offset: 0xE14 */
  uint32_t FIFOINTSTAT;                            /**< FIFO Interrupt Status, offset: 0xE18 */
  uint8_t RESERVED_3[4];
  uint32_t FIFOWR;                                 /**< FIFO Write Data, offset: 0xE20 */
  uint8_t RESERVED_4[12];
  uint32_t FIFORD;                                 /**< FIFO Read Data, offset: 0xE30 */
  uint8_t RESERVED_5[12];
  uint32_t FIFORDNOPOP;                            /**< FIFO Data Read with No FIFO Pop, offset: 0xE40 */
  uint8_t RESERVED_6[4];
  uint32_t FIFOSIZE;                               /**< FIFO Size, offset: 0xE48 */
  uint8_t RESERVED_7[432];
  uint32_t ID;                                     /**< Peripheral Identification, offset: 0xFFC */
} volatile *USART_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USART - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USART_Register_Accessor_Macros USART - Register accessor macros
 * @{
 */


/* USART - Register accessors */
#define USART_CFG_REG(base)                      ((base)->CFG)
#define USART_CTL_REG(base)                      ((base)->CTL)
#define USART_STAT_REG(base)                     ((base)->STAT)
#define USART_INTENSET_REG(base)                 ((base)->INTENSET)
#define USART_INTENCLR_REG(base)                 ((base)->INTENCLR)
#define USART_BRG_REG(base)                      ((base)->BRG)
#define USART_INTSTAT_REG(base)                  ((base)->INTSTAT)
#define USART_OSR_REG(base)                      ((base)->OSR)
#define USART_ADDR_REG(base)                     ((base)->ADDR)
#define USART_FIFOCFG_REG(base)                  ((base)->FIFOCFG)
#define USART_FIFOSTAT_REG(base)                 ((base)->FIFOSTAT)
#define USART_FIFOTRIG_REG(base)                 ((base)->FIFOTRIG)
#define USART_FIFOINTENSET_REG(base)             ((base)->FIFOINTENSET)
#define USART_FIFOINTENCLR_REG(base)             ((base)->FIFOINTENCLR)
#define USART_FIFOINTSTAT_REG(base)              ((base)->FIFOINTSTAT)
#define USART_FIFOWR_REG(base)                   ((base)->FIFOWR)
#define USART_FIFORD_REG(base)                   ((base)->FIFORD)
#define USART_FIFORDNOPOP_REG(base)              ((base)->FIFORDNOPOP)
#define USART_FIFOSIZE_REG(base)                 ((base)->FIFOSIZE)
#define USART_ID_REG(base)                       ((base)->ID)

/*!
 * @}
 */ /* end of group USART_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USART Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USART_Register_Masks USART Register Masks
 * @{
 */

/*! @name CFG - USART Configuration */
/*! @{ */
#define USART_CFG_ENABLE_MASK                    (0x1U)
#define USART_CFG_ENABLE_SHIFT                   (0U)
#define USART_CFG_DATALEN_MASK                   (0xCU)
#define USART_CFG_DATALEN_SHIFT                  (2U)
/*! DATALEN - Data Length. Selects the data size for the USART.
 *  0b00..7 bit data length
 *  0b01..8 bit data length
 *  0b10..9 bit data length. The 9th bit is commonly used for addressing in multidrop mode. See the ADDRDET[CTL].
 *  0b11..Reserved
 */
#define USART_CFG_DATALEN(x)                     (((uint32_t)(((uint32_t)(x)) << USART_CFG_DATALEN_SHIFT)) & USART_CFG_DATALEN_MASK)
#define USART_CFG_PARITYSEL_MASK                 (0x30U)
#define USART_CFG_PARITYSEL_SHIFT                (4U)
/*! PARITYSEL - Parity Select. Selects what type of parity is used by the USART.
 *  0b00..No parity
 *  0b01..Reserved
 *  0b10..Even parity
 *  0b11..Odd parity
 */
#define USART_CFG_PARITYSEL(x)                   (((uint32_t)(((uint32_t)(x)) << USART_CFG_PARITYSEL_SHIFT)) & USART_CFG_PARITYSEL_MASK)
#define USART_CFG_STOPLEN_MASK                   (0x40U)
#define USART_CFG_STOPLEN_SHIFT                  (6U)
#define USART_CFG_MODE32K_MASK                   (0x80U)
#define USART_CFG_MODE32K_SHIFT                  (7U)
#define USART_CFG_LINMODE_MASK                   (0x100U)
#define USART_CFG_LINMODE_SHIFT                  (8U)
#define USART_CFG_CTSEN_MASK                     (0x200U)
#define USART_CFG_CTSEN_SHIFT                    (9U)
#define USART_CFG_SYNCEN_MASK                    (0x800U)
#define USART_CFG_SYNCEN_SHIFT                   (11U)
#define USART_CFG_CLKPOL_MASK                    (0x1000U)
#define USART_CFG_CLKPOL_SHIFT                   (12U)
#define USART_CFG_SYNCMST_MASK                   (0x4000U)
#define USART_CFG_SYNCMST_SHIFT                  (14U)
#define USART_CFG_LOOP_MASK                      (0x8000U)
#define USART_CFG_LOOP_SHIFT                     (15U)
#define USART_CFG_OETA_MASK                      (0x40000U)
#define USART_CFG_OETA_SHIFT                     (18U)
#define USART_CFG_AUTOADDR_MASK                  (0x80000U)
#define USART_CFG_AUTOADDR_SHIFT                 (19U)
#define USART_CFG_OESEL_MASK                     (0x100000U)
#define USART_CFG_OESEL_SHIFT                    (20U)
#define USART_CFG_OEPOL_MASK                     (0x200000U)
#define USART_CFG_OEPOL_SHIFT                    (21U)
#define USART_CFG_RXPOL_MASK                     (0x400000U)
#define USART_CFG_RXPOL_SHIFT                    (22U)
#define USART_CFG_TXPOL_MASK                     (0x800000U)
#define USART_CFG_TXPOL_SHIFT                    (23U)
/*! @} */

/*! @name CTL - USART Control */
/*! @{ */
#define USART_CTL_TXBRKEN_MASK                   (0x2U)
#define USART_CTL_TXBRKEN_SHIFT                  (1U)
#define USART_CTL_ADDRDET_MASK                   (0x4U)
#define USART_CTL_ADDRDET_SHIFT                  (2U)
#define USART_CTL_TXDIS_MASK                     (0x40U)
#define USART_CTL_TXDIS_SHIFT                    (6U)
#define USART_CTL_CC_MASK                        (0x100U)
#define USART_CTL_CC_SHIFT                       (8U)
#define USART_CTL_CLRCCONRX_MASK                 (0x200U)
#define USART_CTL_CLRCCONRX_SHIFT                (9U)
#define USART_CTL_AUTOBAUD_MASK                  (0x10000U)
#define USART_CTL_AUTOBAUD_SHIFT                 (16U)
/*! @} */

/*! @name STAT - USART Status */
/*! @{ */
#define USART_STAT_RXIDLE_MASK                   (0x2U)
#define USART_STAT_RXIDLE_SHIFT                  (1U)
#define USART_STAT_TXIDLE_MASK                   (0x8U)
#define USART_STAT_TXIDLE_SHIFT                  (3U)
#define USART_STAT_CTS_MASK                      (0x10U)
#define USART_STAT_CTS_SHIFT                     (4U)
#define USART_STAT_DELTACTS_MASK                 (0x20U)
#define USART_STAT_DELTACTS_SHIFT                (5U)
#define USART_STAT_TXDISSTAT_MASK                (0x40U)
#define USART_STAT_TXDISSTAT_SHIFT               (6U)
#define USART_STAT_RXBRK_MASK                    (0x400U)
#define USART_STAT_RXBRK_SHIFT                   (10U)
#define USART_STAT_DELTARXBRK_MASK               (0x800U)
#define USART_STAT_DELTARXBRK_SHIFT              (11U)
#define USART_STAT_START_MASK                    (0x1000U)
#define USART_STAT_START_SHIFT                   (12U)
#define USART_STAT_FRAMERRINT_MASK               (0x2000U)
#define USART_STAT_FRAMERRINT_SHIFT              (13U)
#define USART_STAT_PARITYERRINT_MASK             (0x4000U)
#define USART_STAT_PARITYERRINT_SHIFT            (14U)
#define USART_STAT_RXNOISEINT_MASK               (0x8000U)
#define USART_STAT_RXNOISEINT_SHIFT              (15U)
#define USART_STAT_ABERR_MASK                    (0x10000U)
#define USART_STAT_ABERR_SHIFT                   (16U)
/*! @} */

/*! @name INTENSET - Interrupt Enable Read and Set for USART (not FIFO) Status */
/*! @{ */
#define USART_INTENSET_TXIDLEEN_MASK             (0x8U)
#define USART_INTENSET_TXIDLEEN_SHIFT            (3U)
#define USART_INTENSET_DELTACTSEN_MASK           (0x20U)
#define USART_INTENSET_DELTACTSEN_SHIFT          (5U)
#define USART_INTENSET_TXDISEN_MASK              (0x40U)
#define USART_INTENSET_TXDISEN_SHIFT             (6U)
#define USART_INTENSET_DELTARXBRKEN_MASK         (0x800U)
#define USART_INTENSET_DELTARXBRKEN_SHIFT        (11U)
#define USART_INTENSET_STARTEN_MASK              (0x1000U)
#define USART_INTENSET_STARTEN_SHIFT             (12U)
#define USART_INTENSET_FRAMERREN_MASK            (0x2000U)
#define USART_INTENSET_FRAMERREN_SHIFT           (13U)
#define USART_INTENSET_PARITYERREN_MASK          (0x4000U)
#define USART_INTENSET_PARITYERREN_SHIFT         (14U)
#define USART_INTENSET_RXNOISEEN_MASK            (0x8000U)
#define USART_INTENSET_RXNOISEEN_SHIFT           (15U)
#define USART_INTENSET_ABERREN_MASK              (0x10000U)
#define USART_INTENSET_ABERREN_SHIFT             (16U)
/*! @} */

/*! @name INTENCLR - Interrupt Enable Clear */
/*! @{ */
#define USART_INTENCLR_TXIDLECLR_MASK            (0x8U)
#define USART_INTENCLR_TXIDLECLR_SHIFT           (3U)
#define USART_INTENCLR_DELTACTSCLR_MASK          (0x20U)
#define USART_INTENCLR_DELTACTSCLR_SHIFT         (5U)
#define USART_INTENCLR_TXDISCLR_MASK             (0x40U)
#define USART_INTENCLR_TXDISCLR_SHIFT            (6U)
#define USART_INTENCLR_DELTARXBRKCLR_MASK        (0x800U)
#define USART_INTENCLR_DELTARXBRKCLR_SHIFT       (11U)
#define USART_INTENCLR_STARTCLR_MASK             (0x1000U)
#define USART_INTENCLR_STARTCLR_SHIFT            (12U)
#define USART_INTENCLR_FRAMERRCLR_MASK           (0x2000U)
#define USART_INTENCLR_FRAMERRCLR_SHIFT          (13U)
#define USART_INTENCLR_PARITYERRCLR_MASK         (0x4000U)
#define USART_INTENCLR_PARITYERRCLR_SHIFT        (14U)
#define USART_INTENCLR_RXNOISECLR_MASK           (0x8000U)
#define USART_INTENCLR_RXNOISECLR_SHIFT          (15U)
#define USART_INTENCLR_ABERRCLR_MASK             (0x10000U)
#define USART_INTENCLR_ABERRCLR_SHIFT            (16U)
/*! @} */

/*! @name BRG - Baud Rate Generator */
/*! @{ */
#define USART_BRG_BRGVAL_MASK                    (0xFFFFU)
#define USART_BRG_BRGVAL_SHIFT                   (0U)
/*! BRGVAL - Baud Rate Generator Value
 *  0b0000000000000000..FCLK is used directly by the USART function.
 *  0b0000000000000001..FCLK is divided by 2 before use by the USART function.
 *  0b0000000000000010..FCLK is divided by 3 before use by the USART function.
 *  0b1111111111111111..FCLK is divided by 65,536 before use by the USART function.
 */
#define USART_BRG_BRGVAL(x)                      (((uint32_t)(((uint32_t)(x)) << USART_BRG_BRGVAL_SHIFT)) & USART_BRG_BRGVAL_MASK)
/*! @} */

/*! @name INTSTAT - Interrupt Status */
/*! @{ */
#define USART_INTSTAT_TXIDLE_MASK                (0x8U)
#define USART_INTSTAT_TXIDLE_SHIFT               (3U)
#define USART_INTSTAT_DELTACTS_MASK              (0x20U)
#define USART_INTSTAT_DELTACTS_SHIFT             (5U)
#define USART_INTSTAT_TXDISINT_MASK              (0x40U)
#define USART_INTSTAT_TXDISINT_SHIFT             (6U)
#define USART_INTSTAT_DELTARXBRK_MASK            (0x800U)
#define USART_INTSTAT_DELTARXBRK_SHIFT           (11U)
#define USART_INTSTAT_START_MASK                 (0x1000U)
#define USART_INTSTAT_START_SHIFT                (12U)
#define USART_INTSTAT_FRAMERRINT_MASK            (0x2000U)
#define USART_INTSTAT_FRAMERRINT_SHIFT           (13U)
#define USART_INTSTAT_PARITYERRINT_MASK          (0x4000U)
#define USART_INTSTAT_PARITYERRINT_SHIFT         (14U)
#define USART_INTSTAT_RXNOISEINT_MASK            (0x8000U)
#define USART_INTSTAT_RXNOISEINT_SHIFT           (15U)
#define USART_INTSTAT_ABERRINT_MASK              (0x10000U)
#define USART_INTSTAT_ABERRINT_SHIFT             (16U)
/*! @} */

/*! @name OSR - Oversample Selection Register for Asynchronous Communication */
/*! @{ */
#define USART_OSR_OSRVAL_MASK                    (0xFU)
#define USART_OSR_OSRVAL_SHIFT                   (0U)
/*! OSRVAL - Oversample Selection Value
 *  0b0000..Not supported
 *  0b0001..Not supported
 *  0b0010..Not supported
 *  0b0011..Not supported
 *  0b0100..5 function clocks are used to transmit and receive each data bit.
 *  0b0101..6 function clocks are used to transmit and receive each data bit.
 *  0b1111..16 function clocks are used to transmit and receive each data bit.
 */
#define USART_OSR_OSRVAL(x)                      (((uint32_t)(((uint32_t)(x)) << USART_OSR_OSRVAL_SHIFT)) & USART_OSR_OSRVAL_MASK)
/*! @} */

/*! @name ADDR - Address Register for Automatic Address Matching */
/*! @{ */
#define USART_ADDR_ADDRESS_MASK                  (0xFFU)
#define USART_ADDR_ADDRESS_SHIFT                 (0U)
/*! ADDRESS - Address
 */
#define USART_ADDR_ADDRESS(x)                    (((uint32_t)(((uint32_t)(x)) << USART_ADDR_ADDRESS_SHIFT)) & USART_ADDR_ADDRESS_MASK)
/*! @} */

/*! @name FIFOCFG - FIFO Configuration */
/*! @{ */
#define USART_FIFOCFG_ENABLETX_MASK              (0x1U)
#define USART_FIFOCFG_ENABLETX_SHIFT             (0U)
#define USART_FIFOCFG_ENABLERX_MASK              (0x2U)
#define USART_FIFOCFG_ENABLERX_SHIFT             (1U)
#define USART_FIFOCFG_SIZE_MASK                  (0x30U)
#define USART_FIFOCFG_SIZE_SHIFT                 (4U)
/*! SIZE - FIFO Size Configuration
 *  0b00..FIFO is configured as 16 entries of 8 bits.
 *  0b01..Not used
 *  0b10..Not used
 *  0b11..Not used
 */
#define USART_FIFOCFG_SIZE(x)                    (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_SIZE_SHIFT)) & USART_FIFOCFG_SIZE_MASK)
#define USART_FIFOCFG_DMATX_MASK                 (0x1000U)
#define USART_FIFOCFG_DMATX_SHIFT                (12U)
#define USART_FIFOCFG_DMARX_MASK                 (0x2000U)
#define USART_FIFOCFG_DMARX_SHIFT                (13U)
#define USART_FIFOCFG_WAKETX_MASK                (0x4000U)
#define USART_FIFOCFG_WAKETX_SHIFT               (14U)
#define USART_FIFOCFG_WAKERX_MASK                (0x8000U)
#define USART_FIFOCFG_WAKERX_SHIFT               (15U)
#define USART_FIFOCFG_EMPTYTX_MASK               (0x10000U)
#define USART_FIFOCFG_EMPTYTX_SHIFT              (16U)
#define USART_FIFOCFG_EMPTYRX_MASK               (0x20000U)
#define USART_FIFOCFG_EMPTYRX_SHIFT              (17U)
#define USART_FIFOCFG_POPDBG_MASK                (0x40000U)
#define USART_FIFOCFG_POPDBG_SHIFT               (18U)
/*! @} */

/*! @name FIFOSTAT - FIFO Status */
/*! @{ */
#define USART_FIFOSTAT_TXERR_MASK                (0x1U)
#define USART_FIFOSTAT_TXERR_SHIFT               (0U)
#define USART_FIFOSTAT_RXERR_MASK                (0x2U)
#define USART_FIFOSTAT_RXERR_SHIFT               (1U)
#define USART_FIFOSTAT_PERINT_MASK               (0x8U)
#define USART_FIFOSTAT_PERINT_SHIFT              (3U)
#define USART_FIFOSTAT_TXEMPTY_MASK              (0x10U)
#define USART_FIFOSTAT_TXEMPTY_SHIFT             (4U)
#define USART_FIFOSTAT_TXNOTFULL_MASK            (0x20U)
#define USART_FIFOSTAT_TXNOTFULL_SHIFT           (5U)
#define USART_FIFOSTAT_RXNOTEMPTY_MASK           (0x40U)
#define USART_FIFOSTAT_RXNOTEMPTY_SHIFT          (6U)
#define USART_FIFOSTAT_RXFULL_MASK               (0x80U)
#define USART_FIFOSTAT_RXFULL_SHIFT              (7U)
#define USART_FIFOSTAT_TXLVL_MASK                (0x1F00U)
#define USART_FIFOSTAT_TXLVL_SHIFT               (8U)
/*! TXLVL - Transmit FIFO Current Level
 */
#define USART_FIFOSTAT_TXLVL(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_TXLVL_SHIFT)) & USART_FIFOSTAT_TXLVL_MASK)
#define USART_FIFOSTAT_RXLVL_MASK                (0x1F0000U)
#define USART_FIFOSTAT_RXLVL_SHIFT               (16U)
/*! RXLVL - Receive FIFO Current Level
 */
#define USART_FIFOSTAT_RXLVL(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_RXLVL_SHIFT)) & USART_FIFOSTAT_RXLVL_MASK)
/*! @} */

/*! @name FIFOTRIG - FIFO Trigger Settings for Interrupt and DMA Request */
/*! @{ */
#define USART_FIFOTRIG_TXLVLENA_MASK             (0x1U)
#define USART_FIFOTRIG_TXLVLENA_SHIFT            (0U)
#define USART_FIFOTRIG_RXLVLENA_MASK             (0x2U)
#define USART_FIFOTRIG_RXLVLENA_SHIFT            (1U)
#define USART_FIFOTRIG_TXLVL_MASK                (0xF00U)
#define USART_FIFOTRIG_TXLVL_SHIFT               (8U)
/*! TXLVL - Transmit FIFO Level Trigger Point
 *  0b0000..Trigger when the TX FIFO becomes empty
 *  0b0001..Trigger when the TX FIFO level decreases to 1 entry
 *  0b1111..Trigger when the TX FIFO level decreases to 15 entries (is no longer full)
 */
#define USART_FIFOTRIG_TXLVL(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOTRIG_TXLVL_SHIFT)) & USART_FIFOTRIG_TXLVL_MASK)
#define USART_FIFOTRIG_RXLVL_MASK                (0xF0000U)
#define USART_FIFOTRIG_RXLVL_SHIFT               (16U)
/*! RXLVL - Receive FIFO Level Trigger Point
 *  0b0000..Trigger when the RX FIFO has received 1 entry (is no longer empty)
 *  0b0001..Trigger when the RX FIFO has received 2 entries
 *  0b1111..Trigger when the RX FIFO has received 16 entries (has become full)
 */
#define USART_FIFOTRIG_RXLVL(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOTRIG_RXLVL_SHIFT)) & USART_FIFOTRIG_RXLVL_MASK)
/*! @} */

/*! @name FIFOINTENSET - FIFO Interrupt Enable */
/*! @{ */
#define USART_FIFOINTENSET_TXERR_MASK            (0x1U)
#define USART_FIFOINTENSET_TXERR_SHIFT           (0U)
#define USART_FIFOINTENSET_RXERR_MASK            (0x2U)
#define USART_FIFOINTENSET_RXERR_SHIFT           (1U)
#define USART_FIFOINTENSET_TXLVL_MASK            (0x4U)
#define USART_FIFOINTENSET_TXLVL_SHIFT           (2U)
#define USART_FIFOINTENSET_RXLVL_MASK            (0x8U)
#define USART_FIFOINTENSET_RXLVL_SHIFT           (3U)
/*! @} */

/*! @name FIFOINTENCLR - FIFO Interrupt Enable Clear */
/*! @{ */
#define USART_FIFOINTENCLR_TXERR_MASK            (0x1U)
#define USART_FIFOINTENCLR_TXERR_SHIFT           (0U)
#define USART_FIFOINTENCLR_RXERR_MASK            (0x2U)
#define USART_FIFOINTENCLR_RXERR_SHIFT           (1U)
#define USART_FIFOINTENCLR_TXLVL_MASK            (0x4U)
#define USART_FIFOINTENCLR_TXLVL_SHIFT           (2U)
#define USART_FIFOINTENCLR_RXLVL_MASK            (0x8U)
#define USART_FIFOINTENCLR_RXLVL_SHIFT           (3U)
/*! @} */

/*! @name FIFOINTSTAT - FIFO Interrupt Status */
/*! @{ */
#define USART_FIFOINTSTAT_TXERR_MASK             (0x1U)
#define USART_FIFOINTSTAT_TXERR_SHIFT            (0U)
#define USART_FIFOINTSTAT_RXERR_MASK             (0x2U)
#define USART_FIFOINTSTAT_RXERR_SHIFT            (1U)
#define USART_FIFOINTSTAT_TXLVL_MASK             (0x4U)
#define USART_FIFOINTSTAT_TXLVL_SHIFT            (2U)
#define USART_FIFOINTSTAT_RXLVL_MASK             (0x8U)
#define USART_FIFOINTSTAT_RXLVL_SHIFT            (3U)
#define USART_FIFOINTSTAT_PERINT_MASK            (0x10U)
#define USART_FIFOINTSTAT_PERINT_SHIFT           (4U)
/*! @} */

/*! @name FIFOWR - FIFO Write Data */
/*! @{ */
#define USART_FIFOWR_TXDATA_MASK                 (0x1FFU)
#define USART_FIFOWR_TXDATA_SHIFT                (0U)
/*! TXDATA - Transmit data to the FIFO
 */
#define USART_FIFOWR_TXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << USART_FIFOWR_TXDATA_SHIFT)) & USART_FIFOWR_TXDATA_MASK)
/*! @} */

/*! @name FIFORD - FIFO Read Data */
/*! @{ */
#define USART_FIFORD_RXDATA_MASK                 (0x1FFU)
#define USART_FIFORD_RXDATA_SHIFT                (0U)
/*! RXDATA - Received Data from the FIFO
 */
#define USART_FIFORD_RXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << USART_FIFORD_RXDATA_SHIFT)) & USART_FIFORD_RXDATA_MASK)
#define USART_FIFORD_FRAMERR_MASK                (0x2000U)
#define USART_FIFORD_FRAMERR_SHIFT               (13U)
#define USART_FIFORD_PARITYERR_MASK              (0x4000U)
#define USART_FIFORD_PARITYERR_SHIFT             (14U)
#define USART_FIFORD_RXNOISE_MASK                (0x8000U)
#define USART_FIFORD_RXNOISE_SHIFT               (15U)
/*! @} */

/*! @name FIFORDNOPOP - FIFO Data Read with No FIFO Pop */
/*! @{ */
#define USART_FIFORDNOPOP_RXDATA_MASK            (0x1FFU)
#define USART_FIFORDNOPOP_RXDATA_SHIFT           (0U)
/*! RXDATA - Received Data from the FIFO
 */
#define USART_FIFORDNOPOP_RXDATA(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFORDNOPOP_RXDATA_SHIFT)) & USART_FIFORDNOPOP_RXDATA_MASK)
#define USART_FIFORDNOPOP_FRAMERR_MASK           (0x2000U)
#define USART_FIFORDNOPOP_FRAMERR_SHIFT          (13U)
#define USART_FIFORDNOPOP_PARITYERR_MASK         (0x4000U)
#define USART_FIFORDNOPOP_PARITYERR_SHIFT        (14U)
#define USART_FIFORDNOPOP_RXNOISE_MASK           (0x8000U)
#define USART_FIFORDNOPOP_RXNOISE_SHIFT          (15U)
/*! @} */

/*! @name FIFOSIZE - FIFO Size */
/*! @{ */
#define USART_FIFOSIZE_FIFOSIZE_MASK             (0x1FU)
#define USART_FIFOSIZE_FIFOSIZE_SHIFT            (0U)
/*! FIFOSIZE - FIFO Size
 */
#define USART_FIFOSIZE_FIFOSIZE(x)               (((uint32_t)(((uint32_t)(x)) << USART_FIFOSIZE_FIFOSIZE_SHIFT)) & USART_FIFOSIZE_FIFOSIZE_MASK)
/*! @} */

/*! @name ID - Peripheral Identification */
/*! @{ */
#define USART_ID_APERTURE_MASK                   (0xFFU)
#define USART_ID_APERTURE_SHIFT                  (0U)
/*! APERTURE - Aperture
 */
#define USART_ID_APERTURE(x)                     (((uint32_t)(((uint32_t)(x)) << USART_ID_APERTURE_SHIFT)) & USART_ID_APERTURE_MASK)
#define USART_ID_MINOR_REV_MASK                  (0xF00U)
#define USART_ID_MINOR_REV_SHIFT                 (8U)
/*! MINOR_REV - Minor revision of module implementation
 */
#define USART_ID_MINOR_REV(x)                    (((uint32_t)(((uint32_t)(x)) << USART_ID_MINOR_REV_SHIFT)) & USART_ID_MINOR_REV_MASK)
#define USART_ID_MAJOR_REV_MASK                  (0xF000U)
#define USART_ID_MAJOR_REV_SHIFT                 (12U)
/*! MAJOR_REV - Major revision of module implementation
 */
#define USART_ID_MAJOR_REV(x)                    (((uint32_t)(((uint32_t)(x)) << USART_ID_MAJOR_REV_SHIFT)) & USART_ID_MAJOR_REV_MASK)
#define USART_ID_ID_MASK                         (0xFFFF0000U)
#define USART_ID_ID_SHIFT                        (16U)
/*! ID - Module identifier for the selected function
 */
#define USART_ID_ID(x)                           (((uint32_t)(((uint32_t)(x)) << USART_ID_ID_SHIFT)) & USART_ID_ID_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group USART_Register_Masks */


/* USART - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral USART0 base pointer */
  #define USART0_BASE_PTR                          ((USART_MemMapPtr)0x50106000u)
  /** Peripheral USART0 base pointer */
  #define USART0_BASE_PTR_NS                       ((USART_MemMapPtr)0x40106000u)
  /** Peripheral USART1 base pointer */
  #define USART1_BASE_PTR                          ((USART_MemMapPtr)0x50107000u)
  /** Peripheral USART1 base pointer */
  #define USART1_BASE_PTR_NS                       ((USART_MemMapPtr)0x40107000u)
  /** Peripheral USART2 base pointer */
  #define USART2_BASE_PTR                          ((USART_MemMapPtr)0x50108000u)
  /** Peripheral USART2 base pointer */
  #define USART2_BASE_PTR_NS                       ((USART_MemMapPtr)0x40108000u)
  /** Peripheral USART3 base pointer */
  #define USART3_BASE_PTR                          ((USART_MemMapPtr)0x50109000u)
  /** Peripheral USART3 base pointer */
  #define USART3_BASE_PTR_NS                       ((USART_MemMapPtr)0x40109000u)
  /** Peripheral USART4 base pointer */
  #define USART4_BASE_PTR                          ((USART_MemMapPtr)0x50122000u)
  /** Peripheral USART4 base pointer */
  #define USART4_BASE_PTR_NS                       ((USART_MemMapPtr)0x40122000u)
  /** Peripheral USART5 base pointer */
  #define USART5_BASE_PTR                          ((USART_MemMapPtr)0x50123000u)
  /** Peripheral USART5 base pointer */
  #define USART5_BASE_PTR_NS                       ((USART_MemMapPtr)0x40123000u)
  /** Peripheral USART6 base pointer */
  #define USART6_BASE_PTR                          ((USART_MemMapPtr)0x50124000u)
  /** Peripheral USART6 base pointer */
  #define USART6_BASE_PTR_NS                       ((USART_MemMapPtr)0x40124000u)
  /** Peripheral USART7 base pointer */
  #define USART7_BASE_PTR                          ((USART_MemMapPtr)0x50125000u)
  /** Peripheral USART7 base pointer */
  #define USART7_BASE_PTR_NS                       ((USART_MemMapPtr)0x40125000u)
  /** Peripheral USART8 base pointer */
  #define USART8_BASE_PTR                          ((USART_MemMapPtr)0x50209000u)
  /** Peripheral USART8 base pointer */
  #define USART8_BASE_PTR_NS                       ((USART_MemMapPtr)0x40209000u)
  /** Peripheral USART9 base pointer */
  #define USART9_BASE_PTR                          ((USART_MemMapPtr)0x5020A000u)
  /** Peripheral USART9 base pointer */
  #define USART9_BASE_PTR_NS                       ((USART_MemMapPtr)0x4020A000u)
  /** Peripheral USART10 base pointer */
  #define USART10_BASE_PTR                         ((USART_MemMapPtr)0x5020B000u)
  /** Peripheral USART10 base pointer */
  #define USART10_BASE_PTR_NS                      ((USART_MemMapPtr)0x4020B000u)
  /** Peripheral USART11 base pointer */
  #define USART11_BASE_PTR                         ((USART_MemMapPtr)0x5020C000u)
  /** Peripheral USART11 base pointer */
  #define USART11_BASE_PTR_NS                      ((USART_MemMapPtr)0x4020C000u)
  /** Peripheral USART12 base pointer */
  #define USART12_BASE_PTR                         ((USART_MemMapPtr)0x5020D000u)
  /** Peripheral USART12 base pointer */
  #define USART12_BASE_PTR_NS                      ((USART_MemMapPtr)0x4020D000u)
  /** Peripheral USART13 base pointer */
  #define USART13_BASE_PTR                         ((USART_MemMapPtr)0x5020E000u)
  /** Peripheral USART13 base pointer */
  #define USART13_BASE_PTR_NS                      ((USART_MemMapPtr)0x4020E000u)
  /** Array initializer of USART peripheral base pointers */
  #define USART_BASE_PTRS                          { USART0_BASE_PTR, USART1_BASE_PTR, USART2_BASE_PTR, USART3_BASE_PTR, USART4_BASE_PTR, USART5_BASE_PTR, USART6_BASE_PTR, USART7_BASE_PTR, USART8_BASE_PTR, USART9_BASE_PTR, USART10_BASE_PTR, USART11_BASE_PTR, USART12_BASE_PTR, USART13_BASE_PTR }
  /** Array initializer of USART peripheral base pointers */
  #define USART_BASE_PTRS_NS                       { USART0_BASE_PTR_NS, USART1_BASE_PTR_NS, USART2_BASE_PTR_NS, USART3_BASE_PTR_NS, USART4_BASE_PTR_NS, USART5_BASE_PTR_NS, USART6_BASE_PTR_NS, USART7_BASE_PTR_NS, USART8_BASE_PTR_NS, USART9_BASE_PTR_NS, USART10_BASE_PTR_NS, USART11_BASE_PTR_NS, USART12_BASE_PTR_NS, USART13_BASE_PTR_NS }
#else
  /** Peripheral USART0 base pointer */
  #define USART0_BASE_PTR                          ((USART_MemMapPtr)0x40106000u)
  /** Peripheral USART1 base pointer */
  #define USART1_BASE_PTR                          ((USART_MemMapPtr)0x40107000u)
  /** Peripheral USART2 base pointer */
  #define USART2_BASE_PTR                          ((USART_MemMapPtr)0x40108000u)
  /** Peripheral USART3 base pointer */
  #define USART3_BASE_PTR                          ((USART_MemMapPtr)0x40109000u)
  /** Peripheral USART4 base pointer */
  #define USART4_BASE_PTR                          ((USART_MemMapPtr)0x40122000u)
  /** Peripheral USART5 base pointer */
  #define USART5_BASE_PTR                          ((USART_MemMapPtr)0x40123000u)
  /** Peripheral USART6 base pointer */
  #define USART6_BASE_PTR                          ((USART_MemMapPtr)0x40124000u)
  /** Peripheral USART7 base pointer */
  #define USART7_BASE_PTR                          ((USART_MemMapPtr)0x40125000u)
  /** Peripheral USART8 base pointer */
  #define USART8_BASE_PTR                          ((USART_MemMapPtr)0x40209000u)
  /** Peripheral USART9 base pointer */
  #define USART9_BASE_PTR                          ((USART_MemMapPtr)0x4020A000u)
  /** Peripheral USART10 base pointer */
  #define USART10_BASE_PTR                         ((USART_MemMapPtr)0x4020B000u)
  /** Peripheral USART11 base pointer */
  #define USART11_BASE_PTR                         ((USART_MemMapPtr)0x4020C000u)
  /** Peripheral USART12 base pointer */
  #define USART12_BASE_PTR                         ((USART_MemMapPtr)0x4020D000u)
  /** Peripheral USART13 base pointer */
  #define USART13_BASE_PTR                         ((USART_MemMapPtr)0x4020E000u)
  /** Array initializer of USART peripheral base pointers */
  #define USART_BASE_PTRS                          { USART0_BASE_PTR, USART1_BASE_PTR, USART2_BASE_PTR, USART3_BASE_PTR, USART4_BASE_PTR, USART5_BASE_PTR, USART6_BASE_PTR, USART7_BASE_PTR, USART8_BASE_PTR, USART9_BASE_PTR, USART10_BASE_PTR, USART11_BASE_PTR, USART12_BASE_PTR, USART13_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- USART - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USART_Register_Accessor_Macros USART - Register accessor macros
 * @{
 */


/* USART - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* USART0 */
  #define FLEXCOMM0__USART_CFG                     USART_CFG_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_CFG_NS                  USART_CFG_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_CTL                     USART_CTL_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_CTL_NS                  USART_CTL_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_STAT                    USART_STAT_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_STAT_NS                 USART_STAT_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_INTENSET                USART_INTENSET_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_INTENSET_NS             USART_INTENSET_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_INTENCLR                USART_INTENCLR_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_INTENCLR_NS             USART_INTENCLR_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_BRG                     USART_BRG_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_BRG_NS                  USART_BRG_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_INTSTAT                 USART_INTSTAT_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_INTSTAT_NS              USART_INTSTAT_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_OSR                     USART_OSR_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_OSR_NS                  USART_OSR_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_ADDR                    USART_ADDR_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_ADDR_NS                 USART_ADDR_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_FIFOCFG                 USART_FIFOCFG_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOCFG_NS              USART_FIFOCFG_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOSTAT_NS             USART_FIFOSTAT_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOTRIG_NS             USART_FIFOTRIG_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOINTENSET_NS         USART_FIFOINTENSET_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOINTENCLR_NS         USART_FIFOINTENCLR_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOINTSTAT_NS          USART_FIFOINTSTAT_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_FIFOWR                  USART_FIFOWR_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOWR_NS               USART_FIFOWR_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_FIFORD                  USART_FIFORD_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFORD_NS               USART_FIFORD_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFORDNOPOP_NS          USART_FIFORDNOPOP_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOSIZE_NS             USART_FIFOSIZE_REG(USART0_BASE_PTR_NS)
  #define FLEXCOMM0__USART_ID                      USART_ID_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_ID_NS                   USART_ID_REG(USART0_BASE_PTR_NS)
  /* USART1 */
  #define FLEXCOMM1__USART_CFG                     USART_CFG_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_CFG_NS                  USART_CFG_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_CTL                     USART_CTL_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_CTL_NS                  USART_CTL_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_STAT                    USART_STAT_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_STAT_NS                 USART_STAT_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_INTENSET                USART_INTENSET_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_INTENSET_NS             USART_INTENSET_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_INTENCLR                USART_INTENCLR_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_INTENCLR_NS             USART_INTENCLR_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_BRG                     USART_BRG_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_BRG_NS                  USART_BRG_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_INTSTAT                 USART_INTSTAT_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_INTSTAT_NS              USART_INTSTAT_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_OSR                     USART_OSR_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_OSR_NS                  USART_OSR_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_ADDR                    USART_ADDR_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_ADDR_NS                 USART_ADDR_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_FIFOCFG                 USART_FIFOCFG_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOCFG_NS              USART_FIFOCFG_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOSTAT_NS             USART_FIFOSTAT_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOTRIG_NS             USART_FIFOTRIG_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOINTENSET_NS         USART_FIFOINTENSET_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOINTENCLR_NS         USART_FIFOINTENCLR_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOINTSTAT_NS          USART_FIFOINTSTAT_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_FIFOWR                  USART_FIFOWR_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOWR_NS               USART_FIFOWR_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_FIFORD                  USART_FIFORD_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFORD_NS               USART_FIFORD_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFORDNOPOP_NS          USART_FIFORDNOPOP_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOSIZE_NS             USART_FIFOSIZE_REG(USART1_BASE_PTR_NS)
  #define FLEXCOMM1__USART_ID                      USART_ID_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_ID_NS                   USART_ID_REG(USART1_BASE_PTR_NS)
  /* USART2 */
  #define FLEXCOMM2__USART_CFG                     USART_CFG_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_CFG_NS                  USART_CFG_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_CTL                     USART_CTL_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_CTL_NS                  USART_CTL_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_STAT                    USART_STAT_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_STAT_NS                 USART_STAT_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_INTENSET                USART_INTENSET_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_INTENSET_NS             USART_INTENSET_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_INTENCLR                USART_INTENCLR_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_INTENCLR_NS             USART_INTENCLR_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_BRG                     USART_BRG_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_BRG_NS                  USART_BRG_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_INTSTAT                 USART_INTSTAT_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_INTSTAT_NS              USART_INTSTAT_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_OSR                     USART_OSR_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_OSR_NS                  USART_OSR_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_ADDR                    USART_ADDR_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_ADDR_NS                 USART_ADDR_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_FIFOCFG                 USART_FIFOCFG_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOCFG_NS              USART_FIFOCFG_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOSTAT_NS             USART_FIFOSTAT_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOTRIG_NS             USART_FIFOTRIG_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOINTENSET_NS         USART_FIFOINTENSET_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOINTENCLR_NS         USART_FIFOINTENCLR_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOINTSTAT_NS          USART_FIFOINTSTAT_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_FIFOWR                  USART_FIFOWR_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOWR_NS               USART_FIFOWR_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_FIFORD                  USART_FIFORD_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFORD_NS               USART_FIFORD_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFORDNOPOP_NS          USART_FIFORDNOPOP_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOSIZE_NS             USART_FIFOSIZE_REG(USART2_BASE_PTR_NS)
  #define FLEXCOMM2__USART_ID                      USART_ID_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_ID_NS                   USART_ID_REG(USART2_BASE_PTR_NS)
  /* USART3 */
  #define FLEXCOMM3__USART_CFG                     USART_CFG_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_CFG_NS                  USART_CFG_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_CTL                     USART_CTL_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_CTL_NS                  USART_CTL_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_STAT                    USART_STAT_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_STAT_NS                 USART_STAT_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_INTENSET                USART_INTENSET_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_INTENSET_NS             USART_INTENSET_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_INTENCLR                USART_INTENCLR_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_INTENCLR_NS             USART_INTENCLR_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_BRG                     USART_BRG_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_BRG_NS                  USART_BRG_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_INTSTAT                 USART_INTSTAT_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_INTSTAT_NS              USART_INTSTAT_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_OSR                     USART_OSR_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_OSR_NS                  USART_OSR_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_ADDR                    USART_ADDR_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_ADDR_NS                 USART_ADDR_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_FIFOCFG                 USART_FIFOCFG_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOCFG_NS              USART_FIFOCFG_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOSTAT_NS             USART_FIFOSTAT_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOTRIG_NS             USART_FIFOTRIG_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOINTENSET_NS         USART_FIFOINTENSET_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOINTENCLR_NS         USART_FIFOINTENCLR_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOINTSTAT_NS          USART_FIFOINTSTAT_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_FIFOWR                  USART_FIFOWR_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOWR_NS               USART_FIFOWR_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_FIFORD                  USART_FIFORD_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFORD_NS               USART_FIFORD_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFORDNOPOP_NS          USART_FIFORDNOPOP_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOSIZE_NS             USART_FIFOSIZE_REG(USART3_BASE_PTR_NS)
  #define FLEXCOMM3__USART_ID                      USART_ID_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_ID_NS                   USART_ID_REG(USART3_BASE_PTR_NS)
  /* USART4 */
  #define FLEXCOMM4__USART_CFG                     USART_CFG_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_CFG_NS                  USART_CFG_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_CTL                     USART_CTL_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_CTL_NS                  USART_CTL_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_STAT                    USART_STAT_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_STAT_NS                 USART_STAT_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_INTENSET                USART_INTENSET_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_INTENSET_NS             USART_INTENSET_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_INTENCLR                USART_INTENCLR_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_INTENCLR_NS             USART_INTENCLR_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_BRG                     USART_BRG_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_BRG_NS                  USART_BRG_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_INTSTAT                 USART_INTSTAT_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_INTSTAT_NS              USART_INTSTAT_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_OSR                     USART_OSR_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_OSR_NS                  USART_OSR_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_ADDR                    USART_ADDR_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_ADDR_NS                 USART_ADDR_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_FIFOCFG                 USART_FIFOCFG_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOCFG_NS              USART_FIFOCFG_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOSTAT_NS             USART_FIFOSTAT_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOTRIG_NS             USART_FIFOTRIG_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOINTENSET_NS         USART_FIFOINTENSET_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOINTENCLR_NS         USART_FIFOINTENCLR_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOINTSTAT_NS          USART_FIFOINTSTAT_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_FIFOWR                  USART_FIFOWR_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOWR_NS               USART_FIFOWR_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_FIFORD                  USART_FIFORD_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFORD_NS               USART_FIFORD_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFORDNOPOP_NS          USART_FIFORDNOPOP_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOSIZE_NS             USART_FIFOSIZE_REG(USART4_BASE_PTR_NS)
  #define FLEXCOMM4__USART_ID                      USART_ID_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_ID_NS                   USART_ID_REG(USART4_BASE_PTR_NS)
  /* USART5 */
  #define FLEXCOMM5__USART_CFG                     USART_CFG_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_CFG_NS                  USART_CFG_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_CTL                     USART_CTL_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_CTL_NS                  USART_CTL_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_STAT                    USART_STAT_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_STAT_NS                 USART_STAT_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_INTENSET                USART_INTENSET_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_INTENSET_NS             USART_INTENSET_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_INTENCLR                USART_INTENCLR_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_INTENCLR_NS             USART_INTENCLR_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_BRG                     USART_BRG_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_BRG_NS                  USART_BRG_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_INTSTAT                 USART_INTSTAT_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_INTSTAT_NS              USART_INTSTAT_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_OSR                     USART_OSR_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_OSR_NS                  USART_OSR_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_ADDR                    USART_ADDR_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_ADDR_NS                 USART_ADDR_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_FIFOCFG                 USART_FIFOCFG_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOCFG_NS              USART_FIFOCFG_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOSTAT_NS             USART_FIFOSTAT_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOTRIG_NS             USART_FIFOTRIG_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOINTENSET_NS         USART_FIFOINTENSET_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOINTENCLR_NS         USART_FIFOINTENCLR_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOINTSTAT_NS          USART_FIFOINTSTAT_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_FIFOWR                  USART_FIFOWR_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOWR_NS               USART_FIFOWR_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_FIFORD                  USART_FIFORD_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFORD_NS               USART_FIFORD_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFORDNOPOP_NS          USART_FIFORDNOPOP_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOSIZE_NS             USART_FIFOSIZE_REG(USART5_BASE_PTR_NS)
  #define FLEXCOMM5__USART_ID                      USART_ID_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_ID_NS                   USART_ID_REG(USART5_BASE_PTR_NS)
  /* USART6 */
  #define FLEXCOMM6__USART_CFG                     USART_CFG_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_CFG_NS                  USART_CFG_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_CTL                     USART_CTL_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_CTL_NS                  USART_CTL_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_STAT                    USART_STAT_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_STAT_NS                 USART_STAT_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_INTENSET                USART_INTENSET_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_INTENSET_NS             USART_INTENSET_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_INTENCLR                USART_INTENCLR_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_INTENCLR_NS             USART_INTENCLR_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_BRG                     USART_BRG_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_BRG_NS                  USART_BRG_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_INTSTAT                 USART_INTSTAT_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_INTSTAT_NS              USART_INTSTAT_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_OSR                     USART_OSR_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_OSR_NS                  USART_OSR_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_ADDR                    USART_ADDR_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_ADDR_NS                 USART_ADDR_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_FIFOCFG                 USART_FIFOCFG_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOCFG_NS              USART_FIFOCFG_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOSTAT_NS             USART_FIFOSTAT_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOTRIG_NS             USART_FIFOTRIG_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOINTENSET_NS         USART_FIFOINTENSET_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOINTENCLR_NS         USART_FIFOINTENCLR_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOINTSTAT_NS          USART_FIFOINTSTAT_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_FIFOWR                  USART_FIFOWR_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOWR_NS               USART_FIFOWR_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_FIFORD                  USART_FIFORD_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFORD_NS               USART_FIFORD_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFORDNOPOP_NS          USART_FIFORDNOPOP_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOSIZE_NS             USART_FIFOSIZE_REG(USART6_BASE_PTR_NS)
  #define FLEXCOMM6__USART_ID                      USART_ID_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_ID_NS                   USART_ID_REG(USART6_BASE_PTR_NS)
  /* USART7 */
  #define FLEXCOMM7__USART_CFG                     USART_CFG_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_CFG_NS                  USART_CFG_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_CTL                     USART_CTL_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_CTL_NS                  USART_CTL_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_STAT                    USART_STAT_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_STAT_NS                 USART_STAT_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_INTENSET                USART_INTENSET_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_INTENSET_NS             USART_INTENSET_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_INTENCLR                USART_INTENCLR_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_INTENCLR_NS             USART_INTENCLR_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_BRG                     USART_BRG_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_BRG_NS                  USART_BRG_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_INTSTAT                 USART_INTSTAT_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_INTSTAT_NS              USART_INTSTAT_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_OSR                     USART_OSR_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_OSR_NS                  USART_OSR_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_ADDR                    USART_ADDR_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_ADDR_NS                 USART_ADDR_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_FIFOCFG                 USART_FIFOCFG_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOCFG_NS              USART_FIFOCFG_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOSTAT_NS             USART_FIFOSTAT_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOTRIG_NS             USART_FIFOTRIG_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOINTENSET_NS         USART_FIFOINTENSET_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOINTENCLR_NS         USART_FIFOINTENCLR_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOINTSTAT_NS          USART_FIFOINTSTAT_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_FIFOWR                  USART_FIFOWR_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOWR_NS               USART_FIFOWR_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_FIFORD                  USART_FIFORD_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFORD_NS               USART_FIFORD_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFORDNOPOP_NS          USART_FIFORDNOPOP_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOSIZE_NS             USART_FIFOSIZE_REG(USART7_BASE_PTR_NS)
  #define FLEXCOMM7__USART_ID                      USART_ID_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_ID_NS                   USART_ID_REG(USART7_BASE_PTR_NS)
  /* USART8 */
  #define FLEXCOMM8__USART_CFG                     USART_CFG_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_CFG_NS                  USART_CFG_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_CTL                     USART_CTL_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_CTL_NS                  USART_CTL_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_STAT                    USART_STAT_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_STAT_NS                 USART_STAT_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_INTENSET                USART_INTENSET_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_INTENSET_NS             USART_INTENSET_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_INTENCLR                USART_INTENCLR_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_INTENCLR_NS             USART_INTENCLR_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_BRG                     USART_BRG_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_BRG_NS                  USART_BRG_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_INTSTAT                 USART_INTSTAT_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_INTSTAT_NS              USART_INTSTAT_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_OSR                     USART_OSR_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_OSR_NS                  USART_OSR_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_ADDR                    USART_ADDR_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_ADDR_NS                 USART_ADDR_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_FIFOCFG                 USART_FIFOCFG_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOCFG_NS              USART_FIFOCFG_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOSTAT_NS             USART_FIFOSTAT_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOTRIG_NS             USART_FIFOTRIG_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOINTENSET_NS         USART_FIFOINTENSET_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOINTENCLR_NS         USART_FIFOINTENCLR_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOINTSTAT_NS          USART_FIFOINTSTAT_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_FIFOWR                  USART_FIFOWR_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOWR_NS               USART_FIFOWR_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_FIFORD                  USART_FIFORD_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFORD_NS               USART_FIFORD_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFORDNOPOP_NS          USART_FIFORDNOPOP_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOSIZE_NS             USART_FIFOSIZE_REG(USART8_BASE_PTR_NS)
  #define FLEXCOMM8__USART_ID                      USART_ID_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_ID_NS                   USART_ID_REG(USART8_BASE_PTR_NS)
  /* USART9 */
  #define FLEXCOMM9__USART_CFG                     USART_CFG_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_CFG_NS                  USART_CFG_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_CTL                     USART_CTL_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_CTL_NS                  USART_CTL_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_STAT                    USART_STAT_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_STAT_NS                 USART_STAT_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_INTENSET                USART_INTENSET_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_INTENSET_NS             USART_INTENSET_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_INTENCLR                USART_INTENCLR_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_INTENCLR_NS             USART_INTENCLR_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_BRG                     USART_BRG_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_BRG_NS                  USART_BRG_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_INTSTAT                 USART_INTSTAT_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_INTSTAT_NS              USART_INTSTAT_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_OSR                     USART_OSR_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_OSR_NS                  USART_OSR_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_ADDR                    USART_ADDR_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_ADDR_NS                 USART_ADDR_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_FIFOCFG                 USART_FIFOCFG_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOCFG_NS              USART_FIFOCFG_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOSTAT_NS             USART_FIFOSTAT_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOTRIG_NS             USART_FIFOTRIG_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOINTENSET_NS         USART_FIFOINTENSET_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOINTENCLR_NS         USART_FIFOINTENCLR_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOINTSTAT_NS          USART_FIFOINTSTAT_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_FIFOWR                  USART_FIFOWR_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOWR_NS               USART_FIFOWR_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_FIFORD                  USART_FIFORD_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFORD_NS               USART_FIFORD_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFORDNOPOP_NS          USART_FIFORDNOPOP_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOSIZE_NS             USART_FIFOSIZE_REG(USART9_BASE_PTR_NS)
  #define FLEXCOMM9__USART_ID                      USART_ID_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_ID_NS                   USART_ID_REG(USART9_BASE_PTR_NS)
  /* USART10 */
  #define FLEXCOMM10__USART_CFG                    USART_CFG_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_CFG_NS                 USART_CFG_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_CTL                    USART_CTL_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_CTL_NS                 USART_CTL_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_STAT                   USART_STAT_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_STAT_NS                USART_STAT_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_INTENSET               USART_INTENSET_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_INTENSET_NS            USART_INTENSET_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_INTENCLR               USART_INTENCLR_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_INTENCLR_NS            USART_INTENCLR_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_BRG                    USART_BRG_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_BRG_NS                 USART_BRG_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_INTSTAT                USART_INTSTAT_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_INTSTAT_NS             USART_INTSTAT_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_OSR                    USART_OSR_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_OSR_NS                 USART_OSR_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_ADDR                   USART_ADDR_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_ADDR_NS                USART_ADDR_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_FIFOCFG                USART_FIFOCFG_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOCFG_NS             USART_FIFOCFG_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_FIFOSTAT               USART_FIFOSTAT_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOSTAT_NS            USART_FIFOSTAT_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_FIFOTRIG               USART_FIFOTRIG_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOTRIG_NS            USART_FIFOTRIG_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_FIFOINTENSET           USART_FIFOINTENSET_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOINTENSET_NS        USART_FIFOINTENSET_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_FIFOINTENCLR           USART_FIFOINTENCLR_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOINTENCLR_NS        USART_FIFOINTENCLR_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_FIFOINTSTAT            USART_FIFOINTSTAT_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOINTSTAT_NS         USART_FIFOINTSTAT_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_FIFOWR                 USART_FIFOWR_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOWR_NS              USART_FIFOWR_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_FIFORD                 USART_FIFORD_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFORD_NS              USART_FIFORD_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_FIFORDNOPOP            USART_FIFORDNOPOP_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFORDNOPOP_NS         USART_FIFORDNOPOP_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_FIFOSIZE               USART_FIFOSIZE_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOSIZE_NS            USART_FIFOSIZE_REG(USART10_BASE_PTR_NS)
  #define FLEXCOMM10__USART_ID                     USART_ID_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_ID_NS                  USART_ID_REG(USART10_BASE_PTR_NS)
  /* USART11 */
  #define FLEXCOMM11__USART_CFG                    USART_CFG_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_CFG_NS                 USART_CFG_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_CTL                    USART_CTL_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_CTL_NS                 USART_CTL_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_STAT                   USART_STAT_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_STAT_NS                USART_STAT_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_INTENSET               USART_INTENSET_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_INTENSET_NS            USART_INTENSET_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_INTENCLR               USART_INTENCLR_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_INTENCLR_NS            USART_INTENCLR_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_BRG                    USART_BRG_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_BRG_NS                 USART_BRG_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_INTSTAT                USART_INTSTAT_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_INTSTAT_NS             USART_INTSTAT_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_OSR                    USART_OSR_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_OSR_NS                 USART_OSR_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_ADDR                   USART_ADDR_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_ADDR_NS                USART_ADDR_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_FIFOCFG                USART_FIFOCFG_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOCFG_NS             USART_FIFOCFG_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_FIFOSTAT               USART_FIFOSTAT_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOSTAT_NS            USART_FIFOSTAT_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_FIFOTRIG               USART_FIFOTRIG_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOTRIG_NS            USART_FIFOTRIG_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_FIFOINTENSET           USART_FIFOINTENSET_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOINTENSET_NS        USART_FIFOINTENSET_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_FIFOINTENCLR           USART_FIFOINTENCLR_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOINTENCLR_NS        USART_FIFOINTENCLR_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_FIFOINTSTAT            USART_FIFOINTSTAT_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOINTSTAT_NS         USART_FIFOINTSTAT_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_FIFOWR                 USART_FIFOWR_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOWR_NS              USART_FIFOWR_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_FIFORD                 USART_FIFORD_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFORD_NS              USART_FIFORD_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_FIFORDNOPOP            USART_FIFORDNOPOP_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFORDNOPOP_NS         USART_FIFORDNOPOP_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_FIFOSIZE               USART_FIFOSIZE_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOSIZE_NS            USART_FIFOSIZE_REG(USART11_BASE_PTR_NS)
  #define FLEXCOMM11__USART_ID                     USART_ID_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_ID_NS                  USART_ID_REG(USART11_BASE_PTR_NS)
  /* USART12 */
  #define FLEXCOMM12__USART_CFG                    USART_CFG_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_CFG_NS                 USART_CFG_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_CTL                    USART_CTL_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_CTL_NS                 USART_CTL_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_STAT                   USART_STAT_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_STAT_NS                USART_STAT_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_INTENSET               USART_INTENSET_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_INTENSET_NS            USART_INTENSET_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_INTENCLR               USART_INTENCLR_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_INTENCLR_NS            USART_INTENCLR_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_BRG                    USART_BRG_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_BRG_NS                 USART_BRG_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_INTSTAT                USART_INTSTAT_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_INTSTAT_NS             USART_INTSTAT_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_OSR                    USART_OSR_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_OSR_NS                 USART_OSR_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_ADDR                   USART_ADDR_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_ADDR_NS                USART_ADDR_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_FIFOCFG                USART_FIFOCFG_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOCFG_NS             USART_FIFOCFG_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_FIFOSTAT               USART_FIFOSTAT_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOSTAT_NS            USART_FIFOSTAT_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_FIFOTRIG               USART_FIFOTRIG_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOTRIG_NS            USART_FIFOTRIG_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_FIFOINTENSET           USART_FIFOINTENSET_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOINTENSET_NS        USART_FIFOINTENSET_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_FIFOINTENCLR           USART_FIFOINTENCLR_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOINTENCLR_NS        USART_FIFOINTENCLR_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_FIFOINTSTAT            USART_FIFOINTSTAT_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOINTSTAT_NS         USART_FIFOINTSTAT_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_FIFOWR                 USART_FIFOWR_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOWR_NS              USART_FIFOWR_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_FIFORD                 USART_FIFORD_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFORD_NS              USART_FIFORD_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_FIFORDNOPOP            USART_FIFORDNOPOP_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFORDNOPOP_NS         USART_FIFORDNOPOP_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_FIFOSIZE               USART_FIFOSIZE_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOSIZE_NS            USART_FIFOSIZE_REG(USART12_BASE_PTR_NS)
  #define FLEXCOMM12__USART_ID                     USART_ID_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_ID_NS                  USART_ID_REG(USART12_BASE_PTR_NS)
  /* USART13 */
  #define FLEXCOMM13__USART_CFG                    USART_CFG_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_CFG_NS                 USART_CFG_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_CTL                    USART_CTL_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_CTL_NS                 USART_CTL_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_STAT                   USART_STAT_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_STAT_NS                USART_STAT_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_INTENSET               USART_INTENSET_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_INTENSET_NS            USART_INTENSET_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_INTENCLR               USART_INTENCLR_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_INTENCLR_NS            USART_INTENCLR_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_BRG                    USART_BRG_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_BRG_NS                 USART_BRG_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_INTSTAT                USART_INTSTAT_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_INTSTAT_NS             USART_INTSTAT_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_OSR                    USART_OSR_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_OSR_NS                 USART_OSR_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_ADDR                   USART_ADDR_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_ADDR_NS                USART_ADDR_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_FIFOCFG                USART_FIFOCFG_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOCFG_NS             USART_FIFOCFG_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_FIFOSTAT               USART_FIFOSTAT_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOSTAT_NS            USART_FIFOSTAT_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_FIFOTRIG               USART_FIFOTRIG_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOTRIG_NS            USART_FIFOTRIG_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_FIFOINTENSET           USART_FIFOINTENSET_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOINTENSET_NS        USART_FIFOINTENSET_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_FIFOINTENCLR           USART_FIFOINTENCLR_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOINTENCLR_NS        USART_FIFOINTENCLR_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_FIFOINTSTAT            USART_FIFOINTSTAT_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOINTSTAT_NS         USART_FIFOINTSTAT_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_FIFOWR                 USART_FIFOWR_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOWR_NS              USART_FIFOWR_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_FIFORD                 USART_FIFORD_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFORD_NS              USART_FIFORD_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_FIFORDNOPOP            USART_FIFORDNOPOP_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFORDNOPOP_NS         USART_FIFORDNOPOP_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_FIFOSIZE               USART_FIFOSIZE_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOSIZE_NS            USART_FIFOSIZE_REG(USART13_BASE_PTR_NS)
  #define FLEXCOMM13__USART_ID                     USART_ID_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_ID_NS                  USART_ID_REG(USART13_BASE_PTR_NS)
#else
  /* USART0 */
  #define FLEXCOMM0__USART_CFG                     USART_CFG_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_CTL                     USART_CTL_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_STAT                    USART_STAT_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_INTENSET                USART_INTENSET_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_INTENCLR                USART_INTENCLR_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_BRG                     USART_BRG_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_INTSTAT                 USART_INTSTAT_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_OSR                     USART_OSR_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_ADDR                    USART_ADDR_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOCFG                 USART_FIFOCFG_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOWR                  USART_FIFOWR_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFORD                  USART_FIFORD_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART0_BASE_PTR)
  #define FLEXCOMM0__USART_ID                      USART_ID_REG(USART0_BASE_PTR)
  /* USART1 */
  #define FLEXCOMM1__USART_CFG                     USART_CFG_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_CTL                     USART_CTL_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_STAT                    USART_STAT_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_INTENSET                USART_INTENSET_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_INTENCLR                USART_INTENCLR_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_BRG                     USART_BRG_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_INTSTAT                 USART_INTSTAT_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_OSR                     USART_OSR_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_ADDR                    USART_ADDR_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOCFG                 USART_FIFOCFG_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOWR                  USART_FIFOWR_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFORD                  USART_FIFORD_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART1_BASE_PTR)
  #define FLEXCOMM1__USART_ID                      USART_ID_REG(USART1_BASE_PTR)
  /* USART2 */
  #define FLEXCOMM2__USART_CFG                     USART_CFG_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_CTL                     USART_CTL_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_STAT                    USART_STAT_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_INTENSET                USART_INTENSET_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_INTENCLR                USART_INTENCLR_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_BRG                     USART_BRG_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_INTSTAT                 USART_INTSTAT_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_OSR                     USART_OSR_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_ADDR                    USART_ADDR_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOCFG                 USART_FIFOCFG_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOWR                  USART_FIFOWR_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFORD                  USART_FIFORD_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART2_BASE_PTR)
  #define FLEXCOMM2__USART_ID                      USART_ID_REG(USART2_BASE_PTR)
  /* USART3 */
  #define FLEXCOMM3__USART_CFG                     USART_CFG_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_CTL                     USART_CTL_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_STAT                    USART_STAT_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_INTENSET                USART_INTENSET_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_INTENCLR                USART_INTENCLR_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_BRG                     USART_BRG_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_INTSTAT                 USART_INTSTAT_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_OSR                     USART_OSR_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_ADDR                    USART_ADDR_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOCFG                 USART_FIFOCFG_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOWR                  USART_FIFOWR_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFORD                  USART_FIFORD_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART3_BASE_PTR)
  #define FLEXCOMM3__USART_ID                      USART_ID_REG(USART3_BASE_PTR)
  /* USART4 */
  #define FLEXCOMM4__USART_CFG                     USART_CFG_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_CTL                     USART_CTL_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_STAT                    USART_STAT_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_INTENSET                USART_INTENSET_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_INTENCLR                USART_INTENCLR_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_BRG                     USART_BRG_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_INTSTAT                 USART_INTSTAT_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_OSR                     USART_OSR_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_ADDR                    USART_ADDR_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOCFG                 USART_FIFOCFG_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOWR                  USART_FIFOWR_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFORD                  USART_FIFORD_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART4_BASE_PTR)
  #define FLEXCOMM4__USART_ID                      USART_ID_REG(USART4_BASE_PTR)
  /* USART5 */
  #define FLEXCOMM5__USART_CFG                     USART_CFG_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_CTL                     USART_CTL_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_STAT                    USART_STAT_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_INTENSET                USART_INTENSET_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_INTENCLR                USART_INTENCLR_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_BRG                     USART_BRG_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_INTSTAT                 USART_INTSTAT_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_OSR                     USART_OSR_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_ADDR                    USART_ADDR_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOCFG                 USART_FIFOCFG_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOWR                  USART_FIFOWR_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFORD                  USART_FIFORD_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART5_BASE_PTR)
  #define FLEXCOMM5__USART_ID                      USART_ID_REG(USART5_BASE_PTR)
  /* USART6 */
  #define FLEXCOMM6__USART_CFG                     USART_CFG_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_CTL                     USART_CTL_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_STAT                    USART_STAT_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_INTENSET                USART_INTENSET_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_INTENCLR                USART_INTENCLR_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_BRG                     USART_BRG_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_INTSTAT                 USART_INTSTAT_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_OSR                     USART_OSR_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_ADDR                    USART_ADDR_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOCFG                 USART_FIFOCFG_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOWR                  USART_FIFOWR_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFORD                  USART_FIFORD_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART6_BASE_PTR)
  #define FLEXCOMM6__USART_ID                      USART_ID_REG(USART6_BASE_PTR)
  /* USART7 */
  #define FLEXCOMM7__USART_CFG                     USART_CFG_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_CTL                     USART_CTL_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_STAT                    USART_STAT_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_INTENSET                USART_INTENSET_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_INTENCLR                USART_INTENCLR_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_BRG                     USART_BRG_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_INTSTAT                 USART_INTSTAT_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_OSR                     USART_OSR_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_ADDR                    USART_ADDR_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOCFG                 USART_FIFOCFG_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOWR                  USART_FIFOWR_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFORD                  USART_FIFORD_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART7_BASE_PTR)
  #define FLEXCOMM7__USART_ID                      USART_ID_REG(USART7_BASE_PTR)
  /* USART8 */
  #define FLEXCOMM8__USART_CFG                     USART_CFG_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_CTL                     USART_CTL_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_STAT                    USART_STAT_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_INTENSET                USART_INTENSET_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_INTENCLR                USART_INTENCLR_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_BRG                     USART_BRG_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_INTSTAT                 USART_INTSTAT_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_OSR                     USART_OSR_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_ADDR                    USART_ADDR_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOCFG                 USART_FIFOCFG_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOWR                  USART_FIFOWR_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFORD                  USART_FIFORD_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART8_BASE_PTR)
  #define FLEXCOMM8__USART_ID                      USART_ID_REG(USART8_BASE_PTR)
  /* USART9 */
  #define FLEXCOMM9__USART_CFG                     USART_CFG_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_CTL                     USART_CTL_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_STAT                    USART_STAT_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_INTENSET                USART_INTENSET_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_INTENCLR                USART_INTENCLR_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_BRG                     USART_BRG_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_INTSTAT                 USART_INTSTAT_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_OSR                     USART_OSR_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_ADDR                    USART_ADDR_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOCFG                 USART_FIFOCFG_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOSTAT                USART_FIFOSTAT_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOTRIG                USART_FIFOTRIG_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOINTENSET            USART_FIFOINTENSET_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOINTENCLR            USART_FIFOINTENCLR_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOINTSTAT             USART_FIFOINTSTAT_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOWR                  USART_FIFOWR_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFORD                  USART_FIFORD_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFORDNOPOP             USART_FIFORDNOPOP_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_FIFOSIZE                USART_FIFOSIZE_REG(USART9_BASE_PTR)
  #define FLEXCOMM9__USART_ID                      USART_ID_REG(USART9_BASE_PTR)
  /* USART10 */
  #define FLEXCOMM10__USART_CFG                    USART_CFG_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_CTL                    USART_CTL_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_STAT                   USART_STAT_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_INTENSET               USART_INTENSET_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_INTENCLR               USART_INTENCLR_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_BRG                    USART_BRG_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_INTSTAT                USART_INTSTAT_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_OSR                    USART_OSR_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_ADDR                   USART_ADDR_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOCFG                USART_FIFOCFG_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOSTAT               USART_FIFOSTAT_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOTRIG               USART_FIFOTRIG_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOINTENSET           USART_FIFOINTENSET_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOINTENCLR           USART_FIFOINTENCLR_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOINTSTAT            USART_FIFOINTSTAT_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOWR                 USART_FIFOWR_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFORD                 USART_FIFORD_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFORDNOPOP            USART_FIFORDNOPOP_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_FIFOSIZE               USART_FIFOSIZE_REG(USART10_BASE_PTR)
  #define FLEXCOMM10__USART_ID                     USART_ID_REG(USART10_BASE_PTR)
  /* USART11 */
  #define FLEXCOMM11__USART_CFG                    USART_CFG_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_CTL                    USART_CTL_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_STAT                   USART_STAT_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_INTENSET               USART_INTENSET_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_INTENCLR               USART_INTENCLR_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_BRG                    USART_BRG_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_INTSTAT                USART_INTSTAT_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_OSR                    USART_OSR_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_ADDR                   USART_ADDR_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOCFG                USART_FIFOCFG_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOSTAT               USART_FIFOSTAT_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOTRIG               USART_FIFOTRIG_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOINTENSET           USART_FIFOINTENSET_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOINTENCLR           USART_FIFOINTENCLR_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOINTSTAT            USART_FIFOINTSTAT_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOWR                 USART_FIFOWR_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFORD                 USART_FIFORD_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFORDNOPOP            USART_FIFORDNOPOP_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_FIFOSIZE               USART_FIFOSIZE_REG(USART11_BASE_PTR)
  #define FLEXCOMM11__USART_ID                     USART_ID_REG(USART11_BASE_PTR)
  /* USART12 */
  #define FLEXCOMM12__USART_CFG                    USART_CFG_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_CTL                    USART_CTL_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_STAT                   USART_STAT_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_INTENSET               USART_INTENSET_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_INTENCLR               USART_INTENCLR_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_BRG                    USART_BRG_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_INTSTAT                USART_INTSTAT_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_OSR                    USART_OSR_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_ADDR                   USART_ADDR_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOCFG                USART_FIFOCFG_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOSTAT               USART_FIFOSTAT_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOTRIG               USART_FIFOTRIG_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOINTENSET           USART_FIFOINTENSET_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOINTENCLR           USART_FIFOINTENCLR_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOINTSTAT            USART_FIFOINTSTAT_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOWR                 USART_FIFOWR_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFORD                 USART_FIFORD_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFORDNOPOP            USART_FIFORDNOPOP_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_FIFOSIZE               USART_FIFOSIZE_REG(USART12_BASE_PTR)
  #define FLEXCOMM12__USART_ID                     USART_ID_REG(USART12_BASE_PTR)
  /* USART13 */
  #define FLEXCOMM13__USART_CFG                    USART_CFG_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_CTL                    USART_CTL_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_STAT                   USART_STAT_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_INTENSET               USART_INTENSET_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_INTENCLR               USART_INTENCLR_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_BRG                    USART_BRG_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_INTSTAT                USART_INTSTAT_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_OSR                    USART_OSR_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_ADDR                   USART_ADDR_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOCFG                USART_FIFOCFG_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOSTAT               USART_FIFOSTAT_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOTRIG               USART_FIFOTRIG_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOINTENSET           USART_FIFOINTENSET_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOINTENCLR           USART_FIFOINTENCLR_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOINTSTAT            USART_FIFOINTSTAT_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOWR                 USART_FIFOWR_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFORD                 USART_FIFORD_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFORDNOPOP            USART_FIFORDNOPOP_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_FIFOSIZE               USART_FIFOSIZE_REG(USART13_BASE_PTR)
  #define FLEXCOMM13__USART_ID                     USART_ID_REG(USART13_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group USART_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USART_Peripheral */


/* ----------------------------------------------------------------------------
   -- USBHSD
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSD_Peripheral USBHSD
 * @{
 */

/** USBHSD - Peripheral register structure */
typedef struct USBHSD_MemMap {
  uint32_t DEVCMDSTAT;                             /**< USB Device Command/Status, offset: 0x0 */
  uint32_t INFO;                                   /**< USB Info, offset: 0x4 */
  uint32_t EPLISTSTART;                            /**< USB EP Command/Status List Start Address, offset: 0x8 */
  uint32_t DATABUFSTART;                           /**< USB Data Buffer List Start Address, offset: 0xC */
  uint32_t LPM;                                    /**< USB Link Power Management, offset: 0x10 */
  uint32_t EPSKIP;                                 /**< USB Endpoint Skip, offset: 0x14 */
  uint32_t EPINUSE;                                /**< USB Endpoint Buffer in use, offset: 0x18 */
  uint32_t EPBUFCFG;                               /**< USB Endpoint Buffer Configuration, offset: 0x1C */
  uint32_t INTSTAT;                                /**< USB Interrupt Status, offset: 0x20 */
  uint32_t INTEN;                                  /**< USB Interrupt Enable, offset: 0x24 */
  uint32_t INTSETSTAT;                             /**< USB Set Interrupt Status, offset: 0x28 */
  uint8_t RESERVED_0[8];
  uint32_t EPTOGGLE;                               /**< USB Endpoint Toggle, offset: 0x34 */
} volatile *USBHSD_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USBHSD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSD_Register_Accessor_Macros USBHSD - Register accessor macros
 * @{
 */


/* USBHSD - Register accessors */
#define USBHSD_DEVCMDSTAT_REG(base)              ((base)->DEVCMDSTAT)
#define USBHSD_INFO_REG(base)                    ((base)->INFO)
#define USBHSD_EPLISTSTART_REG(base)             ((base)->EPLISTSTART)
#define USBHSD_DATABUFSTART_REG(base)            ((base)->DATABUFSTART)
#define USBHSD_LPM_REG(base)                     ((base)->LPM)
#define USBHSD_EPSKIP_REG(base)                  ((base)->EPSKIP)
#define USBHSD_EPINUSE_REG(base)                 ((base)->EPINUSE)
#define USBHSD_EPBUFCFG_REG(base)                ((base)->EPBUFCFG)
#define USBHSD_INTSTAT_REG(base)                 ((base)->INTSTAT)
#define USBHSD_INTEN_REG(base)                   ((base)->INTEN)
#define USBHSD_INTSETSTAT_REG(base)              ((base)->INTSETSTAT)
#define USBHSD_EPTOGGLE_REG(base)                ((base)->EPTOGGLE)

/*!
 * @}
 */ /* end of group USBHSD_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USBHSD Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSD_Register_Masks USBHSD Register Masks
 * @{
 */

/*! @name DEVCMDSTAT - USB Device Command/Status */
/*! @{ */
#define USBHSD_DEVCMDSTAT_DEV_ADDR_MASK          (0x7FU)
#define USBHSD_DEVCMDSTAT_DEV_ADDR_SHIFT         (0U)
/*! DEV_ADDR - USB Device Address
 */
#define USBHSD_DEVCMDSTAT_DEV_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_DEV_ADDR_SHIFT)) & USBHSD_DEVCMDSTAT_DEV_ADDR_MASK)
#define USBHSD_DEVCMDSTAT_DEV_EN_MASK            (0x80U)
#define USBHSD_DEVCMDSTAT_DEV_EN_SHIFT           (7U)
#define USBHSD_DEVCMDSTAT_SETUP_MASK             (0x100U)
#define USBHSD_DEVCMDSTAT_SETUP_SHIFT            (8U)
#define USBHSD_DEVCMDSTAT_FORCE_NEEDCLK_MASK     (0x200U)
#define USBHSD_DEVCMDSTAT_FORCE_NEEDCLK_SHIFT    (9U)
#define USBHSD_DEVCMDSTAT_FORCE_VBUS_MASK        (0x400U)
#define USBHSD_DEVCMDSTAT_FORCE_VBUS_SHIFT       (10U)
#define USBHSD_DEVCMDSTAT_LPM_SUP_MASK           (0x800U)
#define USBHSD_DEVCMDSTAT_LPM_SUP_SHIFT          (11U)
#define USBHSD_DEVCMDSTAT_INTONNAK_AO_MASK       (0x1000U)
#define USBHSD_DEVCMDSTAT_INTONNAK_AO_SHIFT      (12U)
#define USBHSD_DEVCMDSTAT_INTONNAK_AI_MASK       (0x2000U)
#define USBHSD_DEVCMDSTAT_INTONNAK_AI_SHIFT      (13U)
#define USBHSD_DEVCMDSTAT_INTONNAK_CO_MASK       (0x4000U)
#define USBHSD_DEVCMDSTAT_INTONNAK_CO_SHIFT      (14U)
#define USBHSD_DEVCMDSTAT_INTONNAK_CI_MASK       (0x8000U)
#define USBHSD_DEVCMDSTAT_INTONNAK_CI_SHIFT      (15U)
#define USBHSD_DEVCMDSTAT_DCON_MASK              (0x10000U)
#define USBHSD_DEVCMDSTAT_DCON_SHIFT             (16U)
#define USBHSD_DEVCMDSTAT_DSUS_MASK              (0x20000U)
#define USBHSD_DEVCMDSTAT_DSUS_SHIFT             (17U)
#define USBHSD_DEVCMDSTAT_LPM_SUS_MASK           (0x80000U)
#define USBHSD_DEVCMDSTAT_LPM_SUS_SHIFT          (19U)
#define USBHSD_DEVCMDSTAT_LPM_REWP_MASK          (0x100000U)
#define USBHSD_DEVCMDSTAT_LPM_REWP_SHIFT         (20U)
#define USBHSD_DEVCMDSTAT_SPEED_MASK             (0xC00000U)
#define USBHSD_DEVCMDSTAT_SPEED_SHIFT            (22U)
/*! SPEED - This field indicates the speed at which the device operates.
 *  0b00..Reserved
 *  0b01..Full-speed
 *  0b10..High-speed
 *  0b11..Reserved
 */
#define USBHSD_DEVCMDSTAT_SPEED(x)               (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_SPEED_SHIFT)) & USBHSD_DEVCMDSTAT_SPEED_MASK)
#define USBHSD_DEVCMDSTAT_DCON_C_MASK            (0x1000000U)
#define USBHSD_DEVCMDSTAT_DCON_C_SHIFT           (24U)
#define USBHSD_DEVCMDSTAT_DSUS_C_MASK            (0x2000000U)
#define USBHSD_DEVCMDSTAT_DSUS_C_SHIFT           (25U)
#define USBHSD_DEVCMDSTAT_DRES_C_MASK            (0x4000000U)
#define USBHSD_DEVCMDSTAT_DRES_C_SHIFT           (26U)
#define USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED_MASK    (0x10000000U)
#define USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED_SHIFT   (28U)
#define USBHSD_DEVCMDSTAT_PHY_TEST_MODE_MASK     (0xE0000000U)
#define USBHSD_DEVCMDSTAT_PHY_TEST_MODE_SHIFT    (29U)
/*! PHY_TEST_MODE - PHY test mode
 *  0b000..Test mode disabled
 *  0b001..Test_J
 *  0b010..Test_K
 *  0b011..Test_SE0_NAK
 *  0b100..Test_Packet
 *  0b101..Test_Force_Enable
 */
#define USBHSD_DEVCMDSTAT_PHY_TEST_MODE(x)       (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_PHY_TEST_MODE_SHIFT)) & USBHSD_DEVCMDSTAT_PHY_TEST_MODE_MASK)
/*! @} */

/*! @name INFO - USB Info */
/*! @{ */
#define USBHSD_INFO_FRAME_NR_MASK                (0x7FFU)
#define USBHSD_INFO_FRAME_NR_SHIFT               (0U)
/*! FRAME_NR - Frame number.
 */
#define USBHSD_INFO_FRAME_NR(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSD_INFO_FRAME_NR_SHIFT)) & USBHSD_INFO_FRAME_NR_MASK)
#define USBHSD_INFO_ERR_CODE_MASK                (0x7800U)
#define USBHSD_INFO_ERR_CODE_SHIFT               (11U)
/*! ERR_CODE - The error code which last occurred
 */
#define USBHSD_INFO_ERR_CODE(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSD_INFO_ERR_CODE_SHIFT)) & USBHSD_INFO_ERR_CODE_MASK)
#define USBHSD_INFO_MINREV_MASK                  (0xFF0000U)
#define USBHSD_INFO_MINREV_SHIFT                 (16U)
/*! MINREV - Minor revision
 */
#define USBHSD_INFO_MINREV(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_INFO_MINREV_SHIFT)) & USBHSD_INFO_MINREV_MASK)
#define USBHSD_INFO_MAJREV_MASK                  (0xFF000000U)
#define USBHSD_INFO_MAJREV_SHIFT                 (24U)
/*! MAJREV - Major revision
 */
#define USBHSD_INFO_MAJREV(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_INFO_MAJREV_SHIFT)) & USBHSD_INFO_MAJREV_MASK)
/*! @} */

/*! @name EPLISTSTART - USB EP Command/Status List Start Address */
/*! @{ */
#define USBHSD_EPLISTSTART_EP_LIST_PRG_MASK      (0xFFF00U)
#define USBHSD_EPLISTSTART_EP_LIST_PRG_SHIFT     (8U)
#define USBHSD_EPLISTSTART_EP_LIST_PRG(x)        (((uint32_t)(((uint32_t)(x)) << USBHSD_EPLISTSTART_EP_LIST_PRG_SHIFT)) & USBHSD_EPLISTSTART_EP_LIST_PRG_MASK)
#define USBHSD_EPLISTSTART_EP_LIST_FIXED_MASK    (0xFFF00000U)
#define USBHSD_EPLISTSTART_EP_LIST_FIXED_SHIFT   (20U)
#define USBHSD_EPLISTSTART_EP_LIST_FIXED(x)      (((uint32_t)(((uint32_t)(x)) << USBHSD_EPLISTSTART_EP_LIST_FIXED_SHIFT)) & USBHSD_EPLISTSTART_EP_LIST_FIXED_MASK)
/*! @} */

/*! @name DATABUFSTART - USB Data Buffer List Start Address */
/*! @{ */
#define USBHSD_DATABUFSTART_DA_BUF_FIXED_MASK    (0x3FFFFU)
#define USBHSD_DATABUFSTART_DA_BUF_FIXED_SHIFT   (0U)
#define USBHSD_DATABUFSTART_DA_BUF_FIXED(x)      (((uint32_t)(((uint32_t)(x)) << USBHSD_DATABUFSTART_DA_BUF_FIXED_SHIFT)) & USBHSD_DATABUFSTART_DA_BUF_FIXED_MASK)
#define USBHSD_DATABUFSTART_DA_BUF_MASK          (0xFFFC0000U)
#define USBHSD_DATABUFSTART_DA_BUF_SHIFT         (18U)
#define USBHSD_DATABUFSTART_DA_BUF(x)            (((uint32_t)(((uint32_t)(x)) << USBHSD_DATABUFSTART_DA_BUF_SHIFT)) & USBHSD_DATABUFSTART_DA_BUF_MASK)
/*! @} */

/*! @name LPM - USB Link Power Management */
/*! @{ */
#define USBHSD_LPM_HIRD_HW_MASK                  (0xFU)
#define USBHSD_LPM_HIRD_HW_SHIFT                 (0U)
/*! HIRD_HW - Host Initiated Resume Duration - HW.
 */
#define USBHSD_LPM_HIRD_HW(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_LPM_HIRD_HW_SHIFT)) & USBHSD_LPM_HIRD_HW_MASK)
#define USBHSD_LPM_HIRD_SW_MASK                  (0xF0U)
#define USBHSD_LPM_HIRD_SW_SHIFT                 (4U)
/*! HIRD_SW - Host Initiated Resume Duration - SW.
 */
#define USBHSD_LPM_HIRD_SW(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_LPM_HIRD_SW_SHIFT)) & USBHSD_LPM_HIRD_SW_MASK)
#define USBHSD_LPM_DATA_PENDING_MASK             (0x100U)
#define USBHSD_LPM_DATA_PENDING_SHIFT            (8U)
/*! @} */

/*! @name EPSKIP - USB Endpoint Skip */
/*! @{ */
#define USBHSD_EPSKIP_SKIP_MASK                  (0xFFFU)
#define USBHSD_EPSKIP_SKIP_SHIFT                 (0U)
/*! SKIP - Endpoint skip.
 */
#define USBHSD_EPSKIP_SKIP(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_EPSKIP_SKIP_SHIFT)) & USBHSD_EPSKIP_SKIP_MASK)
/*! @} */

/*! @name EPINUSE - USB Endpoint Buffer in use */
/*! @{ */
#define USBHSD_EPINUSE_BUF_MASK                  (0xFFCU)
#define USBHSD_EPINUSE_BUF_SHIFT                 (2U)
/*! BUF - Buffer in use.
 *  0b0000000000..HW is accessing buffer 0.
 *  0b0000000001..HW is accessing buffer 1.
 */
#define USBHSD_EPINUSE_BUF(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_EPINUSE_BUF_SHIFT)) & USBHSD_EPINUSE_BUF_MASK)
/*! @} */

/*! @name EPBUFCFG - USB Endpoint Buffer Configuration */
/*! @{ */
#define USBHSD_EPBUFCFG_BUF_SB_MASK              (0xFFCU)
#define USBHSD_EPBUFCFG_BUF_SB_SHIFT             (2U)
/*! BUF_SB - Buffer in use.
 *  0b0000000000..Single buffer.
 *  0b0000000001..Double buffer.
 */
#define USBHSD_EPBUFCFG_BUF_SB(x)                (((uint32_t)(((uint32_t)(x)) << USBHSD_EPBUFCFG_BUF_SB_SHIFT)) & USBHSD_EPBUFCFG_BUF_SB_MASK)
/*! @} */

/*! @name INTSTAT - USB Interrupt Status */
/*! @{ */
#define USBHSD_INTSTAT_EP0OUT_MASK               (0x1U)
#define USBHSD_INTSTAT_EP0OUT_SHIFT              (0U)
#define USBHSD_INTSTAT_EP0IN_MASK                (0x2U)
#define USBHSD_INTSTAT_EP0IN_SHIFT               (1U)
#define USBHSD_INTSTAT_EP1OUT_MASK               (0x4U)
#define USBHSD_INTSTAT_EP1OUT_SHIFT              (2U)
#define USBHSD_INTSTAT_EP1IN_MASK                (0x8U)
#define USBHSD_INTSTAT_EP1IN_SHIFT               (3U)
#define USBHSD_INTSTAT_EP2OUT_MASK               (0x10U)
#define USBHSD_INTSTAT_EP2OUT_SHIFT              (4U)
#define USBHSD_INTSTAT_EP2IN_MASK                (0x20U)
#define USBHSD_INTSTAT_EP2IN_SHIFT               (5U)
#define USBHSD_INTSTAT_EP3OUT_MASK               (0x40U)
#define USBHSD_INTSTAT_EP3OUT_SHIFT              (6U)
#define USBHSD_INTSTAT_EP3IN_MASK                (0x80U)
#define USBHSD_INTSTAT_EP3IN_SHIFT               (7U)
#define USBHSD_INTSTAT_EP4OUT_MASK               (0x100U)
#define USBHSD_INTSTAT_EP4OUT_SHIFT              (8U)
#define USBHSD_INTSTAT_EP4IN_MASK                (0x200U)
#define USBHSD_INTSTAT_EP4IN_SHIFT               (9U)
#define USBHSD_INTSTAT_EP5OUT_MASK               (0x400U)
#define USBHSD_INTSTAT_EP5OUT_SHIFT              (10U)
#define USBHSD_INTSTAT_EP5IN_MASK                (0x800U)
#define USBHSD_INTSTAT_EP5IN_SHIFT               (11U)
#define USBHSD_INTSTAT_FRAME_INT_MASK            (0x40000000U)
#define USBHSD_INTSTAT_FRAME_INT_SHIFT           (30U)
#define USBHSD_INTSTAT_DEV_INT_MASK              (0x80000000U)
#define USBHSD_INTSTAT_DEV_INT_SHIFT             (31U)
/*! @} */

/*! @name INTEN - USB Interrupt Enable */
/*! @{ */
#define USBHSD_INTEN_EP_INT_EN_MASK              (0xFFFU)
#define USBHSD_INTEN_EP_INT_EN_SHIFT             (0U)
/*! EP_INT_EN - End Point Interrupt Enable.
 */
#define USBHSD_INTEN_EP_INT_EN(x)                (((uint32_t)(((uint32_t)(x)) << USBHSD_INTEN_EP_INT_EN_SHIFT)) & USBHSD_INTEN_EP_INT_EN_MASK)
#define USBHSD_INTEN_FRAME_INT_EN_MASK           (0x40000000U)
#define USBHSD_INTEN_FRAME_INT_EN_SHIFT          (30U)
#define USBHSD_INTEN_DEV_INT_EN_MASK             (0x80000000U)
#define USBHSD_INTEN_DEV_INT_EN_SHIFT            (31U)
/*! @} */

/*! @name INTSETSTAT - USB Set Interrupt Status */
/*! @{ */
#define USBHSD_INTSETSTAT_EP_SET_INT_MASK        (0xFFFU)
#define USBHSD_INTSETSTAT_EP_SET_INT_SHIFT       (0U)
/*! EP_SET_INT - End Point Set Interrupt Enable.
 */
#define USBHSD_INTSETSTAT_EP_SET_INT(x)          (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSETSTAT_EP_SET_INT_SHIFT)) & USBHSD_INTSETSTAT_EP_SET_INT_MASK)
#define USBHSD_INTSETSTAT_FRAME_SET_INT_MASK     (0x40000000U)
#define USBHSD_INTSETSTAT_FRAME_SET_INT_SHIFT    (30U)
#define USBHSD_INTSETSTAT_DEV_SET_INT_MASK       (0x80000000U)
#define USBHSD_INTSETSTAT_DEV_SET_INT_SHIFT      (31U)
/*! @} */

/*! @name EPTOGGLE - USB Endpoint Toggle */
/*! @{ */
#define USBHSD_EPTOGGLE_TOGGLE_MASK              (0x3FFFFFFFU)
#define USBHSD_EPTOGGLE_TOGGLE_SHIFT             (0U)
/*! TOGGLE - Endpoint data toggle.
 */
#define USBHSD_EPTOGGLE_TOGGLE(x)                (((uint32_t)(((uint32_t)(x)) << USBHSD_EPTOGGLE_TOGGLE_SHIFT)) & USBHSD_EPTOGGLE_TOGGLE_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group USBHSD_Register_Masks */


/* USBHSD - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral USBHSD base pointer */
  #define USBHSD_BASE_PTR                          ((USBHSD_MemMapPtr)0x50144000u)
  /** Peripheral USBHSD base pointer */
  #define USBHSD_BASE_PTR_NS                       ((USBHSD_MemMapPtr)0x40144000u)
  /** Array initializer of USBHSD peripheral base pointers */
  #define USBHSD_BASE_PTRS                         { USBHSD_BASE_PTR }
  /** Array initializer of USBHSD peripheral base pointers */
  #define USBHSD_BASE_PTRS_NS                      { USBHSD_BASE_PTR_NS }
#else
  /** Peripheral USBHSD base pointer */
  #define USBHSD_BASE_PTR                          ((USBHSD_MemMapPtr)0x40144000u)
  /** Array initializer of USBHSD peripheral base pointers */
  #define USBHSD_BASE_PTRS                         { USBHSD_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- USBHSD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSD_Register_Accessor_Macros USBHSD - Register accessor macros
 * @{
 */


/* USBHSD - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* USBHSD */
  #define USBHSD_DEVCMDSTAT                        USBHSD_DEVCMDSTAT_REG(USBHSD_BASE_PTR)
  #define USBHSD_DEVCMDSTAT_NS                     USBHSD_DEVCMDSTAT_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_INFO                              USBHSD_INFO_REG(USBHSD_BASE_PTR)
  #define USBHSD_INFO_NS                           USBHSD_INFO_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_EPLISTSTART                       USBHSD_EPLISTSTART_REG(USBHSD_BASE_PTR)
  #define USBHSD_EPLISTSTART_NS                    USBHSD_EPLISTSTART_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_DATABUFSTART                      USBHSD_DATABUFSTART_REG(USBHSD_BASE_PTR)
  #define USBHSD_DATABUFSTART_NS                   USBHSD_DATABUFSTART_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_LPM                               USBHSD_LPM_REG(USBHSD_BASE_PTR)
  #define USBHSD_LPM_NS                            USBHSD_LPM_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_EPSKIP                            USBHSD_EPSKIP_REG(USBHSD_BASE_PTR)
  #define USBHSD_EPSKIP_NS                         USBHSD_EPSKIP_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_EPINUSE                           USBHSD_EPINUSE_REG(USBHSD_BASE_PTR)
  #define USBHSD_EPINUSE_NS                        USBHSD_EPINUSE_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_EPBUFCFG                          USBHSD_EPBUFCFG_REG(USBHSD_BASE_PTR)
  #define USBHSD_EPBUFCFG_NS                       USBHSD_EPBUFCFG_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_INTSTAT                           USBHSD_INTSTAT_REG(USBHSD_BASE_PTR)
  #define USBHSD_INTSTAT_NS                        USBHSD_INTSTAT_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_INTEN                             USBHSD_INTEN_REG(USBHSD_BASE_PTR)
  #define USBHSD_INTEN_NS                          USBHSD_INTEN_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_INTSETSTAT                        USBHSD_INTSETSTAT_REG(USBHSD_BASE_PTR)
  #define USBHSD_INTSETSTAT_NS                     USBHSD_INTSETSTAT_REG(USBHSD_BASE_PTR_NS)
  #define USBHSD_EPTOGGLE                          USBHSD_EPTOGGLE_REG(USBHSD_BASE_PTR)
  #define USBHSD_EPTOGGLE_NS                       USBHSD_EPTOGGLE_REG(USBHSD_BASE_PTR_NS)
#else
  /* USBHSD */
  #define USBHSD_DEVCMDSTAT                        USBHSD_DEVCMDSTAT_REG(USBHSD_BASE_PTR)
  #define USBHSD_INFO                              USBHSD_INFO_REG(USBHSD_BASE_PTR)
  #define USBHSD_EPLISTSTART                       USBHSD_EPLISTSTART_REG(USBHSD_BASE_PTR)
  #define USBHSD_DATABUFSTART                      USBHSD_DATABUFSTART_REG(USBHSD_BASE_PTR)
  #define USBHSD_LPM                               USBHSD_LPM_REG(USBHSD_BASE_PTR)
  #define USBHSD_EPSKIP                            USBHSD_EPSKIP_REG(USBHSD_BASE_PTR)
  #define USBHSD_EPINUSE                           USBHSD_EPINUSE_REG(USBHSD_BASE_PTR)
  #define USBHSD_EPBUFCFG                          USBHSD_EPBUFCFG_REG(USBHSD_BASE_PTR)
  #define USBHSD_INTSTAT                           USBHSD_INTSTAT_REG(USBHSD_BASE_PTR)
  #define USBHSD_INTEN                             USBHSD_INTEN_REG(USBHSD_BASE_PTR)
  #define USBHSD_INTSETSTAT                        USBHSD_INTSETSTAT_REG(USBHSD_BASE_PTR)
  #define USBHSD_EPTOGGLE                          USBHSD_EPTOGGLE_REG(USBHSD_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group USBHSD_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USBHSD_Peripheral */


/* ----------------------------------------------------------------------------
   -- USBHSDCD
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSDCD_Peripheral USBHSDCD
 * @{
 */

/** USBHSDCD - Peripheral register structure */
typedef struct USBHSDCD_MemMap {
  uint32_t CONTROL;                                /**< Control register, offset: 0x0 */
  uint32_t CLOCK;                                  /**< Clock register, offset: 0x4 */
  uint32_t STATUS;                                 /**< Status register, offset: 0x8 */
  uint32_t SIGNAL_OVERRIDE;                        /**< Signal Override Register, offset: 0xC */
  uint32_t TIMER0;                                 /**< TIMER0 register, offset: 0x10 */
  uint32_t TIMER1;                                 /**< TIMER1 register, offset: 0x14 */
  union {                                          /* offset: 0x18 */
    uint32_t TIMER2_BC11;                            /**< TIMER2_BC11 register, offset: 0x18 */
    uint32_t TIMER2_BC12;                            /**< TIMER2_BC12 register, offset: 0x18 */
  };
} volatile *USBHSDCD_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USBHSDCD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSDCD_Register_Accessor_Macros USBHSDCD - Register accessor macros
 * @{
 */


/* USBHSDCD - Register accessors */
#define USBHSDCD_CONTROL_REG(base)               ((base)->CONTROL)
#define USBHSDCD_CLOCK_REG(base)                 ((base)->CLOCK)
#define USBHSDCD_STATUS_REG(base)                ((base)->STATUS)
#define USBHSDCD_SIGNAL_OVERRIDE_REG(base)       ((base)->SIGNAL_OVERRIDE)
#define USBHSDCD_TIMER0_REG(base)                ((base)->TIMER0)
#define USBHSDCD_TIMER1_REG(base)                ((base)->TIMER1)
#define USBHSDCD_TIMER2_BC11_REG(base)           ((base)->TIMER2_BC11)
#define USBHSDCD_TIMER2_BC12_REG(base)           ((base)->TIMER2_BC12)

/*!
 * @}
 */ /* end of group USBHSDCD_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USBHSDCD Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSDCD_Register_Masks USBHSDCD Register Masks
 * @{
 */

/*! @name CONTROL - Control register */
/*! @{ */
#define USBHSDCD_CONTROL_IACK_MASK               (0x1U)
#define USBHSDCD_CONTROL_IACK_SHIFT              (0U)
#define USBHSDCD_CONTROL_IF_MASK                 (0x100U)
#define USBHSDCD_CONTROL_IF_SHIFT                (8U)
#define USBHSDCD_CONTROL_IE_MASK                 (0x10000U)
#define USBHSDCD_CONTROL_IE_SHIFT                (16U)
#define USBHSDCD_CONTROL_BC12_MASK               (0x20000U)
#define USBHSDCD_CONTROL_BC12_SHIFT              (17U)
#define USBHSDCD_CONTROL_START_MASK              (0x1000000U)
#define USBHSDCD_CONTROL_START_SHIFT             (24U)
#define USBHSDCD_CONTROL_SR_MASK                 (0x2000000U)
#define USBHSDCD_CONTROL_SR_SHIFT                (25U)
/*! @} */

/*! @name CLOCK - Clock register */
/*! @{ */
#define USBHSDCD_CLOCK_CLOCK_UNIT_MASK           (0x1U)
#define USBHSDCD_CLOCK_CLOCK_UNIT_SHIFT          (0U)
#define USBHSDCD_CLOCK_CLOCK_SPEED_MASK          (0xFFCU)
#define USBHSDCD_CLOCK_CLOCK_SPEED_SHIFT         (2U)
/*! CLOCK_SPEED - Numerical Value of Clock Speed in Binary
 */
#define USBHSDCD_CLOCK_CLOCK_SPEED(x)            (((uint32_t)(((uint32_t)(x)) << USBHSDCD_CLOCK_CLOCK_SPEED_SHIFT)) & USBHSDCD_CLOCK_CLOCK_SPEED_MASK)
/*! @} */

/*! @name STATUS - Status register */
/*! @{ */
#define USBHSDCD_STATUS_SEQ_RES_MASK             (0x30000U)
#define USBHSDCD_STATUS_SEQ_RES_SHIFT            (16U)
/*! SEQ_RES - Charger Detection Sequence Results
 *  0b00..No results to report.
 *  0b01..Attached to an SDP. Must comply with USB 2.0 by drawing only 2.5 mA (max) until connected.
 *  0b10..Attached to a charging port. The exact meaning depends on bit 18 (value 0: Attached to either a CDP or a
 *        DCP. The charger type detection has not completed. value 1: Attached to a CDP. The charger type
 *        detection has completed.)
 *  0b11..Attached to a DCP.
 */
#define USBHSDCD_STATUS_SEQ_RES(x)               (((uint32_t)(((uint32_t)(x)) << USBHSDCD_STATUS_SEQ_RES_SHIFT)) & USBHSDCD_STATUS_SEQ_RES_MASK)
#define USBHSDCD_STATUS_SEQ_STAT_MASK            (0xC0000U)
#define USBHSDCD_STATUS_SEQ_STAT_SHIFT           (18U)
/*! SEQ_STAT - Charger Detection Sequence Status
 *  0b00..The module is either not enabled, or the module is enabled but the data pins have not yet been detected.
 *  0b01..Data pin contact detection is complete.
 *  0b10..Charging port detection is complete.
 *  0b11..Charger type detection is complete.
 */
#define USBHSDCD_STATUS_SEQ_STAT(x)              (((uint32_t)(((uint32_t)(x)) << USBHSDCD_STATUS_SEQ_STAT_SHIFT)) & USBHSDCD_STATUS_SEQ_STAT_MASK)
#define USBHSDCD_STATUS_ERR_MASK                 (0x100000U)
#define USBHSDCD_STATUS_ERR_SHIFT                (20U)
#define USBHSDCD_STATUS_TO_MASK                  (0x200000U)
#define USBHSDCD_STATUS_TO_SHIFT                 (21U)
#define USBHSDCD_STATUS_ACTIVE_MASK              (0x400000U)
#define USBHSDCD_STATUS_ACTIVE_SHIFT             (22U)
/*! @} */

/*! @name SIGNAL_OVERRIDE - Signal Override Register */
/*! @{ */
#define USBHSDCD_SIGNAL_OVERRIDE_PS_MASK         (0x3U)
#define USBHSDCD_SIGNAL_OVERRIDE_PS_SHIFT        (0U)
/*! PS - Phase Selection
 *  0b00..No overrides. Bit field must remain at this value during normal USB data communication to prevent
 *        unexpected conditions on USB_DP and USB_DM pins. (Default)
 *  0b01..Reserved, not for customer use.
 *  0b10..Enables VDP_SRC voltage source for the USB_DP pin and IDM_SINK current source for the USB_DM pin.
 *  0b11..Reserved, not for customer use.
 */
#define USBHSDCD_SIGNAL_OVERRIDE_PS(x)           (((uint32_t)(((uint32_t)(x)) << USBHSDCD_SIGNAL_OVERRIDE_PS_SHIFT)) & USBHSDCD_SIGNAL_OVERRIDE_PS_MASK)
/*! @} */

/*! @name TIMER0 - TIMER0 register */
/*! @{ */
#define USBHSDCD_TIMER0_TUNITCON_MASK            (0xFFFU)
#define USBHSDCD_TIMER0_TUNITCON_SHIFT           (0U)
/*! TUNITCON - Unit Connection Timer Elapse (in ms)
 */
#define USBHSDCD_TIMER0_TUNITCON(x)              (((uint32_t)(((uint32_t)(x)) << USBHSDCD_TIMER0_TUNITCON_SHIFT)) & USBHSDCD_TIMER0_TUNITCON_MASK)
#define USBHSDCD_TIMER0_TSEQ_INIT_MASK           (0x3FF0000U)
#define USBHSDCD_TIMER0_TSEQ_INIT_SHIFT          (16U)
/*! TSEQ_INIT - Sequence Initiation Time
 */
#define USBHSDCD_TIMER0_TSEQ_INIT(x)             (((uint32_t)(((uint32_t)(x)) << USBHSDCD_TIMER0_TSEQ_INIT_SHIFT)) & USBHSDCD_TIMER0_TSEQ_INIT_MASK)
/*! @} */

/*! @name TIMER1 - TIMER1 register */
/*! @{ */
#define USBHSDCD_TIMER1_TVDPSRC_ON_MASK          (0x3FFU)
#define USBHSDCD_TIMER1_TVDPSRC_ON_SHIFT         (0U)
/*! TVDPSRC_ON - Time Period Comparator Enabled
 */
#define USBHSDCD_TIMER1_TVDPSRC_ON(x)            (((uint32_t)(((uint32_t)(x)) << USBHSDCD_TIMER1_TVDPSRC_ON_SHIFT)) & USBHSDCD_TIMER1_TVDPSRC_ON_MASK)
#define USBHSDCD_TIMER1_TDCD_DBNC_MASK           (0x3FF0000U)
#define USBHSDCD_TIMER1_TDCD_DBNC_SHIFT          (16U)
/*! TDCD_DBNC - Time Period to Debounce D+ Signal
 */
#define USBHSDCD_TIMER1_TDCD_DBNC(x)             (((uint32_t)(((uint32_t)(x)) << USBHSDCD_TIMER1_TDCD_DBNC_SHIFT)) & USBHSDCD_TIMER1_TDCD_DBNC_MASK)
/*! @} */

/*! @name TIMER2_BC11 - TIMER2_BC11 register */
/*! @{ */
#define USBHSDCD_TIMER2_BC11_CHECK_DM_MASK       (0xFU)
#define USBHSDCD_TIMER2_BC11_CHECK_DM_SHIFT      (0U)
/*! CHECK_DM - Time Before Check of D- Line
 */
#define USBHSDCD_TIMER2_BC11_CHECK_DM(x)         (((uint32_t)(((uint32_t)(x)) << USBHSDCD_TIMER2_BC11_CHECK_DM_SHIFT)) & USBHSDCD_TIMER2_BC11_CHECK_DM_MASK)
#define USBHSDCD_TIMER2_BC11_TVDPSRC_CON_MASK    (0x3FF0000U)
#define USBHSDCD_TIMER2_BC11_TVDPSRC_CON_SHIFT   (16U)
/*! TVDPSRC_CON - Time Period Before Enabling D+ Pullup
 */
#define USBHSDCD_TIMER2_BC11_TVDPSRC_CON(x)      (((uint32_t)(((uint32_t)(x)) << USBHSDCD_TIMER2_BC11_TVDPSRC_CON_SHIFT)) & USBHSDCD_TIMER2_BC11_TVDPSRC_CON_MASK)
/*! @} */

/*! @name TIMER2_BC12 - TIMER2_BC12 register */
/*! @{ */
#define USBHSDCD_TIMER2_BC12_TVDMSRC_ON_MASK     (0x3FFU)
#define USBHSDCD_TIMER2_BC12_TVDMSRC_ON_SHIFT    (0U)
/*! TVDMSRC_ON - TVDMSRC_ON
 */
#define USBHSDCD_TIMER2_BC12_TVDMSRC_ON(x)       (((uint32_t)(((uint32_t)(x)) << USBHSDCD_TIMER2_BC12_TVDMSRC_ON_SHIFT)) & USBHSDCD_TIMER2_BC12_TVDMSRC_ON_MASK)
#define USBHSDCD_TIMER2_BC12_TWAIT_AFTER_PRD_MASK (0x3FF0000U)
#define USBHSDCD_TIMER2_BC12_TWAIT_AFTER_PRD_SHIFT (16U)
/*! TWAIT_AFTER_PRD - TWAIT_AFTER_PRD
 */
#define USBHSDCD_TIMER2_BC12_TWAIT_AFTER_PRD(x)  (((uint32_t)(((uint32_t)(x)) << USBHSDCD_TIMER2_BC12_TWAIT_AFTER_PRD_SHIFT)) & USBHSDCD_TIMER2_BC12_TWAIT_AFTER_PRD_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group USBHSDCD_Register_Masks */


/* USBHSDCD - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral USBHSDCD base pointer */
  #define USBHSDCD_BASE_PTR                        ((USBHSDCD_MemMapPtr)0x5013B800u)
  /** Peripheral USBHSDCD base pointer */
  #define USBHSDCD_BASE_PTR_NS                     ((USBHSDCD_MemMapPtr)0x4013B800u)
  /** Array initializer of USBHSDCD peripheral base pointers */
  #define USBHSDCD_BASE_PTRS                       { USBHSDCD_BASE_PTR }
  /** Array initializer of USBHSDCD peripheral base pointers */
  #define USBHSDCD_BASE_PTRS_NS                    { USBHSDCD_BASE_PTR_NS }
#else
  /** Peripheral USBHSDCD base pointer */
  #define USBHSDCD_BASE_PTR                        ((USBHSDCD_MemMapPtr)0x4013B800u)
  /** Array initializer of USBHSDCD peripheral base pointers */
  #define USBHSDCD_BASE_PTRS                       { USBHSDCD_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- USBHSDCD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSDCD_Register_Accessor_Macros USBHSDCD - Register accessor macros
 * @{
 */


/* USBHSDCD - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* USBHSDCD */
  #define USBHSDCD_CONTROL                         USBHSDCD_CONTROL_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_CONTROL_NS                      USBHSDCD_CONTROL_REG(USBHSDCD_BASE_PTR_NS)
  #define USBHSDCD_CLOCK                           USBHSDCD_CLOCK_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_CLOCK_NS                        USBHSDCD_CLOCK_REG(USBHSDCD_BASE_PTR_NS)
  #define USBHSDCD_STATUS                          USBHSDCD_STATUS_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_STATUS_NS                       USBHSDCD_STATUS_REG(USBHSDCD_BASE_PTR_NS)
  #define USBHSDCD_SIGNAL_OVERRIDE                 USBHSDCD_SIGNAL_OVERRIDE_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_SIGNAL_OVERRIDE_NS              USBHSDCD_SIGNAL_OVERRIDE_REG(USBHSDCD_BASE_PTR_NS)
  #define USBHSDCD_TIMER0                          USBHSDCD_TIMER0_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_TIMER0_NS                       USBHSDCD_TIMER0_REG(USBHSDCD_BASE_PTR_NS)
  #define USBHSDCD_TIMER1                          USBHSDCD_TIMER1_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_TIMER1_NS                       USBHSDCD_TIMER1_REG(USBHSDCD_BASE_PTR_NS)
  #define USBHSDCD_TIMER2_BC11                     USBHSDCD_TIMER2_BC11_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_TIMER2_BC11_NS                  USBHSDCD_TIMER2_BC11_REG(USBHSDCD_BASE_PTR_NS)
  #define USBHSDCD_TIMER2_BC12                     USBHSDCD_TIMER2_BC12_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_TIMER2_BC12_NS                  USBHSDCD_TIMER2_BC12_REG(USBHSDCD_BASE_PTR_NS)
#else
  /* USBHSDCD */
  #define USBHSDCD_CONTROL                         USBHSDCD_CONTROL_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_CLOCK                           USBHSDCD_CLOCK_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_STATUS                          USBHSDCD_STATUS_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_SIGNAL_OVERRIDE                 USBHSDCD_SIGNAL_OVERRIDE_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_TIMER0                          USBHSDCD_TIMER0_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_TIMER1                          USBHSDCD_TIMER1_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_TIMER2_BC11                     USBHSDCD_TIMER2_BC11_REG(USBHSDCD_BASE_PTR)
  #define USBHSDCD_TIMER2_BC12                     USBHSDCD_TIMER2_BC12_REG(USBHSDCD_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group USBHSDCD_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USBHSDCD_Peripheral */


/* ----------------------------------------------------------------------------
   -- USBHSH
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSH_Peripheral USBHSH
 * @{
 */

/** USBHSH - Peripheral register structure */
typedef struct USBHSH_MemMap {
  uint32_t CAPLENGTH_CHIPID;                       /**< Version ID Register, offset: 0x0 */
  uint32_t HCSPARAMS;                              /**< Host Controller Structural Parameters, offset: 0x4 */
  uint32_t HCCPARAMS;                              /**< INT PTD Base Address, offset: 0x8 */
  uint32_t FLADJ_FRINDEX;                          /**< Frame Length Adjustment, offset: 0xC */
  uint32_t ATL_PTD_BASE_ADDR;                      /**< ATL PTD Base Address, offset: 0x10 */
  uint32_t ISO_PTD_BASE_ADDR;                      /**< ISO PTD Base Address, offset: 0x14 */
  uint32_t INT_PTD_BASE_ADDR;                      /**< INT PTD Base Address, offset: 0x18 */
  uint32_t DATA_PAYLOAD_BASE_ADDR;                 /**< DATA PAYLOAD Base Address, offset: 0x1C */
  uint32_t USBCMD;                                 /**< USB Command, offset: 0x20 */
  uint32_t USBSTS;                                 /**< USB Interrupt Status, offset: 0x24 */
  uint32_t USBINTR;                                /**< USB Interrupt Status, offset: 0x28 */
  uint32_t PORTSC1;                                /**< Port Status and Control, offset: 0x2C */
  uint32_t ATL_PTD_DONE_MAP;                       /**< ATL PTD Done Map, offset: 0x30 */
  uint32_t ATL_PTD_SKIP_MAP;                       /**< ATL PTD Skip Map, offset: 0x34 */
  uint32_t ISO_PTD_DONE_MAP;                       /**< ISO PTD Done Map, offset: 0x38 */
  uint32_t ISO_PTD_SKIP_MAP;                       /**< ISO PTD Skip Map, offset: 0x3C */
  uint32_t INT_PTD_DONE_MAP;                       /**< INT PTD Done Map, offset: 0x40 */
  uint32_t INT_PTD_SKIP_MAP;                       /**< INT PTD Skip Map, offset: 0x44 */
  uint32_t LAST_PTD_INUSE;                         /**< Last PTD in use, offset: 0x48 */
  uint8_t RESERVED_0[4];
  uint32_t PORTMODE;                               /**< Port Mode, offset: 0x50 */
} volatile *USBHSH_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USBHSH - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSH_Register_Accessor_Macros USBHSH - Register accessor macros
 * @{
 */


/* USBHSH - Register accessors */
#define USBHSH_CAPLENGTH_CHIPID_REG(base)        ((base)->CAPLENGTH_CHIPID)
#define USBHSH_HCSPARAMS_REG(base)               ((base)->HCSPARAMS)
#define USBHSH_HCCPARAMS_REG(base)               ((base)->HCCPARAMS)
#define USBHSH_FLADJ_FRINDEX_REG(base)           ((base)->FLADJ_FRINDEX)
#define USBHSH_ATL_PTD_BASE_ADDR_REG(base)       ((base)->ATL_PTD_BASE_ADDR)
#define USBHSH_ISO_PTD_BASE_ADDR_REG(base)       ((base)->ISO_PTD_BASE_ADDR)
#define USBHSH_INT_PTD_BASE_ADDR_REG(base)       ((base)->INT_PTD_BASE_ADDR)
#define USBHSH_DATA_PAYLOAD_BASE_ADDR_REG(base)  ((base)->DATA_PAYLOAD_BASE_ADDR)
#define USBHSH_USBCMD_REG(base)                  ((base)->USBCMD)
#define USBHSH_USBSTS_REG(base)                  ((base)->USBSTS)
#define USBHSH_USBINTR_REG(base)                 ((base)->USBINTR)
#define USBHSH_PORTSC1_REG(base)                 ((base)->PORTSC1)
#define USBHSH_ATL_PTD_DONE_MAP_REG(base)        ((base)->ATL_PTD_DONE_MAP)
#define USBHSH_ATL_PTD_SKIP_MAP_REG(base)        ((base)->ATL_PTD_SKIP_MAP)
#define USBHSH_ISO_PTD_DONE_MAP_REG(base)        ((base)->ISO_PTD_DONE_MAP)
#define USBHSH_ISO_PTD_SKIP_MAP_REG(base)        ((base)->ISO_PTD_SKIP_MAP)
#define USBHSH_INT_PTD_DONE_MAP_REG(base)        ((base)->INT_PTD_DONE_MAP)
#define USBHSH_INT_PTD_SKIP_MAP_REG(base)        ((base)->INT_PTD_SKIP_MAP)
#define USBHSH_LAST_PTD_INUSE_REG(base)          ((base)->LAST_PTD_INUSE)
#define USBHSH_PORTMODE_REG(base)                ((base)->PORTMODE)

/*!
 * @}
 */ /* end of group USBHSH_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USBHSH Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSH_Register_Masks USBHSH Register Masks
 * @{
 */

/*! @name CAPLENGTH_CHIPID - Version ID Register */
/*! @{ */
#define USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_MASK   (0xFFU)
#define USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_SHIFT  (0U)
/*! CAPLENGTH - Capability Length.
 */
#define USBHSH_CAPLENGTH_CHIPID_CAPLENGTH(x)     (((uint32_t)(((uint32_t)(x)) << USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_SHIFT)) & USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_MASK)
#define USBHSH_CAPLENGTH_CHIPID_CHIPID_MASK      (0xFFFF0000U)
#define USBHSH_CAPLENGTH_CHIPID_CHIPID_SHIFT     (16U)
/*! CHIPID - Chip identification.
 */
#define USBHSH_CAPLENGTH_CHIPID_CHIPID(x)        (((uint32_t)(((uint32_t)(x)) << USBHSH_CAPLENGTH_CHIPID_CHIPID_SHIFT)) & USBHSH_CAPLENGTH_CHIPID_CHIPID_MASK)
/*! @} */

/*! @name HCSPARAMS - Host Controller Structural Parameters */
/*! @{ */
#define USBHSH_HCSPARAMS_N_PORTS_MASK            (0xFU)
#define USBHSH_HCSPARAMS_N_PORTS_SHIFT           (0U)
/*! N_PORTS - Number of Physical downstream ports.
 */
#define USBHSH_HCSPARAMS_N_PORTS(x)              (((uint32_t)(((uint32_t)(x)) << USBHSH_HCSPARAMS_N_PORTS_SHIFT)) & USBHSH_HCSPARAMS_N_PORTS_MASK)
#define USBHSH_HCSPARAMS_PPC_MASK                (0x10U)
#define USBHSH_HCSPARAMS_PPC_SHIFT               (4U)
#define USBHSH_HCSPARAMS_P_INDICATOR_MASK        (0x10000U)
#define USBHSH_HCSPARAMS_P_INDICATOR_SHIFT       (16U)
/*! @} */

/*! @name HCCPARAMS - INT PTD Base Address */
/*! @{ */
#define USBHSH_HCCPARAMS_LPMC_MASK               (0x20000U)
#define USBHSH_HCCPARAMS_LPMC_SHIFT              (17U)
/*! @} */

/*! @name FLADJ_FRINDEX - Frame Length Adjustment */
/*! @{ */
#define USBHSH_FLADJ_FRINDEX_FLADJ_MASK          (0x3FU)
#define USBHSH_FLADJ_FRINDEX_FLADJ_SHIFT         (0U)
/*! FLADJ - Frame Length Timing Value.
 */
#define USBHSH_FLADJ_FRINDEX_FLADJ(x)            (((uint32_t)(((uint32_t)(x)) << USBHSH_FLADJ_FRINDEX_FLADJ_SHIFT)) & USBHSH_FLADJ_FRINDEX_FLADJ_MASK)
#define USBHSH_FLADJ_FRINDEX_FRINDEX_MASK        (0x3FFF0000U)
#define USBHSH_FLADJ_FRINDEX_FRINDEX_SHIFT       (16U)
/*! FRINDEX - Frame Index
 */
#define USBHSH_FLADJ_FRINDEX_FRINDEX(x)          (((uint32_t)(((uint32_t)(x)) << USBHSH_FLADJ_FRINDEX_FRINDEX_SHIFT)) & USBHSH_FLADJ_FRINDEX_FRINDEX_MASK)
/*! @} */

/*! @name ATL_PTD_BASE_ADDR - ATL PTD Base Address */
/*! @{ */
#define USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_MASK    (0x1F0U)
#define USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_SHIFT   (4U)
/*! ATL_CUR - Current PTD
 */
#define USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_SHIFT)) & USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_MASK)
#define USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_MASK   (0xFFFFFE00U)
#define USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_SHIFT  (9U)
/*! ATL_BASE - Start of ATL list.
 */
#define USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE(x)     (((uint32_t)(((uint32_t)(x)) << USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_SHIFT)) & USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_MASK)
/*! @} */

/*! @name ISO_PTD_BASE_ADDR - ISO PTD Base Address */
/*! @{ */
#define USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_MASK  (0x3E0U)
#define USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_SHIFT (5U)
/*! ISO_FIRST - First PTD in the ISO list
 */
#define USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST(x)    (((uint32_t)(((uint32_t)(x)) << USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_SHIFT)) & USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_MASK)
#define USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_MASK   (0xFFFFFC00U)
#define USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_SHIFT  (10U)
/*! ISO_BASE - Start of ISO PTD list
 */
#define USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE(x)     (((uint32_t)(((uint32_t)(x)) << USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_SHIFT)) & USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_MASK)
/*! @} */

/*! @name INT_PTD_BASE_ADDR - INT PTD Base Address */
/*! @{ */
#define USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_MASK  (0x3E0U)
#define USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_SHIFT (5U)
/*! INT_FIRST - First PTD in the INT list
 */
#define USBHSH_INT_PTD_BASE_ADDR_INT_FIRST(x)    (((uint32_t)(((uint32_t)(x)) << USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_SHIFT)) & USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_MASK)
#define USBHSH_INT_PTD_BASE_ADDR_INT_BASE_MASK   (0xFFFFFC00U)
#define USBHSH_INT_PTD_BASE_ADDR_INT_BASE_SHIFT  (10U)
/*! INT_BASE - Start of INT PTD list
 */
#define USBHSH_INT_PTD_BASE_ADDR_INT_BASE(x)     (((uint32_t)(((uint32_t)(x)) << USBHSH_INT_PTD_BASE_ADDR_INT_BASE_SHIFT)) & USBHSH_INT_PTD_BASE_ADDR_INT_BASE_MASK)
/*! @} */

/*! @name DATA_PAYLOAD_BASE_ADDR - DATA PAYLOAD Base Address */
/*! @{ */
#define USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_MASK (0xFFFF0000U)
#define USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_SHIFT (16U)
/*! DAT_BASE - Data Payload Section Base Address
 */
#define USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE(x) (((uint32_t)(((uint32_t)(x)) << USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_SHIFT)) & USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_MASK)
/*! @} */

/*! @name USBCMD - USB Command */
/*! @{ */
#define USBHSH_USBCMD_RS_MASK                    (0x1U)
#define USBHSH_USBCMD_RS_SHIFT                   (0U)
#define USBHSH_USBCMD_HCRESET_MASK               (0x2U)
#define USBHSH_USBCMD_HCRESET_SHIFT              (1U)
#define USBHSH_USBCMD_FLS_MASK                   (0xCU)
#define USBHSH_USBCMD_FLS_SHIFT                  (2U)
/*! FLS - Frame List Size
 *  0b00..1024 elements
 *  0b01..512 elements
 *  0b10..256 elements
 *  0b11..
 */
#define USBHSH_USBCMD_FLS(x)                     (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_FLS_SHIFT)) & USBHSH_USBCMD_FLS_MASK)
#define USBHSH_USBCMD_LHCR_MASK                  (0x80U)
#define USBHSH_USBCMD_LHCR_SHIFT                 (7U)
#define USBHSH_USBCMD_ATL_EN_MASK                (0x100U)
#define USBHSH_USBCMD_ATL_EN_SHIFT               (8U)
#define USBHSH_USBCMD_ISO_EN_MASK                (0x200U)
#define USBHSH_USBCMD_ISO_EN_SHIFT               (9U)
#define USBHSH_USBCMD_INT_EN_MASK                (0x400U)
#define USBHSH_USBCMD_INT_EN_SHIFT               (10U)
#define USBHSH_USBCMD_HIRD_MASK                  (0xF000000U)
#define USBHSH_USBCMD_HIRD_SHIFT                 (24U)
/*! HIRD - Host-Initiated Resume Duration
 */
#define USBHSH_USBCMD_HIRD(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_HIRD_SHIFT)) & USBHSH_USBCMD_HIRD_MASK)
#define USBHSH_USBCMD_LPM_RWU_MASK               (0x10000000U)
#define USBHSH_USBCMD_LPM_RWU_SHIFT              (28U)
/*! @} */

/*! @name USBSTS - USB Interrupt Status */
/*! @{ */
#define USBHSH_USBSTS_PCD_MASK                   (0x4U)
#define USBHSH_USBSTS_PCD_SHIFT                  (2U)
#define USBHSH_USBSTS_FLR_MASK                   (0x8U)
#define USBHSH_USBSTS_FLR_SHIFT                  (3U)
#define USBHSH_USBSTS_ATL_IRQ_MASK               (0x10000U)
#define USBHSH_USBSTS_ATL_IRQ_SHIFT              (16U)
#define USBHSH_USBSTS_ISO_IRQ_MASK               (0x20000U)
#define USBHSH_USBSTS_ISO_IRQ_SHIFT              (17U)
#define USBHSH_USBSTS_INT_IRQ_MASK               (0x40000U)
#define USBHSH_USBSTS_INT_IRQ_SHIFT              (18U)
#define USBHSH_USBSTS_SOF_IRQ_MASK               (0x80000U)
#define USBHSH_USBSTS_SOF_IRQ_SHIFT              (19U)
/*! @} */

/*! @name USBINTR - USB Interrupt Status */
/*! @{ */
#define USBHSH_USBINTR_PCDE_MASK                 (0x4U)
#define USBHSH_USBINTR_PCDE_SHIFT                (2U)
#define USBHSH_USBINTR_FLRE_MASK                 (0x8U)
#define USBHSH_USBINTR_FLRE_SHIFT                (3U)
#define USBHSH_USBINTR_ATL_IRQ_E_MASK            (0x10000U)
#define USBHSH_USBINTR_ATL_IRQ_E_SHIFT           (16U)
#define USBHSH_USBINTR_ISO_IRQ_E_MASK            (0x20000U)
#define USBHSH_USBINTR_ISO_IRQ_E_SHIFT           (17U)
#define USBHSH_USBINTR_INT_IRQ_E_MASK            (0x40000U)
#define USBHSH_USBINTR_INT_IRQ_E_SHIFT           (18U)
#define USBHSH_USBINTR_SOF_E_MASK                (0x80000U)
#define USBHSH_USBINTR_SOF_E_SHIFT               (19U)
/*! @} */

/*! @name PORTSC1 - Port Status and Control */
/*! @{ */
#define USBHSH_PORTSC1_CCS_MASK                  (0x1U)
#define USBHSH_PORTSC1_CCS_SHIFT                 (0U)
#define USBHSH_PORTSC1_CSC_MASK                  (0x2U)
#define USBHSH_PORTSC1_CSC_SHIFT                 (1U)
#define USBHSH_PORTSC1_PED_MASK                  (0x4U)
#define USBHSH_PORTSC1_PED_SHIFT                 (2U)
#define USBHSH_PORTSC1_PEDC_MASK                 (0x8U)
#define USBHSH_PORTSC1_PEDC_SHIFT                (3U)
#define USBHSH_PORTSC1_OCA_MASK                  (0x10U)
#define USBHSH_PORTSC1_OCA_SHIFT                 (4U)
#define USBHSH_PORTSC1_OCC_MASK                  (0x20U)
#define USBHSH_PORTSC1_OCC_SHIFT                 (5U)
#define USBHSH_PORTSC1_FPR_MASK                  (0x40U)
#define USBHSH_PORTSC1_FPR_SHIFT                 (6U)
#define USBHSH_PORTSC1_SUSP_MASK                 (0x80U)
#define USBHSH_PORTSC1_SUSP_SHIFT                (7U)
#define USBHSH_PORTSC1_PR_MASK                   (0x100U)
#define USBHSH_PORTSC1_PR_SHIFT                  (8U)
#define USBHSH_PORTSC1_SUS_L1_MASK               (0x200U)
#define USBHSH_PORTSC1_SUS_L1_SHIFT              (9U)
#define USBHSH_PORTSC1_LS_MASK                   (0xC00U)
#define USBHSH_PORTSC1_LS_SHIFT                  (10U)
/*! LS - Line Status
 */
#define USBHSH_PORTSC1_LS(x)                     (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_LS_SHIFT)) & USBHSH_PORTSC1_LS_MASK)
#define USBHSH_PORTSC1_PP_MASK                   (0x1000U)
#define USBHSH_PORTSC1_PP_SHIFT                  (12U)
#define USBHSH_PORTSC1_PIC_MASK                  (0xC000U)
#define USBHSH_PORTSC1_PIC_SHIFT                 (14U)
/*! PIC - Port Indicator Control
 *  0b00..Port Indicators are off
 *  0b01..Amber
 *  0b10..Green
 *  0b11..Undefined
 */
#define USBHSH_PORTSC1_PIC(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_PIC_SHIFT)) & USBHSH_PORTSC1_PIC_MASK)
#define USBHSH_PORTSC1_PTC_MASK                  (0xF0000U)
#define USBHSH_PORTSC1_PTC_SHIFT                 (16U)
/*! PTC - Port Test Control
 *  0b0000..Test mode not enabled
 *  0b0001..Test J_STATE
 *  0b0010..Test K_STATE
 *  0b0011..TEST SE0_NAK
 *  0b0100..Test_Packet
 *  0b0101..Test Force_Enable
 */
#define USBHSH_PORTSC1_PTC(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_PTC_SHIFT)) & USBHSH_PORTSC1_PTC_MASK)
#define USBHSH_PORTSC1_PSPD_MASK                 (0x300000U)
#define USBHSH_PORTSC1_PSPD_SHIFT                (20U)
/*! PSPD - Port Speed
 *  0b00..Reserved
 *  0b01..Full-speed
 *  0b10..High-speed
 *  0b11..Reserved
 */
#define USBHSH_PORTSC1_PSPD(x)                   (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_PSPD_SHIFT)) & USBHSH_PORTSC1_PSPD_MASK)
#define USBHSH_PORTSC1_WOO_MASK                  (0x400000U)
#define USBHSH_PORTSC1_WOO_SHIFT                 (22U)
#define USBHSH_PORTSC1_SUS_STAT_MASK             (0x1800000U)
#define USBHSH_PORTSC1_SUS_STAT_SHIFT            (23U)
/*! SUS_STAT - Suspend Status
 *  0b00..State transition was successful (ACK)
 *  0b01..Device was unable to enter the L1 state at this time (NYET)
 *  0b10..Device does not support the L1 state (STALL)
 *  0b11..Timeout/Error - Device failed to respond or an error occurred.
 */
#define USBHSH_PORTSC1_SUS_STAT(x)               (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_SUS_STAT_SHIFT)) & USBHSH_PORTSC1_SUS_STAT_MASK)
#define USBHSH_PORTSC1_DEV_ADD_MASK              (0xFE000000U)
#define USBHSH_PORTSC1_DEV_ADD_SHIFT             (25U)
/*! DEV_ADD - Device Address for LPM tokens
 */
#define USBHSH_PORTSC1_DEV_ADD(x)                (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_DEV_ADD_SHIFT)) & USBHSH_PORTSC1_DEV_ADD_MASK)
/*! @} */

/*! @name ATL_PTD_DONE_MAP - ATL PTD Done Map */
/*! @{ */
#define USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_MASK    (0xFFFFFFFFU)
#define USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_SHIFT   (0U)
/*! ATL_DONE - ATL Done
 */
#define USBHSH_ATL_PTD_DONE_MAP_ATL_DONE(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_SHIFT)) & USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_MASK)
/*! @} */

/*! @name ATL_PTD_SKIP_MAP - ATL PTD Skip Map */
/*! @{ */
#define USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_MASK    (0xFFFFFFFFU)
#define USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_SHIFT   (0U)
/*! ATL_SKIP - ATL PTD Skip Map
 */
#define USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_SHIFT)) & USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_MASK)
/*! @} */

/*! @name ISO_PTD_DONE_MAP - ISO PTD Done Map */
/*! @{ */
#define USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_MASK    (0xFFFFFFFFU)
#define USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_SHIFT   (0U)
/*! ISO_DONE - ISO Done
 */
#define USBHSH_ISO_PTD_DONE_MAP_ISO_DONE(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_SHIFT)) & USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_MASK)
/*! @} */

/*! @name ISO_PTD_SKIP_MAP - ISO PTD Skip Map */
/*! @{ */
#define USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_MASK    (0xFFFFFFFFU)
#define USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_SHIFT   (0U)
/*! ISO_SKIP - ISO Skip
 */
#define USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_SHIFT)) & USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_MASK)
/*! @} */

/*! @name INT_PTD_DONE_MAP - INT PTD Done Map */
/*! @{ */
#define USBHSH_INT_PTD_DONE_MAP_INT_DONE_MASK    (0xFFFFFFFFU)
#define USBHSH_INT_PTD_DONE_MAP_INT_DONE_SHIFT   (0U)
/*! INT_DONE - INT Done
 */
#define USBHSH_INT_PTD_DONE_MAP_INT_DONE(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_INT_PTD_DONE_MAP_INT_DONE_SHIFT)) & USBHSH_INT_PTD_DONE_MAP_INT_DONE_MASK)
/*! @} */

/*! @name INT_PTD_SKIP_MAP - INT PTD Skip Map */
/*! @{ */
#define USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_MASK    (0xFFFFFFFFU)
#define USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_SHIFT   (0U)
/*! INT_SKIP - INT Skip
 */
#define USBHSH_INT_PTD_SKIP_MAP_INT_SKIP(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_SHIFT)) & USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_MASK)
/*! @} */

/*! @name LAST_PTD_INUSE - Last PTD in use */
/*! @{ */
#define USBHSH_LAST_PTD_INUSE_ATL_LAST_MASK      (0x1FU)
#define USBHSH_LAST_PTD_INUSE_ATL_LAST_SHIFT     (0U)
/*! ATL_LAST - Last PTD in ATL list
 */
#define USBHSH_LAST_PTD_INUSE_ATL_LAST(x)        (((uint32_t)(((uint32_t)(x)) << USBHSH_LAST_PTD_INUSE_ATL_LAST_SHIFT)) & USBHSH_LAST_PTD_INUSE_ATL_LAST_MASK)
#define USBHSH_LAST_PTD_INUSE_ISO_LAST_MASK      (0x1F00U)
#define USBHSH_LAST_PTD_INUSE_ISO_LAST_SHIFT     (8U)
/*! ISO_LAST - Last PTD in ISO list
 */
#define USBHSH_LAST_PTD_INUSE_ISO_LAST(x)        (((uint32_t)(((uint32_t)(x)) << USBHSH_LAST_PTD_INUSE_ISO_LAST_SHIFT)) & USBHSH_LAST_PTD_INUSE_ISO_LAST_MASK)
#define USBHSH_LAST_PTD_INUSE_INT_LAST_MASK      (0x1F0000U)
#define USBHSH_LAST_PTD_INUSE_INT_LAST_SHIFT     (16U)
/*! INT_LAST - Last PTD in INT list
 */
#define USBHSH_LAST_PTD_INUSE_INT_LAST(x)        (((uint32_t)(((uint32_t)(x)) << USBHSH_LAST_PTD_INUSE_INT_LAST_SHIFT)) & USBHSH_LAST_PTD_INUSE_INT_LAST_MASK)
/*! @} */

/*! @name PORTMODE - Port Mode */
/*! @{ */
#define USBHSH_PORTMODE_DEV_ENABLE_MASK          (0x10000U)
#define USBHSH_PORTMODE_DEV_ENABLE_SHIFT         (16U)
/*! @} */


/*!
 * @}
 */ /* end of group USBHSH_Register_Masks */


/* USBHSH - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral USBHSH base pointer */
  #define USBHSH_BASE_PTR                          ((USBHSH_MemMapPtr)0x50145000u)
  /** Peripheral USBHSH base pointer */
  #define USBHSH_BASE_PTR_NS                       ((USBHSH_MemMapPtr)0x40145000u)
  /** Array initializer of USBHSH peripheral base pointers */
  #define USBHSH_BASE_PTRS                         { USBHSH_BASE_PTR }
  /** Array initializer of USBHSH peripheral base pointers */
  #define USBHSH_BASE_PTRS_NS                      { USBHSH_BASE_PTR_NS }
#else
  /** Peripheral USBHSH base pointer */
  #define USBHSH_BASE_PTR                          ((USBHSH_MemMapPtr)0x40145000u)
  /** Array initializer of USBHSH peripheral base pointers */
  #define USBHSH_BASE_PTRS                         { USBHSH_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- USBHSH - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBHSH_Register_Accessor_Macros USBHSH - Register accessor macros
 * @{
 */


/* USBHSH - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* USBHSH */
  #define USBHSH_CAPLENGTH_CHIPID                  USBHSH_CAPLENGTH_CHIPID_REG(USBHSH_BASE_PTR)
  #define USBHSH_CAPLENGTH_CHIPID_NS               USBHSH_CAPLENGTH_CHIPID_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_HCSPARAMS                         USBHSH_HCSPARAMS_REG(USBHSH_BASE_PTR)
  #define USBHSH_HCSPARAMS_NS                      USBHSH_HCSPARAMS_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_HCCPARAMS                         USBHSH_HCCPARAMS_REG(USBHSH_BASE_PTR)
  #define USBHSH_HCCPARAMS_NS                      USBHSH_HCCPARAMS_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_FLADJ_FRINDEX                     USBHSH_FLADJ_FRINDEX_REG(USBHSH_BASE_PTR)
  #define USBHSH_FLADJ_FRINDEX_NS                  USBHSH_FLADJ_FRINDEX_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_ATL_PTD_BASE_ADDRESS              USBHSH_ATL_PTD_BASE_ADDR_REG(USBHSH_BASE_PTR)
  #define USBHSH_ATL_PTD_BASE_ADDRESS_NS           USBHSH_ATL_PTD_BASE_ADDR_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_ISO_PTD_BASE_ADDRESS              USBHSH_ISO_PTD_BASE_ADDR_REG(USBHSH_BASE_PTR)
  #define USBHSH_ISO_PTD_BASE_ADDRESS_NS           USBHSH_ISO_PTD_BASE_ADDR_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_INT_PTD_BASE_ADDRESS              USBHSH_INT_PTD_BASE_ADDR_REG(USBHSH_BASE_PTR)
  #define USBHSH_INT_PTD_BASE_ADDRESS_NS           USBHSH_INT_PTD_BASE_ADDR_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_DATA_PAYLOAD_BASE_ADDRESS         USBHSH_DATA_PAYLOAD_BASE_ADDR_REG(USBHSH_BASE_PTR)
  #define USBHSH_DATA_PAYLOAD_BASE_ADDRESS_NS      USBHSH_DATA_PAYLOAD_BASE_ADDR_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_USBCMD                            USBHSH_USBCMD_REG(USBHSH_BASE_PTR)
  #define USBHSH_USBCMD_NS                         USBHSH_USBCMD_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_USBSTS                            USBHSH_USBSTS_REG(USBHSH_BASE_PTR)
  #define USBHSH_USBSTS_NS                         USBHSH_USBSTS_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_USBINTR                           USBHSH_USBINTR_REG(USBHSH_BASE_PTR)
  #define USBHSH_USBINTR_NS                        USBHSH_USBINTR_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_PORTSC1                           USBHSH_PORTSC1_REG(USBHSH_BASE_PTR)
  #define USBHSH_PORTSC1_NS                        USBHSH_PORTSC1_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_ATL_DONE                          USBHSH_ATL_PTD_DONE_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_ATL_DONE_NS                       USBHSH_ATL_PTD_DONE_MAP_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_ATL_SKIP                          USBHSH_ATL_PTD_SKIP_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_ATL_SKIP_NS                       USBHSH_ATL_PTD_SKIP_MAP_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_ISO_DONE                          USBHSH_ISO_PTD_DONE_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_ISO_DONE_NS                       USBHSH_ISO_PTD_DONE_MAP_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_ISO_SKIP                          USBHSH_ISO_PTD_SKIP_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_ISO_SKIP_NS                       USBHSH_ISO_PTD_SKIP_MAP_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_INT_DONE                          USBHSH_INT_PTD_DONE_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_INT_DONE_NS                       USBHSH_INT_PTD_DONE_MAP_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_INT_SKIP                          USBHSH_INT_PTD_SKIP_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_INT_SKIP_NS                       USBHSH_INT_PTD_SKIP_MAP_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_LAST_PTD                          USBHSH_LAST_PTD_INUSE_REG(USBHSH_BASE_PTR)
  #define USBHSH_LAST_PTD_NS                       USBHSH_LAST_PTD_INUSE_REG(USBHSH_BASE_PTR_NS)
  #define USBHSH_PORT_MODE                         USBHSH_PORTMODE_REG(USBHSH_BASE_PTR)
  #define USBHSH_PORT_MODE_NS                      USBHSH_PORTMODE_REG(USBHSH_BASE_PTR_NS)
#else
  /* USBHSH */
  #define USBHSH_CAPLENGTH_CHIPID                  USBHSH_CAPLENGTH_CHIPID_REG(USBHSH_BASE_PTR)
  #define USBHSH_HCSPARAMS                         USBHSH_HCSPARAMS_REG(USBHSH_BASE_PTR)
  #define USBHSH_HCCPARAMS                         USBHSH_HCCPARAMS_REG(USBHSH_BASE_PTR)
  #define USBHSH_FLADJ_FRINDEX                     USBHSH_FLADJ_FRINDEX_REG(USBHSH_BASE_PTR)
  #define USBHSH_ATL_PTD_BASE_ADDRESS              USBHSH_ATL_PTD_BASE_ADDR_REG(USBHSH_BASE_PTR)
  #define USBHSH_ISO_PTD_BASE_ADDRESS              USBHSH_ISO_PTD_BASE_ADDR_REG(USBHSH_BASE_PTR)
  #define USBHSH_INT_PTD_BASE_ADDRESS              USBHSH_INT_PTD_BASE_ADDR_REG(USBHSH_BASE_PTR)
  #define USBHSH_DATA_PAYLOAD_BASE_ADDRESS         USBHSH_DATA_PAYLOAD_BASE_ADDR_REG(USBHSH_BASE_PTR)
  #define USBHSH_USBCMD                            USBHSH_USBCMD_REG(USBHSH_BASE_PTR)
  #define USBHSH_USBSTS                            USBHSH_USBSTS_REG(USBHSH_BASE_PTR)
  #define USBHSH_USBINTR                           USBHSH_USBINTR_REG(USBHSH_BASE_PTR)
  #define USBHSH_PORTSC1                           USBHSH_PORTSC1_REG(USBHSH_BASE_PTR)
  #define USBHSH_ATL_DONE                          USBHSH_ATL_PTD_DONE_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_ATL_SKIP                          USBHSH_ATL_PTD_SKIP_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_ISO_DONE                          USBHSH_ISO_PTD_DONE_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_ISO_SKIP                          USBHSH_ISO_PTD_SKIP_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_INT_DONE                          USBHSH_INT_PTD_DONE_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_INT_SKIP                          USBHSH_INT_PTD_SKIP_MAP_REG(USBHSH_BASE_PTR)
  #define USBHSH_LAST_PTD                          USBHSH_LAST_PTD_INUSE_REG(USBHSH_BASE_PTR)
  #define USBHSH_PORT_MODE                         USBHSH_PORTMODE_REG(USBHSH_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group USBHSH_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USBHSH_Peripheral */


/* ----------------------------------------------------------------------------
   -- USBPHY
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBPHY_Peripheral USBPHY
 * @{
 */

/** USBPHY - Peripheral register structure */
typedef struct USBPHY_MemMap {
  uint32_t PWD;                                    /**< Power Down, offset: 0x0 */
  uint32_t PWD_SET;                                /**< Power Down Register Set, offset: 0x4 */
  uint32_t PWD_CLR;                                /**< Power Down Register Clear, offset: 0x8 */
  uint32_t PWD_TOG;                                /**< Power Down Register Toggle, offset: 0xC */
  uint32_t TX;                                     /**< TX Control, offset: 0x10 */
  uint32_t TX_SET;                                 /**< TX Control Set, offset: 0x14 */
  uint32_t TX_CLR;                                 /**< TX Control Clear, offset: 0x18 */
  uint32_t TX_TOG;                                 /**< TX Control Toggle, offset: 0x1C */
  uint32_t RX;                                     /**< RX Control, offset: 0x20 */
  uint32_t RX_SET;                                 /**< RX Control Set, offset: 0x24 */
  uint32_t RX_CLR;                                 /**< RX Control Clear, offset: 0x28 */
  uint32_t RX_TOG;                                 /**< RX Control Toggle, offset: 0x2C */
  uint32_t CTRL;                                   /**< General Purpose Control, offset: 0x30 */
  uint32_t CTRL_SET;                               /**< General Purpose Control Set, offset: 0x34 */
  uint32_t CTRL_CLR;                               /**< General Purpose Control Clear, offset: 0x38 */
  uint32_t CTRL_TOG;                               /**< General Purpose Control Toggle, offset: 0x3C */
  uint32_t STATUS;                                 /**< Status, offset: 0x40 */
  uint8_t RESERVED_0[12];
  uint32_t DEBUG0;                                 /**< Debug 0, offset: 0x50 */
  uint32_t DEBUG0_SET;                             /**< Debug 0 Set, offset: 0x54 */
  uint32_t DEBUG0_CLR;                             /**< Debug Clear, offset: 0x58 */
  uint32_t DEBUG0_TOG;                             /**< Debug Toggle, offset: 0x5C */
  uint8_t RESERVED_1[16];
  uint32_t DEBUG1;                                 /**< UTMI Debug 1, offset: 0x70 */
  uint32_t DEBUG1_SET;                             /**< UTMI Debug 1 Set, offset: 0x74 */
  uint32_t DEBUG1_CLR;                             /**< UTMI Debug 1 Clear, offset: 0x78 */
  uint32_t DEBUG1_TOG;                             /**< UTMI Debug 1 Toggle, offset: 0x7C */
  uint32_t VERSION;                                /**< Version, offset: 0x80 */
  uint8_t RESERVED_2[28];
  uint32_t PLL_SIC;                                /**< PLL Control/Status, offset: 0xA0 */
  uint32_t PLL_SIC_SET;                            /**< PLL Control/Status Set, offset: 0xA4 */
  uint32_t PLL_SIC_CLR;                            /**< PLL Control/Status Clear, offset: 0xA8 */
  uint32_t PLL_SIC_TOG;                            /**< PLL Control/Status Toggle, offset: 0xAC */
  uint8_t RESERVED_3[16];
  uint32_t USB1_VBUS_DETECT;                       /**< VBUS detect, offset: 0xC0 */
  uint32_t USB1_VBUS_DETECT_SET;                   /**< VBUS detect Set, offset: 0xC4 */
  uint32_t USB1_VBUS_DETECT_CLR;                   /**< VBUS detect Clear, offset: 0xC8 */
  uint32_t USB1_VBUS_DETECT_TOG;                   /**< VBUS detect Toggle, offset: 0xCC */
  uint32_t USB1_VBUS_DET_STAT;                     /**< VBUS Detect Status, offset: 0xD0 */
  uint32_t USB1_VBUS_DET_STAT_SET;                 /**< VBUS Detect Status Set, offset: 0xD4 */
  uint32_t USB1_VBUS_DET_STAT_CLR;                 /**< VBUS Detect Status Clear, offset: 0xD8 */
  uint32_t USB1_VBUS_DET_STAT_TOG;                 /**< VBUS Detect Status Toggle, offset: 0xDC */
  uint32_t USB1_CHRG_DETECT;                       /**< Charger Detect Control, offset: 0xE0 */
  uint32_t USB1_CHRG_DETECT_SET;                   /**< Charger Detect Control Set, offset: 0xE4 */
  uint32_t USB1_CHRG_DETECT_CLR;                   /**< Charger Detect Control Clear, offset: 0xE8 */
  uint32_t USB1_CHRG_DETECT_TOG;                   /**< Charger Detect Control Toggle, offset: 0xEC */
  uint32_t USB1_CHRG_DET_STAT;                     /**< Charge Detect Status, offset: 0xF0 */
  uint8_t RESERVED_4[12];
  uint32_t ANACTRL;                                /**< Analog Control, offset: 0x100 */
  uint32_t ANACTRL_SET;                            /**< Analog Control Set, offset: 0x104 */
  uint32_t ANACTRL_CLR;                            /**< Analog Control Clear, offset: 0x108 */
  uint32_t ANACTRL_TOG;                            /**< Analog Control Toggle, offset: 0x10C */
  uint32_t USB1_LOOPBACK;                          /**< USB PHY Loopback Control/Status, offset: 0x110 */
  uint32_t USB1_LOOPBACK_SET;                      /**< USB PHY Loopback Control/Status Set, offset: 0x114 */
  uint32_t USB1_LOOPBACK_CLR;                      /**< USB PHY Loopback Control/Status Clear, offset: 0x118 */
  uint32_t USB1_LOOPBACK_TOG;                      /**< USB PHY Loopback Control/Status Toggle, offset: 0x11C */
  uint32_t USB1_LOOPBACK_HSFSCNT;                  /**< Loopback count register., offset: 0x120 */
  uint32_t USB1_LOOPBACK_HSFSCNT_SET;              /**< USB PHY Loopback Packet Number Select Set, offset: 0x124 */
  uint32_t USB1_LOOPBACK_HSFSCNT_CLR;              /**< USB PHY Loopback Packet Number Select Clear, offset: 0x128 */
  uint32_t USB1_LOOPBACK_HSFSCNT_TOG;              /**< USB PHY Loopback Packet Number Select Toggle, offset: 0x12C */
  uint32_t TRIM_OVERRIDE_EN;                       /**< Trim Override Enable, offset: 0x130 */
  uint32_t TRIM_OVERRIDE_EN_SET;                   /**< Trim Set, offset: 0x134 */
  uint32_t TRIM_OVERRIDE_EN_CLR;                   /**< Trim Clear, offset: 0x138 */
  uint32_t TRIM_OVERRIDE_EN_TOG;                   /**< Trim Toggle, offset: 0x13C */
} volatile *USBPHY_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USBPHY - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBPHY_Register_Accessor_Macros USBPHY - Register accessor macros
 * @{
 */


/* USBPHY - Register accessors */
#define USBPHY_PWD_REG(base)                     ((base)->PWD)
#define USBPHY_PWD_SET_REG(base)                 ((base)->PWD_SET)
#define USBPHY_PWD_CLR_REG(base)                 ((base)->PWD_CLR)
#define USBPHY_PWD_TOG_REG(base)                 ((base)->PWD_TOG)
#define USBPHY_TX_REG(base)                      ((base)->TX)
#define USBPHY_TX_SET_REG(base)                  ((base)->TX_SET)
#define USBPHY_TX_CLR_REG(base)                  ((base)->TX_CLR)
#define USBPHY_TX_TOG_REG(base)                  ((base)->TX_TOG)
#define USBPHY_RX_REG(base)                      ((base)->RX)
#define USBPHY_RX_SET_REG(base)                  ((base)->RX_SET)
#define USBPHY_RX_CLR_REG(base)                  ((base)->RX_CLR)
#define USBPHY_RX_TOG_REG(base)                  ((base)->RX_TOG)
#define USBPHY_CTRL_REG(base)                    ((base)->CTRL)
#define USBPHY_CTRL_SET_REG(base)                ((base)->CTRL_SET)
#define USBPHY_CTRL_CLR_REG(base)                ((base)->CTRL_CLR)
#define USBPHY_CTRL_TOG_REG(base)                ((base)->CTRL_TOG)
#define USBPHY_STATUS_REG(base)                  ((base)->STATUS)
#define USBPHY_DEBUG0_REG(base)                  ((base)->DEBUG0)
#define USBPHY_DEBUG0_SET_REG(base)              ((base)->DEBUG0_SET)
#define USBPHY_DEBUG0_CLR_REG(base)              ((base)->DEBUG0_CLR)
#define USBPHY_DEBUG0_TOG_REG(base)              ((base)->DEBUG0_TOG)
#define USBPHY_DEBUG1_REG(base)                  ((base)->DEBUG1)
#define USBPHY_DEBUG1_SET_REG(base)              ((base)->DEBUG1_SET)
#define USBPHY_DEBUG1_CLR_REG(base)              ((base)->DEBUG1_CLR)
#define USBPHY_DEBUG1_TOG_REG(base)              ((base)->DEBUG1_TOG)
#define USBPHY_VERSION_REG(base)                 ((base)->VERSION)
#define USBPHY_PLL_SIC_REG(base)                 ((base)->PLL_SIC)
#define USBPHY_PLL_SIC_SET_REG(base)             ((base)->PLL_SIC_SET)
#define USBPHY_PLL_SIC_CLR_REG(base)             ((base)->PLL_SIC_CLR)
#define USBPHY_PLL_SIC_TOG_REG(base)             ((base)->PLL_SIC_TOG)
#define USBPHY_USB1_VBUS_DETECT_REG(base)        ((base)->USB1_VBUS_DETECT)
#define USBPHY_USB1_VBUS_DETECT_SET_REG(base)    ((base)->USB1_VBUS_DETECT_SET)
#define USBPHY_USB1_VBUS_DETECT_CLR_REG(base)    ((base)->USB1_VBUS_DETECT_CLR)
#define USBPHY_USB1_VBUS_DETECT_TOG_REG(base)    ((base)->USB1_VBUS_DETECT_TOG)
#define USBPHY_USB1_VBUS_DET_STAT_REG(base)      ((base)->USB1_VBUS_DET_STAT)
#define USBPHY_USB1_VBUS_DET_STAT_SET_REG(base)  ((base)->USB1_VBUS_DET_STAT_SET)
#define USBPHY_USB1_VBUS_DET_STAT_CLR_REG(base)  ((base)->USB1_VBUS_DET_STAT_CLR)
#define USBPHY_USB1_VBUS_DET_STAT_TOG_REG(base)  ((base)->USB1_VBUS_DET_STAT_TOG)
#define USBPHY_USB1_CHRG_DETECT_REG(base)        ((base)->USB1_CHRG_DETECT)
#define USBPHY_USB1_CHRG_DETECT_SET_REG(base)    ((base)->USB1_CHRG_DETECT_SET)
#define USBPHY_USB1_CHRG_DETECT_CLR_REG(base)    ((base)->USB1_CHRG_DETECT_CLR)
#define USBPHY_USB1_CHRG_DETECT_TOG_REG(base)    ((base)->USB1_CHRG_DETECT_TOG)
#define USBPHY_USB1_CHRG_DET_STAT_REG(base)      ((base)->USB1_CHRG_DET_STAT)
#define USBPHY_ANACTRL_REG(base)                 ((base)->ANACTRL)
#define USBPHY_ANACTRL_SET_REG(base)             ((base)->ANACTRL_SET)
#define USBPHY_ANACTRL_CLR_REG(base)             ((base)->ANACTRL_CLR)
#define USBPHY_ANACTRL_TOG_REG(base)             ((base)->ANACTRL_TOG)
#define USBPHY_USB1_LOOPBACK_REG(base)           ((base)->USB1_LOOPBACK)
#define USBPHY_USB1_LOOPBACK_SET_REG(base)       ((base)->USB1_LOOPBACK_SET)
#define USBPHY_USB1_LOOPBACK_CLR_REG(base)       ((base)->USB1_LOOPBACK_CLR)
#define USBPHY_USB1_LOOPBACK_TOG_REG(base)       ((base)->USB1_LOOPBACK_TOG)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_REG(base)   ((base)->USB1_LOOPBACK_HSFSCNT)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_SET_REG(base) ((base)->USB1_LOOPBACK_HSFSCNT_SET)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_REG(base) ((base)->USB1_LOOPBACK_HSFSCNT_CLR)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_REG(base) ((base)->USB1_LOOPBACK_HSFSCNT_TOG)
#define USBPHY_TRIM_OVERRIDE_EN_REG(base)        ((base)->TRIM_OVERRIDE_EN)
#define USBPHY_TRIM_OVERRIDE_EN_SET_REG(base)    ((base)->TRIM_OVERRIDE_EN_SET)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_REG(base)    ((base)->TRIM_OVERRIDE_EN_CLR)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_REG(base)    ((base)->TRIM_OVERRIDE_EN_TOG)

/*!
 * @}
 */ /* end of group USBPHY_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USBPHY Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBPHY_Register_Masks USBPHY Register Masks
 * @{
 */

/*! @name PWD - Power Down */
/*! @{ */
#define USBPHY_PWD_TXPWDFS_MASK                  (0x400U)
#define USBPHY_PWD_TXPWDFS_SHIFT                 (10U)
#define USBPHY_PWD_TXPWDIBIAS_MASK               (0x800U)
#define USBPHY_PWD_TXPWDIBIAS_SHIFT              (11U)
#define USBPHY_PWD_TXPWDV2I_MASK                 (0x1000U)
#define USBPHY_PWD_TXPWDV2I_SHIFT                (12U)
#define USBPHY_PWD_RXPWDENV_MASK                 (0x20000U)
#define USBPHY_PWD_RXPWDENV_SHIFT                (17U)
#define USBPHY_PWD_RXPWD1PT1_MASK                (0x40000U)
#define USBPHY_PWD_RXPWD1PT1_SHIFT               (18U)
#define USBPHY_PWD_RXPWDDIFF_MASK                (0x80000U)
#define USBPHY_PWD_RXPWDDIFF_SHIFT               (19U)
#define USBPHY_PWD_RXPWDRX_MASK                  (0x100000U)
#define USBPHY_PWD_RXPWDRX_SHIFT                 (20U)
/*! @} */

/*! @name PWD_SET - Power Down Register Set */
/*! @{ */
#define USBPHY_PWD_SET_TXPWDFS_MASK              (0x400U)
#define USBPHY_PWD_SET_TXPWDFS_SHIFT             (10U)
#define USBPHY_PWD_SET_TXPWDIBIAS_MASK           (0x800U)
#define USBPHY_PWD_SET_TXPWDIBIAS_SHIFT          (11U)
#define USBPHY_PWD_SET_TXPWDV2I_MASK             (0x1000U)
#define USBPHY_PWD_SET_TXPWDV2I_SHIFT            (12U)
#define USBPHY_PWD_SET_RXPWDENV_MASK             (0x20000U)
#define USBPHY_PWD_SET_RXPWDENV_SHIFT            (17U)
#define USBPHY_PWD_SET_RXPWD1PT1_MASK            (0x40000U)
#define USBPHY_PWD_SET_RXPWD1PT1_SHIFT           (18U)
#define USBPHY_PWD_SET_RXPWDDIFF_MASK            (0x80000U)
#define USBPHY_PWD_SET_RXPWDDIFF_SHIFT           (19U)
#define USBPHY_PWD_SET_RXPWDRX_MASK              (0x100000U)
#define USBPHY_PWD_SET_RXPWDRX_SHIFT             (20U)
/*! @} */

/*! @name PWD_CLR - Power Down Register Clear */
/*! @{ */
#define USBPHY_PWD_CLR_TXPWDFS_MASK              (0x400U)
#define USBPHY_PWD_CLR_TXPWDFS_SHIFT             (10U)
#define USBPHY_PWD_CLR_TXPWDIBIAS_MASK           (0x800U)
#define USBPHY_PWD_CLR_TXPWDIBIAS_SHIFT          (11U)
#define USBPHY_PWD_CLR_TXPWDV2I_MASK             (0x1000U)
#define USBPHY_PWD_CLR_TXPWDV2I_SHIFT            (12U)
#define USBPHY_PWD_CLR_RXPWDENV_MASK             (0x20000U)
#define USBPHY_PWD_CLR_RXPWDENV_SHIFT            (17U)
#define USBPHY_PWD_CLR_RXPWD1PT1_MASK            (0x40000U)
#define USBPHY_PWD_CLR_RXPWD1PT1_SHIFT           (18U)
#define USBPHY_PWD_CLR_RXPWDDIFF_MASK            (0x80000U)
#define USBPHY_PWD_CLR_RXPWDDIFF_SHIFT           (19U)
#define USBPHY_PWD_CLR_RXPWDRX_MASK              (0x100000U)
#define USBPHY_PWD_CLR_RXPWDRX_SHIFT             (20U)
/*! @} */

/*! @name PWD_TOG - Power Down Register Toggle */
/*! @{ */
#define USBPHY_PWD_TOG_TXPWDFS_MASK              (0x400U)
#define USBPHY_PWD_TOG_TXPWDFS_SHIFT             (10U)
#define USBPHY_PWD_TOG_TXPWDIBIAS_MASK           (0x800U)
#define USBPHY_PWD_TOG_TXPWDIBIAS_SHIFT          (11U)
#define USBPHY_PWD_TOG_TXPWDV2I_MASK             (0x1000U)
#define USBPHY_PWD_TOG_TXPWDV2I_SHIFT            (12U)
#define USBPHY_PWD_TOG_RXPWDENV_MASK             (0x20000U)
#define USBPHY_PWD_TOG_RXPWDENV_SHIFT            (17U)
#define USBPHY_PWD_TOG_RXPWD1PT1_MASK            (0x40000U)
#define USBPHY_PWD_TOG_RXPWD1PT1_SHIFT           (18U)
#define USBPHY_PWD_TOG_RXPWDDIFF_MASK            (0x80000U)
#define USBPHY_PWD_TOG_RXPWDDIFF_SHIFT           (19U)
#define USBPHY_PWD_TOG_RXPWDRX_MASK              (0x100000U)
#define USBPHY_PWD_TOG_RXPWDRX_SHIFT             (20U)
/*! @} */

/*! @name TX - TX Control */
/*! @{ */
#define USBPHY_TX_D_CAL_MASK                     (0xFU)
#define USBPHY_TX_D_CAL_SHIFT                    (0U)
/*! D_CAL - Current Trim decode.
 */
#define USBPHY_TX_D_CAL(x)                       (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_D_CAL_SHIFT)) & USBPHY_TX_D_CAL_MASK)
#define USBPHY_TX_TXCAL45DM_MASK                 (0xF00U)
#define USBPHY_TX_TXCAL45DM_SHIFT                (8U)
/*! TXCAL45DM - DM series termination resistance trim.
 */
#define USBPHY_TX_TXCAL45DM(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TXCAL45DM_SHIFT)) & USBPHY_TX_TXCAL45DM_MASK)
#define USBPHY_TX_TXENCAL45DN_MASK               (0x2000U)
#define USBPHY_TX_TXENCAL45DN_SHIFT              (13U)
#define USBPHY_TX_TXCAL45DP_MASK                 (0xF0000U)
#define USBPHY_TX_TXCAL45DP_SHIFT                (16U)
/*! TXCAL45DP - DP series termination resistance trim.
 */
#define USBPHY_TX_TXCAL45DP(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TXCAL45DP_SHIFT)) & USBPHY_TX_TXCAL45DP_MASK)
#define USBPHY_TX_TXENCAL45DP_MASK               (0x200000U)
#define USBPHY_TX_TXENCAL45DP_SHIFT              (21U)
/*! @} */

/*! @name TX_SET - TX Control Set */
/*! @{ */
#define USBPHY_TX_SET_D_CAL_MASK                 (0xFU)
#define USBPHY_TX_SET_D_CAL_SHIFT                (0U)
/*! D_CAL - Current Trim decode.
 *  0b0000..No effect
 *  0b0001..Sets the corresponding TX bit
 */
#define USBPHY_TX_SET_D_CAL(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_D_CAL_SHIFT)) & USBPHY_TX_SET_D_CAL_MASK)
#define USBPHY_TX_SET_TXENCAL45DM_MASK           (0xF00U)
#define USBPHY_TX_SET_TXENCAL45DM_SHIFT          (8U)
/*! TXENCAL45DM - DM series termination resistance trim.
 *  0b0000..No effect
 *  0b0001..Sets the corresponding TX bit
 */
#define USBPHY_TX_SET_TXENCAL45DM(x)             (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_TXENCAL45DM_SHIFT)) & USBPHY_TX_SET_TXENCAL45DM_MASK)
#define USBPHY_TX_SET_TXENCAL45DN_MASK           (0x2000U)
#define USBPHY_TX_SET_TXENCAL45DN_SHIFT          (13U)
#define USBPHY_TX_SET_TXCAL45DP_MASK             (0xF0000U)
#define USBPHY_TX_SET_TXCAL45DP_SHIFT            (16U)
/*! TXCAL45DP - DP series termination resistance trim.
 *  0b0000..No effect
 *  0b0001..Sets the corresponding TX bit
 */
#define USBPHY_TX_SET_TXCAL45DP(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_TXCAL45DP_SHIFT)) & USBPHY_TX_SET_TXCAL45DP_MASK)
#define USBPHY_TX_SET_TXENCAL45DP_MASK           (0x200000U)
#define USBPHY_TX_SET_TXENCAL45DP_SHIFT          (21U)
/*! @} */

/*! @name TX_CLR - TX Control Clear */
/*! @{ */
#define USBPHY_TX_CLR_D_CAL_MASK                 (0xFU)
#define USBPHY_TX_CLR_D_CAL_SHIFT                (0U)
/*! D_CAL - Current Trim decode.
 *  0b0000..No effect
 *  0b0001..Clears the corresponding TX bit
 */
#define USBPHY_TX_CLR_D_CAL(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_D_CAL_SHIFT)) & USBPHY_TX_CLR_D_CAL_MASK)
#define USBPHY_TX_CLR_TXENCAL45DM_MASK           (0xF00U)
#define USBPHY_TX_CLR_TXENCAL45DM_SHIFT          (8U)
/*! TXENCAL45DM - DM series termination resistance trim.
 *  0b0000..No effect
 *  0b0001..Clears the corresponding TX bit
 */
#define USBPHY_TX_CLR_TXENCAL45DM(x)             (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_TXENCAL45DM_SHIFT)) & USBPHY_TX_CLR_TXENCAL45DM_MASK)
#define USBPHY_TX_CLR_TXENCAL45DN_MASK           (0x2000U)
#define USBPHY_TX_CLR_TXENCAL45DN_SHIFT          (13U)
#define USBPHY_TX_CLR_TXCAL45DP_MASK             (0xF0000U)
#define USBPHY_TX_CLR_TXCAL45DP_SHIFT            (16U)
/*! TXCAL45DP - DP series termination resistance trim.
 *  0b0000..No effect
 *  0b0001..Clears the corresponding TX bit
 */
#define USBPHY_TX_CLR_TXCAL45DP(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_TXCAL45DP_SHIFT)) & USBPHY_TX_CLR_TXCAL45DP_MASK)
#define USBPHY_TX_CLR_TXENCAL45DP_MASK           (0x200000U)
#define USBPHY_TX_CLR_TXENCAL45DP_SHIFT          (21U)
/*! @} */

/*! @name TX_TOG - TX Control Toggle */
/*! @{ */
#define USBPHY_TX_TOG_D_CAL_MASK                 (0xFU)
#define USBPHY_TX_TOG_D_CAL_SHIFT                (0U)
/*! D_CAL - Current Trim decode.
 *  0b0000..No effect
 *  0b0001..Toggles the corresponding TX bit
 */
#define USBPHY_TX_TOG_D_CAL(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_D_CAL_SHIFT)) & USBPHY_TX_TOG_D_CAL_MASK)
#define USBPHY_TX_TOG_TXENCAL45DM_MASK           (0xF00U)
#define USBPHY_TX_TOG_TXENCAL45DM_SHIFT          (8U)
/*! TXENCAL45DM - DM series termination resistance trim.
 *  0b0000..No effect
 *  0b0001..Toggles the corresponding TX bit
 */
#define USBPHY_TX_TOG_TXENCAL45DM(x)             (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_TXENCAL45DM_SHIFT)) & USBPHY_TX_TOG_TXENCAL45DM_MASK)
#define USBPHY_TX_TOG_TXENCAL45DN_MASK           (0x2000U)
#define USBPHY_TX_TOG_TXENCAL45DN_SHIFT          (13U)
#define USBPHY_TX_TOG_TXCAL45DP_MASK             (0xF0000U)
#define USBPHY_TX_TOG_TXCAL45DP_SHIFT            (16U)
/*! TXCAL45DP - DP series termination resistance trim.
 *  0b0000..No effect
 *  0b0001..Toggles the corresponding TX bit
 */
#define USBPHY_TX_TOG_TXCAL45DP(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_TXCAL45DP_SHIFT)) & USBPHY_TX_TOG_TXCAL45DP_MASK)
#define USBPHY_TX_TOG_TXENCAL45DP_MASK           (0x200000U)
#define USBPHY_TX_TOG_TXENCAL45DP_SHIFT          (21U)
/*! @} */

/*! @name RX - RX Control */
/*! @{ */
#define USBPHY_RX_ENVADJ_MASK                    (0x7U)
#define USBPHY_RX_ENVADJ_SHIFT                   (0U)
/*! ENVADJ - Envelope detector trip point.
 *  0b000..Trip-Level Voltage is 0.1000 V
 *  0b001..Trip-Level Voltage is 0.1125 V
 *  0b010..Trip-Level Voltage is 0.1250 V
 *  0b011..Trip-Level Voltage is 0.0875 V
 *  0b100-0b111..Reserved
 */
#define USBPHY_RX_ENVADJ(x)                      (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_ENVADJ_SHIFT)) & USBPHY_RX_ENVADJ_MASK)
#define USBPHY_RX_DISCONADJ_MASK                 (0x70U)
#define USBPHY_RX_DISCONADJ_SHIFT                (4U)
/*! DISCONADJ - Disconnect detector trip point.
 *  0b000..Trip-Level Voltage is 0.1000 V
 *  0b001..Trip-Level Voltage is 0.1125 V
 *  0b010..Trip-Level Voltage is 0.1250 V
 *  0b011..Trip-Level Voltage is 0.0875 V
 *  0b100-0b111..Reserved
 */
#define USBPHY_RX_DISCONADJ(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_DISCONADJ_SHIFT)) & USBPHY_RX_DISCONADJ_MASK)
#define USBPHY_RX_RXDBYPASS_MASK                 (0x400000U)
#define USBPHY_RX_RXDBYPASS_SHIFT                (22U)
/*! @} */

/*! @name RX_SET - RX Control Set */
/*! @{ */
#define USBPHY_RX_SET_ENVADJ_MASK                (0x7U)
#define USBPHY_RX_SET_ENVADJ_SHIFT               (0U)
/*! ENVADJ - Envelope detector trip point.
 *  0b000..No effect
 *  0b001..Sets the corresponding TX bit
 */
#define USBPHY_RX_SET_ENVADJ(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_SET_ENVADJ_SHIFT)) & USBPHY_RX_SET_ENVADJ_MASK)
#define USBPHY_RX_SET_DISCONADJ_MASK             (0x70U)
#define USBPHY_RX_SET_DISCONADJ_SHIFT            (4U)
/*! DISCONADJ - Disconnect detector trip point.
 *  0b000..No effect
 *  0b001..Sets the corresponding TX bit
 */
#define USBPHY_RX_SET_DISCONADJ(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_SET_DISCONADJ_SHIFT)) & USBPHY_RX_SET_DISCONADJ_MASK)
#define USBPHY_RX_SET_RXDBYPASS_MASK             (0x400000U)
#define USBPHY_RX_SET_RXDBYPASS_SHIFT            (22U)
/*! @} */

/*! @name RX_CLR - RX Control Clear */
/*! @{ */
#define USBPHY_RX_CLR_ENVADJ_MASK                (0x7U)
#define USBPHY_RX_CLR_ENVADJ_SHIFT               (0U)
/*! ENVADJ - Envelope detector trip point.
 *  0b000..No effect
 *  0b001..Clears the corresponding TX bit
 */
#define USBPHY_RX_CLR_ENVADJ(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_CLR_ENVADJ_SHIFT)) & USBPHY_RX_CLR_ENVADJ_MASK)
#define USBPHY_RX_CLR_DISCONADJ_MASK             (0x70U)
#define USBPHY_RX_CLR_DISCONADJ_SHIFT            (4U)
/*! DISCONADJ - Disconnect detector trip point.
 *  0b000..No effect
 *  0b001..Clears the corresponding TX bit
 */
#define USBPHY_RX_CLR_DISCONADJ(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_CLR_DISCONADJ_SHIFT)) & USBPHY_RX_CLR_DISCONADJ_MASK)
#define USBPHY_RX_CLR_RXDBYPASS_MASK             (0x400000U)
#define USBPHY_RX_CLR_RXDBYPASS_SHIFT            (22U)
/*! @} */

/*! @name RX_TOG - RX Control Toggle */
/*! @{ */
#define USBPHY_RX_TOG_ENVADJ_MASK                (0x7U)
#define USBPHY_RX_TOG_ENVADJ_SHIFT               (0U)
/*! ENVADJ - Envelope detector trip point.
 *  0b000..No effect
 *  0b001..Toggles the corresponding TX bit
 */
#define USBPHY_RX_TOG_ENVADJ(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_TOG_ENVADJ_SHIFT)) & USBPHY_RX_TOG_ENVADJ_MASK)
#define USBPHY_RX_TOG_DISCONADJ_MASK             (0x70U)
#define USBPHY_RX_TOG_DISCONADJ_SHIFT            (4U)
/*! DISCONADJ - Disconnect detector trip point.
 *  0b000..No effect
 *  0b001..Toggles the corresponding TX bit
 */
#define USBPHY_RX_TOG_DISCONADJ(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_TOG_DISCONADJ_SHIFT)) & USBPHY_RX_TOG_DISCONADJ_MASK)
#define USBPHY_RX_TOG_RXDBYPASS_MASK             (0x400000U)
#define USBPHY_RX_TOG_RXDBYPASS_SHIFT            (22U)
/*! @} */

/*! @name CTRL - General Purpose Control */
/*! @{ */
#define USBPHY_CTRL_ENHOSTDISCONDETECT_MASK      (0x2U)
#define USBPHY_CTRL_ENHOSTDISCONDETECT_SHIFT     (1U)
#define USBPHY_CTRL_HOSTDISCONDETECT_IRQ_MASK    (0x8U)
#define USBPHY_CTRL_HOSTDISCONDETECT_IRQ_SHIFT   (3U)
#define USBPHY_CTRL_ENDEVPLUGINDET_MASK          (0x10U)
#define USBPHY_CTRL_ENDEVPLUGINDET_SHIFT         (4U)
#define USBPHY_CTRL_DEVPLUGIN_IRQ_MASK           (0x1000U)
#define USBPHY_CTRL_DEVPLUGIN_IRQ_SHIFT          (12U)
#define USBPHY_CTRL_ENUTMILEVEL2_MASK            (0x4000U)
#define USBPHY_CTRL_ENUTMILEVEL2_SHIFT           (14U)
#define USBPHY_CTRL_ENUTMILEVEL3_MASK            (0x8000U)
#define USBPHY_CTRL_ENUTMILEVEL3_SHIFT           (15U)
#define USBPHY_CTRL_AUTORESUME_EN_MASK           (0x40000U)
#define USBPHY_CTRL_AUTORESUME_EN_SHIFT          (18U)
#define USBPHY_CTRL_ENAUTOCLR_CLKGATE_MASK       (0x80000U)
#define USBPHY_CTRL_ENAUTOCLR_CLKGATE_SHIFT      (19U)
#define USBPHY_CTRL_ENAUTOCLR_PHY_PWD_MASK       (0x100000U)
#define USBPHY_CTRL_ENAUTOCLR_PHY_PWD_SHIFT      (20U)
#define USBPHY_CTRL_FSDLL_RST_EN_MASK            (0x1000000U)
#define USBPHY_CTRL_FSDLL_RST_EN_SHIFT           (24U)
#define USBPHY_CTRL_HOST_FORCE_LS_SE0_MASK       (0x10000000U)
#define USBPHY_CTRL_HOST_FORCE_LS_SE0_SHIFT      (28U)
#define USBPHY_CTRL_UTMI_SUSPENDM_MASK           (0x20000000U)
#define USBPHY_CTRL_UTMI_SUSPENDM_SHIFT          (29U)
#define USBPHY_CTRL_CLKGATE_MASK                 (0x40000000U)
#define USBPHY_CTRL_CLKGATE_SHIFT                (30U)
#define USBPHY_CTRL_SFTRST_MASK                  (0x80000000U)
#define USBPHY_CTRL_SFTRST_SHIFT                 (31U)
/*! @} */

/*! @name CTRL_SET - General Purpose Control Set */
/*! @{ */
#define USBPHY_CTRL_SET_ENHOSTDISCONDETECT_MASK  (0x2U)
#define USBPHY_CTRL_SET_ENHOSTDISCONDETECT_SHIFT (1U)
#define USBPHY_CTRL_SET_HOSTDISCONDETECT_IRQ_MASK (0x8U)
#define USBPHY_CTRL_SET_HOSTDISCONDETECT_IRQ_SHIFT (3U)
#define USBPHY_CTRL_SET_ENDEVPLUGINDET_MASK      (0x10U)
#define USBPHY_CTRL_SET_ENDEVPLUGINDET_SHIFT     (4U)
#define USBPHY_CTRL_SET_DEVPLUGIN_IRQ_MASK       (0x1000U)
#define USBPHY_CTRL_SET_DEVPLUGIN_IRQ_SHIFT      (12U)
#define USBPHY_CTRL_SET_ENUTMILEVEL2_MASK        (0x4000U)
#define USBPHY_CTRL_SET_ENUTMILEVEL2_SHIFT       (14U)
#define USBPHY_CTRL_SET_ENUTMILEVEL3_MASK        (0x8000U)
#define USBPHY_CTRL_SET_ENUTMILEVEL3_SHIFT       (15U)
#define USBPHY_CTRL_SET_AUTORESUME_EN_MASK       (0x40000U)
#define USBPHY_CTRL_SET_AUTORESUME_EN_SHIFT      (18U)
#define USBPHY_CTRL_SET_ENAUTOCLR_CLKGATE_MASK   (0x80000U)
#define USBPHY_CTRL_SET_ENAUTOCLR_CLKGATE_SHIFT  (19U)
#define USBPHY_CTRL_SET_ENAUTOCLR_PHY_PWD_MASK   (0x100000U)
#define USBPHY_CTRL_SET_ENAUTOCLR_PHY_PWD_SHIFT  (20U)
#define USBPHY_CTRL_SET_FSDLL_RST_EN_MASK        (0x1000000U)
#define USBPHY_CTRL_SET_FSDLL_RST_EN_SHIFT       (24U)
#define USBPHY_CTRL_SET_HOST_FORCE_LS_SE0_MASK   (0x10000000U)
#define USBPHY_CTRL_SET_HOST_FORCE_LS_SE0_SHIFT  (28U)
#define USBPHY_CTRL_SET_UTMI_SUSPENDM_MASK       (0x20000000U)
#define USBPHY_CTRL_SET_UTMI_SUSPENDM_SHIFT      (29U)
#define USBPHY_CTRL_SET_CLKGATE_MASK             (0x40000000U)
#define USBPHY_CTRL_SET_CLKGATE_SHIFT            (30U)
#define USBPHY_CTRL_SET_SFTRST_MASK              (0x80000000U)
#define USBPHY_CTRL_SET_SFTRST_SHIFT             (31U)
/*! @} */

/*! @name CTRL_CLR - General Purpose Control Clear */
/*! @{ */
#define USBPHY_CTRL_CLR_ENHOSTDISCONDETECT_MASK  (0x2U)
#define USBPHY_CTRL_CLR_ENHOSTDISCONDETECT_SHIFT (1U)
#define USBPHY_CTRL_CLR_HOSTDISCONDETECT_IRQ_MASK (0x8U)
#define USBPHY_CTRL_CLR_HOSTDISCONDETECT_IRQ_SHIFT (3U)
#define USBPHY_CTRL_CLR_ENDEVPLUGINDET_MASK      (0x10U)
#define USBPHY_CTRL_CLR_ENDEVPLUGINDET_SHIFT     (4U)
#define USBPHY_CTRL_CLR_DEVPLUGIN_IRQ_MASK       (0x1000U)
#define USBPHY_CTRL_CLR_DEVPLUGIN_IRQ_SHIFT      (12U)
#define USBPHY_CTRL_CLR_ENUTMILEVEL2_MASK        (0x4000U)
#define USBPHY_CTRL_CLR_ENUTMILEVEL2_SHIFT       (14U)
#define USBPHY_CTRL_CLR_ENUTMILEVEL3_MASK        (0x8000U)
#define USBPHY_CTRL_CLR_ENUTMILEVEL3_SHIFT       (15U)
#define USBPHY_CTRL_CLR_AUTORESUME_EN_MASK       (0x40000U)
#define USBPHY_CTRL_CLR_AUTORESUME_EN_SHIFT      (18U)
#define USBPHY_CTRL_CLR_ENAUTOCLR_CLKGATE_MASK   (0x80000U)
#define USBPHY_CTRL_CLR_ENAUTOCLR_CLKGATE_SHIFT  (19U)
#define USBPHY_CTRL_CLR_ENAUTOCLR_PHY_PWD_MASK   (0x100000U)
#define USBPHY_CTRL_CLR_ENAUTOCLR_PHY_PWD_SHIFT  (20U)
#define USBPHY_CTRL_CLR_FSDLL_RST_EN_MASK        (0x1000000U)
#define USBPHY_CTRL_CLR_FSDLL_RST_EN_SHIFT       (24U)
#define USBPHY_CTRL_CLR_HOST_FORCE_LS_SE0_MASK   (0x10000000U)
#define USBPHY_CTRL_CLR_HOST_FORCE_LS_SE0_SHIFT  (28U)
#define USBPHY_CTRL_CLR_UTMI_SUSPENDM_MASK       (0x20000000U)
#define USBPHY_CTRL_CLR_UTMI_SUSPENDM_SHIFT      (29U)
#define USBPHY_CTRL_CLR_CLKGATE_MASK             (0x40000000U)
#define USBPHY_CTRL_CLR_CLKGATE_SHIFT            (30U)
#define USBPHY_CTRL_CLR_SFTRST_MASK              (0x80000000U)
#define USBPHY_CTRL_CLR_SFTRST_SHIFT             (31U)
/*! @} */

/*! @name CTRL_TOG - General Purpose Control Toggle */
/*! @{ */
#define USBPHY_CTRL_TOG_ENHOSTDISCONDETECT_MASK  (0x2U)
#define USBPHY_CTRL_TOG_ENHOSTDISCONDETECT_SHIFT (1U)
#define USBPHY_CTRL_TOG_HOSTDISCONDETECT_IRQ_MASK (0x8U)
#define USBPHY_CTRL_TOG_HOSTDISCONDETECT_IRQ_SHIFT (3U)
#define USBPHY_CTRL_TOG_ENDEVPLUGINDET_MASK      (0x10U)
#define USBPHY_CTRL_TOG_ENDEVPLUGINDET_SHIFT     (4U)
#define USBPHY_CTRL_TOG_DEVPLUGIN_IRQ_MASK       (0x1000U)
#define USBPHY_CTRL_TOG_DEVPLUGIN_IRQ_SHIFT      (12U)
#define USBPHY_CTRL_TOG_ENUTMILEVEL2_MASK        (0x4000U)
#define USBPHY_CTRL_TOG_ENUTMILEVEL2_SHIFT       (14U)
#define USBPHY_CTRL_TOG_ENUTMILEVEL3_MASK        (0x8000U)
#define USBPHY_CTRL_TOG_ENUTMILEVEL3_SHIFT       (15U)
#define USBPHY_CTRL_TOG_AUTORESUME_EN_MASK       (0x40000U)
#define USBPHY_CTRL_TOG_AUTORESUME_EN_SHIFT      (18U)
#define USBPHY_CTRL_TOG_ENAUTOCLR_CLKGATE_MASK   (0x80000U)
#define USBPHY_CTRL_TOG_ENAUTOCLR_CLKGATE_SHIFT  (19U)
#define USBPHY_CTRL_TOG_ENAUTOCLR_PHY_PWD_MASK   (0x100000U)
#define USBPHY_CTRL_TOG_ENAUTOCLR_PHY_PWD_SHIFT  (20U)
#define USBPHY_CTRL_TOG_FSDLL_RST_EN_MASK        (0x1000000U)
#define USBPHY_CTRL_TOG_FSDLL_RST_EN_SHIFT       (24U)
#define USBPHY_CTRL_TOG_HOST_FORCE_LS_SE0_MASK   (0x10000000U)
#define USBPHY_CTRL_TOG_HOST_FORCE_LS_SE0_SHIFT  (28U)
#define USBPHY_CTRL_TOG_UTMI_SUSPENDM_MASK       (0x20000000U)
#define USBPHY_CTRL_TOG_UTMI_SUSPENDM_SHIFT      (29U)
#define USBPHY_CTRL_TOG_CLKGATE_MASK             (0x40000000U)
#define USBPHY_CTRL_TOG_CLKGATE_SHIFT            (30U)
#define USBPHY_CTRL_TOG_SFTRST_MASK              (0x80000000U)
#define USBPHY_CTRL_TOG_SFTRST_SHIFT             (31U)
/*! @} */

/*! @name STATUS - Status */
/*! @{ */
#define USBPHY_STATUS_OK_STATUS_3V_MASK          (0x1U)
#define USBPHY_STATUS_OK_STATUS_3V_SHIFT         (0U)
#define USBPHY_STATUS_HOSTDISCONDETECT_STATUS_MASK (0x8U)
#define USBPHY_STATUS_HOSTDISCONDETECT_STATUS_SHIFT (3U)
#define USBPHY_STATUS_DEVPLUGIN_STATUS_MASK      (0x40U)
#define USBPHY_STATUS_DEVPLUGIN_STATUS_SHIFT     (6U)
#define USBPHY_STATUS_OTGID_STATUS_MASK          (0x100U)
#define USBPHY_STATUS_OTGID_STATUS_SHIFT         (8U)
#define USBPHY_STATUS_RESUME_STATUS_MASK         (0x400U)
#define USBPHY_STATUS_RESUME_STATUS_SHIFT        (10U)
/*! @} */

/*! @name DEBUG0 - Debug 0 */
/*! @{ */
#define USBPHY_DEBUG0_OTGIDPIOLOCK_MASK          (0x1U)
#define USBPHY_DEBUG0_OTGIDPIOLOCK_SHIFT         (0U)
#define USBPHY_DEBUG0_DEBUG_INTERFACE_HOLD_MASK  (0x2U)
#define USBPHY_DEBUG0_DEBUG_INTERFACE_HOLD_SHIFT (1U)
#define USBPHY_DEBUG0_HSTPULLDOWN_MASK           (0xCU)
#define USBPHY_DEBUG0_HSTPULLDOWN_SHIFT          (2U)
/*! HSTPULLDOWN - HS DP/DM pulldown resistance select.
 */
#define USBPHY_DEBUG0_HSTPULLDOWN(x)             (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_HSTPULLDOWN_SHIFT)) & USBPHY_DEBUG0_HSTPULLDOWN_MASK)
#define USBPHY_DEBUG0_ENHSTPULLDOWN_MASK         (0x30U)
#define USBPHY_DEBUG0_ENHSTPULLDOWN_SHIFT        (4U)
/*! ENHSTPULLDOWN - Enable Host pulldown
 */
#define USBPHY_DEBUG0_ENHSTPULLDOWN(x)           (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_ENHSTPULLDOWN_SHIFT)) & USBPHY_DEBUG0_ENHSTPULLDOWN_MASK)
#define USBPHY_DEBUG0_TX2RXCOUNT_MASK            (0xF00U)
#define USBPHY_DEBUG0_TX2RXCOUNT_SHIFT           (8U)
/*! TX2RXCOUNT - TX2RXCOUNT
 */
#define USBPHY_DEBUG0_TX2RXCOUNT(x)              (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_TX2RXCOUNT_SHIFT)) & USBPHY_DEBUG0_TX2RXCOUNT_MASK)
#define USBPHY_DEBUG0_ENTX2RXCOUNT_MASK          (0x1000U)
#define USBPHY_DEBUG0_ENTX2RXCOUNT_SHIFT         (12U)
#define USBPHY_DEBUG0_SQUELCHRESETCOUNT_MASK     (0x1F0000U)
#define USBPHY_DEBUG0_SQUELCHRESETCOUNT_SHIFT    (16U)
/*! SQUELCHRESETCOUNT - Squelch reset count
 */
#define USBPHY_DEBUG0_SQUELCHRESETCOUNT(x)       (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_SQUELCHRESETCOUNT_SHIFT)) & USBPHY_DEBUG0_SQUELCHRESETCOUNT_MASK)
#define USBPHY_DEBUG0_ENSQUELCHRESET_MASK        (0x1000000U)
#define USBPHY_DEBUG0_ENSQUELCHRESET_SHIFT       (24U)
#define USBPHY_DEBUG0_SQUELCHRESETLENGTH_MASK    (0x1E000000U)
#define USBPHY_DEBUG0_SQUELCHRESETLENGTH_SHIFT   (25U)
/*! SQUELCHRESETLENGTH - Squelch reset length
 */
#define USBPHY_DEBUG0_SQUELCHRESETLENGTH(x)      (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_SQUELCHRESETLENGTH_SHIFT)) & USBPHY_DEBUG0_SQUELCHRESETLENGTH_MASK)
#define USBPHY_DEBUG0_HOST_RESUME_DEBUG_MASK     (0x20000000U)
#define USBPHY_DEBUG0_HOST_RESUME_DEBUG_SHIFT    (29U)
#define USBPHY_DEBUG0_CLKGATE_MASK               (0x40000000U)
#define USBPHY_DEBUG0_CLKGATE_SHIFT              (30U)
/*! @} */

/*! @name DEBUG0_SET - Debug 0 Set */
/*! @{ */
#define USBPHY_DEBUG0_SET_OTGIDPIOLOCK_MASK      (0x1U)
#define USBPHY_DEBUG0_SET_OTGIDPIOLOCK_SHIFT     (0U)
#define USBPHY_DEBUG0_SET_DEBUG_INTERFACE_HOLD_MASK (0x2U)
#define USBPHY_DEBUG0_SET_DEBUG_INTERFACE_HOLD_SHIFT (1U)
#define USBPHY_DEBUG0_SET_HSTPULLDOWN_MASK       (0xCU)
#define USBPHY_DEBUG0_SET_HSTPULLDOWN_SHIFT      (2U)
/*! HSTPULLDOWN - HS DP/DM pulldown resistance select.
 *  0b00..No effect
 *  0b01..Sets the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_SET_HSTPULLDOWN(x)         (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_SET_HSTPULLDOWN_SHIFT)) & USBPHY_DEBUG0_SET_HSTPULLDOWN_MASK)
#define USBPHY_DEBUG0_SET_ENHSTPULLDOWN_MASK     (0x30U)
#define USBPHY_DEBUG0_SET_ENHSTPULLDOWN_SHIFT    (4U)
/*! ENHSTPULLDOWN - Enable Host pulldown
 *  0b00..No effect
 *  0b01..Sets the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_SET_ENHSTPULLDOWN(x)       (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_SET_ENHSTPULLDOWN_SHIFT)) & USBPHY_DEBUG0_SET_ENHSTPULLDOWN_MASK)
#define USBPHY_DEBUG0_SET_TX2RXCOUNT_MASK        (0xF00U)
#define USBPHY_DEBUG0_SET_TX2RXCOUNT_SHIFT       (8U)
/*! TX2RXCOUNT - TX2RXCOUNT
 *  0b0000..No effect
 *  0b0001..Sets the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_SET_TX2RXCOUNT(x)          (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_SET_TX2RXCOUNT_SHIFT)) & USBPHY_DEBUG0_SET_TX2RXCOUNT_MASK)
#define USBPHY_DEBUG0_SET_ENTX2RXCOUNT_MASK      (0x1000U)
#define USBPHY_DEBUG0_SET_ENTX2RXCOUNT_SHIFT     (12U)
#define USBPHY_DEBUG0_SET_SQUELCHRESETCOUNT_MASK (0x1F0000U)
#define USBPHY_DEBUG0_SET_SQUELCHRESETCOUNT_SHIFT (16U)
/*! SQUELCHRESETCOUNT - Squelch reset count
 *  0b00000..No effect
 *  0b00001..Sets the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_SET_SQUELCHRESETCOUNT(x)   (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_SET_SQUELCHRESETCOUNT_SHIFT)) & USBPHY_DEBUG0_SET_SQUELCHRESETCOUNT_MASK)
#define USBPHY_DEBUG0_SET_ENSQUELCHRESET_MASK    (0x1000000U)
#define USBPHY_DEBUG0_SET_ENSQUELCHRESET_SHIFT   (24U)
#define USBPHY_DEBUG0_SET_SQUELCHRESETLENGTH_MASK (0x1E000000U)
#define USBPHY_DEBUG0_SET_SQUELCHRESETLENGTH_SHIFT (25U)
/*! SQUELCHRESETLENGTH - Squelch reset length
 *  0b0000..No effect
 *  0b0001..Sets the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_SET_SQUELCHRESETLENGTH(x)  (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_SET_SQUELCHRESETLENGTH_SHIFT)) & USBPHY_DEBUG0_SET_SQUELCHRESETLENGTH_MASK)
#define USBPHY_DEBUG0_SET_HOST_RESUME_DEBUG_MASK (0x20000000U)
#define USBPHY_DEBUG0_SET_HOST_RESUME_DEBUG_SHIFT (29U)
#define USBPHY_DEBUG0_SET_CLKGATE_MASK           (0x40000000U)
#define USBPHY_DEBUG0_SET_CLKGATE_SHIFT          (30U)
/*! @} */

/*! @name DEBUG0_CLR - Debug Clear */
/*! @{ */
#define USBPHY_DEBUG0_CLR_OTGIDPIOLOCK_MASK      (0x1U)
#define USBPHY_DEBUG0_CLR_OTGIDPIOLOCK_SHIFT     (0U)
#define USBPHY_DEBUG0_CLR_DEBUG_INTERFACE_HOLD_MASK (0x2U)
#define USBPHY_DEBUG0_CLR_DEBUG_INTERFACE_HOLD_SHIFT (1U)
#define USBPHY_DEBUG0_CLR_HSTPULLDOWN_MASK       (0xCU)
#define USBPHY_DEBUG0_CLR_HSTPULLDOWN_SHIFT      (2U)
/*! HSTPULLDOWN - HS DP/DM pulldown resistance select.
 *  0b00..No effect
 *  0b01..Clears the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_CLR_HSTPULLDOWN(x)         (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_CLR_HSTPULLDOWN_SHIFT)) & USBPHY_DEBUG0_CLR_HSTPULLDOWN_MASK)
#define USBPHY_DEBUG0_CLR_ENHSTPULLDOWN_MASK     (0x30U)
#define USBPHY_DEBUG0_CLR_ENHSTPULLDOWN_SHIFT    (4U)
/*! ENHSTPULLDOWN - Enable Host pulldown
 *  0b00..No effect
 *  0b01..Clears the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_CLR_ENHSTPULLDOWN(x)       (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_CLR_ENHSTPULLDOWN_SHIFT)) & USBPHY_DEBUG0_CLR_ENHSTPULLDOWN_MASK)
#define USBPHY_DEBUG0_CLR_TX2RXCOUNT_MASK        (0xF00U)
#define USBPHY_DEBUG0_CLR_TX2RXCOUNT_SHIFT       (8U)
/*! TX2RXCOUNT - TX2RXCOUNT
 *  0b0000..No effect
 *  0b0001..Clears the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_CLR_TX2RXCOUNT(x)          (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_CLR_TX2RXCOUNT_SHIFT)) & USBPHY_DEBUG0_CLR_TX2RXCOUNT_MASK)
#define USBPHY_DEBUG0_CLR_ENTX2RXCOUNT_MASK      (0x1000U)
#define USBPHY_DEBUG0_CLR_ENTX2RXCOUNT_SHIFT     (12U)
#define USBPHY_DEBUG0_CLR_SQUELCHRESETCOUNT_MASK (0x1F0000U)
#define USBPHY_DEBUG0_CLR_SQUELCHRESETCOUNT_SHIFT (16U)
/*! SQUELCHRESETCOUNT - Squelch reset count
 *  0b00000..No effect
 *  0b00001..Clears the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_CLR_SQUELCHRESETCOUNT(x)   (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_CLR_SQUELCHRESETCOUNT_SHIFT)) & USBPHY_DEBUG0_CLR_SQUELCHRESETCOUNT_MASK)
#define USBPHY_DEBUG0_CLR_ENSQUELCHRESET_MASK    (0x1000000U)
#define USBPHY_DEBUG0_CLR_ENSQUELCHRESET_SHIFT   (24U)
#define USBPHY_DEBUG0_CLR_SQUELCHRESETLENGTH_MASK (0x1E000000U)
#define USBPHY_DEBUG0_CLR_SQUELCHRESETLENGTH_SHIFT (25U)
/*! SQUELCHRESETLENGTH - Squelch reset length
 *  0b0000..No effect
 *  0b0001..Clears the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_CLR_SQUELCHRESETLENGTH(x)  (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_CLR_SQUELCHRESETLENGTH_SHIFT)) & USBPHY_DEBUG0_CLR_SQUELCHRESETLENGTH_MASK)
#define USBPHY_DEBUG0_CLR_HOST_RESUME_DEBUG_MASK (0x20000000U)
#define USBPHY_DEBUG0_CLR_HOST_RESUME_DEBUG_SHIFT (29U)
#define USBPHY_DEBUG0_CLR_CLKGATE_MASK           (0x40000000U)
#define USBPHY_DEBUG0_CLR_CLKGATE_SHIFT          (30U)
/*! @} */

/*! @name DEBUG0_TOG - Debug Toggle */
/*! @{ */
#define USBPHY_DEBUG0_TOG_OTGIDPIOLOCK_MASK      (0x1U)
#define USBPHY_DEBUG0_TOG_OTGIDPIOLOCK_SHIFT     (0U)
#define USBPHY_DEBUG0_TOG_DEBUG_INTERFACE_HOLD_MASK (0x2U)
#define USBPHY_DEBUG0_TOG_DEBUG_INTERFACE_HOLD_SHIFT (1U)
#define USBPHY_DEBUG0_TOG_HSTPULLDOWN_MASK       (0xCU)
#define USBPHY_DEBUG0_TOG_HSTPULLDOWN_SHIFT      (2U)
/*! HSTPULLDOWN - HS DP/DM pulldown resistance select.
 *  0b00..No effect
 *  0b01..Toggles the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_TOG_HSTPULLDOWN(x)         (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_TOG_HSTPULLDOWN_SHIFT)) & USBPHY_DEBUG0_TOG_HSTPULLDOWN_MASK)
#define USBPHY_DEBUG0_TOG_ENHSTPULLDOWN_MASK     (0x30U)
#define USBPHY_DEBUG0_TOG_ENHSTPULLDOWN_SHIFT    (4U)
/*! ENHSTPULLDOWN - Enable Host pulldown
 *  0b00..No effect
 *  0b01..Toggles the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_TOG_ENHSTPULLDOWN(x)       (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_TOG_ENHSTPULLDOWN_SHIFT)) & USBPHY_DEBUG0_TOG_ENHSTPULLDOWN_MASK)
#define USBPHY_DEBUG0_TOG_TX2RXCOUNT_MASK        (0xF00U)
#define USBPHY_DEBUG0_TOG_TX2RXCOUNT_SHIFT       (8U)
/*! TX2RXCOUNT - TX2RXCOUNT
 *  0b0000..No effect
 *  0b0001..Toggles the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_TOG_TX2RXCOUNT(x)          (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_TOG_TX2RXCOUNT_SHIFT)) & USBPHY_DEBUG0_TOG_TX2RXCOUNT_MASK)
#define USBPHY_DEBUG0_TOG_ENTX2RXCOUNT_MASK      (0x1000U)
#define USBPHY_DEBUG0_TOG_ENTX2RXCOUNT_SHIFT     (12U)
#define USBPHY_DEBUG0_TOG_SQUELCHRESETCOUNT_MASK (0x1F0000U)
#define USBPHY_DEBUG0_TOG_SQUELCHRESETCOUNT_SHIFT (16U)
/*! SQUELCHRESETCOUNT - Squelch reset count
 *  0b00000..No effect
 *  0b00001..Toggles the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_TOG_SQUELCHRESETCOUNT(x)   (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_TOG_SQUELCHRESETCOUNT_SHIFT)) & USBPHY_DEBUG0_TOG_SQUELCHRESETCOUNT_MASK)
#define USBPHY_DEBUG0_TOG_ENSQUELCHRESET_MASK    (0x1000000U)
#define USBPHY_DEBUG0_TOG_ENSQUELCHRESET_SHIFT   (24U)
#define USBPHY_DEBUG0_TOG_SQUELCHRESETLENGTH_MASK (0x1E000000U)
#define USBPHY_DEBUG0_TOG_SQUELCHRESETLENGTH_SHIFT (25U)
/*! SQUELCHRESETLENGTH - Squelch reset length
 *  0b0000..No effect
 *  0b0001..the corresponding CTRL bit
 */
#define USBPHY_DEBUG0_TOG_SQUELCHRESETLENGTH(x)  (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_TOG_SQUELCHRESETLENGTH_SHIFT)) & USBPHY_DEBUG0_TOG_SQUELCHRESETLENGTH_MASK)
#define USBPHY_DEBUG0_TOG_HOST_RESUME_DEBUG_MASK (0x20000000U)
#define USBPHY_DEBUG0_TOG_HOST_RESUME_DEBUG_SHIFT (29U)
#define USBPHY_DEBUG0_TOG_CLKGATE_MASK           (0x40000000U)
#define USBPHY_DEBUG0_TOG_CLKGATE_SHIFT          (30U)
/*! @} */

/*! @name DEBUG1 - UTMI Debug 1 */
/*! @{ */
#define USBPHY_DEBUG1_ENTAILADJVD_MASK           (0x6000U)
#define USBPHY_DEBUG1_ENTAILADJVD_SHIFT          (13U)
/*! ENTAILADJVD - Enable delay increment
 *  0b00..Delay is nominal
 *  0b01..Delay is +20%
 *  0b10..Delay is -20%
 *  0b11..Delay is -40%
 */
#define USBPHY_DEBUG1_ENTAILADJVD(x)             (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_ENTAILADJVD_SHIFT)) & USBPHY_DEBUG1_ENTAILADJVD_MASK)
#define USBPHY_DEBUG1_USB2_REFBIAS_VBGADJ_MASK   (0x1C0000U)
#define USBPHY_DEBUG1_USB2_REFBIAS_VBGADJ_SHIFT  (18U)
/*! USB2_REFBIAS_VBGADJ - Bandgap adjustment
 */
#define USBPHY_DEBUG1_USB2_REFBIAS_VBGADJ(x)     (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_USB2_REFBIAS_VBGADJ_SHIFT)) & USBPHY_DEBUG1_USB2_REFBIAS_VBGADJ_MASK)
#define USBPHY_DEBUG1_USB2_REFBIAS_TST_MASK      (0x600000U)
#define USBPHY_DEBUG1_USB2_REFBIAS_TST_SHIFT     (21U)
/*! USB2_REFBIAS_TST - Bias current control
 */
#define USBPHY_DEBUG1_USB2_REFBIAS_TST(x)        (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_USB2_REFBIAS_TST_SHIFT)) & USBPHY_DEBUG1_USB2_REFBIAS_TST_MASK)
/*! @} */

/*! @name DEBUG1_SET - UTMI Debug 1 Set */
/*! @{ */
#define USBPHY_DEBUG1_SET_ENTAILADJVD_MASK       (0x6000U)
#define USBPHY_DEBUG1_SET_ENTAILADJVD_SHIFT      (13U)
/*! ENTAILADJVD - Enable delay increment
 *  0b00..No effect
 *  0b01..Sets the corresponding DEBUG1 bit
 */
#define USBPHY_DEBUG1_SET_ENTAILADJVD(x)         (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_SET_ENTAILADJVD_SHIFT)) & USBPHY_DEBUG1_SET_ENTAILADJVD_MASK)
#define USBPHY_DEBUG1_SET_USB2_REFBIAS_VBGADJ_MASK (0x1C0000U)
#define USBPHY_DEBUG1_SET_USB2_REFBIAS_VBGADJ_SHIFT (18U)
/*! USB2_REFBIAS_VBGADJ - Bandgap adjustment
 *  0b000..No effect
 *  0b001..Sets the corresponding DEBUG1 bit
 */
#define USBPHY_DEBUG1_SET_USB2_REFBIAS_VBGADJ(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_SET_USB2_REFBIAS_VBGADJ_SHIFT)) & USBPHY_DEBUG1_SET_USB2_REFBIAS_VBGADJ_MASK)
#define USBPHY_DEBUG1_SET_USB2_REFBIAS_TST_MASK  (0x600000U)
#define USBPHY_DEBUG1_SET_USB2_REFBIAS_TST_SHIFT (21U)
/*! USB2_REFBIAS_TST - Bias current control
 *  0b00..No effect
 *  0b01..Sets the corresponding DEBUG1 bit
 */
#define USBPHY_DEBUG1_SET_USB2_REFBIAS_TST(x)    (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_SET_USB2_REFBIAS_TST_SHIFT)) & USBPHY_DEBUG1_SET_USB2_REFBIAS_TST_MASK)
/*! @} */

/*! @name DEBUG1_CLR - UTMI Debug 1 Clear */
/*! @{ */
#define USBPHY_DEBUG1_CLR_ENTAILADJVD_MASK       (0x6000U)
#define USBPHY_DEBUG1_CLR_ENTAILADJVD_SHIFT      (13U)
/*! ENTAILADJVD - Enable delay increment
 *  0b00..No effect
 *  0b01..Clears the corresponding DEBUG1 bit
 */
#define USBPHY_DEBUG1_CLR_ENTAILADJVD(x)         (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_CLR_ENTAILADJVD_SHIFT)) & USBPHY_DEBUG1_CLR_ENTAILADJVD_MASK)
#define USBPHY_DEBUG1_CLR_USB2_REFBIAS_VBGADJ_MASK (0x1C0000U)
#define USBPHY_DEBUG1_CLR_USB2_REFBIAS_VBGADJ_SHIFT (18U)
/*! USB2_REFBIAS_VBGADJ - Bandgap adjustment
 *  0b000..No effect
 *  0b001..Clears the corresponding DEBUG1 bit
 */
#define USBPHY_DEBUG1_CLR_USB2_REFBIAS_VBGADJ(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_CLR_USB2_REFBIAS_VBGADJ_SHIFT)) & USBPHY_DEBUG1_CLR_USB2_REFBIAS_VBGADJ_MASK)
#define USBPHY_DEBUG1_CLR_USB2_REFBIAS_TST_MASK  (0x600000U)
#define USBPHY_DEBUG1_CLR_USB2_REFBIAS_TST_SHIFT (21U)
/*! USB2_REFBIAS_TST - Bias current control
 *  0b00..No effect
 *  0b01..Clears the corresponding DEBUG1 bit
 */
#define USBPHY_DEBUG1_CLR_USB2_REFBIAS_TST(x)    (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_CLR_USB2_REFBIAS_TST_SHIFT)) & USBPHY_DEBUG1_CLR_USB2_REFBIAS_TST_MASK)
/*! @} */

/*! @name DEBUG1_TOG - UTMI Debug 1 Toggle */
/*! @{ */
#define USBPHY_DEBUG1_TOG_ENTAILADJVD_MASK       (0x6000U)
#define USBPHY_DEBUG1_TOG_ENTAILADJVD_SHIFT      (13U)
/*! ENTAILADJVD - Enable delay increment
 *  0b00..No effect
 *  0b01..Clears the corresponding DEBUG1 bit
 */
#define USBPHY_DEBUG1_TOG_ENTAILADJVD(x)         (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_TOG_ENTAILADJVD_SHIFT)) & USBPHY_DEBUG1_TOG_ENTAILADJVD_MASK)
#define USBPHY_DEBUG1_TOG_USB2_REFBIAS_VBGADJ_MASK (0x1C0000U)
#define USBPHY_DEBUG1_TOG_USB2_REFBIAS_VBGADJ_SHIFT (18U)
/*! USB2_REFBIAS_VBGADJ - Bandgap adjustment
 *  0b000..No effect
 *  0b001..Toggles the corresponding DEBUG1 bit
 */
#define USBPHY_DEBUG1_TOG_USB2_REFBIAS_VBGADJ(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_TOG_USB2_REFBIAS_VBGADJ_SHIFT)) & USBPHY_DEBUG1_TOG_USB2_REFBIAS_VBGADJ_MASK)
#define USBPHY_DEBUG1_TOG_USB2_REFBIAS_TST_MASK  (0x600000U)
#define USBPHY_DEBUG1_TOG_USB2_REFBIAS_TST_SHIFT (21U)
/*! USB2_REFBIAS_TST - Bias current control
 *  0b00..No effect
 *  0b01..Toggles the corresponding DEBUG1 bit
 */
#define USBPHY_DEBUG1_TOG_USB2_REFBIAS_TST(x)    (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_TOG_USB2_REFBIAS_TST_SHIFT)) & USBPHY_DEBUG1_TOG_USB2_REFBIAS_TST_MASK)
/*! @} */

/*! @name VERSION - Version */
/*! @{ */
#define USBPHY_VERSION_STEP_MASK                 (0xFFFFU)
#define USBPHY_VERSION_STEP_SHIFT                (0U)
/*! STEP - STEP
 */
#define USBPHY_VERSION_STEP(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_VERSION_STEP_SHIFT)) & USBPHY_VERSION_STEP_MASK)
#define USBPHY_VERSION_MINOR_MASK                (0xFF0000U)
#define USBPHY_VERSION_MINOR_SHIFT               (16U)
/*! MINOR - MINOR
 */
#define USBPHY_VERSION_MINOR(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_VERSION_MINOR_SHIFT)) & USBPHY_VERSION_MINOR_MASK)
#define USBPHY_VERSION_MAJOR_MASK                (0xFF000000U)
#define USBPHY_VERSION_MAJOR_SHIFT               (24U)
/*! MAJOR - MAJOR
 */
#define USBPHY_VERSION_MAJOR(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_VERSION_MAJOR_SHIFT)) & USBPHY_VERSION_MAJOR_MASK)
/*! @} */

/*! @name PLL_SIC - PLL Control/Status */
/*! @{ */
#define USBPHY_PLL_SIC_MISC2_CONTROL0_MASK       (0x20U)
#define USBPHY_PLL_SIC_MISC2_CONTROL0_SHIFT      (5U)
#define USBPHY_PLL_SIC_PLL_EN_USB_CLKS_MASK      (0x40U)
#define USBPHY_PLL_SIC_PLL_EN_USB_CLKS_SHIFT     (6U)
#define USBPHY_PLL_SIC_PLL_POWER_MASK            (0x1000U)
#define USBPHY_PLL_SIC_PLL_POWER_SHIFT           (12U)
#define USBPHY_PLL_SIC_PLL_ENABLE_MASK           (0x2000U)
#define USBPHY_PLL_SIC_PLL_ENABLE_SHIFT          (13U)
#define USBPHY_PLL_SIC_PLL_BYPASS_MASK           (0x10000U)
#define USBPHY_PLL_SIC_PLL_BYPASS_SHIFT          (16U)
#define USBPHY_PLL_SIC_REFBIAS_PWD_SEL_MASK      (0x80000U)
#define USBPHY_PLL_SIC_REFBIAS_PWD_SEL_SHIFT     (19U)
#define USBPHY_PLL_SIC_REFBIAS_PWD_MASK          (0x100000U)
#define USBPHY_PLL_SIC_REFBIAS_PWD_SHIFT         (20U)
#define USBPHY_PLL_SIC_PLL_REG_ENABLE_MASK       (0x200000U)
#define USBPHY_PLL_SIC_PLL_REG_ENABLE_SHIFT      (21U)
#define USBPHY_PLL_SIC_PLL_DIV_SEL_MASK          (0x1C00000U)
#define USBPHY_PLL_SIC_PLL_DIV_SEL_SHIFT         (22U)
/*! PLL_DIV_SEL - PLL Divider value
 */
#define USBPHY_PLL_SIC_PLL_DIV_SEL(x)            (((uint32_t)(((uint32_t)(x)) << USBPHY_PLL_SIC_PLL_DIV_SEL_SHIFT)) & USBPHY_PLL_SIC_PLL_DIV_SEL_MASK)
#define USBPHY_PLL_SIC_PLL_LOCK_MASK             (0x80000000U)
#define USBPHY_PLL_SIC_PLL_LOCK_SHIFT            (31U)
/*! @} */

/*! @name PLL_SIC_SET - PLL Control/Status Set */
/*! @{ */
#define USBPHY_PLL_SIC_SET_MISC2_CONTROL0_MASK   (0x20U)
#define USBPHY_PLL_SIC_SET_MISC2_CONTROL0_SHIFT  (5U)
#define USBPHY_PLL_SIC_SET_PLL_EN_USB_CLKS_MASK  (0x40U)
#define USBPHY_PLL_SIC_SET_PLL_EN_USB_CLKS_SHIFT (6U)
#define USBPHY_PLL_SIC_SET_PLL_POWER_MASK        (0x1000U)
#define USBPHY_PLL_SIC_SET_PLL_POWER_SHIFT       (12U)
#define USBPHY_PLL_SIC_SET_PLL_ENABLE_MASK       (0x2000U)
#define USBPHY_PLL_SIC_SET_PLL_ENABLE_SHIFT      (13U)
#define USBPHY_PLL_SIC_SET_PLL_BYPASS_MASK       (0x10000U)
#define USBPHY_PLL_SIC_SET_PLL_BYPASS_SHIFT      (16U)
#define USBPHY_PLL_SIC_SET_REFBIAS_PWD_SEL_MASK  (0x80000U)
#define USBPHY_PLL_SIC_SET_REFBIAS_PWD_SEL_SHIFT (19U)
#define USBPHY_PLL_SIC_SET_REFBIAS_PWD_MASK      (0x100000U)
#define USBPHY_PLL_SIC_SET_REFBIAS_PWD_SHIFT     (20U)
#define USBPHY_PLL_SIC_SET_PLL_REG_ENABLE_MASK   (0x200000U)
#define USBPHY_PLL_SIC_SET_PLL_REG_ENABLE_SHIFT  (21U)
#define USBPHY_PLL_SIC_SET_PLL_DIV_SEL_MASK      (0x1C00000U)
#define USBPHY_PLL_SIC_SET_PLL_DIV_SEL_SHIFT     (22U)
/*! PLL_DIV_SEL - PLL_DIV_SEL
 *  0b000..No effect
 *  0b001..Sets the corresponding bit
 */
#define USBPHY_PLL_SIC_SET_PLL_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << USBPHY_PLL_SIC_SET_PLL_DIV_SEL_SHIFT)) & USBPHY_PLL_SIC_SET_PLL_DIV_SEL_MASK)
#define USBPHY_PLL_SIC_SET_PLL_LOCK_MASK         (0x80000000U)
#define USBPHY_PLL_SIC_SET_PLL_LOCK_SHIFT        (31U)
/*! @} */

/*! @name PLL_SIC_CLR - PLL Control/Status Clear */
/*! @{ */
#define USBPHY_PLL_SIC_CLR_MISC2_CONTROL0_MASK   (0x20U)
#define USBPHY_PLL_SIC_CLR_MISC2_CONTROL0_SHIFT  (5U)
#define USBPHY_PLL_SIC_CLR_PLL_EN_USB_CLKS_MASK  (0x40U)
#define USBPHY_PLL_SIC_CLR_PLL_EN_USB_CLKS_SHIFT (6U)
#define USBPHY_PLL_SIC_CLR_PLL_POWER_MASK        (0x1000U)
#define USBPHY_PLL_SIC_CLR_PLL_POWER_SHIFT       (12U)
#define USBPHY_PLL_SIC_CLR_PLL_ENABLE_MASK       (0x2000U)
#define USBPHY_PLL_SIC_CLR_PLL_ENABLE_SHIFT      (13U)
#define USBPHY_PLL_SIC_CLR_PLL_BYPASS_MASK       (0x10000U)
#define USBPHY_PLL_SIC_CLR_PLL_BYPASS_SHIFT      (16U)
#define USBPHY_PLL_SIC_CLR_REFBIAS_PWD_SEL_MASK  (0x80000U)
#define USBPHY_PLL_SIC_CLR_REFBIAS_PWD_SEL_SHIFT (19U)
#define USBPHY_PLL_SIC_CLR_REFBIAS_PWD_MASK      (0x100000U)
#define USBPHY_PLL_SIC_CLR_REFBIAS_PWD_SHIFT     (20U)
#define USBPHY_PLL_SIC_CLR_PLL_REG_ENABLE_MASK   (0x200000U)
#define USBPHY_PLL_SIC_CLR_PLL_REG_ENABLE_SHIFT  (21U)
#define USBPHY_PLL_SIC_CLR_PLL_DIV_SEL_MASK      (0x1C00000U)
#define USBPHY_PLL_SIC_CLR_PLL_DIV_SEL_SHIFT     (22U)
/*! PLL_DIV_SEL - PLL_DIV_SEL
 *  0b000..No effect
 *  0b001..Clears the corresponding bit
 */
#define USBPHY_PLL_SIC_CLR_PLL_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << USBPHY_PLL_SIC_CLR_PLL_DIV_SEL_SHIFT)) & USBPHY_PLL_SIC_CLR_PLL_DIV_SEL_MASK)
#define USBPHY_PLL_SIC_CLR_PLL_LOCK_MASK         (0x80000000U)
#define USBPHY_PLL_SIC_CLR_PLL_LOCK_SHIFT        (31U)
/*! @} */

/*! @name PLL_SIC_TOG - PLL Control/Status Toggle */
/*! @{ */
#define USBPHY_PLL_SIC_TOG_MISC2_CONTROL0_MASK   (0x20U)
#define USBPHY_PLL_SIC_TOG_MISC2_CONTROL0_SHIFT  (5U)
#define USBPHY_PLL_SIC_TOG_PLL_EN_USB_CLKS_MASK  (0x40U)
#define USBPHY_PLL_SIC_TOG_PLL_EN_USB_CLKS_SHIFT (6U)
#define USBPHY_PLL_SIC_TOG_PLL_POWER_MASK        (0x1000U)
#define USBPHY_PLL_SIC_TOG_PLL_POWER_SHIFT       (12U)
#define USBPHY_PLL_SIC_TOG_PLL_ENABLE_MASK       (0x2000U)
#define USBPHY_PLL_SIC_TOG_PLL_ENABLE_SHIFT      (13U)
#define USBPHY_PLL_SIC_TOG_PLL_BYPASS_MASK       (0x10000U)
#define USBPHY_PLL_SIC_TOG_PLL_BYPASS_SHIFT      (16U)
#define USBPHY_PLL_SIC_TOG_REFBIAS_PWD_SEL_MASK  (0x80000U)
#define USBPHY_PLL_SIC_TOG_REFBIAS_PWD_SEL_SHIFT (19U)
#define USBPHY_PLL_SIC_TOG_REFBIAS_PWD_MASK      (0x100000U)
#define USBPHY_PLL_SIC_TOG_REFBIAS_PWD_SHIFT     (20U)
#define USBPHY_PLL_SIC_TOG_PLL_REG_ENABLE_MASK   (0x200000U)
#define USBPHY_PLL_SIC_TOG_PLL_REG_ENABLE_SHIFT  (21U)
#define USBPHY_PLL_SIC_TOG_PLL_DIV_SEL_MASK      (0x1C00000U)
#define USBPHY_PLL_SIC_TOG_PLL_DIV_SEL_SHIFT     (22U)
/*! PLL_DIV_SEL - PLL_DIV_SEL
 *  0b000..No effect
 *  0b001..Toggles the corresponding bit
 */
#define USBPHY_PLL_SIC_TOG_PLL_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << USBPHY_PLL_SIC_TOG_PLL_DIV_SEL_SHIFT)) & USBPHY_PLL_SIC_TOG_PLL_DIV_SEL_MASK)
#define USBPHY_PLL_SIC_TOG_PLL_LOCK_MASK         (0x80000000U)
#define USBPHY_PLL_SIC_TOG_PLL_LOCK_SHIFT        (31U)
/*! @} */

/*! @name USB1_VBUS_DETECT - VBUS detect */
/*! @{ */
#define USBPHY_USB1_VBUS_DETECT_VBUSVALID_THRESH_MASK (0x7U)
#define USBPHY_USB1_VBUS_DETECT_VBUSVALID_THRESH_SHIFT (0U)
/*! VBUSVALID_THRESH - VBUS comparator threshold
 */
#define USBPHY_USB1_VBUS_DETECT_VBUSVALID_THRESH(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_VBUS_DETECT_VBUSVALID_THRESH_SHIFT)) & USBPHY_USB1_VBUS_DETECT_VBUSVALID_THRESH_MASK)
#define USBPHY_USB1_VBUS_DETECT_VBUS_OVERRIDE_EN_MASK (0x8U)
#define USBPHY_USB1_VBUS_DETECT_VBUS_OVERRIDE_EN_SHIFT (3U)
#define USBPHY_USB1_VBUS_DETECT_SESSEND_OVERRIDE_MASK (0x10U)
#define USBPHY_USB1_VBUS_DETECT_SESSEND_OVERRIDE_SHIFT (4U)
#define USBPHY_USB1_VBUS_DETECT_BVALID_OVERRIDE_MASK (0x20U)
#define USBPHY_USB1_VBUS_DETECT_BVALID_OVERRIDE_SHIFT (5U)
#define USBPHY_USB1_VBUS_DETECT_AVALID_OVERRIDE_MASK (0x40U)
#define USBPHY_USB1_VBUS_DETECT_AVALID_OVERRIDE_SHIFT (6U)
#define USBPHY_USB1_VBUS_DETECT_VBUSVALID_OVERRIDE_MASK (0x80U)
#define USBPHY_USB1_VBUS_DETECT_VBUSVALID_OVERRIDE_SHIFT (7U)
#define USBPHY_USB1_VBUS_DETECT_VBUSVALID_SEL_MASK (0x100U)
#define USBPHY_USB1_VBUS_DETECT_VBUSVALID_SEL_SHIFT (8U)
#define USBPHY_USB1_VBUS_DETECT_VBUS_SOURCE_SEL_MASK (0x600U)
#define USBPHY_USB1_VBUS_DETECT_VBUS_SOURCE_SEL_SHIFT (9U)
/*! VBUS_SOURCE_SEL - Selects the source of the VBUS_VALID signal reported to the USB controller
 */
#define USBPHY_USB1_VBUS_DETECT_VBUS_SOURCE_SEL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_VBUS_DETECT_VBUS_SOURCE_SEL_SHIFT)) & USBPHY_USB1_VBUS_DETECT_VBUS_SOURCE_SEL_MASK)
#define USBPHY_USB1_VBUS_DETECT_VBUSVALID_TO_SESSVALID_MASK (0x40000U)
#define USBPHY_USB1_VBUS_DETECT_VBUSVALID_TO_SESSVALID_SHIFT (18U)
#define USBPHY_USB1_VBUS_DETECT_PWRUP_CMPS_MASK  (0x100000U)
#define USBPHY_USB1_VBUS_DETECT_PWRUP_CMPS_SHIFT (20U)
#define USBPHY_USB1_VBUS_DETECT_DISCHARGE_VBUS_MASK (0x4000000U)
#define USBPHY_USB1_VBUS_DETECT_DISCHARGE_VBUS_SHIFT (26U)
#define USBPHY_USB1_VBUS_DETECT_EN_CHARGER_RESISTOR_MASK (0x80000000U)
#define USBPHY_USB1_VBUS_DETECT_EN_CHARGER_RESISTOR_SHIFT (31U)
/*! @} */

/*! @name USB1_VBUS_DETECT_SET - VBUS detect Set */
/*! @{ */
#define USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_THRESH_MASK (0x7U)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_THRESH_SHIFT (0U)
/*! VBUSVALID_THRESH - VBUS comparator threshold
 *  0b000..No effect
 *  0b001..Sets the corresponding bit
 */
#define USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_THRESH(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_THRESH_SHIFT)) & USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_THRESH_MASK)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUS_OVERRIDE_EN_MASK (0x8U)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUS_OVERRIDE_EN_SHIFT (3U)
#define USBPHY_USB1_VBUS_DETECT_SET_SESSEND_OVERRIDE_MASK (0x10U)
#define USBPHY_USB1_VBUS_DETECT_SET_SESSEND_OVERRIDE_SHIFT (4U)
#define USBPHY_USB1_VBUS_DETECT_SET_BVALID_OVERRIDE_MASK (0x20U)
#define USBPHY_USB1_VBUS_DETECT_SET_BVALID_OVERRIDE_SHIFT (5U)
#define USBPHY_USB1_VBUS_DETECT_SET_AVALID_OVERRIDE_MASK (0x40U)
#define USBPHY_USB1_VBUS_DETECT_SET_AVALID_OVERRIDE_SHIFT (6U)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_OVERRIDE_MASK (0x80U)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_OVERRIDE_SHIFT (7U)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_SEL_MASK (0x100U)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_SEL_SHIFT (8U)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUS_SOURCE_SEL_MASK (0x600U)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUS_SOURCE_SEL_SHIFT (9U)
/*! VBUS_SOURCE_SEL - Selects the source of the VBUS_VALID signal reported to the USB controller
 */
#define USBPHY_USB1_VBUS_DETECT_SET_VBUS_SOURCE_SEL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_VBUS_DETECT_SET_VBUS_SOURCE_SEL_SHIFT)) & USBPHY_USB1_VBUS_DETECT_SET_VBUS_SOURCE_SEL_MASK)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_TO_SESSVALID_MASK (0x40000U)
#define USBPHY_USB1_VBUS_DETECT_SET_VBUSVALID_TO_SESSVALID_SHIFT (18U)
#define USBPHY_USB1_VBUS_DETECT_SET_PWRUP_CMPS_MASK (0x100000U)
#define USBPHY_USB1_VBUS_DETECT_SET_PWRUP_CMPS_SHIFT (20U)
#define USBPHY_USB1_VBUS_DETECT_SET_DISCHARGE_VBUS_MASK (0x4000000U)
#define USBPHY_USB1_VBUS_DETECT_SET_DISCHARGE_VBUS_SHIFT (26U)
#define USBPHY_USB1_VBUS_DETECT_SET_EN_CHARGER_RESISTOR_MASK (0x80000000U)
#define USBPHY_USB1_VBUS_DETECT_SET_EN_CHARGER_RESISTOR_SHIFT (31U)
/*! @} */

/*! @name USB1_VBUS_DETECT_CLR - VBUS detect Clear */
/*! @{ */
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_THRESH_MASK (0x7U)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_THRESH_SHIFT (0U)
/*! VBUSVALID_THRESH - VBUS comparator threshold
 *  0b000..No effect
 *  0b001..clears the corresponding bit
 */
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_THRESH(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_THRESH_SHIFT)) & USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_THRESH_MASK)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUS_OVERRIDE_EN_MASK (0x8U)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUS_OVERRIDE_EN_SHIFT (3U)
#define USBPHY_USB1_VBUS_DETECT_CLR_SESSEND_OVERRIDE_MASK (0x10U)
#define USBPHY_USB1_VBUS_DETECT_CLR_SESSEND_OVERRIDE_SHIFT (4U)
#define USBPHY_USB1_VBUS_DETECT_CLR_BVALID_OVERRIDE_MASK (0x20U)
#define USBPHY_USB1_VBUS_DETECT_CLR_BVALID_OVERRIDE_SHIFT (5U)
#define USBPHY_USB1_VBUS_DETECT_CLR_AVALID_OVERRIDE_MASK (0x40U)
#define USBPHY_USB1_VBUS_DETECT_CLR_AVALID_OVERRIDE_SHIFT (6U)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_OVERRIDE_MASK (0x80U)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_OVERRIDE_SHIFT (7U)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_SEL_MASK (0x100U)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_SEL_SHIFT (8U)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUS_SOURCE_SEL_MASK (0x600U)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUS_SOURCE_SEL_SHIFT (9U)
/*! VBUS_SOURCE_SEL - Selects the source of the VBUS_VALID signal reported to the USB controller
 */
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUS_SOURCE_SEL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_VBUS_DETECT_CLR_VBUS_SOURCE_SEL_SHIFT)) & USBPHY_USB1_VBUS_DETECT_CLR_VBUS_SOURCE_SEL_MASK)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_TO_SESSVALID_MASK (0x40000U)
#define USBPHY_USB1_VBUS_DETECT_CLR_VBUSVALID_TO_SESSVALID_SHIFT (18U)
#define USBPHY_USB1_VBUS_DETECT_CLR_PWRUP_CMPS_MASK (0x100000U)
#define USBPHY_USB1_VBUS_DETECT_CLR_PWRUP_CMPS_SHIFT (20U)
#define USBPHY_USB1_VBUS_DETECT_CLR_DISCHARGE_VBUS_MASK (0x4000000U)
#define USBPHY_USB1_VBUS_DETECT_CLR_DISCHARGE_VBUS_SHIFT (26U)
#define USBPHY_USB1_VBUS_DETECT_CLR_EN_CHARGER_RESISTOR_MASK (0x80000000U)
#define USBPHY_USB1_VBUS_DETECT_CLR_EN_CHARGER_RESISTOR_SHIFT (31U)
/*! @} */

/*! @name USB1_VBUS_DETECT_TOG - VBUS detect Toggle */
/*! @{ */
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_THRESH_MASK (0x7U)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_THRESH_SHIFT (0U)
/*! VBUSVALID_THRESH - VBUS comparator threshold
 *  0b000..No effect
 *  0b001..Toggles the corresponding bit
 */
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_THRESH(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_THRESH_SHIFT)) & USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_THRESH_MASK)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUS_OVERRIDE_EN_MASK (0x8U)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUS_OVERRIDE_EN_SHIFT (3U)
#define USBPHY_USB1_VBUS_DETECT_TOG_SESSEND_OVERRIDE_MASK (0x10U)
#define USBPHY_USB1_VBUS_DETECT_TOG_SESSEND_OVERRIDE_SHIFT (4U)
#define USBPHY_USB1_VBUS_DETECT_TOG_BVALID_OVERRIDE_MASK (0x20U)
#define USBPHY_USB1_VBUS_DETECT_TOG_BVALID_OVERRIDE_SHIFT (5U)
#define USBPHY_USB1_VBUS_DETECT_TOG_AVALID_OVERRIDE_MASK (0x40U)
#define USBPHY_USB1_VBUS_DETECT_TOG_AVALID_OVERRIDE_SHIFT (6U)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_OVERRIDE_MASK (0x80U)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_OVERRIDE_SHIFT (7U)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_SEL_MASK (0x100U)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_SEL_SHIFT (8U)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUS_SOURCE_SEL_MASK (0x600U)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUS_SOURCE_SEL_SHIFT (9U)
/*! VBUS_SOURCE_SEL - Selects the source of the VBUS_VALID signal reported to the USB controller
 */
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUS_SOURCE_SEL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_VBUS_DETECT_TOG_VBUS_SOURCE_SEL_SHIFT)) & USBPHY_USB1_VBUS_DETECT_TOG_VBUS_SOURCE_SEL_MASK)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_TO_SESSVALID_MASK (0x40000U)
#define USBPHY_USB1_VBUS_DETECT_TOG_VBUSVALID_TO_SESSVALID_SHIFT (18U)
#define USBPHY_USB1_VBUS_DETECT_TOG_PWRUP_CMPS_MASK (0x100000U)
#define USBPHY_USB1_VBUS_DETECT_TOG_PWRUP_CMPS_SHIFT (20U)
#define USBPHY_USB1_VBUS_DETECT_TOG_DISCHARGE_VBUS_MASK (0x4000000U)
#define USBPHY_USB1_VBUS_DETECT_TOG_DISCHARGE_VBUS_SHIFT (26U)
#define USBPHY_USB1_VBUS_DETECT_TOG_EN_CHARGER_RESISTOR_MASK (0x80000000U)
#define USBPHY_USB1_VBUS_DETECT_TOG_EN_CHARGER_RESISTOR_SHIFT (31U)
/*! @} */

/*! @name USB1_VBUS_DET_STAT - VBUS Detect Status */
/*! @{ */
#define USBPHY_USB1_VBUS_DET_STAT_SESSEND_MASK   (0x1U)
#define USBPHY_USB1_VBUS_DET_STAT_SESSEND_SHIFT  (0U)
#define USBPHY_USB1_VBUS_DET_STAT_BVALID_MASK    (0x2U)
#define USBPHY_USB1_VBUS_DET_STAT_BVALID_SHIFT   (1U)
#define USBPHY_USB1_VBUS_DET_STAT_AVALID_MASK    (0x4U)
#define USBPHY_USB1_VBUS_DET_STAT_AVALID_SHIFT   (2U)
#define USBPHY_USB1_VBUS_DET_STAT_VBUS_VALID_MASK (0x8U)
#define USBPHY_USB1_VBUS_DET_STAT_VBUS_VALID_SHIFT (3U)
#define USBPHY_USB1_VBUS_DET_STAT_VBUS_VALID_3V_MASK (0x10U)
#define USBPHY_USB1_VBUS_DET_STAT_VBUS_VALID_3V_SHIFT (4U)
/*! @} */

/*! @name USB1_VBUS_DET_STAT_SET - VBUS Detect Status Set */
/*! @{ */
#define USBPHY_USB1_VBUS_DET_STAT_SET_SESSEND_MASK (0x1U)
#define USBPHY_USB1_VBUS_DET_STAT_SET_SESSEND_SHIFT (0U)
#define USBPHY_USB1_VBUS_DET_STAT_SET_BVALID_MASK (0x2U)
#define USBPHY_USB1_VBUS_DET_STAT_SET_BVALID_SHIFT (1U)
#define USBPHY_USB1_VBUS_DET_STAT_SET_AVALID_MASK (0x4U)
#define USBPHY_USB1_VBUS_DET_STAT_SET_AVALID_SHIFT (2U)
#define USBPHY_USB1_VBUS_DET_STAT_SET_VBUS_VALID_MASK (0x8U)
#define USBPHY_USB1_VBUS_DET_STAT_SET_VBUS_VALID_SHIFT (3U)
#define USBPHY_USB1_VBUS_DET_STAT_SET_VBUS_VALID_3V_MASK (0x10U)
#define USBPHY_USB1_VBUS_DET_STAT_SET_VBUS_VALID_3V_SHIFT (4U)
/*! @} */

/*! @name USB1_VBUS_DET_STAT_CLR - VBUS Detect Status Clear */
/*! @{ */
#define USBPHY_USB1_VBUS_DET_STAT_CLR_SESSEND_MASK (0x1U)
#define USBPHY_USB1_VBUS_DET_STAT_CLR_SESSEND_SHIFT (0U)
#define USBPHY_USB1_VBUS_DET_STAT_CLR_BVALID_MASK (0x2U)
#define USBPHY_USB1_VBUS_DET_STAT_CLR_BVALID_SHIFT (1U)
#define USBPHY_USB1_VBUS_DET_STAT_CLR_AVALID_MASK (0x4U)
#define USBPHY_USB1_VBUS_DET_STAT_CLR_AVALID_SHIFT (2U)
#define USBPHY_USB1_VBUS_DET_STAT_CLR_VBUS_VALID_MASK (0x8U)
#define USBPHY_USB1_VBUS_DET_STAT_CLR_VBUS_VALID_SHIFT (3U)
#define USBPHY_USB1_VBUS_DET_STAT_CLR_VBUS_VALID_3V_MASK (0x10U)
#define USBPHY_USB1_VBUS_DET_STAT_CLR_VBUS_VALID_3V_SHIFT (4U)
/*! @} */

/*! @name USB1_VBUS_DET_STAT_TOG - VBUS Detect Status Toggle */
/*! @{ */
#define USBPHY_USB1_VBUS_DET_STAT_TOG_SESSEND_MASK (0x1U)
#define USBPHY_USB1_VBUS_DET_STAT_TOG_SESSEND_SHIFT (0U)
#define USBPHY_USB1_VBUS_DET_STAT_TOG_BVALID_MASK (0x2U)
#define USBPHY_USB1_VBUS_DET_STAT_TOG_BVALID_SHIFT (1U)
#define USBPHY_USB1_VBUS_DET_STAT_TOG_AVALID_MASK (0x4U)
#define USBPHY_USB1_VBUS_DET_STAT_TOG_AVALID_SHIFT (2U)
#define USBPHY_USB1_VBUS_DET_STAT_TOG_VBUS_VALID_MASK (0x8U)
#define USBPHY_USB1_VBUS_DET_STAT_TOG_VBUS_VALID_SHIFT (3U)
#define USBPHY_USB1_VBUS_DET_STAT_TOG_VBUS_VALID_3V_MASK (0x10U)
#define USBPHY_USB1_VBUS_DET_STAT_TOG_VBUS_VALID_3V_SHIFT (4U)
/*! @} */

/*! @name USB1_CHRG_DETECT - Charger Detect Control */
/*! @{ */
#define USBPHY_USB1_CHRG_DETECT_PULLUP_DP_MASK   (0x4U)
#define USBPHY_USB1_CHRG_DETECT_PULLUP_DP_SHIFT  (2U)
#define USBPHY_USB1_CHRG_DETECT_PULLUP_DP_HIGH_IMP_MASK (0x8U)
#define USBPHY_USB1_CHRG_DETECT_PULLUP_DP_HIGH_IMP_SHIFT (3U)
#define USBPHY_USB1_CHRG_DETECT_BGR_IBIAS_MASK   (0x800000U)
#define USBPHY_USB1_CHRG_DETECT_BGR_IBIAS_SHIFT  (23U)
/*! @} */

/*! @name USB1_CHRG_DETECT_SET - Charger Detect Control Set */
/*! @{ */
#define USBPHY_USB1_CHRG_DETECT_SET_PULLUP_DP_MASK (0x4U)
#define USBPHY_USB1_CHRG_DETECT_SET_PULLUP_DP_SHIFT (2U)
#define USBPHY_USB1_CHRG_DETECT_SET_PULLUP_DP_HIGH_IMP_MASK (0x8U)
#define USBPHY_USB1_CHRG_DETECT_SET_PULLUP_DP_HIGH_IMP_SHIFT (3U)
#define USBPHY_USB1_CHRG_DETECT_SET_BGR_IBIAS_MASK (0x800000U)
#define USBPHY_USB1_CHRG_DETECT_SET_BGR_IBIAS_SHIFT (23U)
/*! @} */

/*! @name USB1_CHRG_DETECT_CLR - Charger Detect Control Clear */
/*! @{ */
#define USBPHY_USB1_CHRG_DETECT_CLR_PULLUP_DP_MASK (0x4U)
#define USBPHY_USB1_CHRG_DETECT_CLR_PULLUP_DP_SHIFT (2U)
#define USBPHY_USB1_CHRG_DETECT_CLR_PULLUP_DP_HIGH_IMP_MASK (0x8U)
#define USBPHY_USB1_CHRG_DETECT_CLR_PULLUP_DP_HIGH_IMP_SHIFT (3U)
#define USBPHY_USB1_CHRG_DETECT_CLR_BGR_IBIAS_MASK (0x800000U)
#define USBPHY_USB1_CHRG_DETECT_CLR_BGR_IBIAS_SHIFT (23U)
/*! @} */

/*! @name USB1_CHRG_DETECT_TOG - Charger Detect Control Toggle */
/*! @{ */
#define USBPHY_USB1_CHRG_DETECT_TOG_PULLUP_DP_MASK (0x4U)
#define USBPHY_USB1_CHRG_DETECT_TOG_PULLUP_DP_SHIFT (2U)
#define USBPHY_USB1_CHRG_DETECT_TOG_PULLUP_DP_HIGH_IMP_MASK (0x8U)
#define USBPHY_USB1_CHRG_DETECT_TOG_PULLUP_DP_HIGH_IMP_SHIFT (3U)
#define USBPHY_USB1_CHRG_DETECT_TOG_BGR_IBIAS_MASK (0x800000U)
#define USBPHY_USB1_CHRG_DETECT_TOG_BGR_IBIAS_SHIFT (23U)
/*! @} */

/*! @name USB1_CHRG_DET_STAT - Charge Detect Status */
/*! @{ */
#define USBPHY_USB1_CHRG_DET_STAT_PLUG_CONTACT_MASK (0x1U)
#define USBPHY_USB1_CHRG_DET_STAT_PLUG_CONTACT_SHIFT (0U)
#define USBPHY_USB1_CHRG_DET_STAT_CHRG_DETECTED_MASK (0x2U)
#define USBPHY_USB1_CHRG_DET_STAT_CHRG_DETECTED_SHIFT (1U)
#define USBPHY_USB1_CHRG_DET_STAT_DM_STATE_MASK  (0x4U)
#define USBPHY_USB1_CHRG_DET_STAT_DM_STATE_SHIFT (2U)
#define USBPHY_USB1_CHRG_DET_STAT_DP_STATE_MASK  (0x8U)
#define USBPHY_USB1_CHRG_DET_STAT_DP_STATE_SHIFT (3U)
#define USBPHY_USB1_CHRG_DET_STAT_SECDET_DCP_MASK (0x10U)
#define USBPHY_USB1_CHRG_DET_STAT_SECDET_DCP_SHIFT (4U)
/*! @} */

/*! @name ANACTRL - Analog Control */
/*! @{ */
#define USBPHY_ANACTRL_DEV_PULLDOWN_MASK         (0x400U)
#define USBPHY_ANACTRL_DEV_PULLDOWN_SHIFT        (10U)
/*! @} */

/*! @name ANACTRL_SET - Analog Control Set */
/*! @{ */
#define USBPHY_ANACTRL_SET_DEV_PULLDOWN_MASK     (0x400U)
#define USBPHY_ANACTRL_SET_DEV_PULLDOWN_SHIFT    (10U)
/*! @} */

/*! @name ANACTRL_CLR - Analog Control Clear */
/*! @{ */
#define USBPHY_ANACTRL_CLR_DEV_PULLDOWN_MASK     (0x400U)
#define USBPHY_ANACTRL_CLR_DEV_PULLDOWN_SHIFT    (10U)
/*! @} */

/*! @name ANACTRL_TOG - Analog Control Toggle */
/*! @{ */
#define USBPHY_ANACTRL_TOG_DEV_PULLDOWN_MASK     (0x400U)
#define USBPHY_ANACTRL_TOG_DEV_PULLDOWN_SHIFT    (10U)
/*! @} */

/*! @name USB1_LOOPBACK - USB PHY Loopback Control/Status */
/*! @{ */
#define USBPHY_USB1_LOOPBACK_UTMI_TESTSTART_MASK (0x1U)
#define USBPHY_USB1_LOOPBACK_UTMI_TESTSTART_SHIFT (0U)
#define USBPHY_USB1_LOOPBACK_UTMI_DIG_TST0_MASK  (0x2U)
#define USBPHY_USB1_LOOPBACK_UTMI_DIG_TST0_SHIFT (1U)
#define USBPHY_USB1_LOOPBACK_UTMI_DIG_TST1_MASK  (0x4U)
#define USBPHY_USB1_LOOPBACK_UTMI_DIG_TST1_SHIFT (2U)
#define USBPHY_USB1_LOOPBACK_TSTI_TX_HS_MODE_MASK (0x8U)
#define USBPHY_USB1_LOOPBACK_TSTI_TX_HS_MODE_SHIFT (3U)
#define USBPHY_USB1_LOOPBACK_TSTI_TX_LS_MODE_MASK (0x10U)
#define USBPHY_USB1_LOOPBACK_TSTI_TX_LS_MODE_SHIFT (4U)
#define USBPHY_USB1_LOOPBACK_TSTI_TX_EN_MASK     (0x20U)
#define USBPHY_USB1_LOOPBACK_TSTI_TX_EN_SHIFT    (5U)
#define USBPHY_USB1_LOOPBACK_TSTI_TX_HIZ_MASK    (0x40U)
#define USBPHY_USB1_LOOPBACK_TSTI_TX_HIZ_SHIFT   (6U)
#define USBPHY_USB1_LOOPBACK_UTMO_DIG_TST0_MASK  (0x80U)
#define USBPHY_USB1_LOOPBACK_UTMO_DIG_TST0_SHIFT (7U)
#define USBPHY_USB1_LOOPBACK_UTMO_DIG_TST1_MASK  (0x100U)
#define USBPHY_USB1_LOOPBACK_UTMO_DIG_TST1_SHIFT (8U)
#define USBPHY_USB1_LOOPBACK_TSTI_HSFS_MODE_EN_MASK (0x8000U)
#define USBPHY_USB1_LOOPBACK_TSTI_HSFS_MODE_EN_SHIFT (15U)
#define USBPHY_USB1_LOOPBACK_TSTPKT_MASK         (0xFF0000U)
#define USBPHY_USB1_LOOPBACK_TSTPKT_SHIFT        (16U)
/*! TSTPKT - Test packet
 */
#define USBPHY_USB1_LOOPBACK_TSTPKT(x)           (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_TSTPKT_SHIFT)) & USBPHY_USB1_LOOPBACK_TSTPKT_MASK)
/*! @} */

/*! @name USB1_LOOPBACK_SET - USB PHY Loopback Control/Status Set */
/*! @{ */
#define USBPHY_USB1_LOOPBACK_SET_UTMI_TESTSTART_MASK (0x1U)
#define USBPHY_USB1_LOOPBACK_SET_UTMI_TESTSTART_SHIFT (0U)
#define USBPHY_USB1_LOOPBACK_SET_UTMI_DIG_TST0_MASK (0x2U)
#define USBPHY_USB1_LOOPBACK_SET_UTMI_DIG_TST0_SHIFT (1U)
#define USBPHY_USB1_LOOPBACK_SET_UTMI_DIG_TST1_MASK (0x4U)
#define USBPHY_USB1_LOOPBACK_SET_UTMI_DIG_TST1_SHIFT (2U)
#define USBPHY_USB1_LOOPBACK_SET_TSTI_TX_HS_MODE_MASK (0x8U)
#define USBPHY_USB1_LOOPBACK_SET_TSTI_TX_HS_MODE_SHIFT (3U)
#define USBPHY_USB1_LOOPBACK_SET_TSTI_TX_LS_MODE_MASK (0x10U)
#define USBPHY_USB1_LOOPBACK_SET_TSTI_TX_LS_MODE_SHIFT (4U)
#define USBPHY_USB1_LOOPBACK_SET_TSTI_TX_EN_MASK (0x20U)
#define USBPHY_USB1_LOOPBACK_SET_TSTI_TX_EN_SHIFT (5U)
#define USBPHY_USB1_LOOPBACK_SET_TSTI_TX_HIZ_MASK (0x40U)
#define USBPHY_USB1_LOOPBACK_SET_TSTI_TX_HIZ_SHIFT (6U)
#define USBPHY_USB1_LOOPBACK_SET_UTMO_DIG_TST0_MASK (0x80U)
#define USBPHY_USB1_LOOPBACK_SET_UTMO_DIG_TST0_SHIFT (7U)
#define USBPHY_USB1_LOOPBACK_SET_UTMO_DIG_TST1_MASK (0x100U)
#define USBPHY_USB1_LOOPBACK_SET_UTMO_DIG_TST1_SHIFT (8U)
#define USBPHY_USB1_LOOPBACK_SET_TSTI_HSFS_MODE_EN_MASK (0x8000U)
#define USBPHY_USB1_LOOPBACK_SET_TSTI_HSFS_MODE_EN_SHIFT (15U)
#define USBPHY_USB1_LOOPBACK_SET_TSTPKT_MASK     (0xFF0000U)
#define USBPHY_USB1_LOOPBACK_SET_TSTPKT_SHIFT    (16U)
/*! TSTPKT - Test packet
 *  0b00000000..No effect
 *  0b00000001..Sets the corresponding bit
 */
#define USBPHY_USB1_LOOPBACK_SET_TSTPKT(x)       (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_SET_TSTPKT_SHIFT)) & USBPHY_USB1_LOOPBACK_SET_TSTPKT_MASK)
/*! @} */

/*! @name USB1_LOOPBACK_CLR - USB PHY Loopback Control/Status Clear */
/*! @{ */
#define USBPHY_USB1_LOOPBACK_CLR_UTMI_TESTSTART_MASK (0x1U)
#define USBPHY_USB1_LOOPBACK_CLR_UTMI_TESTSTART_SHIFT (0U)
#define USBPHY_USB1_LOOPBACK_CLR_UTMI_DIG_TST0_MASK (0x2U)
#define USBPHY_USB1_LOOPBACK_CLR_UTMI_DIG_TST0_SHIFT (1U)
#define USBPHY_USB1_LOOPBACK_CLR_UTMI_DIG_TST1_MASK (0x4U)
#define USBPHY_USB1_LOOPBACK_CLR_UTMI_DIG_TST1_SHIFT (2U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTI_TX_HS_MODE_MASK (0x8U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTI_TX_HS_MODE_SHIFT (3U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTI_TX_LS_MODE_MASK (0x10U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTI_TX_LS_MODE_SHIFT (4U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTI_TX_EN_MASK (0x20U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTI_TX_EN_SHIFT (5U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTI_TX_HIZ_MASK (0x40U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTI_TX_HIZ_SHIFT (6U)
#define USBPHY_USB1_LOOPBACK_CLR_UTMO_DIG_TST0_MASK (0x80U)
#define USBPHY_USB1_LOOPBACK_CLR_UTMO_DIG_TST0_SHIFT (7U)
#define USBPHY_USB1_LOOPBACK_CLR_UTMO_DIG_TST1_MASK (0x100U)
#define USBPHY_USB1_LOOPBACK_CLR_UTMO_DIG_TST1_SHIFT (8U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTI_HSFS_MODE_EN_MASK (0x8000U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTI_HSFS_MODE_EN_SHIFT (15U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTPKT_MASK     (0xFF0000U)
#define USBPHY_USB1_LOOPBACK_CLR_TSTPKT_SHIFT    (16U)
/*! TSTPKT - Test packet
 *  0b00000000..No effect
 *  0b00000001..Clears the corresponding bit
 */
#define USBPHY_USB1_LOOPBACK_CLR_TSTPKT(x)       (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_CLR_TSTPKT_SHIFT)) & USBPHY_USB1_LOOPBACK_CLR_TSTPKT_MASK)
/*! @} */

/*! @name USB1_LOOPBACK_TOG - USB PHY Loopback Control/Status Toggle */
/*! @{ */
#define USBPHY_USB1_LOOPBACK_TOG_UTMI_TESTSTART_MASK (0x1U)
#define USBPHY_USB1_LOOPBACK_TOG_UTMI_TESTSTART_SHIFT (0U)
#define USBPHY_USB1_LOOPBACK_TOG_UTMI_DIG_TST0_MASK (0x2U)
#define USBPHY_USB1_LOOPBACK_TOG_UTMI_DIG_TST0_SHIFT (1U)
#define USBPHY_USB1_LOOPBACK_TOG_UTMI_DIG_TST1_MASK (0x4U)
#define USBPHY_USB1_LOOPBACK_TOG_UTMI_DIG_TST1_SHIFT (2U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTI_TX_HS_MODE_MASK (0x8U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTI_TX_HS_MODE_SHIFT (3U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTI_TX_LS_MODE_MASK (0x10U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTI_TX_LS_MODE_SHIFT (4U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTI_TX_EN_MASK (0x20U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTI_TX_EN_SHIFT (5U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTI_TX_HIZ_MASK (0x40U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTI_TX_HIZ_SHIFT (6U)
#define USBPHY_USB1_LOOPBACK_TOG_UTMO_DIG_TST0_MASK (0x80U)
#define USBPHY_USB1_LOOPBACK_TOG_UTMO_DIG_TST0_SHIFT (7U)
#define USBPHY_USB1_LOOPBACK_TOG_UTMO_DIG_TST1_MASK (0x100U)
#define USBPHY_USB1_LOOPBACK_TOG_UTMO_DIG_TST1_SHIFT (8U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTI_HSFS_MODE_EN_MASK (0x8000U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTI_HSFS_MODE_EN_SHIFT (15U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTPKT_MASK     (0xFF0000U)
#define USBPHY_USB1_LOOPBACK_TOG_TSTPKT_SHIFT    (16U)
/*! TSTPKT - Test packet
 *  0b00000000..No effect
 *  0b00000001..Toggles the corresponding bit
 */
#define USBPHY_USB1_LOOPBACK_TOG_TSTPKT(x)       (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_TOG_TSTPKT_SHIFT)) & USBPHY_USB1_LOOPBACK_TOG_TSTPKT_MASK)
/*! @} */

/*! @name USB1_LOOPBACK_HSFSCNT - Loopback count register. */
/*! @{ */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TSTI_HS_NUMBER_MASK (0xFFFFU)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TSTI_HS_NUMBER_SHIFT (0U)
/*! TSTI_HS_NUMBER - USB loopback test HS CNT.
 */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TSTI_HS_NUMBER(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_HSFSCNT_TSTI_HS_NUMBER_SHIFT)) & USBPHY_USB1_LOOPBACK_HSFSCNT_TSTI_HS_NUMBER_MASK)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TSTI_FS_NUMBER_MASK (0xFFFF0000U)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TSTI_FS_NUMBER_SHIFT (16U)
/*! TSTI_FS_NUMBER - USB loopback test FS CNT.
 */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TSTI_FS_NUMBER(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_HSFSCNT_TSTI_FS_NUMBER_SHIFT)) & USBPHY_USB1_LOOPBACK_HSFSCNT_TSTI_FS_NUMBER_MASK)
/*! @} */

/*! @name USB1_LOOPBACK_HSFSCNT_SET - USB PHY Loopback Packet Number Select Set */
/*! @{ */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_SET_TSTI_HS_NUMBER_MASK (0xFFFFU)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_SET_TSTI_HS_NUMBER_SHIFT (0U)
/*! TSTI_HS_NUMBER - USB loopback test HS CNT.
 *  0b0000000000000000..No effect
 *  0b0000000000000001..Sets the corresponding bit
 */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_SET_TSTI_HS_NUMBER(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_HSFSCNT_SET_TSTI_HS_NUMBER_SHIFT)) & USBPHY_USB1_LOOPBACK_HSFSCNT_SET_TSTI_HS_NUMBER_MASK)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_SET_TSTI_FS_NUMBER_MASK (0xFFFF0000U)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_SET_TSTI_FS_NUMBER_SHIFT (16U)
/*! TSTI_FS_NUMBER - USB loopback test FS CNT.
 *  0b0000000000000000..No effect
 *  0b0000000000000001..Sets the corresponding bit
 */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_SET_TSTI_FS_NUMBER(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_HSFSCNT_SET_TSTI_FS_NUMBER_SHIFT)) & USBPHY_USB1_LOOPBACK_HSFSCNT_SET_TSTI_FS_NUMBER_MASK)
/*! @} */

/*! @name USB1_LOOPBACK_HSFSCNT_CLR - USB PHY Loopback Packet Number Select Clear */
/*! @{ */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_TSTI_HS_NUMBER_MASK (0xFFFFU)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_TSTI_HS_NUMBER_SHIFT (0U)
/*! TSTI_HS_NUMBER - USB loopback test HS CNT.
 *  0b0000000000000000..No effect
 *  0b0000000000000001..Clears the corresponding bit
 */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_TSTI_HS_NUMBER(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_TSTI_HS_NUMBER_SHIFT)) & USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_TSTI_HS_NUMBER_MASK)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_TSTI_FS_NUMBER_MASK (0xFFFF0000U)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_TSTI_FS_NUMBER_SHIFT (16U)
/*! TSTI_FS_NUMBER - USB loopback test FS CNT.
 *  0b0000000000000000..No effect
 *  0b0000000000000001..Clears the corresponding bit
 */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_TSTI_FS_NUMBER(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_TSTI_FS_NUMBER_SHIFT)) & USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_TSTI_FS_NUMBER_MASK)
/*! @} */

/*! @name USB1_LOOPBACK_HSFSCNT_TOG - USB PHY Loopback Packet Number Select Toggle */
/*! @{ */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_TSTI_HS_NUMBER_MASK (0xFFFFU)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_TSTI_HS_NUMBER_SHIFT (0U)
/*! TSTI_HS_NUMBER - USB loopback test HS CNT.
 *  0b0000000000000000..No effect
 *  0b0000000000000001..Toggles the corresponding bit
 */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_TSTI_HS_NUMBER(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_TSTI_HS_NUMBER_SHIFT)) & USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_TSTI_HS_NUMBER_MASK)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_TSTI_FS_NUMBER_MASK (0xFFFF0000U)
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_TSTI_FS_NUMBER_SHIFT (16U)
/*! TSTI_FS_NUMBER - USB loopback test FS CNT.
 *  0b0000000000000000..No effect
 *  0b0000000000000001..Toggles the corresponding bit
 */
#define USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_TSTI_FS_NUMBER(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_TSTI_FS_NUMBER_SHIFT)) & USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_TSTI_FS_NUMBER_MASK)
/*! @} */

/*! @name TRIM_OVERRIDE_EN - Trim Override Enable */
/*! @{ */
#define USBPHY_TRIM_OVERRIDE_EN_DIV_SEL_OVERRIDE_MASK (0x1U)
#define USBPHY_TRIM_OVERRIDE_EN_DIV_SEL_OVERRIDE_SHIFT (0U)
#define USBPHY_TRIM_OVERRIDE_EN_ENV_TAIL_ADJ_VD_OVERRIDE_MASK (0x2U)
#define USBPHY_TRIM_OVERRIDE_EN_ENV_TAIL_ADJ_VD_OVERRIDE_SHIFT (1U)
#define USBPHY_TRIM_OVERRIDE_EN_TX_D_CAL_OVERRIDE_MASK (0x4U)
#define USBPHY_TRIM_OVERRIDE_EN_TX_D_CAL_OVERRIDE_SHIFT (2U)
#define USBPHY_TRIM_OVERRIDE_EN_TX_CAL45DP_OVERRIDE_MASK (0x8U)
#define USBPHY_TRIM_OVERRIDE_EN_TX_CAL45DP_OVERRIDE_SHIFT (3U)
#define USBPHY_TRIM_OVERRIDE_EN_TX_CAL45DM_OVERRIDE_MASK (0x10U)
#define USBPHY_TRIM_OVERRIDE_EN_TX_CAL45DM_OVERRIDE_SHIFT (4U)
#define USBPHY_TRIM_OVERRIDE_EN_REFBIAS_VBGADJ_OVERRIDE_MASK (0x20U)
#define USBPHY_TRIM_OVERRIDE_EN_REFBIAS_VBGADJ_OVERRIDE_SHIFT (5U)
#define USBPHY_TRIM_OVERRIDE_EN_REFBIAS_TST_OVERRIDE_MASK (0x40U)
#define USBPHY_TRIM_OVERRIDE_EN_REFBIAS_TST_OVERRIDE_SHIFT (6U)
#define USBPHY_TRIM_OVERRIDE_EN_USB2_REFBIAS_VBGADJ_MASK (0x1C00U)
#define USBPHY_TRIM_OVERRIDE_EN_USB2_REFBIAS_VBGADJ_SHIFT (10U)
/*! USB2_REFBIAS_VBGADJ - Adjustment bits for bandgap
 */
#define USBPHY_TRIM_OVERRIDE_EN_USB2_REFBIAS_VBGADJ(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_USB2_REFBIAS_VBGADJ_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_USB2_REFBIAS_VBGADJ_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_USB2_REFBIAS_TST_MASK (0x6000U)
#define USBPHY_TRIM_OVERRIDE_EN_USB2_REFBIAS_TST_SHIFT (13U)
/*! USB2_REFBIAS_TST - Bias current control for usb2_phy and usb_PLL
 */
#define USBPHY_TRIM_OVERRIDE_EN_USB2_REFBIAS_TST(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_USB2_REFBIAS_TST_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_USB2_REFBIAS_TST_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_PLL_CTRL0_DIV_SEL_MASK (0x38000U)
#define USBPHY_TRIM_OVERRIDE_EN_PLL_CTRL0_DIV_SEL_SHIFT (15U)
/*! PLL_CTRL0_DIV_SEL - IFR value of PLL_DIV_SEL.
 */
#define USBPHY_TRIM_OVERRIDE_EN_PLL_CTRL0_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_PLL_CTRL0_DIV_SEL_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_PLL_CTRL0_DIV_SEL_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_USB_REG_ENV_TAIL_ADJ_VD_MASK (0xC0000U)
#define USBPHY_TRIM_OVERRIDE_EN_USB_REG_ENV_TAIL_ADJ_VD_SHIFT (18U)
/*! USB_REG_ENV_TAIL_ADJ_VD - IFR value of ENV_TAIL_ADJ.
 */
#define USBPHY_TRIM_OVERRIDE_EN_USB_REG_ENV_TAIL_ADJ_VD(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_USB_REG_ENV_TAIL_ADJ_VD_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_USB_REG_ENV_TAIL_ADJ_VD_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_D_CAL_MASK (0xF00000U)
#define USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_D_CAL_SHIFT (20U)
/*! USBPHY_TX_D_CAL - IFR value of TX_D_CAL.
 */
#define USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_D_CAL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_D_CAL_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_D_CAL_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_CAL45DP_MASK (0xF000000U)
#define USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_CAL45DP_SHIFT (24U)
/*! USBPHY_TX_CAL45DP - IFR value of TX_CAL45DP.
 */
#define USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_CAL45DP(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_CAL45DP_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_CAL45DP_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_CAL45DN_MASK (0xF0000000U)
#define USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_CAL45DN_SHIFT (28U)
/*! USBPHY_TX_CAL45DN - IFR value of TX_CAL45DM.
 */
#define USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_CAL45DN(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_CAL45DN_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_USBPHY_TX_CAL45DN_MASK)
/*! @} */

/*! @name TRIM_OVERRIDE_EN_SET - Trim Set */
/*! @{ */
#define USBPHY_TRIM_OVERRIDE_EN_SET_DIV_SEL_OVERRIDE_MASK (0x1U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_DIV_SEL_OVERRIDE_SHIFT (0U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_ENV_TAIL_ADJ_VD_OVERRIDE_MASK (0x2U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_ENV_TAIL_ADJ_VD_OVERRIDE_SHIFT (1U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_TX_D_CAL_OVERRIDE_MASK (0x4U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_TX_D_CAL_OVERRIDE_SHIFT (2U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_TX_CAL45DP_OVERRIDE_MASK (0x8U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_TX_CAL45DP_OVERRIDE_SHIFT (3U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_TX_CAL45DM_OVERRIDE_MASK (0x10U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_TX_CAL45DM_OVERRIDE_SHIFT (4U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_REFBIAS_VBGADJ_OVERRIDE_MASK (0x20U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_REFBIAS_VBGADJ_OVERRIDE_SHIFT (5U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_REFBIAS_TST_OVERRIDE_MASK (0x40U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_REFBIAS_TST_OVERRIDE_SHIFT (6U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USB2_REFBIAS_VBGADJ_MASK (0x1C00U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USB2_REFBIAS_VBGADJ_SHIFT (10U)
/*! USB2_REFBIAS_VBGADJ - Adjustment bits for bandgap
 *  0b000..No effect
 *  0b001..Sets the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_SET_USB2_REFBIAS_VBGADJ(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_SET_USB2_REFBIAS_VBGADJ_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_SET_USB2_REFBIAS_VBGADJ_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USB2_REFBIAS_TST_MASK (0x6000U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USB2_REFBIAS_TST_SHIFT (13U)
/*! USB2_REFBIAS_TST - Bias current control for usb2_phy and usb_PLL
 *  0b00..No effect
 *  0b01..Sets the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_SET_USB2_REFBIAS_TST(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_SET_USB2_REFBIAS_TST_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_SET_USB2_REFBIAS_TST_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_SET_PLL_CTRL0_DIV_SEL_MASK (0x38000U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_PLL_CTRL0_DIV_SEL_SHIFT (15U)
/*! PLL_CTRL0_DIV_SEL - IFR value of PLL_DIV_SEL.
 *  0b000..No effect
 *  0b001..Sets the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_SET_PLL_CTRL0_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_SET_PLL_CTRL0_DIV_SEL_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_SET_PLL_CTRL0_DIV_SEL_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USB_REG_ENV_TAIL_ADJ_VD_MASK (0xC0000U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USB_REG_ENV_TAIL_ADJ_VD_SHIFT (18U)
/*! USB_REG_ENV_TAIL_ADJ_VD - IFR value of ENV_TAIL_ADJ.
 *  0b00..No effect
 *  0b01..Sets the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_SET_USB_REG_ENV_TAIL_ADJ_VD(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_SET_USB_REG_ENV_TAIL_ADJ_VD_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_SET_USB_REG_ENV_TAIL_ADJ_VD_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_D_CAL_MASK (0xF00000U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_D_CAL_SHIFT (20U)
/*! USBPHY_TX_D_CAL - IFR value of TX_D_CAL.
 *  0b0000..No effect
 *  0b0001..Sets the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_D_CAL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_D_CAL_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_D_CAL_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_CAL45DP_MASK (0xF000000U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_CAL45DP_SHIFT (24U)
/*! USBPHY_TX_CAL45DP - IFR value of TX_CAL45DP.
 *  0b0000..No effect
 *  0b0001..Sets the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_CAL45DP(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_CAL45DP_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_CAL45DP_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_CAL45DN_MASK (0xF0000000U)
#define USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_CAL45DN_SHIFT (28U)
/*! USBPHY_TX_CAL45DN - IFR value of TX_CAL45DM.
 *  0b0000..No effect
 *  0b0001..Sets the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_CAL45DN(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_CAL45DN_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_SET_USBPHY_TX_CAL45DN_MASK)
/*! @} */

/*! @name TRIM_OVERRIDE_EN_CLR - Trim Clear */
/*! @{ */
#define USBPHY_TRIM_OVERRIDE_EN_CLR_DIV_SEL_OVERRIDE_MASK (0x1U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_DIV_SEL_OVERRIDE_SHIFT (0U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_ENV_TAIL_ADJ_VD_OVERRIDE_MASK (0x2U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_ENV_TAIL_ADJ_VD_OVERRIDE_SHIFT (1U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_TX_D_CAL_OVERRIDE_MASK (0x4U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_TX_D_CAL_OVERRIDE_SHIFT (2U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_TX_CAL45DP_OVERRIDE_MASK (0x8U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_TX_CAL45DP_OVERRIDE_SHIFT (3U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_TX_CAL45DM_OVERRIDE_MASK (0x10U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_TX_CAL45DM_OVERRIDE_SHIFT (4U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_REFBIAS_VBGADJ_OVERRIDE_MASK (0x20U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_REFBIAS_VBGADJ_OVERRIDE_SHIFT (5U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_REFBIAS_TST_OVERRIDE_MASK (0x40U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_REFBIAS_TST_OVERRIDE_SHIFT (6U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USB2_REFBIAS_VBGADJ_MASK (0x1C00U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USB2_REFBIAS_VBGADJ_SHIFT (10U)
/*! USB2_REFBIAS_VBGADJ - Adjustment bits for bandgap
 *  0b000..No effect
 *  0b001..Clears the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USB2_REFBIAS_VBGADJ(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_CLR_USB2_REFBIAS_VBGADJ_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_CLR_USB2_REFBIAS_VBGADJ_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USB2_REFBIAS_TST_MASK (0x6000U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USB2_REFBIAS_TST_SHIFT (13U)
/*! USB2_REFBIAS_TST - Bias current control for usb2_phy and usb_PLL
 *  0b00..No effect
 *  0b01..Clears the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USB2_REFBIAS_TST(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_CLR_USB2_REFBIAS_TST_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_CLR_USB2_REFBIAS_TST_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_PLL_CTRL0_DIV_SEL_MASK (0x38000U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_PLL_CTRL0_DIV_SEL_SHIFT (15U)
/*! PLL_CTRL0_DIV_SEL - IFR value of PLL_DIV_SEL.
 *  0b000..No effect
 *  0b001..Clears the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_CLR_PLL_CTRL0_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_CLR_PLL_CTRL0_DIV_SEL_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_CLR_PLL_CTRL0_DIV_SEL_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USB_REG_ENV_TAIL_ADJ_VD_MASK (0xC0000U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USB_REG_ENV_TAIL_ADJ_VD_SHIFT (18U)
/*! USB_REG_ENV_TAIL_ADJ_VD - IFR value of ENV_TAIL_ADJ.
 *  0b00..No effect
 *  0b01..Clears the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USB_REG_ENV_TAIL_ADJ_VD(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_CLR_USB_REG_ENV_TAIL_ADJ_VD_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_CLR_USB_REG_ENV_TAIL_ADJ_VD_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_D_CAL_MASK (0xF00000U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_D_CAL_SHIFT (20U)
/*! USBPHY_TX_D_CAL - IFR value of TX_D_CAL.
 *  0b0000..No effect
 *  0b0001..Clears the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_D_CAL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_D_CAL_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_D_CAL_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_CAL45DP_MASK (0xF000000U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_CAL45DP_SHIFT (24U)
/*! USBPHY_TX_CAL45DP - IFR value of TX_CAL45DP.
 *  0b0000..No effect
 *  0b0001..Clears the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_CAL45DP(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_CAL45DP_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_CAL45DP_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_CAL45DN_MASK (0xF0000000U)
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_CAL45DN_SHIFT (28U)
/*! USBPHY_TX_CAL45DN - IFR value of TX_CAL45DM.
 *  0b0000..No effect
 *  0b0001..Clears the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_CAL45DN(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_CAL45DN_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_CLR_USBPHY_TX_CAL45DN_MASK)
/*! @} */

/*! @name TRIM_OVERRIDE_EN_TOG - Trim Toggle */
/*! @{ */
#define USBPHY_TRIM_OVERRIDE_EN_TOG_DIV_SEL_OVERRIDE_MASK (0x1U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_DIV_SEL_OVERRIDE_SHIFT (0U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_ENV_TAIL_ADJ_VD_OVERRIDE_MASK (0x2U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_ENV_TAIL_ADJ_VD_OVERRIDE_SHIFT (1U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_TX_D_CAL_OVERRIDE_MASK (0x4U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_TX_D_CAL_OVERRIDE_SHIFT (2U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_TX_CAL45DP_OVERRIDE_MASK (0x8U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_TX_CAL45DP_OVERRIDE_SHIFT (3U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_TX_CAL45DM_OVERRIDE_MASK (0x10U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_TX_CAL45DM_OVERRIDE_SHIFT (4U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_REFBIAS_VBGADJ_OVERRIDE_MASK (0x20U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_REFBIAS_VBGADJ_OVERRIDE_SHIFT (5U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_REFBIAS_TST_OVERRIDE_MASK (0x40U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_REFBIAS_TST_OVERRIDE_SHIFT (6U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USB2_REFBIAS_VBGADJ_MASK (0x1C00U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USB2_REFBIAS_VBGADJ_SHIFT (10U)
/*! USB2_REFBIAS_VBGADJ - Adjustment bits for bandgap
 *  0b000..No effect
 *  0b001..Toggles the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USB2_REFBIAS_VBGADJ(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_TOG_USB2_REFBIAS_VBGADJ_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_TOG_USB2_REFBIAS_VBGADJ_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USB2_REFBIAS_TST_MASK (0x6000U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USB2_REFBIAS_TST_SHIFT (13U)
/*! USB2_REFBIAS_TST - Bias current control for usb2_phy and usb_PLL
 *  0b00..No effect
 *  0b01..Toggles the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USB2_REFBIAS_TST(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_TOG_USB2_REFBIAS_TST_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_TOG_USB2_REFBIAS_TST_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_PLL_CTRL0_DIV_SEL_MASK (0x38000U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_PLL_CTRL0_DIV_SEL_SHIFT (15U)
/*! PLL_CTRL0_DIV_SEL - IFR value of PLL_DIV_SEL.
 *  0b000..No effect
 *  0b001..Toggles the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_TOG_PLL_CTRL0_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_TOG_PLL_CTRL0_DIV_SEL_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_TOG_PLL_CTRL0_DIV_SEL_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USB_REG_ENV_TAIL_ADJ_VD_MASK (0xC0000U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USB_REG_ENV_TAIL_ADJ_VD_SHIFT (18U)
/*! USB_REG_ENV_TAIL_ADJ_VD - IFR value of ENV_TAIL_ADJ.
 *  0b00..No effect
 *  0b01..Toggles the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USB_REG_ENV_TAIL_ADJ_VD(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_TOG_USB_REG_ENV_TAIL_ADJ_VD_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_TOG_USB_REG_ENV_TAIL_ADJ_VD_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_D_CAL_MASK (0xF00000U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_D_CAL_SHIFT (20U)
/*! USBPHY_TX_D_CAL - IFR value of TX_D_CAL.
 *  0b0000..No effect
 *  0b0001..Toggles the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_D_CAL(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_D_CAL_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_D_CAL_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_CAL45DP_MASK (0xF000000U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_CAL45DP_SHIFT (24U)
/*! USBPHY_TX_CAL45DP - IFR value of TX_CAL45DP.
 *  0b0000..No effect
 *  0b0001..Toggles the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_CAL45DP(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_CAL45DP_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_CAL45DP_MASK)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_CAL45DN_MASK (0xF0000000U)
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_CAL45DN_SHIFT (28U)
/*! USBPHY_TX_CAL45DN - IFR value of TX_CAL45DM.
 *  0b0000..No effect
 *  0b0001..Toggles the corresponding bit
 */
#define USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_CAL45DN(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_CAL45DN_SHIFT)) & USBPHY_TRIM_OVERRIDE_EN_TOG_USBPHY_TX_CAL45DN_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group USBPHY_Register_Masks */


/* USBPHY - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral USBPHY base pointer */
  #define USBPHY_BASE_PTR                          ((USBPHY_MemMapPtr)0x5013B000u)
  /** Peripheral USBPHY base pointer */
  #define USBPHY_BASE_PTR_NS                       ((USBPHY_MemMapPtr)0x4013B000u)
  /** Array initializer of USBPHY peripheral base pointers */
  #define USBPHY_BASE_PTRS                         { USBPHY_BASE_PTR }
  /** Array initializer of USBPHY peripheral base pointers */
  #define USBPHY_BASE_PTRS_NS                      { USBPHY_BASE_PTR_NS }
#else
  /** Peripheral USBPHY base pointer */
  #define USBPHY_BASE_PTR                          ((USBPHY_MemMapPtr)0x4013B000u)
  /** Array initializer of USBPHY peripheral base pointers */
  #define USBPHY_BASE_PTRS                         { USBPHY_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- USBPHY - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBPHY_Register_Accessor_Macros USBPHY - Register accessor macros
 * @{
 */


/* USBPHY - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* USBPHY */
  #define USBPHY_PWD                               USBPHY_PWD_REG(USBPHY_BASE_PTR)
  #define USBPHY_PWD_NS                            USBPHY_PWD_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_PWD_SET                           USBPHY_PWD_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_PWD_SET_NS                        USBPHY_PWD_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_PWD_CLR                           USBPHY_PWD_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_PWD_CLR_NS                        USBPHY_PWD_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_PWD_TOG                           USBPHY_PWD_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_PWD_TOG_NS                        USBPHY_PWD_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_TX                                USBPHY_TX_REG(USBPHY_BASE_PTR)
  #define USBPHY_TX_NS                             USBPHY_TX_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_TX_SET                            USBPHY_TX_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_TX_SET_NS                         USBPHY_TX_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_TX_CLR                            USBPHY_TX_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_TX_CLR_NS                         USBPHY_TX_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_TX_TOG                            USBPHY_TX_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_TX_TOG_NS                         USBPHY_TX_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_RX                                USBPHY_RX_REG(USBPHY_BASE_PTR)
  #define USBPHY_RX_NS                             USBPHY_RX_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_RX_SET                            USBPHY_RX_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_RX_SET_NS                         USBPHY_RX_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_RX_CLR                            USBPHY_RX_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_RX_CLR_NS                         USBPHY_RX_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_RX_TOG                            USBPHY_RX_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_RX_TOG_NS                         USBPHY_RX_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_CTRL                              USBPHY_CTRL_REG(USBPHY_BASE_PTR)
  #define USBPHY_CTRL_NS                           USBPHY_CTRL_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_CTRL_SET                          USBPHY_CTRL_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_CTRL_SET_NS                       USBPHY_CTRL_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_CTRL_CLR                          USBPHY_CTRL_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_CTRL_CLR_NS                       USBPHY_CTRL_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_CTRL_TOG                          USBPHY_CTRL_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_CTRL_TOG_NS                       USBPHY_CTRL_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_STATUS                            USBPHY_STATUS_REG(USBPHY_BASE_PTR)
  #define USBPHY_STATUS_NS                         USBPHY_STATUS_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_DEBUG0                            USBPHY_DEBUG0_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG0_NS                         USBPHY_DEBUG0_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_DEBUG0_SET                        USBPHY_DEBUG0_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG0_SET_NS                     USBPHY_DEBUG0_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_DEBUG0_CLR                        USBPHY_DEBUG0_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG0_CLR_NS                     USBPHY_DEBUG0_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_DEBUG0_TOG                        USBPHY_DEBUG0_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG0_TOG_NS                     USBPHY_DEBUG0_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_DEBUG1                            USBPHY_DEBUG1_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG1_NS                         USBPHY_DEBUG1_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_DEBUG1_SET                        USBPHY_DEBUG1_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG1_SET_NS                     USBPHY_DEBUG1_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_DEBUG1_CLR                        USBPHY_DEBUG1_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG1_CLR_NS                     USBPHY_DEBUG1_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_DEBUG1_TOG                        USBPHY_DEBUG1_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG1_TOG_NS                     USBPHY_DEBUG1_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_VERSION                           USBPHY_VERSION_REG(USBPHY_BASE_PTR)
  #define USBPHY_VERSION_NS                        USBPHY_VERSION_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_PLL_SIC                           USBPHY_PLL_SIC_REG(USBPHY_BASE_PTR)
  #define USBPHY_PLL_SIC_NS                        USBPHY_PLL_SIC_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_PLL_SIC_SET                       USBPHY_PLL_SIC_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_PLL_SIC_SET_NS                    USBPHY_PLL_SIC_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_PLL_SIC_CLR                       USBPHY_PLL_SIC_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_PLL_SIC_CLR_NS                    USBPHY_PLL_SIC_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_PLL_SIC_TOG                       USBPHY_PLL_SIC_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_PLL_SIC_TOG_NS                    USBPHY_PLL_SIC_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_VBUS_DETECT                  USBPHY_USB1_VBUS_DETECT_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DETECT_NS               USBPHY_USB1_VBUS_DETECT_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_VBUS_DETECT_SET              USBPHY_USB1_VBUS_DETECT_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DETECT_SET_NS           USBPHY_USB1_VBUS_DETECT_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_VBUS_DETECT_CLR              USBPHY_USB1_VBUS_DETECT_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DETECT_CLR_NS           USBPHY_USB1_VBUS_DETECT_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_VBUS_DETECT_TOG              USBPHY_USB1_VBUS_DETECT_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DETECT_TOG_NS           USBPHY_USB1_VBUS_DETECT_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_VBUS_DET_STAT                USBPHY_USB1_VBUS_DET_STAT_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DET_STAT_NS             USBPHY_USB1_VBUS_DET_STAT_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_VBUS_DET_STAT_SET            USBPHY_USB1_VBUS_DET_STAT_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DET_STAT_SET_NS         USBPHY_USB1_VBUS_DET_STAT_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_VBUS_DET_STAT_CLR            USBPHY_USB1_VBUS_DET_STAT_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DET_STAT_CLR_NS         USBPHY_USB1_VBUS_DET_STAT_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_VBUS_DET_STAT_TOG            USBPHY_USB1_VBUS_DET_STAT_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DET_STAT_TOG_NS         USBPHY_USB1_VBUS_DET_STAT_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_CHRG_DETECT                  USBPHY_USB1_CHRG_DETECT_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_CHRG_DETECT_NS               USBPHY_USB1_CHRG_DETECT_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_CHRG_DETECT_SET              USBPHY_USB1_CHRG_DETECT_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_CHRG_DETECT_SET_NS           USBPHY_USB1_CHRG_DETECT_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_CHRG_DETECT_CLR              USBPHY_USB1_CHRG_DETECT_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_CHRG_DETECT_CLR_NS           USBPHY_USB1_CHRG_DETECT_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_CHRG_DETECT_TOG              USBPHY_USB1_CHRG_DETECT_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_CHRG_DETECT_TOG_NS           USBPHY_USB1_CHRG_DETECT_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_CHRG_DET_STAT                USBPHY_USB1_CHRG_DET_STAT_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_CHRG_DET_STAT_NS             USBPHY_USB1_CHRG_DET_STAT_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_ANACTRL                           USBPHY_ANACTRL_REG(USBPHY_BASE_PTR)
  #define USBPHY_ANACTRL_NS                        USBPHY_ANACTRL_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_ANACTRL_SET                       USBPHY_ANACTRL_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_ANACTRL_SET_NS                    USBPHY_ANACTRL_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_ANACTRL_CLR                       USBPHY_ANACTRL_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_ANACTRL_CLR_NS                    USBPHY_ANACTRL_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_ANACTRL_TOG                       USBPHY_ANACTRL_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_ANACTRL_TOG_NS                    USBPHY_ANACTRL_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_LOOPBACK                     USBPHY_USB1_LOOPBACK_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_NS                  USBPHY_USB1_LOOPBACK_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_LOOPBACK_SET                 USBPHY_USB1_LOOPBACK_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_SET_NS              USBPHY_USB1_LOOPBACK_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_LOOPBACK_CLR                 USBPHY_USB1_LOOPBACK_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_CLR_NS              USBPHY_USB1_LOOPBACK_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_LOOPBACK_TOG                 USBPHY_USB1_LOOPBACK_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_TOG_NS              USBPHY_USB1_LOOPBACK_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT             USBPHY_USB1_LOOPBACK_HSFSCNT_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT_NS          USBPHY_USB1_LOOPBACK_HSFSCNT_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT_SET         USBPHY_USB1_LOOPBACK_HSFSCNT_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT_SET_NS      USBPHY_USB1_LOOPBACK_HSFSCNT_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT_CLR         USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_NS      USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT_TOG         USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_NS      USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_TRIM_OVERRIDE_EN                  USBPHY_TRIM_OVERRIDE_EN_REG(USBPHY_BASE_PTR)
  #define USBPHY_TRIM_OVERRIDE_EN_NS               USBPHY_TRIM_OVERRIDE_EN_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_TRIM_OVERRIDE_EN_SET              USBPHY_TRIM_OVERRIDE_EN_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_TRIM_OVERRIDE_EN_SET_NS           USBPHY_TRIM_OVERRIDE_EN_SET_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_TRIM_OVERRIDE_EN_CLR              USBPHY_TRIM_OVERRIDE_EN_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_TRIM_OVERRIDE_EN_CLR_NS           USBPHY_TRIM_OVERRIDE_EN_CLR_REG(USBPHY_BASE_PTR_NS)
  #define USBPHY_TRIM_OVERRIDE_EN_TOG              USBPHY_TRIM_OVERRIDE_EN_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_TRIM_OVERRIDE_EN_TOG_NS           USBPHY_TRIM_OVERRIDE_EN_TOG_REG(USBPHY_BASE_PTR_NS)
#else
  /* USBPHY */
  #define USBPHY_PWD                               USBPHY_PWD_REG(USBPHY_BASE_PTR)
  #define USBPHY_PWD_SET                           USBPHY_PWD_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_PWD_CLR                           USBPHY_PWD_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_PWD_TOG                           USBPHY_PWD_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_TX                                USBPHY_TX_REG(USBPHY_BASE_PTR)
  #define USBPHY_TX_SET                            USBPHY_TX_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_TX_CLR                            USBPHY_TX_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_TX_TOG                            USBPHY_TX_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_RX                                USBPHY_RX_REG(USBPHY_BASE_PTR)
  #define USBPHY_RX_SET                            USBPHY_RX_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_RX_CLR                            USBPHY_RX_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_RX_TOG                            USBPHY_RX_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_CTRL                              USBPHY_CTRL_REG(USBPHY_BASE_PTR)
  #define USBPHY_CTRL_SET                          USBPHY_CTRL_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_CTRL_CLR                          USBPHY_CTRL_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_CTRL_TOG                          USBPHY_CTRL_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_STATUS                            USBPHY_STATUS_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG0                            USBPHY_DEBUG0_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG0_SET                        USBPHY_DEBUG0_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG0_CLR                        USBPHY_DEBUG0_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG0_TOG                        USBPHY_DEBUG0_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG1                            USBPHY_DEBUG1_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG1_SET                        USBPHY_DEBUG1_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG1_CLR                        USBPHY_DEBUG1_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_DEBUG1_TOG                        USBPHY_DEBUG1_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_VERSION                           USBPHY_VERSION_REG(USBPHY_BASE_PTR)
  #define USBPHY_PLL_SIC                           USBPHY_PLL_SIC_REG(USBPHY_BASE_PTR)
  #define USBPHY_PLL_SIC_SET                       USBPHY_PLL_SIC_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_PLL_SIC_CLR                       USBPHY_PLL_SIC_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_PLL_SIC_TOG                       USBPHY_PLL_SIC_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DETECT                  USBPHY_USB1_VBUS_DETECT_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DETECT_SET              USBPHY_USB1_VBUS_DETECT_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DETECT_CLR              USBPHY_USB1_VBUS_DETECT_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DETECT_TOG              USBPHY_USB1_VBUS_DETECT_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DET_STAT                USBPHY_USB1_VBUS_DET_STAT_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DET_STAT_SET            USBPHY_USB1_VBUS_DET_STAT_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DET_STAT_CLR            USBPHY_USB1_VBUS_DET_STAT_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_VBUS_DET_STAT_TOG            USBPHY_USB1_VBUS_DET_STAT_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_CHRG_DETECT                  USBPHY_USB1_CHRG_DETECT_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_CHRG_DETECT_SET              USBPHY_USB1_CHRG_DETECT_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_CHRG_DETECT_CLR              USBPHY_USB1_CHRG_DETECT_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_CHRG_DETECT_TOG              USBPHY_USB1_CHRG_DETECT_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_CHRG_DET_STAT                USBPHY_USB1_CHRG_DET_STAT_REG(USBPHY_BASE_PTR)
  #define USBPHY_ANACTRL                           USBPHY_ANACTRL_REG(USBPHY_BASE_PTR)
  #define USBPHY_ANACTRL_SET                       USBPHY_ANACTRL_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_ANACTRL_CLR                       USBPHY_ANACTRL_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_ANACTRL_TOG                       USBPHY_ANACTRL_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK                     USBPHY_USB1_LOOPBACK_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_SET                 USBPHY_USB1_LOOPBACK_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_CLR                 USBPHY_USB1_LOOPBACK_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_TOG                 USBPHY_USB1_LOOPBACK_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT             USBPHY_USB1_LOOPBACK_HSFSCNT_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT_SET         USBPHY_USB1_LOOPBACK_HSFSCNT_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT_CLR         USBPHY_USB1_LOOPBACK_HSFSCNT_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_USB1_LOOPBACK_HSFSCNT_TOG         USBPHY_USB1_LOOPBACK_HSFSCNT_TOG_REG(USBPHY_BASE_PTR)
  #define USBPHY_TRIM_OVERRIDE_EN                  USBPHY_TRIM_OVERRIDE_EN_REG(USBPHY_BASE_PTR)
  #define USBPHY_TRIM_OVERRIDE_EN_SET              USBPHY_TRIM_OVERRIDE_EN_SET_REG(USBPHY_BASE_PTR)
  #define USBPHY_TRIM_OVERRIDE_EN_CLR              USBPHY_TRIM_OVERRIDE_EN_CLR_REG(USBPHY_BASE_PTR)
  #define USBPHY_TRIM_OVERRIDE_EN_TOG              USBPHY_TRIM_OVERRIDE_EN_TOG_REG(USBPHY_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group USBPHY_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USBPHY_Peripheral */


/* ----------------------------------------------------------------------------
   -- USDHC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Peripheral USDHC
 * @{
 */

/** USDHC - Peripheral register structure */
typedef struct USDHC_MemMap {
  uint32_t DS_ADDR;                                /**< DMA System Address, offset: 0x0 */
  uint32_t BLK_ATT;                                /**< Block Attributes, offset: 0x4 */
  uint32_t CMD_ARG;                                /**< Command Argument, offset: 0x8 */
  uint32_t CMD_XFR_TYP;                            /**< Command Transfer Type, offset: 0xC */
  uint32_t CMD_RSP0;                               /**< Command Response0, offset: 0x10 */
  uint32_t CMD_RSP1;                               /**< Command Response1, offset: 0x14 */
  uint32_t CMD_RSP2;                               /**< Command Response2, offset: 0x18 */
  uint32_t CMD_RSP3;                               /**< Command Response3, offset: 0x1C */
  uint32_t DATA_BUFF_ACC_PORT;                     /**< Data Buffer Access Port, offset: 0x20 */
  uint32_t PRES_STATE;                             /**< Present State, offset: 0x24 */
  uint32_t PROT_CTRL;                              /**< Protocol Control, offset: 0x28 */
  uint32_t SYS_CTRL;                               /**< System Control, offset: 0x2C */
  uint32_t INT_STATUS;                             /**< Interrupt Status, offset: 0x30 */
  uint32_t INT_STATUS_EN;                          /**< Interrupt Status Enable, offset: 0x34 */
  uint32_t INT_SIGNAL_EN;                          /**< Interrupt Signal Enable, offset: 0x38 */
  uint32_t AUTOCMD12_ERR_STATUS;                   /**< Auto CMD12 Error Status, offset: 0x3C */
  uint32_t HOST_CTRL_CAP;                          /**< Host Controller Capabilities, offset: 0x40 */
  uint32_t WTMK_LVL;                               /**< Watermark Level, offset: 0x44 */
  uint32_t MIX_CTRL;                               /**< Mixer Control, offset: 0x48 */
  uint8_t RESERVED_0[4];
  uint32_t FORCE_EVENT;                            /**< Force Event, offset: 0x50 */
  uint32_t ADMA_ERR_STATUS;                        /**< ADMA Error Status, offset: 0x54 */
  uint32_t ADMA_SYS_ADDR;                          /**< ADMA System Address, offset: 0x58 */
  uint8_t RESERVED_1[4];
  uint32_t DLL_CTRL;                               /**< DLL (Delay Line) Control, offset: 0x60 */
  uint32_t DLL_STATUS;                             /**< DLL Status, offset: 0x64 */
  uint32_t CLK_TUNE_CTRL_STATUS;                   /**< CLK Tuning Control and Status, offset: 0x68 */
  uint8_t RESERVED_2[4];
  uint32_t STROBE_DLL_CTRL;                        /**< Strobe DLL control, offset: 0x70 */
  uint32_t STROBE_DLL_STATUS;                      /**< Strobe DLL status, offset: 0x74 */
  uint8_t RESERVED_3[72];
  uint32_t VEND_SPEC;                              /**< Vendor Specific Register, offset: 0xC0 */
  uint32_t MMC_BOOT;                               /**< MMC Boot, offset: 0xC4 */
  uint32_t VEND_SPEC2;                             /**< Vendor Specific 2 Register, offset: 0xC8 */
  uint32_t TUNING_CTRL;                            /**< Tuning Control, offset: 0xCC */
} volatile *USDHC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USDHC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Accessor_Macros USDHC - Register accessor macros
 * @{
 */


/* USDHC - Register accessors */
#define USDHC_DS_ADDR_REG(base)                  ((base)->DS_ADDR)
#define USDHC_BLK_ATT_REG(base)                  ((base)->BLK_ATT)
#define USDHC_CMD_ARG_REG(base)                  ((base)->CMD_ARG)
#define USDHC_CMD_XFR_TYP_REG(base)              ((base)->CMD_XFR_TYP)
#define USDHC_CMD_RSP0_REG(base)                 ((base)->CMD_RSP0)
#define USDHC_CMD_RSP1_REG(base)                 ((base)->CMD_RSP1)
#define USDHC_CMD_RSP2_REG(base)                 ((base)->CMD_RSP2)
#define USDHC_CMD_RSP3_REG(base)                 ((base)->CMD_RSP3)
#define USDHC_DATA_BUFF_ACC_PORT_REG(base)       ((base)->DATA_BUFF_ACC_PORT)
#define USDHC_PRES_STATE_REG(base)               ((base)->PRES_STATE)
#define USDHC_PROT_CTRL_REG(base)                ((base)->PROT_CTRL)
#define USDHC_SYS_CTRL_REG(base)                 ((base)->SYS_CTRL)
#define USDHC_INT_STATUS_REG(base)               ((base)->INT_STATUS)
#define USDHC_INT_STATUS_EN_REG(base)            ((base)->INT_STATUS_EN)
#define USDHC_INT_SIGNAL_EN_REG(base)            ((base)->INT_SIGNAL_EN)
#define USDHC_AUTOCMD12_ERR_STATUS_REG(base)     ((base)->AUTOCMD12_ERR_STATUS)
#define USDHC_HOST_CTRL_CAP_REG(base)            ((base)->HOST_CTRL_CAP)
#define USDHC_WTMK_LVL_REG(base)                 ((base)->WTMK_LVL)
#define USDHC_MIX_CTRL_REG(base)                 ((base)->MIX_CTRL)
#define USDHC_FORCE_EVENT_REG(base)              ((base)->FORCE_EVENT)
#define USDHC_ADMA_ERR_STATUS_REG(base)          ((base)->ADMA_ERR_STATUS)
#define USDHC_ADMA_SYS_ADDR_REG(base)            ((base)->ADMA_SYS_ADDR)
#define USDHC_DLL_CTRL_REG(base)                 ((base)->DLL_CTRL)
#define USDHC_DLL_STATUS_REG(base)               ((base)->DLL_STATUS)
#define USDHC_CLK_TUNE_CTRL_STATUS_REG(base)     ((base)->CLK_TUNE_CTRL_STATUS)
#define USDHC_STROBE_DLL_CTRL_REG(base)          ((base)->STROBE_DLL_CTRL)
#define USDHC_STROBE_DLL_STATUS_REG(base)        ((base)->STROBE_DLL_STATUS)
#define USDHC_VEND_SPEC_REG(base)                ((base)->VEND_SPEC)
#define USDHC_MMC_BOOT_REG(base)                 ((base)->MMC_BOOT)
#define USDHC_VEND_SPEC2_REG(base)               ((base)->VEND_SPEC2)
#define USDHC_TUNING_CTRL_REG(base)              ((base)->TUNING_CTRL)

/*!
 * @}
 */ /* end of group USDHC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USDHC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Masks USDHC Register Masks
 * @{
 */

/*! @name DS_ADDR - DMA System Address */
/*! @{ */
#define USDHC_DS_ADDR_DS_ADDR_MASK               (0xFFFFFFFFU)
#define USDHC_DS_ADDR_DS_ADDR_SHIFT              (0U)
/*! DS_ADDR - System address
 */
#define USDHC_DS_ADDR_DS_ADDR(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_DS_ADDR_DS_ADDR_SHIFT)) & USDHC_DS_ADDR_DS_ADDR_MASK)
/*! @} */

/*! @name BLK_ATT - Block Attributes */
/*! @{ */
#define USDHC_BLK_ATT_BLKSIZE_MASK               (0x1FFFU)
#define USDHC_BLK_ATT_BLKSIZE_SHIFT              (0U)
/*! BLKSIZE - Transfer block size
 *  0b1000000000000..4096 bytes
 *  0b0100000000000..2048 bytes
 *  0b0001000000000..512 bytes
 *  0b0000111111111..511 bytes
 *  0b0000000000100..4 bytes
 *  0b0000000000011..3 bytes
 *  0b0000000000010..2 bytes
 *  0b0000000000001..1 byte
 *  0b0000000000000..No data transfer
 */
#define USDHC_BLK_ATT_BLKSIZE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_BLK_ATT_BLKSIZE_SHIFT)) & USDHC_BLK_ATT_BLKSIZE_MASK)
#define USDHC_BLK_ATT_BLKCNT_MASK                (0xFFFF0000U)
#define USDHC_BLK_ATT_BLKCNT_SHIFT               (16U)
/*! BLKCNT - Blocks count for current transfer
 *  0b1111111111111111..65535 blocks
 *  0b0000000000000010..2 blocks
 *  0b0000000000000001..1 block
 *  0b0000000000000000..Stop count
 */
#define USDHC_BLK_ATT_BLKCNT(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_BLK_ATT_BLKCNT_SHIFT)) & USDHC_BLK_ATT_BLKCNT_MASK)
/*! @} */

/*! @name CMD_ARG - Command Argument */
/*! @{ */
#define USDHC_CMD_ARG_CMDARG_MASK                (0xFFFFFFFFU)
#define USDHC_CMD_ARG_CMDARG_SHIFT               (0U)
/*! CMDARG - Command argument
 */
#define USDHC_CMD_ARG_CMDARG(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_ARG_CMDARG_SHIFT)) & USDHC_CMD_ARG_CMDARG_MASK)
/*! @} */

/*! @name CMD_XFR_TYP - Command Transfer Type */
/*! @{ */
#define USDHC_CMD_XFR_TYP_RSPTYP_MASK            (0x30000U)
#define USDHC_CMD_XFR_TYP_RSPTYP_SHIFT           (16U)
/*! RSPTYP - Response type select
 *  0b00..No response
 *  0b01..Response length 136
 *  0b10..Response length 48
 *  0b11..Response length 48, check busy after response
 */
#define USDHC_CMD_XFR_TYP_RSPTYP(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_RSPTYP_SHIFT)) & USDHC_CMD_XFR_TYP_RSPTYP_MASK)
#define USDHC_CMD_XFR_TYP_CCCEN_MASK             (0x80000U)
#define USDHC_CMD_XFR_TYP_CCCEN_SHIFT            (19U)
#define USDHC_CMD_XFR_TYP_CICEN_MASK             (0x100000U)
#define USDHC_CMD_XFR_TYP_CICEN_SHIFT            (20U)
#define USDHC_CMD_XFR_TYP_DPSEL_MASK             (0x200000U)
#define USDHC_CMD_XFR_TYP_DPSEL_SHIFT            (21U)
#define USDHC_CMD_XFR_TYP_CMDTYP_MASK            (0xC00000U)
#define USDHC_CMD_XFR_TYP_CMDTYP_SHIFT           (22U)
/*! CMDTYP - Command type
 *  0b11..Abort CMD12, CMD52 for writing I/O Abort in CCCR
 *  0b10..Resume CMD52 for writing function select in CCCR
 *  0b01..Suspend CMD52 for writing bus suspend in CCCR
 *  0b00..Normal other commands
 */
#define USDHC_CMD_XFR_TYP_CMDTYP(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CMDTYP_SHIFT)) & USDHC_CMD_XFR_TYP_CMDTYP_MASK)
#define USDHC_CMD_XFR_TYP_CMDINX_MASK            (0x3F000000U)
#define USDHC_CMD_XFR_TYP_CMDINX_SHIFT           (24U)
/*! CMDINX - Command index
 */
#define USDHC_CMD_XFR_TYP_CMDINX(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CMDINX_SHIFT)) & USDHC_CMD_XFR_TYP_CMDINX_MASK)
/*! @} */

/*! @name CMD_RSP0 - Command Response0 */
/*! @{ */
#define USDHC_CMD_RSP0_CMDRSP0_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP0_CMDRSP0_SHIFT             (0U)
/*! CMDRSP0 - Command response 0
 */
#define USDHC_CMD_RSP0_CMDRSP0(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP0_CMDRSP0_SHIFT)) & USDHC_CMD_RSP0_CMDRSP0_MASK)
/*! @} */

/*! @name CMD_RSP1 - Command Response1 */
/*! @{ */
#define USDHC_CMD_RSP1_CMDRSP1_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP1_CMDRSP1_SHIFT             (0U)
/*! CMDRSP1 - Command response 1
 */
#define USDHC_CMD_RSP1_CMDRSP1(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP1_CMDRSP1_SHIFT)) & USDHC_CMD_RSP1_CMDRSP1_MASK)
/*! @} */

/*! @name CMD_RSP2 - Command Response2 */
/*! @{ */
#define USDHC_CMD_RSP2_CMDRSP2_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP2_CMDRSP2_SHIFT             (0U)
/*! CMDRSP2 - Command response 2
 */
#define USDHC_CMD_RSP2_CMDRSP2(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP2_CMDRSP2_SHIFT)) & USDHC_CMD_RSP2_CMDRSP2_MASK)
/*! @} */

/*! @name CMD_RSP3 - Command Response3 */
/*! @{ */
#define USDHC_CMD_RSP3_CMDRSP3_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP3_CMDRSP3_SHIFT             (0U)
/*! CMDRSP3 - Command response 3
 */
#define USDHC_CMD_RSP3_CMDRSP3(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP3_CMDRSP3_SHIFT)) & USDHC_CMD_RSP3_CMDRSP3_MASK)
/*! @} */

/*! @name DATA_BUFF_ACC_PORT - Data Buffer Access Port */
/*! @{ */
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK    (0xFFFFFFFFU)
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT   (0U)
/*! DATCONT - Data content
 */
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT)) & USDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK)
/*! @} */

/*! @name PRES_STATE - Present State */
/*! @{ */
#define USDHC_PRES_STATE_CIHB_MASK               (0x1U)
#define USDHC_PRES_STATE_CIHB_SHIFT              (0U)
#define USDHC_PRES_STATE_CDIHB_MASK              (0x2U)
#define USDHC_PRES_STATE_CDIHB_SHIFT             (1U)
#define USDHC_PRES_STATE_DLA_MASK                (0x4U)
#define USDHC_PRES_STATE_DLA_SHIFT               (2U)
#define USDHC_PRES_STATE_SDSTB_MASK              (0x8U)
#define USDHC_PRES_STATE_SDSTB_SHIFT             (3U)
#define USDHC_PRES_STATE_IPGOFF_MASK             (0x10U)
#define USDHC_PRES_STATE_IPGOFF_SHIFT            (4U)
#define USDHC_PRES_STATE_HCKOFF_MASK             (0x20U)
#define USDHC_PRES_STATE_HCKOFF_SHIFT            (5U)
#define USDHC_PRES_STATE_PEROFF_MASK             (0x40U)
#define USDHC_PRES_STATE_PEROFF_SHIFT            (6U)
#define USDHC_PRES_STATE_SDOFF_MASK              (0x80U)
#define USDHC_PRES_STATE_SDOFF_SHIFT             (7U)
#define USDHC_PRES_STATE_WTA_MASK                (0x100U)
#define USDHC_PRES_STATE_WTA_SHIFT               (8U)
#define USDHC_PRES_STATE_RTA_MASK                (0x200U)
#define USDHC_PRES_STATE_RTA_SHIFT               (9U)
#define USDHC_PRES_STATE_BWEN_MASK               (0x400U)
#define USDHC_PRES_STATE_BWEN_SHIFT              (10U)
#define USDHC_PRES_STATE_BREN_MASK               (0x800U)
#define USDHC_PRES_STATE_BREN_SHIFT              (11U)
#define USDHC_PRES_STATE_RTR_MASK                (0x1000U)
#define USDHC_PRES_STATE_RTR_SHIFT               (12U)
#define USDHC_PRES_STATE_TSCD_MASK               (0x8000U)
#define USDHC_PRES_STATE_TSCD_SHIFT              (15U)
#define USDHC_PRES_STATE_CINST_MASK              (0x10000U)
#define USDHC_PRES_STATE_CINST_SHIFT             (16U)
#define USDHC_PRES_STATE_CDPL_MASK               (0x40000U)
#define USDHC_PRES_STATE_CDPL_SHIFT              (18U)
#define USDHC_PRES_STATE_WPSPL_MASK              (0x80000U)
#define USDHC_PRES_STATE_WPSPL_SHIFT             (19U)
#define USDHC_PRES_STATE_CLSL_MASK               (0x800000U)
#define USDHC_PRES_STATE_CLSL_SHIFT              (23U)
#define USDHC_PRES_STATE_DLSL_MASK               (0xFF000000U)
#define USDHC_PRES_STATE_DLSL_SHIFT              (24U)
/*! DLSL - DATA[7:0] line signal level
 *  0b00000111..Data 7 line signal level
 *  0b00000110..Data 6 line signal level
 *  0b00000101..Data 5 line signal level
 *  0b00000100..Data 4 line signal level
 *  0b00000011..Data 3 line signal level
 *  0b00000010..Data 2 line signal level
 *  0b00000001..Data 1 line signal level
 *  0b00000000..Data 0 line signal level
 */
#define USDHC_PRES_STATE_DLSL(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_DLSL_SHIFT)) & USDHC_PRES_STATE_DLSL_MASK)
/*! @} */

/*! @name PROT_CTRL - Protocol Control */
/*! @{ */
#define USDHC_PROT_CTRL_LCTL_MASK                (0x1U)
#define USDHC_PROT_CTRL_LCTL_SHIFT               (0U)
#define USDHC_PROT_CTRL_DTW_MASK                 (0x6U)
#define USDHC_PROT_CTRL_DTW_SHIFT                (1U)
/*! DTW - Data transfer width
 *  0b10..8-bit mode
 *  0b01..4-bit mode
 *  0b00..1-bit mode
 *  0b11..Reserved
 */
#define USDHC_PROT_CTRL_DTW(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_DTW_SHIFT)) & USDHC_PROT_CTRL_DTW_MASK)
#define USDHC_PROT_CTRL_D3CD_MASK                (0x8U)
#define USDHC_PROT_CTRL_D3CD_SHIFT               (3U)
#define USDHC_PROT_CTRL_EMODE_MASK               (0x30U)
#define USDHC_PROT_CTRL_EMODE_SHIFT              (4U)
/*! EMODE - Endian mode
 *  0b00..Big endian mode
 *  0b01..Half word big endian mode
 *  0b10..Little endian mode
 *  0b11..Reserved
 */
#define USDHC_PROT_CTRL_EMODE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_EMODE_SHIFT)) & USDHC_PROT_CTRL_EMODE_MASK)
#define USDHC_PROT_CTRL_CDTL_MASK                (0x40U)
#define USDHC_PROT_CTRL_CDTL_SHIFT               (6U)
#define USDHC_PROT_CTRL_CDSS_MASK                (0x80U)
#define USDHC_PROT_CTRL_CDSS_SHIFT               (7U)
#define USDHC_PROT_CTRL_DMASEL_MASK              (0x300U)
#define USDHC_PROT_CTRL_DMASEL_SHIFT             (8U)
/*! DMASEL - DMA select
 *  0b00..No DMA or simple DMA is selected.
 *  0b01..ADMA1 is selected.
 *  0b10..ADMA2 is selected.
 *  0b11..Reserved
 */
#define USDHC_PROT_CTRL_DMASEL(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_DMASEL_SHIFT)) & USDHC_PROT_CTRL_DMASEL_MASK)
#define USDHC_PROT_CTRL_SABGREQ_MASK             (0x10000U)
#define USDHC_PROT_CTRL_SABGREQ_SHIFT            (16U)
#define USDHC_PROT_CTRL_CREQ_MASK                (0x20000U)
#define USDHC_PROT_CTRL_CREQ_SHIFT               (17U)
#define USDHC_PROT_CTRL_RWCTL_MASK               (0x40000U)
#define USDHC_PROT_CTRL_RWCTL_SHIFT              (18U)
#define USDHC_PROT_CTRL_IABG_MASK                (0x80000U)
#define USDHC_PROT_CTRL_IABG_SHIFT               (19U)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK_MASK     (0x100000U)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK_SHIFT    (20U)
#define USDHC_PROT_CTRL_WECINT_MASK              (0x1000000U)
#define USDHC_PROT_CTRL_WECINT_SHIFT             (24U)
#define USDHC_PROT_CTRL_WECINS_MASK              (0x2000000U)
#define USDHC_PROT_CTRL_WECINS_SHIFT             (25U)
#define USDHC_PROT_CTRL_WECRM_MASK               (0x4000000U)
#define USDHC_PROT_CTRL_WECRM_SHIFT              (26U)
#define USDHC_PROT_CTRL_BURST_LEN_EN_MASK        (0x38000000U)
#define USDHC_PROT_CTRL_BURST_LEN_EN_SHIFT       (27U)
/*! BURST_LEN_EN - BURST length enable for INCR, INCR4 / INCR8 / INCR16, INCR4-WRAP / INCR8-WRAP / INCR16-WRAP
 *  0bxx1..Burst length is enabled for INCR.
 *  0bx1x..Burst length is enabled for INCR4 / INCR8 / INCR16.
 *  0b1xx..Burst length is enabled for INCR4-WRAP / INCR8-WRAP / INCR16-WRAP.
 */
#define USDHC_PROT_CTRL_BURST_LEN_EN(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_BURST_LEN_EN_SHIFT)) & USDHC_PROT_CTRL_BURST_LEN_EN_MASK)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD_MASK    (0x40000000U)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD_SHIFT   (30U)
/*! @} */

/*! @name SYS_CTRL - System Control */
/*! @{ */
#define USDHC_SYS_CTRL_DVS_MASK                  (0xF0U)
#define USDHC_SYS_CTRL_DVS_SHIFT                 (4U)
/*! DVS - Divisor
 *  0b0000..Divide-by-1
 *  0b0001..Divide-by-2
 *  0b1110..Divide-by-15
 *  0b1111..Divide-by-16
 */
#define USDHC_SYS_CTRL_DVS(x)                    (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_DVS_SHIFT)) & USDHC_SYS_CTRL_DVS_MASK)
#define USDHC_SYS_CTRL_SDCLKFS_MASK              (0xFF00U)
#define USDHC_SYS_CTRL_SDCLKFS_SHIFT             (8U)
/*! SDCLKFS - SDCLK frequency select
 */
#define USDHC_SYS_CTRL_SDCLKFS(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_SDCLKFS_SHIFT)) & USDHC_SYS_CTRL_SDCLKFS_MASK)
#define USDHC_SYS_CTRL_DTOCV_MASK                (0xF0000U)
#define USDHC_SYS_CTRL_DTOCV_SHIFT               (16U)
/*! DTOCV - Data timeout counter value
 *  0b1111..SDCLK x 2 29 + SDCLK x 2 28 + SDCLK x 2 27 + SDCLK x 2 26
 *  0b1110..SDCLK x 2 28
 *  0b1101..SDCLK x 2 27
 *  0b1100..SDCLK x 2 26
 *  0b1011..SDCLK x 2 25
 *  0b1010..SDCLK x 2 24
 *  0b1001..SDCLK x 2 23
 *  0b1000..SDCLK x 2 22
 *  0b0111..SDCLK x 2 21
 *  0b0110..SDCLK x 2 20
 *  0b0101..SDCLK x 2 19
 *  0b0100..SDCLK x 2 18
 *  0b0011..SDCLK x 2 17
 *  0b0010..SDCLK x 2 16
 *  0b0001..SDCLK x 2 15
 *  0b0000..SDCLK x 2 14
 */
#define USDHC_SYS_CTRL_DTOCV(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_DTOCV_SHIFT)) & USDHC_SYS_CTRL_DTOCV_MASK)
#define USDHC_SYS_CTRL_IPP_RST_N_MASK            (0x800000U)
#define USDHC_SYS_CTRL_IPP_RST_N_SHIFT           (23U)
#define USDHC_SYS_CTRL_RSTA_MASK                 (0x1000000U)
#define USDHC_SYS_CTRL_RSTA_SHIFT                (24U)
#define USDHC_SYS_CTRL_RSTC_MASK                 (0x2000000U)
#define USDHC_SYS_CTRL_RSTC_SHIFT                (25U)
#define USDHC_SYS_CTRL_RSTD_MASK                 (0x4000000U)
#define USDHC_SYS_CTRL_RSTD_SHIFT                (26U)
#define USDHC_SYS_CTRL_INITA_MASK                (0x8000000U)
#define USDHC_SYS_CTRL_INITA_SHIFT               (27U)
#define USDHC_SYS_CTRL_RSTT_MASK                 (0x10000000U)
#define USDHC_SYS_CTRL_RSTT_SHIFT                (28U)
/*! @} */

/*! @name INT_STATUS - Interrupt Status */
/*! @{ */
#define USDHC_INT_STATUS_CC_MASK                 (0x1U)
#define USDHC_INT_STATUS_CC_SHIFT                (0U)
#define USDHC_INT_STATUS_TC_MASK                 (0x2U)
#define USDHC_INT_STATUS_TC_SHIFT                (1U)
#define USDHC_INT_STATUS_BGE_MASK                (0x4U)
#define USDHC_INT_STATUS_BGE_SHIFT               (2U)
#define USDHC_INT_STATUS_DINT_MASK               (0x8U)
#define USDHC_INT_STATUS_DINT_SHIFT              (3U)
#define USDHC_INT_STATUS_BWR_MASK                (0x10U)
#define USDHC_INT_STATUS_BWR_SHIFT               (4U)
#define USDHC_INT_STATUS_BRR_MASK                (0x20U)
#define USDHC_INT_STATUS_BRR_SHIFT               (5U)
#define USDHC_INT_STATUS_CINS_MASK               (0x40U)
#define USDHC_INT_STATUS_CINS_SHIFT              (6U)
#define USDHC_INT_STATUS_CRM_MASK                (0x80U)
#define USDHC_INT_STATUS_CRM_SHIFT               (7U)
#define USDHC_INT_STATUS_CINT_MASK               (0x100U)
#define USDHC_INT_STATUS_CINT_SHIFT              (8U)
#define USDHC_INT_STATUS_RTE_MASK                (0x1000U)
#define USDHC_INT_STATUS_RTE_SHIFT               (12U)
#define USDHC_INT_STATUS_TP_MASK                 (0x4000U)
#define USDHC_INT_STATUS_TP_SHIFT                (14U)
#define USDHC_INT_STATUS_CTOE_MASK               (0x10000U)
#define USDHC_INT_STATUS_CTOE_SHIFT              (16U)
#define USDHC_INT_STATUS_CCE_MASK                (0x20000U)
#define USDHC_INT_STATUS_CCE_SHIFT               (17U)
#define USDHC_INT_STATUS_CEBE_MASK               (0x40000U)
#define USDHC_INT_STATUS_CEBE_SHIFT              (18U)
#define USDHC_INT_STATUS_CIE_MASK                (0x80000U)
#define USDHC_INT_STATUS_CIE_SHIFT               (19U)
#define USDHC_INT_STATUS_DTOE_MASK               (0x100000U)
#define USDHC_INT_STATUS_DTOE_SHIFT              (20U)
#define USDHC_INT_STATUS_DCE_MASK                (0x200000U)
#define USDHC_INT_STATUS_DCE_SHIFT               (21U)
#define USDHC_INT_STATUS_DEBE_MASK               (0x400000U)
#define USDHC_INT_STATUS_DEBE_SHIFT              (22U)
#define USDHC_INT_STATUS_AC12E_MASK              (0x1000000U)
#define USDHC_INT_STATUS_AC12E_SHIFT             (24U)
#define USDHC_INT_STATUS_TNE_MASK                (0x4000000U)
#define USDHC_INT_STATUS_TNE_SHIFT               (26U)
#define USDHC_INT_STATUS_DMAE_MASK               (0x10000000U)
#define USDHC_INT_STATUS_DMAE_SHIFT              (28U)
/*! @} */

/*! @name INT_STATUS_EN - Interrupt Status Enable */
/*! @{ */
#define USDHC_INT_STATUS_EN_CCSEN_MASK           (0x1U)
#define USDHC_INT_STATUS_EN_CCSEN_SHIFT          (0U)
#define USDHC_INT_STATUS_EN_TCSEN_MASK           (0x2U)
#define USDHC_INT_STATUS_EN_TCSEN_SHIFT          (1U)
#define USDHC_INT_STATUS_EN_BGESEN_MASK          (0x4U)
#define USDHC_INT_STATUS_EN_BGESEN_SHIFT         (2U)
#define USDHC_INT_STATUS_EN_DINTSEN_MASK         (0x8U)
#define USDHC_INT_STATUS_EN_DINTSEN_SHIFT        (3U)
#define USDHC_INT_STATUS_EN_BWRSEN_MASK          (0x10U)
#define USDHC_INT_STATUS_EN_BWRSEN_SHIFT         (4U)
#define USDHC_INT_STATUS_EN_BRRSEN_MASK          (0x20U)
#define USDHC_INT_STATUS_EN_BRRSEN_SHIFT         (5U)
#define USDHC_INT_STATUS_EN_CINSSEN_MASK         (0x40U)
#define USDHC_INT_STATUS_EN_CINSSEN_SHIFT        (6U)
#define USDHC_INT_STATUS_EN_CRMSEN_MASK          (0x80U)
#define USDHC_INT_STATUS_EN_CRMSEN_SHIFT         (7U)
#define USDHC_INT_STATUS_EN_CINTSEN_MASK         (0x100U)
#define USDHC_INT_STATUS_EN_CINTSEN_SHIFT        (8U)
#define USDHC_INT_STATUS_EN_RTESEN_MASK          (0x1000U)
#define USDHC_INT_STATUS_EN_RTESEN_SHIFT         (12U)
#define USDHC_INT_STATUS_EN_TPSEN_MASK           (0x4000U)
#define USDHC_INT_STATUS_EN_TPSEN_SHIFT          (14U)
#define USDHC_INT_STATUS_EN_CTOESEN_MASK         (0x10000U)
#define USDHC_INT_STATUS_EN_CTOESEN_SHIFT        (16U)
#define USDHC_INT_STATUS_EN_CCESEN_MASK          (0x20000U)
#define USDHC_INT_STATUS_EN_CCESEN_SHIFT         (17U)
#define USDHC_INT_STATUS_EN_CEBESEN_MASK         (0x40000U)
#define USDHC_INT_STATUS_EN_CEBESEN_SHIFT        (18U)
#define USDHC_INT_STATUS_EN_CIESEN_MASK          (0x80000U)
#define USDHC_INT_STATUS_EN_CIESEN_SHIFT         (19U)
#define USDHC_INT_STATUS_EN_DTOESEN_MASK         (0x100000U)
#define USDHC_INT_STATUS_EN_DTOESEN_SHIFT        (20U)
#define USDHC_INT_STATUS_EN_DCESEN_MASK          (0x200000U)
#define USDHC_INT_STATUS_EN_DCESEN_SHIFT         (21U)
#define USDHC_INT_STATUS_EN_DEBESEN_MASK         (0x400000U)
#define USDHC_INT_STATUS_EN_DEBESEN_SHIFT        (22U)
#define USDHC_INT_STATUS_EN_AC12ESEN_MASK        (0x1000000U)
#define USDHC_INT_STATUS_EN_AC12ESEN_SHIFT       (24U)
#define USDHC_INT_STATUS_EN_TNESEN_MASK          (0x4000000U)
#define USDHC_INT_STATUS_EN_TNESEN_SHIFT         (26U)
#define USDHC_INT_STATUS_EN_DMAESEN_MASK         (0x10000000U)
#define USDHC_INT_STATUS_EN_DMAESEN_SHIFT        (28U)
/*! @} */

/*! @name INT_SIGNAL_EN - Interrupt Signal Enable */
/*! @{ */
#define USDHC_INT_SIGNAL_EN_CCIEN_MASK           (0x1U)
#define USDHC_INT_SIGNAL_EN_CCIEN_SHIFT          (0U)
#define USDHC_INT_SIGNAL_EN_TCIEN_MASK           (0x2U)
#define USDHC_INT_SIGNAL_EN_TCIEN_SHIFT          (1U)
#define USDHC_INT_SIGNAL_EN_BGEIEN_MASK          (0x4U)
#define USDHC_INT_SIGNAL_EN_BGEIEN_SHIFT         (2U)
#define USDHC_INT_SIGNAL_EN_DINTIEN_MASK         (0x8U)
#define USDHC_INT_SIGNAL_EN_DINTIEN_SHIFT        (3U)
#define USDHC_INT_SIGNAL_EN_BWRIEN_MASK          (0x10U)
#define USDHC_INT_SIGNAL_EN_BWRIEN_SHIFT         (4U)
#define USDHC_INT_SIGNAL_EN_BRRIEN_MASK          (0x20U)
#define USDHC_INT_SIGNAL_EN_BRRIEN_SHIFT         (5U)
#define USDHC_INT_SIGNAL_EN_CINSIEN_MASK         (0x40U)
#define USDHC_INT_SIGNAL_EN_CINSIEN_SHIFT        (6U)
#define USDHC_INT_SIGNAL_EN_CRMIEN_MASK          (0x80U)
#define USDHC_INT_SIGNAL_EN_CRMIEN_SHIFT         (7U)
#define USDHC_INT_SIGNAL_EN_CINTIEN_MASK         (0x100U)
#define USDHC_INT_SIGNAL_EN_CINTIEN_SHIFT        (8U)
#define USDHC_INT_SIGNAL_EN_RTEIEN_MASK          (0x1000U)
#define USDHC_INT_SIGNAL_EN_RTEIEN_SHIFT         (12U)
#define USDHC_INT_SIGNAL_EN_TPIEN_MASK           (0x4000U)
#define USDHC_INT_SIGNAL_EN_TPIEN_SHIFT          (14U)
#define USDHC_INT_SIGNAL_EN_CTOEIEN_MASK         (0x10000U)
#define USDHC_INT_SIGNAL_EN_CTOEIEN_SHIFT        (16U)
#define USDHC_INT_SIGNAL_EN_CCEIEN_MASK          (0x20000U)
#define USDHC_INT_SIGNAL_EN_CCEIEN_SHIFT         (17U)
#define USDHC_INT_SIGNAL_EN_CEBEIEN_MASK         (0x40000U)
#define USDHC_INT_SIGNAL_EN_CEBEIEN_SHIFT        (18U)
#define USDHC_INT_SIGNAL_EN_CIEIEN_MASK          (0x80000U)
#define USDHC_INT_SIGNAL_EN_CIEIEN_SHIFT         (19U)
#define USDHC_INT_SIGNAL_EN_DTOEIEN_MASK         (0x100000U)
#define USDHC_INT_SIGNAL_EN_DTOEIEN_SHIFT        (20U)
#define USDHC_INT_SIGNAL_EN_DCEIEN_MASK          (0x200000U)
#define USDHC_INT_SIGNAL_EN_DCEIEN_SHIFT         (21U)
#define USDHC_INT_SIGNAL_EN_DEBEIEN_MASK         (0x400000U)
#define USDHC_INT_SIGNAL_EN_DEBEIEN_SHIFT        (22U)
#define USDHC_INT_SIGNAL_EN_AC12EIEN_MASK        (0x1000000U)
#define USDHC_INT_SIGNAL_EN_AC12EIEN_SHIFT       (24U)
#define USDHC_INT_SIGNAL_EN_TNEIEN_MASK          (0x4000000U)
#define USDHC_INT_SIGNAL_EN_TNEIEN_SHIFT         (26U)
#define USDHC_INT_SIGNAL_EN_DMAEIEN_MASK         (0x10000000U)
#define USDHC_INT_SIGNAL_EN_DMAEIEN_SHIFT        (28U)
/*! @} */

/*! @name AUTOCMD12_ERR_STATUS - Auto CMD12 Error Status */
/*! @{ */
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE_MASK   (0x1U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE_SHIFT  (0U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_MASK  (0x2U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_SHIFT (1U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_MASK  (0x4U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_SHIFT (2U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE_MASK   (0x8U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE_SHIFT  (3U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE_MASK   (0x10U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE_SHIFT  (4U)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_MASK (0x80U)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_SHIFT (7U)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_MASK (0x400000U)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_SHIFT (22U)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_MASK (0x800000U)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_SHIFT (23U)
/*! @} */

/*! @name HOST_CTRL_CAP - Host Controller Capabilities */
/*! @{ */
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_MASK   (0x1U)
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_SHIFT  (0U)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_MASK  (0x2U)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_SHIFT (1U)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_MASK   (0x4U)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_SHIFT  (2U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK (0xF00U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT (8U)
/*! TIME_COUNT_RETUNING - Time counter for retuning
 */
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING(x) (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT)) & USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_MASK (0x2000U)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_SHIFT (13U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK   (0xC000U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT  (14U)
/*! RETUNING_MODE - Retuning Mode
 *  0b00..Mode 1
 *  0b01..Mode 2
 *  0b10..Mode 3
 *  0b11..Reserved
 */
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT)) & USDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK)
#define USDHC_HOST_CTRL_CAP_MBL_MASK             (0x70000U)
#define USDHC_HOST_CTRL_CAP_MBL_SHIFT            (16U)
/*! MBL - Max block length
 *  0b000..512 bytes
 *  0b001..1024 bytes
 *  0b010..2048 bytes
 *  0b011..4096 bytes
 */
#define USDHC_HOST_CTRL_CAP_MBL(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_MBL_SHIFT)) & USDHC_HOST_CTRL_CAP_MBL_MASK)
#define USDHC_HOST_CTRL_CAP_ADMAS_MASK           (0x100000U)
#define USDHC_HOST_CTRL_CAP_ADMAS_SHIFT          (20U)
#define USDHC_HOST_CTRL_CAP_HSS_MASK             (0x200000U)
#define USDHC_HOST_CTRL_CAP_HSS_SHIFT            (21U)
#define USDHC_HOST_CTRL_CAP_DMAS_MASK            (0x400000U)
#define USDHC_HOST_CTRL_CAP_DMAS_SHIFT           (22U)
#define USDHC_HOST_CTRL_CAP_SRS_MASK             (0x800000U)
#define USDHC_HOST_CTRL_CAP_SRS_SHIFT            (23U)
#define USDHC_HOST_CTRL_CAP_VS33_MASK            (0x1000000U)
#define USDHC_HOST_CTRL_CAP_VS33_SHIFT           (24U)
#define USDHC_HOST_CTRL_CAP_VS30_MASK            (0x2000000U)
#define USDHC_HOST_CTRL_CAP_VS30_SHIFT           (25U)
#define USDHC_HOST_CTRL_CAP_VS18_MASK            (0x4000000U)
#define USDHC_HOST_CTRL_CAP_VS18_SHIFT           (26U)
/*! @} */

/*! @name WTMK_LVL - Watermark Level */
/*! @{ */
#define USDHC_WTMK_LVL_RD_WML_MASK               (0xFFU)
#define USDHC_WTMK_LVL_RD_WML_SHIFT              (0U)
/*! RD_WML - Read watermark level
 */
#define USDHC_WTMK_LVL_RD_WML(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_RD_WML_SHIFT)) & USDHC_WTMK_LVL_RD_WML_MASK)
#define USDHC_WTMK_LVL_RD_BRST_LEN_MASK          (0x1F00U)
#define USDHC_WTMK_LVL_RD_BRST_LEN_SHIFT         (8U)
/*! RD_BRST_LEN - Read burst length due to system restriction, the actual burst length might not exceed 16
 */
#define USDHC_WTMK_LVL_RD_BRST_LEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_RD_BRST_LEN_SHIFT)) & USDHC_WTMK_LVL_RD_BRST_LEN_MASK)
#define USDHC_WTMK_LVL_WR_WML_MASK               (0xFF0000U)
#define USDHC_WTMK_LVL_WR_WML_SHIFT              (16U)
/*! WR_WML - Write watermark level
 */
#define USDHC_WTMK_LVL_WR_WML(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_WR_WML_SHIFT)) & USDHC_WTMK_LVL_WR_WML_MASK)
#define USDHC_WTMK_LVL_WR_BRST_LEN_MASK          (0x1F000000U)
#define USDHC_WTMK_LVL_WR_BRST_LEN_SHIFT         (24U)
/*! WR_BRST_LEN - Write burst length due to system restriction, the actual burst length might not exceed 16
 */
#define USDHC_WTMK_LVL_WR_BRST_LEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_WR_BRST_LEN_SHIFT)) & USDHC_WTMK_LVL_WR_BRST_LEN_MASK)
/*! @} */

/*! @name MIX_CTRL - Mixer Control */
/*! @{ */
#define USDHC_MIX_CTRL_DMAEN_MASK                (0x1U)
#define USDHC_MIX_CTRL_DMAEN_SHIFT               (0U)
#define USDHC_MIX_CTRL_BCEN_MASK                 (0x2U)
#define USDHC_MIX_CTRL_BCEN_SHIFT                (1U)
#define USDHC_MIX_CTRL_AC12EN_MASK               (0x4U)
#define USDHC_MIX_CTRL_AC12EN_SHIFT              (2U)
#define USDHC_MIX_CTRL_DDR_EN_MASK               (0x8U)
#define USDHC_MIX_CTRL_DDR_EN_SHIFT              (3U)
#define USDHC_MIX_CTRL_DTDSEL_MASK               (0x10U)
#define USDHC_MIX_CTRL_DTDSEL_SHIFT              (4U)
#define USDHC_MIX_CTRL_MSBSEL_MASK               (0x20U)
#define USDHC_MIX_CTRL_MSBSEL_SHIFT              (5U)
#define USDHC_MIX_CTRL_NIBBLE_POS_MASK           (0x40U)
#define USDHC_MIX_CTRL_NIBBLE_POS_SHIFT          (6U)
#define USDHC_MIX_CTRL_AC23EN_MASK               (0x80U)
#define USDHC_MIX_CTRL_AC23EN_SHIFT              (7U)
#define USDHC_MIX_CTRL_EXE_TUNE_MASK             (0x400000U)
#define USDHC_MIX_CTRL_EXE_TUNE_SHIFT            (22U)
#define USDHC_MIX_CTRL_SMP_CLK_SEL_MASK          (0x800000U)
#define USDHC_MIX_CTRL_SMP_CLK_SEL_SHIFT         (23U)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN_MASK         (0x1000000U)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN_SHIFT        (24U)
#define USDHC_MIX_CTRL_FBCLK_SEL_MASK            (0x2000000U)
#define USDHC_MIX_CTRL_FBCLK_SEL_SHIFT           (25U)
#define USDHC_MIX_CTRL_HS400_MODE_MASK           (0x4000000U)
#define USDHC_MIX_CTRL_HS400_MODE_SHIFT          (26U)
/*! @} */

/*! @name FORCE_EVENT - Force Event */
/*! @{ */
#define USDHC_FORCE_EVENT_FEVTAC12NE_MASK        (0x1U)
#define USDHC_FORCE_EVENT_FEVTAC12NE_SHIFT       (0U)
#define USDHC_FORCE_EVENT_FEVTAC12TOE_MASK       (0x2U)
#define USDHC_FORCE_EVENT_FEVTAC12TOE_SHIFT      (1U)
#define USDHC_FORCE_EVENT_FEVTAC12CE_MASK        (0x4U)
#define USDHC_FORCE_EVENT_FEVTAC12CE_SHIFT       (2U)
#define USDHC_FORCE_EVENT_FEVTAC12EBE_MASK       (0x8U)
#define USDHC_FORCE_EVENT_FEVTAC12EBE_SHIFT      (3U)
#define USDHC_FORCE_EVENT_FEVTAC12IE_MASK        (0x10U)
#define USDHC_FORCE_EVENT_FEVTAC12IE_SHIFT       (4U)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E_MASK     (0x80U)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E_SHIFT    (7U)
#define USDHC_FORCE_EVENT_FEVTCTOE_MASK          (0x10000U)
#define USDHC_FORCE_EVENT_FEVTCTOE_SHIFT         (16U)
#define USDHC_FORCE_EVENT_FEVTCCE_MASK           (0x20000U)
#define USDHC_FORCE_EVENT_FEVTCCE_SHIFT          (17U)
#define USDHC_FORCE_EVENT_FEVTCEBE_MASK          (0x40000U)
#define USDHC_FORCE_EVENT_FEVTCEBE_SHIFT         (18U)
#define USDHC_FORCE_EVENT_FEVTCIE_MASK           (0x80000U)
#define USDHC_FORCE_EVENT_FEVTCIE_SHIFT          (19U)
#define USDHC_FORCE_EVENT_FEVTDTOE_MASK          (0x100000U)
#define USDHC_FORCE_EVENT_FEVTDTOE_SHIFT         (20U)
#define USDHC_FORCE_EVENT_FEVTDCE_MASK           (0x200000U)
#define USDHC_FORCE_EVENT_FEVTDCE_SHIFT          (21U)
#define USDHC_FORCE_EVENT_FEVTDEBE_MASK          (0x400000U)
#define USDHC_FORCE_EVENT_FEVTDEBE_SHIFT         (22U)
#define USDHC_FORCE_EVENT_FEVTAC12E_MASK         (0x1000000U)
#define USDHC_FORCE_EVENT_FEVTAC12E_SHIFT        (24U)
#define USDHC_FORCE_EVENT_FEVTTNE_MASK           (0x4000000U)
#define USDHC_FORCE_EVENT_FEVTTNE_SHIFT          (26U)
#define USDHC_FORCE_EVENT_FEVTDMAE_MASK          (0x10000000U)
#define USDHC_FORCE_EVENT_FEVTDMAE_SHIFT         (28U)
#define USDHC_FORCE_EVENT_FEVTCINT_MASK          (0x80000000U)
#define USDHC_FORCE_EVENT_FEVTCINT_SHIFT         (31U)
/*! @} */

/*! @name ADMA_ERR_STATUS - ADMA Error Status */
/*! @{ */
#define USDHC_ADMA_ERR_STATUS_ADMAES_MASK        (0x3U)
#define USDHC_ADMA_ERR_STATUS_ADMAES_SHIFT       (0U)
/*! ADMAES - ADMA error state (when ADMA error is occurred)
 */
#define USDHC_ADMA_ERR_STATUS_ADMAES(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_ERR_STATUS_ADMAES_SHIFT)) & USDHC_ADMA_ERR_STATUS_ADMAES_MASK)
#define USDHC_ADMA_ERR_STATUS_ADMALME_MASK       (0x4U)
#define USDHC_ADMA_ERR_STATUS_ADMALME_SHIFT      (2U)
#define USDHC_ADMA_ERR_STATUS_ADMADCE_MASK       (0x8U)
#define USDHC_ADMA_ERR_STATUS_ADMADCE_SHIFT      (3U)
/*! @} */

/*! @name ADMA_SYS_ADDR - ADMA System Address */
/*! @{ */
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK        (0xFFFFFFFCU)
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT       (2U)
/*! ADS_ADDR - ADMA system address
 */
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT)) & USDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK)
/*! @} */

/*! @name DLL_CTRL - DLL (Delay Line) Control */
/*! @{ */
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE_MASK      (0x1U)
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE_SHIFT     (0U)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET_MASK       (0x2U)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET_SHIFT      (1U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK (0x78U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT (3U)
/*! DLL_CTRL_SLV_DLY_TARGET0 - DLL slave delay target0
 */
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_MASK (0x80U)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_MASK (0x100U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_SHIFT (8U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0xFE00U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (9U)
/*! DLL_CTRL_SLV_OVERRIDE_VAL - DLL slave override val
 */
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK (0x70000U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT (16U)
/*! DLL_CTRL_SLV_DLY_TARGET1 - DLL slave delay target1
 */
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
/*! DLL_CTRL_SLV_UPDATE_INT - Slave delay line update interval
 */
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
/*! DLL_CTRL_REF_UPDATE_INT - DLL control loop update interval
 */
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK)
/*! @} */

/*! @name DLL_STATUS - DLL Status */
/*! @{ */
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_MASK   (0x1U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_SHIFT  (0U)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK_MASK   (0x2U)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK_SHIFT  (1U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK    (0x1FCU)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT   (2U)
/*! DLL_STS_SLV_SEL - Slave delay line select status
 */
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK    (0xFE00U)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT   (9U)
/*! DLL_STS_REF_SEL - Reference delay line select taps
 */
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK)
/*! @} */

/*! @name CLK_TUNE_CTRL_STATUS - CLK Tuning Control and Status */
/*! @{ */
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK (0xFU)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT (0U)
/*! DLY_CELL_SET_POST - Delay cells on the feedback clock between CLK_OUT and CLK_POST
 */
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK (0xF0U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT (4U)
/*! DLY_CELL_SET_OUT - Delay cells on the feedback clock between CLK_PRE and CLK_OUT
 */
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK (0x7F00U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT (8U)
/*! DLY_CELL_SET_PRE - delay cells on the feedback clock between the feedback clock and CLK_PRE
 */
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_MASK  (0x8000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_SHIFT (15U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK (0xF0000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT (16U)
/*! TAP_SEL_POST - Delay cells added on the feedback clock between CLK_OUT and CLK_POST
 */
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK (0xF00000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT (20U)
/*! TAP_SEL_OUT - Delay cells added on the feedback clock between CLK_PRE and CLK_OUT
 */
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK (0x7F000000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT (24U)
/*! TAP_SEL_PRE - TAP_SEL_PRE
 */
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_MASK  (0x80000000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_SHIFT (31U)
/*! @} */

/*! @name STROBE_DLL_CTRL - Strobe DLL control */
/*! @{ */
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE_MASK (0x1U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE_SHIFT (0U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET_MASK (0x2U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET_SHIFT (1U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_MASK (0x38U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_SHIFT (3U)
/*! STROBE_DLL_CTRL_SLV_DLY_TARGET - Strobe DLL Control Slave Delay Target
 */
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0_MASK (0x40U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0_SHIFT (6U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1_MASK (0x80U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1_SHIFT (7U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_MASK (0x100U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_SHIFT (8U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0xFE00U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (9U)
/*! STROBE_DLL_CTRL_SLV_OVERRIDE_VAL - Strobe DLL control slave Override value
 */
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
/*! STROBE_DLL_CTRL_SLV_UPDATE_INT - Strobe DLL control slave update interval
 */
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
/*! STROBE_DLL_CTRL_REF_UPDATE_INT - Strobe DLL control reference update interval
 */
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_MASK)
/*! @} */

/*! @name STROBE_DLL_STATUS - Strobe DLL status */
/*! @{ */
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK_MASK (0x1U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK_SHIFT (0U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK_MASK (0x2U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK_SHIFT (1U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_MASK (0x1FCU)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_SHIFT (2U)
/*! STROBE_DLL_STS_SLV_SEL - Strobe DLL status slave select
 */
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_SHIFT)) & USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_MASK)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_MASK (0xFE00U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_SHIFT (9U)
/*! STROBE_DLL_STS_REF_SEL - Strobe DLL status reference select
 */
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_SHIFT)) & USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_MASK)
/*! @} */

/*! @name VEND_SPEC - Vendor Specific Register */
/*! @{ */
#define USDHC_VEND_SPEC_VSELECT_MASK             (0x2U)
#define USDHC_VEND_SPEC_VSELECT_SHIFT            (1U)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN_MASK     (0x4U)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN_SHIFT    (2U)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_MASK  (0x8U)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_SHIFT (3U)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON_MASK        (0x100U)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON_SHIFT       (8U)
#define USDHC_VEND_SPEC_CRC_CHK_DIS_MASK         (0x8000U)
#define USDHC_VEND_SPEC_CRC_CHK_DIS_SHIFT        (15U)
#define USDHC_VEND_SPEC_CMD_BYTE_EN_MASK         (0x80000000U)
#define USDHC_VEND_SPEC_CMD_BYTE_EN_SHIFT        (31U)
/*! @} */

/*! @name MMC_BOOT - MMC Boot */
/*! @{ */
#define USDHC_MMC_BOOT_DTOCV_ACK_MASK            (0xFU)
#define USDHC_MMC_BOOT_DTOCV_ACK_SHIFT           (0U)
/*! DTOCV_ACK - Boot ACK time out
 *  0b0000..SDCLK x 2^14
 *  0b0001..SDCLK x 2^15
 *  0b0010..SDCLK x 2^16
 *  0b0011..SDCLK x 2^17
 *  0b0100..SDCLK x 2^18
 *  0b0101..SDCLK x 2^19
 *  0b0110..SDCLK x 2^20
 *  0b0111..SDCLK x 2^21
 *  0b1110..SDCLK x 2^28
 *  0b1111..SDCLK x 2^29
 */
#define USDHC_MMC_BOOT_DTOCV_ACK(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_DTOCV_ACK_SHIFT)) & USDHC_MMC_BOOT_DTOCV_ACK_MASK)
#define USDHC_MMC_BOOT_BOOT_ACK_MASK             (0x10U)
#define USDHC_MMC_BOOT_BOOT_ACK_SHIFT            (4U)
#define USDHC_MMC_BOOT_BOOT_MODE_MASK            (0x20U)
#define USDHC_MMC_BOOT_BOOT_MODE_SHIFT           (5U)
#define USDHC_MMC_BOOT_BOOT_EN_MASK              (0x40U)
#define USDHC_MMC_BOOT_BOOT_EN_SHIFT             (6U)
#define USDHC_MMC_BOOT_AUTO_SABG_EN_MASK         (0x80U)
#define USDHC_MMC_BOOT_AUTO_SABG_EN_SHIFT        (7U)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT_MASK     (0x100U)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT_SHIFT    (8U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT_MASK         (0xFFFF0000U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT        (16U)
/*! BOOT_BLK_CNT - Stop At Block Gap value of automatic mode
 */
#define USDHC_MMC_BOOT_BOOT_BLK_CNT(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT)) & USDHC_MMC_BOOT_BOOT_BLK_CNT_MASK)
/*! @} */

/*! @name VEND_SPEC2 - Vendor Specific 2 Register */
/*! @{ */
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST_MASK   (0x8U)
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST_SHIFT  (3U)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN_MASK     (0x10U)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN_SHIFT    (4U)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN_MASK     (0x20U)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN_SHIFT    (5U)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN_MASK      (0x40U)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN_SHIFT     (6U)
#define USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN_MASK (0x400U)
#define USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN_SHIFT (10U)
#define USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN_MASK (0x800U)
#define USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN_SHIFT (11U)
#define USDHC_VEND_SPEC2_ACMD23_ARGU2_EN_MASK    (0x1000U)
#define USDHC_VEND_SPEC2_ACMD23_ARGU2_EN_SHIFT   (12U)
/*! @} */

/*! @name TUNING_CTRL - Tuning Control */
/*! @{ */
#define USDHC_TUNING_CTRL_TUNING_START_TAP_MASK  (0xFFU)
#define USDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT (0U)
/*! TUNING_START_TAP - Tuning start
 */
#define USDHC_TUNING_CTRL_TUNING_START_TAP(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT)) & USDHC_TUNING_CTRL_TUNING_START_TAP_MASK)
#define USDHC_TUNING_CTRL_TUNING_COUNTER_MASK    (0xFF00U)
#define USDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT   (8U)
/*! TUNING_COUNTER - Tuning counter
 */
#define USDHC_TUNING_CTRL_TUNING_COUNTER(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT)) & USDHC_TUNING_CTRL_TUNING_COUNTER_MASK)
#define USDHC_TUNING_CTRL_TUNING_STEP_MASK       (0x70000U)
#define USDHC_TUNING_CTRL_TUNING_STEP_SHIFT      (16U)
/*! TUNING_STEP - TUNING_STEP
 */
#define USDHC_TUNING_CTRL_TUNING_STEP(x)         (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_STEP_SHIFT)) & USDHC_TUNING_CTRL_TUNING_STEP_MASK)
#define USDHC_TUNING_CTRL_TUNING_WINDOW_MASK     (0x700000U)
#define USDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT    (20U)
/*! TUNING_WINDOW - Data window
 */
#define USDHC_TUNING_CTRL_TUNING_WINDOW(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT)) & USDHC_TUNING_CTRL_TUNING_WINDOW_MASK)
#define USDHC_TUNING_CTRL_STD_TUNING_EN_MASK     (0x1000000U)
#define USDHC_TUNING_CTRL_STD_TUNING_EN_SHIFT    (24U)
/*! @} */


/*!
 * @}
 */ /* end of group USDHC_Register_Masks */


/* USDHC - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral USDHC0 base pointer */
  #define USDHC0_BASE_PTR                          ((USDHC_MemMapPtr)0x50136000u)
  /** Peripheral USDHC0 base pointer */
  #define USDHC0_BASE_PTR_NS                       ((USDHC_MemMapPtr)0x40136000u)
  /** Peripheral USDHC1 base pointer */
  #define USDHC1_BASE_PTR                          ((USDHC_MemMapPtr)0x50137000u)
  /** Peripheral USDHC1 base pointer */
  #define USDHC1_BASE_PTR_NS                       ((USDHC_MemMapPtr)0x40137000u)
  /** Array initializer of USDHC peripheral base pointers */
  #define USDHC_BASE_PTRS                          { USDHC0_BASE_PTR, USDHC1_BASE_PTR }
  /** Array initializer of USDHC peripheral base pointers */
  #define USDHC_BASE_PTRS_NS                       { USDHC0_BASE_PTR_NS, USDHC1_BASE_PTR_NS }
#else
  /** Peripheral USDHC0 base pointer */
  #define USDHC0_BASE_PTR                          ((USDHC_MemMapPtr)0x40136000u)
  /** Peripheral USDHC1 base pointer */
  #define USDHC1_BASE_PTR                          ((USDHC_MemMapPtr)0x40137000u)
  /** Array initializer of USDHC peripheral base pointers */
  #define USDHC_BASE_PTRS                          { USDHC0_BASE_PTR, USDHC1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- USDHC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Accessor_Macros USDHC - Register accessor macros
 * @{
 */


/* USDHC - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* USDHC0 */
  #define USDHC0_DS_ADDR                           USDHC_DS_ADDR_REG(USDHC0_BASE_PTR)
  #define USDHC0_DS_ADDR_NS                        USDHC_DS_ADDR_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_BLK_ATT                           USDHC_BLK_ATT_REG(USDHC0_BASE_PTR)
  #define USDHC0_BLK_ATT_NS                        USDHC_BLK_ATT_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_CMD_ARG                           USDHC_CMD_ARG_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_ARG_NS                        USDHC_CMD_ARG_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_XFR_TYP_NS                    USDHC_CMD_XFR_TYP_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_CMD_RSP0                          USDHC_CMD_RSP0_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_RSP0_NS                       USDHC_CMD_RSP0_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_CMD_RSP1                          USDHC_CMD_RSP1_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_RSP1_NS                       USDHC_CMD_RSP1_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_CMD_RSP2                          USDHC_CMD_RSP2_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_RSP2_NS                       USDHC_CMD_RSP2_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_CMD_RSP3                          USDHC_CMD_RSP3_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_RSP3_NS                       USDHC_CMD_RSP3_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(USDHC0_BASE_PTR)
  #define USDHC0_DATA_BUFF_ACC_PORT_NS             USDHC_DATA_BUFF_ACC_PORT_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_PRES_STATE                        USDHC_PRES_STATE_REG(USDHC0_BASE_PTR)
  #define USDHC0_PRES_STATE_NS                     USDHC_PRES_STATE_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_PROT_CTRL                         USDHC_PROT_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_PROT_CTRL_NS                      USDHC_PROT_CTRL_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_SYS_CTRL                          USDHC_SYS_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_SYS_CTRL_NS                       USDHC_SYS_CTRL_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_INT_STATUS                        USDHC_INT_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_INT_STATUS_NS                     USDHC_INT_STATUS_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(USDHC0_BASE_PTR)
  #define USDHC0_INT_STATUS_EN_NS                  USDHC_INT_STATUS_EN_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(USDHC0_BASE_PTR)
  #define USDHC0_INT_SIGNAL_EN_NS                  USDHC_INT_SIGNAL_EN_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_AUTOCMD12_ERR_STATUS_NS           USDHC_AUTOCMD12_ERR_STATUS_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(USDHC0_BASE_PTR)
  #define USDHC0_HOST_CTRL_CAP_NS                  USDHC_HOST_CTRL_CAP_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_WTMK_LVL                          USDHC_WTMK_LVL_REG(USDHC0_BASE_PTR)
  #define USDHC0_WTMK_LVL_NS                       USDHC_WTMK_LVL_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_MIX_CTRL                          USDHC_MIX_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_MIX_CTRL_NS                       USDHC_MIX_CTRL_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(USDHC0_BASE_PTR)
  #define USDHC0_FORCE_EVENT_NS                    USDHC_FORCE_EVENT_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_ADMA_ERR_STATUS_NS                USDHC_ADMA_ERR_STATUS_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(USDHC0_BASE_PTR)
  #define USDHC0_ADMA_SYS_ADDR_NS                  USDHC_ADMA_SYS_ADDR_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_DLL_CTRL                          USDHC_DLL_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_DLL_CTRL_NS                       USDHC_DLL_CTRL_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_DLL_STATUS                        USDHC_DLL_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_DLL_STATUS_NS                     USDHC_DLL_STATUS_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_CLK_TUNE_CTRL_STATUS_NS           USDHC_CLK_TUNE_CTRL_STATUS_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_STROBE_DLL_CTRL                   USDHC_STROBE_DLL_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_STROBE_DLL_CTRL_NS                USDHC_STROBE_DLL_CTRL_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_STROBE_DLL_STATUS                 USDHC_STROBE_DLL_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_STROBE_DLL_STATUS_NS              USDHC_STROBE_DLL_STATUS_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_VEND_SPEC                         USDHC_VEND_SPEC_REG(USDHC0_BASE_PTR)
  #define USDHC0_VEND_SPEC_NS                      USDHC_VEND_SPEC_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_MMC_BOOT                          USDHC_MMC_BOOT_REG(USDHC0_BASE_PTR)
  #define USDHC0_MMC_BOOT_NS                       USDHC_MMC_BOOT_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(USDHC0_BASE_PTR)
  #define USDHC0_VEND_SPEC2_NS                     USDHC_VEND_SPEC2_REG(USDHC0_BASE_PTR_NS)
  #define USDHC0_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_TUNING_CTRL_NS                    USDHC_TUNING_CTRL_REG(USDHC0_BASE_PTR_NS)
  /* USDHC1 */
  #define USDHC1_DS_ADDR                           USDHC_DS_ADDR_REG(USDHC1_BASE_PTR)
  #define USDHC1_DS_ADDR_NS                        USDHC_DS_ADDR_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_BLK_ATT                           USDHC_BLK_ATT_REG(USDHC1_BASE_PTR)
  #define USDHC1_BLK_ATT_NS                        USDHC_BLK_ATT_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_CMD_ARG                           USDHC_CMD_ARG_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_ARG_NS                        USDHC_CMD_ARG_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_XFR_TYP_NS                    USDHC_CMD_XFR_TYP_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_CMD_RSP0                          USDHC_CMD_RSP0_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_RSP0_NS                       USDHC_CMD_RSP0_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_CMD_RSP1                          USDHC_CMD_RSP1_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_RSP1_NS                       USDHC_CMD_RSP1_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_CMD_RSP2                          USDHC_CMD_RSP2_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_RSP2_NS                       USDHC_CMD_RSP2_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_CMD_RSP3                          USDHC_CMD_RSP3_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_RSP3_NS                       USDHC_CMD_RSP3_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(USDHC1_BASE_PTR)
  #define USDHC1_DATA_BUFF_ACC_PORT_NS             USDHC_DATA_BUFF_ACC_PORT_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_PRES_STATE                        USDHC_PRES_STATE_REG(USDHC1_BASE_PTR)
  #define USDHC1_PRES_STATE_NS                     USDHC_PRES_STATE_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_PROT_CTRL                         USDHC_PROT_CTRL_REG(USDHC1_BASE_PTR)
  #define USDHC1_PROT_CTRL_NS                      USDHC_PROT_CTRL_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_SYS_CTRL                          USDHC_SYS_CTRL_REG(USDHC1_BASE_PTR)
  #define USDHC1_SYS_CTRL_NS                       USDHC_SYS_CTRL_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_INT_STATUS                        USDHC_INT_STATUS_REG(USDHC1_BASE_PTR)
  #define USDHC1_INT_STATUS_NS                     USDHC_INT_STATUS_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(USDHC1_BASE_PTR)
  #define USDHC1_INT_STATUS_EN_NS                  USDHC_INT_STATUS_EN_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(USDHC1_BASE_PTR)
  #define USDHC1_INT_SIGNAL_EN_NS                  USDHC_INT_SIGNAL_EN_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(USDHC1_BASE_PTR)
  #define USDHC1_AUTOCMD12_ERR_STATUS_NS           USDHC_AUTOCMD12_ERR_STATUS_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(USDHC1_BASE_PTR)
  #define USDHC1_HOST_CTRL_CAP_NS                  USDHC_HOST_CTRL_CAP_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_WTMK_LVL                          USDHC_WTMK_LVL_REG(USDHC1_BASE_PTR)
  #define USDHC1_WTMK_LVL_NS                       USDHC_WTMK_LVL_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_MIX_CTRL                          USDHC_MIX_CTRL_REG(USDHC1_BASE_PTR)
  #define USDHC1_MIX_CTRL_NS                       USDHC_MIX_CTRL_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(USDHC1_BASE_PTR)
  #define USDHC1_FORCE_EVENT_NS                    USDHC_FORCE_EVENT_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(USDHC1_BASE_PTR)
  #define USDHC1_ADMA_ERR_STATUS_NS                USDHC_ADMA_ERR_STATUS_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(USDHC1_BASE_PTR)
  #define USDHC1_ADMA_SYS_ADDR_NS                  USDHC_ADMA_SYS_ADDR_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_DLL_CTRL                          USDHC_DLL_CTRL_REG(USDHC1_BASE_PTR)
  #define USDHC1_DLL_CTRL_NS                       USDHC_DLL_CTRL_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_DLL_STATUS                        USDHC_DLL_STATUS_REG(USDHC1_BASE_PTR)
  #define USDHC1_DLL_STATUS_NS                     USDHC_DLL_STATUS_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(USDHC1_BASE_PTR)
  #define USDHC1_CLK_TUNE_CTRL_STATUS_NS           USDHC_CLK_TUNE_CTRL_STATUS_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_VEND_SPEC                         USDHC_VEND_SPEC_REG(USDHC1_BASE_PTR)
  #define USDHC1_VEND_SPEC_NS                      USDHC_VEND_SPEC_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_MMC_BOOT                          USDHC_MMC_BOOT_REG(USDHC1_BASE_PTR)
  #define USDHC1_MMC_BOOT_NS                       USDHC_MMC_BOOT_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(USDHC1_BASE_PTR)
  #define USDHC1_VEND_SPEC2_NS                     USDHC_VEND_SPEC2_REG(USDHC1_BASE_PTR_NS)
  #define USDHC1_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(USDHC1_BASE_PTR)
  #define USDHC1_TUNING_CTRL_NS                    USDHC_TUNING_CTRL_REG(USDHC1_BASE_PTR_NS)
#else
  /* USDHC0 */
  #define USDHC0_DS_ADDR                           USDHC_DS_ADDR_REG(USDHC0_BASE_PTR)
  #define USDHC0_BLK_ATT                           USDHC_BLK_ATT_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_ARG                           USDHC_CMD_ARG_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_RSP0                          USDHC_CMD_RSP0_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_RSP1                          USDHC_CMD_RSP1_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_RSP2                          USDHC_CMD_RSP2_REG(USDHC0_BASE_PTR)
  #define USDHC0_CMD_RSP3                          USDHC_CMD_RSP3_REG(USDHC0_BASE_PTR)
  #define USDHC0_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(USDHC0_BASE_PTR)
  #define USDHC0_PRES_STATE                        USDHC_PRES_STATE_REG(USDHC0_BASE_PTR)
  #define USDHC0_PROT_CTRL                         USDHC_PROT_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_SYS_CTRL                          USDHC_SYS_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_INT_STATUS                        USDHC_INT_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(USDHC0_BASE_PTR)
  #define USDHC0_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(USDHC0_BASE_PTR)
  #define USDHC0_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(USDHC0_BASE_PTR)
  #define USDHC0_WTMK_LVL                          USDHC_WTMK_LVL_REG(USDHC0_BASE_PTR)
  #define USDHC0_MIX_CTRL                          USDHC_MIX_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(USDHC0_BASE_PTR)
  #define USDHC0_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(USDHC0_BASE_PTR)
  #define USDHC0_DLL_CTRL                          USDHC_DLL_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_DLL_STATUS                        USDHC_DLL_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_STROBE_DLL_CTRL                   USDHC_STROBE_DLL_CTRL_REG(USDHC0_BASE_PTR)
  #define USDHC0_STROBE_DLL_STATUS                 USDHC_STROBE_DLL_STATUS_REG(USDHC0_BASE_PTR)
  #define USDHC0_VEND_SPEC                         USDHC_VEND_SPEC_REG(USDHC0_BASE_PTR)
  #define USDHC0_MMC_BOOT                          USDHC_MMC_BOOT_REG(USDHC0_BASE_PTR)
  #define USDHC0_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(USDHC0_BASE_PTR)
  #define USDHC0_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(USDHC0_BASE_PTR)
  /* USDHC1 */
  #define USDHC1_DS_ADDR                           USDHC_DS_ADDR_REG(USDHC1_BASE_PTR)
  #define USDHC1_BLK_ATT                           USDHC_BLK_ATT_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_ARG                           USDHC_CMD_ARG_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_RSP0                          USDHC_CMD_RSP0_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_RSP1                          USDHC_CMD_RSP1_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_RSP2                          USDHC_CMD_RSP2_REG(USDHC1_BASE_PTR)
  #define USDHC1_CMD_RSP3                          USDHC_CMD_RSP3_REG(USDHC1_BASE_PTR)
  #define USDHC1_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(USDHC1_BASE_PTR)
  #define USDHC1_PRES_STATE                        USDHC_PRES_STATE_REG(USDHC1_BASE_PTR)
  #define USDHC1_PROT_CTRL                         USDHC_PROT_CTRL_REG(USDHC1_BASE_PTR)
  #define USDHC1_SYS_CTRL                          USDHC_SYS_CTRL_REG(USDHC1_BASE_PTR)
  #define USDHC1_INT_STATUS                        USDHC_INT_STATUS_REG(USDHC1_BASE_PTR)
  #define USDHC1_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(USDHC1_BASE_PTR)
  #define USDHC1_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(USDHC1_BASE_PTR)
  #define USDHC1_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(USDHC1_BASE_PTR)
  #define USDHC1_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(USDHC1_BASE_PTR)
  #define USDHC1_WTMK_LVL                          USDHC_WTMK_LVL_REG(USDHC1_BASE_PTR)
  #define USDHC1_MIX_CTRL                          USDHC_MIX_CTRL_REG(USDHC1_BASE_PTR)
  #define USDHC1_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(USDHC1_BASE_PTR)
  #define USDHC1_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(USDHC1_BASE_PTR)
  #define USDHC1_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(USDHC1_BASE_PTR)
  #define USDHC1_DLL_CTRL                          USDHC_DLL_CTRL_REG(USDHC1_BASE_PTR)
  #define USDHC1_DLL_STATUS                        USDHC_DLL_STATUS_REG(USDHC1_BASE_PTR)
  #define USDHC1_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(USDHC1_BASE_PTR)
  #define USDHC1_VEND_SPEC                         USDHC_VEND_SPEC_REG(USDHC1_BASE_PTR)
  #define USDHC1_MMC_BOOT                          USDHC_MMC_BOOT_REG(USDHC1_BASE_PTR)
  #define USDHC1_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(USDHC1_BASE_PTR)
  #define USDHC1_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(USDHC1_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group USDHC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USDHC_Peripheral */


/* ----------------------------------------------------------------------------
   -- UTICK
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UTICK_Peripheral UTICK
 * @{
 */

/** UTICK - Peripheral register structure */
typedef struct UTICK_MemMap {
  uint32_t CTRL;                                   /**< Control, offset: 0x0 */
  uint32_t STAT;                                   /**< Status, offset: 0x4 */
  uint32_t CFG;                                    /**< Capture Configuration, offset: 0x8 */
  uint32_t CAPCLR;                                 /**< Capture Clear, offset: 0xC */
  uint32_t CAP[4];                                 /**< Capture, array offset: 0x10, array step: 0x4 */
} volatile *UTICK_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- UTICK - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UTICK_Register_Accessor_Macros UTICK - Register accessor macros
 * @{
 */


/* UTICK - Register accessors */
#define UTICK_CTRL_REG(base)                     ((base)->CTRL)
#define UTICK_STAT_REG(base)                     ((base)->STAT)
#define UTICK_CFG_REG(base)                      ((base)->CFG)
#define UTICK_CAPCLR_REG(base)                   ((base)->CAPCLR)
#define UTICK_CAP_REG(base,index)                ((base)->CAP[index])

/*!
 * @}
 */ /* end of group UTICK_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- UTICK Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UTICK_Register_Masks UTICK Register Masks
 * @{
 */

/*! @name CTRL - Control */
/*! @{ */
#define UTICK_CTRL_DELAYVAL_MASK                 (0x7FFFFFFFU)
#define UTICK_CTRL_DELAYVAL_SHIFT                (0U)
/*! DELAYVAL - Tick interval
 */
#define UTICK_CTRL_DELAYVAL(x)                   (((uint32_t)(((uint32_t)(x)) << UTICK_CTRL_DELAYVAL_SHIFT)) & UTICK_CTRL_DELAYVAL_MASK)
#define UTICK_CTRL_REPEAT_MASK                   (0x80000000U)
#define UTICK_CTRL_REPEAT_SHIFT                  (31U)
/*! @} */

/*! @name STAT - Status */
/*! @{ */
#define UTICK_STAT_INTR_MASK                     (0x1U)
#define UTICK_STAT_INTR_SHIFT                    (0U)
#define UTICK_STAT_ACTIVE_MASK                   (0x2U)
#define UTICK_STAT_ACTIVE_SHIFT                  (1U)
/*! @} */

/*! @name CFG - Capture Configuration */
/*! @{ */
#define UTICK_CFG_CAPEN0_MASK                    (0x1U)
#define UTICK_CFG_CAPEN0_SHIFT                   (0U)
#define UTICK_CFG_CAPEN1_MASK                    (0x2U)
#define UTICK_CFG_CAPEN1_SHIFT                   (1U)
#define UTICK_CFG_CAPEN2_MASK                    (0x4U)
#define UTICK_CFG_CAPEN2_SHIFT                   (2U)
#define UTICK_CFG_CAPEN3_MASK                    (0x8U)
#define UTICK_CFG_CAPEN3_SHIFT                   (3U)
#define UTICK_CFG_CAPPOL0_MASK                   (0x100U)
#define UTICK_CFG_CAPPOL0_SHIFT                  (8U)
#define UTICK_CFG_CAPPOL1_MASK                   (0x200U)
#define UTICK_CFG_CAPPOL1_SHIFT                  (9U)
#define UTICK_CFG_CAPPOL2_MASK                   (0x400U)
#define UTICK_CFG_CAPPOL2_SHIFT                  (10U)
#define UTICK_CFG_CAPPOL3_MASK                   (0x800U)
#define UTICK_CFG_CAPPOL3_SHIFT                  (11U)
/*! @} */

/*! @name CAPCLR - Capture Clear */
/*! @{ */
#define UTICK_CAPCLR_CAPCLR0_MASK                (0x1U)
#define UTICK_CAPCLR_CAPCLR0_SHIFT               (0U)
#define UTICK_CAPCLR_CAPCLR1_MASK                (0x2U)
#define UTICK_CAPCLR_CAPCLR1_SHIFT               (1U)
#define UTICK_CAPCLR_CAPCLR2_MASK                (0x4U)
#define UTICK_CAPCLR_CAPCLR2_SHIFT               (2U)
#define UTICK_CAPCLR_CAPCLR3_MASK                (0x8U)
#define UTICK_CAPCLR_CAPCLR3_SHIFT               (3U)
/*! @} */

/*! @name CAP - Capture */
/*! @{ */
#define UTICK_CAP_CAP_VALUE_MASK                 (0x7FFFFFFFU)
#define UTICK_CAP_CAP_VALUE_SHIFT                (0U)
/*! CAP_VALUE - Captured value for the related capture event
 */
#define UTICK_CAP_CAP_VALUE(x)                   (((uint32_t)(((uint32_t)(x)) << UTICK_CAP_CAP_VALUE_SHIFT)) & UTICK_CAP_CAP_VALUE_MASK)
#define UTICK_CAP_VALID_MASK                     (0x80000000U)
#define UTICK_CAP_VALID_SHIFT                    (31U)
/*! @} */

/* The count of UTICK_CAP */
#define UTICK_CAP_COUNT                          (4U)


/*!
 * @}
 */ /* end of group UTICK_Register_Masks */


/* UTICK - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral UTICK0 base pointer */
  #define UTICK0_BASE_PTR                          ((UTICK_MemMapPtr)0x5000F000u)
  /** Peripheral UTICK0 base pointer */
  #define UTICK0_BASE_PTR_NS                       ((UTICK_MemMapPtr)0x4000F000u)
  /** Array initializer of UTICK peripheral base pointers */
  #define UTICK_BASE_PTRS                          { UTICK0_BASE_PTR }
  /** Array initializer of UTICK peripheral base pointers */
  #define UTICK_BASE_PTRS_NS                       { UTICK0_BASE_PTR_NS }
#else
  /** Peripheral UTICK0 base pointer */
  #define UTICK0_BASE_PTR                          ((UTICK_MemMapPtr)0x4000F000u)
  /** Array initializer of UTICK peripheral base pointers */
  #define UTICK_BASE_PTRS                          { UTICK0_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- UTICK - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UTICK_Register_Accessor_Macros UTICK - Register accessor macros
 * @{
 */


/* UTICK - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* UTICK0 */
  #define UTICK0_CTRL                              UTICK_CTRL_REG(UTICK0_BASE_PTR)
  #define UTICK0_CTRL_NS                           UTICK_CTRL_REG(UTICK0_BASE_PTR_NS)
  #define UTICK0_STAT                              UTICK_STAT_REG(UTICK0_BASE_PTR)
  #define UTICK0_STAT_NS                           UTICK_STAT_REG(UTICK0_BASE_PTR_NS)
  #define UTICK0_CFG                               UTICK_CFG_REG(UTICK0_BASE_PTR)
  #define UTICK0_CFG_NS                            UTICK_CFG_REG(UTICK0_BASE_PTR_NS)
  #define UTICK0_CAPCLR                            UTICK_CAPCLR_REG(UTICK0_BASE_PTR)
  #define UTICK0_CAPCLR_NS                         UTICK_CAPCLR_REG(UTICK0_BASE_PTR_NS)
  #define UTICK0_CAP0                              UTICK_CAP_REG(UTICK0_BASE_PTR,0)
  #define UTICK0_CAP0_NS                           UTICK_CAP_REG(UTICK0_BASE_PTR_NS,0)
  #define UTICK0_CAP1                              UTICK_CAP_REG(UTICK0_BASE_PTR,1)
  #define UTICK0_CAP1_NS                           UTICK_CAP_REG(UTICK0_BASE_PTR_NS,1)
  #define UTICK0_CAP2                              UTICK_CAP_REG(UTICK0_BASE_PTR,2)
  #define UTICK0_CAP2_NS                           UTICK_CAP_REG(UTICK0_BASE_PTR_NS,2)
  #define UTICK0_CAP3                              UTICK_CAP_REG(UTICK0_BASE_PTR,3)
  #define UTICK0_CAP3_NS                           UTICK_CAP_REG(UTICK0_BASE_PTR_NS,3)
#else
  /* UTICK0 */
  #define UTICK0_CTRL                              UTICK_CTRL_REG(UTICK0_BASE_PTR)
  #define UTICK0_STAT                              UTICK_STAT_REG(UTICK0_BASE_PTR)
  #define UTICK0_CFG                               UTICK_CFG_REG(UTICK0_BASE_PTR)
  #define UTICK0_CAPCLR                            UTICK_CAPCLR_REG(UTICK0_BASE_PTR)
  #define UTICK0_CAP0                              UTICK_CAP_REG(UTICK0_BASE_PTR,0)
  #define UTICK0_CAP1                              UTICK_CAP_REG(UTICK0_BASE_PTR,1)
  #define UTICK0_CAP2                              UTICK_CAP_REG(UTICK0_BASE_PTR,2)
  #define UTICK0_CAP3                              UTICK_CAP_REG(UTICK0_BASE_PTR,3)
#endif

/* UTICK - Register array accessors */
#define UTICK0_CAP(index)                        UTICK_CAP_REG(UTICK0_BASE_PTR,index)
#define UTICK0_CAP_NS(index)                     UTICK_CAP_REG(UTICK0_BASE_PTR_NS,index)
#define UTICK0_CAP(index)                        UTICK_CAP_REG(UTICK0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group UTICK_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group UTICK_Peripheral */


/* ----------------------------------------------------------------------------
   -- WWDT
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WWDT_Peripheral WWDT
 * @{
 */

/** WWDT - Peripheral register structure */
typedef struct WWDT_MemMap {
  uint32_t MOD;                                    /**< Mode, offset: 0x0 */
  uint32_t TC;                                     /**< Timer Constant, offset: 0x4 */
  uint32_t FEED;                                   /**< Feed Sequence, offset: 0x8 */
  uint32_t TV;                                     /**< Timer Value, offset: 0xC */
  uint8_t RESERVED_0[4];
  uint32_t WARNINT;                                /**< Warning Interrupt Compare Value, offset: 0x14 */
  uint32_t WINDOW;                                 /**< Window Compare Value, offset: 0x18 */
} volatile *WWDT_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- WWDT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WWDT_Register_Accessor_Macros WWDT - Register accessor macros
 * @{
 */


/* WWDT - Register accessors */
#define WWDT_MOD_REG(base)                       ((base)->MOD)
#define WWDT_TC_REG(base)                        ((base)->TC)
#define WWDT_FEED_REG(base)                      ((base)->FEED)
#define WWDT_TV_REG(base)                        ((base)->TV)
#define WWDT_WARNINT_REG(base)                   ((base)->WARNINT)
#define WWDT_WINDOW_REG(base)                    ((base)->WINDOW)

/*!
 * @}
 */ /* end of group WWDT_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- WWDT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WWDT_Register_Masks WWDT Register Masks
 * @{
 */

/*! @name MOD - Mode */
/*! @{ */
#define WWDT_MOD_WDEN_MASK                       (0x1U)
#define WWDT_MOD_WDEN_SHIFT                      (0U)
#define WWDT_MOD_WDRESET_MASK                    (0x2U)
#define WWDT_MOD_WDRESET_SHIFT                   (1U)
#define WWDT_MOD_WDTOF_MASK                      (0x4U)
#define WWDT_MOD_WDTOF_SHIFT                     (2U)
#define WWDT_MOD_WDINT_MASK                      (0x8U)
#define WWDT_MOD_WDINT_SHIFT                     (3U)
#define WWDT_MOD_WDPROTECT_MASK                  (0x10U)
#define WWDT_MOD_WDPROTECT_SHIFT                 (4U)
#define WWDT_MOD_LOCK_MASK                       (0x20U)
#define WWDT_MOD_LOCK_SHIFT                      (5U)
/*! @} */

/*! @name TC - Timer Constant */
/*! @{ */
#define WWDT_TC_COUNT_MASK                       (0xFFFFFFU)
#define WWDT_TC_COUNT_SHIFT                      (0U)
/*! COUNT - Watchdog Timeout Value
 */
#define WWDT_TC_COUNT(x)                         (((uint32_t)(((uint32_t)(x)) << WWDT_TC_COUNT_SHIFT)) & WWDT_TC_COUNT_MASK)
/*! @} */

/*! @name FEED - Feed Sequence */
/*! @{ */
#define WWDT_FEED_FEED_MASK                      (0xFFU)
#define WWDT_FEED_FEED_SHIFT                     (0U)
/*! FEED - Feed Value
 */
#define WWDT_FEED_FEED(x)                        (((uint32_t)(((uint32_t)(x)) << WWDT_FEED_FEED_SHIFT)) & WWDT_FEED_FEED_MASK)
/*! @} */

/*! @name TV - Timer Value */
/*! @{ */
#define WWDT_TV_COUNT_MASK                       (0xFFFFFFU)
#define WWDT_TV_COUNT_SHIFT                      (0U)
/*! COUNT - Counter Timer Value
 */
#define WWDT_TV_COUNT(x)                         (((uint32_t)(((uint32_t)(x)) << WWDT_TV_COUNT_SHIFT)) & WWDT_TV_COUNT_MASK)
/*! @} */

/*! @name WARNINT - Warning Interrupt Compare Value */
/*! @{ */
#define WWDT_WARNINT_WARNINT_MASK                (0x3FFU)
#define WWDT_WARNINT_WARNINT_SHIFT               (0U)
/*! WARNINT - Watchdog Warning Interrupt Compare Value
 */
#define WWDT_WARNINT_WARNINT(x)                  (((uint32_t)(((uint32_t)(x)) << WWDT_WARNINT_WARNINT_SHIFT)) & WWDT_WARNINT_WARNINT_MASK)
/*! @} */

/*! @name WINDOW - Window Compare Value */
/*! @{ */
#define WWDT_WINDOW_WINDOW_MASK                  (0xFFFFFFU)
#define WWDT_WINDOW_WINDOW_SHIFT                 (0U)
/*! WINDOW - Watchdog Window Value.
 */
#define WWDT_WINDOW_WINDOW(x)                    (((uint32_t)(((uint32_t)(x)) << WWDT_WINDOW_WINDOW_SHIFT)) & WWDT_WINDOW_WINDOW_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group WWDT_Register_Masks */


/* WWDT - Peripheral instance base addresses */
#if (__ARM_FEATURE_CMSE & 0x2)
  /** Peripheral WWDT0 base pointer */
  #define WWDT0_BASE_PTR                           ((WWDT_MemMapPtr)0x5000E000u)
  /** Peripheral WWDT0 base pointer */
  #define WWDT0_BASE_PTR_NS                        ((WWDT_MemMapPtr)0x4000E000u)
  /** Peripheral WWDT1 base pointer */
  #define WWDT1_BASE_PTR                           ((WWDT_MemMapPtr)0x5002E000u)
  /** Peripheral WWDT1 base pointer */
  #define WWDT1_BASE_PTR_NS                        ((WWDT_MemMapPtr)0x4002E000u)
  /** Array initializer of WWDT peripheral base pointers */
  #define WWDT_BASE_PTRS                           { WWDT0_BASE_PTR, WWDT1_BASE_PTR }
  /** Array initializer of WWDT peripheral base pointers */
  #define WWDT_BASE_PTRS_NS                        { WWDT0_BASE_PTR_NS, WWDT1_BASE_PTR_NS }
#else
  /** Peripheral WWDT0 base pointer */
  #define WWDT0_BASE_PTR                           ((WWDT_MemMapPtr)0x4000E000u)
  /** Peripheral WWDT1 base pointer */
  #define WWDT1_BASE_PTR                           ((WWDT_MemMapPtr)0x4002E000u)
  /** Array initializer of WWDT peripheral base pointers */
  #define WWDT_BASE_PTRS                           { WWDT0_BASE_PTR, WWDT1_BASE_PTR }
#endif

/* ----------------------------------------------------------------------------
   -- WWDT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WWDT_Register_Accessor_Macros WWDT - Register accessor macros
 * @{
 */


/* WWDT - Register instance definitions */
#if (__ARM_FEATURE_CMSE & 0x2)
  /* WWDT0 */
  #define WWDT0_MOD                                WWDT_MOD_REG(WWDT0_BASE_PTR)
  #define WWDT0_MOD_NS                             WWDT_MOD_REG(WWDT0_BASE_PTR_NS)
  #define WWDT0_TC                                 WWDT_TC_REG(WWDT0_BASE_PTR)
  #define WWDT0_TC_NS                              WWDT_TC_REG(WWDT0_BASE_PTR_NS)
  #define WWDT0_FEED                               WWDT_FEED_REG(WWDT0_BASE_PTR)
  #define WWDT0_FEED_NS                            WWDT_FEED_REG(WWDT0_BASE_PTR_NS)
  #define WWDT0_TV                                 WWDT_TV_REG(WWDT0_BASE_PTR)
  #define WWDT0_TV_NS                              WWDT_TV_REG(WWDT0_BASE_PTR_NS)
  #define WWDT0_WARNINT                            WWDT_WARNINT_REG(WWDT0_BASE_PTR)
  #define WWDT0_WARNINT_NS                         WWDT_WARNINT_REG(WWDT0_BASE_PTR_NS)
  #define WWDT0_WINDOW                             WWDT_WINDOW_REG(WWDT0_BASE_PTR)
  #define WWDT0_WINDOW_NS                          WWDT_WINDOW_REG(WWDT0_BASE_PTR_NS)
  /* WWDT1 */
  #define WWDT1_MOD                                WWDT_MOD_REG(WWDT1_BASE_PTR)
  #define WWDT1_MOD_NS                             WWDT_MOD_REG(WWDT1_BASE_PTR_NS)
  #define WWDT1_TC                                 WWDT_TC_REG(WWDT1_BASE_PTR)
  #define WWDT1_TC_NS                              WWDT_TC_REG(WWDT1_BASE_PTR_NS)
  #define WWDT1_FEED                               WWDT_FEED_REG(WWDT1_BASE_PTR)
  #define WWDT1_FEED_NS                            WWDT_FEED_REG(WWDT1_BASE_PTR_NS)
  #define WWDT1_TV                                 WWDT_TV_REG(WWDT1_BASE_PTR)
  #define WWDT1_TV_NS                              WWDT_TV_REG(WWDT1_BASE_PTR_NS)
  #define WWDT1_WARNINT                            WWDT_WARNINT_REG(WWDT1_BASE_PTR)
  #define WWDT1_WARNINT_NS                         WWDT_WARNINT_REG(WWDT1_BASE_PTR_NS)
  #define WWDT1_WINDOW                             WWDT_WINDOW_REG(WWDT1_BASE_PTR)
  #define WWDT1_WINDOW_NS                          WWDT_WINDOW_REG(WWDT1_BASE_PTR_NS)
#else
  /* WWDT0 */
  #define WWDT0_MOD                                WWDT_MOD_REG(WWDT0_BASE_PTR)
  #define WWDT0_TC                                 WWDT_TC_REG(WWDT0_BASE_PTR)
  #define WWDT0_FEED                               WWDT_FEED_REG(WWDT0_BASE_PTR)
  #define WWDT0_TV                                 WWDT_TV_REG(WWDT0_BASE_PTR)
  #define WWDT0_WARNINT                            WWDT_WARNINT_REG(WWDT0_BASE_PTR)
  #define WWDT0_WINDOW                             WWDT_WINDOW_REG(WWDT0_BASE_PTR)
  /* WWDT1 */
  #define WWDT1_MOD                                WWDT_MOD_REG(WWDT1_BASE_PTR)
  #define WWDT1_TC                                 WWDT_TC_REG(WWDT1_BASE_PTR)
  #define WWDT1_FEED                               WWDT_FEED_REG(WWDT1_BASE_PTR)
  #define WWDT1_TV                                 WWDT_TV_REG(WWDT1_BASE_PTR)
  #define WWDT1_WARNINT                            WWDT_WARNINT_REG(WWDT1_BASE_PTR)
  #define WWDT1_WINDOW                             WWDT_WINDOW_REG(WWDT1_BASE_PTR)
#endif

/*!
 * @}
 */ /* end of group WWDT_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group WWDT_Peripheral */


/*
** End of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic pop
  #else
    #pragma pop
  #endif
#elif defined(__GNUC__)
  /* leave anonymous unions enabled */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=default
#else
  #error Not supported compiler type
#endif

/*!
 * @}
 */ /* end of group Peripheral_defines */


/* ----------------------------------------------------------------------------
   -- SDK Compatibility
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDK_Compatibility_Symbols SDK Compatibility
 * @{
 */

/* No SDK compatibility issues. */

/*!
 * @}
 */ /* end of group SDK_Compatibility_Symbols */


#else /* #if !defined(MCU_MIMXRT555S) */
  /* There is already included the same memory map. Check if it is compatible (has the same major version) */
  #if (MCU_MEM_MAP_VERSION != 0x0300U)
    #if (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING))
      #warning There are included two not compatible versions of memory maps. Please check possible differences.
    #endif /* (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING)) */
  #endif /* (MCU_MEM_MAP_VERSION != 0x0300U) */
#endif  /* #if !defined(MCU_MIMXRT555S) */

