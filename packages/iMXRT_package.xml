<!DOCTYPE CrossStudio_Package_Description_File>
<package name="iMXRT" author="Rowley Associates Ltd" cpu_manufacturer="NXP" cpu_family="iMXRT" version="4.3" crossstudio_versions="8:4.2-" dependencies="CMSIS" build_version="" >
  <group title="System Solutions">
    <file title="iMXRT Loader Solution" file_name="$(TargetsDir)/iMXRT/Loader/Loader.hzp" />
  </group>
  <targets>
    <category name="iMXRT1020">
      <cpu name="MIMXRT1021CAG4A" /> 
      <cpu name="MIMXRT1021CAF4A" />
      <cpu name="MIMXRT1021DAG4A" /> 
      <cpu name="MIMXRT1021DAF4A" />
    </category>
    <category name="iMXRT1050">
      <cpu name="MIMXRT1051CVL5A" />
      <cpu name="MIMXRT1051CVL5B" />
	  <cpu name="MIMXRT1051CVJ5B" />
      <cpu name="MIMXRT1051DVL6A" />
      <cpu name="MIMXRT1051DVL6B" />
      <cpu name="MIMXRT1052CVL5A" />
      <cpu name="MIMXRT1052CVL5B" />
	  <cpu name="MIMXRT1052CVJ5B" />
      <cpu name="MIMXRT1052DVL6A" />
      <cpu name="MIMXRT1052DVL6B" />
	  <cpu name="MIMXRT1052DVJ6B" />
    </category>
    <category name="iMXRT1060">
      <cpu name="MIMXRT1061CVL5A" />
      <cpu name="MIMXRT1061CVJ5A" />
      <cpu name="MIMXRT1061DVL6A" />
      <cpu name="MIMXRT1062CVJ5A" />
      <cpu name="MIMXRT1062CVL5A" />
      <cpu name="MIMXRT1062DVJ6A" />
      <cpu name="MIMXRT1062DVL6A" />
    </category>
    <category name="iMXRT1064">
      <cpu name="MIMXRT1064CVL5A" />
      <cpu name="MIMXRT1064DVL6A" />
    </category>
  </targets>
  <documentation>
    <section name="Creating iMXRT Projects">
      <h5>To create a new iMXRT project</h5>
      <ul>
        <li>Select the <b>File &gt; New &gt; New Project</b> menu item.</li>
        <li>Select the appropriate <b>Generic iMXRT</b> from the <b>Categories</b> list.</li>
        <li>Select the required project template type from the <b>Templates</b> list.</li>
        <li>Set the required project name and location directory.</li>
        <li>Click <b>OK</b>.</li>
      </ul>
      <h5>To import IAR project files supplied with the NXP iMXRT SDK</h5>
      <ul>
        <li>Select <b>File &gt; Import IAR Ewarm / Keil MDK / GPDSC Project</b> menu item.</li>
        <li>Navigate to the directory containing the project e.g. E:/NXP/EVKB-IMXRT1050/boards/evkbimxrt1050/driver_examples/gpio/led_output/iar.</li>
        <li>Select the workspace e.g. igpio_led_output.ewd.</li>
      </ul>
      <h5>To build and debug an application the runs in Flash memory</h5>
      <ul>
        <li>Select the project to work on by using the <b>Project &gt; Set Active Project</b> menu option.</li>
        <li>Select the configuration you require by using the <b>Build &gt; Set Active Build Configuration</b> menu option.</li>
        <li>Right click on the project node in the project explorer and select the <b>FlexSPI (HYPER|QuadSPI)</b> placement property.</li>
        <li>Build the project by using the <b>Build &gt; Build Project</b> menu option.</li>
        <li>Connect to the appropriate target in the target window.</li>
        <li>Download and start debugging the current project by using <b>Debug &gt; Start Debugging</b>.</li>
      </ul>
      <h5>To make the application startup from reset</h5>
      <ul>
        <li>Right click on the project node in the project explorer and select <b>Properties...</b></li>
        <li>In the properties window scroll down to the <b>Preprocessor Options</b> section.</li>
        <li>Type <b>STARTUP_FROM_RESET</b> into the <b>Preprocessor Definitions</b> property editor.</li>
      </ul>
    </section>

    <section name="iMXRT Project Specifics">
      <h5>Target Processor</h5>
      <p>Once a project has been created you can select different target processors by right clicking on the project node in the project 
      explorer and selecting the <b>Target Processor</b> entry.</p>
      <p>Selecting the target processor will specify the memory map that is used for the build and debug. You can view the selected 
      memory map by right clicking on the project node in the project explorer and selecting <b>Edit Memory Map</b>.</p>
       
      <h5>Section Placement</h5>
      <p>CrossStudio for ARM supports iMXRT projects running applications in a number of different
      memory configurations. You can select the memory configuration you require by setting the <b>Section Placement</b> property.</p> 
      <p>For iMXRT projects the set of placements are:</p>
      <ul>
        <li><b>TCM</b> application runs ITCM and DTCM memories.</li>
        <li><b>RAM</b> application runs in OCRAM memory.</li>
        <li><b>FlexSPI (HYPER)</b> application runs in FlexSPI, ITCM, DTCM and OCRAM memories.</li>
		<li><b>FlexSPI (EcoXiP)</b> application runs in FlexSPI, ITCM, DTCM and OCRAM memories.</li>
        <li><b>FlexSPI (QuadSPI)</b> application runs in FlexSPI, ITCM, DTCM and OCRAM memories.</li>
        <li><b>FlexSPI2 (QuadSPI)</b> application runs in FlexSPI2, ITCM, DTCM and OCRAM memories.</li>
      </ul>

      <h5>Stack and Heap Sizes</h5>
      <p>The default stack and heap sizes are set to be 1024 and 1024 bytes by default when a project is created.</p>

      <h5>Target Startup Code</h5>
      <p>The startup code is device specific and is selected with the <b>Target Processor</b> entry.
      There are a set of preprocessor defines that configure the startup code and are documented in the startup file itself. 
      The startup code calls out to a weak symbol <b>SystemInit</b> with the stack pointer set to the end of the <b>stack</b>
      section. The <b>SystemInit</b> function can be used to set the CPU clock or configure any external memories prior to the C 
      initialisation code as such it cannot access initialised static data.</p>

      <p>The startup code declares symbolic names (and weak implementations) for each interrupt service routine,
      for example the <b>RTC_SEC_IRQHandler</b> function will be called when the RTC second match interrupt occurs. 
      The names of the interrupt service routines match those in the CMSIS header file. If you are porting code that
      has application specific interrupt service routines then you can use preprocessor definitions
      to rename the declared symbolic name for example <b>RTC_SEC_IRQHandler=RTC_SEC_DriverIRQHandler</b>.</p>

      <h5>Target Reset Script</h5>
      <p>The reset script <a href="file:$(TargetsDir)/iMXRT/iMXRT_Target.js">iMXRT_Target.js</a> is used by the
      debugger to reset the target board.</p>
      
    </section>
  </documentation>
  <history>
    <version name="4.3">
      <description>FlexSPI-Configurations are also using TCM- and OCRAM-memory now</description>
	  <description>Added SDRAM-Segment to Memory-Map</description>
      <description>Add support for iMXRT1061 and fixed some naming issues</description>
	  <description>Added support for Adesto EcoXiP Flash</description>
    </version>
    <version name="4.2">
      <description>Add support for iMXRT1060 and iMXRT1064 devices.</description>
    </version>
    <version name="4.1">
      <description>Now using LIBMEM RPC FLM loader.</description>
    </version>
    <version name="4.0">
      <description>Initial Release.</description>
    </version>
  </history>
</package>
